Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv/biccos_all_selective_mts.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv
  path: models/sdp/cifar_cnn_a_adv.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_30585
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 05:41:17 2024 on r23g0003.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv/biccos_all_selective_mts.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [218]; unstable size 218; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 218] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 218] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 97] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.15867996,  2.57397318, -0.32336402, -0.12450504,  0.40432671,
          0.56075501,  0.24401063,  3.10249186,  2.30172944]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989],
         [-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12139088,  0.19289398]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 5.2824 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [567]; unstable size 567; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 567] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 567] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 567] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 162] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.13653469, -0.81675267,  7.20471907,  7.60528660,  7.75196028,
          8.15055943,  6.22120667,  7.95112467,  6.37312317]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:01<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.29230642,  1.39088631, -7.69417095, -8.36273766, -8.14110756,
          -8.96644974, -7.15948677, -8.63516712, -6.20971012,  1.18852425]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20236206]]], device='cuda:0')
number of violation:  1
Attack finished in 1.1161 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.1902 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38900280,  -6.91815758, -13.39404202, -12.50848293, -12.34240627,
         -13.34833145, -12.47480679, -13.81170845, -10.09896183,  -8.65394974]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 799] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 799] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 219] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81504011, 4.21952629, 3.42959118, 3.38334274, 4.03887367, 3.68367100,
         4.85273170, 1.66043139, 0.65432954]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0478 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 471] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 471] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 208] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.96806812,  7.51881886,  0.34542710,  0.43790007, -0.23603070,
          3.05391550, -1.87563026,  7.75412416,  5.88288021]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467],
         [-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59351778, -0.95928764]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 543] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 543] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 224] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20494175,  3.45831966, -1.40828764,  1.23128533,  0.91528034,
          0.49897885,  1.02173948,  3.54240751,  2.59704590]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
           -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.35084915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [658]; unstable size 658; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 658] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 658] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 658] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 200] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.36226153,  5.20612240,  0.11421609, -0.45663366, -0.35881928,
          1.67416489,  1.85006595,  4.62576962,  5.01755524]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784],
         [-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03835812,  0.16921502]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0294 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0736 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 529] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 529] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 192] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41059232,  2.25627041,  3.81135964,  2.82651472,  4.25359440,
          4.02583885,  2.31334543, -1.35637188,  0.51038694]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758],
         [ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.03144741, -0.17737579]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 503] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 503] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 253] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.85433102,  4.63593197,  0.09867120,  1.33992827, -1.07176208,
          1.69816685,  1.94883561,  4.31601524,  5.46722889]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24038744,  -9.28610897,  -3.84454465,  -5.20589828,  -2.66719246,
           -5.68954802,  -3.06507778,  -6.37724495,  -8.96725273, -10.02994823]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39788532]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0716 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.93469334, -20.12154388, -17.33457947, -19.86049843, -20.21372986,
         -21.25618935, -22.65778542, -22.05707359, -17.64817047, -20.80877304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1012]; unstable size 1012; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 1012] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 1012] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1012] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 126] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23773289, 2.69126415, 5.14333248, 5.34886694, 6.31123543, 7.75378227,
         7.14197063, 2.92753410, 5.99536991]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0387 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 483] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 483] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 223] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44218993,  3.89411831, -1.74409604, -0.80226839, -0.57978749,
         -0.20545280,  1.59700751, -1.08158171,  2.85933161]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971],
         [ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56590080, -0.65735245, -0.54632902,  0.37522030,  0.63700628,
           0.30653763]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0865 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [326]; unstable size 326; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 326] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 326] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 98] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.76745200,  4.58752918, -0.99277103, -1.30379093,  1.80976796,
         -2.48497868,  3.87898970,  2.81910610,  3.04527569]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254],
         [ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44576883, -0.77341509, -1.91033173]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0500 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [507]; unstable size 507; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 507] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 507] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 507] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 252] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.93055713,  5.50861359,  2.43715620, -0.28564250,  2.95803714,
          1.64144301,  2.49058819,  4.06993961,  5.13847542]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.16it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.85260201, -9.94958401, -2.69204354, -5.95113659, -2.83771229,
          -6.45710039, -5.35251665, -5.97749758, -8.52292919, -9.41183758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.14566875]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1119 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.60955047607422
alpha/beta optimization time: 4.217318534851074
initial alpha-crown bounds: tensor([[ 2.00031996,  5.62875319,  2.49428296, -0.20550382,  3.01036286,
          1.72182679,  2.55286407,  4.16995335,  5.23668909]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20550382137298584
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.6185598373413
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 195.61851954460144
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 195.618412733078
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 195.6183705329895
Verifying property 3 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20550382]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
        -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20550382]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 507
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 252
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 782
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00015664100646972656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20550310611724854
10 lb beta sum: 0.0, worst -0.20550429821014404
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5647    transfer 0.0001    finalize 0.0004    func 0.5655    
Accumulated time: func 0.5655    prepare 0.0002    bound 0.5647    transfer 0.0001    finalize 0.0004    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 80] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 40] 
split level 8: [/input, 377] 
split level 9: [/input, 392] 
split level 10: [/input, 393] 
split level 11: [/input-8, 443] 
split level 12: [/input, 444] 
split level 13: [/input-12, 60] 
split level 14: [/input-8, 1749] 
split level 15: [/input-8, 1443] 
split level 16: [/input-8, 2042] 
split level 17: [/input-8, 1411] 
split level 18: [/input-8, 1323] 
split level 19: [/input-8, 1260] 
split level 20: [/input, 344] 
split level 21: [/input-8, 881] 
split level 22: [/input-8, 1964] 
split level 23: [/input, 343] 
split level 24: [/input-8, 1436] 
split level 25: [/input-8, 465] 
split level 26: [/input-8, 1388] 
split level 27: [/input-8, 818] 
split level 28: [/input-8, 2043] 
split level 29: [/input-8, 585] 
split level 30: [/input-8, 1251] 
split level 31: [/input-8, 2044] 
split level 32: [/input-8, 265] 
split level 33: [/input, 428] 
split level 34: [/input-8, 273] 
split level 35: [/input-8, 1389] 
split level 36: [/input, 378] 
split level 37: [/input-8, 497] 
split level 38: [/input-12, 99] 
split level 39: [/input-8, 292] 
split level 40: [/input-8, 423] 
split level 41: [/input-8, 115] 
split level 42: [/input-8, 1747] 
split level 43: [/input, 327] 
split level 44: [/input-8, 2032] 
split level 45: [/input-8, 848] 
split level 46: [/input-8, 610] 
split level 47: [/input-8, 849] 
split level 48: [/input, 425] 
split level 49: [/input, 380] 
split level 50: [/input-8, 1410] 
split level 51: [/input, 3161] 
split level 52: [/input, 3493] 
split level 53: [/input-8, 1493] 
split level 54: [/input-8, 1865] 
split level 55: [/input-8, 282] 
split level 56: [/input-8, 1428] 
split level 57: [/input, 3163] 
split level 58: [/input-8, 1873] 
split level 59: [/input-8, 288] 
split level 60: [/input-8, 2040] 
split level 61: [/input-8, 83] 
split level 62: [/input-8, 1741] 
split level 63: [/input-8, 469] 
split level 64: [/input, 87] 
split level 65: [/input, 2412] 
split level 66: [/input, 2166] 
split level 67: [/input, 3178] 
split level 68: [/input-8, 1386] 
split level 69: [/input, 1602] 
split level 70: [/input, 3400] 
split level 71: [/input, 1612] 
split level 72: [/input-8, 1739] 
split level 73: [/input, 329] 
split level 74: [/input, 3479] 
split level 75: [/input-8, 1437] 
split level 76: [/input, 3130] 
split level 77: [/input, 1318] 
split level 78: [/input, 3158] 
split level 79: [/input, 2164] 
split level 80: [/input, 2236] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 407] 
split level 83: [/input, 3461] 
split level 84: [/input, 2181] 
split level 85: [/input, 3157] 
split level 86: [/input-8, 1442] 
split level 87: [/input-8, 883] 
split level 88: [/input-8, 278] 
split level 89: [/input, 3172] 
split level 90: [/input, 103] 
split level 91: [/input, 3927] 
split level 92: [/input, 1302] 
split level 93: [/input, 1460] 
split level 94: [/input-8, 518] 
split level 95: [/input-8, 1014] 
split level 96: [/input-8, 1772] 
split level 97: [/input, 119] 
split level 98: [/input, 1448] 
split level 99: [/input, 139] 
split level 100: [/input, 1579] 
split level 101: [/input-8, 1758] 
split level 102: [/input, 3181] 
split level 103: [/input-8, 1119] 
split level 104: [/input-8, 2041] 
split level 105: [/input, 2091] 
split level 106: [/input, 364] 
split level 107: [/input, 1370] 
split level 108: [/input, 3528] 
split level 109: [/input, 1462] 
split level 110: [/input-8, 1731] 
split level 111: [/input, 3475] 
split level 112: [/input, 3148] 
split level 113: [/input-8, 1132] 
split level 114: [/input-8, 1730] 
split level 115: [/input, 373] 
split level 116: [/input-8, 398] 
split level 117: [/input, 2134] 
split level 118: [/input, 3114] 
split level 119: [/input, 3971] 
split level 120: [/input-8, 1979] 
split level 121: [/input-8, 521] 
split level 122: [/input-8, 1334] 
split level 123: [/input, 1561] 
split level 124: [/input, 1562] 
split level 125: [/input, 3507] 
split level 126: [/input, 3367] 
split level 127: [/input, 1578] 
split level 128: [/input, 3384] 
split level 129: [/input, 385] 
split level 130: [/input, 1336] 
split level 131: [/input, 132] 
split level 132: [/input, 2397] 
split level 133: [/input, 3398] 
split level 134: [/input, 1396] 
split level 135: [/input, 1586] 
split level 136: [/input, 3972] 
split level 137: [/input, 2302] 
split level 138: [/input, 3508] 
split level 139: [/input, 3383] 
split level 140: [/input, 2331] 
split level 141: [/input, 442] 
split level 142: [/input, 1386] 
split level 143: [/input-8, 1006] 
split level 144: [/input, 3145] 
split level 145: [/input, 1563] 
split level 146: [/input, 2385] 
split level 147: [/input-8, 1732] 
split level 148: [/input, 3351] 
split level 149: [/input, 547] 
split level 150: [/input, 2347] 
split level 151: [/input, 2136] 
split level 152: [/input, 3143] 
split level 153: [/input, 1335] 
split level 154: [/input, 3196] 
split level 155: [/input-8, 912] 
split level 156: [/input, 1485] 
split level 157: [/input, 2137] 
split level 158: [/input, 3205] 
split level 159: [/input, 695] 
split level 160: [/input, 325] 
split level 161: [/input, 3214] 
split level 162: [/input, 1354] 
split level 163: [/input, 1413] 
split level 164: [/input, 3397] 
split level 165: [/input, 2364] 
split level 166: [/input, 1596] 
split level 167: [/input, 1421] 
split level 168: [/input, 3142] 
split level 169: [/input, 2981] 
split level 170: [/input, 2163] 
split level 171: [/input, 2627] 
split level 172: [/input, 3940] 
split level 173: [/input-8, 485] 
split level 174: [/input, 71] 
split level 175: [/input, 2227] 
split level 176: [/input, 3529] 
split level 177: [/input, 2245] 
split level 178: [/input, 1342] 
split level 179: [/input, 1746] 
split level 180: [/input, 570] 
split level 181: [/input, 2286] 
split level 182: [/input, 633] 
split level 183: [/input, 569] 
split level 184: [/input, 1720] 
split level 185: [/input, 3190] 
split level 186: [/input, 3221] 
split level 187: [/input, 3156] 
split level 188: [/input-8, 2047] 
split level 189: [/input, 553] 
split level 190: [/input, 1382] 
split level 191: [/input, 3490] 
split level 192: [/input, 2382] 
split level 193: [/input, 1326] 
split level 194: [/input, 370] 
split level 195: [/input, 3334] 
split level 196: [/input, 3222] 
split level 197: [/input, 3364] 
split level 198: [/input, 2299] 
split level 199: [/input, 3339] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2053682804107666
10 lb beta sum: 0.0, worst -0.2053619623184204
Time: prepare 0.0115    bound 0.7675    transfer 0.0034    finalize 0.0030    func 0.7881    
Accumulated time: func 1.3536    prepare 0.0220    bound 1.3322    transfer 0.0035    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.14420795) min lb tensor(-0.20535767)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.027983903884887695 
BICCOS Cumulative time: 0.027983903884887695
Preprocessing time: 0.026529788970947266 Inference time: 0.0010204315185546875 Add cuts time: 0.00010371208190917969 Cut analysis time: 0.0003299713134765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19871 (1), -0.19860 (1), -0.19856 (1), -0.19850 (1), -0.19802 (1), -0.19793 (1), -0.19790 (1), -0.19784 (1), -0.19784 (1), -0.19732 (1), -0.19726 (1), -0.19718 (1), -0.19706 (1), -0.19678 (1), -0.19572 (1), -0.19522 (1), -0.19506 (1), -0.19442 (1), -0.19420 (1), -0.19400 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.7690    set_bounds 0.0083    solve 0.7882    add 0.1831    
Accumulated time: pickout 0.0004    decision 0.7690    set_bounds 0.0083    solve 0.7882    add 0.1831    
Current (lb-rhs): -0.19870805740356445
50 domains visited
Cumulative time: 2.3911752700805664

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 58] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] 
split level 2: [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18420100212097168
10 lb beta sum: 0.3620595335960388, worst -0.180566668510437
Time: prepare 0.0074    bound 1.2287    transfer 0.0015    finalize 0.0025    func 1.2428    
Accumulated time: func 2.5964    prepare 0.0297    bound 2.5609    transfer 0.0051    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.19709575) min lb tensor(-0.18055820)
Number of Verified Splits: 62 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.015542745590209961 
BICCOS Cumulative time: 0.043526649475097656
Preprocessing time: 0.011422872543334961 Inference time: 0.0023772716522216797 Add cuts time: 0.0012505054473876953 Cut analysis time: 0.000492095947265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07107 (2), -0.07020 (2), -0.07010 (2), -0.06970 (2), -0.06961 (2), -0.06954 (2), -0.06947 (2), -0.06936 (2), -0.06896 (2), -0.06886 (2), -0.06861 (2), -0.06836 (2), -0.06817 (2), -0.06790 (2), -0.06783 (2), -0.06765 (2), -0.06741 (2), -0.06646 (2), -0.06587 (2), -0.06522 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0219    set_bounds 0.0117    solve 1.2429    add 0.0816    
Accumulated time: pickout 0.0016    decision 0.7909    set_bounds 0.0200    solve 2.0311    add 0.2647    
Current (lb-rhs): -0.0710718035697937
100 domains visited
Cumulative time: 3.766183614730835

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 35] [/input-12, 58] [/input-12, 35] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07283675670623779
10 lb beta sum: 0.7891350388526917, worst -0.011321842670440674
Time: prepare 0.0073    bound 0.1186    transfer 0.0011    finalize 0.0022    func 0.1323    
Accumulated time: func 2.7288    prepare 0.0373    bound 2.6795    transfer 0.0062    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.60021609) min lb tensor(0.00030065)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.0358729362487793 
BICCOS Cumulative time: 0.07939958572387695
Preprocessing time: 0.011173248291015625 Inference time: 0.015959978103637695 Add cuts time: 0.008368253707885742 Cut analysis time: 0.0003714561462402344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0150    solve 0.1324    add 0.0191    
Accumulated time: pickout 0.0026    decision 0.8104    set_bounds 0.0350    solve 2.1636    add 0.2839    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41, 35]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([9.04853449e-15, 6.79248720e-02, 1.18854299e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41, 35]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([9.04853449e-15, 6.79248720e-02, 4.85807583e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41]), tensor([-1.,  1.]), tensor([0, 0]), tensor([9.04853449e-15, 1.73319981e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4, 41]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.59464752e-16, 9.56279486e-02, 1.06057771e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4, 41]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.59464752e-16, 9.56279486e-02, 1.73189685e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4]), tensor([1., 1.]), tensor([0, 0]), tensor([1.59464752e-16, 2.47695316e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1509079933166504
10 lb beta sum: 0.8215807676315308, worst -0.03139698505401611
Time: prepare 0.0004    bound 0.1169    transfer 0.0001    finalize 0.0002    func 0.1176    
Accumulated time: func 2.8464    prepare 0.0377    bound 2.7963    transfer 0.0063    finalize 0.0083    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 61] 
split level 4: [/input-12, 80] 
split level 5: [/input-12, 40] 
split level 6: [/input, 393] 
split level 7: [/input-8, 1411] 
cut re-enabled after branching node selection
0 lb beta sum: 2.149303913116455, worst -0.024674609303474426
10 lb beta sum: 2.149303913116455, worst -0.02450592815876007
Time: prepare 0.0125    bound 0.1186    transfer 0.0005    finalize 0.0012    func 0.1344    
Accumulated time: func 2.9808    prepare 0.0506    bound 2.9149    transfer 0.0068    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(1.91298115) min lb tensor(-0.02444024)
Number of Verified Splits: 252 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.149303913116455, worst -0.08635373413562775
10 lb beta sum: 2.1975347995758057, worst -0.031162619590759277
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.2916831970214844 
BICCOS Cumulative time: 0.37108278274536133
Preprocessing time: 0.0074732303619384766 Inference time: 0.2772979736328125 Add cuts time: 0.006547451019287109 Cut analysis time: 0.00036454200744628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02444 (8), -0.02071 (8), -0.01977 (8), -0.01604 (8), 
Length of domains: 4
Time: pickout 0.0004    decision 0.0217    set_bounds 0.0284    solve 0.1345    add 0.0007    
Accumulated time: pickout 0.0031    decision 0.8321    set_bounds 0.0634    solve 2.2980    add 0.2846    
Current (lb-rhs): -0.02444024384021759
104 domains visited
Cumulative time: 4.600436687469482

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 377] 
split level 1: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
split level 2: [/input-8, 1251] [/input-8, 1251] [/input-8, 1251] [/input-8, 1251] 
split level 3: [/input-8, 2043] [/input-8, 2043] [/input-8, 2043] [/input-8, 2043] 
split level 4: [/input, 428] [/input, 378] [/input, 428] [/input, 378] 
split level 5: [/input, 378] [/input, 428] [/input, 378] [/input, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 2.149303913116455, worst -0.009554997086524963
10 lb beta sum: 2.149303913116455, worst -0.009326055645942688
Time: prepare 0.0123    bound 0.1131    transfer 0.0005    finalize 0.0012    func 0.1288    
Accumulated time: func 3.1095    prepare 0.0632    bound 3.0279    transfer 0.0074    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.01326971) min lb tensor(-0.00924583)
Number of Verified Splits: 207 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.028028488159179688 
BICCOS Cumulative time: 0.399111270904541
Preprocessing time: 0.007430315017700195 Inference time: 0.019162893295288086 Add cuts time: 0.00102996826171875 Cut analysis time: 0.00040531158447265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00925 (14), -0.00907 (14), -0.00883 (14), -0.00865 (14), -0.00808 (14), -0.00790 (14), -0.00784 (14), -0.00767 (14), -0.00766 (14), -0.00748 (14), -0.00742 (14), -0.00725 (14), -0.00668 (14), -0.00650 (14), -0.00626 (14), -0.00608 (14), -0.00468 (14), -0.00462 (14), -0.00452 (14), -0.00450 (14), 
Length of domains: 49
Time: pickout 0.0009    decision 0.0199    set_bounds 0.0257    solve 0.1288    add 0.0011    
Accumulated time: pickout 0.0039    decision 0.8520    set_bounds 0.0891    solve 2.4269    add 0.2857    
Current (lb-rhs): -0.009245827794075012
153 domains visited
Cumulative time: 4.805948257446289

BaB round 3
batch: 49
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] 
split level 1: [/input-8, 610] [/input-8, 1389] [/input-8, 610] [/input-8, 292] [/input-8, 1389] [/input-8, 292] [/input-8, 1389] [/input-8, 610] [/input-8, 1389] [/input-8, 610] 
split level 2: [/input-8, 292] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 610] [/input-8, 610] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0045626163482666016
10 lb beta sum: 0.06593700498342514, worst -0.0014861226081848145
Time: prepare 0.0096    bound 1.3807    transfer 0.0011    finalize 0.0018    func 1.3958    
Accumulated time: func 4.5053    prepare 0.0730    bound 4.4086    transfer 0.0084    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.01357901) min lb tensor(-0.00144106)
Number of Verified Splits: 376 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.05169081687927246 
BICCOS Cumulative time: 0.4508020877838135
Preprocessing time: 0.011321783065795898 Inference time: 0.0391392707824707 Add cuts time: 0.0007679462432861328 Cut analysis time: 0.00046181678771972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00144 (17), -0.00126 (17), -0.00091 (17), -0.00081 (17), -0.00074 (17), -0.00066 (17), -0.00064 (17), -0.00053 (17), -0.00048 (17), -0.00035 (17), -0.00029 (17), -0.00024 (17), -0.00011 (17), -0.00006 (17), -0.00006 (17), -0.00003 (17), 
Length of domains: 16
Time: pickout 0.0015    decision 0.0164    set_bounds 0.0317    solve 1.3959    add 0.0009    
Accumulated time: pickout 0.0054    decision 0.8684    set_bounds 0.1208    solve 3.8228    add 0.2866    
Current (lb-rhs): -0.0014410614967346191
169 domains visited
Cumulative time: 6.305638551712036

BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] 
split level 1: [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] 
split level 2: [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] 
split level 3: [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.003063380718231201

all verified at 0th iter
Time: prepare 0.0066    bound 0.0058    transfer 0.0005    finalize 0.0011    func 0.0156    
Accumulated time: func 4.5209    prepare 0.0798    bound 4.4144    transfer 0.0089    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(0.01491719) min lb tensor(0.00306338)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.007477521896362305 
BICCOS Cumulative time: 0.4582796096801758
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0144    set_bounds 0.0228    solve 0.0156    add 0.0003    
Accumulated time: pickout 0.0069    decision 0.8828    set_bounds 0.1437    solve 3.8384    add 0.2869    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
169 domains visited
Cumulative time: 6.368551731109619


Properties batch 4, size 1
Remaining timeout: 189.04506969451904
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 189.0449857711792
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 189.04495525360107
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 189.04491806030273
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 189.04489493370056
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 10.9552 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 114, 1, 436] with unstable size 113 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 436] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [113]; unstable size 113; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 113] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 113] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.80846572e-01,  1.01449513e+00, -8.60395491e-01,  3.58942151e-03,
          1.15603137e+00, -9.08453882e-01,  4.73845720e+00,  1.30274677e+00,
          2.83696055e-01]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719],
         [-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17930365, -0.24762583]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0804 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 677] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 677] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 164] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.35580921,  2.29579544,  4.09076500,  3.52531242,  5.89760590,
          4.21795559,  5.18644333, -0.70376539,  1.22269106]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051],
         [-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08182335,  0.58155918]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]],


         [[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.58788013, -3.57877111, -7.49758530, -6.42473507, -6.46546555,
         -7.68810511, -6.21870279, -6.45115232, -5.74132729, -1.41073096]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 534] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 534] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 185] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.82803464, 1.00371790, 4.58163738, 3.52479601, 3.45554590, 4.66323185,
         3.15355444, 3.39953923, 2.80839324]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 492] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 492] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 187] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35873747,  4.47410536,  0.94619048,  0.06511009, -0.33263916,
          1.83395362,  0.21094537,  4.77025223,  3.27124619]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.96010399, -6.20732403, -2.32285213, -0.28913876, -1.16081107,
          -0.13703477, -2.92448115, -1.63956416, -6.15403843, -4.97522259]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15210399]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 362, 1, 788] with unstable size 361 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 788] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [361]; unstable size 361; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 361] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 361] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24375093,  3.81155181, -1.93120444, -1.85189080, -0.03242284,
         -1.13493085,  0.07367373,  2.53733730,  3.71830559]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095],
         [-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63712549, -0.44056845,  0.43596745,  0.27457762]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0850 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48207045,  -2.39753056,  -9.58371258, -10.52106094,  -9.25177765,
         -11.82708836, -10.46574306, -11.05204582,  -6.78091049,  -5.65733051]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [502]; unstable size 502; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 502] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 502] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 502] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 253] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89075375, 4.35961342, 5.77320766, 4.46269035, 6.95126247, 5.95177555,
         6.24258089, 2.54485893, 2.28885174]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0301 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 512] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 512] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.63812399,  6.80160284, -0.75694084,  2.17035389, -0.29967880,
          1.59824824,  1.65513277,  7.41604805,  5.91091490]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253],
         [-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00134563,  0.69211102]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0774 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 547] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 547] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 259] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.43207622,  6.44367361,  0.19957781, -0.46666574,  0.09526157,
          0.46659350,  2.60346079,  3.93457699,  6.28853273]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.68204021, -16.05737877,  -8.96092319,  -8.17651176,  -8.15779305,
           -8.62596226,  -9.30371189, -11.61334324, -13.34238148, -16.04029083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01871872]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0766 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.99751091, -10.60476208,  -5.80764198,  -6.15668106,  -6.26862431,
          -6.07673597,  -4.08238983,  -8.79667854,  -9.22789669, -10.72688580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [601]; unstable size 601; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 601] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 601] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 601] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 286] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.22418547, 4.25854826, 0.62012935, 0.93473482, 0.88097048, 0.60569525,
         2.78608966, 3.20536160, 4.78958416]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.39633656, -10.81733418,  -8.14680481,  -7.67903614,  -8.47020626,
          -6.77577496, -10.40852451,  -8.02430439, -10.83304310,  -9.56988335]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 512] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 512] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 171] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18678737, 2.55919075, 0.31564903, 0.61779267, 0.64823699, 2.52021670,
         0.37382305, 2.55972385, 1.61684656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61524105, -12.71203899, -11.56439686, -11.98183823, -11.60697556,
         -12.97468090, -12.19276619, -14.18572140,  -5.67168808, -12.38231468]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 599] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 599] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 172] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.42892742, 5.35214615, 4.30807924, 4.89422464, 4.33142805, 5.69092751,
         5.16717911, 6.89458752, 4.89000034]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84393740, -7.84841537, -4.07208776, -2.13655066, -4.59707069,
         -1.22025633, -5.05424547, -3.93261433, -4.29843807, -6.48314619]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 499] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 499] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 184] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.94525337, 4.37971783, 1.50863886, 0.51084435, 2.10668588, 2.74752998,
         1.74771571, 1.16706753, 3.61705399]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0476 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 305, 1, 778] with unstable size 304 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 778] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [304]; unstable size 304; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 304] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 304] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.83722591,  1.20715714,  3.54842615,  1.72621536,  4.45857334,
          2.37408161,  3.37172985,  0.75684643,  1.53906155]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.18222904,  -8.04493713, -10.81180954, -13.20889759, -11.28295040,
          -14.31022644, -12.04443455, -13.26400185,  -9.93011951, -10.47806263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13729191]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1136 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.560537338256836
alpha/beta optimization time: 1.3375778198242188
initial alpha-crown bounds: tensor([[-0.67048359,  1.36126232,  3.71649456,  1.91702461,  4.64379501,
          2.51711750,  3.56976032,  0.87808561,  1.62748027]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6704835891723633
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.48089456558228
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.67048359]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
        -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.67048359]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 778
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 300
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 1101
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011181831359863281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6704788208007812
10 lb beta sum: 0.0, worst -0.6704940795898438
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 1] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 36] 
split level 7: [/input-12, 92] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 33] 
split level 10: [/input-12, 93] 
split level 11: [/input-12, 37] 
split level 12: [/input-8, 1511] 
split level 13: [/input-8, 683] 
split level 14: [/input-8, 670] 
split level 15: [/input-12, 90] 
split level 16: [/input-8, 1880] 
split level 17: [/input-8, 1045] 
split level 18: [/input-8, 1503] 
split level 19: [/input-8, 1446] 
split level 20: [/input-8, 1875] 
split level 21: [/input-8, 677] 
split level 22: [/input-8, 603] 
split level 23: [/input-8, 1883] 
split level 24: [/input-8, 1964] 
split level 25: [/input-8, 1509] 
split level 26: [/input-8, 986] 
split level 27: [/input-8, 158] 
split level 28: [/input-8, 1018] 
split level 29: [/input-12, 80] 
split level 30: [/input-8, 1626] 
split level 31: [/input-8, 987] 
split level 32: [/input-8, 811] 
split level 33: [/input-8, 1750] 
split level 34: [/input-8, 988] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 1315] 
split level 37: [/input-8, 1069] 
split level 38: [/input-8, 1425] 
split level 39: [/input-8, 1738] 
split level 40: [/input-8, 1055] 
split level 41: [/input-8, 981] 
split level 42: [/input, 363] 
split level 43: [/input-8, 1020] 
split level 44: [/input-8, 1737] 
split level 45: [/input-8, 1017] 
split level 46: [/input-8, 1447] 
split level 47: [/input-8, 1019] 
split level 48: [/input, 3468] 
split level 49: [/input, 396] 
split level 50: [/input-8, 102] 
split level 51: [/input-8, 1375] 
split level 52: [/input-8, 82] 
split level 53: [/input-8, 1251] 
split level 54: [/input, 2518] 
split level 55: [/input, 1767] 
split level 56: [/input-8, 633] 
split level 57: [/input, 1733] 
split level 58: [/input, 2531] 
split level 59: [/input, 2440] 
split level 60: [/input-8, 1745] 
split level 61: [/input, 332] 
split level 62: [/input-8, 1494] 
split level 63: [/input, 3271] 
split level 64: [/input-8, 944] 
split level 65: [/input, 1418] 
split level 66: [/input, 3483] 
split level 67: [/input, 3306] 
split level 68: [/input-8, 1985] 
split level 69: [/input-8, 1052] 
split level 70: [/input-8, 1062] 
split level 71: [/input, 1766] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 1421] 
split level 74: [/input, 1420] 
split level 75: [/input-8, 81] 
split level 76: [/input, 3304] 
split level 77: [/input, 1750] 
split level 78: [/input-8, 1132] 
split level 79: [/input, 2519] 
split level 80: [/input, 395] 
split level 81: [/input, 390] 
split level 82: [/input-8, 952] 
split level 83: [/input, 854] 
split level 84: [/input-8, 1279] 
split level 85: [/input, 2538] 
split level 86: [/input-8, 1454] 
split level 87: [/input, 3256] 
split level 88: [/input, 2517] 
split level 89: [/input-8, 1419] 
split level 90: [/input-8, 937] 
split level 91: [/input, 1749] 
split level 92: [/input, 3704] 
split level 93: [/input, 1436] 
split level 94: [/input-8, 969] 
split level 95: [/input, 2185] 
split level 96: [/input-8, 1021] 
split level 97: [/input-8, 1331] 
split level 98: [/input, 2530] 
split level 99: [/input-8, 1867] 
split level 100: [/input-8, 1322] 
split level 101: [/input, 1809] 
split level 102: [/input, 3688] 
split level 103: [/input, 3302] 
split level 104: [/input, 2539] 
split level 105: [/input-8, 950] 
split level 106: [/input, 2182] 
split level 107: [/input-8, 1986] 
split level 108: [/input, 1754] 
split level 109: [/input, 3669] 
split level 110: [/input, 2198] 
split level 111: [/input, 1753] 
split level 112: [/input, 3222] 
split level 113: [/input, 162] 
split level 114: [/input-8, 454] 
split level 115: [/input, 3305] 
split level 116: [/input-8, 1477] 
split level 117: [/input, 3577] 
split level 118: [/input-8, 1739] 
split level 119: [/input, 1768] 
split level 120: [/input, 4003] 
split level 121: [/input, 3026] 
split level 122: [/input, 2454] 
split level 123: [/input, 3283] 
split level 124: [/input-8, 1987] 
split level 125: [/input-8, 1984] 
split level 126: [/input, 2536] 
split level 127: [/input, 1405] 
split level 128: [/input, 1778] 
split level 129: [/input-8, 1131] 
split level 130: [/input, 2400] 
split level 131: [/input, 3308] 
split level 132: [/input-8, 1559] 
split level 133: [/input, 1779] 
split level 134: [/input, 1670] 
split level 135: [/input, 2515] 
split level 136: [/input, 3226] 
split level 137: [/input-8, 455] 
split level 138: [/input, 2166] 
split level 139: [/input, 3281] 
split level 140: [/input, 3765] 
split level 141: [/input, 3284] 
split level 142: [/input, 3275] 
split level 143: [/input-8, 1988] 
split level 144: [/input, 1780] 
split level 145: [/input, 1746] 
split level 146: [/input, 1827] 
split level 147: [/input-8, 945] 
split level 148: [/input, 1769] 
split level 149: [/input, 1841] 
split level 150: [/input, 1771] 
split level 151: [/input, 1842] 
split level 152: [/input, 3689] 
split level 153: [/input, 1745] 
split level 154: [/input, 1748] 
split level 155: [/input, 1747] 
split level 156: [/input, 3784] 
split level 157: [/input-8, 1935] 
split level 158: [/input, 3708] 
split level 159: [/input-8, 1361] 
split level 160: [/input, 3707] 
split level 161: [/input, 3723] 
split level 162: [/input, 3274] 
split level 163: [/input, 1858] 
split level 164: [/input, 654] 
split level 165: [/input, 376] 
split level 166: [/input, 1770] 
split level 167: [/input-8, 970] 
split level 168: [/input, 242] 
split level 169: [/input, 1099] 
split level 170: [/input, 3042] 
split level 171: [/input-8, 1934] 
split level 172: [/input, 3257] 
split level 173: [/input, 3685] 
split level 174: [/input, 2206] 
split level 175: [/input, 3796] 
split level 176: [/input-8, 905] 
split level 177: [/input, 3028] 
split level 178: [/input-8, 1241] 
split level 179: [/input, 3455] 
split level 180: [/input, 1810] 
split level 181: [/input, 3280] 
split level 182: [/input, 1857] 
split level 183: [/input, 2124] 
split level 184: [/input, 2673] 
split level 185: [/input, 1811] 
split level 186: [/input, 3794] 
split level 187: [/input-8, 1271] 
split level 188: [/input-8, 1332] 
split level 189: [/input, 4032] 
split level 190: [/input, 282] 
split level 191: [/input, 2550] 
split level 192: [/input, 3795] 
split level 193: [/input, 1083] 
split level 194: [/input, 1781] 
split level 195: [/input, 2497] 
split level 196: [/input, 1773] 
split level 197: [/input, 3190] 
split level 198: [/input, 399] 
split level 199: [/input, 3044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6703691482543945
10 lb beta sum: 0.0, worst -0.6703081130981445
Time: prepare 0.0118    bound 0.0978    transfer 0.0030    finalize 0.0026    func 0.1178    
Accumulated time: func 0.1711    prepare 0.0220    bound 0.1506    transfer 0.0031    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.11181831) min lb tensor(-0.67029381)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010117292404174805 
BICCOS Cumulative time: 0.010117292404174805
Preprocessing time: 0.009715795516967773 Inference time: 0.00012040138244628906 Add cuts time: 6.222724914550781e-05 Cut analysis time: 0.00021886825561523438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.65138 (1), -0.65053 (1), -0.65005 (1), -0.64936 (1), -0.64913 (1), -0.64889 (1), -0.64860 (1), -0.64809 (1), -0.64770 (1), -0.64767 (1), -0.64749 (1), -0.64669 (1), -0.64646 (1), -0.64573 (1), -0.64560 (1), -0.64386 (1), -0.64294 (1), -0.64213 (1), -0.64028 (1), -0.63976 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5125    set_bounds 0.0085    solve 0.1179    add 0.0730    
Accumulated time: pickout 0.0003    decision 0.5125    set_bounds 0.0085    solve 0.1179    add 0.0730    
Current (lb-rhs): -0.6513824462890625
50 domains visited
Cumulative time: 0.7975544929504395

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 60] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6120424270629883
10 lb beta sum: 0.4563992917537689, worst -0.6019124984741211
Time: prepare 0.0069    bound 0.1154    transfer 0.0007    finalize 0.0021    func 0.1277    
Accumulated time: func 0.2988    prepare 0.0292    bound 0.2660    transfer 0.0038    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.59055036) min lb tensor(-0.60187244)
Number of Verified Splits: 15 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012936115264892578 
BICCOS Cumulative time: 0.023053407669067383
Preprocessing time: 0.01130819320678711 Inference time: 0.0006537437438964844 Add cuts time: 0.0002887248992919922 Cut analysis time: 0.0006854534149169922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35769 (2), -0.35667 (2), -0.35611 (2), -0.35604 (2), -0.35303 (2), -0.34882 (2), -0.34850 (2), -0.34842 (2), -0.34411 (2), -0.34062 (2), -0.34001 (2), -0.33913 (2), -0.33796 (2), -0.33411 (2), -0.33292 (2), -0.33279 (2), -0.32866 (2), -0.32162 (2), -0.30974 (2), -0.30427 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0126    solve 0.1278    add 0.0764    
Accumulated time: pickout 0.0014    decision 0.5321    set_bounds 0.0211    solve 0.2458    add 0.1494    
Current (lb-rhs): -0.35768789052963257
100 domains visited
Cumulative time: 1.0480732917785645

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 1] [/input-12, 36] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 36] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.36708736419677734
10 lb beta sum: 0.6617144346237183, worst -0.3389163017272949
Time: prepare 0.0063    bound 0.1158    transfer 0.0017    finalize 0.0020    func 0.1290    
Accumulated time: func 0.4278    prepare 0.0358    bound 0.3818    transfer 0.0054    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.51708090) min lb tensor(-0.33490840)
Number of Verified Splits: 146 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.020648956298828125 
BICCOS Cumulative time: 0.04370236396789551
Preprocessing time: 0.011262655258178711 Inference time: 0.0068700313568115234 Add cuts time: 0.0022208690643310547 Cut analysis time: 0.00029540061950683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19697 (3), -0.19666 (3), -0.19633 (3), -0.19625 (3), -0.19616 (3), -0.19442 (3), -0.19437 (3), -0.19409 (3), -0.19373 (3), -0.19363 (3), -0.19049 (3), -0.18988 (3), -0.18650 (3), -0.18534 (3), -0.18483 (3), -0.18463 (3), -0.18310 (3), -0.18222 (3), -0.18072 (3), -0.18055 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0149    solve 0.1291    add 0.0922    
Accumulated time: pickout 0.0023    decision 0.5514    set_bounds 0.0360    solve 0.3748    add 0.2416    
Current (lb-rhs): -0.19696980714797974
150 domains visited
Cumulative time: 1.325444221496582

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 36] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 92] [/input-12, 36] [/input-12, 1] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22625160217285156
10 lb beta sum: 1.0351121425628662, worst -0.17407409846782684
Time: prepare 0.0067    bound 0.1161    transfer 0.0020    finalize 0.0021    func 0.1295    
Accumulated time: func 0.5573    prepare 0.0427    bound 0.4979    transfer 0.0074    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.38959301) min lb tensor(-0.16945572)
Number of Verified Splits: 82 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.017249345779418945 
BICCOS Cumulative time: 0.06095170974731445
Preprocessing time: 0.011315345764160156 Inference time: 0.0037691593170166016 Add cuts time: 0.001730203628540039 Cut analysis time: 0.00043463706970214844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04861 (4), -0.04829 (4), -0.04766 (4), -0.04762 (4), -0.04705 (4), -0.04561 (4), -0.04302 (4), -0.04211 (4), -0.04013 (4), -0.03969 (4), -0.03755 (4), -0.03711 (4), -0.03555 (4), -0.03509 (4), -0.03455 (4), -0.03316 (4), -0.03224 (4), -0.03072 (4), -0.03047 (4), -0.02995 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0202    set_bounds 0.0154    solve 0.1296    add 0.2326    
Accumulated time: pickout 0.0034    decision 0.5716    set_bounds 0.0514    solve 0.5044    add 0.4743    
Current (lb-rhs): -0.04861253499984741
200 domains visited
Cumulative time: 1.741919755935669

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11322593688964844
10 lb beta sum: 0.9313194155693054, worst -0.04475682973861694
Time: prepare 0.0070    bound 0.1316    transfer 0.0020    finalize 0.0020    func 0.1454    
Accumulated time: func 0.7027    prepare 0.0500    bound 0.6295    transfer 0.0094    finalize 0.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.26141492) min lb tensor(-0.03854799)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.03595733642578125 
BICCOS Cumulative time: 0.0969090461730957
Preprocessing time: 0.011355161666870117 Inference time: 0.01613903045654297 Add cuts time: 0.00769495964050293 Cut analysis time: 0.0007681846618652344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0157    solve 0.1455    add 0.0278    
Accumulated time: pickout 0.0045    decision 0.5910    set_bounds 0.0672    solve 0.6499    add 0.5020    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 10]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([5.64405189e-11, 1.51936427e-01, 7.38935024e-02, 2.82381356e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 10]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.64405189e-11, 1.51936427e-01, 7.38935024e-02, 2.74114180e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.64405189e-11, 1.51936427e-01, 9.22425836e-02, 6.41106516e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36, 10]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.64405189e-11, 1.51936427e-01, 9.22425836e-02, 1.50749579e-01,
        2.54402697e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36, 10]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.64405189e-11, 1.51936427e-01, 9.22425836e-02, 1.50749579e-01,
        1.00465883e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.64405189e-11, 1.22614518e-01, 5.79726249e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36, 10]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([5.64405189e-11, 1.22614518e-01, 1.53272822e-01, 2.85461724e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36, 10]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([5.64405189e-11, 1.22614518e-01, 1.53272822e-01, 2.94029582e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60, 10]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.64405189e-11, 7.32285738e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60, 10]), tensor([1., 1.]), tensor([0, 0]), tensor([5.64405189e-11, 2.96440590e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5184688568115234
10 lb beta sum: 0.8190637826919556, worst -0.463189035654068
Time: prepare 0.0005    bound 0.1331    transfer 0.0001    finalize 0.0002    func 0.1340    
Accumulated time: func 0.8367    prepare 0.0505    bound 0.7626    transfer 0.0095    finalize 0.0111    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 13] 
split level 1: [/input-12, 13] [/input-12, 51] [/input-12, 51] [/input-12, 13] [/input-12, 1] 
split level 2: [/input-12, 36] [/input-12, 13] [/input-12, 13] [/input-12, 93] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 92] [/input-12, 37] [/input-12, 92] 
split level 4: [/input-12, 37] [/input-12, 37] [/input-12, 93] [/input-8, 677] [/input-12, 93] 
split level 5: [/input-8, 677] [/input-8, 677] [/input-12, 37] [/input-8, 603] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3582966327667236, worst -0.19941334426403046
10 lb beta sum: 1.3587573766708374, worst -0.19823460280895233
Time: prepare 0.0130    bound 0.1348    transfer 0.0006    finalize 0.0017    func 0.1523    
Accumulated time: func 0.9890    prepare 0.0639    bound 0.8974    transfer 0.0101    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(1.23099041) min lb tensor(-0.19771867)
Number of Verified Splits: 270 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.373031497001648, worst -0.2905391454696655
10 lb beta sum: 1.4341775178909302, worst -0.32162153720855713
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.3020193576812744 
BICCOS Cumulative time: 0.3989284038543701
Preprocessing time: 0.008465766906738281 Inference time: 0.28524112701416016 Add cuts time: 0.0072247982025146484 Cut analysis time: 0.0010876655578613281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19772 (6), -0.19589 (6), -0.18773 (6), -0.18754 (6), -0.18651 (6), -0.18613 (6), -0.18503 (6), -0.18371 (6), -0.16512 (6), -0.16414 (6), -0.16107 (6), -0.16072 (6), -0.15856 (6), -0.15757 (6), -0.15756 (6), -0.15621 (6), -0.15560 (6), -0.15261 (6), -0.14616 (6), -0.14531 (6), 
Length of domains: 50
Time: pickout 0.0005    decision 0.0204    set_bounds 0.0249    solve 0.1524    add 0.0010    
Accumulated time: pickout 0.0049    decision 0.6115    set_bounds 0.0920    solve 0.8023    add 0.5030    
Current (lb-rhs): -0.19771866500377655
250 domains visited
Cumulative time: 2.652190685272217

BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 51] [/input-12, 4] [/input-12, 4] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 4] [/input-12, 51] [/input-12, 4] 
split level 1: [/input-12, 45] [/input-12, 4] [/input-12, 45] [/input-8, 677] [/input-12, 4] [/input-12, 4] [/input-8, 1045] [/input-12, 45] [/input-12, 4] [/input-12, 45] 
split level 2: [/input-8, 603] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 603] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1990957260131836
10 lb beta sum: 0.22714297473430634, worst -0.18514347076416016
Time: prepare 0.0079    bound 0.1333    transfer 0.0021    finalize 0.0038    func 0.1498    
Accumulated time: func 1.1388    prepare 0.0720    bound 1.0307    transfer 0.0123    finalize 0.0166    
all_split False
======================Cut inference begins======================
max lb tensor(0.50243855) min lb tensor(-0.18467236)
Number of Verified Splits: 287 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03908514976501465 
BICCOS Cumulative time: 0.43801355361938477
Preprocessing time: 0.01148080825805664 Inference time: 0.024748563766479492 Add cuts time: 0.002505779266357422 Cut analysis time: 0.00034999847412109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18467 (9), -0.18274 (9), -0.17881 (9), -0.17687 (9), -0.17565 (9), -0.17561 (9), -0.17434 (9), -0.17415 (9), -0.17258 (9), -0.17121 (9), -0.16977 (9), -0.16972 (9), -0.16818 (9), -0.16808 (9), -0.16662 (9), -0.16497 (9), -0.15137 (9), -0.15042 (9), -0.14670 (9), -0.14642 (9), 
Length of domains: 113
Time: pickout 0.0017    decision 0.0150    set_bounds 0.0265    solve 0.1499    add 0.0022    
Accumulated time: pickout 0.0067    decision 0.6265    set_bounds 0.1186    solve 0.9522    add 0.5052    
Current (lb-rhs): -0.18467235565185547
363 domains visited
Cumulative time: 2.8882980346679688

BaB round 3
batch: 113
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 45] [/input-8, 1880] [/input-12, 45] [/input-8, 670] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18902206420898438
10 lb beta sum: 0.6174169778823853, worst -0.1842641830444336
Time: prepare 0.0047    bound 0.1222    transfer 0.0006    finalize 0.0015    func 0.1304    
Accumulated time: func 1.2693    prepare 0.0769    bound 1.1528    transfer 0.0128    finalize 0.0180    
all_split False
======================Cut inference begins======================
max lb tensor(1.18683052) min lb tensor(-0.18408489)
Number of Verified Splits: 218 of 226
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.02866506576538086 
BICCOS Cumulative time: 0.4666786193847656
Preprocessing time: 0.006900787353515625 Inference time: 0.01980280876159668 Add cuts time: 0.0015871524810791016 Cut analysis time: 0.0003743171691894531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18408 (10), -0.18237 (10), -0.17819 (10), -0.17629 (10), -0.17549 (10), -0.17538 (10), -0.16943 (10), -0.16941 (10), 
Length of domains: 8
Time: pickout 0.0024    decision 0.0306    set_bounds 0.0095    solve 0.1305    add 0.0007    
Accumulated time: pickout 0.0091    decision 0.6570    set_bounds 0.1281    solve 1.0827    add 0.5059    
Current (lb-rhs): -0.18408489227294922
371 domains visited
Cumulative time: 3.0920045375823975

BaB round 4
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 90] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] 
split level 2: [/input-8, 670] [/input-12, 90] [/input-12, 90] [/input-8, 1880] [/input-8, 670] [/input-12, 90] [/input-12, 90] [/input-8, 1880] 
split level 3: [/input-8, 603] [/input-8, 1880] [/input-8, 670] [/input-12, 90] [/input-8, 603] [/input-8, 1880] [/input-8, 670] [/input-12, 90] 
split level 4: [/input-8, 1315] [/input-8, 603] [/input-8, 603] [/input-8, 603] [/input-8, 1315] [/input-8, 603] [/input-8, 603] [/input-8, 603] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1577157974243164
10 lb beta sum: 0.5451667308807373, worst -0.15289299190044403
Time: prepare 0.0051    bound 0.1283    transfer 0.0005    finalize 0.0014    func 0.1371    
Accumulated time: func 1.4064    prepare 0.0823    bound 1.2811    transfer 0.0134    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.87438101) min lb tensor(-0.15284353)
Number of Verified Splits: 178 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.030391693115234375 
BICCOS Cumulative time: 0.4970703125
Preprocessing time: 0.007430315017700195 Inference time: 0.020710229873657227 Add cuts time: 0.0018699169158935547 Cut analysis time: 0.00038123130798339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15284 (15), -0.14700 (15), -0.14652 (15), -0.14564 (15), -0.14461 (15), -0.14224 (15), -0.14077 (15), -0.13961 (15), -0.13842 (15), -0.13606 (15), -0.13449 (15), -0.13035 (15), -0.12933 (15), -0.12849 (15), -0.12816 (15), -0.12705 (15), -0.12696 (15), -0.12433 (15), -0.12314 (15), -0.12226 (15), 
Length of domains: 78
Time: pickout 0.0009    decision 0.0179    set_bounds 0.0233    solve 0.1372    add 0.0011    
Accumulated time: pickout 0.0100    decision 0.6749    set_bounds 0.1514    solve 1.2198    add 0.5070    
Current (lb-rhs): -0.15284353494644165
449 domains visited
Cumulative time: 3.303717613220215

BaB round 5
batch: 78
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-8, 677] [/input-8, 811] [/input-12, 80] [/input-12, 33] [/input-8, 677] [/input-8, 811] [/input-12, 80] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 677] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14916610717773438
10 lb beta sum: 0.37923309206962585, worst -0.14453212916851044
Time: prepare 0.0063    bound 0.1341    transfer 0.0006    finalize 0.0019    func 0.1449    
Accumulated time: func 1.5513    prepare 0.0888    bound 1.4152    transfer 0.0140    finalize 0.0213    
all_split False
======================Cut inference begins======================
max lb tensor(0.57399356) min lb tensor(-0.14451414)
Number of Verified Splits: 140 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.0311279296875 
BICCOS Cumulative time: 0.5281982421875
Preprocessing time: 0.009567975997924805 Inference time: 0.018777847290039062 Add cuts time: 0.002359151840209961 Cut analysis time: 0.0004229545593261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14451 (17), -0.14437 (17), -0.14198 (17), -0.14061 (17), -0.13923 (17), -0.13813 (17), -0.13812 (17), -0.13577 (17), -0.13513 (17), -0.13423 (17), -0.13326 (17), -0.12900 (17), -0.12900 (17), -0.12877 (17), -0.12660 (17), -0.12618 (17), -0.12609 (17), -0.12551 (17), -0.12465 (17), -0.12386 (17), 
Length of domains: 172
Time: pickout 0.0018    decision 0.0172    set_bounds 0.0216    solve 0.1450    add 0.0013    
Accumulated time: pickout 0.0117    decision 0.6921    set_bounds 0.1730    solve 1.3649    add 0.5084    
Current (lb-rhs): -0.14451414346694946
621 domains visited
Cumulative time: 3.522921085357666

BaB round 6
batch: 172
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1069] [/input-12, 80] [/input-12, 80] [/input-8, 811] [/input-8, 1069] [/input-12, 80] [/input-12, 80] [/input-8, 811] [/input-8, 1069] [/input-12, 80] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14653968811035156
10 lb beta sum: 0.43191853165626526, worst -0.141932412981987
Time: prepare 0.0070    bound 0.1349    transfer 0.0007    finalize 0.0019    func 0.1466    
Accumulated time: func 1.6979    prepare 0.0960    bound 1.5501    transfer 0.0146    finalize 0.0232    
all_split False
======================Cut inference begins======================
max lb tensor(0.32461721) min lb tensor(-0.14191347)
Number of Verified Splits: 101 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.025359392166137695 
BICCOS Cumulative time: 0.5535576343536377
Preprocessing time: 0.009874820709228516 Inference time: 0.012782812118530273 Add cuts time: 0.0022592544555664062 Cut analysis time: 0.0004425048828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14191 (18), -0.14132 (18), -0.14030 (18), -0.13940 (18), -0.13551 (18), -0.13503 (18), -0.13401 (18), -0.13296 (18), -0.13291 (18), -0.12865 (18), -0.12689 (18), -0.12581 (18), -0.12580 (18), -0.12478 (18), -0.12352 (18), -0.12343 (18), -0.12307 (18), -0.12254 (18), -0.12242 (18), -0.12089 (18), 
Length of domains: 243
Time: pickout 0.0031    decision 0.0203    set_bounds 0.0151    solve 0.1467    add 0.0016    
Accumulated time: pickout 0.0148    decision 0.7124    set_bounds 0.1880    solve 1.5116    add 0.5099    
Current (lb-rhs): -0.14191347360610962
864 domains visited
Cumulative time: 3.735908031463623

BaB round 7
batch: 243
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 811] [/input-8, 1069] [/input-8, 158] [/input-8, 811] [/input-8, 811] [/input-8, 1069] [/input-8, 158] [/input-8, 811] [/input-8, 811] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14191246032714844
10 lb beta sum: 0.8103214502334595, worst -0.13357727229595184
Time: prepare 0.0095    bound 0.1368    transfer 0.0012    finalize 0.0025    func 0.1533    
Accumulated time: func 1.8512    prepare 0.1057    bound 1.6869    transfer 0.0158    finalize 0.0257    
all_split False
======================Cut inference begins======================
max lb tensor(0.31475908) min lb tensor(-0.13355356)
Number of Verified Splits: 254 of 486
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.05317807197570801 
BICCOS Cumulative time: 0.6067357063293457
Preprocessing time: 0.013820409774780273 Inference time: 0.03537917137145996 Add cuts time: 0.003530263900756836 Cut analysis time: 0.0004482269287109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13355 (19), -0.13275 (19), -0.12998 (19), -0.12825 (19), -0.12815 (19), -0.12731 (19), -0.12631 (19), -0.12566 (19), -0.12473 (19), -0.12393 (19), -0.12164 (19), -0.11942 (19), -0.11935 (19), -0.11833 (19), -0.11800 (19), -0.11515 (19), -0.11486 (19), -0.11469 (19), -0.11424 (19), -0.11309 (19), 
Length of domains: 232
Time: pickout 0.0038    decision 0.0239    set_bounds 0.0210    solve 0.1535    add 0.0022    
Accumulated time: pickout 0.0186    decision 0.7363    set_bounds 0.2090    solve 1.6651    add 0.5121    
Current (lb-rhs): -0.13355356454849243
1096 domains visited
Cumulative time: 3.9950203895568848

BaB round 8
batch: 232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1315] [/input-8, 1315] [/input-8, 1069] [/input-8, 1315] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1315] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8268632292747498, worst -0.13274773955345154
10 lb beta sum: 0.8268632292747498, worst -0.13272199034690857
Time: prepare 0.0198    bound 0.1371    transfer 0.0008    finalize 0.0025    func 0.1640    
Accumulated time: func 2.0152    prepare 0.1257    bound 1.8240    transfer 0.0167    finalize 0.0282    
all_split False
======================Cut inference begins======================
max lb tensor(0.01547885) min lb tensor(-0.13270292)
Number of Verified Splits: 8 of 464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.01595616340637207 
BICCOS Cumulative time: 0.6226918697357178
Preprocessing time: 0.013184309005737305 Inference time: 0.0018932819366455078 Add cuts time: 0.00047135353088378906 Cut analysis time: 0.00040721893310546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13270 (20), -0.13083 (20), -0.12823 (20), -0.12812 (20), -0.12679 (20), -0.12621 (20), -0.12451 (20), -0.12424 (20), -0.12245 (20), -0.12192 (20), -0.12152 (20), -0.12060 (20), -0.11924 (20), -0.11752 (20), -0.11607 (20), -0.11527 (20), -0.11420 (20), -0.11299 (20), -0.11267 (20), -0.11178 (20), 
Length of domains: 456
Time: pickout 0.0047    decision 0.0234    set_bounds 0.0196    solve 0.1641    add 0.0026    
Accumulated time: pickout 0.0233    decision 0.7597    set_bounds 0.2286    solve 1.8292    add 0.5147    
Current (lb-rhs): -0.13270291686058044
1552 domains visited
Cumulative time: 4.226329326629639

BaB round 9
batch: 456
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 987] [/input-8, 987] [/input-8, 1315] [/input-8, 987] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 987] [/input-8, 1315] [/input-8, 1315] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8209567070007324, worst -0.12524041533470154
10 lb beta sum: 0.8209567070007324, worst -0.1250830590724945
Time: prepare 0.0392    bound 0.1413    transfer 0.0054    finalize 0.0039    func 0.1961    
Accumulated time: func 2.2113    prepare 0.1652    bound 1.9654    transfer 0.0221    finalize 0.0321    
all_split False
======================Cut inference begins======================
max lb tensor(0.02082515) min lb tensor(-0.12505540)
Number of Verified Splits: 41 of 912
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03518223762512207 
BICCOS Cumulative time: 0.6578741073608398
Preprocessing time: 0.027189254760742188 Inference time: 0.006381511688232422 Add cuts time: 0.0009615421295166016 Cut analysis time: 0.0006499290466308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12506 (21), -0.12428 (21), -0.12272 (21), -0.12224 (21), -0.12164 (21), -0.12040 (21), -0.11927 (21), -0.11850 (21), -0.11793 (21), -0.11759 (21), -0.11714 (21), -0.11626 (21), -0.11602 (21), -0.11564 (21), -0.11560 (21), -0.11531 (21), -0.11417 (21), -0.11374 (21), -0.11272 (21), -0.11191 (21), 
Length of domains: 871
Time: pickout 0.0067    decision 0.0349    set_bounds 0.0383    solve 0.1964    add 0.0055    
Accumulated time: pickout 0.0300    decision 0.7946    set_bounds 0.2669    solve 2.0256    add 0.5202    
Current (lb-rhs): -0.12505540251731873
2423 domains visited
Cumulative time: 4.544703006744385

BaB round 10
batch: 871
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 1055] [/input-8, 987] [/input-8, 1055] [/input-8, 987] [/input-8, 987] [/input-8, 987] [/input-8, 810] [/input-8, 987] [/input-8, 987] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8107690215110779, worst -0.12505540251731873
10 lb beta sum: 0.8107690215110779, worst -0.12505540251731873
Time: prepare 0.0739    bound 0.1585    transfer 0.0069    finalize 0.0081    func 0.2589    
Accumulated time: func 2.4702    prepare 0.2393    bound 2.1238    transfer 0.0290    finalize 0.0402    
all_split False
======================Cut inference begins======================
max lb tensor(0.01215822) min lb tensor(-0.12504300)
Number of Verified Splits: 88 of 1742
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.06934618949890137 
BICCOS Cumulative time: 0.7272202968597412
Preprocessing time: 0.052376747131347656 Inference time: 0.013781547546386719 Add cuts time: 0.002707958221435547 Cut analysis time: 0.0004799365997314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12504 (22), -0.12427 (22), -0.12270 (22), -0.12164 (22), -0.12009 (22), -0.11993 (22), -0.11930 (22), -0.11913 (22), -0.11843 (22), -0.11790 (22), -0.11786 (22), -0.11784 (22), -0.11695 (22), -0.11618 (22), -0.11529 (22), -0.11525 (22), -0.11454 (22), -0.11368 (22), -0.11352 (22), -0.11328 (22), 
Length of domains: 1654
Time: pickout 0.0165    decision 0.0583    set_bounds 0.2172    solve 0.2599    add 0.0213    
Accumulated time: pickout 0.0464    decision 0.8529    set_bounds 0.4841    solve 2.2855    add 0.5415    
Current (lb-rhs): -0.12504300475120544
4077 domains visited
Cumulative time: 5.189936399459839

BaB round 11
batch: 1654
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 810] [/input-8, 1055] [/input-8, 810] [/input-8, 1055] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8058395385742188, worst -0.12207230925559998
10 lb beta sum: 0.8058395385742188, worst -0.12207421660423279
Time: prepare 0.1445    bound 0.2453    transfer 0.0163    finalize 0.0178    func 0.4461    
Accumulated time: func 2.9164    prepare 0.3840    bound 2.3692    transfer 0.0454    finalize 0.0580    
all_split False
======================Cut inference begins======================
max lb tensor(0.03081971) min lb tensor(-0.12206849)
Number of Verified Splits: 371 of 3308
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 19
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.18027710914611816 
BICCOS Cumulative time: 0.9074974060058594
Preprocessing time: 0.10452866554260254 Inference time: 0.06743288040161133 Add cuts time: 0.007676839828491211 Cut analysis time: 0.0006387233734130859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12207 (23), -0.12162 (23), -0.12121 (23), -0.11972 (23), -0.11781 (23), -0.11709 (23), -0.11624 (23), -0.11623 (23), -0.11595 (23), -0.11542 (23), -0.11525 (23), -0.11491 (23), -0.11477 (23), -0.11456 (23), -0.11424 (23), -0.11325 (23), -0.11315 (23), -0.11260 (23), -0.11229 (23), -0.11154 (23), 
Length of domains: 2937
Time: pickout 0.0241    decision 0.0991    set_bounds 0.1393    solve 0.4468    add 0.0383    
Accumulated time: pickout 0.0705    decision 0.9519    set_bounds 0.6234    solve 2.7322    add 0.5798    
Current (lb-rhs): -0.12206849455833435
7014 domains visited
Cumulative time: 6.125590562820435

BaB round 12
batch: 2937
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1062] [/input-8, 1055] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 1055] [/input-8, 810] [/input-8, 1062] [/input-8, 810] [/input-8, 1062] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11900806427001953
10 lb beta sum: 0.5581446290016174, worst -0.11901378631591797
Time: prepare 0.1270    bound 0.3829    transfer 0.0302    finalize 0.0339    func 0.6133    
Accumulated time: func 3.5297    prepare 0.5113    bound 2.7520    transfer 0.0756    finalize 0.0918    
all_split False
======================Cut inference begins======================
max lb tensor(0.05643939) min lb tensor(-0.11900520)
Number of Verified Splits: 1163 of 5874
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.5857546329498291 
BICCOS Cumulative time: 1.4932520389556885
Preprocessing time: 0.34586143493652344 Inference time: 0.21283769607543945 Add cuts time: 0.026332378387451172 Cut analysis time: 0.0007231235504150391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11901 (24), -0.11855 (24), -0.11817 (24), -0.11665 (24), -0.11621 (24), -0.11473 (24), -0.11376 (24), -0.11324 (24), -0.11294 (24), -0.11257 (24), -0.11232 (24), -0.11212 (24), -0.11210 (24), -0.11184 (24), -0.11169 (24), -0.11164 (24), -0.11152 (24), -0.11116 (24), -0.11070 (24), -0.11006 (24), 
Length of domains: 4711
Time: pickout 0.0427    decision 0.3179    set_bounds 0.2554    solve 0.6151    add 0.0735    
Accumulated time: pickout 0.1132    decision 1.2698    set_bounds 0.8787    solve 3.3473    add 0.6532    
Current (lb-rhs): -0.11900520324707031
11725 domains visited
Cumulative time: 8.03976583480835

BaB round 13
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 988] [/input, 396] [/input, 396] [/input-8, 988] [/input-8, 1494] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11898422241210938
10 lb beta sum: 0.5568343997001648, worst -0.11898422241210938
Time: prepare 0.1884    bound 0.5031    transfer 0.0391    finalize 0.0469    func 0.8336    
Accumulated time: func 4.3633    prepare 0.7000    bound 3.2551    transfer 0.1147    finalize 0.1387    
all_split False
======================Cut inference begins======================
max lb tensor(0.05045414) min lb tensor(-0.11897945)
Number of Verified Splits: 1426 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 19
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.5934247970581055 
BICCOS Cumulative time: 2.086676836013794
Preprocessing time: 0.26988649368286133 Inference time: 0.2932591438293457 Add cuts time: 0.02928304672241211 Cut analysis time: 0.0009961128234863281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (25), -0.11663 (25), -0.11543 (25), -0.11527 (25), -0.11374 (25), -0.11350 (25), -0.11292 (25), -0.11255 (25), -0.11226 (25), -0.11182 (25), -0.11140 (25), -0.11068 (25), -0.11048 (25), -0.10998 (25), -0.10958 (25), -0.10947 (25), -0.10930 (25), -0.10905 (25), -0.10880 (25), -0.10845 (25), 
Length of domains: 7381
Time: pickout 0.0633    decision 0.2299    set_bounds 0.5606    solve 0.8357    add 0.0266    
Accumulated time: pickout 0.1765    decision 1.4997    set_bounds 1.4393    solve 4.1830    add 0.6799    
Current (lb-rhs): -0.11897945404052734
18491 domains visited
current_vram/total_varm: 10.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.384219408035278

BaB round 14
batch: 7381
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 82] [/input-8, 82] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 82] [/input-8, 1019] [/input-8, 82] [/input-8, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11595630645751953
10 lb beta sum: 0.5460172891616821, worst -0.11595916748046875
Time: prepare 0.3500    bound 1.1781    transfer 0.0748    finalize 0.0900    func 1.7889    
Accumulated time: func 6.1522    prepare 1.0504    bound 4.4332    transfer 0.1895    finalize 0.2287    
all_split False
======================Cut inference begins======================
max lb tensor(0.30794615) min lb tensor(-0.11594772)
Number of Verified Splits: 2443 of 14762
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 19
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 1.1982660293579102 
BICCOS Cumulative time: 3.284942865371704
Preprocessing time: 0.4559612274169922 Inference time: 0.6911542415618896 Add cuts time: 0.05012822151184082 Cut analysis time: 0.0010223388671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11595 (26), -0.11523 (26), -0.11360 (26), -0.11253 (26), -0.11070 (26), -0.11066 (26), -0.10987 (26), -0.10965 (26), -0.10954 (26), -0.10921 (26), -0.10879 (26), -0.10875 (26), -0.10850 (26), -0.10833 (26), -0.10822 (26), -0.10782 (26), -0.10739 (26), -0.10696 (26), -0.10686 (26), -0.10658 (25), 
Length of domains: 12319
Time: pickout 0.1467    decision 0.5976    set_bounds 0.8898    solve 1.7917    add 0.1560    
Accumulated time: pickout 0.3232    decision 2.0974    set_bounds 2.3291    solve 5.9748    add 0.8359    
Current (lb-rhs): -0.11594772338867188
30810 domains visited
Cumulative time: 15.210681915283203

BaB round 15
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1883] [/input, 332] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] [/input-8, 633] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11355972290039062
10 lb beta sum: 0.533726692199707, worst -0.11342334747314453
Time: prepare 0.4232    bound 1.3183    transfer 0.0793    finalize 0.1088    func 2.0378    
Accumulated time: func 8.1900    prepare 1.4738    bound 5.7515    transfer 0.2688    finalize 0.3375    
all_split False
======================Cut inference begins======================
max lb tensor(0.32110628) min lb tensor(-0.11339474)
Number of Verified Splits: 3266 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 22
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 1.4531586170196533 
BICCOS Cumulative time: 4.738101482391357
Preprocessing time: 0.770465612411499 Inference time: 0.6198484897613525 Add cuts time: 0.06171703338623047 Cut analysis time: 0.001127481460571289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11523 (26), -0.11339 (27), -0.11102 (27), -0.11066 (26), -0.10954 (26), -0.10944 (27), -0.10875 (26), -0.10833 (26), -0.10822 (26), -0.10781 (27), -0.10753 (27), -0.10739 (26), -0.10708 (27), -0.10686 (26), -0.10667 (27), -0.10666 (27), -0.10611 (27), -0.10542 (26), -0.10513 (27), -0.10459 (26), 
Length of domains: 17245
Time: pickout 0.1358    decision 0.4494    set_bounds 0.9985    solve 2.0413    add 0.2820    
Accumulated time: pickout 0.4590    decision 2.5467    set_bounds 3.3276    solve 8.0160    add 1.1180    
Current (lb-rhs): -0.115234375
43928 domains visited
current_vram/total_varm: 26.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 20.62149930000305

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1883] [/input, 332] [/input-8, 981] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11300182342529297
10 lb beta sum: 0.5752023458480835, worst -0.11299991607666016
Time: prepare 0.8217    bound 2.5306    transfer 0.1556    finalize 0.2189    func 4.2924    
Accumulated time: func 12.4825    prepare 2.2959    bound 8.2821    transfer 0.4244    finalize 0.5564    
all_split False
======================Cut inference begins======================
max lb tensor(0.65447855) min lb tensor(-0.11298466)
Number of Verified Splits: 9773 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 21
#cuts 4-6: 16
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 3.4972102642059326 
BICCOS Cumulative time: 8.23531174659729
Preprocessing time: 1.003967046737671 Inference time: 2.3102874755859375 Add cuts time: 0.18161988258361816 Cut analysis time: 0.0013358592987060547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11298 (28), -0.11217 (27), -0.11061 (28), -0.10809 (27), -0.10738 (28), -0.10679 (27), -0.10664 (28), -0.10647 (27), -0.10616 (28), -0.10571 (28), -0.10571 (27), -0.10568 (27), -0.10513 (27), -0.10500 (28), -0.10408 (27), -0.10398 (28), -0.10378 (27), -0.10374 (27), -0.10359 (28), -0.10355 (27), 
Length of domains: 23856
Time: pickout 0.2770    decision 2.2443    set_bounds 1.7569    solve 4.2994    add 0.1067    
Accumulated time: pickout 0.7360    decision 4.7910    set_bounds 5.0844    solve 12.3154    add 1.2246    
Current (lb-rhs): -0.11298465728759766
66923 domains visited
Cumulative time: 32.93054723739624

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 986] [/input-8, 981] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input, 332] [/input-8, 981] [/input, 332] [/input-8, 1454] [/input-8, 1494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10944271087646484
10 lb beta sum: 0.5567687749862671, worst -0.1094064712524414
Time: prepare 0.8494    bound 2.5331    transfer 0.1559    finalize 0.2208    func 3.9720    
Accumulated time: func 16.4544    prepare 3.1457    bound 10.8152    transfer 0.5803    finalize 0.7772    
all_split False
======================Cut inference begins======================
max lb tensor(0.41925520) min lb tensor(-0.10939884)
Number of Verified Splits: 10266 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 22
#cuts 4-6: 25
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 3.6770412921905518 
BICCOS Cumulative time: 11.912353038787842
Preprocessing time: 1.522742509841919 Inference time: 1.9674334526062012 Add cuts time: 0.1851813793182373 Cut analysis time: 0.001683950424194336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10940 (29), -0.10846 (28), -0.10766 (28), -0.10703 (29), -0.10571 (28), -0.10530 (28), -0.10500 (28), -0.10427 (28), -0.10379 (29), -0.10305 (29), -0.10304 (28), -0.10275 (28), -0.10264 (28), -0.10257 (29), -0.10239 (28), -0.10211 (28), -0.10207 (28), -0.10196 (28), -0.10142 (28), -0.10140 (28), 
Length of domains: 29974
Time: pickout 0.2979    decision 1.6477    set_bounds 2.2651    solve 3.9793    add 0.0903    
Accumulated time: pickout 1.0339    decision 6.4387    set_bounds 7.3496    solve 16.2947    add 1.3149    
Current (lb-rhs): -0.10939884185791016
89425 domains visited
Cumulative time: 45.02893137931824

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 981] [/input-8, 981] [/input-8, 633] [/input-8, 633] [/input-8, 810] [/input-8, 1251] [/input, 2423] [/input-8, 988] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1053018569946289
10 lb beta sum: 0.5298687219619751, worst -0.10533428192138672
Time: prepare 0.8524    bound 2.5514    transfer 0.1565    finalize 0.2171    func 3.9887    
Accumulated time: func 20.4432    prepare 3.9985    bound 13.3667    transfer 0.7368    finalize 0.9942    
all_split False
======================Cut inference begins======================
max lb tensor(0.42042249) min lb tensor(-0.10529613)
Number of Verified Splits: 8429 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 23
#cuts 4-6: 25
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 3.420675039291382 
BICCOS Cumulative time: 15.333028078079224
Preprocessing time: 1.0113844871520996 Inference time: 2.2505810260772705 Add cuts time: 0.15679264068603516 Cut analysis time: 0.0019168853759765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10940 (29), -0.10846 (28), -0.10703 (29), -0.10530 (29), -0.10427 (28), -0.10407 (29), -0.10379 (29), -0.10305 (29), -0.10275 (28), -0.10261 (29), -0.10257 (29), -0.10196 (28), -0.10196 (29), -0.10171 (29), -0.10140 (28), -0.10138 (28), -0.10099 (29), -0.10085 (28), -0.10039 (29), -0.10016 (28), 
Length of domains: 37929
Time: pickout 0.3276    decision 1.8813    set_bounds 2.0509    solve 3.9961    add 0.5361    
Accumulated time: pickout 1.3615    decision 8.3200    set_bounds 9.4005    solve 20.2908    add 1.8510    
Current (lb-rhs): -0.10939884185791016
113764 domains visited
Cumulative time: 57.36424660682678

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 986] [/input-8, 981] [/input-8, 1251] [/input, 1418] [/input-8, 1454] [/input, 1418] [/input-8, 1446] [/input-8, 1251] [/input-8, 1251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1080474853515625
10 lb beta sum: 0.5297813415527344, worst -0.1080465316772461
Time: prepare 0.8575    bound 2.5573    transfer 0.1573    finalize 0.2248    func 4.6069    
Accumulated time: func 25.0501    prepare 4.8564    bound 15.9239    transfer 0.8941    finalize 1.2190    
all_split False
======================Cut inference begins======================
max lb tensor(0.61721110) min lb tensor(-0.10803604)
Number of Verified Splits: 8019 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 68.
#cuts 1-3: 23
#cuts 4-6: 33
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 2.772660732269287 
BICCOS Cumulative time: 18.10568881034851
Preprocessing time: 1.0136678218841553 Inference time: 1.6023013591766357 Add cuts time: 0.15415048599243164 Cut analysis time: 0.002541065216064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10804 (29), -0.10649 (30), -0.10407 (29), -0.10400 (30), -0.10232 (29), -0.10196 (29), -0.10171 (29), -0.10098 (29), -0.10093 (30), -0.10025 (30), -0.10023 (30), -0.09988 (30), -0.09968 (30), -0.09965 (29), -0.09959 (29), -0.09923 (30), -0.09913 (30), -0.09906 (29), -0.09900 (29), -0.09867 (29), 
Length of domains: 46294
Time: pickout 0.3116    decision 1.6481    set_bounds 2.0906    solve 4.6138    add 0.0927    
Accumulated time: pickout 1.6731    decision 9.9681    set_bounds 11.4911    solve 24.9046    add 1.9437    
Current (lb-rhs): -0.10803604125976562
138513 domains visited
Cumulative time: 69.01237034797668

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 810] [/input-8, 988] [/input-8, 810] [/input-8, 1454] [/input, 332] [/input, 3483] [/input-8, 1446] [/input-8, 1454] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10120487213134766
10 lb beta sum: 0.6406117677688599, worst -0.09882545471191406
Time: prepare 0.8724    bound 2.5947    transfer 0.1589    finalize 0.2462    func 4.0862    
Accumulated time: func 29.1363    prepare 5.7292    bound 18.5187    transfer 1.0529    finalize 1.4652    
all_split False
======================Cut inference begins======================
max lb tensor(0.48166168) min lb tensor(-0.09880257)
Number of Verified Splits: 11396 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 87.
#cuts 1-3: 23
#cuts 4-6: 45
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 4.221554279327393 
BICCOS Cumulative time: 22.327243089675903
Preprocessing time: 1.0122928619384766 Inference time: 2.9823503494262695 Add cuts time: 0.2236635684967041 Cut analysis time: 0.003247499465942383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10804 (29), -0.10649 (30), -0.10400 (30), -0.10232 (29), -0.10196 (29), -0.10098 (29), -0.10093 (30), -0.10025 (30), -0.10023 (30), -0.09988 (30), -0.09968 (30), -0.09965 (29), -0.09959 (29), -0.09923 (30), -0.09913 (30), -0.09906 (29), -0.09900 (29), -0.09880 (30), -0.09848 (29), -0.09832 (30), 
Length of domains: 51282
Time: pickout 0.3170    decision 2.2704    set_bounds 2.2519    solve 4.0958    add 0.1308    
Accumulated time: pickout 1.9900    decision 12.2385    set_bounds 13.7430    solve 29.0004    add 2.0745    
Current (lb-rhs): -0.10803604125976562
159885 domains visited
Cumulative time: 82.45152068138123

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 1019] [/input-8, 981] [/input-8, 1446] [/input-8, 1446] [/input-8, 1019] [/input-8, 1446] [/input-8, 1251] [/input-8, 981] [/input-8, 1251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10509586334228516
10 lb beta sum: 0.625199556350708, worst -0.10290908813476562
Time: prepare 0.8794    bound 2.6304    transfer 0.1574    finalize 0.2253    func 4.1147    
Accumulated time: func 33.2511    prepare 6.6090    bound 21.1491    transfer 1.2103    finalize 1.6906    
all_split False
======================Cut inference begins======================
max lb tensor(0.67076004) min lb tensor(-0.10290241)
Number of Verified Splits: 11082 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 95.
#cuts 1-3: 24
#cuts 4-6: 46
#cuts 7-9: 25
#cuts >= 20: 0
BICCOS time: 4.304892539978027 
BICCOS Cumulative time: 26.63213562965393
Preprocessing time: 1.8542566299438477 Inference time: 2.2220914363861084 Add cuts time: 0.22484302520751953 Cut analysis time: 0.003701448440551758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10290 (30), -0.10239 (31), -0.10023 (30), -0.09999 (31), -0.09946 (30), -0.09923 (30), -0.09880 (30), -0.09821 (29), -0.09775 (30), -0.09730 (30), -0.09725 (29), -0.09717 (30), -0.09697 (31), -0.09687 (30), -0.09653 (30), -0.09640 (30), -0.09624 (31), -0.09605 (30), -0.09583 (30), -0.09547 (31), 
Length of domains: 56584
Time: pickout 0.3341    decision 1.6547    set_bounds 2.3171    solve 4.1226    add 0.0926    
Accumulated time: pickout 2.3241    decision 13.8932    set_bounds 16.0601    solve 33.1230    add 2.1670    
Current (lb-rhs): -0.10290241241455078
181571 domains visited
Cumulative time: 95.44570708274841

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 633] [/input, 2390] [/input, 1418] [/input, 2390] [/input-8, 1446] [/input-8, 633] [/input, 1418] [/input-8, 633] [/input-8, 1019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09914588928222656
10 lb beta sum: 0.6713298559188843, worst -0.10048256814479828
Time: prepare 0.8729    bound 2.6497    transfer 0.1573    finalize 0.2269    func 4.1212    
Accumulated time: func 37.3722    prepare 7.4823    bound 23.7988    transfer 1.3677    finalize 1.9174    
all_split False
======================Cut inference begins======================
max lb tensor(0.63002968) min lb tensor(-0.09717660)
Number of Verified Splits: 10323 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 110.
#cuts 1-3: 26
#cuts 4-6: 47
#cuts 7-9: 37
#cuts >= 20: 0
BICCOS time: 4.328461408615112 
BICCOS Cumulative time: 30.960597038269043
Preprocessing time: 1.9399549961090088 Inference time: 2.1508960723876953 Add cuts time: 0.23331999778747559 Cut analysis time: 0.004290342330932617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10290 (30), -0.10239 (31), -0.09999 (31), -0.09946 (30), -0.09880 (30), -0.09718 (31), -0.09717 (30), -0.09697 (31), -0.09653 (30), -0.09640 (30), -0.09624 (31), -0.09583 (30), -0.09547 (31), -0.09524 (31), -0.09504 (30), -0.09467 (31), -0.09458 (31), -0.09450 (30), -0.09442 (30), -0.09413 (31), 
Length of domains: 62645
Time: pickout 0.3366    decision 1.6537    set_bounds 2.3704    solve 4.1299    add 0.0857    
Accumulated time: pickout 2.6607    decision 15.5470    set_bounds 18.4305    solve 37.2529    add 2.2527    
Current (lb-rhs): -0.10290241241455078
204016 domains visited
Cumulative time: 108.49337196350098

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 633] [/input-8, 1454] [/input-8, 633] [/input-8, 988] [/input-8, 988] [/input-8, 633] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 1446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09944534301757812
10 lb beta sum: 0.6955931782722473, worst -0.09707832336425781
Time: prepare 0.8729    bound 2.6803    transfer 0.1584    finalize 0.2367    func 4.1628    
Accumulated time: func 41.5351    prepare 8.3557    bound 26.4790    transfer 1.5260    finalize 2.1542    
all_split False
======================Cut inference begins======================
max lb tensor(0.85245371) min lb tensor(-0.09705639)
Number of Verified Splits: 9327 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 91.
#cuts 1-3: 27
#cuts 4-6: 36
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 4.195667266845703 
BICCOS Cumulative time: 35.156264305114746
Preprocessing time: 1.9843988418579102 Inference time: 1.978848934173584 Add cuts time: 0.22891449928283691 Cut analysis time: 0.0035049915313720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10290 (30), -0.10239 (31), -0.09999 (31), -0.09946 (30), -0.09718 (31), -0.09717 (30), -0.09706 (31), -0.09697 (31), -0.09653 (30), -0.09624 (31), -0.09583 (30), -0.09547 (31), -0.09524 (31), -0.09504 (30), -0.09467 (31), -0.09465 (31), -0.09458 (31), -0.09450 (30), -0.09442 (30), -0.09413 (31), 
Length of domains: 69702
Time: pickout 0.3335    decision 1.6501    set_bounds 2.3856    solve 4.1717    add 9.1671    
Accumulated time: pickout 2.9942    decision 17.1970    set_bounds 20.8162    solve 41.4245    add 11.4198    
Current (lb-rhs): -0.10290241241455078
227457 domains visited
Cumulative time: 130.54215574264526

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 1019] [/input-8, 1251] [/input-8, 1454] [/input-8, 986] [/input-8, 1019] [/input-8, 1251] [/input-8, 1019] [/input-8, 1494] [/input-8, 981] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10268783569335938
10 lb beta sum: 0.6948457956314087, worst -0.10875273495912552
Time: prepare 0.8963    bound 2.6403    transfer 0.1574    finalize 0.2257    func 4.1354    
Accumulated time: func 45.6705    prepare 9.2524    bound 29.1194    transfer 1.6834    finalize 2.3798    
all_split False
======================Cut inference begins======================
max lb tensor(0.48797590) min lb tensor(-0.10047626)
Number of Verified Splits: 16974 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 96.
#cuts 1-3: 27
#cuts 4-6: 33
#cuts 7-9: 36
#cuts >= 20: 0
BICCOS time: 5.9187726974487305 
BICCOS Cumulative time: 41.07503700256348
Preprocessing time: 2.063258171081543 Inference time: 3.471985101699829 Add cuts time: 0.3792300224304199 Cut analysis time: 0.0042994022369384766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10048 (31), -0.09946 (30), -0.09927 (32), -0.09718 (31), -0.09706 (31), -0.09687 (32), -0.09653 (30), -0.09504 (30), -0.09475 (31), -0.09467 (31), -0.09465 (31), -0.09447 (32), -0.09413 (31), -0.09404 (30), -0.09386 (32), -0.09384 (31), -0.09373 (31), -0.09344 (31), -0.09318 (31), -0.09312 (32), 
Length of domains: 69112
Time: pickout 0.3358    decision 1.6603    set_bounds 2.4712    solve 4.1438    add 0.0859    
Accumulated time: pickout 3.3299    decision 18.8573    set_bounds 23.2874    solve 45.5683    add 11.5057    
Current (lb-rhs): -0.10047626495361328
243251 domains visited
Cumulative time: 145.40436553955078

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input-8, 1446] [/input-8, 1454] [/input-8, 981] [/input-8, 82] [/input-8, 988] [/input-8, 633] [/input, 395] [/input-8, 1251] [/input-8, 633] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09837722778320312
10 lb beta sum: 0.6805554628372192, worst -0.10887813568115234
Time: prepare 0.9040    bound 2.6500    transfer 0.1576    finalize 0.2728    func 4.2166    
Accumulated time: func 49.8871    prepare 10.1568    bound 31.7693    transfer 1.8410    finalize 2.6526    
all_split False
======================Cut inference begins======================
max lb tensor(0.49058706) min lb tensor(-0.09642065)
Number of Verified Splits: 16741 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 110.
#cuts 1-3: 27
#cuts 4-6: 46
#cuts 7-9: 37
#cuts >= 20: 0
BICCOS time: 6.524822950363159 
BICCOS Cumulative time: 47.599859952926636
Preprocessing time: 1.1746327877044678 Inference time: 4.954310894012451 Add cuts time: 0.39108943939208984 Cut analysis time: 0.004789829254150391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10048 (31), -0.09927 (32), -0.09718 (31), -0.09706 (31), -0.09687 (32), -0.09642 (31), -0.09475 (31), -0.09465 (31), -0.09447 (32), -0.09413 (31), -0.09386 (32), -0.09373 (31), -0.09344 (31), -0.09337 (31), -0.09318 (31), -0.09312 (32), -0.09244 (31), -0.09235 (32), -0.09208 (32), -0.09208 (32), 
Length of domains: 68755
Time: pickout 0.3531    decision 1.6721    set_bounds 2.6310    solve 4.2280    add 0.0835    
Accumulated time: pickout 3.6830    decision 20.5294    set_bounds 25.9184    solve 49.7963    add 11.5892    
Current (lb-rhs): -0.10047626495361328
259278 domains visited
Cumulative time: 161.14489078521729

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1494] [/input, 3483] [/input-8, 1446] [/input-8, 1494] [/input-8, 981] [/input-8, 1494] [/input-8, 82] [/input-8, 1251] [/input-8, 1494] [/input-8, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.1596660017967224, worst -2.1510772705078125
10 lb beta sum: 0.7483426332473755, worst -0.10595843195915222
Time: prepare 1.0604    bound 2.6805    transfer 0.1568    finalize 0.2829    func 4.4073    
Accumulated time: func 54.2944    prepare 11.2177    bound 34.4498    transfer 1.9978    finalize 2.9356    
all_split False
======================Cut inference begins======================
max lb tensor(1.05824506) min lb tensor(-0.09342724)
Number of Verified Splits: 15321 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 113.
#cuts 1-3: 27
#cuts 4-6: 48
#cuts 7-9: 38
#cuts >= 20: 0
BICCOS time: 6.4169762134552 
BICCOS Cumulative time: 54.016836166381836
Preprocessing time: 1.177708387374878 Inference time: 4.817671298980713 Add cuts time: 0.4166696071624756 Cut analysis time: 0.004926919937133789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10048 (31), -0.09927 (32), -0.09706 (31), -0.09687 (32), -0.09642 (31), -0.09475 (31), -0.09465 (31), -0.09447 (32), -0.09386 (32), -0.09344 (31), -0.09343 (32), -0.09337 (31), -0.09318 (31), -0.09312 (32), -0.09244 (31), -0.09235 (32), -0.09208 (32), -0.09208 (32), -0.09199 (31), -0.09164 (31), 
Length of domains: 69818
Time: pickout 0.3820    decision 1.6649    set_bounds 2.7316    solve 4.4194    add 0.0905    
Accumulated time: pickout 4.0651    decision 22.1944    set_bounds 28.6500    solve 54.2158    add 11.6797    
Current (lb-rhs): -0.10047626495361328
276725 domains visited
Cumulative time: 177.0706388950348

BaB round 27
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 1019] [/input-8, 1494] [/input-8, 981] [/input, 1418] [/input-8, 1019] [/input-8, 1251] [/input-8, 1883] [/input, 1418] [/input, 3483] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09643268585205078
10 lb beta sum: 0.6703469753265381, worst -0.09401321411132812
Time: prepare 0.8972    bound 2.6926    transfer 0.1551    finalize 0.2791    func 4.2560    
Accumulated time: func 58.5504    prepare 12.1153    bound 37.1424    transfer 2.1529    finalize 3.2147    
all_split False
======================Cut inference begins======================
max lb tensor(0.48949128) min lb tensor(-0.09399700)
Number of Verified Splits: 16854 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 125.
#cuts 1-3: 27
#cuts 4-6: 58
#cuts 7-9: 40
#cuts >= 20: 0
BICCOS time: 6.718931436538696 
BICCOS Cumulative time: 60.73576760292053
Preprocessing time: 1.1799578666687012 Inference time: 5.090504169464111 Add cuts time: 0.44310545921325684 Cut analysis time: 0.005363941192626953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10048 (31), -0.09927 (32), -0.09687 (32), -0.09642 (31), -0.09475 (31), -0.09447 (32), -0.09400 (32), -0.09386 (32), -0.09344 (31), -0.09343 (32), -0.09337 (31), -0.09318 (31), -0.09312 (32), -0.09244 (31), -0.09235 (32), -0.09208 (32), -0.09208 (32), -0.09199 (31), -0.09164 (31), -0.09160 (32), 
Length of domains: 69348
Time: pickout 0.3541    decision 1.6694    set_bounds 2.7335    solve 4.2672    add 0.0819    
Accumulated time: pickout 4.4192    decision 23.8638    set_bounds 31.3834    solve 58.4830    add 11.7616    
Current (lb-rhs): -0.10047626495361328
292639 domains visited
Cumulative time: 193.13872933387756

BaB round 28
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2182] [/input, 2182] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input, 2182] [/input-8, 988] [/input-8, 988] [/input, 2182] [/input-8, 1446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09959888458251953
10 lb beta sum: 0.6312527656555176, worst -0.09734916687011719
Time: prepare 0.9025    bound 2.7123    transfer 0.1558    finalize 1.3617    func 5.3570    
Accumulated time: func 63.9073    prepare 13.0182    bound 39.8548    transfer 2.3088    finalize 4.5763    
all_split False
======================Cut inference begins======================
max lb tensor(0.47118080) min lb tensor(-0.09731865)
Number of Verified Splits: 10072 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 121.
#cuts 1-3: 27
#cuts 4-6: 74
#cuts 7-9: 20
#cuts >= 20: 0
BICCOS time: 4.00872015953064 
BICCOS Cumulative time: 64.74448776245117
Preprocessing time: 1.1815106868743896 Inference time: 2.534705877304077 Add cuts time: 0.2875697612762451 Cut analysis time: 0.004933834075927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09732 (32), -0.09695 (33), -0.09642 (31), -0.09451 (33), -0.09400 (32), -0.09343 (32), -0.09337 (31), -0.09318 (31), -0.09244 (31), -0.09235 (32), -0.09212 (32), -0.09208 (32), -0.09162 (32), -0.09160 (32), -0.09152 (32), -0.09147 (33), -0.09142 (32), -0.09141 (32), -0.09074 (33), -0.09068 (32), 
Length of domains: 75660
Time: pickout 0.3638    decision 1.6809    set_bounds 1.6128    solve 5.3669    add 0.1080    
Accumulated time: pickout 4.7830    decision 25.5447    set_bounds 32.9962    solve 63.8499    add 11.8696    
Current (lb-rhs): -0.09731864929199219
315335 domains visited
Time out!!!!!!!!
Result: unknown in 208.8809 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 704] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 704] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 298] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08241999, -2.05952215, -2.42161822, -2.46702027, -2.20508480,
         -3.01655006, -2.22386408,  1.33762693, -0.76212621]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251],
         [-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52358675, -0.88307142, -0.88203859, -0.28411961, -1.50171089,
           0.00991726,  1.12718534]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0950 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.82686090, -6.41171074, -7.68403912, -6.35791826, -7.00407124,
         -6.85788012, -7.81835127, -6.72433424, -6.81869602, -4.52237940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 573] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 164] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93261242, 0.64227360, 1.35773611, 0.14541245, 0.77890706, 0.42941737,
         1.61863875, 0.36068898, 0.89056170]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0670 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.06539822, -17.73662376, -13.52726841, -13.91146278, -10.88764858,
         -13.52410698, -16.07256508,  -5.87544203, -16.85854721, -15.41843987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 650] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 650] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 191] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35606575, 9.58715820, 6.00918531, 6.42041016, 3.78135061, 6.19913816,
         8.01423836, 8.93800259, 7.41418362]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.62422132, -12.83205509, -10.86794376, -11.14358330, -11.48577309,
         -12.18943787, -11.86716270, -14.63631248, -10.53621006, -12.42279720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [928]; unstable size 928; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 124, 1, 928] with unstable size 123 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 928] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 928] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [123]; unstable size 123; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 123] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 123] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.12223959, 2.45312428, 2.49229193, 2.85657811, 3.25084162, 3.41792607,
         5.43004036, 2.01518464, 3.76126528]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0670 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 574] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 215] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.72788858,  3.64086819, -0.86040497, -2.15425611, -2.38526630,
         -1.95328188, -1.94343758,  2.43316603,  2.66482735]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073],
         [-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36401176, -1.12526989, -1.41698360, -0.97709274, -0.60495901]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0892 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.18480682, -14.47258854, -11.18161869, -14.32627869, -12.30105877,
         -15.18956566, -14.34846020, -16.43445969, -12.35407734, -15.00505161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 778] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 778] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 154] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.25004578, 2.19218016, 5.06827354, 3.28106499, 5.71236038, 5.22400141,
         7.04772663, 3.23776197, 5.66314220]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.54959202, -14.93725681,  -9.59988976, -11.64203358,  -7.25195312,
         -11.52101326, -11.52331543,  -9.14212132, -13.16885757, -13.51460266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 559] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 559] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93221843, 5.50633144, 1.10160053, 3.24869013, 3.06275177, 2.55501699,
         0.80379295, 3.91150236, 4.20123291]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [673]; unstable size 673; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 673] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 673] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 673] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 249] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.22755647,  2.35429502, -1.18080258, -0.14742744, -1.67962313,
          0.47270066, -0.58272362, -0.47875619,  1.04633427]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173],
         [-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70118284,  1.48933935, -0.46548986,  1.44230604,  2.19979048]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0554 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.97903728, -15.47458935, -14.82082081, -16.93464851, -16.98804283,
         -18.22283363, -17.40720367, -19.39607430, -13.83522511, -16.04048157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [961]; unstable size 961; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 961] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 961] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 961] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 146] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36850739, 2.85024309, 4.83520412, 4.84200573, 5.83571959, 5.30677128,
         7.12614822, 1.81439674, 4.14064837]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 576] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 576] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 270] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.30363083,  2.67125511, -0.65277290, -0.97995400,  0.21614301,
         -0.59254014,  0.02449498,  3.50285673,  2.09800720]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419],
         [ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01838255, -0.16275072,  0.57849979]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0127 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0607 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 540] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 540] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 255] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.87189960,  3.69729757,  0.41519785,  1.04059935,  0.46059483,
         -1.19380593,  0.21724138,  2.69666696,  1.93056870]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.05819893, -7.58267593, -2.72234511, -1.43960345, -3.43121195,
          -2.28614616, -0.89729089, -2.77882195, -6.09740543, -5.29890108]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54231256]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 746] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 746] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37818575,  3.92298698, -0.56011486, -1.79689813,  0.44506049,
         -0.89399886,  0.06454611,  2.27980399,  1.70670152]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306],
         [-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23064446, -1.12007570, -0.19931889]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0823 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.01291561, -12.13928890, -12.98730183, -15.90724564, -13.82077122,
         -17.84158707, -17.88521957, -16.36121368, -11.50735950, -12.93546104]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 566] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 566] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 180] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04726744, 2.13469315, 4.88873768, 2.78446722, 6.62359524, 6.58985186,
         4.87536144, 0.22735929, 1.88157797]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0418 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 421] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 421] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.48716259,  5.17507648,  0.09683514,  0.57209587, -0.21805716,
          0.58378124,  1.18988442,  5.01148224,  3.44507051]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.36143351, -8.27827263, -2.67933655, -3.03170109, -2.11203384,
          -3.19349098, -1.59651995, -3.84145784, -8.13518906, -6.71451759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51551390]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1125 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.927518844604492
alpha/beta optimization time: 1.2087681293487549
initial alpha-crown bounds: tensor([[ 4.54304790,  5.26645184,  0.14525390,  0.62454200, -0.16246367,
          0.64612132,  1.25836980,  5.08361435,  3.52258253]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16246366500854492
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63330745697021
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6332709789276
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6332447528839
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6332230567932
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.63320469856262
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16246367]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
        -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16246367]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 421
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 688
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011897087097167969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1624605655670166
10 lb beta sum: 0.0, worst -0.16246438026428223
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 35] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 37] 
split level 10: [/input-12, 17] 
split level 11: [/input-12, 33] 
split level 12: [/input-12, 46] 
split level 13: [/input-12, 26] 
split level 14: [/input-12, 54] 
split level 15: [/input-8, 299] 
split level 16: [/input-8, 1874] 
split level 17: [/input-8, 859] 
split level 18: [/input-8, 485] 
split level 19: [/input-8, 300] 
split level 20: [/input-8, 188] 
split level 21: [/input-8, 971] 
split level 22: [/input-8, 1114] 
split level 23: [/input-8, 921] 
split level 24: [/input-8, 809] 
split level 25: [/input-8, 89] 
split level 26: [/input-8, 429] 
split level 27: [/input-8, 1429] 
split level 28: [/input-8, 97] 
split level 29: [/input-8, 828] 
split level 30: [/input-8, 85] 
split level 31: [/input-8, 82] 
split level 32: [/input-8, 571] 
split level 33: [/input-8, 659] 
split level 34: [/input-8, 1426] 
split level 35: [/input-8, 187] 
split level 36: [/input-8, 481] 
split level 37: [/input-8, 994] 
split level 38: [/input-8, 964] 
split level 39: [/input-8, 1427] 
split level 40: [/input-8, 107] 
split level 41: [/input-8, 1978] 
split level 42: [/input-8, 938] 
split level 43: [/input-8, 1819] 
split level 44: [/input-8, 1150] 
split level 45: [/input-8, 1395] 
split level 46: [/input-8, 1130] 
split level 47: [/input-8, 1007] 
split level 48: [/input-8, 1865] 
split level 49: [/input-8, 282] 
split level 50: [/input-8, 1521] 
split level 51: [/input-8, 435] 
split level 52: [/input-8, 668] 
split level 53: [/input-8, 1010] 
split level 54: [/input-8, 1324] 
split level 55: [/input-8, 1388] 
split level 56: [/input-8, 1857] 
split level 57: [/input-8, 970] 
split level 58: [/input-8, 800] 
split level 59: [/input-8, 2024] 
split level 60: [/input-8, 1411] 
split level 61: [/input, 2280] 
split level 62: [/input-8, 842] 
split level 63: [/input-8, 1250] 
split level 64: [/input-8, 1866] 
split level 65: [/input-8, 1980] 
split level 66: [/input-8, 934] 
split level 67: [/input-8, 1947] 
split level 68: [/input-8, 1380] 
split level 69: [/input-8, 937] 
split level 70: [/input-8, 1030] 
split level 71: [/input-8, 2025] 
split level 72: [/input-8, 926] 
split level 73: [/input-8, 841] 
split level 74: [/input-8, 65] 
split level 75: [/input-8, 1837] 
split level 76: [/input, 484] 
split level 77: [/input-8, 494] 
split level 78: [/input-8, 688] 
split level 79: [/input-8, 963] 
split level 80: [/input-8, 544] 
split level 81: [/input-8, 522] 
split level 82: [/input-8, 505] 
split level 83: [/input-8, 1931] 
split level 84: [/input-8, 1417] 
split level 85: [/input, 1587] 
split level 86: [/input-8, 414] 
split level 87: [/input-8, 1983] 
split level 88: [/input-8, 310] 
split level 89: [/input-8, 493] 
split level 90: [/input-8, 99] 
split level 91: [/input-8, 1834] 
split level 92: [/input, 1638] 
split level 93: [/input-8, 1575] 
split level 94: [/input-8, 496] 
split level 95: [/input-8, 2004] 
split level 96: [/input-8, 1018] 
split level 97: [/input-8, 407] 
split level 98: [/input-8, 984] 
split level 99: [/input-8, 419] 
split level 100: [/input, 483] 
split level 101: [/input-8, 1582] 
split level 102: [/input-8, 2003] 
split level 103: [/input-8, 2021] 
split level 104: [/input-8, 1469] 
split level 105: [/input-8, 1434] 
split level 106: [/input-8, 119] 
split level 107: [/input-8, 514] 
split level 108: [/input, 1719] 
split level 109: [/input-8, 1996] 
split level 110: [/input, 2136] 
split level 111: [/input-8, 816] 
split level 112: [/input, 1718] 
split level 113: [/input-8, 1486] 
split level 114: [/input-8, 2045] 
split level 115: [/input-8, 1443] 
split level 116: [/input-8, 1795] 
split level 117: [/input-8, 1240] 
split level 118: [/input-8, 1533] 
split level 119: [/input-8, 503] 
split level 120: [/input, 1653] 
split level 121: [/input, 1575] 
split level 122: [/input-8, 479] 
split level 123: [/input, 3545] 
split level 124: [/input, 174] 
split level 125: [/input, 1702] 
split level 126: [/input-8, 508] 
split level 127: [/input-8, 638] 
split level 128: [/input-8, 2029] 
split level 129: [/input-8, 1363] 
split level 130: [/input, 2296] 
split level 131: [/input-8, 1242] 
split level 132: [/input-8, 914] 
split level 133: [/input-8, 1302] 
split level 134: [/input, 1669] 
split level 135: [/input, 2602] 
split level 136: [/input-8, 1354] 
split level 137: [/input-8, 1012] 
split level 138: [/input, 2374] 
split level 139: [/input, 431] 
split level 140: [/input, 2121] 
split level 141: [/input-8, 504] 
split level 142: [/input, 739] 
split level 143: [/input-8, 689] 
split level 144: [/input, 709] 
split level 145: [/input, 1610] 
split level 146: [/input, 1130] 
split level 147: [/input, 1743] 
split level 148: [/input, 1570] 
split level 149: [/input, 1468] 
split level 150: [/input, 1705] 
split level 151: [/input-8, 2023] 
split level 152: [/input, 3539] 
split level 153: [/input, 2008] 
split level 154: [/input, 1948] 
split level 155: [/input, 3517] 
split level 156: [/input, 2261] 
split level 157: [/input, 1756] 
split level 158: [/input, 1589] 
split level 159: [/input-8, 1529] 
split level 160: [/input-8, 1381] 
split level 161: [/input-8, 467] 
split level 162: [/input-8, 1823] 
split level 163: [/input, 3357] 
split level 164: [/input, 1469] 
split level 165: [/input, 1164] 
split level 166: [/input, 2322] 
split level 167: [/input-8, 577] 
split level 168: [/input, 3513] 
split level 169: [/input, 3533] 
split level 170: [/input-8, 76] 
split level 171: [/input, 1888] 
split level 172: [/input, 1302] 
split level 173: [/input, 1499] 
split level 174: [/input, 1105] 
split level 175: [/input-8, 951] 
split level 176: [/input, 1956] 
split level 177: [/input-8, 1398] 
split level 178: [/input-8, 1995] 
split level 179: [/input-8, 406] 
split level 180: [/input, 3561] 
split level 181: [/input, 1685] 
split level 182: [/input, 1937] 
split level 183: [/input, 1159] 
split level 184: [/input, 3069] 
split level 185: [/input, 1826] 
split level 186: [/input, 2341] 
split level 187: [/input-8, 1955] 
split level 188: [/input, 3350] 
split level 189: [/input, 3349] 
split level 190: [/input-8, 1442] 
split level 191: [/input-8, 1402] 
split level 192: [/input, 3869] 
split level 193: [/input, 1933] 
split level 194: [/input, 1196] 
split level 195: [/input, 376] 
split level 196: [/input, 2219] 
split level 197: [/input, 162] 
split level 198: [/input-8, 1047] 
split level 199: [/input, 2259] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1623854637145996
10 lb beta sum: 0.0, worst -0.1623830795288086
Time: prepare 0.0117    bound 0.0964    transfer 0.0018    finalize 0.0028    func 0.1155    
Accumulated time: func 0.1683    prepare 0.0222    bound 0.1489    transfer 0.0019    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.25878167) min lb tensor(-0.16237974)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.010633230209350586 
BICCOS Cumulative time: 0.010633230209350586
Preprocessing time: 0.009897470474243164 Inference time: 0.0003376007080078125 Add cuts time: 0.00012159347534179688 Cut analysis time: 0.0002765655517578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14719 (1), -0.14710 (1), -0.14692 (1), -0.14686 (1), -0.14672 (1), -0.14623 (1), -0.14620 (1), -0.14517 (1), -0.14508 (1), -0.14418 (1), -0.14325 (1), -0.14313 (1), -0.14312 (1), -0.14254 (1), -0.14196 (1), -0.14144 (1), -0.14034 (1), -0.13998 (1), -0.13795 (1), -0.13717 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5167    set_bounds 0.0093    solve 0.1155    add 0.0710    
Accumulated time: pickout 0.0003    decision 0.5167    set_bounds 0.0093    solve 0.1155    add 0.0710    
Current (lb-rhs): -0.14719367027282715
50 domains visited
Cumulative time: 0.7816121578216553

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 29] 
split level 2: [/input-12, 11] [/input-12, 29] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 11] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1085367202758789
10 lb beta sum: 1.057102084159851, worst -0.04209482669830322
Time: prepare 0.0071    bound 0.1163    transfer 0.0007    finalize 0.0020    func 0.1288    
Accumulated time: func 0.2972    prepare 0.0295    bound 0.2652    transfer 0.0027    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.17490876) min lb tensor(-0.04197001)
Number of Verified Splits: 359 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03238391876220703 
BICCOS Cumulative time: 0.04301714897155762
Preprocessing time: 0.011495828628540039 Inference time: 0.012931108474731445 Add cuts time: 0.007761478424072266 Cut analysis time: 0.00019550323486328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0219    set_bounds 0.0125    solve 0.1289    add 0.0148    
Accumulated time: pickout 0.0013    decision 0.5385    set_bounds 0.0218    solve 0.2445    add 0.0858    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.82733239e+31, 4.78022546e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.53438851e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.21087119e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([1., 1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.51232287e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024697065353393555

all verified at 1th iter
Time: prepare 0.0003    bound 0.0137    transfer 0.0001    finalize 0.0002    func 0.0144    
Accumulated time: func 0.3116    prepare 0.0298    bound 0.2789    transfer 0.0028    finalize 0.0051    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.3897683620453
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.3896951675415
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.38967156410217
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.3894863128662
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6106 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.08262920, -10.85117626,  -6.26876736,  -6.31408882,  -5.73352718,
          -6.74807501,  -3.77881598,  -7.22824049, -11.69428158, -10.35355473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [375]; unstable size 375; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 375] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 375] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 375] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 208] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.36300087, 4.89374256, 1.18320322, 1.43400919, 0.60667610, 1.79556394,
         1.70379758, 5.56933117, 4.72802114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0746 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.55409622,  -9.96810532,  -6.92626286,  -8.56464005,  -8.43423653,
          -9.26128197, -10.86567974,  -8.56524467,  -8.85235691, -11.04646587]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 508] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 508] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 168] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.94185472, 0.70694840, 2.04573965, 1.92763674, 2.63131189, 4.18971395,
         1.79439890, 2.23234749, 4.28507805]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0488 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.03971958, -11.64941406, -10.00275898,  -8.47386932,  -9.92812920,
          -8.93652153, -10.23073101, -10.63002968,  -4.10415173,  -9.58254910]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 504] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 504] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82665896, 6.09783602, 4.47349691, 3.14197659, 4.34114552, 3.46894121,
         4.61985588, 4.88829041, 4.12811470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 590] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 590] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 244] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87620640,  4.30693913, -0.06645823, -0.26148701,  0.30728054,
         -0.24854964,  2.13002586,  1.88156390,  3.71216249]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188],
         [-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.90097928, 0.19934154, 0.36028886]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1149 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.594412803649902
alpha/beta optimization time: 1.214468002319336
initial alpha-crown bounds: tensor([[ 1.98166227,  4.46373320,  0.01902914, -0.21572983,  0.40181971,
         -0.18405646,  2.22683096,  2.03213978,  3.86898422]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.21572983264923096
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5979471206665
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59791088104248
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.59788846969604
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5978672504425
Verifying property 3 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21572983]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21572983]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000102996826171875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21572858095169067
10 lb beta sum: 0.0, worst -0.21573185920715332
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 51] 
split level 4: [/input-12, 41] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 109] 
split level 7: [/input-12, 13] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 82] 
split level 10: [/input-8, 540] 
split level 11: [/input-8, 850] 
split level 12: [/input-8, 1308] 
split level 13: [/input-8, 971] 
split level 14: [/input-8, 525] 
split level 15: [/input-8, 307] 
split level 16: [/input-8, 92] 
split level 17: [/input-8, 117] 
split level 18: [/input-8, 981] 
split level 19: [/input-8, 1909] 
split level 20: [/input-8, 483] 
split level 21: [/input-8, 1298] 
split level 22: [/input-8, 869] 
split level 23: [/input-8, 485] 
split level 24: [/input-12, 42] 
split level 25: [/input-8, 1389] 
split level 26: [/input-8, 1453] 
split level 27: [/input-8, 989] 
split level 28: [/input-8, 1461] 
split level 29: [/input-8, 94] 
split level 30: [/input, 3432] 
split level 31: [/input-8, 977] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 654] 
split level 34: [/input-8, 484] 
split level 35: [/input-8, 979] 
split level 36: [/input, 325] 
split level 37: [/input-8, 1940] 
split level 38: [/input-8, 486] 
split level 39: [/input-8, 530] 
split level 40: [/input-8, 1421] 
split level 41: [/input-8, 1523] 
split level 42: [/input-8, 1345] 
split level 43: [/input-8, 475] 
split level 44: [/input-8, 878] 
split level 45: [/input-8, 1828] 
split level 46: [/input-8, 985] 
split level 47: [/input-8, 1939] 
split level 48: [/input-8, 620] 
split level 49: [/input-8, 1247] 
split level 50: [/input-8, 1468] 
split level 51: [/input-8, 1142] 
split level 52: [/input-8, 828] 
split level 53: [/input-8, 1527] 
split level 54: [/input-8, 103] 
split level 55: [/input-8, 507] 
split level 56: [/input, 1366] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 124] 
split level 59: [/input-8, 86] 
split level 60: [/input-8, 91] 
split level 61: [/input, 3399] 
split level 62: [/input-8, 1254] 
split level 63: [/input-8, 998] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 113] 
split level 66: [/input-8, 1771] 
split level 67: [/input-8, 1390] 
split level 68: [/input, 391] 
split level 69: [/input-8, 1433] 
split level 70: [/input-8, 1903] 
split level 71: [/input-8, 1324] 
split level 72: [/input-8, 524] 
split level 73: [/input-8, 1255] 
split level 74: [/input-8, 997] 
split level 75: [/input-8, 310] 
split level 76: [/input-8, 1457] 
split level 77: [/input-8, 1348] 
split level 78: [/input-8, 428] 
split level 79: [/input-8, 522] 
split level 80: [/input-8, 1381] 
split level 81: [/input-8, 1904] 
split level 82: [/input-8, 1446] 
split level 83: [/input-8, 75] 
split level 84: [/input-8, 1467] 
split level 85: [/input-8, 1437] 
split level 86: [/input, 3417] 
split level 87: [/input, 316] 
split level 88: [/input, 2135] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1835] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 867] 
split level 94: [/input, 386] 
split level 95: [/input-8, 1754] 
split level 96: [/input-8, 624] 
split level 97: [/input-8, 1762] 
split level 98: [/input, 369] 
split level 99: [/input-8, 1844] 
split level 100: [/input-8, 923] 
split level 101: [/input-8, 487] 
split level 102: [/input, 406] 
split level 103: [/input-8, 1071] 
split level 104: [/input, 1382] 
split level 105: [/input-8, 1838] 
split level 106: [/input-8, 1347] 
split level 107: [/input, 355] 
split level 108: [/input-8, 827] 
split level 109: [/input-8, 1237] 
split level 110: [/input, 3960] 
split level 111: [/input-8, 573] 
split level 112: [/input-8, 602] 
split level 113: [/input-8, 501] 
split level 114: [/input-8, 505] 
split level 115: [/input, 309] 
split level 116: [/input-8, 125] 
split level 117: [/input, 1603] 
split level 118: [/input-8, 1009] 
split level 119: [/input-8, 415] 
split level 120: [/input-8, 83] 
split level 121: [/input, 1352] 
split level 122: [/input, 220] 
split level 123: [/input, 4045] 
split level 124: [/input-8, 1936] 
split level 125: [/input-8, 1736] 
split level 126: [/input, 404] 
split level 127: [/input-8, 862] 
split level 128: [/input-8, 922] 
split level 129: [/input, 2802] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 887] 
split level 132: [/input-8, 1816] 
split level 133: [/input, 2098] 
split level 134: [/input, 1350] 
split level 135: [/input, 4013] 
split level 136: [/input, 1396] 
split level 137: [/input-8, 1235] 
split level 138: [/input, 1401] 
split level 139: [/input, 3510] 
split level 140: [/input-8, 840] 
split level 141: [/input-8, 958] 
split level 142: [/input, 3493] 
split level 143: [/input, 1333] 
split level 144: [/input, 174] 
split level 145: [/input-8, 1023] 
split level 146: [/input-8, 1406] 
split level 147: [/input-8, 435] 
split level 148: [/input, 3127] 
split level 149: [/input-8, 1551] 
split level 150: [/input-8, 2036] 
split level 151: [/input, 32] 
split level 152: [/input, 1416] 
split level 153: [/input-8, 1983] 
split level 154: [/input, 1960] 
split level 155: [/input, 3913] 
split level 156: [/input-8, 477] 
split level 157: [/input-8, 1744] 
split level 158: [/input, 1949] 
split level 159: [/input-8, 1323] 
split level 160: [/input, 2704] 
split level 161: [/input-8, 1770] 
split level 162: [/input-8, 74] 
split level 163: [/input, 2091] 
split level 164: [/input-8, 1787] 
split level 165: [/input-8, 563] 
split level 166: [/input-8, 786] 
split level 167: [/input, 1093] 
split level 168: [/input, 1347] 
split level 169: [/input, 2857] 
split level 170: [/input-8, 1442] 
split level 171: [/input, 300] 
split level 172: [/input, 4090] 
split level 173: [/input, 3329] 
split level 174: [/input, 1963] 
split level 175: [/input, 3908] 
split level 176: [/input-8, 1126] 
split level 177: [/input, 3371] 
split level 178: [/input, 4043] 
split level 179: [/input, 1964] 
split level 180: [/input, 1708] 
split level 181: [/input-8, 1477] 
split level 182: [/input, 3356] 
split level 183: [/input-8, 1919] 
split level 184: [/input, 3022] 
split level 185: [/input, 1725] 
split level 186: [/input-8, 1427] 
split level 187: [/input, 3694] 
split level 188: [/input, 506] 
split level 189: [/input, 3330] 
split level 190: [/input, 1371] 
split level 191: [/input, 3607] 
split level 192: [/input, 2962] 
split level 193: [/input, 3968] 
split level 194: [/input, 2916] 
split level 195: [/input-8, 876] 
split level 196: [/input, 3677] 
split level 197: [/input, 4052] 
split level 198: [/input, 4030] 
split level 199: [/input, 2841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2156529426574707
10 lb beta sum: 0.0, worst -0.21565204858779907
Time: prepare 0.0116    bound 0.0962    transfer 0.0019    finalize 0.0028    func 0.1152    
Accumulated time: func 0.1679    prepare 0.0221    bound 0.1484    transfer 0.0020    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.23370647) min lb tensor(-0.21564728)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010472774505615234 
BICCOS Cumulative time: 0.010472774505615234
Preprocessing time: 0.009743452072143555 Inference time: 0.00015282630920410156 Add cuts time: 5.340576171875e-05 Cut analysis time: 0.0005230903625488281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20197 (1), -0.20187 (1), -0.20132 (1), -0.20050 (1), -0.20030 (1), -0.20022 (1), -0.20021 (1), -0.19973 (1), -0.19950 (1), -0.19921 (1), -0.19912 (1), -0.19872 (1), -0.19870 (1), -0.19763 (1), -0.19665 (1), -0.19640 (1), -0.19613 (1), -0.19596 (1), -0.19552 (1), -0.19497 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5168    set_bounds 0.0087    solve 0.1152    add 0.0947    
Accumulated time: pickout 0.0003    decision 0.5168    set_bounds 0.0087    solve 0.1152    add 0.0947    
Current (lb-rhs): -0.20197182893753052
50 domains visited
Cumulative time: 0.8101379871368408

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1938004493713379
10 lb beta sum: 0.5672595500946045, worst -0.18613743782043457
Time: prepare 0.0076    bound 0.1153    transfer 0.0007    finalize 0.0024    func 0.1287    
Accumulated time: func 0.2966    prepare 0.0299    bound 0.2638    transfer 0.0027    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.22112447) min lb tensor(-0.18612146)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.016544342041015625 
BICCOS Cumulative time: 0.02701711654663086
Preprocessing time: 0.011520624160766602 Inference time: 0.002641916275024414 Add cuts time: 0.0019271373748779297 Cut analysis time: 0.0004546642303466797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04529 (2), -0.04510 (2), -0.04461 (2), -0.04389 (2), -0.04372 (2), -0.04220 (2), -0.04216 (2), -0.04171 (2), -0.04116 (2), -0.04091 (2), -0.04036 (2), -0.03993 (2), -0.03971 (2), -0.03957 (2), -0.03933 (2), -0.03910 (2), -0.03808 (2), -0.03698 (2), -0.03679 (2), -0.03637 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0213    set_bounds 0.0118    solve 0.1288    add 0.0848    
Accumulated time: pickout 0.0013    decision 0.5381    set_bounds 0.0205    solve 0.2440    add 0.1795    
Current (lb-rhs): -0.04528778791427612
100 domains visited
Cumulative time: 1.0745248794555664

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 41] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 13] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053257882595062256
10 lb beta sum: 1.2031506299972534, worst -0.08399328589439392
Time: prepare 0.0075    bound 0.1322    transfer 0.0010    finalize 0.0024    func 0.1462    
Accumulated time: func 0.4428    prepare 0.0377    bound 0.3960    transfer 0.0036    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.50066787) min lb tensor(-0.02561074)
Number of Verified Splits: 383 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03680562973022461 
BICCOS Cumulative time: 0.06382274627685547
Preprocessing time: 0.011409997940063477 Inference time: 0.015184402465820312 Add cuts time: 0.009784221649169922 Cut analysis time: 0.00042700767517089844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0156    solve 0.1463    add 0.0191    
Accumulated time: pickout 0.0023    decision 0.5572    set_bounds 0.0360    solve 0.3904    add 0.1986    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.82732465e+31, 2.32528493e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.82732465e+31, 1.39999259e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.66692321e-40, 4.61604446e-02, 1.88431010e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.66692321e-40, 4.61604446e-02, 6.21949583e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.66692321e-40, 4.11795229e-02, 1.91050515e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.66692321e-40, 4.11795229e-02, 7.28503615e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18855011463165283
10 lb beta sum: 0.4847224950790405, worst -0.16318672895431519
Time: prepare 0.0004    bound 0.1252    transfer 0.0001    finalize 0.0002    func 0.1260    
Accumulated time: func 0.5688    prepare 0.0380    bound 0.5212    transfer 0.0038    finalize 0.0079    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 45] 
split level 5: [/input-12, 82] 
split level 6: [/input-8, 1909] 
split level 7: [/input-8, 483] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9470596313476562, worst -0.09480041265487671
10 lb beta sum: 0.955050528049469, worst -0.08700215816497803
Time: prepare 0.0111    bound 0.1273    transfer 0.0016    finalize 0.0013    func 0.1431    
Accumulated time: func 0.7119    prepare 0.0496    bound 0.6485    transfer 0.0053    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.36417031) min lb tensor(-0.07476783)
Number of Verified Splits: 226 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9470595717430115, worst -0.13712412118911743
10 lb beta sum: 1.0831552743911743, worst -0.12290579080581665
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 14
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.2703366279602051 
BICCOS Cumulative time: 0.33415937423706055
Preprocessing time: 0.007040262222290039 Inference time: 0.25617480278015137 Add cuts time: 0.006296396255493164 Cut analysis time: 0.0008251667022705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07477 (8), -0.07202 (8), -0.07157 (8), -0.07037 (8), -0.06903 (8), -0.06820 (8), -0.06710 (8), -0.06513 (8), -0.03317 (8), -0.03226 (8), -0.02972 (8), -0.02852 (8), -0.02500 (8), -0.02394 (8), -0.02323 (8), -0.02176 (8), -0.02075 (8), -0.02025 (8), -0.01975 (8), -0.01766 (8), 
Length of domains: 30
Time: pickout 0.0005    decision 0.0217    set_bounds 0.0262    solve 0.1431    add 0.0011    
Accumulated time: pickout 0.0028    decision 0.5789    set_bounds 0.0622    solve 0.5335    add 0.1997    
Current (lb-rhs): -0.0747678279876709
130 domains visited
Cumulative time: 1.917618751525879

BaB round 2
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 850] [/input-8, 1308] [/input-8, 1308] [/input-8, 92] [/input-8, 92] [/input-8, 1308] [/input-8, 1308] 
split level 1: [/input-8, 92] [/input-8, 92] [/input-8, 117] [/input-8, 1308] [/input-8, 92] [/input-8, 94] [/input-8, 484] [/input-8, 654] [/input-8, 92] [/input-8, 92] 
split level 2: [/input-8, 94] [/input-8, 94] [/input-8, 92] [/input-8, 94] [/input-8, 620] [/input-8, 654] [/input-8, 654] [/input-8, 484] [/input-8, 94] [/input-8, 94] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06244724988937378
10 lb beta sum: 0.1808653622865677, worst -0.0589868426322937
Time: prepare 0.0046    bound 0.1334    transfer 0.0005    finalize 0.0011    func 0.1412    
Accumulated time: func 0.8531    prepare 0.0544    bound 0.7819    transfer 0.0058    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.04003251) min lb tensor(-0.05894342)
Number of Verified Splits: 159 of 240
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.024449825286865234 
BICCOS Cumulative time: 0.3586091995239258
Preprocessing time: 0.007082462310791016 Inference time: 0.015352964401245117 Add cuts time: 0.0016698837280273438 Cut analysis time: 0.0003445148468017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05894 (11), -0.05798 (11), -0.05703 (11), -0.05698 (11), -0.05561 (11), -0.05473 (11), -0.05436 (11), -0.05400 (11), -0.05382 (11), -0.05339 (11), -0.05332 (11), -0.05312 (11), -0.05237 (11), -0.05100 (11), -0.05038 (11), -0.05015 (11), -0.05001 (11), -0.04949 (11), -0.04916 (11), -0.04681 (11), 
Length of domains: 81
Time: pickout 0.0013    decision 0.0149    set_bounds 0.0124    solve 0.1413    add 0.0015    
Accumulated time: pickout 0.0041    decision 0.5937    set_bounds 0.0747    solve 0.6748    add 0.2013    
Current (lb-rhs): -0.05894342064857483
211 domains visited
Cumulative time: 2.114281415939331

BaB round 3
batch: 81
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 850] 
split level 1: [/input-8, 484] [/input-8, 92] [/input-8, 484] [/input-8, 92] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05301499366760254
10 lb beta sum: 0.3264102339744568, worst -0.049624502658843994
Time: prepare 0.0063    bound 0.1163    transfer 0.0009    finalize 0.0015    func 0.1271    
Accumulated time: func 0.9802    prepare 0.0609    bound 0.8982    transfer 0.0068    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.01270610) min lb tensor(-0.04954228)
Number of Verified Splits: 92 of 324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.020803451538085938 
BICCOS Cumulative time: 0.3794126510620117
Preprocessing time: 0.009137868881225586 Inference time: 0.009569644927978516 Add cuts time: 0.0010514259338378906 Cut analysis time: 0.0010445117950439453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04954 (13), -0.04881 (13), -0.04731 (13), -0.04605 (13), -0.04598 (13), -0.04536 (13), -0.04512 (13), -0.04494 (13), -0.04421 (13), -0.04398 (13), -0.04391 (13), -0.04255 (13), -0.04240 (13), -0.04238 (13), -0.04213 (13), -0.04139 (13), -0.04139 (13), -0.04137 (13), -0.04076 (13), -0.04018 (13), 
Length of domains: 232
Time: pickout 0.0016    decision 0.0173    set_bounds 0.0148    solve 0.1272    add 0.0031    
Accumulated time: pickout 0.0057    decision 0.6110    set_bounds 0.0895    solve 0.8020    add 0.2043    
Current (lb-rhs): -0.04954227805137634
443 domains visited
Cumulative time: 2.2998180389404297

BaB round 4
batch: 232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04744797945022583
10 lb beta sum: 0.3699769973754883, worst -0.044064342975616455
Time: prepare 0.0090    bound 0.1309    transfer 0.0020    finalize 0.0020    func 0.1469    
Accumulated time: func 1.1271    prepare 0.0701    bound 1.0292    transfer 0.0088    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.01129311) min lb tensor(-0.04402229)
Number of Verified Splits: 61 of 464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 9
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.023036718368530273 
BICCOS Cumulative time: 0.402449369430542
Preprocessing time: 0.013057470321655273 Inference time: 0.007304191589355469 Add cuts time: 0.0020339488983154297 Cut analysis time: 0.0006411075592041016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04402 (14), -0.04353 (14), -0.04199 (14), -0.04131 (14), -0.04090 (14), -0.04050 (14), -0.04035 (14), -0.03987 (14), -0.03949 (14), -0.03940 (14), -0.03936 (14), -0.03931 (14), -0.03894 (14), -0.03846 (14), -0.03830 (14), -0.03823 (14), -0.03765 (14), -0.03726 (14), -0.03716 (14), -0.03710 (14), 
Length of domains: 403
Time: pickout 0.0037    decision 0.0210    set_bounds 0.0199    solve 0.1470    add 0.0019    
Accumulated time: pickout 0.0094    decision 0.6320    set_bounds 0.1094    solve 0.9490    add 0.2063    
Current (lb-rhs): -0.04402229189872742
846 domains visited
Cumulative time: 2.517185926437378

BaB round 5
batch: 403
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 979] [/input-8, 484] [/input-8, 979] [/input-8, 484] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 654] [/input-8, 475] [/input-8, 654] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041488707065582275
10 lb beta sum: 0.37894824147224426, worst -0.03820851445198059
Time: prepare 0.0158    bound 0.1374    transfer 0.0035    finalize 0.0032    func 0.1653    
Accumulated time: func 1.2925    prepare 0.0862    bound 1.1666    transfer 0.0123    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.01033765) min lb tensor(-0.03819257)
Number of Verified Splits: 118 of 806
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 9
#cuts 4-6: 16
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.044516801834106445 
BICCOS Cumulative time: 0.44696617126464844
Preprocessing time: 0.023076295852661133 Inference time: 0.017539262771606445 Add cuts time: 0.0029227733612060547 Cut analysis time: 0.0009784698486328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03819 (15), -0.03765 (15), -0.03727 (15), -0.03689 (15), -0.03576 (15), -0.03559 (15), -0.03538 (15), -0.03520 (15), -0.03499 (15), -0.03453 (15), -0.03453 (15), -0.03428 (15), -0.03409 (15), -0.03402 (15), -0.03365 (15), -0.03364 (15), -0.03352 (15), -0.03314 (15), -0.03303 (15), -0.03303 (15), 
Length of domains: 688
Time: pickout 0.0054    decision 0.1829    set_bounds 0.0356    solve 0.1655    add 0.0050    
Accumulated time: pickout 0.0148    decision 0.8149    set_bounds 0.1450    solve 1.1145    add 0.2112    
Current (lb-rhs): -0.038192570209503174
1534 domains visited
Cumulative time: 2.9577138423919678

BaB round 6
batch: 688
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 475] [/input-8, 475] [/input-8, 979] [/input-8, 979] [/input-8, 979] [/input-8, 475] [/input-8, 979] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03588801622390747
10 lb beta sum: 0.350359171628952, worst -0.03250622749328613
Time: prepare 0.0263    bound 0.1476    transfer 0.0056    finalize 0.0068    func 0.1953    
Accumulated time: func 1.4878    prepare 0.1127    bound 1.3142    transfer 0.0179    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.01079035) min lb tensor(-0.03242445)
Number of Verified Splits: 392 of 1376
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 12
#cuts 4-6: 11
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.10097360610961914 
BICCOS Cumulative time: 0.5479397773742676
Preprocessing time: 0.04082846641540527 Inference time: 0.05226325988769531 Add cuts time: 0.0069539546966552734 Cut analysis time: 0.0009279251098632812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03242 (16), -0.03198 (16), -0.03168 (16), -0.03163 (16), -0.03122 (16), -0.03122 (16), -0.03052 (16), -0.03008 (16), -0.02955 (16), -0.02953 (16), -0.02937 (16), -0.02927 (16), -0.02927 (16), -0.02918 (16), -0.02894 (16), -0.02889 (16), -0.02887 (16), -0.02875 (16), -0.02859 (16), -0.02848 (16), 
Length of domains: 984
Time: pickout 0.0116    decision 0.0469    set_bounds 0.0578    solve 0.1956    add 0.0076    
Accumulated time: pickout 0.0263    decision 0.8619    set_bounds 0.2029    solve 1.3102    add 0.2188    
Current (lb-rhs): -0.0324244499206543
2518 domains visited
Cumulative time: 3.381304979324341

BaB round 7
batch: 984
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 117] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.032370686531066895
10 lb beta sum: 0.362898588180542, worst -0.0355105996131897
Time: prepare 0.0381    bound 0.1672    transfer 0.0031    finalize 0.0087    func 0.2300    
Accumulated time: func 1.7178    prepare 0.1511    bound 1.4814    transfer 0.0211    finalize 0.0324    
all_split False
======================Cut inference begins======================
max lb tensor(0.01189455) min lb tensor(-0.02895406)
Number of Verified Splits: 530 of 1968
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 11
#cuts 4-6: 12
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.2676105499267578 
BICCOS Cumulative time: 0.8155503273010254
Preprocessing time: 0.060343265533447266 Inference time: 0.1991596221923828 Add cuts time: 0.007082223892211914 Cut analysis time: 0.0010254383087158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02895 (17), -0.02837 (17), -0.02821 (17), -0.02812 (17), -0.02770 (17), -0.02760 (17), -0.02696 (17), -0.02672 (17), -0.02654 (17), -0.02633 (17), -0.02603 (17), -0.02598 (17), -0.02591 (17), -0.02587 (17), -0.02582 (17), -0.02576 (17), -0.02558 (17), -0.02556 (17), -0.02553 (17), -0.02536 (17), 
Length of domains: 1438
Time: pickout 0.0174    decision 0.0623    set_bounds 0.0831    solve 0.2304    add 0.0081    
Accumulated time: pickout 0.0438    decision 0.9241    set_bounds 0.2859    solve 1.5406    add 0.2270    
Current (lb-rhs): -0.02895405888557434
3956 domains visited
Cumulative time: 4.056077003479004

BaB round 8
batch: 1438
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 117] [/input-8, 878] [/input-8, 117] [/input-8, 1468] [/input-8, 117] [/input-8, 117] [/input-8, 878] [/input-8, 117] [/input-8, 878] [/input-8, 117] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46684619784355164, worst -0.47405746579170227
10 lb beta sum: 0.8148061037063599, worst -0.03821486234664917
Time: prepare 0.1230    bound 0.2189    transfer 0.0074    finalize 0.0123    func 0.3812    
Accumulated time: func 2.0990    prepare 0.2744    bound 1.7003    transfer 0.0285    finalize 0.0447    
all_split False
======================Cut inference begins======================
max lb tensor(0.02235025) min lb tensor(-0.02688748)
Number of Verified Splits: 1614 of 2876
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.3198990821838379 
BICCOS Cumulative time: 1.1354494094848633
Preprocessing time: 0.08684754371643066 Inference time: 0.2193608283996582 Add cuts time: 0.012850522994995117 Cut analysis time: 0.0008401870727539062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (18), -0.02629 (18), -0.02614 (18), -0.02610 (18), -0.02564 (18), -0.02553 (18), -0.02492 (18), -0.02473 (18), -0.02449 (18), -0.02432 (18), -0.02397 (18), -0.02395 (18), -0.02393 (18), -0.02382 (18), -0.02374 (18), -0.02369 (18), -0.02357 (18), -0.02356 (18), -0.02345 (18), -0.02325 (18), 
Length of domains: 1262
Time: pickout 0.0235    decision 0.0856    set_bounds 0.1211    solve 0.3818    add 0.0106    
Accumulated time: pickout 0.0672    decision 1.0097    set_bounds 0.4071    solve 1.9224    add 0.2376    
Current (lb-rhs): -0.026887476444244385
5218 domains visited
Cumulative time: 5.013871431350708

BaB round 9
batch: 1262
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 620] [/input-8, 878] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02648395299911499
10 lb beta sum: 0.3892476558685303, worst -0.03800708055496216
Time: prepare 0.0498    bound 0.1990    transfer 0.0042    finalize 0.0118    func 0.2820    
Accumulated time: func 2.3810    prepare 0.3244    bound 1.8993    transfer 0.0327    finalize 0.0565    
all_split False
======================Cut inference begins======================
max lb tensor(0.32103771) min lb tensor(-0.02312845)
Number of Verified Splits: 1449 of 2524
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 14
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.2960333824157715 
BICCOS Cumulative time: 1.4314827919006348
Preprocessing time: 0.07818746566772461 Inference time: 0.20366668701171875 Add cuts time: 0.013536214828491211 Cut analysis time: 0.0006430149078369141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02313 (19), -0.02259 (19), -0.02245 (19), -0.02235 (19), -0.02203 (19), -0.02170 (19), -0.02144 (19), -0.02098 (19), -0.02092 (19), -0.02051 (19), -0.02043 (19), -0.02020 (19), -0.02018 (19), -0.02008 (19), -0.02005 (19), -0.01998 (19), -0.01995 (19), -0.01975 (19), -0.01957 (19), -0.01944 (19), 
Length of domains: 1075
Time: pickout 0.0240    decision 0.0768    set_bounds 0.2614    solve 0.2831    add 0.0107    
Accumulated time: pickout 0.0912    decision 1.0865    set_bounds 0.6685    solve 2.2055    add 0.2483    
Current (lb-rhs): -0.0231284499168396
6293 domains visited
Cumulative time: 5.981527328491211

BaB round 10
batch: 1075
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 620] [/input-8, 485] [/input-8, 878] [/input-8, 878] [/input-8, 485] [/input-8, 485] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023760855197906494
10 lb beta sum: 0.438046395778656, worst -0.020447194576263428
Time: prepare 0.0423    bound 0.1761    transfer 0.0035    finalize 0.0098    func 0.2460    
Accumulated time: func 2.6270    prepare 0.3670    bound 2.0754    transfer 0.0362    finalize 0.0664    
all_split False
======================Cut inference begins======================
max lb tensor(0.32161435) min lb tensor(-0.02042693)
Number of Verified Splits: 1105 of 2150
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.23067712783813477 
BICCOS Cumulative time: 1.6621599197387695
Preprocessing time: 0.06598663330078125 Inference time: 0.15620803833007812 Add cuts time: 0.008234977722167969 Cut analysis time: 0.0002474784851074219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02043 (20), -0.01994 (20), -0.01964 (20), -0.01957 (20), -0.01882 (20), -0.01881 (20), -0.01879 (20), -0.01808 (20), -0.01751 (20), -0.01751 (20), -0.01738 (20), -0.01728 (20), -0.01726 (20), -0.01699 (20), -0.01688 (20), -0.01680 (20), -0.01676 (20), -0.01676 (20), -0.01669 (20), -0.01653 (20), 
Length of domains: 1045
Time: pickout 0.0197    decision 0.0674    set_bounds 0.0920    solve 0.2464    add 0.0099    
Accumulated time: pickout 0.1110    decision 1.1539    set_bounds 0.7605    solve 2.4519    add 0.2583    
Current (lb-rhs): -0.020426928997039795
7338 domains visited
Cumulative time: 6.658088207244873

BaB round 11
batch: 1045
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018529951572418213

all verified at 1th iter
Time: prepare 0.0417    bound 0.0201    transfer 0.0057    finalize 0.0102    func 0.0919    
Accumulated time: func 2.7189    prepare 0.4089    bound 2.0955    transfer 0.0419    finalize 0.0765    
all_split False
======================Cut inference begins======================
max lb tensor(0.05335073) min lb tensor(9.11951065e-06)
Number of Verified Splits: 2090 of 2090
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0630795955657959 
BICCOS Cumulative time: 1.7252395153045654
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0203    decision 0.0657    set_bounds 0.2090    solve 0.0924    add 0.0005    
Accumulated time: pickout 0.1312    decision 1.2196    set_bounds 0.9695    solve 2.5443    add 0.2587    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7338 domains visited
Cumulative time: 7.1200151443481445


Properties batch 4, size 1
Remaining timeout: 191.24358487129211
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 191.2434847354889
Verifying property 5 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18405646]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18405646]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00023698806762695312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18405532836914062
10 lb beta sum: 0.0, worst -0.18407225608825684
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0528    
Accumulated time: func 0.0528    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 51] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 13] 
split level 5: [/input-8, 109] 
split level 6: [/input-12, 45] 
split level 7: [/input-8, 476] 
split level 8: [/input-12, 1] 
split level 9: [/input-8, 1940] 
split level 10: [/input-8, 483] 
split level 11: [/input-8, 92] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 540] 
split level 14: [/input-8, 1308] 
split level 15: [/input-8, 1939] 
split level 16: [/input-8, 525] 
split level 17: [/input-8, 1909] 
split level 18: [/input-8, 475] 
split level 19: [/input-8, 869] 
split level 20: [/input-8, 1461] 
split level 21: [/input-8, 1453] 
split level 22: [/input, 325] 
split level 23: [/input-8, 1389] 
split level 24: [/input-8, 91] 
split level 25: [/input, 3432] 
split level 26: [/input-8, 484] 
split level 27: [/input-8, 971] 
split level 28: [/input-8, 307] 
split level 29: [/input-8, 981] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1828] 
split level 32: [/input-8, 1298] 
split level 33: [/input-8, 117] 
split level 34: [/input-8, 1345] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 530] 
split level 37: [/input-8, 309] 
split level 38: [/input, 3399] 
split level 39: [/input-8, 1468] 
split level 40: [/input-8, 428] 
split level 41: [/input-8, 878] 
split level 42: [/input-8, 427] 
split level 43: [/input-8, 94] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1366] 
split level 46: [/input-8, 826] 
split level 47: [/input-8, 923] 
split level 48: [/input-8, 1142] 
split level 49: [/input-8, 1527] 
split level 50: [/input-8, 486] 
split level 51: [/input-8, 654] 
split level 52: [/input-8, 1390] 
split level 53: [/input, 2135] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 867] 
split level 56: [/input-8, 1523] 
split level 57: [/input-8, 979] 
split level 58: [/input-8, 103] 
split level 59: [/input-8, 828] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 624] 
split level 62: [/input-8, 310] 
split level 63: [/input, 3417] 
split level 64: [/input-8, 1237] 
split level 65: [/input-8, 1467] 
split level 66: [/input, 391] 
split level 67: [/input-8, 620] 
split level 68: [/input-8, 1903] 
split level 69: [/input, 2117] 
split level 70: [/input-8, 1247] 
split level 71: [/input-8, 522] 
split level 72: [/input-8, 1446] 
split level 73: [/input-8, 1381] 
split level 74: [/input-8, 1771] 
split level 75: [/input-8, 1324] 
split level 76: [/input-8, 1835] 
split level 77: [/input-8, 1254] 
split level 78: [/input-8, 997] 
split level 79: [/input-8, 1457] 
split level 80: [/input-8, 998] 
split level 81: [/input-8, 124] 
split level 82: [/input-8, 75] 
split level 83: [/input-8, 1348] 
split level 84: [/input-8, 1421] 
split level 85: [/input, 369] 
split level 86: [/input-8, 1433] 
split level 87: [/input-8, 506] 
split level 88: [/input, 355] 
split level 89: [/input-8, 86] 
split level 90: [/input-8, 1246] 
split level 91: [/input, 1382] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 1071] 
split level 94: [/input-8, 1255] 
split level 95: [/input-8, 922] 
split level 96: [/input, 1334] 
split level 97: [/input-8, 113] 
split level 98: [/input-8, 487] 
split level 99: [/input-8, 827] 
split level 100: [/input-8, 1347] 
split level 101: [/input, 1352] 
split level 102: [/input-8, 541] 
split level 103: [/input-8, 1844] 
split level 104: [/input, 1350] 
split level 105: [/input-8, 435] 
split level 106: [/input-8, 2035] 
split level 107: [/input, 406] 
split level 108: [/input-8, 524] 
split level 109: [/input, 3510] 
split level 110: [/input-8, 2036] 
split level 111: [/input, 3960] 
split level 112: [/input-8, 862] 
split level 113: [/input-8, 1437] 
split level 114: [/input, 1333] 
split level 115: [/input-8, 1904] 
split level 116: [/input, 316] 
split level 117: [/input-8, 1323] 
split level 118: [/input-8, 1838] 
split level 119: [/input-8, 887] 
split level 120: [/input, 32] 
split level 121: [/input, 3127] 
split level 122: [/input, 309] 
split level 123: [/input-8, 1816] 
split level 124: [/input, 2802] 
split level 125: [/input-8, 1009] 
split level 126: [/input-8, 505] 
split level 127: [/input-8, 1076] 
split level 128: [/input-8, 415] 
split level 129: [/input-8, 477] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 602] 
split level 132: [/input, 1751] 
split level 133: [/input-8, 1736] 
split level 134: [/input, 4045] 
split level 135: [/input, 1960] 
split level 136: [/input, 2376] 
split level 137: [/input, 1093] 
split level 138: [/input-8, 83] 
split level 139: [/input, 2098] 
split level 140: [/input, 1396] 
split level 141: [/input-8, 1936] 
split level 142: [/input-8, 125] 
split level 143: [/input-8, 74] 
split level 144: [/input, 2840] 
split level 145: [/input-8, 1551] 
split level 146: [/input, 3329] 
split level 147: [/input, 1401] 
split level 148: [/input-8, 1406] 
split level 149: [/input, 439] 
split level 150: [/input, 1603] 
split level 151: [/input, 3493] 
split level 152: [/input, 3913] 
split level 153: [/input-8, 1442] 
split level 154: [/input, 1708] 
split level 155: [/input, 404] 
split level 156: [/input-8, 1983] 
split level 157: [/input-8, 1023] 
split level 158: [/input, 2103] 
split level 159: [/input, 3368] 
split level 160: [/input-8, 2044] 
split level 161: [/input-8, 573] 
split level 162: [/input, 2342] 
split level 163: [/input, 3474] 
split level 164: [/input, 2857] 
split level 165: [/input, 3330] 
split level 166: [/input, 1949] 
split level 167: [/input, 2091] 
split level 168: [/input, 1963] 
split level 169: [/input, 1725] 
split level 170: [/input, 3607] 
split level 171: [/input, 4090] 
split level 172: [/input, 1961] 
split level 173: [/input-8, 1754] 
split level 174: [/input-8, 840] 
split level 175: [/input, 1371] 
split level 176: [/input, 506] 
split level 177: [/input, 3371] 
split level 178: [/input, 1347] 
split level 179: [/input, 1416] 
split level 180: [/input, 3356] 
split level 181: [/input, 4013] 
split level 182: [/input-8, 876] 
split level 183: [/input, 174] 
split level 184: [/input-8, 2038] 
split level 185: [/input, 3345] 
split level 186: [/input, 595] 
split level 187: [/input-8, 1235] 
split level 188: [/input, 1964] 
split level 189: [/input, 3908] 
split level 190: [/input-8, 958] 
split level 191: [/input, 3022] 
split level 192: [/input, 2962] 
split level 193: [/input, 3927] 
split level 194: [/input, 3642] 
split level 195: [/input, 3677] 
split level 196: [/input-8, 1427] 
split level 197: [/input, 2360] 
split level 198: [/input, 2024] 
split level 199: [/input, 2841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18401163816452026
10 lb beta sum: 0.0, worst -0.18400460481643677
Time: prepare 0.0117    bound 0.0958    transfer 0.0015    finalize 0.0026    func 0.1143    
Accumulated time: func 0.1671    prepare 0.0219    bound 0.1482    transfer 0.0016    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.32173496) min lb tensor(-0.18399471)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01018977165222168 
BICCOS Cumulative time: 0.01018977165222168
Preprocessing time: 0.009735345840454102 Inference time: 0.00015997886657714844 Add cuts time: 6.651878356933594e-05 Cut analysis time: 0.00022792816162109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16754 (1), -0.16742 (1), -0.16696 (1), -0.16672 (1), -0.16660 (1), -0.16613 (1), -0.16595 (1), -0.16589 (1), -0.16554 (1), -0.16499 (1), -0.16486 (1), -0.16401 (1), -0.16268 (1), -0.16203 (1), -0.16174 (1), -0.16147 (1), -0.16054 (1), -0.16009 (1), -0.15985 (1), -0.15934 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5095    set_bounds 0.0085    solve 0.1144    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5095    set_bounds 0.0085    solve 0.1144    add 0.0702    
Current (lb-rhs): -0.167535662651062
50 domains visited
Cumulative time: 0.7706947326660156

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 11] [/input-12, 13] [/input-12, 13] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15657389163970947
10 lb beta sum: 0.5283016562461853, worst -0.14285174012184143
Time: prepare 0.0076    bound 0.1158    transfer 0.0007    finalize 0.0024    func 0.1292    
Accumulated time: func 0.2963    prepare 0.0298    bound 0.2640    transfer 0.0023    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.44221658) min lb tensor(-0.14283696)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.019770145416259766 
BICCOS Cumulative time: 0.029959917068481445
Preprocessing time: 0.011508941650390625 Inference time: 0.005724668502807617 Add cuts time: 0.002192258834838867 Cut analysis time: 0.00034427642822265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05342 (2), -0.05327 (2), -0.05314 (2), -0.05306 (2), -0.05295 (2), -0.05278 (2), -0.05260 (2), -0.05229 (2), -0.05154 (2), -0.05150 (2), -0.05149 (2), -0.05139 (2), -0.05123 (2), -0.05060 (2), -0.05019 (2), -0.05009 (2), -0.05004 (2), -0.04968 (2), -0.04888 (2), -0.04886 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0115    solve 0.1292    add 0.1215    
Accumulated time: pickout 0.0014    decision 0.5290    set_bounds 0.0200    solve 0.2437    add 0.1917    
Current (lb-rhs): -0.05342215299606323
100 domains visited
Cumulative time: 1.0735232830047607

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] 
split level 3: [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0848349928855896
10 lb beta sum: 0.9796273708343506, worst -0.030019760131835938
Time: prepare 0.0074    bound 0.1323    transfer 0.0007    finalize 0.0024    func 0.1455    
Accumulated time: func 0.4418    prepare 0.0374    bound 0.3963    transfer 0.0031    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.45059049) min lb tensor(-0.02982545)
Number of Verified Splits: 363 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.036226511001586914 
BICCOS Cumulative time: 0.06618642807006836
Preprocessing time: 0.011358261108398438 Inference time: 0.013787031173706055 Add cuts time: 0.010395526885986328 Cut analysis time: 0.0006856918334960938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02776 (3), -0.02776 (3), -0.02776 (3), -0.02776 (3), -0.02775 (3), -0.02775 (3), -0.01185 (3), -0.01185 (3), -0.00451 (3), -0.00451 (3), -0.00449 (3), -0.00449 (3), -0.00447 (3), -0.00445 (3), -0.00444 (3), -0.00443 (3), 
Length of domains: 16
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0153    solve 0.1456    add 0.1012    
Accumulated time: pickout 0.0024    decision 0.5480    set_bounds 0.0352    solve 0.3892    add 0.2928    
Current (lb-rhs): -0.027764081954956055
116 domains visited
Cumulative time: 1.3919401168823242

Shallow-BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 1940] 
split level 4: [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 1940] [/input-8, 483] [/input-8, 483] 
split level 5: [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 850] 
split level 6: [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] 
split level 7: [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] 
split level 8: [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] 
split level 9: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
split level 10: [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] 
split level 11: [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07590305805206299
10 lb beta sum: 3.4928183555603027, worst -1.1682510375976562e-05
Time: prepare 0.0070    bound 0.1349    transfer 0.0007    finalize 0.0021    func 0.1474    
Accumulated time: func 0.5891    prepare 0.0451    bound 0.5312    transfer 0.0038    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.47491348) min lb tensor(2.98023224e-06)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.037406206130981445 
BICCOS Cumulative time: 0.1035926342010498
Preprocessing time: 0.011077165603637695 Inference time: 0.016895532608032227 Add cuts time: 0.008684873580932617 Cut analysis time: 0.0007486343383789062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0398    set_bounds 0.0115    solve 0.1475    add 0.0264    
Accumulated time: pickout 0.0030    decision 0.5878    set_bounds 0.0467    solve 0.5367    add 0.3192    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
116 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.82732465e+31, 4.83849108e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.82732465e+31, 4.42246050e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.82732465e+31, 1.05693683e-01, 4.63035524e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 1.05693683e-01, 3.92377824e-02, 1.72505844e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 1.05693683e-01, 3.92377824e-02, 3.91355008e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.82732465e+31, 9.92278904e-02, 4.67703938e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 9.92278904e-02, 2.24341024e-02, 2.77722944e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 9.92278904e-02, 2.24341024e-02, 5.39592355e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10114043951034546

all verified at 3th iter
Time: prepare 0.0004    bound 0.0309    transfer 0.0001    finalize 0.0002    func 0.0317    
Accumulated time: func 0.6208    prepare 0.0455    bound 0.5620    transfer 0.0039    finalize 0.0098    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 189.40060830116272
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 189.4005286693573
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 189.40050339698792
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 10.5996 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 559] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 559] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 275] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.40751857,  2.20469379, -2.32452035, -0.32005554, -2.33795738,
         -2.70371628, -1.07307470,  1.97626185,  0.69333363]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359],
         [-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.09549665,  0.16477060, -1.07928038, -1.21544552,  0.10565901]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 579] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 579] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 365] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.44665456,  4.78386164,  1.24888563, -0.92591417,  1.73357153,
          0.40172076,  0.80255318,  3.31306171,  4.20044756]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.04666615, -19.50651550, -11.78564644, -14.38106823, -11.57203579,
          -15.05305195, -13.48137379, -14.08794785, -17.24640465, -18.64059067]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21361065]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 523] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 523] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 203] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.61078930, -2.42233181, -2.06717491, -2.44244003, -1.87546539,
         -1.27228260, -1.18069935, -2.12183666, -1.19985104]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170],
         [-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00306034, -0.51282978, -0.42933416, -0.58280563, -0.01577282,
           0.50322437,  0.42051649, -0.66154861, -0.36894560]]],
       device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0837 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [767]; unstable size 767; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 767] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 767] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 767] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.12624145,  2.47288227, -1.31481647, -0.78547335, -1.26456189,
         -0.82690156,  0.44953951,  2.35486031,  1.43794250]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050],
         [ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04506731, -0.44293737,  0.02353954,  0.15715742]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.96445751, -13.95264721, -11.88872242, -12.43732738, -11.28103065,
         -13.65725136, -13.27398205, -14.68500137,  -4.78945637, -13.98094654]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 136, 1, 407] with unstable size 135 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 407] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [135]; unstable size 135; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 135] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 135] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.02164316, 7.83872032, 5.93336391, 6.63180161, 5.40730762, 7.70184660,
         7.39634609, 8.62479115, 8.04601192]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.38742971, -8.09583473, -4.17398930, -2.21849561, -4.56612682,
         -1.60451329, -3.84133196, -3.18707657, -8.22775269, -6.31927729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 525] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 525] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 226] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.95492101, 4.49830675, 1.13714695, 0.18978065, 1.74934626, 0.88679510,
         0.59362936, 4.57968712, 2.70802212]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61658096,  -4.85169363, -11.21480465, -12.01975822, -10.98789406,
         -12.65254879, -10.85314465, -10.63402939,  -8.40850830,  -8.61452770]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [603]; unstable size 603; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 603] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 603] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 603] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 214] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89015675, 3.85943222, 4.84163713, 3.92532873, 5.16841841, 3.74945831,
         3.27850246, 1.93241048, 2.38752627]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [822]; unstable size 822; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 822] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 822] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 822] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.36523795, -0.94602108, -2.17604661, -0.24087632, -2.33651757,
         -0.49621749,  0.76373535, -0.90574348, -0.11941862]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821],
         [-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.87897682,  1.22670174, -1.14855862,  0.08716774, -1.21749687,
           0.43707466,  1.16707039,  1.58916473]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         ...,


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0982 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.99211121, -14.04107761,  -7.31353474,  -9.89678955,  -8.41009998,
         -10.75332451, -10.63476658, -14.15501976,  -8.49472427, -14.58970451]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 584] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 584] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 140] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.93474388, 0.60455728, 3.06741548, 1.66697335, 3.81925988, 3.66227555,
         7.25833130, 1.59742737, 7.46314812]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.61421394, -9.33402538, -5.16767883, -2.64045858, -3.99503326,
         -2.02855682, -4.62166262, -4.60086203, -9.98200893, -8.04814816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 560] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 560] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83084631, 5.06325293, 1.78347707, 0.29397523, 0.66198158, 1.20087218,
         1.58306253, 5.80479670, 4.18815994]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 600] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 600] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 169] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27218604,  1.68873811, -0.96977448, -0.89153796, -0.69919300,
         -0.37939456, -0.73812270,  2.16678572,  0.28935552]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956],
         [-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16769171,  0.21125412,  0.03219175,  0.38568258,  0.65487623,
           0.83612490]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0777 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 638] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 638] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 200] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26122427,  2.70693946, -0.04236555,  0.30218935,  0.55265069,
          0.28326595,  0.97746253, -0.14264774,  2.10263634]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961],
         [-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.04460144, 0.72821045]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1151 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 9.889850616455078
alpha/beta optimization time: 1.2013416290283203
initial alpha-crown bounds: tensor([[ 2.37169170,  2.83057594,  0.08211231,  0.37143326,  0.65308595,
          0.37245834,  1.04918432, -0.03270400,  2.19201326]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03270399570465088
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62053275108337
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62049508094788
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62047028541565
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62045073509216
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.620432138443
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6204137802124
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.62039518356323
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.62037587165833
Verifying property 7 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03270400]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
        -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03270400]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 638
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 854
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03270435333251953
10 lb beta sum: 0.0, worst -0.032723188400268555
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 36] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1891] 
split level 7: [/input-8, 860] 
split level 8: [/input-8, 1910] 
split level 9: [/input-8, 548] 
split level 10: [/input-8, 1884] 
split level 11: [/input-8, 1902] 
split level 12: [/input-8, 1892] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 876] 
split level 15: [/input-12, 1] 
split level 16: [/input, 2525] 
split level 17: [/input-8, 667] 
split level 18: [/input-8, 666] 
split level 19: [/input-8, 1879] 
split level 20: [/input, 2426] 
split level 21: [/input, 2422] 
split level 22: [/input, 2409] 
split level 23: [/input, 2442] 
split level 24: [/input-8, 1874] 
split level 25: [/input, 3511] 
split level 26: [/input, 2765] 
split level 27: [/input, 2526] 
split level 28: [/input-8, 649] 
split level 29: [/input-8, 1918] 
split level 30: [/input-8, 859] 
split level 31: [/input-8, 1861] 
split level 32: [/input, 1479] 
split level 33: [/input-8, 1057] 
split level 34: [/input, 2407] 
split level 35: [/input-8, 506] 
split level 36: [/input, 2518] 
split level 37: [/input-8, 1469] 
split level 38: [/input-8, 556] 
split level 39: [/input-8, 1890] 
split level 40: [/input, 2503] 
split level 41: [/input, 2519] 
split level 42: [/input-8, 1350] 
split level 43: [/input, 1480] 
split level 44: [/input-8, 690] 
split level 45: [/input, 2541] 
split level 46: [/input-8, 1648] 
split level 47: [/input-8, 1307] 
split level 48: [/input, 1478] 
split level 49: [/input, 2540] 
split level 50: [/input, 2472] 
split level 51: [/input, 2377] 
split level 52: [/input, 3302] 
split level 53: [/input, 2517] 
split level 54: [/input-8, 410] 
split level 55: [/input, 2536] 
split level 56: [/input, 2331] 
split level 57: [/input-8, 812] 
split level 58: [/input-8, 1656] 
split level 59: [/input-8, 949] 
split level 60: [/input-8, 1065] 
split level 61: [/input, 2247] 
split level 62: [/input, 1742] 
split level 63: [/input-8, 1970] 
split level 64: [/input, 2521] 
split level 65: [/input-8, 421] 
split level 66: [/input, 3156] 
split level 67: [/input, 2348] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 964] 
split level 70: [/input, 2493] 
split level 71: [/input, 2263] 
split level 72: [/input-8, 147] 
split level 73: [/input, 3578] 
split level 74: [/input, 2343] 
split level 75: [/input, 2332] 
split level 76: [/input-8, 849] 
split level 77: [/input, 2902] 
split level 78: [/input-8, 388] 
split level 79: [/input, 102] 
split level 80: [/input, 2349] 
split level 81: [/input-8, 1081] 
split level 82: [/input, 2952] 
split level 83: [/input, 2510] 
split level 84: [/input, 3304] 
split level 85: [/input-8, 420] 
split level 86: [/input-8, 1862] 
split level 87: [/input, 2354] 
split level 88: [/input, 2370] 
split level 89: [/input, 2460] 
split level 90: [/input, 1758] 
split level 91: [/input-8, 564] 
split level 92: [/input, 2361] 
split level 93: [/input, 2365] 
split level 94: [/input, 2489] 
split level 95: [/input, 3384] 
split level 96: [/input, 2380] 
split level 97: [/input-8, 1984] 
split level 98: [/input-8, 1390] 
split level 99: [/input, 1710] 
split level 100: [/input, 3386] 
split level 101: [/input-12, 33] 
split level 102: [/input, 2389] 
split level 103: [/input, 2477] 
split level 104: [/input, 3224] 
split level 105: [/input-8, 944] 
split level 106: [/input-8, 1353] 
split level 107: [/input, 3576] 
split level 108: [/input, 3283] 
split level 109: [/input, 2443] 
split level 110: [/input, 3286] 
split level 111: [/input, 2363] 
split level 112: [/input-8, 463] 
split level 113: [/input, 1726] 
split level 114: [/input, 3126] 
split level 115: [/input, 3139] 
split level 116: [/input-8, 1926] 
split level 117: [/input, 4062] 
split level 118: [/input, 2444] 
split level 119: [/input, 3124] 
split level 120: [/input, 1355] 
split level 121: [/input, 3122] 
split level 122: [/input, 2398] 
split level 123: [/input, 2397] 
split level 124: [/input, 1356] 
split level 125: [/input, 1514] 
split level 126: [/input, 3208] 
split level 127: [/input, 3268] 
split level 128: [/input, 1596] 
split level 129: [/input, 3128] 
split level 130: [/input, 2436] 
split level 131: [/input, 3113] 
split level 132: [/input-8, 1932] 
split level 133: [/input, 1345] 
split level 134: [/input, 2985] 
split level 135: [/input, 614] 
split level 136: [/input, 1669] 
split level 137: [/input, 3150] 
split level 138: [/input, 1678] 
split level 139: [/input, 2538] 
split level 140: [/input, 3356] 
split level 141: [/input, 1646] 
split level 142: [/input, 2922] 
split level 143: [/input, 2473] 
split level 144: [/input, 3171] 
split level 145: [/input-8, 1925] 
split level 146: [/input, 1358] 
split level 147: [/input-8, 1860] 
split level 148: [/input, 3272] 
split level 149: [/input, 1347] 
split level 150: [/input, 3299] 
split level 151: [/input, 356] 
split level 152: [/input-8, 1624] 
split level 153: [/input, 3137] 
split level 154: [/input, 2327] 
split level 155: [/input-8, 1251] 
split level 156: [/input, 2552] 
split level 157: [/input, 3130] 
split level 158: [/input, 3106] 
split level 159: [/input, 2965] 
split level 160: [/input, 3404] 
split level 161: [/input, 3669] 
split level 162: [/input, 2347] 
split level 163: [/input, 2554] 
split level 164: [/input, 3204] 
split level 165: [/input, 2921] 
split level 166: [/input, 3267] 
split level 167: [/input, 3374] 
split level 168: [/input, 3390] 
split level 169: [/input, 324] 
split level 170: [/input, 3403] 
split level 171: [/input, 3217] 
split level 172: [/input, 3364] 
split level 173: [/input-8, 1314] 
split level 174: [/input, 3289] 
split level 175: [/input, 1323] 
split level 176: [/input, 3117] 
split level 177: [/input-8, 1796] 
split level 178: [/input, 2340] 
split level 179: [/input, 1305] 
split level 180: [/input, 3574] 
split level 181: [/input, 3186] 
split level 182: [/input, 3575] 
split level 183: [/input, 2259] 
split level 184: [/input, 3170] 
split level 185: [/input, 2553] 
split level 186: [/input, 3133] 
split level 187: [/input, 1557] 
split level 188: [/input, 3815] 
split level 189: [/input, 3293] 
split level 190: [/input, 3529] 
split level 191: [/input, 3938] 
split level 192: [/input-8, 389] 
split level 193: [/input, 369] 
split level 194: [/input, 2089] 
split level 195: [/input, 3281] 
split level 196: [/input-8, 1856] 
split level 197: [/input, 3817] 
split level 198: [/input, 1367] 
split level 199: [/input, 2931] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03266119956970215
10 lb beta sum: 0.0, worst -0.03267931938171387
Time: prepare 0.0115    bound 0.0972    transfer 0.0018    finalize 0.0030    func 0.1162    
Accumulated time: func 0.1690    prepare 0.0219    bound 0.1496    transfer 0.0019    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.17208374) min lb tensor(-0.03266120)
Number of Verified Splits: 26 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011618852615356445 
BICCOS Cumulative time: 0.011618852615356445
Preprocessing time: 0.009814739227294922 Inference time: 0.0009660720825195312 Add cuts time: 0.00030684471130371094 Cut analysis time: 0.0005311965942382812
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5122    set_bounds 0.0094    solve 0.1162    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5122    set_bounds 0.0094    solve 0.1162    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([-1.]), tensor([0]), tensor([3.81438769e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([1.]), tensor([0]), tensor([3.81438769e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007783174514770508

all verified at 1th iter
Time: prepare 0.0003    bound 0.0155    transfer 0.0001    finalize 0.0001    func 0.0160    
Accumulated time: func 0.1851    prepare 0.0222    bound 0.1651    transfer 0.0020    finalize 0.0032    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.65639305114746
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3437 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 553] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 553] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 288] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.69567013,  4.02234983, -0.46736050,  1.18290854, -0.48098463,
          1.44691169,  2.02048302,  4.17298126,  4.86422634]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005],
         [ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00954866, 0.58177662]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1140 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.36388397216797
alpha/beta optimization time: 1.1922621726989746
initial alpha-crown bounds: tensor([[ 2.79173493,  4.12782049, -0.40548599,  1.27908814, -0.38319361,
          1.54761863,  2.13196969,  4.29718494,  4.97714901]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.40548598766326904
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6211223602295
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6210858821869
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62106084823608
Verifying property 2 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.40548599]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
         -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.40548599]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 553
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 283
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 856
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.965896606445312e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4054843783378601
10 lb beta sum: 0.0, worst -0.4054867625236511
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 11] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 65] 
split level 4: [/input-12, 35] 
split level 5: [/input-8, 1894] 
split level 6: [/input-8, 626] 
split level 7: [/input-8, 1337] 
split level 8: [/input-8, 565] 
split level 9: [/input-8, 1370] 
split level 10: [/input-8, 1902] 
split level 11: [/input-8, 1563] 
split level 12: [/input-8, 1828] 
split level 13: [/input-8, 1371] 
split level 14: [/input-8, 1019] 
split level 15: [/input-8, 147] 
split level 16: [/input-8, 1386] 
split level 17: [/input-8, 1018] 
split level 18: [/input-8, 1436] 
split level 19: [/input-8, 1562] 
split level 20: [/input-8, 1564] 
split level 21: [/input-8, 1020] 
split level 22: [/input-8, 942] 
split level 23: [/input-8, 841] 
split level 24: [/input-8, 77] 
split level 25: [/input-8, 1292] 
split level 26: [/input-8, 933] 
split level 27: [/input-8, 650] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1420] 
split level 32: [/input-8, 1428] 
split level 33: [/input-8, 1042] 
split level 34: [/input-8, 180] 
split level 35: [/input-8, 1340] 
split level 36: [/input-8, 84] 
split level 37: [/input-8, 1402] 
split level 38: [/input-8, 890] 
split level 39: [/input-8, 2004] 
split level 40: [/input-8, 1444] 
split level 41: [/input-8, 1821] 
split level 42: [/input-8, 2013] 
split level 43: [/input-8, 1131] 
split level 44: [/input-8, 105] 
split level 45: [/input-8, 162] 
split level 46: [/input-8, 1001] 
split level 47: [/input-8, 893] 
split level 48: [/input-8, 1291] 
split level 49: [/input-8, 795] 
split level 50: [/input-8, 1588] 
split level 51: [/input-8, 1404] 
split level 52: [/input-8, 981] 
split level 53: [/input-8, 989] 
split level 54: [/input-8, 924] 
split level 55: [/input-8, 1421] 
split level 56: [/input-8, 1886] 
split level 57: [/input-8, 1589] 
split level 58: [/input-8, 1149] 
split level 59: [/input-8, 937] 
split level 60: [/input-8, 1868] 
split level 61: [/input-8, 1422] 
split level 62: [/input-8, 1002] 
split level 63: [/input-8, 923] 
split level 64: [/input-8, 984] 
split level 65: [/input, 1675] 
split level 66: [/input-8, 76] 
split level 67: [/input-8, 573] 
split level 68: [/input-8, 2037] 
split level 69: [/input, 2732] 
split level 70: [/input-8, 878] 
split level 71: [/input-8, 1876] 
split level 72: [/input-8, 1022] 
split level 73: [/input, 1724] 
split level 74: [/input, 1942] 
split level 75: [/input, 1926] 
split level 76: [/input-8, 486] 
split level 77: [/input-8, 976] 
split level 78: [/input-8, 1811] 
split level 79: [/input-8, 803] 
split level 80: [/input-8, 1325] 
split level 81: [/input-8, 290] 
split level 82: [/input-8, 1590] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1582] 
split level 85: [/input-8, 1916] 
split level 86: [/input-8, 67] 
split level 87: [/input-8, 1012] 
split level 88: [/input-8, 1141] 
split level 89: [/input, 3416] 
split level 90: [/input-8, 1092] 
split level 91: [/input-8, 972] 
split level 92: [/input-8, 2038] 
split level 93: [/input-8, 432] 
split level 94: [/input, 2492] 
split level 95: [/input-8, 1419] 
split level 96: [/input-8, 1755] 
split level 97: [/input-8, 1014] 
split level 98: [/input-8, 1458] 
split level 99: [/input-8, 2030] 
split level 100: [/input, 1740] 
split level 101: [/input-8, 953] 
split level 102: [/input-8, 1960] 
split level 103: [/input-8, 1788] 
split level 104: [/input, 1400] 
split level 105: [/input, 1773] 
split level 106: [/input-8, 1764] 
split level 107: [/input, 359] 
split level 108: [/input-8, 113] 
split level 109: [/input-8, 945] 
split level 110: [/input, 2170] 
split level 111: [/input-8, 2045] 
split level 112: [/input, 2733] 
split level 113: [/input-8, 877] 
split level 114: [/input-8, 559] 
split level 115: [/input-8, 1982] 
split level 116: [/input-8, 1869] 
split level 117: [/input, 209] 
split level 118: [/input-8, 2008] 
split level 119: [/input-8, 167] 
split level 120: [/input-8, 1784] 
split level 121: [/input, 2153] 
split level 122: [/input, 1948] 
split level 123: [/input, 1946] 
split level 124: [/input, 3558] 
split level 125: [/input-8, 910] 
split level 126: [/input-8, 2044] 
split level 127: [/input-8, 2022] 
split level 128: [/input, 1622] 
split level 129: [/input-8, 1996] 
split level 130: [/input-8, 1906] 
split level 131: [/input, 1725] 
split level 132: [/input-8, 2012] 
split level 133: [/input, 2745] 
split level 134: [/input, 1606] 
split level 135: [/input, 3380] 
split level 136: [/input, 4044] 
split level 137: [/input, 470] 
split level 138: [/input, 2616] 
split level 139: [/input, 2995] 
split level 140: [/input, 1238] 
split level 141: [/input, 4045] 
split level 142: [/input-8, 1838] 
split level 143: [/input, 3779] 
split level 144: [/input-8, 1786] 
split level 145: [/input-8, 118] 
split level 146: [/input, 4048] 
split level 147: [/input, 2788] 
split level 148: [/input-8, 1035] 
split level 149: [/input-8, 393] 
split level 150: [/input-8, 1595] 
split level 151: [/input, 3016] 
split level 152: [/input-8, 1998] 
split level 153: [/input-8, 1547] 
split level 154: [/input, 3763] 
split level 155: [/input, 2286] 
split level 156: [/input-8, 1992] 
split level 157: [/input, 1577] 
split level 158: [/input-8, 1418] 
split level 159: [/input, 2989] 
split level 160: [/input-8, 1552] 
split level 161: [/input, 2151] 
split level 162: [/input, 485] 
split level 163: [/input, 1830] 
split level 164: [/input-8, 1093] 
split level 165: [/input-8, 1560] 
split level 166: [/input, 2302] 
split level 167: [/input-8, 477] 
split level 168: [/input, 3780] 
split level 169: [/input-8, 1753] 
split level 170: [/input, 1530] 
split level 171: [/input, 3608] 
split level 172: [/input, 4043] 
split level 173: [/input, 3764] 
split level 174: [/input, 1578] 
split level 175: [/input, 1589] 
split level 176: [/input, 2908] 
split level 177: [/input, 1925] 
split level 178: [/input, 465] 
split level 179: [/input-8, 1776] 
split level 180: [/input, 3677] 
split level 181: [/input, 2842] 
split level 182: [/input-8, 1877] 
split level 183: [/input, 1833] 
split level 184: [/input, 1816] 
split level 185: [/input, 498] 
split level 186: [/input, 2925] 
split level 187: [/input, 3600] 
split level 188: [/input, 2825] 
split level 189: [/input, 4034] 
split level 190: [/input, 3610] 
split level 191: [/input, 1719] 
split level 192: [/input, 2834] 
split level 193: [/input, 1648] 
split level 194: [/input, 1570] 
split level 195: [/input, 1829] 
split level 196: [/input, 1815] 
split level 197: [/input, 3601] 
split level 198: [/input, 3693] 
split level 199: [/input, 4016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40542393922805786
10 lb beta sum: 0.0, worst -0.40542542934417725
Time: prepare 0.0114    bound 0.0971    transfer 0.0015    finalize 0.0028    func 0.1155    
Accumulated time: func 0.1679    prepare 0.0216    bound 0.1490    transfer 0.0016    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(-0.13681161) min lb tensor(-0.40541786)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009837627410888672 
BICCOS Cumulative time: 0.009837627410888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39308 (1), -0.39294 (1), -0.39272 (1), -0.39245 (1), -0.39200 (1), -0.39192 (1), -0.39170 (1), -0.39119 (1), -0.39084 (1), -0.39037 (1), -0.38998 (1), -0.38977 (1), -0.38922 (1), -0.38900 (1), -0.38843 (1), -0.38783 (1), -0.38305 (1), -0.38249 (1), -0.38196 (1), -0.38162 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5091    set_bounds 0.0087    solve 0.1156    add 0.0680    
Accumulated time: pickout 0.0003    decision 0.5091    set_bounds 0.0087    solve 0.1156    add 0.0680    
Current (lb-rhs): -0.39307814836502075
50 domains visited
Cumulative time: 0.7757301330566406

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 11] [/input-12, 35] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 35] [/input-8, 1563] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 3: [/input-8, 812] [/input-8, 1902] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38475221395492554
10 lb beta sum: 0.0, worst -0.38450247049331665
Time: prepare 0.0128    bound 0.0952    transfer 0.0007    finalize 0.0022    func 0.1136    
Accumulated time: func 0.2814    prepare 0.0347    bound 0.2442    transfer 0.0024    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.08059597) min lb tensor(-0.38437557)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01204228401184082 
BICCOS Cumulative time: 0.021879911422729492
Preprocessing time: 0.011617183685302734 Inference time: 0.00013184547424316406 Add cuts time: 6.079673767089844e-05 Cut analysis time: 0.00023245811462402344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10451 (2), -0.10401 (2), -0.10218 (2), -0.10157 (2), -0.10156 (2), -0.10108 (2), -0.10046 (2), -0.09948 (2), -0.09885 (2), -0.09738 (2), -0.09704 (2), -0.09685 (2), -0.09643 (2), -0.09639 (2), -0.09634 (2), -0.09587 (2), -0.09500 (2), -0.09342 (2), -0.09308 (2), -0.09307 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0112    solve 0.1136    add 0.1002    
Accumulated time: pickout 0.0014    decision 0.5281    set_bounds 0.0199    solve 0.2293    add 0.1682    
Current (lb-rhs): -0.10451149940490723
100 domains visited
Cumulative time: 1.0335955619812012

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 60] [/input-12, 58] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] 
split level 2: [/input-8, 650] [/input-8, 650] [/input-12, 35] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 812] [/input-8, 1563] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09654545783996582
10 lb beta sum: 0.1514929085969925, worst -0.10402989387512207
Time: prepare 0.0077    bound 0.1157    transfer 0.0007    finalize 0.0023    func 0.1289    
Accumulated time: func 0.4104    prepare 0.0426    bound 0.3599    transfer 0.0030    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.41009045) min lb tensor(-0.08283031)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.022005319595336914 
BICCOS Cumulative time: 0.043885231018066406
Preprocessing time: 0.011417388916015625 Inference time: 0.006398439407348633 Add cuts time: 0.0033500194549560547 Cut analysis time: 0.0008394718170166016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05495 (3), -0.05454 (3), -0.05433 (3), -0.05272 (3), -0.05203 (3), -0.05152 (3), -0.05076 (3), -0.05005 (3), -0.04726 (3), -0.04697 (3), -0.04665 (3), -0.04593 (3), -0.04226 (3), -0.04213 (3), -0.04127 (3), -0.03596 (3), -0.03197 (3), -0.02993 (3), -0.02793 (3), -0.02765 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0149    solve 0.1290    add 0.1058    
Accumulated time: pickout 0.0024    decision 0.5471    set_bounds 0.0348    solve 0.3583    add 0.2740    
Current (lb-rhs): -0.0549473762512207
150 domains visited
Cumulative time: 1.32566499710083

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 58] [/input-12, 58] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1563] [/input-8, 1563] [/input-8, 650] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05274820327758789
10 lb beta sum: 0.6744555234909058, worst -0.08352131396532059
Time: prepare 0.0078    bound 0.1306    transfer 0.0007    finalize 0.0023    func 0.1441    
Accumulated time: func 0.5545    prepare 0.0506    bound 0.4905    transfer 0.0038    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.35750389) min lb tensor(-0.03637028)
Number of Verified Splits: 276 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.031630516052246094 
BICCOS Cumulative time: 0.0755157470703125
Preprocessing time: 0.011340618133544922 Inference time: 0.011911630630493164 Add cuts time: 0.008121728897094727 Cut analysis time: 0.00025653839111328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0148    solve 0.1442    add 0.0222    
Accumulated time: pickout 0.0034    decision 0.5663    set_bounds 0.0496    solve 0.5025    add 0.2962    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.52147772e-11, 2.39847768e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.52147772e-11, 2.70436794e-01, 6.72470778e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.52147772e-11, 2.70436794e-01, 2.55414713e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.82733239e+31, 2.57664144e-01, 4.24406976e-02, 2.40257885e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.82733239e+31, 2.57664144e-01, 4.24406976e-02, 1.55166432e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.82733239e+31, 2.57664144e-01, 4.89919633e-02, 1.83856953e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.82733239e+31, 2.57664144e-01, 4.89919633e-02, 1.56114623e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([7.82733239e+31, 9.16038640e-03]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3150063157081604
10 lb beta sum: 0.2803649604320526, worst -0.2898014783859253
Time: prepare 0.0004    bound 0.1103    transfer 0.0001    finalize 0.0002    func 0.1111    
Accumulated time: func 0.6656    prepare 0.0510    bound 0.6008    transfer 0.0039    finalize 0.0098    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-8, 1902] [/input-8, 1902] [/input-12, 60] 
split level 1: [/input-12, 65] [/input-8, 1404] [/input-8, 1404] [/input-12, 65] 
split level 2: [/input-12, 35] [/input-8, 1340] [/input-8, 1340] [/input-12, 35] 
split level 3: [/input-8, 1902] [/input-8, 650] [/input-8, 650] [/input-8, 1902] 
split level 4: [/input-8, 1563] [/input-8, 1877] [/input-8, 1877] [/input-8, 1563] 
split level 5: [/input-8, 1371] [/input-8, 812] [/input-8, 812] [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732657730579376, worst -0.23657256364822388
10 lb beta sum: 0.23732657730579376, worst -0.23600810766220093
Time: prepare 0.0110    bound 0.1130    transfer 0.0028    finalize 0.0014    func 0.1299    
Accumulated time: func 0.7955    prepare 0.0624    bound 0.7138    transfer 0.0067    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.30407450) min lb tensor(-0.23580933)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23732659220695496, worst -0.31396350264549255
10 lb beta sum: 0.38736259937286377, worst -0.12489226460456848
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.24161624908447266 
BICCOS Cumulative time: 0.31713199615478516
Preprocessing time: 0.007021188735961914 Inference time: 0.23026084899902344 Add cuts time: 0.004088640213012695 Cut analysis time: 0.0002455711364746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23581 (6), -0.23473 (6), -0.23197 (6), -0.23101 (6), -0.23087 (6), -0.23030 (6), -0.22717 (6), -0.22644 (6), -0.22340 (6), -0.22320 (6), -0.22213 (6), -0.22209 (6), -0.22178 (6), -0.21989 (6), -0.21956 (6), -0.21933 (6), -0.21904 (6), -0.21832 (6), -0.21790 (6), -0.21690 (6), 
Length of domains: 64
Time: pickout 0.0005    decision 0.0189    set_bounds 0.0178    solve 0.1300    add 0.0011    
Accumulated time: pickout 0.0038    decision 0.5851    set_bounds 0.0674    solve 0.6325    add 0.2974    
Current (lb-rhs): -0.235809326171875
214 domains visited
Cumulative time: 2.0988006591796875

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1371] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 147] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 1371] [/input-8, 147] 
split level 1: [/input-8, 924] [/input-8, 924] [/input-8, 1020] [/input-8, 933] [/input-8, 923] [/input-8, 924] [/input-8, 1020] [/input-8, 933] [/input-8, 924] [/input-8, 924] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732657730579376, worst -0.2254648208618164
10 lb beta sum: 0.23732657730579376, worst -0.22522932291030884
Time: prepare 0.0111    bound 0.1145    transfer 0.0006    finalize 0.0012    func 0.1292    
Accumulated time: func 0.9247    prepare 0.0737    bound 0.8283    transfer 0.0073    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.02943298) min lb tensor(-0.22509599)
Number of Verified Splits: 75 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.015398979187011719 
BICCOS Cumulative time: 0.3325309753417969
Preprocessing time: 0.0076389312744140625 Inference time: 0.006406545639038086 Add cuts time: 0.0006330013275146484 Cut analysis time: 0.0007205009460449219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22510 (8), -0.22394 (8), -0.22126 (8), -0.22042 (8), -0.22004 (8), -0.21959 (8), -0.21819 (8), -0.21749 (8), -0.21657 (8), -0.21569 (8), -0.21432 (8), -0.21421 (8), -0.21359 (8), -0.21351 (8), -0.21348 (8), -0.21325 (8), -0.21314 (8), -0.21270 (8), -0.21238 (8), -0.21156 (8), 
Length of domains: 181
Time: pickout 0.0017    decision 0.0141    set_bounds 0.1540    solve 0.1292    add 0.0015    
Accumulated time: pickout 0.0055    decision 0.5992    set_bounds 0.2214    solve 0.7618    add 0.2989    
Current (lb-rhs): -0.2250959873199463
395 domains visited
Cumulative time: 2.415438413619995

BaB round 3
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22115665674209595
10 lb beta sum: 0.0019854651764035225, worst -0.22105729579925537
Time: prepare 0.0072    bound 0.1356    transfer 0.0007    finalize 0.0018    func 0.1477    
Accumulated time: func 1.0724    prepare 0.0811    bound 0.9640    transfer 0.0079    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.02990304) min lb tensor(-0.22101849)
Number of Verified Splits: 89 of 362
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01893162727355957 
BICCOS Cumulative time: 0.35146260261535645
Preprocessing time: 0.010423660278320312 Inference time: 0.007599353790283203 Add cuts time: 0.0006704330444335938 Cut analysis time: 0.00023818016052246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22102 (9), -0.22017 (9), -0.21725 (9), -0.21637 (9), -0.21622 (9), -0.21583 (9), -0.21411 (9), -0.21372 (9), -0.21260 (9), -0.21189 (9), -0.21045 (9), -0.21031 (9), -0.20992 (9), -0.20979 (9), -0.20946 (9), -0.20939 (9), -0.20872 (9), -0.20856 (9), -0.20850 (9), -0.20753 (9), 
Length of domains: 273
Time: pickout 0.0024    decision 0.0214    set_bounds 0.0157    solve 0.1478    add 0.0016    
Accumulated time: pickout 0.0079    decision 0.6206    set_bounds 0.2371    solve 0.9096    add 0.3005    
Current (lb-rhs): -0.2210184931755066
668 domains visited
Cumulative time: 2.6248514652252197

BaB round 4
batch: 273
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 1020] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 1020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2171282172203064
10 lb beta sum: 0.0061432793736457825, worst -0.21710127592086792
Time: prepare 0.0106    bound 0.1213    transfer 0.0012    finalize 0.0022    func 0.1394    
Accumulated time: func 1.2118    prepare 0.0919    bound 1.0852    transfer 0.0091    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.00905430) min lb tensor(-0.21708810)
Number of Verified Splits: 22 of 546
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.018424510955810547 
BICCOS Cumulative time: 0.369887113571167
Preprocessing time: 0.015219926834106445 Inference time: 0.0020105838775634766 Add cuts time: 0.0002372264862060547 Cut analysis time: 0.0009567737579345703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21709 (10), -0.21315 (10), -0.21285 (10), -0.21243 (10), -0.21157 (10), -0.21016 (10), -0.20918 (10), -0.20879 (10), -0.20820 (10), -0.20768 (10), -0.20723 (10), -0.20670 (10), -0.20597 (10), -0.20584 (10), -0.20562 (10), -0.20551 (10), -0.20512 (10), -0.20479 (10), -0.20452 (10), -0.20361 (10), 
Length of domains: 524
Time: pickout 0.0035    decision 0.0251    set_bounds 0.0233    solve 0.1396    add 0.0029    
Accumulated time: pickout 0.0115    decision 0.6457    set_bounds 0.2604    solve 1.0492    add 0.3034    
Current (lb-rhs): -0.21708810329437256
1192 domains visited
Cumulative time: 2.838402509689331

BaB round 5
batch: 524
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1436] [/input-8, 650] [/input-8, 1436] [/input-8, 1020] [/input-8, 933] [/input-8, 650] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 650] 
cut re-enabled after branching node selection
0 lb beta sum: 0.005376463755965233, worst -0.21014195680618286
10 lb beta sum: 0.005376463755965233, worst -0.2101222276687622
Time: prepare 0.0443    bound 0.1271    transfer 0.0050    finalize 0.0042    func 0.1874    
Accumulated time: func 1.3992    prepare 0.1364    bound 1.2124    transfer 0.0141    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(0.03199914) min lb tensor(-0.21011275)
Number of Verified Splits: 23 of 1048
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.034212589263916016 
BICCOS Cumulative time: 0.404099702835083
Preprocessing time: 0.0316624641418457 Inference time: 0.002134561538696289 Add cuts time: 0.0001766681671142578 Cut analysis time: 0.00023889541625976562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21011 (11), -0.20930 (11), -0.20843 (11), -0.20750 (11), -0.20583 (11), -0.20544 (11), -0.20492 (11), -0.20483 (11), -0.20422 (11), -0.20378 (11), -0.20316 (11), -0.20316 (11), -0.20313 (11), -0.20284 (11), -0.20150 (11), -0.20116 (11), -0.20105 (11), -0.20046 (11), -0.19958 (11), -0.19892 (11), 
Length of domains: 1025
Time: pickout 0.0076    decision 0.0394    set_bounds 0.0443    solve 0.1884    add 0.0043    
Accumulated time: pickout 0.0191    decision 0.6851    set_bounds 0.3047    solve 1.2376    add 0.3077    
Current (lb-rhs): -0.21011275053024292
2217 domains visited
Cumulative time: 3.157785654067993

BaB round 6
batch: 1025
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1018] [/input-8, 1903] [/input-8, 1018] [/input-8, 1903] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00023153812799137086, worst -0.2081146240234375
10 lb beta sum: 0.00023153812799137086, worst -0.208107590675354
Time: prepare 0.0873    bound 0.1485    transfer 0.0061    finalize 0.0090    func 0.2641    
Accumulated time: func 1.6634    prepare 0.2239    bound 1.3608    transfer 0.0202    finalize 0.0296    
all_split False
======================Cut inference begins======================
max lb tensor(0.00986804) min lb tensor(-0.20809847)
Number of Verified Splits: 2 of 2050
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.06195640563964844 
BICCOS Cumulative time: 0.46605610847473145
Preprocessing time: 0.06161308288574219 Inference time: 0.00026607513427734375 Add cuts time: 6.365776062011719e-05 Cut analysis time: 1.3589859008789062e-05
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20810 (12), -0.20715 (12), -0.20642 (12), -0.20536 (12), -0.20381 (12), -0.20341 (12), -0.20277 (12), -0.20268 (12), -0.20218 (12), -0.20176 (12), -0.20101 (12), -0.20100 (12), -0.20095 (12), -0.20048 (12), -0.19928 (12), -0.19914 (12), -0.19868 (12), -0.19830 (12), -0.19754 (12), -0.19676 (12), 
Length of domains: 2048
Time: pickout 0.0120    decision 0.0664    set_bounds 0.0845    solve 0.2651    add 0.0098    
Accumulated time: pickout 0.0310    decision 0.7515    set_bounds 0.3892    solve 1.5026    add 0.3176    
Current (lb-rhs): -0.20809847116470337
4265 domains visited
Cumulative time: 3.6594996452331543

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1340] [/input-8, 1292] [/input-8, 650] [/input-8, 1340] [/input-8, 1340] [/input-8, 1292] [/input-8, 650] [/input-8, 1131] [/input-8, 1340] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20147007703781128
10 lb beta sum: 0.0, worst -0.2014673948287964
Time: prepare 0.1759    bound 0.2315    transfer 0.0165    finalize 0.0201    func 0.4715    
Accumulated time: func 2.1349    prepare 0.4000    bound 1.5923    transfer 0.0368    finalize 0.0497    
all_split False
======================Cut inference begins======================
max lb tensor(-0.10681838) min lb tensor(-0.20145589)
Number of Verified Splits: 0 of 4096
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.12471437454223633 
BICCOS Cumulative time: 0.5907704830169678
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20146 (13), -0.20053 (13), -0.19978 (13), -0.19952 (13), -0.19874 (13), -0.19855 (13), -0.19784 (13), -0.19718 (13), -0.19678 (13), -0.19676 (13), -0.19615 (13), -0.19607 (13), -0.19553 (13), -0.19523 (13), -0.19512 (13), -0.19484 (13), -0.19439 (13), -0.19438 (13), -0.19424 (13), -0.19417 (13), 
Length of domains: 4096
Time: pickout 0.0322    decision 0.2557    set_bounds 0.1726    solve 0.4726    add 0.0436    
Accumulated time: pickout 0.0632    decision 1.0072    set_bounds 0.5618    solve 1.9752    add 0.3612    
Current (lb-rhs): -0.20145589113235474
8361 domains visited
Cumulative time: 4.76561164855957

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 650] [/input-8, 84] [/input-8, 1340] [/input-8, 1018] [/input-8, 650] [/input-8, 84] [/input-8, 1340] [/input-8, 1340] [/input-8, 650] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19638818502426147
10 lb beta sum: 0.0, worst -0.19636040925979614
Time: prepare 0.3542    bound 0.3973    transfer 0.0384    finalize 0.0379    func 1.0666    
Accumulated time: func 3.2015    prepare 0.7546    bound 1.9896    transfer 0.0752    finalize 0.0876    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07737327) min lb tensor(-0.19635451)
Number of Verified Splits: 0 of 8192
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.250262975692749 
BICCOS Cumulative time: 0.8410334587097168
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19635 (14), -0.19501 (14), -0.19469 (14), -0.19440 (14), -0.19424 (14), -0.19321 (14), -0.19306 (14), -0.19303 (14), -0.19273 (14), -0.19252 (14), -0.19230 (14), -0.19204 (14), -0.19167 (14), -0.19125 (14), -0.19123 (14), -0.19106 (14), -0.19062 (14), -0.19057 (14), -0.19057 (14), -0.19047 (14), 
Length of domains: 8192
Time: pickout 0.0423    decision 0.3687    set_bounds 0.3524    solve 1.0686    add 0.0390    
Accumulated time: pickout 0.1056    decision 1.3759    set_bounds 0.9142    solve 3.0438    add 0.4001    
Current (lb-rhs): -0.19635450839996338
16553 domains visited
current_vram/total_varm: 9.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 6.8964011669158936

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1292] [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1018] [/input-8, 795] [/input-8, 1291] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19115930795669556
10 lb beta sum: 0.0, worst -0.191148042678833
Time: prepare 0.7137    bound 0.7335    transfer 0.0793    finalize 0.0780    func 1.7132    
Accumulated time: func 4.9147    prepare 1.4686    bound 2.7230    transfer 0.1545    finalize 0.1656    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06412268) min lb tensor(-0.19113606)
Number of Verified Splits: 0 of 16384
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.5151329040527344 
BICCOS Cumulative time: 1.3561663627624512
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19114 (15), -0.18983 (15), -0.18960 (15), -0.18947 (15), -0.18918 (15), -0.18895 (15), -0.18818 (15), -0.18788 (15), -0.18783 (15), -0.18761 (15), -0.18755 (15), -0.18752 (15), -0.18744 (15), -0.18744 (15), -0.18720 (15), -0.18699 (15), -0.18697 (15), -0.18646 (15), -0.18622 (15), -0.18585 (15), 
Length of domains: 16384
Time: pickout 0.0853    decision 0.6176    set_bounds 0.9227    solve 1.7160    add 0.1906    
Accumulated time: pickout 0.1908    decision 1.9935    set_bounds 1.8369    solve 4.7599    add 0.5908    
Current (lb-rhs): -0.19113606214523315
32937 domains visited
current_vram/total_varm: 18.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 10.960832118988037

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 989] [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 1292] [/input-8, 1131] [/input-8, 1018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18859106302261353
10 lb beta sum: 0.0, worst -0.18856209516525269
Time: prepare 1.4302    bound 1.4053    transfer 0.1567    finalize 0.4435    func 3.6484    
Accumulated time: func 8.5630    prepare 2.8992    bound 4.1284    transfer 0.3111    finalize 0.6091    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05489373) min lb tensor(-0.18855715)
Number of Verified Splits: 0 of 32768
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 1.042872428894043 
BICCOS Cumulative time: 2.399038791656494
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18856 (16), -0.18715 (16), -0.18698 (16), -0.18689 (16), -0.18634 (16), -0.18606 (16), -0.18551 (16), -0.18522 (16), -0.18485 (16), -0.18474 (16), -0.18471 (16), -0.18467 (16), -0.18456 (16), -0.18447 (16), -0.18439 (16), -0.18438 (16), -0.18388 (16), -0.18385 (16), -0.18308 (16), -0.18300 (16), 
Length of domains: 32768
Time: pickout 0.1687    decision 1.8789    set_bounds 1.9438    solve 3.6537    add 0.1734    
Accumulated time: pickout 0.3596    decision 3.8724    set_bounds 3.7807    solve 8.4135    add 0.7641    
Current (lb-rhs): -0.18855714797973633
65705 domains visited
current_vram/total_varm: 26.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 19.85473942756653

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1291] [/input-8, 1340] [/input-8, 1886] [/input-8, 893] [/input-8, 1291] [/input-8, 1340] [/input-8, 1886] [/input-8, 989] [/input-8, 1291] [/input-8, 1340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1855236291885376
10 lb beta sum: 0.0, worst -0.18551099300384521
Time: prepare 2.9159    bound 7.9445    transfer 0.3112    finalize 0.8346    func 12.4348    
Accumulated time: func 20.9978    prepare 5.8155    bound 12.0729    transfer 0.6223    finalize 1.4438    
all_split False
======================Cut inference begins======================
max lb tensor(-0.04070044) min lb tensor(-0.18549407)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.120061159133911 
BICCOS Cumulative time: 4.519099950790405
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18549 (17), -0.18407 (17), -0.18383 (17), -0.18383 (17), -0.18328 (17), -0.18263 (17), -0.18242 (17), -0.18242 (17), -0.18206 (17), -0.18188 (17), -0.18158 (17), -0.18157 (17), -0.18152 (17), -0.18151 (17), -0.18135 (17), -0.18131 (17), -0.18099 (17), -0.18097 (17), -0.18094 (17), -0.18081 (17), 
Length of domains: 65536
Time: pickout 0.3514    decision 3.5682    set_bounds 3.8062    solve 12.4451    add 0.3259    
Accumulated time: pickout 0.7110    decision 7.4406    set_bounds 7.5869    solve 20.8586    add 1.0901    
Current (lb-rhs): -0.185494065284729
131241 domains visited
Cumulative time: 42.548895835876465

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1820979118347168
10 lb beta sum: 0.0, worst -0.1820744276046753
Time: prepare 2.8936    bound 7.9424    transfer 0.3249    finalize 0.3710    func 12.6632    
Accumulated time: func 33.6611    prepare 8.7097    bound 20.0153    transfer 0.9472    finalize 1.8148    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03067231) min lb tensor(-0.18206429)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.2551157474517822 
BICCOS Cumulative time: 6.7742156982421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18263 (17), -0.18242 (17), -0.18206 (18), -0.18188 (17), -0.18135 (17), -0.18099 (17), -0.18097 (17), -0.18094 (17), -0.18077 (17), -0.18077 (18), -0.18041 (17), -0.18040 (18), -0.18020 (17), -0.18012 (17), -0.17984 (18), -0.17970 (17), -0.17965 (17), -0.17957 (17), -0.17948 (17), -0.17933 (17), 
Length of domains: 98304
Time: pickout 0.4333    decision 3.8546    set_bounds 4.2486    solve 12.6733    add 26.9811    
Accumulated time: pickout 1.1443    decision 11.2952    set_bounds 11.8355    solve 33.5320    add 28.0712    
Current (lb-rhs): -0.182634174823761
196777 domains visited
Cumulative time: 93.08059310913086

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 795] [/input-8, 1292] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17947840690612793
10 lb beta sum: 0.0, worst -0.17947691679000854
Time: prepare 2.9585    bound 7.9854    transfer 0.3254    finalize 0.3921    func 12.0874    
Accumulated time: func 45.7485    prepare 11.6689    bound 28.0007    transfer 1.2726    finalize 2.2069    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03261089) min lb tensor(-0.17946631)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.160149335861206 
BICCOS Cumulative time: 8.934365034103394
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18206 (18), -0.18077 (18), -0.18040 (18), -0.17984 (18), -0.17947 (18), -0.17912 (18), -0.17899 (18), -0.17859 (18), -0.17835 (18), -0.17826 (18), -0.17808 (18), -0.17808 (18), -0.17787 (18), -0.17774 (18), -0.17769 (18), -0.17738 (18), -0.17736 (18), -0.17733 (18), -0.17677 (18), -0.17677 (18), 
Length of domains: 131072
Time: pickout 0.4461    decision 3.7121    set_bounds 4.3580    solve 13.0288    add 0.3174    
Accumulated time: pickout 1.5904    decision 15.0073    set_bounds 16.1935    solve 46.5607    add 28.3885    
Current (lb-rhs): -0.18206429481506348
262313 domains visited
Cumulative time: 117.16790986061096

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 795] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1747249960899353
10 lb beta sum: 0.0, worst -0.17469370365142822
Time: prepare 2.9722    bound 8.0232    transfer 0.3226    finalize 1.4971    func 13.2438    
Accumulated time: func 58.9923    prepare 14.6418    bound 36.0239    transfer 1.5952    finalize 3.7041    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02500331) min lb tensor(-0.17464554)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1369199752807617 
BICCOS Cumulative time: 11.071285009384155
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18206 (18), -0.18077 (18), -0.18040 (18), -0.17984 (18), -0.17947 (18), -0.17912 (18), -0.17899 (18), -0.17859 (18), -0.17826 (18), -0.17808 (18), -0.17808 (18), -0.17787 (18), -0.17774 (18), -0.17769 (18), -0.17738 (18), -0.17736 (18), -0.17733 (18), -0.17677 (18), -0.17677 (18), -0.17663 (18), 
Length of domains: 163840
Time: pickout 0.4528    decision 3.3639    set_bounds 4.4129    solve 13.2559    add 0.3432    
Accumulated time: pickout 2.0432    decision 18.3712    set_bounds 20.6064    solve 59.8166    add 28.7317    
Current (lb-rhs): -0.18206429481506348
327849 domains visited
Cumulative time: 141.26631450653076

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1788957118988037
10 lb beta sum: 0.0, worst -0.17889368534088135
Time: prepare 3.0245    bound 8.0037    transfer 0.3276    finalize 0.4994    func 12.2844    
Accumulated time: func 71.2767    prepare 17.6671    bound 44.0276    transfer 1.9228    finalize 4.2035    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02488112) min lb tensor(-0.17888176)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1872870922088623 
BICCOS Cumulative time: 13.258572101593018
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (18), -0.17899 (18), -0.17888 (19), -0.17808 (18), -0.17774 (18), -0.17769 (18), -0.17748 (19), -0.17736 (18), -0.17733 (18), -0.17717 (19), -0.17679 (19), -0.17677 (18), -0.17663 (18), -0.17639 (18), -0.17639 (18), -0.17629 (18), -0.17604 (18), -0.17579 (19), -0.17572 (18), -0.17572 (18), 
Length of domains: 196608
Time: pickout 0.4705    decision 4.5486    set_bounds 5.0577    solve 12.2967    add 0.3026    
Accumulated time: pickout 2.5137    decision 22.9198    set_bounds 25.6641    solve 72.1133    add 29.0343    
Current (lb-rhs): -0.17946630716323853
393385 domains visited
Cumulative time: 166.2195429801941

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17277228832244873
10 lb beta sum: 0.0, worst -0.17275774478912354
Time: prepare 2.9755    bound 8.0074    transfer 0.3982    finalize 0.4764    func 13.9405    
Accumulated time: func 85.2171    prepare 20.6434    bound 52.0350    transfer 2.3210    finalize 4.6799    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02633762) min lb tensor(-0.17269897)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.0900704860687256 
BICCOS Cumulative time: 15.348642587661743
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (18), -0.17899 (18), -0.17888 (19), -0.17808 (18), -0.17774 (18), -0.17769 (18), -0.17748 (19), -0.17736 (18), -0.17733 (18), -0.17717 (19), -0.17679 (19), -0.17677 (18), -0.17663 (18), -0.17639 (18), -0.17629 (18), -0.17604 (18), -0.17579 (19), -0.17572 (18), -0.17572 (18), -0.17555 (18), 
Length of domains: 229376
Time: pickout 0.4805    decision 4.6327    set_bounds 3.4294    solve 13.9533    add 0.4045    
Accumulated time: pickout 2.9942    decision 27.5524    set_bounds 29.0935    solve 86.0666    add 29.4388    
Current (lb-rhs): -0.17946630716323853
458921 domains visited
Cumulative time: 191.35933542251587

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1769188642501831
10 lb beta sum: 0.0, worst -0.17689013481140137
Time: prepare 3.0016    bound 8.0095    transfer 0.4601    finalize 0.5044    func 12.4102    
Accumulated time: func 97.6273    prepare 23.6458    bound 60.0446    transfer 2.7812    finalize 5.1843    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02668786) min lb tensor(-0.17688042)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1649091243743896 
BICCOS Cumulative time: 17.513551712036133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17888 (19), -0.17748 (19), -0.17717 (19), -0.17688 (19), -0.17679 (19), -0.17580 (19), -0.17579 (19), -0.17549 (19), -0.17517 (19), -0.17511 (19), -0.17494 (19), -0.17490 (19), -0.17479 (19), -0.17465 (19), -0.17460 (19), -0.17439 (19), -0.17420 (19), -0.17411 (19), -0.17378 (19), -0.17372 (19), 
Length of domains: 262144
Time: pickout 0.4728    decision 3.3616    set_bounds 5.3390    solve 12.4208    add 0.3620    
Accumulated time: pickout 3.4670    decision 30.9140    set_bounds 34.4325    solve 98.4873    add 29.8008    
Current (lb-rhs): -0.17888176441192627
524457 domains visited
Time out!!!!!!!!
Result: unknown in 219.2881 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 579] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 579] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 191] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.80924940,  2.66314459,  6.04740000,  2.98685789,  6.92152977,
          6.10498905,  4.46677637, -1.73226333,  3.55088139]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
          -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.80151939]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0666 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 561] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 561] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.82033348,  4.02014828, -0.46752262, -0.34412289, -0.36842346,
          1.16381502, -0.08054897,  4.18153286,  2.90686536]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.66181135, -8.20787239, -3.11358619, -2.42211366, -2.97288847,
          -2.58318949, -4.48878956, -3.49081755, -8.25464249, -7.20841789],
         [-6.66181135, -8.20787239, -3.11358619, -2.42211366, -2.97288847,
          -2.58318949, -4.48878956, -3.49081755, -8.25464249, -7.20841789]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.53039670, -0.16107583,  0.38969898,  0.90762806]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0140 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0560 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 486] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 486] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 197] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56799006, -1.02534294, -0.31647959,  1.51819468,  0.67600739,
         -0.32146615,  2.05102563, -1.13650227, -0.20026422]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00282240, -5.31585503, -6.18742752, -5.74986649, -7.84297562,
          -6.85040140, -5.90831709, -8.36210918, -5.61094189, -6.28945971],
         [-6.00282240, -5.31585503, -6.18742752, -5.74986649, -7.84297562,
          -6.85040140, -5.90831709, -8.36210918, -5.61094189, -6.28945971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25295591, -0.43401146,  0.43756104,  0.15845060, -0.13892460,
           0.53959322]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0121 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0464 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [610]; unstable size 610; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 203, 1, 610] with unstable size 202 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 610] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 610] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [202]; unstable size 202; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 202] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 202] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79685628,  4.36240816, -0.97976065, -0.08943781, -1.19198704,
          0.69136375,  1.47140539,  2.15872192,  4.19818306]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862],
         [-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16142917,  0.64662170, -0.50689316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0423 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [842]; unstable size 842; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 842] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 842] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 842] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 124] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70171332,  2.55571508,  1.94688368,  4.01660681,  2.85764074,
          4.14926767,  3.74387741, -0.07238436,  1.06150889]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.39it/s]100%|██████████| 1/1 [00:00<00:00,  8.38it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.24346066, -10.83120537, -14.41449451, -13.75822830, -15.91536617,
          -14.81918240, -15.97666645, -15.75282669, -11.26206684, -12.42083168]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.43086147]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1222 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.353851318359375
alpha/beta optimization time: 1.2586686611175537
initial alpha-crown bounds: tensor([[ 1.73520637,  2.60585403,  1.99403667,  4.06510353,  2.91426277,
          4.19390869,  3.79336405, -0.03199482,  1.08410871]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03199481964111328
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5501275062561
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55008673667908
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55006003379822
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.55003666877747
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.55001783370972
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5499987602234
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.54998016357422
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.54995918273926
Verifying property 7 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03199482]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
        -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03199482]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 842
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 121
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 974
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012087821960449219
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031996726989746094
10 lb beta sum: 0.0, worst -0.03199911117553711
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0568    transfer 0.0001    finalize 0.0002    func 0.0574    
Accumulated time: func 0.0574    prepare 0.0002    bound 0.0568    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 54] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 37] 
split level 6: [/input-8, 564] 
split level 7: [/input-8, 1445] 
split level 8: [/input-8, 1890] 
split level 9: [/input-8, 170] 
split level 10: [/input-12, 4] 
split level 11: [/input-8, 817] 
split level 12: [/input-8, 865] 
split level 13: [/input-8, 686] 
split level 14: [/input-8, 1404] 
split level 15: [/input-8, 162] 
split level 16: [/input, 2728] 
split level 17: [/input-8, 1427] 
split level 18: [/input-8, 678] 
split level 19: [/input-8, 1072] 
split level 20: [/input, 1684] 
split level 21: [/input, 2299] 
split level 22: [/input, 1668] 
split level 23: [/input-8, 1337] 
split level 24: [/input, 1788] 
split level 25: [/input-8, 1637] 
split level 26: [/input, 3769] 
split level 27: [/input, 3786] 
split level 28: [/input-8, 1914] 
split level 29: [/input-8, 1499] 
split level 30: [/input, 3737] 
split level 31: [/input, 1532] 
split level 32: [/input, 3401] 
split level 33: [/input-8, 1889] 
split level 34: [/input-8, 1085] 
split level 35: [/input-8, 996] 
split level 36: [/input-8, 1751] 
split level 37: [/input-8, 825] 
split level 38: [/input-8, 1500] 
split level 39: [/input, 2293] 
split level 40: [/input-8, 1297] 
split level 41: [/input, 1670] 
split level 42: [/input, 3764] 
split level 43: [/input-8, 1759] 
split level 44: [/input, 1531] 
split level 45: [/input-8, 849] 
split level 46: [/input, 3011] 
split level 47: [/input-8, 1834] 
split level 48: [/input, 4010] 
split level 49: [/input, 1530] 
split level 50: [/input-8, 1252] 
split level 51: [/input, 3765] 
split level 52: [/input-8, 1743] 
split level 53: [/input-8, 915] 
split level 54: [/input, 3143] 
split level 55: [/input-8, 1470] 
split level 56: [/input, 3749] 
split level 57: [/input-8, 986] 
split level 58: [/input-8, 916] 
split level 59: [/input, 3384] 
split level 60: [/input, 3994] 
split level 61: [/input, 1634] 
split level 62: [/input, 3559] 
split level 63: [/input-8, 1379] 
split level 64: [/input-8, 697] 
split level 65: [/input-8, 1105] 
split level 66: [/input-8, 1588] 
split level 67: [/input, 1666] 
split level 68: [/input-8, 1447] 
split level 69: [/input, 2359] 
split level 70: [/input, 3385] 
split level 71: [/input, 3735] 
split level 72: [/input, 2184] 
split level 73: [/input, 1789] 
split level 74: [/input-8, 436] 
split level 75: [/input, 3782] 
split level 76: [/input, 3738] 
split level 77: [/input, 3781] 
split level 78: [/input, 2362] 
split level 79: [/input, 3703] 
split level 80: [/input, 1595] 
split level 81: [/input, 2995] 
split level 82: [/input, 2301] 
split level 83: [/input-8, 1868] 
split level 84: [/input, 3324] 
split level 85: [/input, 2662] 
split level 86: [/input, 2028] 
split level 87: [/input, 1671] 
split level 88: [/input, 1512] 
split level 89: [/input, 1594] 
split level 90: [/input, 2556] 
split level 91: [/input, 1604] 
split level 92: [/input, 3453] 
split level 93: [/input-8, 641] 
split level 94: [/input, 2121] 
split level 95: [/input, 3128] 
split level 96: [/input-8, 1361] 
split level 97: [/input, 2969] 
split level 98: [/input, 3420] 
split level 99: [/input, 3705] 
split level 100: [/input, 2344] 
split level 101: [/input, 1353] 
split level 102: [/input, 2027] 
split level 103: [/input, 1529] 
split level 104: [/input, 3787] 
split level 105: [/input, 3747] 
split level 106: [/input, 3129] 
split level 107: [/input, 2357] 
split level 108: [/input, 1418] 
split level 109: [/input, 3387] 
split level 110: [/input, 348] 
split level 111: [/input, 2374] 
split level 112: [/input, 3688] 
split level 113: [/input, 3368] 
split level 114: [/input, 1528] 
split level 115: [/input, 2345] 
split level 116: [/input, 2358] 
split level 117: [/input, 3704] 
split level 118: [/input, 1759] 
split level 119: [/input-8, 593] 
split level 120: [/input, 2693] 
split level 121: [/input, 2332] 
split level 122: [/input, 2659] 
split level 123: [/input, 3687] 
split level 124: [/input, 2363] 
split level 125: [/input, 2887] 
split level 126: [/input-8, 866] 
split level 127: [/input, 3868] 
split level 128: [/input, 1417] 
split level 129: [/input, 3380] 
split level 130: [/input, 3861] 
split level 131: [/input-8, 2013] 
split level 132: [/input, 2330] 
split level 133: [/input, 3381] 
split level 134: [/input, 2325] 
split level 135: [/input, 2346] 
split level 136: [/input, 3789] 
split level 137: [/input, 3863] 
split level 138: [/input, 1524] 
split level 139: [/input, 1348] 
split level 140: [/input, 2328] 
split level 141: [/input, 76] 
split level 142: [/input, 2342] 
split level 143: [/input, 3367] 
split level 144: [/input, 3866] 
split level 145: [/input, 2356] 
split level 146: [/input, 3352] 
split level 147: [/input, 3862] 
split level 148: [/input, 2331] 
split level 149: [/input, 3948] 
split level 150: [/input, 3139] 
split level 151: [/input, 2364] 
split level 152: [/input, 1778] 
split level 153: [/input, 2341] 
split level 154: [/input, 3867] 
split level 155: [/input, 3395] 
split level 156: [/input, 3110] 
split level 157: [/input, 2026] 
split level 158: [/input, 110] 
split level 159: [/input, 2347] 
split level 160: [/input, 2329] 
split level 161: [/input, 126] 
split level 162: [/input, 3021] 
split level 163: [/input, 3379] 
split level 164: [/input, 3113] 
split level 165: [/input, 3864] 
split level 166: [/input, 1596] 
split level 167: [/input, 2343] 
split level 168: [/input, 3394] 
split level 169: [/input, 3865] 
split level 170: [/input, 3351] 
split level 171: [/input, 1777] 
split level 172: [/input, 3706] 
split level 173: [/input, 2323] 
split level 174: [/input, 2326] 
split level 175: [/input, 2386] 
split level 176: [/input, 2398] 
split level 177: [/input, 83] 
split level 178: [/input, 3755] 
split level 179: [/input-8, 2029] 
split level 180: [/input, 3330] 
split level 181: [/input, 2021] 
split level 182: [/input, 3020] 
split level 183: [/input, 3336] 
split level 184: [/input, 2385] 
split level 185: [/input-8, 1792] 
split level 186: [/input, 3702] 
split level 187: [/input-8, 79] 
split level 188: [/input, 17] 
split level 189: [/input, 3365] 
split level 190: [/input, 2348] 
split level 191: [/input, 77] 
split level 192: [/input, 3334] 
split level 193: [/input, 94] 
split level 194: [/input, 3719] 
split level 195: [/input, 3340] 
split level 196: [/input, 3333] 
split level 197: [/input, 3335] 
split level 198: [/input, 1288] 
split level 199: [/input, 1289] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031955718994140625
10 lb beta sum: 0.0, worst -0.031964778900146484
Time: prepare 0.0119    bound 0.1066    transfer 0.0011    finalize 0.0031    func 0.1254    
Accumulated time: func 0.1828    prepare 0.0228    bound 0.1634    transfer 0.0012    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.23552990) min lb tensor(-0.03195381)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011497259140014648 
BICCOS Cumulative time: 0.011497259140014648
Preprocessing time: 0.010526418685913086 Inference time: 0.0005443096160888672 Add cuts time: 0.00018930435180664062 Cut analysis time: 0.0002372264862060547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5243    set_bounds 0.0094    solve 0.1255    add 0.0123    
Accumulated time: pickout 0.0004    decision 0.5243    set_bounds 0.0094    solve 0.1255    add 0.0123    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([82]), tensor([-1.]), tensor([0]), tensor([3.89729915e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([82]), tensor([1.]), tensor([0]), tensor([3.93746702e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.12754058837890625

all verified at 0th iter
Time: prepare 0.0004    bound 0.0051    transfer 0.0001    finalize 0.0001    func 0.0059    
Accumulated time: func 0.1887    prepare 0.0233    bound 0.1686    transfer 0.0013    finalize 0.0034    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.55161380767822
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4485 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [689]; unstable size 689; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 689] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 689] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 689] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 286] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.29984093, -0.42211056,  0.77767420, -0.92977929,  1.27496159,
          0.91095710, -0.04363620, -2.54635859, -1.79969788]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228],
         [-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68421650,  1.03331661,  0.62671852,  1.91933060, -1.51388359,
          -0.19345379]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1029 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.22134018, -15.56860352, -14.70451355, -17.13485336, -15.30204296,
         -19.28796387, -19.05625916, -17.42904091,  -7.39751339, -15.77822590]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 638] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 638] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 142] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70733416,  6.82938290,  6.02555227,  8.45529366,  6.40188932,
         10.40295410, 10.22137833,  8.17284584,  6.93548441]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0750 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 532] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 532] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 157] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66265547,  2.43688107, -3.43360949, -0.71080709, -2.08376074,
         -1.43809307,  0.69530213,  2.01353741,  2.55464077]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777],
         [-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.44901466, -0.01048756, -1.26404381, -0.60980034]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0805 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 540] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 540] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 216] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34607959,  7.68123960,  1.94801581, -0.41767764,  2.08386636,
          2.53074312,  2.96769238,  4.98291540,  6.93700266]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.50799370, -10.83770275,  -2.31181240,  -5.03916931,  -2.23600197,
           -5.28817987,  -5.62893534,  -6.05531979,  -8.43694019, -10.15128231]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07581043]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0470 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 540] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 540] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 165] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.06153613,  2.03039980,  0.34189302, -1.49903524, -0.37442601,
         -0.95892525, -0.33255005, -0.89728719,  0.12400341]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714],
         [ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66653776,  0.81735039, -0.06783819,  0.90251350,  0.62409401]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0607 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 547] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 547] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 270] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.79902196,  3.61575890, -1.01848125,  0.80863667,  0.56699347,
         -0.88418770,  1.54361343,  1.63250828,  3.27348614]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.28951979, -7.94430733, -1.78465533, -3.82200527, -2.04371023,
          -3.80613995, -2.29286313, -4.79971743, -6.22282410, -7.35304642],
         [-4.28951979, -7.94430733, -1.78465533, -3.82200527, -2.04371023,
          -3.80613995, -2.29286313, -4.79971743, -6.22282410, -7.35304642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25905490,  0.24915290]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0383 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [629]; unstable size 629; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 629] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 629] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 629] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 204] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34933925,  7.33656406,  2.46383572, -0.40431619,  2.07216454,
          1.93970621,  2.30366516,  4.55638123,  5.68612194]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19249630, -17.56005859,  -9.06513023, -12.28880787,  -9.06449413,
          -11.96904278, -11.70427704, -12.37436962, -14.73856831, -15.87618923]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00063610]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0097 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0714 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.69871712, -20.69267273, -15.76616573, -14.43220711, -12.67657566,
         -14.10208035, -15.81092930,  -9.57836342, -21.12655640, -18.97427750]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [565]; unstable size 565; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 565] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 565] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 565] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 219] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.13234758, 8.93222618, 4.50618649, 3.55561495, 1.94738913, 3.30281472,
         4.49555922, 9.35066795, 7.40655899]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [870]; unstable size 870; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 870] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 870] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 870] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 184] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.42442560,  2.45793104,  1.12414598,  1.64930105, -0.25776559,
          3.05331612,  2.07846904,  1.21149409,  1.63006783]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673],
         [ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20839500,  1.19825745]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]],


         [[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0828 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 479] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 479] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.27840710,  4.92119646,  0.44459987,  2.50914335, -0.39846063,
          3.07961321,  3.62197208,  4.85315371,  6.55421734]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.55it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24103546,  -9.04660034,  -4.27138662,  -6.51826477,  -3.25499344,
           -7.24183655,  -3.20547986,  -7.74103117,  -9.34854984, -10.61530590]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04951358]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1199 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.355342864990234
alpha/beta optimization time: 1.262843370437622
initial alpha-crown bounds: tensor([[ 3.32722759,  4.96577835,  0.48747277,  2.55622840, -0.35164070,
          3.13634515,  3.69880342,  4.92325401,  6.61187363]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3516407012939453
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54494786262512
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.54490518569946
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.54487824440002
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5448546409607
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5448353290558
Verifying property 4 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35164070]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
         -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35164070]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 479
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 673
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001609325408935547
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3516402244567871
10 lb beta sum: 0.0, worst -0.35164403915405273
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0682    transfer 0.0001    finalize 0.0002    func 0.0689    
Accumulated time: func 0.0689    prepare 0.0003    bound 0.0682    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 45] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 33] 
split level 8: [/input-8, 101] 
split level 9: [/input-8, 475] 
split level 10: [/input-8, 931] 
split level 11: [/input-8, 100] 
split level 12: [/input-8, 106] 
split level 13: [/input-8, 614] 
split level 14: [/input-8, 867] 
split level 15: [/input-8, 859] 
split level 16: [/input-8, 1902] 
split level 17: [/input-8, 613] 
split level 18: [/input-8, 604] 
split level 19: [/input-8, 490] 
split level 20: [/input-8, 792] 
split level 21: [/input-8, 980] 
split level 22: [/input-8, 820] 
split level 23: [/input-8, 1819] 
split level 24: [/input-8, 435] 
split level 25: [/input-8, 876] 
split level 26: [/input-8, 102] 
split level 27: [/input-8, 821] 
split level 28: [/input-8, 987] 
split level 29: [/input-8, 426] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 114] 
split level 32: [/input-8, 1001] 
split level 33: [/input-8, 1282] 
split level 34: [/input-8, 1827] 
split level 35: [/input-8, 878] 
split level 36: [/input-8, 1449] 
split level 37: [/input-8, 1828] 
split level 38: [/input-8, 596] 
split level 39: [/input-8, 979] 
split level 40: [/input-8, 439] 
split level 41: [/input-8, 801] 
split level 42: [/input-8, 1291] 
split level 43: [/input-8, 308] 
split level 44: [/input-8, 486] 
split level 45: [/input-8, 1389] 
split level 46: [/input, 157] 
split level 47: [/input-8, 1444] 
split level 48: [/input-8, 1289] 
split level 49: [/input-8, 1299] 
split level 50: [/input-8, 1467] 
split level 51: [/input-8, 851] 
split level 52: [/input-8, 1908] 
split level 53: [/input-8, 988] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1818] 
split level 57: [/input-8, 1910] 
split level 58: [/input, 354] 
split level 59: [/input-8, 1007] 
split level 60: [/input-8, 1461] 
split level 61: [/input-8, 1301] 
split level 62: [/input, 3940] 
split level 63: [/input-8, 473] 
split level 64: [/input-8, 1756] 
split level 65: [/input-8, 82] 
split level 66: [/input-8, 497] 
split level 67: [/input-8, 1014] 
split level 68: [/input-8, 1300] 
split level 69: [/input-8, 419] 
split level 70: [/input-8, 1425] 
split level 71: [/input, 3543] 
split level 72: [/input, 119] 
split level 73: [/input-8, 418] 
split level 74: [/input, 3477] 
split level 75: [/input, 3945] 
split level 76: [/input, 1753] 
split level 77: [/input, 3413] 
split level 78: [/input, 3938] 
split level 79: [/input, 1431] 
split level 80: [/input, 1368] 
split level 81: [/input-8, 998] 
split level 82: [/input, 2151] 
split level 83: [/input, 679] 
split level 84: [/input-8, 407] 
split level 85: [/input, 1195] 
split level 86: [/input-8, 1820] 
split level 87: [/input-8, 425] 
split level 88: [/input, 173] 
split level 89: [/input-8, 1302] 
split level 90: [/input-8, 1450] 
split level 91: [/input, 2281] 
split level 92: [/input-8, 526] 
split level 93: [/input, 2135] 
split level 94: [/input-8, 2022] 
split level 95: [/input-8, 962] 
split level 96: [/input-8, 995] 
split level 97: [/input-8, 2039] 
split level 98: [/input, 3561] 
split level 99: [/input, 3957] 
split level 100: [/input, 408] 
split level 101: [/input-8, 120] 
split level 102: [/input-8, 1893] 
split level 103: [/input, 99] 
split level 104: [/input, 3975] 
split level 105: [/input, 3527] 
split level 106: [/input-8, 993] 
split level 107: [/input-8, 1258] 
split level 108: [/input, 98] 
split level 109: [/input, 2394] 
split level 110: [/input-8, 104] 
split level 111: [/input-8, 504] 
split level 112: [/input, 1432] 
split level 113: [/input, 3787] 
split level 114: [/input-8, 466] 
split level 115: [/input-8, 1398] 
split level 116: [/input, 137] 
split level 117: [/input, 1510] 
split level 118: [/input-8, 399] 
split level 119: [/input-8, 1437] 
split level 120: [/input-8, 592] 
split level 121: [/input, 3925] 
split level 122: [/input, 1526] 
split level 123: [/input, 2393] 
split level 124: [/input-8, 1293] 
split level 125: [/input, 2391] 
split level 126: [/input, 1847] 
split level 127: [/input, 3786] 
split level 128: [/input-8, 1925] 
split level 129: [/input-8, 521] 
split level 130: [/input-8, 2015] 
split level 131: [/input, 1848] 
split level 132: [/input, 2183] 
split level 133: [/input-8, 1441] 
split level 134: [/input, 1382] 
split level 135: [/input-8, 1433] 
split level 136: [/input, 2010] 
split level 137: [/input, 2009] 
split level 138: [/input, 2167] 
split level 139: [/input-8, 1277] 
split level 140: [/input-8, 510] 
split level 141: [/input-8, 507] 
split level 142: [/input, 3021] 
split level 143: [/input, 4011] 
split level 144: [/input, 1865] 
split level 145: [/input, 3513] 
split level 146: [/input-8, 1137] 
split level 147: [/input, 1726] 
split level 148: [/input-8, 305] 
split level 149: [/input, 1864] 
split level 150: [/input, 3475] 
split level 151: [/input, 2013] 
split level 152: [/input, 1850] 
split level 153: [/input, 2363] 
split level 154: [/input-8, 1799] 
split level 155: [/input, 1907] 
split level 156: [/input, 2997] 
split level 157: [/input, 1802] 
split level 158: [/input, 1863] 
split level 159: [/input, 1121] 
split level 160: [/input-8, 532] 
split level 161: [/input, 2028] 
split level 162: [/input, 1478] 
split level 163: [/input-8, 513] 
split level 164: [/input, 1995] 
split level 165: [/input, 3953] 
split level 166: [/input-8, 1027] 
split level 167: [/input, 2266] 
split level 168: [/input, 3921] 
split level 169: [/input, 1845] 
split level 170: [/input, 1934] 
split level 171: [/input, 1917] 
split level 172: [/input, 3132] 
split level 173: [/input, 3006] 
split level 174: [/input, 1604] 
split level 175: [/input, 1829] 
split level 176: [/input, 1882] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 1957] 
split level 179: [/input, 1884] 
split level 180: [/input, 111] 
split level 181: [/input, 1827] 
split level 182: [/input-8, 1307] 
split level 183: [/input, 3159] 
split level 184: [/input, 378] 
split level 185: [/input, 1552] 
split level 186: [/input, 1862] 
split level 187: [/input, 1994] 
split level 188: [/input, 1977] 
split level 189: [/input, 1587] 
split level 190: [/input, 1866] 
split level 191: [/input, 3709] 
split level 192: [/input, 1900] 
split level 193: [/input-8, 127] 
split level 194: [/input-8, 698] 
split level 195: [/input, 1857] 
split level 196: [/input-8, 65] 
split level 197: [/input, 2051] 
split level 198: [/input, 1852] 
split level 199: [/input, 2179] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3516082763671875
10 lb beta sum: 0.0, worst -0.3516123294830322
Time: prepare 0.0122    bound 0.1310    transfer 0.0070    finalize 0.0041    func 0.1573    
Accumulated time: func 0.2262    prepare 0.0237    bound 0.1993    transfer 0.0071    finalize 0.0043    
all_split False
======================Cut inference begins======================
max lb tensor(0.19675648) min lb tensor(-0.35160828)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012818574905395508 
BICCOS Cumulative time: 0.012818574905395508
Preprocessing time: 0.012109041213989258 Inference time: 0.00015878677368164062 Add cuts time: 0.0001609325408935547 Cut analysis time: 0.0003898143768310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33823 (1), -0.33715 (1), -0.33635 (1), -0.33631 (1), -0.33497 (1), -0.33488 (1), -0.33475 (1), -0.33452 (1), -0.33412 (1), -0.33336 (1), -0.33330 (1), -0.33300 (1), -0.33253 (1), -0.33237 (1), -0.33209 (1), -0.33160 (1), -0.33035 (1), -0.32821 (1), -0.32744 (1), -0.32738 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5791    set_bounds 0.0168    solve 0.1575    add 0.1841    
Accumulated time: pickout 0.0005    decision 0.5791    set_bounds 0.0168    solve 0.1575    add 0.1841    
Current (lb-rhs): -0.3382301330566406
50 domains visited
Cumulative time: 1.0359423160552979

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3120913505554199
10 lb beta sum: 0.19730766117572784, worst -0.3110322952270508
Time: prepare 0.0079    bound 0.1274    transfer 0.0008    finalize 0.0029    func 0.1417    
Accumulated time: func 0.3679    prepare 0.0320    bound 0.3266    transfer 0.0079    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.04132056) min lb tensor(-0.31071305)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.015643596649169922 
BICCOS Cumulative time: 0.02846217155456543
Preprocessing time: 0.012812137603759766 Inference time: 0.00017547607421875 Add cuts time: 9.179115295410156e-05 Cut analysis time: 0.0025641918182373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10087 (2), -0.10067 (2), -0.09642 (2), -0.09587 (2), -0.09548 (2), -0.09443 (2), -0.09401 (2), -0.09333 (2), -0.09282 (2), -0.09238 (2), -0.09181 (2), -0.09103 (2), -0.09060 (2), -0.08926 (2), -0.08910 (2), -0.08712 (2), -0.08649 (2), -0.08588 (2), -0.08549 (2), -0.08474 (2), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0215    set_bounds 0.0144    solve 0.1419    add 0.0844    
Accumulated time: pickout 0.0019    decision 0.6005    set_bounds 0.0311    solve 0.2994    add 0.2685    
Current (lb-rhs): -0.10086727142333984
100 domains visited
Cumulative time: 1.3156049251556396

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 45] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07437467575073242
10 lb beta sum: 0.34651732444763184, worst -0.10823690891265869
Time: prepare 0.0077    bound 0.1302    transfer 0.0008    finalize 0.0025    func 0.1439    
Accumulated time: func 0.5119    prepare 0.0400    bound 0.4568    transfer 0.0087    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.12435722) min lb tensor(-0.06651568)
Number of Verified Splits: 163 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.02456808090209961 
BICCOS Cumulative time: 0.05303025245666504
Preprocessing time: 0.01221323013305664 Inference time: 0.007509469985961914 Add cuts time: 0.004231452941894531 Cut analysis time: 0.0006139278411865234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01719 (3), -0.01693 (3), -0.01683 (3), -0.01673 (3), -0.01668 (3), -0.01633 (3), -0.01573 (3), -0.01453 (3), -0.01393 (3), -0.01387 (3), -0.01358 (3), -0.01354 (3), -0.01352 (3), -0.01336 (3), -0.01320 (3), -0.01291 (3), -0.01257 (3), -0.01256 (3), -0.01248 (3), -0.01243 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0203    set_bounds 0.0169    solve 0.1441    add 0.1067    
Accumulated time: pickout 0.0031    decision 0.6208    set_bounds 0.0480    solve 0.4435    add 0.3752    
Current (lb-rhs): -0.01719355583190918
150 domains visited
Cumulative time: 1.6296937465667725

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027193427085876465
10 lb beta sum: 1.7352899312973022, worst -0.08835983276367188
Time: prepare 0.0074    bound 0.1475    transfer 0.0012    finalize 0.0024    func 0.1613    
Accumulated time: func 0.6732    prepare 0.0477    bound 0.6043    transfer 0.0100    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.35901749) min lb tensor(-0.00745559)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.042756080627441406 
BICCOS Cumulative time: 0.09578633308410645
Preprocessing time: 0.012575387954711914 Inference time: 0.01920175552368164 Add cuts time: 0.010557413101196289 Cut analysis time: 0.0004215240478515625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0210    set_bounds 0.0172    solve 0.1615    add 0.0240    
Accumulated time: pickout 0.0043    decision 0.6418    set_bounds 0.0652    solve 0.6050    add 0.3992    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 11]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.82723306e-11, 1.81834146e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 11]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.82723306e-11, 2.68195141e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.00649232e-45, 4.24871892e-02, 6.31902665e-02, 6.54154271e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.00649232e-45, 4.24871892e-02, 6.31902665e-02, 3.81710976e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.00649232e-45, 4.24871892e-02, 5.91850728e-02, 6.37398213e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.00649232e-45, 4.24871892e-02, 5.91850728e-02, 3.76292914e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 11]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.00649232e-45, 8.52182359e-02, 8.89888257e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 11]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.00649232e-45, 8.52182359e-02, 3.09951771e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2871685028076172
10 lb beta sum: 0.4049459397792816, worst -0.28638672828674316
Time: prepare 0.0006    bound 0.1394    transfer 0.0001    finalize 0.0002    func 0.1405    
Accumulated time: func 0.8137    prepare 0.0482    bound 0.7437    transfer 0.0101    finalize 0.0124    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] 
split level 4: [/input-8, 101] [/input-8, 101] 
split level 5: [/input-12, 33] [/input-12, 33] 
split level 6: [/input-8, 859] [/input-8, 100] 
cut re-enabled after branching node selection
0 lb beta sum: 0.26958614587783813, worst -0.1382300853729248
10 lb beta sum: 0.26958614587783813, worst -0.13773703575134277
Time: prepare 0.0115    bound 0.1463    transfer 0.0012    finalize 0.0015    func 0.1623    
Accumulated time: func 0.9760    prepare 0.0602    bound 0.8900    transfer 0.0113    finalize 0.0139    
all_split False
======================Cut inference begins======================
max lb tensor(0.09360054) min lb tensor(-0.13751173)
Number of Verified Splits: 132 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.2998906075954437, worst -0.168050616979599
10 lb beta sum: 0.5438752770423889, worst -0.055490463972091675
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.43334317207336426 
BICCOS Cumulative time: 0.5291295051574707
Preprocessing time: 0.008052825927734375 Inference time: 0.4191758632659912 Add cuts time: 0.004694938659667969 Cut analysis time: 0.0014195442199707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13751 (7), -0.13348 (7), -0.12868 (7), -0.12706 (7), -0.12462 (7), -0.12373 (7), -0.12079 (7), -0.12073 (7), -0.11762 (7), -0.11636 (7), -0.11150 (7), -0.10982 (7), -0.10619 (7), -0.10553 (7), -0.10545 (7), -0.10203 (7), -0.10143 (7), -0.09971 (7), -0.09961 (7), -0.09841 (7), 
Length of domains: 124
Time: pickout 0.0006    decision 0.0208    set_bounds 0.0248    solve 0.1624    add 0.0021    
Accumulated time: pickout 0.0049    decision 0.6626    set_bounds 0.0899    solve 0.7674    add 0.4013    
Current (lb-rhs): -0.1375117301940918
274 domains visited
Cumulative time: 2.7066357135772705

BaB round 2
batch: 124
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 106] [/input-8, 613] [/input-8, 106] [/input-8, 106] [/input-8, 614] [/input-8, 613] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13276433944702148
10 lb beta sum: 0.18776051700115204, worst -0.13209915161132812
Time: prepare 0.0054    bound 0.1537    transfer 0.0015    finalize 0.0015    func 0.1640    
Accumulated time: func 1.1399    prepare 0.0658    bound 1.0437    transfer 0.0128    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.01643562) min lb tensor(-0.13194013)
Number of Verified Splits: 21 of 248
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1540670394897461
10 lb beta sum: 0.5469411611557007, worst -0.10943031311035156
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts 7-9: 10
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.17375612258911133 
BICCOS Cumulative time: 0.702885627746582
Preprocessing time: 0.008884906768798828 Inference time: 0.16112947463989258 Add cuts time: 0.002086639404296875 Cut analysis time: 0.0016551017761230469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13194 (8), -0.12796 (8), -0.12298 (8), -0.12114 (8), -0.12043 (8), -0.11893 (8), -0.11734 (8), -0.11706 (8), -0.11537 (8), -0.11410 (8), -0.11390 (8), -0.11298 (8), -0.11104 (8), -0.11088 (8), -0.10990 (8), -0.10941 (8), -0.10770 (8), -0.10641 (8), -0.10519 (8), -0.10469 (8), 
Length of domains: 227
Time: pickout 0.0032    decision 0.0211    set_bounds 0.0120    solve 0.1641    add 0.0025    
Accumulated time: pickout 0.0081    decision 0.6837    set_bounds 0.1019    solve 0.9315    add 0.4038    
Current (lb-rhs): -0.13194012641906738
501 domains visited
Cumulative time: 3.08455753326416

BaB round 3
batch: 227
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 106] [/input-8, 614] [/input-8, 613] [/input-8, 820] [/input-8, 614] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12386751174926758
10 lb beta sum: 0.18383508920669556, worst -0.12325382232666016
Time: prepare 0.0105    bound 0.1753    transfer 0.0021    finalize 0.0027    func 0.1937    
Accumulated time: func 1.3337    prepare 0.0766    bound 1.2190    transfer 0.0149    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.01288748) min lb tensor(-0.12314010)
Number of Verified Splits: 41 of 454
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 4
#cuts 4-6: 25
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.024944782257080078 
BICCOS Cumulative time: 0.7278304100036621
Preprocessing time: 0.01497650146484375 Inference time: 0.004130363464355469 Add cuts time: 0.004056215286254883 Cut analysis time: 0.0017817020416259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12314 (9), -0.12243 (9), -0.11961 (9), -0.11798 (9), -0.11657 (9), -0.11300 (9), -0.11260 (9), -0.11154 (9), -0.11080 (9), -0.11015 (9), -0.10865 (9), -0.10833 (9), -0.10815 (9), -0.10777 (9), -0.10765 (9), -0.10745 (9), -0.10701 (9), -0.10568 (9), -0.10523 (9), -0.10496 (9), 
Length of domains: 413
Time: pickout 0.0042    decision 0.0290    set_bounds 0.0242    solve 0.1940    add 0.0050    
Accumulated time: pickout 0.0123    decision 0.7127    set_bounds 0.1261    solve 1.1254    add 0.4089    
Current (lb-rhs): -0.12314009666442871
914 domains visited
Cumulative time: 3.3680450916290283

BaB round 4
batch: 413
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 613] [/input-8, 613] [/input-8, 102] [/input-8, 614] [/input-8, 102] [/input-8, 820] [/input-8, 102] [/input-8, 613] [/input-8, 613] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11777067184448242
10 lb beta sum: 0.1879236400127411, worst -0.11735057830810547
Time: prepare 0.0189    bound 0.1871    transfer 0.0120    finalize 0.0058    func 0.2308    
Accumulated time: func 1.5644    prepare 0.0957    bound 1.4061    transfer 0.0269    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.05035858) min lb tensor(-0.11733484)
Number of Verified Splits: 109 of 826
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 5
#cuts 4-6: 25
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.04694342613220215 
BICCOS Cumulative time: 0.7747738361358643
Preprocessing time: 0.025757789611816406 Inference time: 0.014849424362182617 Add cuts time: 0.004138469696044922 Cut analysis time: 0.002197742462158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11733 (10), -0.11665 (10), -0.11359 (10), -0.11340 (10), -0.11202 (10), -0.11198 (10), -0.11022 (10), -0.10808 (10), -0.10795 (10), -0.10741 (10), -0.10720 (10), -0.10587 (10), -0.10497 (10), -0.10379 (10), -0.10376 (10), -0.10343 (10), -0.10256 (10), -0.10224 (10), -0.10223 (10), -0.10173 (10), 
Length of domains: 717
Time: pickout 0.0073    decision 0.0444    set_bounds 0.0468    solve 0.2312    add 0.0097    
Accumulated time: pickout 0.0196    decision 0.7570    set_bounds 0.1729    solve 1.3566    add 0.4186    
Current (lb-rhs): -0.11733484268188477
1631 domains visited
Cumulative time: 3.7573299407958984

BaB round 5
batch: 717
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 102] [/input-8, 102] [/input-8, 859] [/input-8, 859] [/input-8, 613] [/input-8, 604] [/input-8, 820] [/input-8, 859] [/input-8, 102] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11258482933044434
10 lb beta sum: 0.18955646455287933, worst -0.11204242706298828
Time: prepare 0.0310    bound 0.1769    transfer 0.0087    finalize 0.0085    func 0.2347    
Accumulated time: func 1.7992    prepare 0.1270    bound 1.5830    transfer 0.0356    finalize 0.0324    
all_split False
======================Cut inference begins======================
max lb tensor(0.29664207) min lb tensor(-0.11199641)
Number of Verified Splits: 304 of 1434
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 15
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.09281373023986816 
BICCOS Cumulative time: 0.8675875663757324
Preprocessing time: 0.048131465911865234 Inference time: 0.037017107009887695 Add cuts time: 0.006876707077026367 Cut analysis time: 0.0007884502410888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11200 (11), -0.11127 (11), -0.10911 (11), -0.10839 (11), -0.10822 (11), -0.10790 (11), -0.10649 (11), -0.10629 (11), -0.10534 (11), -0.10490 (11), -0.10470 (11), -0.10351 (11), -0.10313 (11), -0.10251 (11), -0.10248 (11), -0.10211 (11), -0.10171 (11), -0.10024 (11), -0.09963 (11), -0.09947 (11), 
Length of domains: 1130
Time: pickout 0.0151    decision 0.0574    set_bounds 0.0676    solve 0.2352    add 0.0077    
Accumulated time: pickout 0.0348    decision 0.8145    set_bounds 0.2405    solve 1.5919    add 0.4263    
Current (lb-rhs): -0.11199641227722168
2761 domains visited
Cumulative time: 4.24001932144165

BaB round 6
batch: 1130
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 820] [/input-8, 820] [/input-8, 821] [/input-8, 820] [/input-8, 820] [/input-8, 859] [/input-8, 820] [/input-8, 820] [/input-8, 613] [/input-8, 820] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1063382625579834
10 lb beta sum: 1.264127254486084, worst -0.10156595706939697
Time: prepare 0.2491    bound 0.1993    transfer 0.0044    finalize 0.0140    func 0.4823    
Accumulated time: func 2.2814    prepare 0.3764    bound 1.7823    transfer 0.0400    finalize 0.0464    
all_split False
======================Cut inference begins======================
max lb tensor(0.68523657) min lb tensor(-0.10149205)
Number of Verified Splits: 1948 of 2260
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.34923648834228516 
BICCOS Cumulative time: 1.2168240547180176
Preprocessing time: 0.08003044128417969 Inference time: 0.24164581298828125 Add cuts time: 0.02704024314880371 Cut analysis time: 0.0005199909210205078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10149 (12), -0.09830 (12), -0.09797 (12), -0.09656 (12), -0.09476 (12), -0.09444 (12), -0.09353 (12), -0.09301 (12), -0.09261 (12), -0.09091 (12), -0.09058 (12), -0.08997 (12), -0.08908 (12), -0.08877 (12), -0.08813 (12), -0.08706 (12), -0.08616 (12), -0.08524 (12), -0.08459 (12), -0.08456 (12), 
Length of domains: 312
Time: pickout 0.0158    decision 0.0801    set_bounds 0.1121    solve 0.4845    add 0.0239    
Accumulated time: pickout 0.0506    decision 0.8946    set_bounds 0.3526    solve 2.0763    add 0.4502    
Current (lb-rhs): -0.10149204730987549
3073 domains visited
Cumulative time: 5.337831497192383

BaB round 7
batch: 312
splitting decisions: 
split level 0: [/input-8, 821] [/input-8, 604] [/input-8, 106] [/input-8, 821] [/input-8, 821] [/input-8, 821] [/input-8, 604] [/input-8, 859] [/input-8, 821] [/input-8, 821] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10453033447265625

all verified at 6th iter
Time: prepare 0.0144    bound 0.0489    transfer 0.0019    finalize 0.0038    func 0.0729    
Accumulated time: func 2.3544    prepare 0.3910    bound 1.8312    transfer 0.0419    finalize 0.0502    
all_split False
======================Cut inference begins======================
max lb tensor(0.19672477) min lb tensor(0.00207710)
Number of Verified Splits: 624 of 624
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.021808624267578125 
BICCOS Cumulative time: 1.2386326789855957
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0106    decision 0.0337    set_bounds 0.0325    solve 0.0732    add 0.0001    
Accumulated time: pickout 0.0611    decision 0.9283    set_bounds 0.3851    solve 2.1495    add 0.4503    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3073 domains visited
Cumulative time: 5.515151739120483


Properties batch 5, size 1
Remaining timeout: 192.82286715507507
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 192.8227436542511
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 192.8227162361145
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 192.82168245315552
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 7.1784 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.23181081, -6.13865471, -5.08255959, -5.81894684, -5.10377789,
         -6.43214750, -5.88667679, -5.84751606, -6.03846073, -6.48124504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 600] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 133] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68216181, 2.01670456, 2.51456118, 1.81788015, 2.98190975, 2.39753723,
         2.20995569, 2.77434301, 3.16959405]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0409 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 644] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 644] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 217] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.59573573,  3.84289074, -0.66203916, -0.35017097, -0.20632458,
          0.11054754,  0.49438119,  0.95489424,  1.85776687]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45969152, -12.50387001,  -6.75212955,  -7.02717876,  -7.47408676,
           -7.30156040,  -7.84784174,  -8.79535866,  -9.60956287, -10.84120369],
         [ -7.45969152, -12.50387001,  -6.75212955,  -7.02717876,  -7.47408676,
           -7.30156040,  -7.84784174,  -8.79535866,  -9.60956287, -10.84120369]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43251276, -0.27504921,  0.44690800,  0.27438164]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0072 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0805 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91584206, -11.23733044,  -4.95584011,  -5.17609406,  -4.67090321,
          -5.68216658,  -2.94505668,  -7.65497255, -10.49558067, -10.30911922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 530] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 530] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 285] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01592445, 5.78018856, 0.67337465, 0.94681954, 0.40892172, 1.18366730,
         2.78911281, 4.93773079, 4.91414595]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0364 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.75821781, -13.33421040,  -9.89368343,  -9.90017796,  -8.64980602,
          -9.78042221,  -9.99710751,  -4.75752258, -13.64687443, -11.43529987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 557] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 557] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 216] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.65111065, 6.98895836, 3.93457913, 3.96870136, 2.90565777, 3.92689133,
         3.80601048, 7.22786236, 5.19847059]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 682] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 682] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 184] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10945797,  1.98779702,  2.28032899,  1.90550256,  2.75677061,
          1.69960535,  1.94381011, -0.60779339, -0.09704113]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.56808662, -11.42974663, -13.45270157, -13.65275669, -13.48646450,
          -14.33638859, -13.28952789, -13.75271511, -10.36225224, -11.49094582],
         [-10.56808662, -11.42974663, -13.45270157, -13.65275669, -13.48646450,
          -14.33638859, -13.28952789, -13.75271511, -10.36225224, -11.49094582]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.86166000, -0.20583439,  0.92285919]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0689 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.85307121, -8.24333668, -2.96728778, -1.66786790, -3.85206652,
         -1.00410879, -4.09244967, -4.12650394, -7.75833988, -6.65997744]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 554] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 554] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 226] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.37778544, 5.08529711, 0.43795514, 0.25316507, 1.50299811, 1.94422328,
         2.22069502, 4.52716446, 3.75112391]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0690 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 484] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 484] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 174] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.28471661,  1.18307221,  2.52050400,  2.22602797,  2.26000214,
          2.91944122,  3.25191450,  3.06435537, -1.13768864]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00729084, -11.61149406, -13.44780445, -12.92614937, -13.19767094,
          -13.75501728, -14.04838467, -14.12834930,  -9.19971180,  -9.85693741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.65722561]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0820 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [613]; unstable size 613; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 613] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 613] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 613] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 280] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07348037,  1.60172319, -1.32437277, -1.43540144, -0.22906247,
         -0.94617903,  0.48511833,  2.09677744,  2.21030140]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642],
         [-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.91334867,  0.02762699, -0.27493715,  0.30304098,  0.33895302]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.05248165, -11.65894604, -12.25777149, -10.95008183,  -9.94209957,
         -10.12332249, -11.05361462,  -6.32633877, -14.71703625, -10.15004635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 432] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 432] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 200] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.82437682, 2.96819687, 4.11948109, 3.11231160, 2.39884830, 2.32052016,
         2.91186953, 6.36293125, 1.88987529]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0592 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [742]; unstable size 742; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 301, 1, 742] with unstable size 300 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 742] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 742] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [300]; unstable size 300; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 300] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 300] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.98650312, -1.78932357,  0.26673236, -2.52717829,  0.69541496,
         -1.41547859, -0.58254158, -0.39011717,  1.13849401]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942],
         [-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.62677670, -1.02450085, -0.05059147,  1.40748692,  1.01629734]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0954 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10813904, -15.89954853,  -7.31516552, -10.82333755,  -8.54076099,
         -10.33981800, -11.38731098, -12.22146320, -14.46312428, -15.25714493]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 595] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 595] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 190] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.01579952, 7.21389246, 2.88120985, 0.47409227, 2.25944805, 3.19084311,
         3.74374318, 5.93748760, 6.55921412]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 303, 1, 586] with unstable size 302 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 586] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [302]; unstable size 302; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 302] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 302] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.48434663,  2.69666791, -0.88318062, -0.67275071, -1.05266690,
         -0.60235131,  1.16763580,  2.82550144,  1.08651686]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318],
         [-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.33695650, -0.21124172,  0.35734510,  0.86144590]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.36881924, -3.89865160, -7.93544197, -6.23400021, -6.74230671,
         -6.96568727, -8.17397594, -6.56449556, -5.37149715, -2.30208302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [592]; unstable size 592; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 592] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 592] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 592] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 219] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89441204, 0.29969531, 2.93556023, 1.68636417, 1.92623043, 2.15194607,
         3.21918201, 1.75679541, 0.56472778]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0572 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 570] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 570] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 178] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99768209,  7.91173935, -0.14131740,  2.21972251,  1.75214767,
          0.21274018,  3.05064678,  6.73370552,  7.60544586]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.33it/s]100%|██████████| 1/1 [00:00<00:00,  8.32it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.14176750, -15.39953613,  -6.68415260,  -9.07587337,  -6.41280174,
           -8.82754326,  -7.32056284, -10.51403236, -14.15463734, -15.02766609]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.27135086]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1234 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.62461471557617
alpha/beta optimization time: 1.297593116760254
initial alpha-crown bounds: tensor([[ 4.04458427,  7.94689751, -0.11414814,  2.23972178,  1.77452946,
          0.24281240,  3.07658243,  6.77713537,  7.63649940]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11414813995361328
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5327045917511
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.53265047073364
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.532616853714
Verifying property 2 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11414814]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
         -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11414814]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 570
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 756
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001232624053955078
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11414790153503418
10 lb beta sum: 0.0, worst -0.11414915323257446
Time: prepare 0.0002    bound 0.0947    transfer 0.0001    finalize 0.0001    func 0.0952    
Accumulated time: func 0.0952    prepare 0.0002    bound 0.0947    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 93] 
split level 2: [/input-12, 15] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 6] 
split level 5: [/input-8, 1892] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 68] 
split level 8: [/input-8, 1908] 
split level 9: [/input-8, 1919] 
split level 10: [/input-12, 9] 
split level 11: [/input-8, 1081] 
split level 12: [/input-8, 1884] 
split level 13: [/input, 2780] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1877] 
split level 16: [/input-8, 1917] 
split level 17: [/input-8, 1915] 
split level 18: [/input-8, 1895] 
split level 19: [/input-8, 1057] 
split level 20: [/input-8, 1893] 
split level 21: [/input-8, 1354] 
split level 22: [/input-8, 101] 
split level 23: [/input-8, 1083] 
split level 24: [/input-8, 1901] 
split level 25: [/input-8, 1918] 
split level 26: [/input-8, 1138] 
split level 27: [/input-8, 1365] 
split level 28: [/input-8, 1366] 
split level 29: [/input-8, 699] 
split level 30: [/input, 2747] 
split level 31: [/input, 1758] 
split level 32: [/input-8, 1870] 
split level 33: [/input-8, 1316] 
split level 34: [/input-8, 1074] 
split level 35: [/input-8, 1869] 
split level 36: [/input-8, 689] 
split level 37: [/input-8, 1076] 
split level 38: [/input-8, 1358] 
split level 39: [/input-8, 1369] 
split level 40: [/input-8, 1337] 
split level 41: [/input, 2520] 
split level 42: [/input-8, 94] 
split level 43: [/input, 2456] 
split level 44: [/input, 2440] 
split level 45: [/input-8, 1025] 
split level 46: [/input, 2796] 
split level 47: [/input-8, 553] 
split level 48: [/input-8, 524] 
split level 49: [/input-8, 674] 
split level 50: [/input-8, 573] 
split level 51: [/input-8, 1913] 
split level 52: [/input-8, 1516] 
split level 53: [/input-8, 642] 
split level 54: [/input-8, 532] 
split level 55: [/input, 1773] 
split level 56: [/input-8, 1150] 
split level 57: [/input, 2505] 
split level 58: [/input, 1703] 
split level 59: [/input-8, 516] 
split level 60: [/input-8, 651] 
split level 61: [/input-8, 1881] 
split level 62: [/input, 1739] 
split level 63: [/input, 2745] 
split level 64: [/input-8, 474] 
split level 65: [/input-8, 147] 
split level 66: [/input, 2491] 
split level 67: [/input-8, 1897] 
split level 68: [/input-8, 1904] 
split level 69: [/input, 2409] 
split level 70: [/input, 2414] 
split level 71: [/input, 2535] 
split level 72: [/input, 2518] 
split level 73: [/input-8, 1889] 
split level 74: [/input, 2510] 
split level 75: [/input-8, 1914] 
split level 76: [/input, 3314] 
split level 77: [/input, 2490] 
split level 78: [/input-8, 1342] 
split level 79: [/input, 2439] 
split level 80: [/input-8, 969] 
split level 81: [/input-8, 1114] 
split level 82: [/input, 2458] 
split level 83: [/input, 2812] 
split level 84: [/input-8, 1377] 
split level 85: [/input, 2489] 
split level 86: [/input-8, 122] 
split level 87: [/input, 2684] 
split level 88: [/input, 2468] 
split level 89: [/input-8, 693] 
split level 90: [/input-8, 1374] 
split level 91: [/input-8, 886] 
split level 92: [/input, 2533] 
split level 93: [/input, 1767] 
split level 94: [/input, 1656] 
split level 95: [/input, 220] 
split level 96: [/input-8, 974] 
split level 97: [/input, 2493] 
split level 98: [/input, 1752] 
split level 99: [/input, 1626] 
split level 100: [/input-8, 1880] 
split level 101: [/input-8, 1888] 
split level 102: [/input, 2445] 
split level 103: [/input-8, 1027] 
split level 104: [/input, 3576] 
split level 105: [/input, 4072] 
split level 106: [/input, 2897] 
split level 107: [/input-8, 889] 
split level 108: [/input, 2463] 
split level 109: [/input-8, 1293] 
split level 110: [/input, 1641] 
split level 111: [/input, 757] 
split level 112: [/input, 1642] 
split level 113: [/input, 3283] 
split level 114: [/input-12, 53] 
split level 115: [/input-8, 1803] 
split level 116: [/input, 1522] 
split level 117: [/input, 498] 
split level 118: [/input-8, 1468] 
split level 119: [/input, 1743] 
split level 120: [/input-8, 1424] 
split level 121: [/input, 2546] 
split level 122: [/input-8, 1106] 
split level 123: [/input-8, 1015] 
split level 124: [/input-8, 953] 
split level 125: [/input, 2993] 
split level 126: [/input-8, 1023] 
split level 127: [/input-8, 1079] 
split level 128: [/input, 2363] 
split level 129: [/input, 2444] 
split level 130: [/input, 1700] 
split level 131: [/input-8, 74] 
split level 132: [/input, 1784] 
split level 133: [/input, 2184] 
split level 134: [/input, 2881] 
split level 135: [/input, 2707] 
split level 136: [/input, 3262] 
split level 137: [/input-8, 907] 
split level 138: [/input, 4060] 
split level 139: [/input, 3538] 
split level 140: [/input-8, 1302] 
split level 141: [/input, 3293] 
split level 142: [/input, 2715] 
split level 143: [/input, 1596] 
split level 144: [/input, 1189] 
split level 145: [/input, 2930] 
split level 146: [/input, 226] 
split level 147: [/input, 2898] 
split level 148: [/input, 4027] 
split level 149: [/input, 4075] 
split level 150: [/input, 3397] 
split level 151: [/input, 2977] 
split level 152: [/input, 2475] 
split level 153: [/input, 690] 
split level 154: [/input, 2913] 
split level 155: [/input, 3297] 
split level 156: [/input, 3266] 
split level 157: [/input-8, 1448] 
split level 158: [/input, 3310] 
split level 159: [/input, 1367] 
split level 160: [/input, 292] 
split level 161: [/input-8, 1400] 
split level 162: [/input, 2464] 
split level 163: [/input-8, 913] 
split level 164: [/input, 1088] 
split level 165: [/input, 1595] 
split level 166: [/input, 1441] 
split level 167: [/input, 2553] 
split level 168: [/input, 2945] 
split level 169: [/input, 2515] 
split level 170: [/input-8, 856] 
split level 171: [/input, 2928] 
split level 172: [/input, 673] 
split level 173: [/input, 3308] 
split level 174: [/input, 1682] 
split level 175: [/input, 2216] 
split level 176: [/input-8, 1912] 
split level 177: [/input-8, 579] 
split level 178: [/input-8, 1137] 
split level 179: [/input, 2183] 
split level 180: [/input, 3232] 
split level 181: [/input, 4026] 
split level 182: [/input, 2994] 
split level 183: [/input-8, 1974] 
split level 184: [/input, 2480] 
split level 185: [/input, 3319] 
split level 186: [/input, 22] 
split level 187: [/input, 2843] 
split level 188: [/input, 1489] 
split level 189: [/input, 3216] 
split level 190: [/input, 2192] 
split level 191: [/input, 3506] 
split level 192: [/input, 3076] 
split level 193: [/input, 1648] 
split level 194: [/input, 2961] 
split level 195: [/input, 2453] 
split level 196: [/input, 2400] 
split level 197: [/input, 2946] 
split level 198: [/input, 2975] 
split level 199: [/input, 2944] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11412441730499268
10 lb beta sum: 0.0, worst -0.11412543058395386
Time: prepare 0.0119    bound 0.1067    transfer 0.0020    finalize 0.0031    func 0.1265    
Accumulated time: func 0.2217    prepare 0.0226    bound 0.2014    transfer 0.0021    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.25366700) min lb tensor(-0.11412412)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.012101411819458008 
BICCOS Cumulative time: 0.012101411819458008
Preprocessing time: 0.010927677154541016 Inference time: 0.00029158592224121094 Add cuts time: 0.00011539459228515625 Cut analysis time: 0.000766754150390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10323 (1), -0.10323 (1), -0.10258 (1), -0.10255 (1), -0.10238 (1), -0.10216 (1), -0.10202 (1), -0.10190 (1), -0.10184 (1), -0.10125 (1), -0.10073 (1), -0.09905 (1), -0.09812 (1), -0.09754 (1), -0.09714 (1), -0.09656 (1), -0.09614 (1), -0.09575 (1), -0.09571 (1), -0.09492 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5269    set_bounds 0.0105    solve 0.1266    add 0.0784    
Accumulated time: pickout 0.0004    decision 0.5269    set_bounds 0.0105    solve 0.1266    add 0.0784    
Current (lb-rhs): -0.10322779417037964
50 domains visited
Cumulative time: 0.8559343814849854

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 15] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 15] [/input-12, 15] [/input-12, 26] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 6] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08701720833778381

all verified at 5th iter
Time: prepare 0.0080    bound 0.0377    transfer 0.0009    finalize 0.0028    func 0.0520    
Accumulated time: func 0.2737    prepare 0.0309    bound 0.2391    transfer 0.0030    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.20778143) min lb tensor(0.00055325)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03703761100769043 
BICCOS Cumulative time: 0.04913902282714844
Preprocessing time: 0.012673139572143555 Inference time: 0.014902353286743164 Add cuts time: 0.00918436050415039 Cut analysis time: 0.0002777576446533203
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0208    set_bounds 0.0128    solve 0.0522    add 0.0157    
Accumulated time: pickout 0.0016    decision 0.5478    set_bounds 0.0232    solve 0.1788    add 0.0942    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.82733239e+31, 7.87311047e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.28921047e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.82733239e+31, 7.72937983e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.30539820e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0058054327964782715

all verified at 0th iter
Time: prepare 0.0004    bound 0.0050    transfer 0.0001    finalize 0.0002    func 0.0058    
Accumulated time: func 0.2795    prepare 0.0313    bound 0.2441    transfer 0.0031    finalize 0.0063    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.31392073631287
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.31383657455444
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.3138129711151
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.31379318237305
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.31377291679382
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.31375360488892
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6863 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.42035007, -11.01566029, -16.78618240, -17.08073235, -15.94405842,
         -18.31308746, -16.60547638, -16.45758438, -12.49265862, -13.06334209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 534] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 534] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 197] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.66741276, 3.53291893, 4.23365116, 2.83012867, 5.27459431, 3.79739189,
         3.37451935, 0.14124250, 1.17811871]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.28128910, -17.14933395, -11.40331554, -14.08204365, -14.06262875,
         -13.41378117, -16.03304672, -13.62230492, -16.91720581, -17.59583473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 674] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 674] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 193] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10949612, 4.45416069, 2.07507944, 2.01375389, 1.43745184, 3.63756824,
         1.59498572, 4.70254755, 5.05546284]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0359 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 434] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 434] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 221] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55352426,  1.36358595, -0.76676738, -0.70900589, -1.60512829,
         -0.78009790, -1.31760621,  2.84528303,  0.56516695]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746],
         [-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.92216420,  0.70941162, -0.33232784,  0.60296011,  0.90736723]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0433 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [416]; unstable size 416; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 416] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 416] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 416] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 167] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.65106225,  3.34274673, -0.95804244, -1.22589183, -1.23296690,
          0.48913789, -2.05695391,  1.96782136,  0.53511190]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718],
         [-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26477671, -0.46661496, -0.48550916, -1.04984641]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [472]; unstable size 472; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 472] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 472] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 472] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 210] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69297791,  3.94914913,  3.92555237,  4.07342052,  5.17004395,
          4.61110973,  4.71607876, -0.48206663,  1.52207398]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.25it/s]100%|██████████| 1/1 [00:00<00:00,  8.24it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60659981, -2.84582663, -8.02860737, -7.76232910, -7.95765686,
          -9.17981625, -8.46953678, -8.89545727, -2.92662191, -5.02388382]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08079529]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1245 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.900588989257812
alpha/beta optimization time: 1.2682640552520752
initial alpha-crown bounds: tensor([[ 1.81915092,  4.04639530,  4.01018715,  4.15022755,  5.26251125,
          4.67265797,  4.80006409, -0.42642975,  1.56582570]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.42642974853515625
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53359079360962
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.53354907035828
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.53352308273315
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.53350114822388
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5334825515747
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.53346395492554
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.5334451198578
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.5334255695343
Verifying property 7 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.42642975]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
        -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.42642975]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 472
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 696
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011897087097167969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.42643070220947266
10 lb beta sum: 0.0, worst -0.42643213272094727
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    func 0.0564    
Accumulated time: func 0.0564    prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 80] 
split level 3: [/input-12, 74] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 11] 
split level 6: [/input-12, 60] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 1] 
split level 9: [/input-12, 6] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 827] 
split level 12: [/input-8, 1075] 
split level 13: [/input-8, 684] 
split level 14: [/input-8, 812] 
split level 15: [/input-8, 106] 
split level 16: [/input-8, 1126] 
split level 17: [/input-8, 1074] 
split level 18: [/input-8, 1611] 
split level 19: [/input, 2725] 
split level 20: [/input-8, 66] 
split level 21: [/input-8, 844] 
split level 22: [/input-8, 852] 
split level 23: [/input-8, 1331] 
split level 24: [/input-8, 1077] 
split level 25: [/input-8, 65] 
split level 26: [/input-8, 678] 
split level 27: [/input, 226] 
split level 28: [/input, 1790] 
split level 29: [/input-8, 64] 
split level 30: [/input-8, 403] 
split level 31: [/input, 2726] 
split level 32: [/input-8, 270] 
split level 33: [/input-8, 793] 
split level 34: [/input-8, 1026] 
split level 35: [/input-8, 861] 
split level 36: [/input-8, 1332] 
split level 37: [/input-8, 817] 
split level 38: [/input, 481] 
split level 39: [/input-8, 75] 
split level 40: [/input-8, 85] 
split level 41: [/input, 3190] 
split level 42: [/input, 2135] 
split level 43: [/input-8, 108] 
split level 44: [/input, 3994] 
split level 45: [/input, 2422] 
split level 46: [/input, 3191] 
split level 47: [/input, 800] 
split level 48: [/input, 435] 
split level 49: [/input, 3158] 
split level 50: [/input-8, 87] 
split level 51: [/input-8, 1629] 
split level 52: [/input, 2133] 
split level 53: [/input-8, 1838] 
split level 54: [/input, 2421] 
split level 55: [/input, 635] 
split level 56: [/input, 436] 
split level 57: [/input, 2392] 
split level 58: [/input, 2137] 
split level 59: [/input-8, 1734] 
split level 60: [/input, 3160] 
split level 61: [/input, 2423] 
split level 62: [/input, 3173] 
split level 63: [/input, 1651] 
split level 64: [/input, 2425] 
split level 65: [/input-8, 72] 
split level 66: [/input, 2410] 
split level 67: [/input, 3192] 
split level 68: [/input, 784] 
split level 69: [/input-8, 1618] 
split level 70: [/input-8, 1943] 
split level 71: [/input-8, 1847] 
split level 72: [/input-8, 1521] 
split level 73: [/input, 449] 
split level 74: [/input-8, 970] 
split level 75: [/input-8, 110] 
split level 76: [/input-8, 1392] 
split level 77: [/input-8, 1870] 
split level 78: [/input-8, 1935] 
split level 79: [/input, 3976] 
split level 80: [/input-8, 67] 
split level 81: [/input, 2028] 
split level 82: [/input, 225] 
split level 83: [/input, 2393] 
split level 84: [/input, 1655] 
split level 85: [/input-8, 432] 
split level 86: [/input, 3418] 
split level 87: [/input, 2027] 
split level 88: [/input, 3995] 
split level 89: [/input, 3161] 
split level 90: [/input, 1756] 
split level 91: [/input, 1653] 
split level 92: [/input-8, 1027] 
split level 93: [/input, 2420] 
split level 94: [/input, 4051] 
split level 95: [/input-8, 846] 
split level 96: [/input-8, 86] 
split level 97: [/input, 1192] 
split level 98: [/input-8, 1046] 
split level 99: [/input, 832] 
split level 100: [/input, 2030] 
split level 101: [/input, 1657] 
split level 102: [/input, 2388] 
split level 103: [/input, 2394] 
split level 104: [/input, 1652] 
split level 105: [/input, 1654] 
split level 106: [/input-8, 961] 
split level 107: [/input-8, 1445] 
split level 108: [/input, 2131] 
split level 109: [/input, 3207] 
split level 110: [/input-8, 1642] 
split level 111: [/input-8, 1861] 
split level 112: [/input, 163] 
split level 113: [/input, 843] 
split level 114: [/input, 2013] 
split level 115: [/input, 1656] 
split level 116: [/input-8, 600] 
split level 117: [/input, 3188] 
split level 118: [/input-8, 452] 
split level 119: [/input-8, 445] 
split level 120: [/input-8, 439] 
split level 121: [/input, 1055] 
split level 122: [/input-8, 1937] 
split level 123: [/input, 3746] 
split level 124: [/input-8, 1034] 
split level 125: [/input, 2014] 
split level 126: [/input, 4016] 
split level 127: [/input, 1619] 
split level 128: [/input, 424] 
split level 129: [/input, 3203] 
split level 130: [/input, 2225] 
split level 131: [/input-8, 1454] 
split level 132: [/input-8, 1035] 
split level 133: [/input, 1770] 
split level 134: [/input, 544] 
split level 135: [/input, 3143] 
split level 136: [/input-8, 615] 
split level 137: [/input, 2268] 
split level 138: [/input, 2292] 
split level 139: [/input-8, 1588] 
split level 140: [/input-8, 962] 
split level 141: [/input, 4002] 
split level 142: [/input, 2047] 
split level 143: [/input, 950] 
split level 144: [/input-8, 408] 
split level 145: [/input, 3144] 
split level 146: [/input-8, 504] 
split level 147: [/input, 2183] 
split level 148: [/input, 1288] 
split level 149: [/input, 2156] 
split level 150: [/input, 2877] 
split level 151: [/input-8, 1090] 
split level 152: [/input, 3810] 
split level 153: [/input, 1800] 
split level 154: [/input, 810] 
split level 155: [/input, 2122] 
split level 156: [/input, 2841] 
split level 157: [/input, 1934] 
split level 158: [/input-8, 394] 
split level 159: [/input-8, 1493] 
split level 160: [/input, 1853] 
split level 161: [/input-8, 971] 
split level 162: [/input-8, 983] 
split level 163: [/input, 3458] 
split level 164: [/input-8, 258] 
split level 165: [/input, 179] 
split level 166: [/input-8, 1644] 
split level 167: [/input, 517] 
split level 168: [/input-8, 1831] 
split level 169: [/input, 1997] 
split level 170: [/input, 2140] 
split level 171: [/input-8, 1729] 
split level 172: [/input, 2359] 
split level 173: [/input-8, 81] 
split level 174: [/input, 1950] 
split level 175: [/input, 1111] 
split level 176: [/input, 1533] 
split level 177: [/input, 2700] 
split level 178: [/input, 2172] 
split level 179: [/input, 1981] 
split level 180: [/input, 3828] 
split level 181: [/input-8, 1852] 
split level 182: [/input, 2143] 
split level 183: [/input-8, 833] 
split level 184: [/input, 3613] 
split level 185: [/input, 2177] 
split level 186: [/input, 2344] 
split level 187: [/input, 2435] 
split level 188: [/input, 1966] 
split level 189: [/input, 3745] 
split level 190: [/input-8, 692] 
split level 191: [/input, 2328] 
split level 192: [/input, 2556] 
split level 193: [/input, 3646] 
split level 194: [/input, 3080] 
split level 195: [/input, 3255] 
split level 196: [/input, 849] 
split level 197: [/input, 1982] 
split level 198: [/input, 1998] 
split level 199: [/input-8, 1227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4264082908630371
10 lb beta sum: 0.0, worst -0.42641162872314453
Time: prepare 0.0117    bound 0.1052    transfer 0.0019    finalize 0.0030    func 0.1245    
Accumulated time: func 0.1809    prepare 0.0223    bound 0.1611    transfer 0.0020    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.19878674) min lb tensor(-0.42640734)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011116504669189453 
BICCOS Cumulative time: 0.011116504669189453
Preprocessing time: 0.010489463806152344 Inference time: 0.00019502639770507812 Add cuts time: 0.00011157989501953125 Cut analysis time: 0.0003204345703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41315 (1), -0.41290 (1), -0.41277 (1), -0.41251 (1), -0.41245 (1), -0.41178 (1), -0.41120 (1), -0.41097 (1), -0.41089 (1), -0.41057 (1), -0.41010 (1), -0.40992 (1), -0.40988 (1), -0.40921 (1), -0.40902 (1), -0.40865 (1), -0.40837 (1), -0.40821 (1), -0.40723 (1), -0.40678 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5233    set_bounds 0.0099    solve 0.1246    add 0.0923    
Accumulated time: pickout 0.0004    decision 0.5233    set_bounds 0.0099    solve 0.1246    add 0.0923    
Current (lb-rhs): -0.4131450653076172
50 domains visited
Cumulative time: 0.8348519802093506

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 60] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4112358093261719
10 lb beta sum: 0.5693191885948181, worst -0.3877304494380951
Time: prepare 0.0077    bound 0.1253    transfer 0.0008    finalize 0.0029    func 0.1394    
Accumulated time: func 0.3203    prepare 0.0303    bound 0.2864    transfer 0.0028    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.58580768) min lb tensor(-0.38760585)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.018288135528564453 
BICCOS Cumulative time: 0.029404640197753906
Preprocessing time: 0.013019084930419922 Inference time: 0.0025854110717773438 Add cuts time: 0.002233266830444336 Cut analysis time: 0.00045037269592285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10933 (2), -0.10824 (2), -0.10767 (2), -0.10732 (2), -0.10568 (2), -0.10527 (2), -0.10461 (2), -0.10427 (2), -0.10357 (2), -0.10321 (2), -0.10084 (2), -0.10051 (2), -0.09945 (2), -0.09928 (2), -0.09745 (2), -0.09685 (2), -0.09679 (2), -0.09650 (2), -0.09623 (2), -0.09375 (2), 
Length of domains: 50
Time: pickout 0.0016    decision 0.0205    set_bounds 0.0133    solve 0.1396    add 0.0862    
Accumulated time: pickout 0.0019    decision 0.5438    set_bounds 0.0233    solve 0.2642    add 0.1785    
Current (lb-rhs): -0.10933178663253784
100 domains visited
Cumulative time: 1.1145453453063965

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 10] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13398456573486328
10 lb beta sum: 1.2089718580245972, worst -0.07511600852012634
Time: prepare 0.0077    bound 0.1290    transfer 0.0016    finalize 0.0028    func 0.1439    
Accumulated time: func 0.4642    prepare 0.0383    bound 0.4154    transfer 0.0044    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.34411633) min lb tensor(-0.07275054)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.0397953987121582 
BICCOS Cumulative time: 0.06920003890991211
Preprocessing time: 0.01227712631225586 Inference time: 0.01728677749633789 Add cuts time: 0.009790658950805664 Cut analysis time: 0.00044083595275878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07275 (3), -0.04744 (3), -0.03880 (3), -0.03626 (3), 
Length of domains: 4
Time: pickout 0.0014    decision 0.0198    set_bounds 0.0161    solve 0.1440    add 0.1094    
Accumulated time: pickout 0.0033    decision 0.5636    set_bounds 0.0394    solve 0.4082    add 0.2879    
Current (lb-rhs): -0.07275053858757019
104 domains visited
Cumulative time: 1.4454948902130127

Shallow-BaB round 4
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 80] 
split level 1: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 74] 
split level 2: [/input-12, 74] [/input-12, 74] [/input-12, 74] [/input-12, 10] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 11] 
split level 4: [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 60] 
split level 5: [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] 
split level 6: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 7: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 8: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 9: [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] 
split level 10: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 11: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 12: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 13: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] 
split level 14: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
split level 15: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] 
split level 16: [/input-8, 678] [/input-8, 678] [/input, 1790] [/input-8, 678] 
split level 17: [/input, 1790] [/input, 1790] [/input, 2726] [/input, 1790] 
split level 18: [/input, 2726] [/input, 2726] [/input-8, 403] [/input, 2726] 
split level 19: [/input-8, 1332] [/input-8, 403] [/input-8, 1332] [/input-8, 403] 
split level 20: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 1332] 
split level 21: [/input-8, 403] [/input-8, 1332] [/input, 481] [/input-8, 270] 
split level 22: [/input, 481] [/input, 481] [/input, 3158] [/input, 481] 
split level 23: [/input, 3158] [/input, 3158] [/input, 2133] [/input, 3158] 
split level 24: [/input-8, 1734] [/input, 2133] [/input-8, 1734] [/input, 2133] 
split level 25: [/input, 2422] [/input-8, 1734] [/input, 2392] [/input-8, 1734] 
split level 26: [/input, 2133] [/input, 635] [/input, 449] [/input, 449] 
split level 27: [/input, 449] [/input, 449] [/input, 635] [/input, 635] 
split level 28: [/input-8, 1618] [/input-8, 1618] [/input, 3173] [/input, 3173] 
split level 29: [/input, 3173] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] 
split level 30: [/input, 635] [/input, 3173] [/input-8, 1629] [/input-8, 1629] 
split level 31: [/input-8, 1629] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
split level 32: [/input-8, 1861] [/input-8, 1046] [/input-8, 1046] [/input-8, 1046] 
split level 33: [/input-8, 1046] [/input, 2388] [/input-8, 846] [/input, 2388] 
split level 34: [/input, 2388] [/input-8, 1445] [/input-8, 1445] [/input-8, 846] 
split level 35: [/input-8, 846] [/input, 163] [/input, 2388] [/input-8, 1937] 
split level 36: [/input-8, 1445] [/input-8, 846] [/input-8, 1937] [/input, 2131] 
split level 37: [/input-8, 1937] [/input-8, 1937] [/input, 2131] [/input, 163] 
split level 38: [/input, 163] [/input, 2131] [/input, 163] [/input, 1653] 
split level 39: [/input, 2131] [/input, 1653] [/input, 1655] [/input-8, 1445] 
split level 40: [/input, 1653] [/input, 1756] [/input, 1653] [/input, 1655] 
split level 41: [/input, 1655] [/input, 1655] [/input, 1756] [/input, 1756] 
split level 42: [/input, 1756] [/input, 1619] [/input, 1619] [/input, 1619] 
split level 43: [/input, 1619] [/input, 1654] [/input, 1654] [/input, 1654] 
split level 44: [/input, 1654] [/input-8, 394] [/input, 2268] [/input, 2268] 
split level 45: [/input, 2268] [/input, 2268] [/input, 2359] [/input, 2359] 
split level 46: [/input, 2359] [/input, 2359] [/input, 2115] [/input, 2115] 
split level 47: [/input, 2115] [/input, 3255] [/input, 3255] [/input, 3255] 
split level 48: [/input, 3255] [/input, 2115] [/input, 2386] [/input, 1604] 
split level 49: [/input, 2386] [/input, 2386] [/input, 1604] [/input, 2386] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09561300277709961

all verified at 7th iter
Time: prepare 0.0081    bound 0.0499    transfer 0.0008    finalize 0.0028    func 0.0643    
Accumulated time: func 0.5285    prepare 0.0491    bound 0.4653    transfer 0.0051    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.39963290) min lb tensor(0.00250101)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.040117740631103516 
BICCOS Cumulative time: 0.10931777954101562
Preprocessing time: 0.012323141098022461 Inference time: 0.018170833587646484 Add cuts time: 0.009181022644042969 Cut analysis time: 0.00044274330139160156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.1436    set_bounds 0.0136    solve 0.0644    add 0.0243    
Accumulated time: pickout 0.0040    decision 0.7072    set_bounds 0.0530    solve 0.4726    add 0.3122    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
104 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93]), tensor([-1.]), tensor([0]), tensor([2.48365115e-20]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35, 80]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.52638420e-01, 2.14447244e-03, 1.33355632e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35, 80]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.58732407e-43, 1.52638420e-01, 2.14447244e-03, 1.06363937e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.58732407e-43, 1.52638420e-01, 1.45336255e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21]), tensor([1., 1.]), tensor([0, 0]), tensor([3.58732407e-43, 2.89274275e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4164619445800781
10 lb beta sum: 1.2698872089385986, worst -0.25039467215538025
Time: prepare 0.0004    bound 0.1314    transfer 0.0001    finalize 0.0002    func 0.1323    
Accumulated time: func 0.6607    prepare 0.0495    bound 0.5967    transfer 0.0053    finalize 0.0118    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 74] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 11] 
split level 5: [/input-12, 60] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4877684116363525, worst -0.09554541110992432
10 lb beta sum: 1.4877684116363525, worst -0.0947953462600708
Time: prepare 0.0098    bound 0.1238    transfer 0.0013    finalize 0.0016    func 0.1383    
Accumulated time: func 0.7990    prepare 0.0598    bound 0.7205    transfer 0.0066    finalize 0.0134    
all_split False
======================Cut inference begins======================
max lb tensor(1.24170291) min lb tensor(-0.09456551)
Number of Verified Splits: 251 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4877684116363525, worst -0.19520199298858643
10 lb beta sum: 1.5508754253387451, worst -0.19472849369049072
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 13
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.46080613136291504 
BICCOS Cumulative time: 0.5701239109039307
Preprocessing time: 0.007156848907470703 Inference time: 0.445584774017334 Add cuts time: 0.0069124698638916016 Cut analysis time: 0.00115203857421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09457 (8), -0.05377 (8), -0.03191 (8), -0.01184 (8), -0.00286 (8), 
Length of domains: 5
Time: pickout 0.0005    decision 0.0232    set_bounds 0.0222    solve 0.1384    add 0.0121    
Accumulated time: pickout 0.0046    decision 0.7304    set_bounds 0.0752    solve 0.6110    add 0.3243    
Current (lb-rhs): -0.0945655107498169
109 domains visited
Cumulative time: 2.5389251708984375

BaB round 2
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] 
split level 1: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 2: [/input-8, 1075] [/input-8, 827] [/input-8, 1075] [/input-8, 1075] [/input-8, 827] 
split level 3: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 4: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 5: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 1332] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062107086181640625
10 lb beta sum: 0.004316105507314205, worst -0.06164360046386719
Time: prepare 0.0065    bound 0.1243    transfer 0.0014    finalize 0.0016    func 0.1360    
Accumulated time: func 0.9351    prepare 0.0666    bound 0.8448    transfer 0.0080    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.42137861) min lb tensor(-0.06143379)
Number of Verified Splits: 299 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17422056198120117
10 lb beta sum: 0.4368923008441925, worst -0.14635181427001953
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 8
#cuts 4-6: 13
#cuts 7-9: 9
#cuts 10-12: 12
#cuts >= 20: 0
BICCOS time: 0.3673851490020752 
BICCOS Cumulative time: 0.9375090599060059
Preprocessing time: 0.009986639022827148 Inference time: 0.34013962745666504 Add cuts time: 0.014886617660522461 Cut analysis time: 0.002372264862060547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06143 (14), -0.05436 (14), -0.05301 (14), -0.05097 (14), -0.04840 (14), -0.04039 (14), -0.03973 (14), -0.03671 (14), -0.02143 (14), -0.01823 (14), -0.01770 (14), -0.01589 (14), -0.01557 (14), -0.01417 (14), -0.01089 (14), -0.00909 (14), -0.00788 (14), -0.00374 (14), -0.00201 (14), -0.00170 (14), 
Length of domains: 21
Time: pickout 0.0011    decision 0.0186    set_bounds 0.0281    solve 0.1362    add 0.0015    
Accumulated time: pickout 0.0056    decision 0.7491    set_bounds 0.1033    solve 0.7472    add 0.3257    
Current (lb-rhs): -0.06143379211425781
130 domains visited
Cumulative time: 3.0951907634735107

BaB round 3
batch: 21
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 1: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 2: [/input-8, 108] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] 
split level 3: [/input-8, 1332] [/input-8, 861] [/input-8, 108] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 861] [/input-8, 108] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0473637580871582
10 lb beta sum: 0.0, worst -0.0470728874206543
Time: prepare 0.0067    bound 0.1486    transfer 0.0016    finalize 0.0020    func 0.1613    
Accumulated time: func 1.0964    prepare 0.0736    bound 0.9934    transfer 0.0096    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.06534004) min lb tensor(-0.04691648)
Number of Verified Splits: 269 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 12
#cuts 4-6: 11
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.048499107360839844 
BICCOS Cumulative time: 0.9860081672668457
Preprocessing time: 0.010347366333007812 Inference time: 0.03359079360961914 Add cuts time: 0.0034842491149902344 Cut analysis time: 0.0010766983032226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04692 (18), -0.04513 (18), -0.04314 (18), -0.04189 (18), -0.03987 (18), -0.03901 (18), -0.03822 (18), -0.03580 (18), -0.03567 (18), -0.03531 (18), -0.03516 (18), -0.03467 (18), -0.03432 (18), -0.03380 (18), -0.03340 (18), -0.03335 (18), -0.03258 (18), -0.03243 (18), -0.03229 (18), -0.03113 (18), 
Length of domains: 67
Time: pickout 0.0018    decision 0.0185    set_bounds 0.0202    solve 0.1615    add 0.0029    
Accumulated time: pickout 0.0074    decision 0.7676    set_bounds 0.1236    solve 0.9087    add 0.3286    
Current (lb-rhs): -0.04691648483276367
197 domains visited
Cumulative time: 3.35062575340271

BaB round 4
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
split level 1: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041077613830566406
10 lb beta sum: 0.07951203733682632, worst -0.04090309143066406
Time: prepare 0.0054    bound 0.1522    transfer 0.0013    finalize 0.0018    func 0.1626    
Accumulated time: func 1.2590    prepare 0.0793    bound 1.1456    transfer 0.0109    finalize 0.0187    
all_split False
======================Cut inference begins======================
max lb tensor(0.01046228) min lb tensor(-0.04081249)
Number of Verified Splits: 73 of 268
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 12
#cuts 4-6: 11
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.022525787353515625 
BICCOS Cumulative time: 1.0085339546203613
Preprocessing time: 0.008616209030151367 Inference time: 0.01021575927734375 Add cuts time: 0.002636432647705078 Cut analysis time: 0.0010573863983154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04081 (20), -0.03886 (20), -0.03832 (20), -0.03701 (20), -0.03637 (20), -0.03563 (20), -0.03452 (20), -0.03392 (20), -0.03390 (20), -0.03315 (20), -0.03293 (20), -0.03224 (20), -0.03197 (20), -0.03142 (20), -0.03141 (20), -0.03043 (20), -0.03013 (20), -0.02982 (20), -0.02975 (20), -0.02952 (20), 
Length of domains: 195
Time: pickout 0.0019    decision 0.0182    set_bounds 0.0132    solve 0.1627    add 0.0033    
Accumulated time: pickout 0.0094    decision 0.7858    set_bounds 0.1367    solve 1.0714    add 0.3320    
Current (lb-rhs): -0.04081249237060547
392 domains visited
Cumulative time: 3.573331594467163

BaB round 5
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.08120144158601761, worst -0.03967857360839844
10 lb beta sum: 0.08120144158601761, worst -0.03955793380737305
Time: prepare 0.0198    bound 0.1469    transfer 0.0009    finalize 0.0020    func 0.1724    
Accumulated time: func 1.4313    prepare 0.0993    bound 1.2925    transfer 0.0118    finalize 0.0208    
all_split False
======================Cut inference begins======================
max lb tensor(0.00872469) min lb tensor(-0.03951454)
Number of Verified Splits: 110 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 14
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03204607963562012 
BICCOS Cumulative time: 1.0405800342559814
Preprocessing time: 0.011962890625 Inference time: 0.01643848419189453 Add cuts time: 0.0025022029876708984 Cut analysis time: 0.0011425018310546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03951 (21), -0.03746 (21), -0.03702 (21), -0.03571 (21), -0.03497 (21), -0.03420 (21), -0.03321 (21), -0.03271 (21), -0.03205 (21), -0.03171 (21), -0.03168 (21), -0.03103 (21), -0.03022 (21), -0.02999 (21), -0.02952 (21), -0.02918 (21), -0.02864 (21), -0.02854 (21), -0.02824 (21), -0.02823 (21), 
Length of domains: 280
Time: pickout 0.0038    decision 0.0234    set_bounds 0.0182    solve 0.1725    add 0.0068    
Accumulated time: pickout 0.0131    decision 0.8092    set_bounds 0.1549    solve 1.2439    add 0.3388    
Current (lb-rhs): -0.03951454162597656
672 domains visited
Cumulative time: 3.8314027786254883

BaB round 6
batch: 280
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 64] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0376887321472168
10 lb beta sum: 0.03941960632801056, worst -0.03763580322265625
Time: prepare 0.0112    bound 0.1566    transfer 0.0026    finalize 0.0026    func 0.1767    
Accumulated time: func 1.6080    prepare 0.1107    bound 1.4492    transfer 0.0145    finalize 0.0233    
all_split False
======================Cut inference begins======================
max lb tensor(0.01166487) min lb tensor(-0.03759098)
Number of Verified Splits: 232 of 560
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 17
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.05684709548950195 
BICCOS Cumulative time: 1.0974271297454834
Preprocessing time: 0.016794204711914062 Inference time: 0.035109758377075195 Add cuts time: 0.003729581832885742 Cut analysis time: 0.0012135505676269531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03759 (22), -0.03546 (22), -0.03508 (22), -0.03378 (22), -0.03295 (22), -0.03214 (22), -0.03128 (22), -0.03088 (22), -0.02990 (22), -0.02980 (22), -0.02964 (22), -0.02916 (22), -0.02837 (22), -0.02778 (22), -0.02737 (22), -0.02729 (22), -0.02680 (22), -0.02665 (22), -0.02628 (22), -0.02612 (22), 
Length of domains: 328
Time: pickout 0.0050    decision 0.0278    set_bounds 0.0252    solve 0.1769    add 0.0037    
Accumulated time: pickout 0.0181    decision 0.8370    set_bounds 0.1801    solve 1.4208    add 0.3425    
Current (lb-rhs): -0.037590980529785156
1000 domains visited
Cumulative time: 4.128668308258057

BaB round 7
batch: 328
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03457021713256836
10 lb beta sum: 0.04501756280660629, worst -0.03452587127685547
Time: prepare 0.0164    bound 0.1501    transfer 0.0014    finalize 0.0040    func 0.1763    
Accumulated time: func 1.7843    prepare 0.1274    bound 1.5993    transfer 0.0159    finalize 0.0273    
all_split False
======================Cut inference begins======================
max lb tensor(0.00774479) min lb tensor(-0.03450203)
Number of Verified Splits: 145 of 656
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 18
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.046830177307128906 
BICCOS Cumulative time: 1.1442573070526123
Preprocessing time: 0.019997119903564453 Inference time: 0.022829055786132812 Add cuts time: 0.002755403518676758 Cut analysis time: 0.0012485980987548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03450 (23), -0.03385 (23), -0.03228 (23), -0.03205 (23), -0.03164 (23), -0.03112 (23), -0.03069 (23), -0.03005 (23), -0.02983 (23), -0.02893 (23), -0.02890 (23), -0.02828 (23), -0.02824 (23), -0.02784 (23), -0.02731 (23), -0.02719 (23), -0.02674 (23), -0.02666 (23), -0.02648 (23), -0.02610 (23), 
Length of domains: 511
Time: pickout 0.0059    decision 0.0293    set_bounds 0.0165    solve 0.1765    add 0.0039    
Accumulated time: pickout 0.0240    decision 0.8663    set_bounds 0.1967    solve 1.5973    add 0.3464    
Current (lb-rhs): -0.03450202941894531
1511 domains visited
Cumulative time: 4.409868001937866

BaB round 8
batch: 511
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 424] [/input, 481] [/input, 424] [/input-8, 1331] [/input-8, 1618] [/input, 481] [/input-8, 1618] [/input-8, 1331] [/input-8, 1331] [/input, 481] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0321965217590332
10 lb beta sum: 0.04382363706827164, worst -0.032195091247558594
Time: prepare 0.0264    bound 0.1524    transfer 0.0034    finalize 0.0066    func 0.1958    
Accumulated time: func 1.9802    prepare 0.1540    bound 1.7517    transfer 0.0193    finalize 0.0340    
all_split False
======================Cut inference begins======================
max lb tensor(0.01592159) min lb tensor(-0.03217649)
Number of Verified Splits: 252 of 1022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 20
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.07497763633728027 
BICCOS Cumulative time: 1.2192349433898926
Preprocessing time: 0.032370805740356445 Inference time: 0.03670024871826172 Add cuts time: 0.00455164909362793 Cut analysis time: 0.0013549327850341797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03218 (24), -0.03154 (24), -0.02989 (24), -0.02973 (24), -0.02967 (24), -0.02926 (24), -0.02904 (24), -0.02881 (24), -0.02779 (24), -0.02745 (24), -0.02739 (24), -0.02723 (24), -0.02715 (24), -0.02675 (24), -0.02652 (24), -0.02630 (24), -0.02604 (24), -0.02552 (24), -0.02541 (24), -0.02534 (24), 
Length of domains: 770
Time: pickout 0.0111    decision 0.0393    set_bounds 0.0465    solve 0.1961    add 0.0040    
Accumulated time: pickout 0.0352    decision 0.9056    set_bounds 0.2432    solve 1.7934    add 0.3504    
Current (lb-rhs): -0.03217649459838867
2281 domains visited
Cumulative time: 4.784735918045044

BaB round 9
batch: 770
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 481] [/input, 481] [/input-8, 861] [/input, 481] [/input-8, 1331] [/input-8, 861] [/input, 481] [/input-8, 861] [/input-8, 1331] [/input-8, 861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029646873474121094
10 lb beta sum: 0.06986172497272491, worst -0.029644489288330078
Time: prepare 0.0394    bound 0.1929    transfer 0.0036    finalize 0.0095    func 0.4487    
Accumulated time: func 2.4289    prepare 0.1937    bound 1.9446    transfer 0.0229    finalize 0.0434    
all_split False
======================Cut inference begins======================
max lb tensor(0.24866295) min lb tensor(-0.02963591)
Number of Verified Splits: 548 of 1540
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 15
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.13874506950378418 
BICCOS Cumulative time: 1.3579800128936768
Preprocessing time: 0.0480191707611084 Inference time: 0.08219265937805176 Add cuts time: 0.007196664810180664 Cut analysis time: 0.0013365745544433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02964 (25), -0.02901 (25), -0.02866 (25), -0.02804 (25), -0.02731 (25), -0.02720 (25), -0.02712 (25), -0.02669 (25), -0.02649 (25), -0.02634 (25), -0.02627 (25), -0.02623 (25), -0.02615 (25), -0.02572 (25), -0.02552 (25), -0.02539 (25), -0.02530 (25), -0.02488 (25), -0.02480 (25), -0.02477 (25), 
Length of domains: 992
Time: pickout 0.0212    decision 0.0542    set_bounds 0.0680    solve 0.4491    add 0.0096    
Accumulated time: pickout 0.0564    decision 0.9598    set_bounds 0.3112    solve 2.2426    add 0.3600    
Current (lb-rhs): -0.029635906219482422
3273 domains visited
Cumulative time: 5.531137943267822

BaB round 10
batch: 992
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 449] [/input, 449] [/input, 449] [/input, 2726] [/input, 449] [/input, 449] [/input, 2726] [/input, 2726] [/input, 449] [/input, 449] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028373241424560547
10 lb beta sum: 0.05362633615732193, worst -0.028350353240966797
Time: prepare 0.0521    bound 0.1769    transfer 0.0026    finalize 0.0114    func 0.2572    
Accumulated time: func 2.6861    prepare 0.2462    bound 2.1215    transfer 0.0255    finalize 0.0549    
all_split False
======================Cut inference begins======================
max lb tensor(0.02279426) min lb tensor(-0.02834511)
Number of Verified Splits: 968 of 1984
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 20
#cuts 4-6: 11
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.22962594032287598 
BICCOS Cumulative time: 1.5876059532165527
Preprocessing time: 0.06276607513427734 Inference time: 0.15375852584838867 Add cuts time: 0.011690855026245117 Cut analysis time: 0.0014104843139648438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02835 (26), -0.02773 (26), -0.02738 (26), -0.02677 (26), -0.02592 (26), -0.02586 (26), -0.02581 (26), -0.02525 (26), -0.02521 (26), -0.02499 (26), -0.02496 (26), -0.02490 (26), -0.02486 (26), -0.02428 (26), -0.02425 (26), -0.02403 (26), -0.02343 (26), -0.02339 (26), -0.02334 (26), -0.02284 (26), 
Length of domains: 1016
Time: pickout 0.0229    decision 0.0649    set_bounds 0.0863    solve 0.2577    add 0.0067    
Accumulated time: pickout 0.0793    decision 1.0247    set_bounds 0.3975    solve 2.5003    add 0.3667    
Current (lb-rhs): -0.028345108032226562
4289 domains visited
Cumulative time: 6.209991931915283

BaB round 11
batch: 1016
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 861] [/input-8, 1331] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02673196792602539
10 lb beta sum: 0.1752309799194336, worst -0.026706695556640625
Time: prepare 0.0550    bound 0.2270    transfer 0.0085    finalize 0.0127    func 0.3167    
Accumulated time: func 3.0028    prepare 0.3014    bound 2.3485    transfer 0.0340    finalize 0.0676    
all_split False
======================Cut inference begins======================
max lb tensor(0.02326818) min lb tensor(-0.02669239)
Number of Verified Splits: 987 of 2032
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 20
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.23887896537780762 
BICCOS Cumulative time: 1.8264849185943604
Preprocessing time: 0.06559514999389648 Inference time: 0.16141128540039062 Add cuts time: 0.010521888732910156 Cut analysis time: 0.0013506412506103516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02669 (27), -0.02608 (27), -0.02573 (27), -0.02513 (27), -0.02425 (27), -0.02415 (27), -0.02355 (27), -0.02333 (27), -0.02330 (27), -0.02320 (27), -0.02274 (27), -0.02265 (27), -0.02258 (27), -0.02239 (27), -0.02237 (27), -0.02200 (27), -0.02179 (27), -0.02172 (27), -0.02170 (27), -0.02144 (27), 
Length of domains: 1045
Time: pickout 0.0249    decision 0.0686    set_bounds 0.0916    solve 0.3173    add 0.0078    
Accumulated time: pickout 0.1042    decision 1.0933    set_bounds 0.4891    solve 2.8176    add 0.3746    
Current (lb-rhs): -0.02669239044189453
5334 domains visited
Cumulative time: 6.9713921546936035

BaB round 12
batch: 1045
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input-8, 861] [/input, 2726] [/input-8, 861] [/input-8, 75] [/input-8, 861] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 75] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023594379425048828
10 lb beta sum: 0.15439535677433014, worst -0.023597240447998047
Time: prepare 0.0565    bound 0.2266    transfer 0.0044    finalize 0.0126    func 0.3158    
Accumulated time: func 3.3185    prepare 0.3582    bound 2.5751    transfer 0.0384    finalize 0.0802    
all_split False
======================Cut inference begins======================
max lb tensor(0.01759186) min lb tensor(-0.02358532)
Number of Verified Splits: 769 of 2090
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 19
#cuts 4-6: 11
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.21074414253234863 
BICCOS Cumulative time: 2.037229061126709
Preprocessing time: 0.06663870811462402 Inference time: 0.13265371322631836 Add cuts time: 0.009440183639526367 Cut analysis time: 0.002011537551879883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02359 (28), -0.02350 (28), -0.02323 (28), -0.02283 (28), -0.02263 (28), -0.02254 (28), -0.02227 (28), -0.02187 (28), -0.02123 (28), -0.02109 (28), -0.02105 (28), -0.02103 (28), -0.02099 (28), -0.02094 (28), -0.02073 (28), -0.02068 (28), -0.02063 (28), -0.02033 (28), -0.02028 (28), -0.02028 (28), 
Length of domains: 1321
Time: pickout 0.0217    decision 0.0661    set_bounds 0.2714    solve 0.3164    add 0.0095    
Accumulated time: pickout 0.1258    decision 1.1594    set_bounds 0.7605    solve 3.1339    add 0.3840    
Current (lb-rhs): -0.02358531951904297
6655 domains visited
Cumulative time: 7.876328945159912

BaB round 13
batch: 1321
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 75] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02158069610595703
10 lb beta sum: 0.13076673448085785, worst -0.021587371826171875
Time: prepare 0.0701    bound 0.2123    transfer 0.0063    finalize 0.0155    func 0.3225    
Accumulated time: func 3.6410    prepare 0.4287    bound 2.7874    transfer 0.0447    finalize 0.0957    
all_split False
======================Cut inference begins======================
max lb tensor(0.00714391) min lb tensor(-0.02157497)
Number of Verified Splits: 832 of 2642
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 19
#cuts 4-6: 11
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.24424505233764648 
BICCOS Cumulative time: 2.2814741134643555
Preprocessing time: 0.08498525619506836 Inference time: 0.14772844314575195 Add cuts time: 0.010155439376831055 Cut analysis time: 0.0013759136199951172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02157 (29), -0.02149 (29), -0.02121 (29), -0.02081 (29), -0.02061 (29), -0.02053 (29), -0.02025 (29), -0.01985 (29), -0.01953 (29), -0.01945 (29), -0.01931 (29), -0.01906 (29), -0.01901 (29), -0.01898 (29), -0.01893 (29), -0.01870 (29), -0.01868 (29), -0.01865 (29), -0.01858 (29), -0.01850 (29), 
Length of domains: 1810
Time: pickout 0.0303    decision 0.0833    set_bounds 0.1194    solve 0.3231    add 0.0125    
Accumulated time: pickout 0.1562    decision 1.2427    set_bounds 0.8799    solve 3.4570    add 0.3965    
Current (lb-rhs): -0.021574974060058594
8465 domains visited
Cumulative time: 8.699663400650024

BaB round 14
batch: 1810
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 3994] [/input, 2726] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018716812133789062
10 lb beta sum: 0.09680572152137756, worst -0.01860523223876953
Time: prepare 0.0977    bound 0.3493    transfer 0.0114    finalize 0.0228    func 0.5052    
Accumulated time: func 4.1462    prepare 0.5267    bound 3.1367    transfer 0.0560    finalize 0.1185    
all_split False
======================Cut inference begins======================
max lb tensor(0.00815535) min lb tensor(-0.01858521)
Number of Verified Splits: 1351 of 3620
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 25
#cuts 4-6: 12
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.38179540634155273 
BICCOS Cumulative time: 2.663269519805908
Preprocessing time: 0.11392951011657715 Inference time: 0.24871492385864258 Add cuts time: 0.017427682876586914 Cut analysis time: 0.0017232894897460938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01859 (30), -0.01850 (30), -0.01844 (30), -0.01835 (30), -0.01822 (30), -0.01808 (30), -0.01783 (30), -0.01768 (30), -0.01762 (30), -0.01754 (30), -0.01748 (30), -0.01740 (30), -0.01726 (30), -0.01712 (30), -0.01686 (30), -0.01678 (30), -0.01672 (30), -0.01650 (30), -0.01640 (30), -0.01637 (30), 
Length of domains: 2269
Time: pickout 0.0418    decision 0.1100    set_bounds 0.3225    solve 0.5064    add 0.0158    
Accumulated time: pickout 0.1980    decision 1.3527    set_bounds 1.2024    solve 3.9635    add 0.4123    
Current (lb-rhs): -0.018585205078125
10734 domains visited
Cumulative time: 10.094173908233643

BaB round 15
batch: 2269
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 1618] [/input, 2726] [/input-8, 678] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017381668090820312
10 lb beta sum: 0.3641800582408905, worst -0.01643991470336914
Time: prepare 0.1234    bound 0.4212    transfer 0.0083    finalize 0.0272    func 0.6105    
Accumulated time: func 4.7567    prepare 0.6505    bound 3.5579    transfer 0.0643    finalize 0.1457    
all_split False
======================Cut inference begins======================
max lb tensor(0.48583502) min lb tensor(-0.01642895)
Number of Verified Splits: 3688 of 4538
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 30
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 1.0651590824127197 
BICCOS Cumulative time: 3.728428602218628
Preprocessing time: 0.34082937240600586 Inference time: 0.6887238025665283 Add cuts time: 0.034204721450805664 Cut analysis time: 0.0014011859893798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01643 (31), -0.01635 (31), -0.01634 (31), -0.01625 (31), -0.01607 (31), -0.01597 (31), -0.01567 (31), -0.01558 (31), -0.01548 (31), -0.01539 (31), -0.01539 (31), -0.01530 (31), -0.01511 (31), -0.01502 (31), -0.01471 (31), -0.01463 (31), -0.01431 (31), -0.01424 (31), -0.01424 (31), -0.01416 (31), 
Length of domains: 850
Time: pickout 0.0473    decision 0.1332    set_bounds 0.2058    solve 0.6114    add 0.0131    
Accumulated time: pickout 0.2453    decision 1.4859    set_bounds 1.4082    solve 4.5749    add 0.4255    
Current (lb-rhs): -0.01642894744873047
11584 domains visited
Cumulative time: 12.202698230743408

BaB round 16
batch: 850
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016428470611572266
10 lb beta sum: 0.6474012136459351, worst -0.013171017169952393
Time: prepare 0.0447    bound 0.2048    transfer 0.0057    finalize 0.0102    func 0.2767    
Accumulated time: func 5.0334    prepare 0.6955    bound 3.7627    transfer 0.0700    finalize 0.1559    
all_split False
======================Cut inference begins======================
max lb tensor(0.48471010) min lb tensor(-0.01316684)
Number of Verified Splits: 1498 of 1700
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 32
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.3441298007965088 
BICCOS Cumulative time: 4.072558403015137
Preprocessing time: 0.059076547622680664 Inference time: 0.27263689041137695 Add cuts time: 0.010809659957885742 Cut analysis time: 0.0016067028045654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01317 (32), -0.01307 (32), -0.01305 (32), -0.01296 (32), -0.01279 (32), -0.01269 (32), -0.01243 (32), -0.01234 (32), -0.01221 (32), -0.01212 (32), -0.01209 (32), -0.01199 (32), -0.01182 (32), -0.01173 (32), -0.01147 (32), -0.01138 (32), -0.01112 (32), -0.01110 (32), -0.01103 (32), -0.01102 (32), 
Length of domains: 202
Time: pickout 0.0183    decision 0.0570    set_bounds 0.0761    solve 0.2770    add 0.0023    
Accumulated time: pickout 0.2636    decision 1.5429    set_bounds 1.4843    solve 4.8519    add 0.4278    
Current (lb-rhs): -0.013166844844818115
11786 domains visited
Cumulative time: 12.991122722625732

BaB round 17
batch: 202
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input, 1790] [/input, 1790] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01528310775756836
10 lb beta sum: 0.788742184638977, worst -0.011837244033813477
Time: prepare 0.0113    bound 0.1645    transfer 0.0013    finalize 0.0024    func 0.1822    
Accumulated time: func 5.2156    prepare 0.7070    bound 3.9272    transfer 0.0713    finalize 0.1583    
all_split False
======================Cut inference begins======================
max lb tensor(0.24295831) min lb tensor(-0.01183194)
Number of Verified Splits: 303 of 404
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 32
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.07508277893066406 
BICCOS Cumulative time: 4.147641181945801
Preprocessing time: 0.012839078903198242 Inference time: 0.0577237606048584 Add cuts time: 0.0032129287719726562 Cut analysis time: 0.0013070106506347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01183 (33), -0.01174 (33), -0.01171 (33), -0.01162 (33), -0.01087 (33), -0.01078 (33), -0.01075 (33), -0.01066 (33), -0.00976 (33), -0.00975 (33), -0.00969 (33), -0.00967 (33), -0.00926 (33), -0.00917 (33), -0.00915 (33), -0.00905 (33), -0.00880 (33), -0.00879 (33), -0.00873 (33), -0.00870 (33), 
Length of domains: 101
Time: pickout 0.0059    decision 0.0253    set_bounds 0.0184    solve 0.1823    add 0.0016    
Accumulated time: pickout 0.2694    decision 1.5682    set_bounds 1.5028    solve 5.0342    add 0.4294    
Current (lb-rhs): -0.011831939220428467
11887 domains visited
Cumulative time: 13.301936149597168

BaB round 18
batch: 101
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input, 1790] [/input, 1790] 
split level 1: [/input-8, 1629] [/input-8, 1629] [/input-8, 1629] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] [/input-8, 1629] [/input-8, 1629] [/input-8, 970] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9481908082962036, worst -0.01183241605758667
10 lb beta sum: 0.9481908082962036, worst -0.01184147596359253
Time: prepare 0.0200    bound 0.1564    transfer 0.0008    finalize 0.0020    func 0.1819    
Accumulated time: func 5.3975    prepare 0.7273    bound 4.0836    transfer 0.0722    finalize 0.1603    
all_split False
======================Cut inference begins======================
max lb tensor(0.01343846) min lb tensor(-0.01182812)
Number of Verified Splits: 215 of 404
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 32
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.059295654296875 
BICCOS Cumulative time: 4.206936836242676
Preprocessing time: 0.012473106384277344 Inference time: 0.04259657859802246 Add cuts time: 0.0029799938201904297 Cut analysis time: 0.0012459754943847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01183 (35), -0.01174 (35), -0.01171 (35), -0.01162 (35), -0.01087 (35), -0.01078 (35), -0.01075 (35), -0.01066 (35), -0.01060 (35), -0.01050 (35), -0.01050 (35), -0.01041 (35), -0.00974 (35), -0.00974 (35), -0.00968 (35), -0.00966 (35), -0.00965 (35), -0.00955 (35), -0.00954 (35), -0.00945 (35), 
Length of domains: 189
Time: pickout 0.0036    decision 0.0183    set_bounds 0.0302    solve 0.1820    add 0.0032    
Accumulated time: pickout 0.2731    decision 1.5864    set_bounds 1.5330    solve 5.2162    add 0.4326    
Current (lb-rhs): -0.011828124523162842
12076 domains visited
Cumulative time: 13.600257635116577

BaB round 19
batch: 189
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 67] [/input-8, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8876290917396545, worst -0.010997951030731201
10 lb beta sum: 0.8876290917396545, worst -0.01100701093673706
Time: prepare 0.0184    bound 0.1644    transfer 0.0008    finalize 0.0019    func 0.1880    
Accumulated time: func 5.5855    prepare 0.7459    bound 4.2480    transfer 0.0729    finalize 0.1622    
all_split False
======================Cut inference begins======================
max lb tensor(0.01156074) min lb tensor(-0.01099795)
Number of Verified Splits: 232 of 378
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 33
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.06268525123596191 
BICCOS Cumulative time: 4.269622087478638
Preprocessing time: 0.011754989624023438 Inference time: 0.04651236534118652 Add cuts time: 0.003087759017944336 Cut analysis time: 0.0013301372528076172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01100 (36), -0.01088 (36), -0.01088 (36), -0.01076 (36), -0.01004 (36), -0.00992 (36), -0.00991 (36), -0.00980 (36), -0.00976 (36), -0.00966 (36), -0.00963 (36), -0.00954 (36), -0.00887 (36), -0.00886 (36), -0.00881 (36), -0.00876 (36), -0.00875 (36), -0.00871 (36), -0.00868 (36), -0.00859 (36), 
Length of domains: 146
Time: pickout 0.0051    decision 0.0221    set_bounds 0.0169    solve 0.1882    add 0.0016    
Accumulated time: pickout 0.2782    decision 1.6085    set_bounds 1.5499    solve 5.4044    add 0.4341    
Current (lb-rhs): -0.010997951030731201
12222 domains visited
Cumulative time: 13.898539543151855

BaB round 20
batch: 146
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input, 3994] [/input-8, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009245872497558594
10 lb beta sum: 0.22974181175231934, worst -0.009252458810806274
Time: prepare 0.0078    bound 0.1622    transfer 0.0018    finalize 0.0026    func 0.1764    
Accumulated time: func 5.7618    prepare 0.7540    bound 4.4102    transfer 0.0747    finalize 0.1648    
all_split False
======================Cut inference begins======================
max lb tensor(0.00426698) min lb tensor(-0.00924587)
Number of Verified Splits: 141 of 292
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 33
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.04178977012634277 
BICCOS Cumulative time: 4.3114118576049805
Preprocessing time: 0.009167909622192383 Inference time: 0.028922080993652344 Add cuts time: 0.002477407455444336 Cut analysis time: 0.001222372055053711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00925 (37), -0.00913 (37), -0.00912 (37), -0.00900 (37), -0.00829 (37), -0.00816 (37), -0.00816 (37), -0.00804 (37), -0.00794 (37), -0.00787 (37), -0.00782 (37), -0.00775 (37), -0.00721 (37), -0.00715 (37), -0.00714 (37), -0.00710 (37), -0.00704 (37), -0.00703 (37), -0.00699 (37), -0.00699 (37), 
Length of domains: 151
Time: pickout 0.0042    decision 0.0201    set_bounds 0.0129    solve 0.1765    add 0.0023    
Accumulated time: pickout 0.2824    decision 1.6286    set_bounds 1.5628    solve 5.5808    add 0.4365    
Current (lb-rhs): -0.009245872497558594
12373 domains visited
Cumulative time: 14.157587051391602

BaB round 21
batch: 151
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] 
cut re-enabled after branching node selection
0 lb beta sum: 0.44542816281318665, worst -0.007869243621826172
10 lb beta sum: 0.46110817790031433, worst -0.007859617471694946
Time: prepare 0.0150    bound 0.1625    transfer 0.0018    finalize 0.0018    func 0.1831    
Accumulated time: func 5.9450    prepare 0.7692    bound 4.5726    transfer 0.0765    finalize 0.1666    
all_split False
======================Cut inference begins======================
max lb tensor(0.00262874) min lb tensor(-0.00784402)
Number of Verified Splits: 79 of 302
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 33
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.029984474182128906 
BICCOS Cumulative time: 4.341396331787109
Preprocessing time: 0.009460687637329102 Inference time: 0.01603388786315918 Add cuts time: 0.0032262802124023438 Cut analysis time: 0.0012636184692382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00784 (38), -0.00773 (38), -0.00771 (38), -0.00760 (38), -0.00689 (38), -0.00677 (38), -0.00676 (38), -0.00664 (38), -0.00654 (38), -0.00647 (38), -0.00642 (38), -0.00635 (38), -0.00622 (38), -0.00611 (38), -0.00609 (38), -0.00598 (38), -0.00574 (38), -0.00572 (38), -0.00572 (38), -0.00562 (38), 
Length of domains: 223
Time: pickout 0.0041    decision 0.0202    set_bounds 0.0131    solve 0.1832    add 0.0020    
Accumulated time: pickout 0.2865    decision 1.6488    set_bounds 1.5759    solve 5.7641    add 0.4385    
Current (lb-rhs): -0.007844015955924988
12596 domains visited
Cumulative time: 14.411145687103271

BaB round 22
batch: 223
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4294361174106598, worst -0.007024809718132019
10 lb beta sum: 0.4294361174106598, worst -0.007014796137809753
Time: prepare 0.0219    bound 0.1644    transfer 0.0013    finalize 0.0026    func 0.1933    
Accumulated time: func 6.1383    prepare 0.7913    bound 4.7370    transfer 0.0778    finalize 0.1692    
all_split False
======================Cut inference begins======================
max lb tensor(0.01052636) min lb tensor(-0.00700144)
Number of Verified Splits: 265 of 446
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 35
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.07517552375793457 
BICCOS Cumulative time: 4.416571855545044
Preprocessing time: 0.013456583023071289 Inference time: 0.0568547248840332 Add cuts time: 0.0035893917083740234 Cut analysis time: 0.0012748241424560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00700 (39), -0.00688 (39), -0.00688 (39), -0.00676 (39), -0.00605 (39), -0.00593 (39), -0.00592 (39), -0.00581 (39), -0.00559 (39), -0.00550 (39), -0.00546 (39), -0.00539 (39), -0.00538 (39), -0.00528 (39), -0.00527 (39), -0.00515 (39), -0.00489 (39), -0.00488 (39), -0.00485 (39), -0.00476 (39), 
Length of domains: 181
Time: pickout 0.0064    decision 0.0240    set_bounds 0.0201    solve 0.1935    add 0.0016    
Accumulated time: pickout 0.2929    decision 1.6727    set_bounds 1.5961    solve 5.9575    add 0.4400    
Current (lb-rhs): -0.007001444697380066
12777 domains visited
Cumulative time: 14.733870029449463

BaB round 23
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0053615570068359375
10 lb beta sum: 0.22619526088237762, worst -0.00531807541847229
Time: prepare 0.0096    bound 0.1554    transfer 0.0007    finalize 0.0029    func 0.1711    
Accumulated time: func 6.3094    prepare 0.8012    bound 4.8925    transfer 0.0786    finalize 0.1720    
all_split False
======================Cut inference begins======================
max lb tensor(0.23576827) min lb tensor(-0.00529484)
Number of Verified Splits: 240 of 362
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 36
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.0676279067993164 
BICCOS Cumulative time: 4.48419976234436
Preprocessing time: 0.01113271713256836 Inference time: 0.05167818069458008 Add cuts time: 0.0035521984100341797 Cut analysis time: 0.001264810562133789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00529 (40), -0.00517 (40), -0.00517 (40), -0.00505 (40), -0.00434 (40), -0.00422 (40), -0.00421 (40), -0.00410 (40), -0.00389 (40), -0.00379 (40), -0.00375 (40), -0.00369 (40), -0.00367 (40), -0.00357 (40), -0.00357 (40), -0.00353 (40), -0.00345 (40), -0.00342 (40), -0.00340 (40), -0.00329 (40), 
Length of domains: 122
Time: pickout 0.0046    decision 0.0191    set_bounds 0.0160    solve 0.1712    add 0.0028    
Accumulated time: pickout 0.2975    decision 1.6918    set_bounds 1.6120    solve 6.1288    add 0.4429    
Current (lb-rhs): -0.0052948445081710815
12899 domains visited
Cumulative time: 15.01839280128479

BaB round 24
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004166126251220703
10 lb beta sum: 0.11967841535806656, worst -0.0040992796421051025
Time: prepare 0.0065    bound 0.1591    transfer 0.0021    finalize 0.0015    func 0.1709    
Accumulated time: func 6.4803    prepare 0.8080    bound 5.0516    transfer 0.0807    finalize 0.1735    
all_split False
======================Cut inference begins======================
max lb tensor(0.23085542) min lb tensor(-0.00408101)
Number of Verified Splits: 192 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 37
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.05461406707763672 
BICCOS Cumulative time: 4.538813829421997
Preprocessing time: 0.007831096649169922 Inference time: 0.04264259338378906 Add cuts time: 0.0028808116912841797 Cut analysis time: 0.0012595653533935547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00408 (41), -0.00396 (41), -0.00396 (41), -0.00384 (41), -0.00313 (41), -0.00301 (41), -0.00301 (41), -0.00289 (41), -0.00266 (41), -0.00258 (41), -0.00254 (41), -0.00247 (41), -0.00246 (41), -0.00235 (41), -0.00235 (41), -0.00223 (41), -0.00196 (41), -0.00195 (41), -0.00184 (41), -0.00183 (41), 
Length of domains: 52
Time: pickout 0.0035    decision 0.0189    set_bounds 0.0107    solve 0.1710    add 0.0018    
Accumulated time: pickout 0.3010    decision 1.7107    set_bounds 1.6228    solve 6.2998    add 0.4446    
Current (lb-rhs): -0.004081010818481445
12951 domains visited
Cumulative time: 15.280281782150269

BaB round 25
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] 
split level 1: [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -7.104873657226562e-05

all verified at 3th iter
Time: prepare 0.0054    bound 0.0347    transfer 0.0009    finalize 0.0011    func 0.0436    
Accumulated time: func 6.5239    prepare 0.8136    bound 5.0863    transfer 0.0816    finalize 0.1746    
all_split False
======================Cut inference begins======================
max lb tensor(0.00515413) min lb tensor(1.46031380e-06)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Total number of valid cuts: 51.
#cuts 1-3: 37
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.006668806076049805 
BICCOS Cumulative time: 4.545482635498047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0023    decision 0.0167    set_bounds 0.0101    solve 0.0436    add 0.0001    
Accumulated time: pickout 0.3032    decision 1.7274    set_bounds 1.6329    solve 6.3434    add 0.4447    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
12951 domains visited
Cumulative time: 15.360941410064697


Properties batch 8, size 1
Remaining timeout: 182.9346148967743
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 17.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 640] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 640] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 227] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54901487, -0.55123186, -2.14694476, -2.65342474, -1.82377076,
         -2.15827703, -1.06202734,  0.01771516, -1.15436029]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268],
         [-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.10458970,  1.71843028, -1.00163889, -1.92454958, -0.63691735,
          -1.31533372,  0.08971286,  0.72467637]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0891 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [628]; unstable size 628; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 628] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 628] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 628] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 194] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.77330351,  5.60239220,  4.83423901,  3.93323040,  5.32919216,
          5.82401562,  3.69637442,  3.85418510, -1.36576104]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
          -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54668856]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211, -1.24285710, -1.14761901,  ..., -1.32222211,
            -1.32222211, -1.21111107],
           [-1.25873005, -1.24285710, -1.16349196,  ..., -1.32222211,
            -1.32222211, -1.32222211],
           [-1.22698402, -1.22698402, -1.21111107,  ..., -1.33809519,
            -1.32222211, -1.21111107],
           ...,
           [ 0.97936511,  0.99523818,  0.99523818,  ...,  1.04285717,
             1.05873048,  1.04285717],
           [ 1.04285717,  1.04285717,  1.02698421,  ...,  1.05873048,
             1.10634947,  1.13809550],
           [ 1.04285717,  1.04285717,  1.04285717,  ...,  1.01111114,
             1.07460344,  1.07460344]],

          [[-1.56199670, -1.48148143, -1.38486302,  ..., -1.46537840,
            -1.46537840, -1.35265696],
           [-1.44927526, -1.43317223, -1.35265696,  ..., -1.46537840,
            -1.46537840, -1.46537840],
           [-1.40096617, -1.40096617, -1.38486302,  ..., -1.48148143,
            -1.46537840, -1.35265696],
           ...,
           [ 0.72463775,  0.74074084,  0.74074084,  ...,  0.86956531,
             0.88566834,  0.86956531],
           [ 0.78904998,  0.78904998,  0.77294695,  ...,  0.88566834,
             0.93397754,  0.96618366],
           [ 0.78904998,  0.78904998,  0.78904998,  ...,  0.83735919,
             0.90177143,  0.90177143]],

          [[-1.30284870, -1.22788620, -1.13793111,  ..., -1.25787115,
            -1.25787115, -1.15292358],
           [-1.21289361, -1.19790113, -1.12293863,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.16791618, -1.16791618, -1.15292358,  ..., -1.27286363,
            -1.25787115, -1.15292358],
           ...,
           [ 0.84107965,  0.85607213,  0.85607213,  ...,  0.94602716,
             0.96101969,  0.94602716],
           [ 0.90104967,  0.90104967,  0.88605714,  ...,  0.96101969,
             1.00599718,  1.03598225],
           [ 0.90104967,  0.90104967,  0.90104967,  ...,  0.91604215,
             0.97601217,  0.97601217]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0350 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 485] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 485] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.00222683,  5.24682665,  0.82175875, -0.20462823,  0.32712030,
          1.14493561,  1.33189201,  7.36666632,  3.64896464]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.24767017,  -9.97193718,  -4.73787022,  -3.23425245,  -4.31496525,
           -3.29052877,  -5.42143679,  -5.31018877, -11.66250134,  -7.98117399]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05627632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0746 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.15195465,  -9.58116150, -14.61256504, -15.32470417, -14.07134438,
         -16.02833176, -16.91090012, -13.49322128, -10.77580357, -11.62801266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [531]; unstable size 531; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 531] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 531] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 531] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 184] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.31977224, 3.21350360, 3.97968626, 2.74568653, 4.38296270, 5.60134363,
         1.73482823, 0.05008960, 1.12907434]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 144, 1, 488] with unstable size 143 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 488] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [143]; unstable size 143; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 143] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 143] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41919041,  6.05724716,  1.13111067,  0.98754239,  0.83572435,
          2.28893948,  4.95927334, -1.78601420,  6.10188055]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702],
         [ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.94309855, -0.95982647]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 510] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 510] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 178] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.50108504,  1.35111094,  0.54155302,  1.42684937,  0.50430441,
          1.14256859,  3.30734301,  2.23950052,  2.31573248]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.63it/s]100%|██████████| 1/1 [00:00<00:00,  8.62it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.63890123,  -6.32812786,  -8.66560364,  -7.82581139,  -8.96019840,
           -7.87306643,  -8.56936741, -11.11590290,  -9.56170082,  -9.26755810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31077337]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1186 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.9192533493042
alpha/beta optimization time: 1.248640775680542
initial alpha-crown bounds: tensor([[-0.44016147,  1.42102575,  0.61154699,  1.51243114,  0.57646036,
          1.21278548,  3.40189695,  2.28027129,  2.34299731]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.44016146659851074
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5640263557434
Verifying property 0 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44016147]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
         -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44016147]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 510
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 703
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010943412780761719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4401594400405884
10 lb beta sum: 0.0, worst -0.44016265869140625
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0569    transfer 0.0001    finalize 0.0001    func 0.0574    
Accumulated time: func 0.0574    prepare 0.0002    bound 0.0569    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 35] 
split level 7: [/input-12, 82] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 93] 
split level 10: [/input-8, 1428] 
split level 11: [/input-12, 11] 
split level 12: [/input-8, 781] 
split level 13: [/input-8, 893] 
split level 14: [/input-8, 1422] 
split level 15: [/input-12, 90] 
split level 16: [/input-8, 162] 
split level 17: [/input-8, 173] 
split level 18: [/input-8, 1421] 
split level 19: [/input-8, 894] 
split level 20: [/input-8, 697] 
split level 21: [/input, 1771] 
split level 22: [/input-8, 1916] 
split level 23: [/input-8, 557] 
split level 24: [/input-8, 790] 
split level 25: [/input-8, 655] 
split level 26: [/input-8, 597] 
split level 27: [/input-8, 1019] 
split level 28: [/input-8, 130] 
split level 29: [/input-8, 938] 
split level 30: [/input-8, 797] 
split level 31: [/input-8, 1010] 
split level 32: [/input-8, 793] 
split level 33: [/input-8, 565] 
split level 34: [/input-8, 672] 
split level 35: [/input-8, 1938] 
split level 36: [/input-8, 661] 
split level 37: [/input-8, 618] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 1875] 
split level 40: [/input, 2537] 
split level 41: [/input-8, 680] 
split level 42: [/input-8, 1868] 
split level 43: [/input, 995] 
split level 44: [/input-8, 1431] 
split level 45: [/input, 2131] 
split level 46: [/input-8, 1090] 
split level 47: [/input, 1772] 
split level 48: [/input-8, 129] 
split level 49: [/input, 1457] 
split level 50: [/input, 1640] 
split level 51: [/input-8, 1619] 
split level 52: [/input, 3523] 
split level 53: [/input-8, 68] 
split level 54: [/input-8, 936] 
split level 55: [/input, 3505] 
split level 56: [/input-8, 503] 
split level 57: [/input-8, 1135] 
split level 58: [/input, 1708] 
split level 59: [/input, 2541] 
split level 60: [/input, 404] 
split level 61: [/input, 2520] 
split level 62: [/input-8, 1576] 
split level 63: [/input-8, 591] 
split level 64: [/input, 2456] 
split level 65: [/input, 3254] 
split level 66: [/input, 2540] 
split level 67: [/input-8, 985] 
split level 68: [/input, 3255] 
split level 69: [/input, 916] 
split level 70: [/input, 3990] 
split level 71: [/input, 822] 
split level 72: [/input, 2750] 
split level 73: [/input-8, 944] 
split level 74: [/input, 3397] 
split level 75: [/input, 2510] 
split level 76: [/input, 1474] 
split level 77: [/input, 2726] 
split level 78: [/input-8, 1011] 
split level 79: [/input, 2150] 
split level 80: [/input, 2252] 
split level 81: [/input, 2766] 
split level 82: [/input, 1369] 
split level 83: [/input, 3489] 
split level 84: [/input, 1502] 
split level 85: [/input, 2536] 
split level 86: [/input, 238] 
split level 87: [/input-8, 1423] 
split level 88: [/input, 2747] 
split level 89: [/input, 3995] 
split level 90: [/input, 2524] 
split level 91: [/input, 2542] 
split level 92: [/input, 3550] 
split level 93: [/input, 2745] 
split level 94: [/input, 966] 
split level 95: [/input-8, 1631] 
split level 96: [/input, 2772] 
split level 97: [/input, 3504] 
split level 98: [/input, 2525] 
split level 99: [/input-8, 1478] 
split level 100: [/input, 1013] 
split level 101: [/input, 4051] 
split level 102: [/input, 3267] 
split level 103: [/input, 4025] 
split level 104: [/input, 227] 
split level 105: [/input, 242] 
split level 106: [/input-8, 1279] 
split level 107: [/input, 180] 
split level 108: [/input, 957] 
split level 109: [/input, 2538] 
split level 110: [/input, 830] 
split level 111: [/input, 3393] 
split level 112: [/input-8, 1623] 
split level 113: [/input, 2279] 
split level 114: [/input, 241] 
split level 115: [/input-8, 1474] 
split level 116: [/input, 197] 
split level 117: [/input-8, 1597] 
split level 118: [/input, 1575] 
split level 119: [/input-8, 835] 
split level 120: [/input, 3564] 
split level 121: [/input-8, 1446] 
split level 122: [/input, 2526] 
split level 123: [/input, 986] 
split level 124: [/input, 806] 
split level 125: [/input, 3249] 
split level 126: [/input, 4052] 
split level 127: [/input, 580] 
split level 128: [/input-8, 871] 
split level 129: [/input, 2509] 
split level 130: [/input, 3418] 
split level 131: [/input, 4059] 
split level 132: [/input, 170] 
split level 133: [/input, 228] 
split level 134: [/input-8, 510] 
split level 135: [/input, 1019] 
split level 136: [/input, 3553] 
split level 137: [/input, 3473] 
split level 138: [/input, 970] 
split level 139: [/input, 3434] 
split level 140: [/input, 499] 
split level 141: [/input, 3304] 
split level 142: [/input, 979] 
split level 143: [/input, 1401] 
split level 144: [/input, 933] 
split level 145: [/input, 229] 
split level 146: [/input, 950] 
split level 147: [/input, 4066] 
split level 148: [/input-8, 905] 
split level 149: [/input, 1516] 
split level 150: [/input, 3251] 
split level 151: [/input, 3306] 
split level 152: [/input-8, 934] 
split level 153: [/input, 1343] 
split level 154: [/input-8, 296] 
split level 155: [/input, 3265] 
split level 156: [/input, 1425] 
split level 157: [/input-8, 1947] 
split level 158: [/input, 2678] 
split level 159: [/input, 3270] 
split level 160: [/input, 4040] 
split level 161: [/input-8, 1617] 
split level 162: [/input, 1399] 
split level 163: [/input, 3268] 
split level 164: [/input, 2126] 
split level 165: [/input, 1014] 
split level 166: [/input, 1490] 
split level 167: [/input, 972] 
split level 168: [/input, 1137] 
split level 169: [/input-8, 973] 
split level 170: [/input, 815] 
split level 171: [/input-8, 1594] 
split level 172: [/input, 1501] 
split level 173: [/input, 2255] 
split level 174: [/input-8, 990] 
split level 175: [/input, 1154] 
split level 176: [/input-8, 511] 
split level 177: [/input, 2481] 
split level 178: [/input, 1008] 
split level 179: [/input, 4074] 
split level 180: [/input, 3172] 
split level 181: [/input-8, 1596] 
split level 182: [/input, 4065] 
split level 183: [/input, 2111] 
split level 184: [/input, 1770] 
split level 185: [/input, 3554] 
split level 186: [/input, 3281] 
split level 187: [/input, 2556] 
split level 188: [/input, 3305] 
split level 189: [/input-8, 1432] 
split level 190: [/input, 3520] 
split level 191: [/input, 1837] 
split level 192: [/input, 145] 
split level 193: [/input, 1500] 
split level 194: [/input-8, 1584] 
split level 195: [/input, 3974] 
split level 196: [/input, 3494] 
split level 197: [/input, 1051] 
split level 198: [/input, 2204] 
split level 199: [/input, 1788] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4400663375854492
10 lb beta sum: 0.0, worst -0.4400719404220581
Time: prepare 0.0130    bound 0.1047    transfer 0.0020    finalize 0.0031    func 0.1255    
Accumulated time: func 0.1829    prepare 0.0235    bound 0.1617    transfer 0.0021    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.35099983) min lb tensor(-0.44006431)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01161503791809082 
BICCOS Cumulative time: 0.01161503791809082
Preprocessing time: 0.010591983795166016 Inference time: 0.0001881122589111328 Add cuts time: 9.632110595703125e-05 Cut analysis time: 0.0007386207580566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.42516 (1), -0.42421 (1), -0.42385 (1), -0.42276 (1), -0.42272 (1), -0.42075 (1), -0.42059 (1), -0.42047 (1), -0.42042 (1), -0.42035 (1), -0.41967 (1), -0.41944 (1), -0.41852 (1), -0.41801 (1), -0.41657 (1), -0.41579 (1), -0.41557 (1), -0.41538 (1), -0.41485 (1), -0.41405 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5230    set_bounds 0.0089    solve 0.1256    add 0.0746    
Accumulated time: pickout 0.0004    decision 0.5230    set_bounds 0.0089    solve 0.1256    add 0.0746    
Current (lb-rhs): -0.4251563549041748
50 domains visited
Cumulative time: 0.8247189521789551

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 3: [/input-12, 82] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3753242492675781
10 lb beta sum: 0.6084466576576233, worst -0.3628412187099457
Time: prepare 0.0079    bound 0.1265    transfer 0.0026    finalize 0.0026    func 0.1425    
Accumulated time: func 0.3253    prepare 0.0316    bound 0.2882    transfer 0.0047    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.36318684) min lb tensor(-0.36278403)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.018277883529663086 
BICCOS Cumulative time: 0.029892921447753906
Preprocessing time: 0.012466669082641602 Inference time: 0.0030586719512939453 Add cuts time: 0.0022361278533935547 Cut analysis time: 0.0005164146423339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14134 (2), -0.14122 (2), -0.14116 (2), -0.14066 (2), -0.14013 (2), -0.14010 (2), -0.13622 (2), -0.13579 (2), -0.13515 (2), -0.13378 (2), -0.12988 (2), -0.12915 (2), -0.12676 (2), -0.12663 (2), -0.12167 (2), -0.12055 (2), -0.11939 (2), -0.11931 (2), -0.11856 (2), -0.11746 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0209    set_bounds 0.0138    solve 0.1426    add 0.0880    
Accumulated time: pickout 0.0015    decision 0.5439    set_bounds 0.0227    solve 0.2682    add 0.1626    
Current (lb-rhs): -0.1413385272026062
100 domains visited
Cumulative time: 1.1096646785736084

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 28] [/input-12, 28] [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 29] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 35] [/input-12, 29] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1334676742553711
10 lb beta sum: 1.1941906213760376, worst -0.04293668270111084
Time: prepare 0.0069    bound 0.1263    transfer 0.0007    finalize 0.0030    func 0.1397    
Accumulated time: func 0.4650    prepare 0.0388    bound 0.4145    transfer 0.0054    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.56123352) min lb tensor(-0.00377774)
Number of Verified Splits: 399 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.0378720760345459 
BICCOS Cumulative time: 0.0677649974822998
Preprocessing time: 0.01207113265991211 Inference time: 0.017746925354003906 Add cuts time: 0.007643222808837891 Cut analysis time: 0.0004107952117919922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0203    set_bounds 0.0164    solve 0.1399    add 0.0193    
Accumulated time: pickout 0.0026    decision 0.5642    set_bounds 0.0391    solve 0.4080    add 0.1818    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.09080397e-09, 7.73125738e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15, 28]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.09080397e-09, 2.51376331e-01, 1.56402096e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15, 28]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.09080397e-09, 2.51376331e-01, 2.63932407e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.76918702e-10, 1.21965870e-01, 1.84668288e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.76918702e-10, 1.21965870e-01, 2.85549760e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.76918702e-10, 1.40128359e-01, 2.02271387e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.76918702e-10, 1.40128359e-01, 2.94423938e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32907867431640625
10 lb beta sum: 1.0122581720352173, worst -0.14498615264892578
Time: prepare 0.0005    bound 0.1293    transfer 0.0002    finalize 0.0002    func 0.1302    
Accumulated time: func 0.5952    prepare 0.0392    bound 0.5438    transfer 0.0056    finalize 0.0091    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 35] 
split level 5: [/input-12, 82] 
split level 6: [/input-12, 93] 
split level 7: [/input-8, 173] 
cut re-enabled after branching node selection
0 lb beta sum: 2.389011859893799, worst 0.03229570388793945

all verified at 0th iter
Time: prepare 0.0112    bound 0.0049    transfer 0.0011    finalize 0.0014    func 0.0203    
Accumulated time: func 0.6156    prepare 0.0509    bound 0.5487    transfer 0.0067    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(1.61311257) min lb tensor(0.03229570)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.0073397159576416016 
BICCOS Cumulative time: 0.0751047134399414
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0236    set_bounds 0.0263    solve 0.0205    add 0.0003    
Accumulated time: pickout 0.0031    decision 0.5878    set_bounds 0.0654    solve 0.4285    add 0.1822    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.5719964504241943


Properties batch 1, size 1
Remaining timeout: 196.7524824142456
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 196.7523729801178
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 196.75235056877136
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.751868724823
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.75184798240662
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.75182938575745
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.7518105506897
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.75179243087769
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.2483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [457]; unstable size 457; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 457] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 457] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 457] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 223] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06982172,  3.56651163, -3.10427308, -0.30050850, -2.24185705,
         -1.43835688, -0.57025647,  3.45370245,  3.13693857]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324],
         [ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80375719, -1.62119722,  0.88118649, -1.00018740,  0.02599335,
           1.08458376]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0847 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 348, 1, 815] with unstable size 347 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 815] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [347]; unstable size 347; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 347] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 347] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99483001,  5.88476849,  0.52514827, -0.25146756,  1.10866022,
          0.87214231,  1.88426137,  2.11473441,  4.06170082]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.91634750, -12.22560024,  -4.62670612,  -5.97058296,  -4.77927256,
           -6.74498940,  -6.27670527,  -7.29330587,  -8.81531429, -10.70232105]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15256643]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1209 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.199153900146484
alpha/beta optimization time: 1.2428603172302246
initial alpha-crown bounds: tensor([[ 1.10888255,  6.06384706,  0.59163451, -0.20346993,  1.20185637,
          0.91255486,  1.97026205,  2.29743648,  4.25615025]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20346993207931519
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56331276893616
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56327295303345
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.56324672698975
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5632245540619
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20346993]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
         -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20346993]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 815
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 334
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 1167
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011324882507324219
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20346960425376892
10 lb beta sum: 0.0, worst -0.20347517728805542
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0001    func 0.0553    
Accumulated time: func 0.0553    prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 32] 
split level 3: [/input-12, 33] 
split level 4: [/input-8, 289] 
split level 5: [/input-8, 457] 
split level 6: [/input-12, 60] 
split level 7: [/input-8, 290] 
split level 8: [/input-8, 843] 
split level 9: [/input-8, 1412] 
split level 10: [/input-8, 1003] 
split level 11: [/input, 2628] 
split level 12: [/input, 2629] 
split level 13: [/input-8, 116] 
split level 14: [/input-8, 421] 
split level 15: [/input-8, 866] 
split level 16: [/input-8, 1420] 
split level 17: [/input-8, 1749] 
split level 18: [/input-8, 1748] 
split level 19: [/input-8, 618] 
split level 20: [/input-8, 1756] 
split level 21: [/input, 476] 
split level 22: [/input-8, 1322] 
split level 23: [/input, 2630] 
split level 24: [/input-8, 2008] 
split level 25: [/input-8, 617] 
split level 26: [/input-8, 1490] 
split level 27: [/input-8, 310] 
split level 28: [/input-8, 619] 
split level 29: [/input-8, 1859] 
split level 30: [/input-8, 858] 
split level 31: [/input-8, 1443] 
split level 32: [/input, 2105] 
split level 33: [/input-8, 429] 
split level 34: [/input-8, 1747] 
split level 35: [/input, 3947] 
split level 36: [/input, 460] 
split level 37: [/input, 329] 
split level 38: [/input-8, 117] 
split level 39: [/input-8, 1004] 
split level 40: [/input, 475] 
split level 41: [/input-8, 1459] 
split level 42: [/input, 620] 
split level 43: [/input-8, 1966] 
split level 44: [/input, 330] 
split level 45: [/input-8, 489] 
split level 46: [/input-8, 2036] 
split level 47: [/input-8, 995] 
split level 48: [/input-8, 1482] 
split level 49: [/input-8, 932] 
split level 50: [/input, 2965] 
split level 51: [/input-8, 477] 
split level 52: [/input, 2326] 
split level 53: [/input-8, 456] 
split level 54: [/input-8, 473] 
split level 55: [/input-8, 928] 
split level 56: [/input, 3148] 
split level 57: [/input-8, 874] 
split level 58: [/input-8, 1331] 
split level 59: [/input, 2122] 
split level 60: [/input-8, 1460] 
split level 61: [/input, 3494] 
split level 62: [/input-8, 978] 
split level 63: [/input-8, 291] 
split level 64: [/input, 2642] 
split level 65: [/input, 3692] 
split level 66: [/input, 1097] 
split level 67: [/input, 236] 
split level 68: [/input, 458] 
split level 69: [/input-8, 1757] 
split level 70: [/input-8, 963] 
split level 71: [/input, 1302] 
split level 72: [/input-8, 1011] 
split level 73: [/input, 2137] 
split level 74: [/input-8, 481] 
split level 75: [/input-8, 414] 
split level 76: [/input, 1557] 
split level 77: [/input-8, 929] 
split level 78: [/input-8, 413] 
split level 79: [/input, 2981] 
split level 80: [/input, 1590] 
split level 81: [/input, 2359] 
split level 82: [/input, 426] 
split level 83: [/input, 3163] 
split level 84: [/input, 102] 
split level 85: [/input, 1370] 
split level 86: [/input, 3130] 
split level 87: [/input-8, 1427] 
split level 88: [/input-8, 264] 
split level 89: [/input, 3178] 
split level 90: [/input, 361] 
split level 91: [/input, 313] 
split level 92: [/input, 3515] 
split level 93: [/input, 2949] 
split level 94: [/input-8, 994] 
split level 95: [/input, 2155] 
split level 96: [/input-8, 2037] 
split level 97: [/input, 408] 
split level 98: [/input, 2087] 
split level 99: [/input-8, 1491] 
split level 100: [/input, 2236] 
split level 101: [/input-8, 1570] 
split level 102: [/input-8, 2033] 
split level 103: [/input-8, 940] 
split level 104: [/input, 132] 
split level 105: [/input, 252] 
split level 106: [/input, 2232] 
split level 107: [/input, 3195] 
split level 108: [/input, 1556] 
split level 109: [/input-8, 1323] 
split level 110: [/input-8, 2000] 
split level 111: [/input, 1368] 
split level 112: [/input, 3946] 
split level 113: [/input, 3096] 
split level 114: [/input-8, 474] 
split level 115: [/input-8, 948] 
split level 116: [/input-8, 620] 
split level 117: [/input-8, 2001] 
split level 118: [/input, 2392] 
split level 119: [/input-8, 586] 
split level 120: [/input, 2235] 
split level 121: [/input-8, 1483] 
split level 122: [/input, 3400] 
split level 123: [/input-8, 1489] 
split level 124: [/input-8, 859] 
split level 125: [/input, 2343] 
split level 126: [/input, 2342] 
split level 127: [/input-8, 1950] 
split level 128: [/input, 3180] 
split level 129: [/input, 3912] 
split level 130: [/input-8, 1765] 
split level 131: [/input-8, 1568] 
split level 132: [/input, 2357] 
split level 133: [/input, 134] 
split level 134: [/input-8, 1554] 
split level 135: [/input, 3177] 
split level 136: [/input, 2325] 
split level 137: [/input, 2071] 
split level 138: [/input-8, 1576] 
split level 139: [/input, 3131] 
split level 140: [/input-8, 1426] 
split level 141: [/input, 2154] 
split level 142: [/input, 3690] 
split level 143: [/input-8, 1986] 
split level 144: [/input, 3923] 
split level 145: [/input-8, 397] 
split level 146: [/input, 2361] 
split level 147: [/input, 1317] 
split level 148: [/input-8, 979] 
split level 149: [/input, 2268] 
split level 150: [/input, 2950] 
split level 151: [/input-8, 1006] 
split level 152: [/input, 2373] 
split level 153: [/input, 3655] 
split level 154: [/input-8, 126] 
split level 155: [/input, 2425] 
split level 156: [/input, 1446] 
split level 157: [/input, 3192] 
split level 158: [/input, 2067] 
split level 159: [/input-8, 450] 
split level 160: [/input-8, 1553] 
split level 161: [/input, 3658] 
split level 162: [/input-8, 1552] 
split level 163: [/input, 2262] 
split level 164: [/input, 2072] 
split level 165: [/input, 4009] 
split level 166: [/input, 2422] 
split level 167: [/input, 3095] 
split level 168: [/input, 2360] 
split level 169: [/input, 3113] 
split level 170: [/input, 3724] 
split level 171: [/input, 3708] 
split level 172: [/input, 2948] 
split level 173: [/input, 2982] 
split level 174: [/input-8, 495] 
split level 175: [/input, 2421] 
split level 176: [/input, 3189] 
split level 177: [/input, 3492] 
split level 178: [/input, 2243] 
split level 179: [/input-8, 867] 
split level 180: [/input, 2227] 
split level 181: [/input, 114] 
split level 182: [/input, 3660] 
split level 183: [/input, 2563] 
split level 184: [/input, 220] 
split level 185: [/input, 1338] 
split level 186: [/input, 2967] 
split level 187: [/input, 1572] 
split level 188: [/input, 116] 
split level 189: [/input, 2054] 
split level 190: [/input, 2375] 
split level 191: [/input, 360] 
split level 192: [/input, 3212] 
split level 193: [/input, 3350] 
split level 194: [/input-8, 1001] 
split level 195: [/input, 117] 
split level 196: [/input, 3642] 
split level 197: [/input, 1484] 
split level 198: [/input, 2884] 
split level 199: [/input, 2997] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2034699022769928
10 lb beta sum: 0.0, worst -0.20347541570663452
Time: prepare 0.0119    bound 0.1058    transfer 0.0015    finalize 0.0034    func 0.1253    
Accumulated time: func 0.1806    prepare 0.0222    bound 0.1606    transfer 0.0016    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.04398435) min lb tensor(-0.20346960)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010815143585205078 
BICCOS Cumulative time: 0.010815143585205078
Preprocessing time: 0.010318994522094727 Inference time: 0.0001366138458251953 Add cuts time: 8.416175842285156e-05 Cut analysis time: 0.0002753734588623047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19579 (1), -0.19577 (1), -0.19563 (1), -0.19537 (1), -0.19524 (1), -0.19521 (1), -0.19499 (1), -0.19495 (1), -0.19479 (1), -0.19442 (1), -0.19434 (1), -0.19433 (1), -0.19426 (1), -0.19424 (1), -0.19423 (1), -0.19393 (1), -0.19365 (1), -0.19335 (1), -0.19321 (1), -0.19306 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5180    set_bounds 0.0091    solve 0.1254    add 0.0712    
Accumulated time: pickout 0.0004    decision 0.5180    set_bounds 0.0091    solve 0.1254    add 0.0712    
Current (lb-rhs): -0.195794939994812
50 domains visited
Cumulative time: 0.7992722988128662

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 46] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-8, 429] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1901347041130066
10 lb beta sum: 0.40796828269958496, worst -0.16285014152526855
Time: prepare 0.0078    bound 0.1256    transfer 0.0008    finalize 0.0028    func 0.1398    
Accumulated time: func 0.3204    prepare 0.0303    bound 0.2862    transfer 0.0024    finalize 0.0064    
all_split False
======================Cut inference begins======================
max lb tensor(0.22742006) min lb tensor(-0.16281144)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01884627342224121 
BICCOS Cumulative time: 0.02966141700744629
Preprocessing time: 0.012680768966674805 Inference time: 0.0038747787475585938 Add cuts time: 0.0019750595092773438 Cut analysis time: 0.00031566619873046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04542 (2), -0.04450 (2), -0.04439 (2), -0.04424 (2), -0.04379 (2), -0.04361 (2), -0.04301 (2), -0.04264 (2), -0.04241 (2), -0.04182 (2), -0.04168 (2), -0.04151 (2), -0.04139 (2), -0.04121 (2), -0.04113 (2), -0.04091 (2), -0.04069 (2), -0.04058 (2), -0.04027 (2), -0.03996 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0196    set_bounds 0.0117    solve 0.1400    add 0.0883    
Accumulated time: pickout 0.0016    decision 0.5376    set_bounds 0.0208    solve 0.2653    add 0.1595    
Current (lb-rhs): -0.04542200267314911
100 domains visited
Cumulative time: 1.0791878700256348

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input, 2072] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07779097557067871
10 lb beta sum: 0.5109068751335144, worst -0.04789508879184723
Time: prepare 0.0083    bound 0.1241    transfer 0.0014    finalize 0.0029    func 0.1403    
Accumulated time: func 0.4607    prepare 0.0389    bound 0.4103    transfer 0.0038    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.17879447) min lb tensor(-0.04343250)
Number of Verified Splits: 108 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 6
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.019235849380493164 
BICCOS Cumulative time: 0.04889726638793945
Preprocessing time: 0.012114524841308594 Inference time: 0.004155874252319336 Add cuts time: 0.0024864673614501953 Cut analysis time: 0.00047898292541503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01233 (3), -0.01228 (3), -0.01217 (3), -0.01176 (3), -0.01173 (3), -0.01172 (3), -0.01160 (3), -0.01152 (3), -0.01137 (3), -0.01133 (3), -0.01128 (3), -0.01122 (3), -0.01106 (3), -0.01089 (3), -0.01088 (3), -0.01078 (3), -0.01067 (3), -0.01060 (3), -0.01049 (3), -0.01025 (3), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0196    set_bounds 0.0154    solve 0.1404    add 0.0917    
Accumulated time: pickout 0.0028    decision 0.5571    set_bounds 0.0362    solve 0.4057    add 0.2511    
Current (lb-rhs): -0.012331187725067139
150 domains visited
Cumulative time: 1.3670122623443604

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-8, 290] [/input-8, 289] [/input-8, 289] [/input-8, 290] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input, 2072] [/input-8, 290] [/input-8, 290] [/input, 2630] [/input-8, 290] [/input, 2071] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05123370885848999
10 lb beta sum: 0.5603724122047424, worst -0.10459122061729431
Time: prepare 0.0085    bound 0.1427    transfer 0.0008    finalize 0.0030    func 0.1577    
Accumulated time: func 0.6184    prepare 0.0477    bound 0.5530    transfer 0.0046    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.20295969) min lb tensor(-0.00795153)
Number of Verified Splits: 316 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 11
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.036942481994628906 
BICCOS Cumulative time: 0.08583974838256836
Preprocessing time: 0.012266874313354492 Inference time: 0.013688325881958008 Add cuts time: 0.009597301483154297 Cut analysis time: 0.0013899803161621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00795 (4), -0.00793 (4), -0.00736 (4), -0.00732 (4), -0.00727 (4), -0.00722 (4), -0.00478 (4), -0.00461 (4), -0.00450 (4), -0.00258 (4), -0.00124 (4), -0.00124 (4), 
Length of domains: 12
Time: pickout 0.0012    decision 0.0200    set_bounds 0.0163    solve 0.1579    add 0.3092    
Accumulated time: pickout 0.0040    decision 0.5772    set_bounds 0.0525    solve 0.5636    add 0.5604    
Current (lb-rhs): -0.007951527833938599
162 domains visited
Cumulative time: 1.9088571071624756

Shallow-BaB round 5
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 32] [/input-12, 41] [/input-12, 32] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 2: [/input-8, 457] [/input-8, 289] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input-8, 289] [/input-8, 457] [/input-8, 289] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 843] 
split level 4: [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 290] 
split level 5: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
split level 6: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] 
split level 7: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
split level 8: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 117] 
split level 9: [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 1748] 
split level 10: [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1331] [/input-8, 1490] [/input-8, 1490] 
split level 11: [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] 
split level 12: [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 1859] 
split level 13: [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 1323] [/input-8, 995] [/input-8, 874] 
split level 14: [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input, 2087] [/input-8, 874] [/input-8, 995] 
split level 15: [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input, 3400] [/input-8, 1323] [/input-8, 1323] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04878664016723633
10 lb beta sum: 0.5864256620407104, worst -0.12579526007175446
Time: prepare 0.0082    bound 0.1568    transfer 0.0013    finalize 0.0039    func 0.1729    
Accumulated time: func 0.7913    prepare 0.0567    bound 0.7099    transfer 0.0059    finalize 0.0161    
all_split False
======================Cut inference begins======================
max lb tensor(0.19631287) min lb tensor(0.00010225)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 11
#cuts 4-6: 46
#cuts >= 20: 0
BICCOS time: 0.04563188552856445 
BICCOS Cumulative time: 0.1314716339111328
Preprocessing time: 0.011596441268920898 Inference time: 0.018031597137451172 Add cuts time: 0.014162540435791016 Cut analysis time: 0.0018413066864013672
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0514    set_bounds 0.0149    solve 0.1730    add 0.0331    
Accumulated time: pickout 0.0049    decision 0.6286    set_bounds 0.0674    solve 0.7366    add 0.5935    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
162 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1420]), tensor([-1.]), tensor([0]), tensor([7.82733239e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [7.827332388771303e+31], [0]), '/input-12': (tensor([46, 33, 41, 32]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.60058364e-11, 2.20847595e-02, 4.44509229e-03, 2.44933832e-02]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [7.827332388771303e+31], [0]), '/input-12': (tensor([46, 33, 41, 32]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.60058364e-11, 2.20847595e-02, 4.44509229e-03, 8.56782682e-03]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [7.827332388771303e+31], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.60058364e-11, 2.20847595e-02, 1.54619142e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [7.827332388771303e+31], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.60058364e-11, 3.19294482e-02, 7.52024492e-03]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [7.827332388771303e+31], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.60058364e-11, 3.19294482e-02, 1.56621411e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [7.827332388771303e+31], [0]), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([0.06958796]), tensor([1]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20227068662643433
10 lb beta sum: 0.37241193652153015, worst -0.1611359715461731
Time: prepare 0.0005    bound 0.1496    transfer 0.0002    finalize 0.0002    func 0.1506    
Accumulated time: func 0.9419    prepare 0.0572    bound 0.8595    transfer 0.0061    finalize 0.0163    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 32] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-8, 457] [/input-12, 32] 
split level 2: [/input-12, 32] [/input-8, 289] [/input-12, 33] 
split level 3: [/input-12, 33] [/input-8, 290] [/input-8, 289] 
split level 4: [/input-8, 289] [/input-8, 116] [/input-8, 290] 
split level 5: [/input-8, 290] [/input-8, 1749] [/input-8, 1748] 
split level 6: [/input-8, 1748] [/input-8, 1748] [/input-8, 429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7602428197860718, worst -0.0999726951122284
10 lb beta sum: 0.762776255607605, worst -0.14715704321861267
Time: prepare 0.0165    bound 0.1540    transfer 0.0008    finalize 0.0025    func 0.1764    
Accumulated time: func 1.1184    prepare 0.0742    bound 1.0134    transfer 0.0069    finalize 0.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.47318995) min lb tensor(-0.09931520)
Number of Verified Splits: 332 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7534725069999695, worst -0.15048393607139587
10 lb beta sum: 0.8468719720840454, worst -0.15027180314064026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 11
#cuts 4-6: 47
#cuts >= 20: 0
BICCOS time: 0.3813338279724121 
BICCOS Cumulative time: 0.5128054618835449
Preprocessing time: 0.010864973068237305 Inference time: 0.3530397415161133 Add cuts time: 0.01557469367980957 Cut analysis time: 0.0018544197082519531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09932 (7), -0.09594 (7), -0.09544 (7), -0.09433 (7), -0.09310 (7), -0.09095 (7), -0.09040 (7), -0.08816 (7), -0.08244 (7), -0.08218 (7), -0.08161 (7), -0.08068 (7), -0.07908 (7), -0.07882 (7), -0.07863 (7), -0.07843 (7), -0.07834 (7), -0.07771 (7), -0.07715 (7), -0.07660 (7), 
Length of domains: 52
Time: pickout 0.0006    decision 0.0205    set_bounds 0.0438    solve 0.1766    add 0.0201    
Accumulated time: pickout 0.0055    decision 0.6491    set_bounds 0.1112    solve 0.9132    add 0.6136    
Current (lb-rhs): -0.09931519627571106
214 domains visited
Cumulative time: 3.042250871658325

BaB round 2
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 1: [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 1749] [/input-8, 421] [/input-8, 421] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0962696373462677
10 lb beta sum: 0.19171741604804993, worst -0.13815809786319733
Time: prepare 0.0044    bound 0.1518    transfer 0.0016    finalize 0.0015    func 0.1606    
Accumulated time: func 1.2790    prepare 0.0788    bound 1.1652    transfer 0.0085    finalize 0.0203    
all_split False
======================Cut inference begins======================
max lb tensor(0.01299256) min lb tensor(-0.09477447)
Number of Verified Splits: 13 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010561227798461914 
BICCOS Cumulative time: 0.5233666896820068
Preprocessing time: 0.0071315765380859375 Inference time: 0.0016319751739501953 Add cuts time: 0.0014290809631347656 Cut analysis time: 0.0003685951232910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09477 (9), -0.09134 (9), -0.09061 (9), -0.09034 (9), -0.08980 (9), -0.08801 (9), -0.08717 (9), -0.08637 (9), -0.08581 (9), -0.08559 (9), -0.08533 (9), -0.08357 (9), -0.08301 (9), -0.08216 (9), -0.08080 (9), -0.07855 (9), -0.07776 (9), -0.07747 (9), -0.07684 (9), -0.07633 (9), 
Length of domains: 195
Time: pickout 0.0024    decision 0.0141    set_bounds 0.0101    solve 0.1607    add 0.0031    
Accumulated time: pickout 0.0079    decision 0.6632    set_bounds 0.1213    solve 1.0739    add 0.6167    
Current (lb-rhs): -0.09477446973323822
409 domains visited
Cumulative time: 3.24367618560791

BaB round 3
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.094149649143219
10 lb beta sum: 0.1993313431739807, worst -0.09274336695671082
Time: prepare 0.0078    bound 0.1239    transfer 0.0009    finalize 0.0021    func 0.1373    
Accumulated time: func 1.4164    prepare 0.0868    bound 1.2891    transfer 0.0093    finalize 0.0225    
all_split False
======================Cut inference begins======================
max lb tensor(0.04909834) min lb tensor(-0.09268980)
Number of Verified Splits: 6 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01354074478149414 
BICCOS Cumulative time: 0.536907434463501
Preprocessing time: 0.011991739273071289 Inference time: 0.0006010532379150391 Add cuts time: 0.00015091896057128906 Cut analysis time: 0.0007970333099365234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09269 (10), -0.08888 (10), -0.08846 (10), -0.08771 (10), -0.08592 (10), -0.08501 (10), -0.08464 (10), -0.08389 (10), -0.08364 (10), -0.08342 (10), -0.08268 (10), -0.08151 (10), -0.08101 (10), -0.08097 (10), -0.08056 (10), -0.08025 (10), -0.07999 (10), -0.07966 (10), -0.07933 (10), -0.07861 (10), 
Length of domains: 384
Time: pickout 0.0029    decision 0.0202    set_bounds 0.0180    solve 0.1375    add 0.0034    
Accumulated time: pickout 0.0108    decision 0.6834    set_bounds 0.1393    solve 1.2114    add 0.6200    
Current (lb-rhs): -0.09268979728221893
793 domains visited
Cumulative time: 3.4397776126861572

BaB round 4
batch: 384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1003] [/input-8, 1003] [/input-8, 1859] [/input-8, 1003] [/input-8, 429] [/input-8, 1859] [/input-8, 1003] [/input-8, 1003] [/input-8, 1859] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23526118695735931, worst -0.09055136144161224
10 lb beta sum: 0.23526118695735931, worst -0.0904785543680191
Time: prepare 0.0364    bound 0.1339    transfer 0.0028    finalize 0.0042    func 0.1825    
Accumulated time: func 1.5988    prepare 0.1234    bound 1.4230    transfer 0.0121    finalize 0.0267    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00824189) min lb tensor(-0.09045084)
Number of Verified Splits: 0 of 768
No cut inferred: All or none verified.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.02267599105834961 
BICCOS Cumulative time: 0.5595834255218506
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09045 (11), -0.08662 (11), -0.08616 (11), -0.08557 (11), -0.08377 (11), -0.08301 (11), -0.08233 (11), -0.08176 (11), -0.08126 (11), -0.08110 (11), -0.08100 (11), -0.08025 (11), -0.07935 (11), -0.07898 (11), -0.07823 (11), -0.07818 (11), -0.07807 (11), -0.07802 (11), -0.07749 (11), -0.07733 (11), 
Length of domains: 768
Time: pickout 0.0052    decision 0.0328    set_bounds 0.0333    solve 0.1827    add 0.0068    
Accumulated time: pickout 0.0160    decision 0.7161    set_bounds 0.1725    solve 1.3942    add 0.6268    
Current (lb-rhs): -0.09045083820819855
1561 domains visited
Cumulative time: 3.725327968597412

BaB round 5
batch: 768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1859] [/input-8, 1859] [/input, 620] [/input-8, 1859] [/input-8, 1003] [/input, 620] [/input-8, 1859] [/input-8, 1859] [/input, 620] [/input-8, 1859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23526118695735931, worst -0.08636750280857086
10 lb beta sum: 0.23526118695735931, worst -0.08628116548061371
Time: prepare 0.0684    bound 0.1459    transfer 0.0034    finalize 0.0079    func 0.2367    
Accumulated time: func 1.8356    prepare 0.1921    bound 1.5689    transfer 0.0156    finalize 0.0346    
all_split False
======================Cut inference begins======================
max lb tensor(0.01146401) min lb tensor(-0.08624049)
Number of Verified Splits: 15 of 1536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.0506892204284668 
BICCOS Cumulative time: 0.6102726459503174
Preprocessing time: 0.04758000373840332 Inference time: 0.0019123554229736328 Add cuts time: 0.0006616115570068359 Cut analysis time: 0.0005352497100830078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08624 (12), -0.08584 (12), -0.08379 (12), -0.08213 (12), -0.08185 (12), -0.08184 (12), -0.08134 (12), -0.08125 (12), -0.08093 (12), -0.08090 (12), -0.07926 (12), -0.07894 (12), -0.07841 (12), -0.07831 (12), -0.07740 (12), -0.07740 (12), -0.07719 (12), -0.07699 (12), -0.07678 (12), -0.07656 (12), 
Length of domains: 1521
Time: pickout 0.0154    decision 0.0556    set_bounds 0.0643    solve 0.2372    add 0.0119    
Accumulated time: pickout 0.0315    decision 0.7717    set_bounds 0.2369    solve 1.6313    add 0.6387    
Current (lb-rhs): -0.0862404853105545
3082 domains visited
Cumulative time: 4.162134170532227

BaB round 6
batch: 1521
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1490] [/input-8, 1490] [/input, 330] [/input-8, 1490] [/input-8, 843] [/input, 330] [/input-8, 1490] [/input-8, 1490] [/input, 330] [/input-8, 1490] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08567142486572266
10 lb beta sum: 0.1953977346420288, worst -0.08433219790458679
Time: prepare 0.0680    bound 0.2356    transfer 0.0075    finalize 0.0189    func 0.3509    
Accumulated time: func 2.1864    prepare 0.2605    bound 1.8045    transfer 0.0231    finalize 0.0535    
all_split False
======================Cut inference begins======================
max lb tensor(0.01459894) min lb tensor(-0.08431001)
Number of Verified Splits: 174 of 3042
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 6
#cuts 7-9: 12
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.12530946731567383 
BICCOS Cumulative time: 0.7355821132659912
Preprocessing time: 0.09447860717773438 Inference time: 0.024602890014648438 Add cuts time: 0.00477147102355957 Cut analysis time: 0.0014564990997314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08431 (13), -0.08390 (13), -0.08183 (13), -0.08023 (13), -0.08001 (13), -0.07990 (13), -0.07958 (13), -0.07935 (13), -0.07934 (13), -0.07897 (13), -0.07892 (13), -0.07806 (13), -0.07774 (13), -0.07698 (13), -0.07685 (13), -0.07684 (13), -0.07633 (13), -0.07601 (13), -0.07589 (13), -0.07586 (13), 
Length of domains: 2868
Time: pickout 0.0213    decision 0.2711    set_bounds 0.1282    solve 0.3514    add 0.0291    
Accumulated time: pickout 0.0528    decision 1.0428    set_bounds 0.3651    solve 1.9828    add 0.6678    
Current (lb-rhs): -0.08431001007556915
5950 domains visited
Cumulative time: 5.093353986740112

BaB round 7
batch: 2868
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 620] [/input-8, 429] [/input-8, 843] [/input, 620] [/input-8, 1859] [/input-8, 1003] [/input, 620] [/input-8, 429] [/input-8, 843] [/input, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08283215761184692
10 lb beta sum: 0.19477730989456177, worst -0.08151261508464813
Time: prepare 0.1386    bound 0.5166    transfer 0.0144    finalize 0.0324    func 0.7410    
Accumulated time: func 2.9274    prepare 0.3994    bound 2.3211    transfer 0.0375    finalize 0.0860    
all_split False
======================Cut inference begins======================
max lb tensor(0.01461664) min lb tensor(-0.08150285)
Number of Verified Splits: 377 of 5736
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 4
#cuts 4-6: 9
#cuts 7-9: 23
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.2545747756958008 
BICCOS Cumulative time: 0.990156888961792
Preprocessing time: 0.1842494010925293 Inference time: 0.05763697624206543 Add cuts time: 0.010375022888183594 Cut analysis time: 0.002313375473022461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08150 (14), -0.08109 (14), -0.07965 (14), -0.07924 (14), -0.07763 (14), -0.07743 (14), -0.07723 (14), -0.07710 (14), -0.07676 (14), -0.07669 (14), -0.07654 (14), -0.07653 (14), -0.07612 (14), -0.07586 (14), -0.07569 (14), -0.07558 (14), -0.07531 (14), -0.07529 (14), -0.07488 (14), -0.07471 (14), 
Length of domains: 5359
Time: pickout 0.0398    decision 0.1684    set_bounds 0.3923    solve 0.7422    add 0.0402    
Accumulated time: pickout 0.0926    decision 1.2112    set_bounds 0.7574    solve 2.7250    add 0.7080    
Current (lb-rhs): -0.08150285482406616
11309 domains visited
Cumulative time: 6.740427255630493

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input, 620] [/input-8, 1003] [/input-8, 995] [/input, 620] [/input-8, 843] [/input, 330] [/input, 620] [/input-8, 1003] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08250731229782104
10 lb beta sum: 0.19461527466773987, worst -0.08119170367717743
Time: prepare 0.2080    bound 0.6991    transfer 0.0367    finalize 0.0507    func 1.0508    
Accumulated time: func 3.9782    prepare 0.6078    bound 3.0201    transfer 0.0742    finalize 0.1367    
all_split False
======================Cut inference begins======================
max lb tensor(0.00671436) min lb tensor(-0.08118238)
Number of Verified Splits: 460 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 81.
#cuts 1-3: 4
#cuts 4-6: 14
#cuts 7-9: 54
#cuts 10-12: 9
#cuts >= 20: 0
BICCOS time: 0.5846066474914551 
BICCOS Cumulative time: 1.574763536453247
Preprocessing time: 0.4808008670806885 Inference time: 0.07926368713378906 Add cuts time: 0.019580841064453125 Cut analysis time: 0.004961252212524414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08118 (15), -0.08077 (15), -0.07932 (15), -0.07891 (15), -0.07729 (15), -0.07688 (15), -0.07678 (15), -0.07637 (15), -0.07621 (15), -0.07580 (15), -0.07537 (15), -0.07531 (14), -0.07496 (15), -0.07488 (14), -0.07463 (15), -0.07456 (15), -0.07436 (15), -0.07395 (15), -0.07372 (15), -0.07371 (15), 
Length of domains: 8995
Time: pickout 0.0559    decision 0.4446    set_bounds 0.3485    solve 1.0533    add 0.0580    
Accumulated time: pickout 0.1485    decision 1.6557    set_bounds 1.1059    solve 3.7783    add 0.7660    
Current (lb-rhs): -0.08118237555027008
19041 domains visited
current_vram/total_varm: 10.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.300254106521606

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 477] [/input, 330] [/input-8, 477] [/input-8, 473] [/input-8, 116] [/input-8, 477] [/input-8, 995] [/input-8, 477] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08028826117515564
10 lb beta sum: 0.19288571178913116, worst -0.07897186279296875
Time: prepare 0.4063    bound 1.3565    transfer 0.0637    finalize 0.0991    func 2.2688    
Accumulated time: func 6.2470    prepare 1.0145    bound 4.3766    transfer 0.1380    finalize 0.2358    
all_split False
======================Cut inference begins======================
max lb tensor(0.01604892) min lb tensor(-0.07895964)
Number of Verified Splits: 1649 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 183.
#cuts 1-3: 4
#cuts 4-6: 29
#cuts 7-9: 119
#cuts 10-12: 31
#cuts >= 20: 0
BICCOS time: 0.894467830657959 
BICCOS Cumulative time: 2.469231367111206
Preprocessing time: 0.5334212779998779 Inference time: 0.2681238651275635 Add cuts time: 0.08147072792053223 Cut analysis time: 0.011451959609985352
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07896 (16), -0.07855 (16), -0.07713 (16), -0.07710 (16), -0.07672 (16), -0.07669 (16), -0.07529 (16), -0.07508 (16), -0.07500 (15), -0.07489 (16), -0.07467 (16), -0.07457 (15), -0.07387 (16), -0.07348 (16), -0.07341 (16), -0.07324 (16), -0.07314 (16), -0.07310 (16), -0.07308 (15), -0.07299 (16), 
Length of domains: 15538
Time: pickout 0.1204    decision 0.4534    set_bounds 0.9500    solve 2.2720    add 0.0978    
Accumulated time: pickout 0.2689    decision 2.1091    set_bounds 2.0558    solve 6.0503    add 0.8638    
Current (lb-rhs): -0.0789596438407898
33776 domains visited
current_vram/total_varm: 22.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.122633695602417

BaB round 10
batch: 15538
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 843] [/input-8, 995] [/input-8, 617] [/input, 330] [/input-8, 843] [/input-8, 477] [/input-8, 617] [/input-8, 995] [/input-8, 843] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07884067296981812
10 lb beta sum: 0.19091549515724182, worst -0.07750990986824036
Time: prepare 0.8238    bound 2.7216    transfer 0.1605    finalize 0.5154    func 4.4311    
Accumulated time: func 10.6781    prepare 1.8389    bound 7.0982    transfer 0.2985    finalize 0.7512    
all_split False
======================Cut inference begins======================
max lb tensor(0.20649214) min lb tensor(-0.07750122)
Number of Verified Splits: 4017 of 31076
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 360.
#cuts 1-3: 4
#cuts 4-6: 37
#cuts 7-9: 248
#cuts 10-12: 71
#cuts >= 20: 0
BICCOS time: 2.396341323852539 
BICCOS Cumulative time: 4.865572690963745
Preprocessing time: 1.397639274597168 Inference time: 0.7056689262390137 Add cuts time: 0.2704274654388428 Cut analysis time: 0.02260565757751465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07750 (17), -0.07709 (17), -0.07564 (17), -0.07553 (17), -0.07523 (17), -0.07513 (17), -0.07367 (17), -0.07360 (17), -0.07326 (17), -0.07319 (17), -0.07285 (17), -0.07238 (17), -0.07235 (17), -0.07209 (16), -0.07200 (17), -0.07195 (17), -0.07195 (17), -0.07173 (17), -0.07168 (16), -0.07159 (17), 
Length of domains: 27059
Time: pickout 0.3088    decision 1.1968    set_bounds 1.7247    solve 4.4370    add 0.1173    
Accumulated time: pickout 0.5777    decision 3.3059    set_bounds 3.7806    solve 10.4873    add 0.9811    
Current (lb-rhs): -0.07750122249126434
60835 domains visited
Cumulative time: 24.37941813468933

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 620] [/input-8, 477] [/input-8, 1490] [/input-8, 617] [/input, 620] [/input-8, 473] [/input-8, 116] [/input-8, 617] [/input, 620] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07636219263076782
10 lb beta sum: 0.1869770586490631, worst -0.0750378966331482
Time: prepare 0.9213    bound 3.1890    transfer 0.1251    finalize 0.2534    func 4.7078    
Accumulated time: func 15.3859    prepare 2.7607    bound 10.2871    transfer 0.4236    finalize 1.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.22552253) min lb tensor(-0.07503255)
Number of Verified Splits: 4693 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 478.
#cuts 1-3: 4
#cuts 4-6: 43
#cuts 7-9: 326
#cuts 10-12: 105
#cuts >= 20: 0
BICCOS time: 2.8236212730407715 
BICCOS Cumulative time: 7.689193964004517
Preprocessing time: 1.5705177783966064 Inference time: 0.7942266464233398 Add cuts time: 0.4277639389038086 Cut analysis time: 0.0311129093170166
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07503 (18), -0.07462 (18), -0.07324 (18), -0.07315 (18), -0.07306 (18), -0.07283 (18), -0.07273 (18), -0.07265 (18), -0.07136 (18), -0.07127 (18), -0.07118 (18), -0.07105 (18), -0.07095 (18), -0.07089 (17), -0.07086 (18), -0.07078 (18), -0.07064 (18), -0.07047 (17), -0.07038 (18), -0.07006 (17), 
Length of domains: 38750
Time: pickout 0.2680    decision 1.8365    set_bounds 1.9625    solve 4.7144    add 0.1800    
Accumulated time: pickout 0.8457    decision 5.1424    set_bounds 5.7431    solve 15.2017    add 1.1610    
Current (lb-rhs): -0.0750325471162796
88910 domains visited
current_vram/total_varm: 41.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 36.25629019737244

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 330] [/input-8, 617] [/input-8, 843] [/input-8, 116] [/input-8, 617] [/input-8, 843] [/input, 330] [/input-8, 116] [/input-8, 843] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07457208633422852
10 lb beta sum: 0.180247962474823, worst -0.0732240229845047
Time: prepare 1.8710    bound 11.8722    transfer 0.3688    finalize 0.5457    func 15.7889    
Accumulated time: func 31.1747    prepare 4.6323    bound 22.1594    transfer 0.7924    finalize 1.5503    
all_split False
======================Cut inference begins======================
max lb tensor(0.24309751) min lb tensor(-0.07321265)
Number of Verified Splits: 11173 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 681.
#cuts 1-3: 4
#cuts 4-6: 90
#cuts 7-9: 462
#cuts 10-12: 125
#cuts >= 20: 0
BICCOS time: 6.247287273406982 
BICCOS Cumulative time: 13.936481237411499
Preprocessing time: 2.2682557106018066 Inference time: 2.8208677768707275 Add cuts time: 1.1168169975280762 Cut analysis time: 0.04134678840637207
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07321 (19), -0.07315 (18), -0.07279 (19), -0.07273 (18), -0.07140 (19), -0.07125 (19), -0.07118 (18), -0.07099 (19), -0.07083 (19), -0.07078 (18), -0.06987 (18), -0.06951 (19), -0.06948 (18), -0.06945 (19), -0.06923 (19), -0.06915 (18), -0.06914 (19), -0.06906 (19), -0.06882 (19), -0.06874 (18), 
Length of domains: 60345
Time: pickout 0.5597    decision 3.4988    set_bounds 4.3336    solve 15.8005    add 0.2450    
Accumulated time: pickout 1.4054    decision 8.6412    set_bounds 10.0767    solve 31.0022    add 1.4061    
Current (lb-rhs): -0.0732126533985138
143273 domains visited
Cumulative time: 67.12796258926392

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 330] [/input-8, 473] [/input-8, 473] [/input, 330] [/input-8, 473] [/input-8, 473] [/input-8, 473] [/input-8, 473] [/input, 330] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07279396057128906
10 lb beta sum: 0.1656372845172882, worst -0.07279473543167114
Time: prepare 1.9231    bound 12.6700    transfer 0.3825    finalize 1.5752    func 16.9881    
Accumulated time: func 48.1628    prepare 6.5560    bound 34.8294    transfer 1.1749    finalize 3.1256    
all_split False
======================Cut inference begins======================
max lb tensor(0.24369523) min lb tensor(-0.07278728)
Number of Verified Splits: 12763 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 681.
#cuts 1-3: 4
#cuts 4-6: 90
#cuts 7-9: 462
#cuts 10-12: 125
#cuts >= 20: 0
BICCOS time: 0.0019268989562988281 
BICCOS Cumulative time: 13.938408136367798
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07131 (19), -0.07125 (19), -0.07096 (20), -0.07089 (19), -0.07082 (20), -0.07029 (20), -0.06935 (20), -0.06934 (19), -0.06906 (20), -0.06900 (20), -0.06891 (19), -0.06881 (20), -0.06856 (19), -0.06846 (20), -0.06843 (18), -0.06805 (19), -0.06800 (18), -0.06776 (20), -0.06770 (19), 
Length of domains: 80350
Time: pickout 0.5916    decision 3.3488    set_bounds 4.0213    solve 17.0024    add 0.2798    
Accumulated time: pickout 1.9969    decision 11.9900    set_bounds 14.0980    solve 48.0045    add 1.6859    
Current (lb-rhs): -0.07278728485107422
196046 domains visited
Cumulative time: 92.5658540725708

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-12, 60] [/input-8, 995] [/input-12, 60] [/input-8, 473] [/input, 2137] [/input-12, 60] [/input-8, 473] [/input, 2137] [/input, 458] 
cut re-enabled after branching node selection
0 lb beta sum: 0.03488060459494591, worst -0.07089167833328247
10 lb beta sum: 0.17305374145507812, worst -0.07096755504608154
Time: prepare 2.1649    bound 12.6727    transfer 0.3701    finalize 0.6140    func 17.3375    
Accumulated time: func 65.5003    prepare 8.7214    bound 47.5022    transfer 1.5450    finalize 3.7396    
all_split False
======================Cut inference begins======================
max lb tensor(0.24483943) min lb tensor(-0.07088003)
Number of Verified Splits: 14582 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 681.
#cuts 1-3: 4
#cuts 4-6: 90
#cuts 7-9: 462
#cuts 10-12: 125
#cuts >= 20: 0
BICCOS time: 0.024053335189819336 
BICCOS Cumulative time: 13.962461471557617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07096 (20), -0.07088 (20), -0.07082 (20), -0.07029 (20), -0.06935 (20), -0.06906 (20), -0.06900 (20), -0.06891 (20), -0.06881 (20), -0.06846 (20), -0.06838 (20), -0.06833 (20), -0.06776 (20), -0.06770 (20), -0.06764 (20), -0.06752 (20), -0.06744 (20), -0.06741 (20), -0.06724 (20), 
Length of domains: 98536
Time: pickout 0.5661    decision 4.1929    set_bounds 4.1224    solve 17.3559    add 0.2257    
Accumulated time: pickout 2.5630    decision 16.1829    set_bounds 18.2204    solve 65.3604    add 1.9115    
Current (lb-rhs): -0.07278728485107422
247000 domains visited
Cumulative time: 119.2448058128357

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 617] [/input-8, 473] [/input-8, 473] [/input-8, 617] [/input-12, 60] [/input, 458] [/input-8, 617] [/input-8, 473] [/input, 458] 
cut re-enabled after branching node selection
0 lb beta sum: 0.1930886209011078, worst -0.07194122672080994
10 lb beta sum: 0.19310006499290466, worst -0.07194319367408752
Time: prepare 3.5619    bound 12.6693    transfer 0.3914    finalize 0.5779    func 17.6494    
Accumulated time: func 83.1496    prepare 12.2840    bound 60.1715    transfer 1.9363    finalize 4.3175    
all_split False
======================Cut inference begins======================
max lb tensor(0.24067801) min lb tensor(-0.07193449)
Number of Verified Splits: 13000 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 681.
#cuts 1-3: 4
#cuts 4-6: 90
#cuts 7-9: 462
#cuts 10-12: 125
#cuts >= 20: 0
BICCOS time: 0.005319118499755859 
BICCOS Cumulative time: 13.967780590057373
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07088 (20), -0.07029 (20), -0.07011 (21), -0.06997 (21), -0.06932 (21), -0.06891 (20), -0.06879 (21), -0.06846 (20), -0.06838 (20), -0.06833 (20), -0.06821 (21), -0.06816 (21), -0.06797 (21), -0.06770 (20), -0.06764 (20), -0.06750 (21), -0.06744 (20), -0.06741 (20), -0.06696 (21), 
Length of domains: 118304
Time: pickout 0.6063    decision 3.3589    set_bounds 4.3128    solve 18.9289    add 0.2221    
Accumulated time: pickout 3.1693    decision 19.5418    set_bounds 22.5332    solve 84.2894    add 2.1336    
Current (lb-rhs): -0.07193449139595032
299536 domains visited
Cumulative time: 146.8730390071869

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-8, 843] [/input-8, 843] [/input-8, 617] [/input-8, 843] [/input-8, 617] [/input-8, 843] [/input-8, 473] [/input-8, 874] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.19628678262233734, worst -0.0702921599149704
10 lb beta sum: 0.19629690051078796, worst -0.10610800981521606
Time: prepare 3.5707    bound 12.6717    transfer 0.3779    finalize 0.5712    func 17.6343    
Accumulated time: func 100.7840    prepare 15.8552    bound 72.8432    transfer 2.3142    finalize 4.8886    
all_split False
======================Cut inference begins======================
max lb tensor(0.24629790) min lb tensor(-0.07027332)
Number of Verified Splits: 14924 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 681.
#cuts 1-3: 4
#cuts 4-6: 90
#cuts 7-9: 462
#cuts 10-12: 125
#cuts >= 20: 0
BICCOS time: 0.0024721622467041016 
BICCOS Cumulative time: 13.970252752304077
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07088 (20), -0.07027 (21), -0.07011 (21), -0.06997 (21), -0.06932 (21), -0.06891 (20), -0.06879 (21), -0.06845 (21), -0.06838 (20), -0.06833 (20), -0.06821 (21), -0.06816 (21), -0.06797 (21), -0.06764 (20), -0.06750 (21), -0.06744 (20), -0.06738 (21), -0.06696 (21), -0.06690 (21), 
Length of domains: 136148
Time: pickout 0.6139    decision 3.3908    set_bounds 4.5761    solve 17.6526    add 0.2197    
Accumulated time: pickout 3.7832    decision 22.9326    set_bounds 27.1093    solve 101.9420    add 2.3533    
Current (lb-rhs): -0.07193449139595032
350148 domains visited
Cumulative time: 173.59823989868164

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 477] [/input, 475] [/input, 458] [/input, 458] [/input, 475] [/input-8, 477] [/input, 475] [/input, 458] [/input-8, 874] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.21229277551174164, worst -0.07003399729728699
10 lb beta sum: 0.21229752898216248, worst -0.07006260752677917
Time: prepare 3.5875    bound 12.6687    transfer 0.3946    finalize 2.0878    func 19.1904    
Accumulated time: func 119.9744    prepare 19.4432    bound 85.5119    transfer 2.7088    finalize 6.9764    
all_split False
======================Cut inference begins======================
max lb tensor(0.24663901) min lb tensor(-0.07001764)
Number of Verified Splits: 17751 of 65536
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 681.
#cuts 1-3: 4
#cuts 4-6: 90
#cuts 7-9: 462
#cuts 10-12: 125
#cuts >= 20: 0
BICCOS time: 0.0018610954284667969 
BICCOS Cumulative time: 13.972113847732544
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07027 (21), -0.07011 (21), -0.07002 (21), -0.06997 (21), -0.06932 (21), -0.06879 (21), -0.06845 (21), -0.06836 (21), -0.06832 (21), -0.06821 (21), -0.06816 (21), -0.06805 (21), -0.06797 (21), -0.06750 (21), -0.06741 (21), -0.06738 (21), -0.06696 (21), -0.06690 (21), -0.06689 (21), 
Length of domains: 151165
Time: pickout 0.6166    decision 4.3047    set_bounds 3.2817    solve 19.2050    add 0.2107    
Accumulated time: pickout 4.3998    decision 27.2374    set_bounds 30.3910    solve 121.1470    add 2.5640    
Current (lb-rhs): -0.07193449139595032
397933 domains visited
Time out!!!!!!!!
Result: unknown in 204.4032 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [664]; unstable size 664; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 664] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 664] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 664] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 239] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04075289,  2.86903524,  0.75436532,  0.06829172, -0.61994475,
          1.08730960,  0.85343850,  1.25660872,  3.10610700]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.18765354, -9.77073288, -6.59089756, -5.29431868, -4.97382355,
          -4.98171186, -7.01910067, -6.92423296, -7.98603344, -9.82796764]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00788832]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0083 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0407 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 445] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 445] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 179] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.11019540,  3.76489162, -1.18024445,  0.25222480, -0.68485928,
          0.81499946,  1.69955885,  2.79094529,  3.59716272]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717],
         [-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54474962,  0.04069602]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]],


         [[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 583] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 583] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 278] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.95121861,  2.65529966, -1.12760639, -1.74681807, -0.90773940,
          0.75648642, -0.87717187,  2.33981323,  1.64043331]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540],
         [-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25267982, -0.30391502, -0.40202093,  1.12806320]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0529 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 682] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 682] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 177] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62306976,  3.08736968,  3.49406075,  4.42359018,  3.72971249,
          5.79383612,  5.18702316,  5.91974640,  2.72902703]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.86083126, -14.65515518, -15.32081318, -16.32747269, -15.65061283,
          -17.88081551, -17.16146469, -17.99161720, -10.98882198, -14.44098759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12799072]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0673 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 704] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 704] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 250] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20884335,  3.62872195, -1.65299881, -0.98555756, -1.01563966,
          0.82072163,  0.33104563,  1.38739491,  2.34938693]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794],
         [ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.79980183, -0.00376987,  0.12487316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0791 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 682] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 682] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48958635,  6.85282898, -0.38445073,  3.19247007,  3.10144329,
          1.89875424,  3.66963434,  5.16848564,  6.31332350]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.64it/s]100%|██████████| 1/1 [00:00<00:00,  8.63it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.09303856, -12.88755322,  -4.96290588,  -8.65058517,  -4.84228325,
           -8.76727962,  -7.62690067,  -9.28729725, -11.05305099, -12.33880711]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12062263]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1186 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 32.90011978149414
alpha/beta optimization time: 1.2719130516052246
initial alpha-crown bounds: tensor([[ 2.57451034,  6.94005108, -0.32821137,  3.23324418,  3.14502001,
          1.95601821,  3.71171665,  5.26033640,  6.40743494]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.32821136713027954
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54488134384155
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.54484009742737
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.54481315612793
Verifying property 2 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32821137]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
         -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32821137]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 682
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 253
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 949
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011706352233886719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3282082676887512
10 lb beta sum: 0.0, worst -0.328214168548584
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0555    transfer 0.0001    finalize 0.0001    func 0.0560    
Accumulated time: func 0.0560    prepare 0.0002    bound 0.0555    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 26] 
split level 5: [/input-12, 44] 
split level 6: [/input-12, 51] 
split level 7: [/input-8, 1892] 
split level 8: [/input-8, 1365] 
split level 9: [/input-8, 542] 
split level 10: [/input-8, 533] 
split level 11: [/input-8, 1308] 
split level 12: [/input-8, 1363] 
split level 13: [/input-8, 523] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 86] 
split level 16: [/input-8, 1886] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 1891] 
split level 19: [/input-8, 1364] 
split level 20: [/input-8, 1356] 
split level 21: [/input-8, 1373] 
split level 22: [/input-8, 77] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1828] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 1899] 
split level 27: [/input-8, 539] 
split level 28: [/input-8, 476] 
split level 29: [/input-8, 1812] 
split level 30: [/input-8, 1379] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 76] 
split level 33: [/input-8, 1374] 
split level 34: [/input-8, 1068] 
split level 35: [/input-8, 1369] 
split level 36: [/input-8, 1366] 
split level 37: [/input-8, 1358] 
split level 38: [/input-8, 1044] 
split level 39: [/input-8, 1292] 
split level 40: [/input-8, 1894] 
split level 41: [/input-8, 1901] 
split level 42: [/input-8, 1378] 
split level 43: [/input-8, 1893] 
split level 44: [/input-8, 1346] 
split level 45: [/input-8, 1381] 
split level 46: [/input-8, 1876] 
split level 47: [/input-8, 916] 
split level 48: [/input-8, 1861] 
split level 49: [/input-8, 1310] 
split level 50: [/input-8, 517] 
split level 51: [/input-8, 1882] 
split level 52: [/input-8, 1289] 
split level 53: [/input-8, 1890] 
split level 54: [/input-8, 1349] 
split level 55: [/input-8, 1910] 
split level 56: [/input-8, 669] 
split level 57: [/input-8, 990] 
split level 58: [/input-8, 939] 
split level 59: [/input-8, 85] 
split level 60: [/input-8, 1902] 
split level 61: [/input-8, 1889] 
split level 62: [/input-8, 944] 
split level 63: [/input-8, 1382] 
split level 64: [/input-8, 1868] 
split level 65: [/input-8, 1019] 
split level 66: [/input-8, 1339] 
split level 67: [/input-8, 571] 
split level 68: [/input-8, 1350] 
split level 69: [/input-8, 1401] 
split level 70: [/input-8, 572] 
split level 71: [/input-8, 1090] 
split level 72: [/input-8, 92] 
split level 73: [/input-8, 1361] 
split level 74: [/input, 2492] 
split level 75: [/input-8, 931] 
split level 76: [/input-8, 936] 
split level 77: [/input-8, 518] 
split level 78: [/input-8, 932] 
split level 79: [/input-8, 951] 
split level 80: [/input-8, 1405] 
split level 81: [/input-8, 1353] 
split level 82: [/input-8, 969] 
split level 83: [/input, 2455] 
split level 84: [/input-8, 1080] 
split level 85: [/input-8, 1402] 
split level 86: [/input-8, 1827] 
split level 87: [/input-8, 868] 
split level 88: [/input-8, 1318] 
split level 89: [/input-8, 558] 
split level 90: [/input-8, 1396] 
split level 91: [/input-8, 1888] 
split level 92: [/input-8, 977] 
split level 93: [/input, 2536] 
split level 94: [/input-8, 943] 
split level 95: [/input, 2460] 
split level 96: [/input-8, 1880] 
split level 97: [/input, 1687] 
split level 98: [/input-8, 1326] 
split level 99: [/input-8, 1389] 
split level 100: [/input-8, 546] 
split level 101: [/input-12, 53] 
split level 102: [/input-8, 1430] 
split level 103: [/input, 3547] 
split level 104: [/input-8, 404] 
split level 105: [/input, 2475] 
split level 106: [/input-8, 844] 
split level 107: [/input, 2474] 
split level 108: [/input-8, 832] 
split level 109: [/input-8, 985] 
split level 110: [/input-8, 528] 
split level 111: [/input-8, 545] 
split level 112: [/input, 1689] 
split level 113: [/input-8, 537] 
split level 114: [/input-8, 915] 
split level 115: [/input, 1685] 
split level 116: [/input, 2522] 
split level 117: [/input, 3451] 
split level 118: [/input, 437] 
split level 119: [/input, 1723] 
split level 120: [/input-8, 566] 
split level 121: [/input, 2424] 
split level 122: [/input, 1684] 
split level 123: [/input-8, 564] 
split level 124: [/input, 2462] 
split level 125: [/input, 2477] 
split level 126: [/input, 487] 
split level 127: [/input-8, 561] 
split level 128: [/input, 3272] 
split level 129: [/input, 2883] 
split level 130: [/input, 2487] 
split level 131: [/input, 2523] 
split level 132: [/input, 2723] 
split level 133: [/input, 3303] 
split level 134: [/input, 3269] 
split level 135: [/input, 2472] 
split level 136: [/input, 1497] 
split level 137: [/input-8, 1424] 
split level 138: [/input, 4019] 
split level 139: [/input, 1513] 
split level 140: [/input, 1515] 
split level 141: [/input, 2533] 
split level 142: [/input-8, 64] 
split level 143: [/input-8, 1416] 
split level 144: [/input, 1132] 
split level 145: [/input, 471] 
split level 146: [/input, 2518] 
split level 147: [/input, 2554] 
split level 148: [/input, 2516] 
split level 149: [/input, 613] 
split level 150: [/input, 1668] 
split level 151: [/input, 2505] 
split level 152: [/input, 486] 
split level 153: [/input-8, 121] 
split level 154: [/input, 3531] 
split level 155: [/input, 2634] 
split level 156: [/input-8, 980] 
split level 157: [/input, 2264] 
split level 158: [/input, 2555] 
split level 159: [/input, 2551] 
split level 160: [/input, 474] 
split level 161: [/input, 455] 
split level 162: [/input-8, 1875] 
split level 163: [/input-8, 521] 
split level 164: [/input, 2244] 
split level 165: [/input, 438] 
split level 166: [/input, 2506] 
split level 167: [/input, 458] 
split level 168: [/input-8, 935] 
split level 169: [/input, 2500] 
split level 170: [/input, 2443] 
split level 171: [/input, 1674] 
split level 172: [/input, 3575] 
split level 173: [/input, 2553] 
split level 174: [/input, 1403] 
split level 175: [/input, 3577] 
split level 176: [/input, 3467] 
split level 177: [/input, 1499] 
split level 178: [/input-8, 1045] 
split level 179: [/input, 2539] 
split level 180: [/input, 489] 
split level 181: [/input, 2280] 
split level 182: [/input-8, 998] 
split level 183: [/input-8, 84] 
split level 184: [/input, 1117] 
split level 185: [/input, 3290] 
split level 186: [/input, 1751] 
split level 187: [/input, 2428] 
split level 188: [/input, 2249] 
split level 189: [/input, 1419] 
split level 190: [/input, 3256] 
split level 191: [/input, 2470] 
split level 192: [/input, 2429] 
split level 193: [/input, 3321] 
split level 194: [/input, 521] 
split level 195: [/input, 3579] 
split level 196: [/input, 2549] 
split level 197: [/input-8, 529] 
split level 198: [/input, 149] 
split level 199: [/input, 3572] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3281744420528412
10 lb beta sum: 0.0, worst -0.3281679153442383
Time: prepare 0.0119    bound 0.1054    transfer 0.0017    finalize 0.0032    func 0.1250    
Accumulated time: func 0.1810    prepare 0.0226    bound 0.1609    transfer 0.0018    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02066231) min lb tensor(-0.32815897)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01080179214477539 
BICCOS Cumulative time: 0.01080179214477539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.31694 (1), -0.31648 (1), -0.31636 (1), -0.31617 (1), -0.31571 (1), -0.31507 (1), -0.31478 (1), -0.31362 (1), -0.31352 (1), -0.31339 (1), -0.31337 (1), -0.31321 (1), -0.31234 (1), -0.31215 (1), -0.31212 (1), -0.31074 (1), -0.31035 (1), -0.31021 (1), -0.30959 (1), -0.30912 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5237    set_bounds 0.0092    solve 0.1251    add 0.0715    
Accumulated time: pickout 0.0003    decision 0.5237    set_bounds 0.0092    solve 0.1251    add 0.0715    
Current (lb-rhs): -0.31693699955940247
50 domains visited
Cumulative time: 0.801694393157959

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2959620952606201
10 lb beta sum: 0.0, worst -0.29588428139686584
Time: prepare 0.0128    bound 0.1038    transfer 0.0008    finalize 0.0027    func 0.1228    
Accumulated time: func 0.3038    prepare 0.0356    bound 0.2648    transfer 0.0026    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.16014063) min lb tensor(-0.29586679)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.014576435089111328 
BICCOS Cumulative time: 0.02537822723388672
Preprocessing time: 0.012623310089111328 Inference time: 0.0012598037719726562 Add cuts time: 0.0003561973571777344 Cut analysis time: 0.0003371238708496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13613 (2), -0.13576 (2), -0.13385 (2), -0.13356 (2), -0.13349 (2), -0.13302 (2), -0.13233 (2), -0.13217 (2), -0.13213 (2), -0.13049 (2), -0.13022 (2), -0.12939 (2), -0.12920 (2), -0.12847 (2), -0.12797 (2), -0.12766 (2), -0.12625 (2), -0.12470 (2), -0.12452 (2), -0.12318 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0257    set_bounds 0.0127    solve 0.1229    add 0.0854    
Accumulated time: pickout 0.0015    decision 0.5494    set_bounds 0.0219    solve 0.2480    add 0.1569    
Current (lb-rhs): -0.13613486289978027
100 domains visited
Cumulative time: 1.0644192695617676

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 54] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 1] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 44] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12922632694244385
10 lb beta sum: 0.4122426211833954, worst -0.2834320366382599
Time: prepare 0.0072    bound 0.1246    transfer 0.0008    finalize 0.0022    func 0.1382    
Accumulated time: func 0.4420    prepare 0.0431    bound 0.3893    transfer 0.0033    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.25799406) min lb tensor(-0.08397098)
Number of Verified Splits: 172 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.023430585861206055 
BICCOS Cumulative time: 0.04880881309509277
Preprocessing time: 0.011942863464355469 Inference time: 0.007977724075317383 Add cuts time: 0.0027191638946533203 Cut analysis time: 0.0007908344268798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01667 (3), -0.01619 (3), -0.01580 (3), -0.01579 (3), -0.01490 (3), -0.01458 (3), -0.01404 (3), -0.01403 (3), -0.01355 (3), -0.01336 (3), -0.01333 (3), -0.01322 (3), -0.01313 (3), -0.01236 (3), -0.01232 (3), -0.01227 (3), -0.01207 (3), -0.01174 (3), -0.01155 (3), -0.01152 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0211    set_bounds 0.0160    solve 0.1383    add 0.1027    
Accumulated time: pickout 0.0025    decision 0.5706    set_bounds 0.0379    solve 0.3864    add 0.2596    
Current (lb-rhs): -0.016674458980560303
150 domains visited
Cumulative time: 1.3674492835998535

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 1] [/input-12, 54] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 3: [/input-8, 1373] [/input-8, 1373] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-8, 1373] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07622331380844116
10 lb beta sum: 0.4711655378341675, worst -0.2470213770866394
Time: prepare 0.0073    bound 0.1444    transfer 0.0008    finalize 0.0023    func 0.1576    
Accumulated time: func 0.5996    prepare 0.0506    bound 0.5337    transfer 0.0041    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.70417440) min lb tensor(-0.01225081)
Number of Verified Splits: 358 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 6
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.045357465744018555 
BICCOS Cumulative time: 0.09416627883911133
Preprocessing time: 0.012908935546875 Inference time: 0.01991724967956543 Add cuts time: 0.011461257934570312 Cut analysis time: 0.0010700225830078125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0156    solve 0.1577    add 0.0278    
Accumulated time: pickout 0.0036    decision 0.5907    set_bounds 0.0536    solve 0.5441    add 0.2874    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([4.63551975e-11, 4.65820879e-02, 1.17932573e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.63551975e-11, 4.65820879e-02, 9.54549462e-02, 7.20530003e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.63551975e-11, 4.65820879e-02, 9.54549462e-02, 6.75358018e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.63551975e-11, 5.04805893e-02, 1.12380072e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.63551975e-11, 5.04805893e-02, 9.66287702e-02, 7.08838850e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.63551975e-11, 5.04805893e-02, 9.66287702e-02, 7.65366992e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.65464881e-11, 1.52891621e-01, 5.69474548e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26, 37]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.65464881e-11, 1.52891621e-01, 9.16090459e-02, 8.94325227e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26, 37]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.65464881e-11, 1.52891621e-01, 9.16090459e-02, 4.36760625e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([3.65464881e-11, 4.99389321e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20287197828292847
10 lb beta sum: 0.4709600508213043, worst -0.19199568033218384
Time: prepare 0.0005    bound 0.1334    transfer 0.0002    finalize 0.0002    func 0.1344    
Accumulated time: func 0.7340    prepare 0.0511    bound 0.6671    transfer 0.0043    finalize 0.0107    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 44] [/input-12, 26] 
split level 2: [/input-12, 51] [/input-12, 51] 
split level 3: [/input-8, 1892] [/input-12, 44] 
split level 4: [/input-8, 1373] [/input-8, 1892] 
split level 5: [/input-8, 1364] [/input-8, 1364] 
split level 6: [/input-8, 1381] [/input-8, 1373] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5557711124420166, worst -0.10239969193935394
10 lb beta sum: 0.5842673778533936, worst -0.10126467049121857
Time: prepare 0.0111    bound 0.1381    transfer 0.0010    finalize 0.0019    func 0.1539    
Accumulated time: func 0.8879    prepare 0.0627    bound 0.8052    transfer 0.0053    finalize 0.0127    
all_split False
======================Cut inference begins======================
max lb tensor(0.24758416) min lb tensor(-0.10077371)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5655500292778015, worst -0.22025734186172485
10 lb beta sum: 0.9746144413948059, worst -0.1517106294631958
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 32
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.29927921295166016 
BICCOS Cumulative time: 0.3934454917907715
Preprocessing time: 0.007633209228515625 Inference time: 0.28032636642456055 Add cuts time: 0.009652853012084961 Cut analysis time: 0.0016667842864990234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10077 (7), -0.09811 (7), -0.09760 (7), -0.09500 (7), -0.08136 (7), -0.07868 (7), -0.07765 (7), -0.07497 (7), -0.06027 (7), -0.05894 (7), -0.05442 (7), -0.05400 (7), -0.04899 (7), -0.04678 (7), -0.04666 (7), -0.04465 (7), -0.04421 (7), -0.04300 (7), -0.03768 (7), -0.03718 (7), 
Length of domains: 32
Time: pickout 0.0005    decision 0.0204    set_bounds 0.0235    solve 0.1540    add 0.0012    
Accumulated time: pickout 0.0042    decision 0.6111    set_bounds 0.0771    solve 0.6981    add 0.2887    
Current (lb-rhs): -0.10077370703220367
182 domains visited
Cumulative time: 2.2977423667907715

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1891] [/input-8, 1363] 
split level 2: [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1363] [/input-8, 1886] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09134787321090698
10 lb beta sum: 0.020039061084389687, worst -0.09075945615768433
Time: prepare 0.0053    bound 0.1379    transfer 0.0006    finalize 0.0013    func 0.1469    
Accumulated time: func 1.0347    prepare 0.0682    bound 0.9431    transfer 0.0059    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.47393388) min lb tensor(-0.09044275)
Number of Verified Splits: 146 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 7
#cuts 4-6: 11
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.0255124568939209 
BICCOS Cumulative time: 0.4189579486846924
Preprocessing time: 0.008207321166992188 Inference time: 0.013826847076416016 Add cuts time: 0.002469778060913086 Cut analysis time: 0.0010085105895996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09044 (10), -0.08769 (10), -0.08655 (10), -0.08445 (10), -0.08270 (10), -0.08212 (10), -0.08039 (10), -0.07927 (10), -0.07892 (10), -0.07615 (10), -0.07253 (10), -0.07146 (10), -0.07131 (10), -0.07009 (10), -0.06996 (10), -0.06946 (10), -0.06752 (10), -0.06688 (10), -0.06563 (10), -0.06452 (10), 
Length of domains: 110
Time: pickout 0.0014    decision 0.0167    set_bounds 0.0213    solve 0.1469    add 0.0013    
Accumulated time: pickout 0.0056    decision 0.6278    set_bounds 0.0984    solve 0.8450    add 0.2900    
Current (lb-rhs): -0.09044274687767029
292 domains visited
Cumulative time: 2.5121424198150635

BaB round 3
batch: 110
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1052] [/input-8, 1356] [/input-8, 539] [/input-8, 1356] [/input-8, 1052] [/input-8, 1067] [/input-8, 1356] [/input-8, 1052] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08683449029922485
10 lb beta sum: 0.2185591608285904, worst -0.08649870753288269
Time: prepare 0.0046    bound 0.1483    transfer 0.0007    finalize 0.0014    func 0.1568    
Accumulated time: func 1.1916    prepare 0.0730    bound 1.0914    transfer 0.0066    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.31174004) min lb tensor(-0.08637676)
Number of Verified Splits: 156 of 220
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 12
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.028350353240966797 
BICCOS Cumulative time: 0.4473083019256592
Preprocessing time: 0.008326530456542969 Inference time: 0.016630887985229492 Add cuts time: 0.002546072006225586 Cut analysis time: 0.00084686279296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08638 (11), -0.08255 (11), -0.08239 (11), -0.07953 (11), -0.07859 (11), -0.07825 (11), -0.07687 (11), -0.07656 (11), -0.07610 (11), -0.07422 (11), -0.07357 (11), -0.07259 (11), -0.07201 (11), -0.07171 (11), -0.07041 (11), -0.06882 (11), -0.06852 (11), -0.06813 (11), -0.06718 (11), -0.06633 (11), 
Length of domains: 64
Time: pickout 0.0023    decision 0.0183    set_bounds 0.0101    solve 0.1569    add 0.0019    
Accumulated time: pickout 0.0079    decision 0.6461    set_bounds 0.1085    solve 1.0019    add 0.2919    
Current (lb-rhs): -0.08637675642967224
356 domains visited
Cumulative time: 2.7317416667938232

BaB round 4
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1886] [/input-8, 1356] [/input-8, 1357] [/input-8, 1356] [/input-8, 1886] [/input-8, 1357] [/input-8, 1067] [/input-8, 1886] [/input-8, 1067] 
split level 1: [/input-8, 539] [/input-8, 539] [/input-8, 1886] [/input-8, 1356] [/input-8, 1891] [/input-8, 1356] [/input-8, 1886] [/input-8, 1886] [/input-8, 539] [/input-8, 1891] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07730859518051147
10 lb beta sum: 0.6077225208282471, worst -0.07696983218193054
Time: prepare 0.0053    bound 0.1406    transfer 0.0006    finalize 0.0016    func 0.1499    
Accumulated time: func 1.3414    prepare 0.0785    bound 1.2319    transfer 0.0072    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.45176220) min lb tensor(-0.07684386)
Number of Verified Splits: 204 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 17
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.035823822021484375 
BICCOS Cumulative time: 0.48313212394714355
Preprocessing time: 0.00838613510131836 Inference time: 0.0232694149017334 Add cuts time: 0.003323793411254883 Cut analysis time: 0.0008444786071777344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07684 (13), -0.06919 (13), -0.06870 (13), -0.06854 (13), -0.06743 (13), -0.06680 (13), -0.06316 (13), -0.06291 (13), -0.05999 (13), -0.05976 (13), -0.05909 (13), -0.05864 (13), -0.05739 (13), -0.05725 (13), -0.05673 (13), -0.05648 (13), -0.05582 (13), -0.05407 (13), -0.05185 (13), -0.05119 (13), 
Length of domains: 52
Time: pickout 0.0019    decision 0.0154    set_bounds 0.0122    solve 0.1500    add 0.0014    
Accumulated time: pickout 0.0098    decision 0.6615    set_bounds 0.1207    solve 1.1519    add 0.2933    
Current (lb-rhs): -0.07684385776519775
408 domains visited
Cumulative time: 2.9497220516204834

BaB round 5
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1052] [/input-8, 1052] [/input-8, 1067] [/input-8, 1067] [/input-8, 1357] [/input-8, 1357] 
split level 1: [/input-8, 1356] [/input-8, 1067] [/input-8, 1067] [/input-8, 1067] [/input-8, 1067] [/input-8, 1891] [/input-8, 1357] [/input-8, 1357] [/input-8, 1067] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07072600722312927
10 lb beta sum: 0.859719455242157, worst -0.06758388876914978
Time: prepare 0.0045    bound 0.1403    transfer 0.0006    finalize 0.0011    func 0.1480    
Accumulated time: func 1.4894    prepare 0.0833    bound 1.3722    transfer 0.0078    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.93552232) min lb tensor(-0.06750089)
Number of Verified Splits: 190 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 17
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03358054161071777 
BICCOS Cumulative time: 0.5167126655578613
Preprocessing time: 0.006709098815917969 Inference time: 0.023203134536743164 Add cuts time: 0.002883434295654297 Cut analysis time: 0.0007848739624023438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06750 (15), -0.06485 (15), -0.05794 (15), -0.05622 (15), -0.05496 (15), -0.04872 (15), -0.04793 (15), -0.04523 (15), -0.04223 (15), -0.03803 (15), -0.03679 (15), -0.03538 (15), -0.02909 (15), -0.02272 (15), -0.02085 (15), -0.01214 (15), -0.01032 (15), -0.00539 (15), 
Length of domains: 18
Time: pickout 0.0016    decision 0.0137    set_bounds 0.2254    solve 0.1480    add 0.0010    
Accumulated time: pickout 0.0114    decision 0.6752    set_bounds 0.3461    solve 1.2999    add 0.2944    
Current (lb-rhs): -0.06750088930130005
426 domains visited
Cumulative time: 3.3743698596954346

BaB round 6
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
split level 1: [/input-8, 1067] [/input-8, 1356] [/input-8, 539] [/input-8, 539] [/input-8, 1357] [/input-8, 1828] [/input-8, 1357] [/input-8, 539] [/input-8, 539] [/input-8, 1357] 
split level 2: [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] 
split level 3: [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1894] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6958720088005066, worst -0.05476188659667969
10 lb beta sum: 0.6958720088005066, worst -0.054631173610687256
Time: prepare 0.0122    bound 0.1435    transfer 0.0015    finalize 0.0022    func 0.1614    
Accumulated time: func 1.6508    prepare 0.0958    bound 1.5157    transfer 0.0093    finalize 0.0202    
all_split False
======================Cut inference begins======================
max lb tensor(0.27136415) min lb tensor(-0.05459166)
Number of Verified Splits: 205 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03895378112792969 
BICCOS Cumulative time: 0.555666446685791
Preprocessing time: 0.008991003036499023 Inference time: 0.02734994888305664 Add cuts time: 0.0017802715301513672 Cut analysis time: 0.0008325576782226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05459 (19), -0.05344 (19), -0.05319 (19), -0.05249 (19), -0.05204 (19), -0.05100 (19), -0.05031 (19), -0.04883 (19), -0.04631 (19), -0.04482 (19), -0.04467 (19), -0.04330 (19), -0.04216 (19), -0.04205 (19), -0.04080 (19), -0.04063 (19), -0.04056 (19), -0.04043 (19), -0.03929 (19), -0.03904 (19), 
Length of domains: 83
Time: pickout 0.0012    decision 0.0153    set_bounds 0.0168    solve 0.1615    add 0.0017    
Accumulated time: pickout 0.0126    decision 0.6905    set_bounds 0.3629    solve 1.4614    add 0.2960    
Current (lb-rhs): -0.05459165573120117
509 domains visited
Cumulative time: 3.6110620498657227

BaB round 7
batch: 83
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1052] 
split level 1: [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 931] [/input-8, 1381] [/input-8, 1381] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04957395792007446
10 lb beta sum: 0.2757553160190582, worst -0.04951369762420654
Time: prepare 0.0066    bound 0.1409    transfer 0.0023    finalize 0.0020    func 0.1543    
Accumulated time: func 1.8051    prepare 0.1026    bound 1.6566    transfer 0.0116    finalize 0.0222    
all_split False
======================Cut inference begins======================
max lb tensor(0.01739919) min lb tensor(-0.04948857)
Number of Verified Splits: 169 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.04193377494812012 
BICCOS Cumulative time: 0.5976002216339111
Preprocessing time: 0.010489463806152344 Inference time: 0.02853560447692871 Add cuts time: 0.002109050750732422 Cut analysis time: 0.0007996559143066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04949 (21), -0.04856 (21), -0.04844 (21), -0.04829 (21), -0.04756 (21), -0.04736 (21), -0.04732 (21), -0.04722 (21), -0.04658 (21), -0.04636 (21), -0.04635 (21), -0.04543 (21), -0.04505 (21), -0.04430 (21), -0.04410 (21), -0.04317 (21), -0.04100 (21), -0.04023 (21), -0.04005 (21), -0.03956 (21), 
Length of domains: 163
Time: pickout 0.0021    decision 0.0162    set_bounds 0.0154    solve 0.1544    add 0.0015    
Accumulated time: pickout 0.0147    decision 0.7068    set_bounds 0.3782    solve 1.6158    add 0.2975    
Current (lb-rhs): -0.049488574266433716
672 domains visited
Cumulative time: 3.843738317489624

BaB round 8
batch: 163
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1894] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04573222994804382
10 lb beta sum: 0.2669100761413574, worst -0.04567861557006836
Time: prepare 0.0067    bound 0.1464    transfer 0.0012    finalize 0.0018    func 0.1583    
Accumulated time: func 1.9634    prepare 0.1095    bound 1.8030    transfer 0.0128    finalize 0.0240    
all_split False
======================Cut inference begins======================
max lb tensor(0.01047176) min lb tensor(-0.04564172)
Number of Verified Splits: 82 of 326
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.024725675582885742 
BICCOS Cumulative time: 0.6223258972167969
Preprocessing time: 0.010009050369262695 Inference time: 0.011773109436035156 Add cuts time: 0.0013804435729980469 Cut analysis time: 0.0015630722045898438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04564 (22), -0.04544 (22), -0.04529 (22), -0.04444 (22), -0.04443 (22), -0.04441 (22), -0.04428 (22), -0.04345 (22), -0.04340 (22), -0.04298 (22), -0.04273 (22), -0.04177 (22), -0.04116 (22), -0.04093 (22), -0.04081 (22), -0.04069 (22), -0.04041 (22), -0.04015 (22), -0.03999 (22), -0.03975 (22), 
Length of domains: 244
Time: pickout 0.0034    decision 0.0208    set_bounds 0.0142    solve 0.1584    add 0.0029    
Accumulated time: pickout 0.0181    decision 0.7275    set_bounds 0.3925    solve 1.7742    add 0.3004    
Current (lb-rhs): -0.04564172029495239
916 domains visited
Cumulative time: 4.06931471824646

BaB round 9
batch: 244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1894] [/input-8, 1894] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1044] [/input-8, 1894] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04260167479515076
10 lb beta sum: 0.2733196020126343, worst -0.04256308078765869
Time: prepare 0.0097    bound 0.1460    transfer 0.0010    finalize 0.0023    func 0.1647    
Accumulated time: func 2.1281    prepare 0.1194    bound 1.9489    transfer 0.0138    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.01037633) min lb tensor(-0.04254615)
Number of Verified Splits: 101 of 488
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03361177444458008 
BICCOS Cumulative time: 0.655937671661377
Preprocessing time: 0.014477729797363281 Inference time: 0.01535177230834961 Add cuts time: 0.0029289722442626953 Cut analysis time: 0.0008533000946044922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04255 (23), -0.04162 (23), -0.04152 (23), -0.04060 (23), -0.04023 (23), -0.03991 (23), -0.03991 (23), -0.03963 (23), -0.03946 (23), -0.03907 (23), -0.03903 (23), -0.03891 (23), -0.03889 (23), -0.03873 (23), -0.03861 (23), -0.03829 (23), -0.03805 (23), -0.03802 (23), -0.03771 (23), -0.03771 (23), 
Length of domains: 387
Time: pickout 0.0050    decision 0.0255    set_bounds 0.0211    solve 0.1649    add 0.0037    
Accumulated time: pickout 0.0230    decision 0.7531    set_bounds 0.4136    solve 1.9392    add 0.3041    
Current (lb-rhs): -0.04254615306854248
1303 domains visited
Cumulative time: 4.324432849884033

BaB round 10
batch: 387
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3796142637729645, worst -0.038250893354415894
10 lb beta sum: 0.3806339204311371, worst -0.03816211223602295
Time: prepare 0.0335    bound 0.1478    transfer 0.0034    finalize 0.0042    func 0.1941    
Accumulated time: func 2.3222    prepare 0.1532    bound 2.0967    transfer 0.0172    finalize 0.0305    
all_split False
======================Cut inference begins======================
max lb tensor(0.00889993) min lb tensor(-0.03813273)
Number of Verified Splits: 116 of 774
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.044405221939086914 
BICCOS Cumulative time: 0.7003428936004639
Preprocessing time: 0.022171974182128906 Inference time: 0.019734621047973633 Add cuts time: 0.0016818046569824219 Cut analysis time: 0.0008168220520019531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03813 (24), -0.03724 (24), -0.03716 (24), -0.03712 (24), -0.03666 (24), -0.03629 (24), -0.03622 (24), -0.03621 (24), -0.03614 (24), -0.03589 (24), -0.03578 (24), -0.03565 (24), -0.03549 (24), -0.03532 (24), -0.03527 (24), -0.03520 (24), -0.03509 (24), -0.03499 (24), -0.03477 (24), -0.03461 (24), 
Length of domains: 658
Time: pickout 0.0080    decision 0.0324    set_bounds 0.0335    solve 0.1943    add 0.0070    
Accumulated time: pickout 0.0310    decision 0.7855    set_bounds 0.4470    solve 2.1335    add 0.3111    
Current (lb-rhs): -0.03813272714614868
1961 domains visited
Cumulative time: 4.645766973495483

BaB round 11
batch: 658
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1901] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.36326369643211365, worst -0.0354943573474884
10 lb beta sum: 0.36326369643211365, worst -0.0354575514793396
Time: prepare 0.0566    bound 0.1609    transfer 0.0082    finalize 0.0063    func 0.2409    
Accumulated time: func 2.5631    prepare 0.2101    bound 2.2576    transfer 0.0254    finalize 0.0368    
all_split False
======================Cut inference begins======================
max lb tensor(0.00493291) min lb tensor(-0.03544068)
Number of Verified Splits: 231 of 1316
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.08181476593017578 
BICCOS Cumulative time: 0.7821576595306396
Preprocessing time: 0.039841651916503906 Inference time: 0.03862476348876953 Add cuts time: 0.0022284984588623047 Cut analysis time: 0.001119852066040039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03544 (25), -0.03453 (25), -0.03446 (25), -0.03442 (25), -0.03424 (25), -0.03376 (25), -0.03358 (25), -0.03351 (25), -0.03344 (25), -0.03335 (25), -0.03323 (25), -0.03321 (25), -0.03307 (25), -0.03286 (25), -0.03280 (25), -0.03275 (25), -0.03256 (25), -0.03240 (25), -0.03233 (25), -0.03227 (25), 
Length of domains: 1085
Time: pickout 0.0109    decision 0.0466    set_bounds 0.0566    solve 0.2420    add 0.0064    
Accumulated time: pickout 0.0419    decision 0.8321    set_bounds 0.5037    solve 2.3755    add 0.3175    
Current (lb-rhs): -0.035440683364868164
3046 domains visited
Cumulative time: 5.093149662017822

BaB round 12
batch: 1085
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] 
cut re-enabled after branching node selection
0 lb beta sum: 0.33311206102371216, worst -0.032713621854782104
10 lb beta sum: 0.33311206102371216, worst -0.0326576828956604
Time: prepare 0.2696    bound 0.1867    transfer 0.0041    finalize 0.0106    func 0.4857    
Accumulated time: func 3.0488    prepare 0.4800    bound 2.4443    transfer 0.0294    finalize 0.0474    
all_split False
======================Cut inference begins======================
max lb tensor(0.00886124) min lb tensor(-0.03262749)
Number of Verified Splits: 667 of 2170
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 19
#cuts 4-6: 6
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.19180679321289062 
BICCOS Cumulative time: 0.9739644527435303
Preprocessing time: 0.06972575187683105 Inference time: 0.1157081127166748 Add cuts time: 0.005406856536865234 Cut analysis time: 0.0009660720825195312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03263 (26), -0.03175 (26), -0.03171 (26), -0.03163 (26), -0.03137 (26), -0.03089 (26), -0.03084 (26), -0.03075 (26), -0.03074 (26), -0.03050 (26), -0.03048 (26), -0.03024 (26), -0.03018 (26), -0.03002 (26), -0.03000 (26), -0.03000 (26), -0.02986 (26), -0.02961 (26), -0.02937 (26), -0.02937 (26), 
Length of domains: 1503
Time: pickout 0.0187    decision 0.0704    set_bounds 0.0937    solve 0.4863    add 0.0070    
Accumulated time: pickout 0.0606    decision 0.9024    set_bounds 0.5974    solve 2.8619    add 0.3244    
Current (lb-rhs): -0.032627493143081665
4549 domains visited
Cumulative time: 5.969293594360352

BaB round 13
batch: 1503
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030589789152145386
10 lb beta sum: 0.16740283370018005, worst -0.030480533838272095
Time: prepare 0.0642    bound 0.2303    transfer 0.0127    finalize 0.0138    func 0.3419    
Accumulated time: func 3.3907    prepare 0.5446    bound 2.6747    transfer 0.0421    finalize 0.0613    
all_split False
======================Cut inference begins======================
max lb tensor(0.00723135) min lb tensor(-0.03045279)
Number of Verified Splits: 808 of 3006
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 20
#cuts 4-6: 6
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.244232177734375 
BICCOS Cumulative time: 1.2181966304779053
Preprocessing time: 0.09374451637268066 Inference time: 0.14270329475402832 Add cuts time: 0.006811380386352539 Cut analysis time: 0.0009729862213134766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03045 (27), -0.02969 (27), -0.02958 (27), -0.02945 (27), -0.02918 (27), -0.02881 (27), -0.02871 (27), -0.02870 (27), -0.02858 (27), -0.02844 (27), -0.02831 (27), -0.02808 (27), -0.02800 (27), -0.02795 (27), -0.02784 (27), -0.02783 (27), -0.02783 (27), -0.02757 (27), -0.02735 (27), -0.02720 (27), 
Length of domains: 2198
Time: pickout 0.0381    decision 0.0973    set_bounds 0.1394    solve 0.3425    add 0.0146    
Accumulated time: pickout 0.0988    decision 0.9998    set_bounds 0.7368    solve 3.2044    add 0.3390    
Current (lb-rhs): -0.03045278787612915
6747 domains visited
Cumulative time: 6.857228517532349

BaB round 14
batch: 2198
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1381] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026462167501449585
10 lb beta sum: 0.1532304584980011, worst -0.026438236236572266
Time: prepare 0.0927    bound 0.3044    transfer 0.0219    finalize 0.0214    func 0.4700    
Accumulated time: func 3.8607    prepare 0.6377    bound 2.9790    transfer 0.0640    finalize 0.0827    
all_split False
======================Cut inference begins======================
max lb tensor(0.00654912) min lb tensor(-0.02641755)
Number of Verified Splits: 1222 of 4396
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 22
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.38478708267211914 
BICCOS Cumulative time: 1.6029837131500244
Preprocessing time: 0.13764357566833496 Inference time: 0.23466801643371582 Add cuts time: 0.011307954788208008 Cut analysis time: 0.0011675357818603516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02642 (28), -0.02597 (28), -0.02579 (28), -0.02569 (28), -0.02566 (28), -0.02554 (28), -0.02523 (28), -0.02510 (28), -0.02502 (28), -0.02496 (28), -0.02491 (28), -0.02483 (28), -0.02478 (28), -0.02464 (28), -0.02435 (28), -0.02430 (28), -0.02418 (28), -0.02413 (28), -0.02409 (28), -0.02409 (28), 
Length of domains: 3174
Time: pickout 0.0373    decision 0.2773    set_bounds 0.2004    solve 0.4709    add 0.0180    
Accumulated time: pickout 0.1361    decision 1.2771    set_bounds 0.9372    solve 3.6753    add 0.3570    
Current (lb-rhs): -0.026417553424835205
9921 domains visited
Cumulative time: 8.263083934783936

BaB round 15
batch: 3174
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025019288063049316
10 lb beta sum: 0.09339054673910141, worst -0.025010913610458374
Time: prepare 0.1353    bound 0.4087    transfer 0.0101    finalize 0.0319    func 0.6293    
Accumulated time: func 4.4900    prepare 0.7734    bound 3.3878    transfer 0.0741    finalize 0.1146    
all_split False
======================Cut inference begins======================
max lb tensor(0.02006249) min lb tensor(-0.02499512)
Number of Verified Splits: 3753 of 6348
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 26
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.9755878448486328 
BICCOS Cumulative time: 2.5785715579986572
Preprocessing time: 0.19917845726013184 Inference time: 0.7448892593383789 Add cuts time: 0.03020024299621582 Cut analysis time: 0.00131988525390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02500 (29), -0.02439 (29), -0.02438 (29), -0.02424 (29), -0.02413 (29), -0.02412 (29), -0.02355 (29), -0.02352 (29), -0.02350 (29), -0.02350 (29), -0.02341 (29), -0.02337 (29), -0.02325 (29), -0.02320 (29), -0.02275 (29), -0.02273 (29), -0.02267 (29), -0.02267 (29), -0.02262 (29), -0.02253 (29), 
Length of domains: 2595
Time: pickout 0.0729    decision 0.3741    set_bounds 0.2951    solve 0.7962    add 0.0482    
Accumulated time: pickout 0.2090    decision 1.6513    set_bounds 1.2323    solve 4.4715    add 0.4051    
Current (lb-rhs): -0.024995118379592896
12516 domains visited
Cumulative time: 10.879118919372559

BaB round 16
batch: 2595
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 1374] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 1374] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0240328311920166
10 lb beta sum: 0.33907267451286316, worst -0.021790534257888794
Time: prepare 0.1165    bound 0.3552    transfer 0.0257    finalize 0.0266    func 0.5597    
Accumulated time: func 5.0497    prepare 0.8903    bound 3.7429    transfer 0.0998    finalize 0.1412    
all_split False
======================Cut inference begins======================
max lb tensor(0.47709739) min lb tensor(-0.02176940)
Number of Verified Splits: 3890 of 5190
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 28
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.9487769603729248 
BICCOS Cumulative time: 3.527348518371582
Preprocessing time: 0.16862154006958008 Inference time: 0.7592988014221191 Add cuts time: 0.019814729690551758 Cut analysis time: 0.0010418891906738281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02177 (30), -0.02115 (30), -0.02114 (30), -0.02090 (30), -0.02089 (30), -0.02078 (30), -0.02034 (30), -0.02031 (30), -0.02027 (30), -0.02023 (30), -0.02016 (30), -0.02015 (30), -0.02005 (30), -0.01990 (30), -0.01990 (30), -0.01985 (30), -0.01962 (30), -0.01961 (30), -0.01945 (30), -0.01933 (30), 
Length of domains: 1300
Time: pickout 0.0610    decision 0.1540    set_bounds 0.4634    solve 0.5618    add 0.0211    
Accumulated time: pickout 0.2700    decision 1.8052    set_bounds 1.6957    solve 5.0333    add 0.4262    
Current (lb-rhs): -0.021769404411315918
13816 domains visited
Cumulative time: 13.13318157196045

BaB round 17
batch: 1300
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7329075336456299, worst -0.02176964282989502
10 lb beta sum: 1.1357946395874023, worst -0.021756231784820557
Time: prepare 0.1143    bound 0.2084    transfer 0.0037    finalize 0.0127    func 0.5052    
Accumulated time: func 5.5549    prepare 1.0049    bound 3.9514    transfer 0.1035    finalize 0.1538    
all_split False
======================Cut inference begins======================
max lb tensor(0.24441999) min lb tensor(-0.02173617)
Number of Verified Splits: 1359 of 2600
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 28
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.35329389572143555 
BICCOS Cumulative time: 3.8806424140930176
Preprocessing time: 0.08181238174438477 Inference time: 0.2634923458099365 Add cuts time: 0.007026195526123047 Cut analysis time: 0.0009629726409912109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02174 (31), -0.02111 (31), -0.02087 (31), -0.02087 (31), -0.02074 (31), -0.02024 (31), -0.02011 (31), -0.02004 (31), -0.01989 (31), -0.01987 (31), -0.01983 (31), -0.01960 (31), -0.01959 (31), -0.01942 (31), -0.01927 (31), -0.01923 (31), -0.01913 (31), -0.01905 (31), -0.01903 (31), -0.01899 (31), 
Length of domains: 1241
Time: pickout 0.0301    decision 0.0818    set_bounds 0.1215    solve 0.5058    add 0.0104    
Accumulated time: pickout 0.3001    decision 1.8870    set_bounds 1.8172    solve 5.5390    add 0.4366    
Current (lb-rhs): -0.021736174821853638
15057 domains visited
Cumulative time: 14.25285029411316

BaB round 18
batch: 1241
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1910] [/input-8, 1861] [/input-8, 1910] [/input-8, 571] [/input-8, 1861] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 1910] [/input-8, 1861] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3153812885284424, worst -0.019326835870742798
10 lb beta sum: 1.3238078355789185, worst -0.0192643404006958
Time: prepare 0.1113    bound 0.2062    transfer 0.0128    finalize 0.0123    func 0.3592    
Accumulated time: func 5.9141    prepare 1.1165    bound 4.1576    transfer 0.1162    finalize 0.1661    
all_split False
======================Cut inference begins======================
max lb tensor(0.01489222) min lb tensor(-0.01922327)
Number of Verified Splits: 774 of 2482
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 28
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.24024105072021484 
BICCOS Cumulative time: 4.120883464813232
Preprocessing time: 0.0791177749633789 Inference time: 0.1550602912902832 Add cuts time: 0.005124092102050781 Cut analysis time: 0.0009388923645019531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01922 (32), -0.01888 (32), -0.01835 (32), -0.01831 (32), -0.01822 (32), -0.01801 (32), -0.01768 (32), -0.01761 (32), -0.01748 (32), -0.01735 (32), -0.01733 (32), -0.01707 (32), -0.01690 (32), -0.01689 (32), -0.01681 (32), -0.01677 (32), -0.01675 (32), -0.01655 (32), -0.01652 (32), -0.01649 (32), 
Length of domains: 1708
Time: pickout 0.0258    decision 0.0777    set_bounds 0.1140    solve 0.3604    add 0.0216    
Accumulated time: pickout 0.3259    decision 1.9647    set_bounds 1.9311    solve 5.8995    add 0.4582    
Current (lb-rhs): -0.019223272800445557
16765 domains visited
Cumulative time: 15.103445768356323

BaB round 19
batch: 1708
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2565058469772339, worst -0.017207235097885132
10 lb beta sum: 1.2565058469772339, worst -0.017153143882751465
Time: prepare 0.1518    bound 0.2574    transfer 0.0110    finalize 0.0160    func 0.4598    
Accumulated time: func 6.3739    prepare 1.2687    bound 4.4149    transfer 0.1272    finalize 0.1821    
all_split False
======================Cut inference begins======================
max lb tensor(0.00933838) min lb tensor(-0.01711532)
Number of Verified Splits: 1981 of 3416
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 29
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.5276157855987549 
BICCOS Cumulative time: 4.648499250411987
Preprocessing time: 0.10686635971069336 Inference time: 0.40862464904785156 Add cuts time: 0.010997533798217773 Cut analysis time: 0.0011272430419921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01712 (33), -0.01681 (33), -0.01624 (33), -0.01624 (33), -0.01603 (33), -0.01594 (33), -0.01556 (33), -0.01554 (33), -0.01540 (33), -0.01518 (33), -0.01515 (33), -0.01499 (33), -0.01497 (33), -0.01486 (33), -0.01480 (33), -0.01471 (33), -0.01467 (33), -0.01465 (33), -0.01448 (33), -0.01446 (33), 
Length of domains: 1435
Time: pickout 0.0375    decision 0.1053    set_bounds 0.3162    solve 0.4607    add 0.0113    
Accumulated time: pickout 0.3634    decision 2.0700    set_bounds 2.2474    solve 6.3601    add 0.4695    
Current (lb-rhs): -0.01711532473564148
18200 domains visited
Cumulative time: 16.583582878112793

BaB round 20
batch: 1435
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1812] [/input-8, 1812] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014954805374145508
10 lb beta sum: 0.28523674607276917, worst -0.014842689037322998
Time: prepare 0.0602    bound 0.2279    transfer 0.0039    finalize 0.0151    func 0.3262    
Accumulated time: func 6.7001    prepare 1.3292    bound 4.6428    transfer 0.1311    finalize 0.1972    
all_split False
======================Cut inference begins======================
max lb tensor(0.00836840) min lb tensor(-0.01482365)
Number of Verified Splits: 1233 of 2870
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 30
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.36532115936279297 
BICCOS Cumulative time: 5.01382040977478
Preprocessing time: 0.0924525260925293 Inference time: 0.26477551460266113 Add cuts time: 0.007098197937011719 Cut analysis time: 0.0009949207305908203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01482 (34), -0.01453 (34), -0.01405 (34), -0.01401 (34), -0.01374 (34), -0.01372 (34), -0.01331 (34), -0.01327 (34), -0.01327 (34), -0.01296 (34), -0.01291 (34), -0.01273 (34), -0.01265 (34), -0.01262 (34), -0.01257 (34), -0.01251 (34), -0.01244 (34), -0.01233 (34), -0.01220 (34), -0.01219 (34), 
Length of domains: 1637
Time: pickout 0.0343    decision 0.0885    set_bounds 0.1318    solve 0.5005    add 0.0075    
Accumulated time: pickout 0.3977    decision 2.1584    set_bounds 2.3792    solve 6.8606    add 0.4770    
Current (lb-rhs): -0.01482364535331726
19837 domains visited
Cumulative time: 17.728576183319092

BaB round 21
batch: 1637
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012669503688812256
10 lb beta sum: 0.21924413740634918, worst -0.012620002031326294
Time: prepare 0.0699    bound 0.2483    transfer 0.0045    finalize 0.0164    func 0.3626    
Accumulated time: func 7.0626    prepare 1.3994    bound 4.8912    transfer 0.1356    finalize 0.2137    
all_split False
======================Cut inference begins======================
max lb tensor(0.23587215) min lb tensor(-0.01259696)
Number of Verified Splits: 1942 of 3274
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 31
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.524486780166626 
BICCOS Cumulative time: 5.538307189941406
Preprocessing time: 0.10382890701293945 Inference time: 0.4120519161224365 Add cuts time: 0.00764155387878418 Cut analysis time: 0.0009644031524658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01260 (35), -0.01182 (35), -0.01175 (35), -0.01131 (35), -0.01104 (35), -0.01081 (35), -0.01053 (35), -0.01050 (35), -0.01047 (35), -0.01043 (35), -0.01037 (35), -0.01028 (35), -0.01019 (35), -0.00999 (35), -0.00997 (35), -0.00996 (35), -0.00996 (35), -0.00996 (35), -0.00983 (35), -0.00978 (35), 
Length of domains: 1332
Time: pickout 0.0345    decision 0.0989    set_bounds 0.1520    solve 0.3638    add 0.0149    
Accumulated time: pickout 0.4322    decision 2.2573    set_bounds 2.5312    solve 7.2244    add 0.4919    
Current (lb-rhs): -0.012596964836120605
21169 domains visited
Cumulative time: 18.93883967399597

BaB round 22
batch: 1332
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010208159685134888
10 lb beta sum: 0.16264551877975464, worst -0.010136008262634277
Time: prepare 0.0548    bound 0.2194    transfer 0.0145    finalize 0.0130    func 0.3192    
Accumulated time: func 7.3819    prepare 1.4546    bound 5.1105    transfer 0.1500    finalize 0.2267    
all_split False
======================Cut inference begins======================
max lb tensor(0.23895544) min lb tensor(-0.01012483)
Number of Verified Splits: 2090 of 2664
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.545086145401001 
BICCOS Cumulative time: 6.083393335342407
Preprocessing time: 0.08572244644165039 Inference time: 0.44574952125549316 Add cuts time: 0.012486934661865234 Cut analysis time: 0.0011272430419921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01012 (36), -0.00934 (36), -0.00926 (36), -0.00887 (36), -0.00856 (36), -0.00834 (36), -0.00808 (36), -0.00803 (36), -0.00803 (36), -0.00803 (36), -0.00787 (36), -0.00782 (36), -0.00772 (36), -0.00751 (36), -0.00747 (36), -0.00747 (36), -0.00743 (36), -0.00733 (36), -0.00730 (36), -0.00729 (36), 
Length of domains: 574
Time: pickout 0.0325    decision 0.2242    set_bounds 0.1227    solve 0.3206    add 0.0072    
Accumulated time: pickout 0.4647    decision 2.4815    set_bounds 2.6539    solve 7.5450    add 0.4991    
Current (lb-rhs): -0.010124832391738892
21743 domains visited
Cumulative time: 20.211957693099976

BaB round 23
batch: 574
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1350] [/input-8, 1350] [/input-8, 1902] [/input-8, 1350] [/input-8, 1350] [/input-8, 1350] [/input-8, 1350] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006720989942550659
10 lb beta sum: 0.15004318952560425, worst -0.006695449352264404
Time: prepare 0.0237    bound 0.1523    transfer 0.0019    finalize 0.0051    func 0.1906    
Accumulated time: func 7.5724    prepare 1.4786    bound 5.2628    transfer 0.1519    finalize 0.2318    
all_split False
======================Cut inference begins======================
max lb tensor(0.71170127) min lb tensor(-0.00667667)
Number of Verified Splits: 1070 of 1148
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.26700925827026367 
BICCOS Cumulative time: 6.350402593612671
Preprocessing time: 0.03632998466491699 Inference time: 0.2265183925628662 Add cuts time: 0.0030777454376220703 Cut analysis time: 0.0010831356048583984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00668 (37), -0.00589 (37), -0.00581 (37), -0.00549 (37), -0.00511 (37), -0.00471 (37), -0.00464 (37), -0.00458 (37), -0.00457 (37), -0.00401 (37), -0.00392 (37), -0.00387 (37), -0.00384 (37), -0.00377 (37), -0.00371 (37), -0.00338 (37), -0.00325 (37), -0.00319 (37), -0.00318 (37), -0.00312 (37), 
Length of domains: 78
Time: pickout 0.0148    decision 0.0425    set_bounds 0.0520    solve 0.1926    add 0.0017    
Accumulated time: pickout 0.4795    decision 2.5240    set_bounds 2.7059    solve 7.7376    add 0.5009    
Current (lb-rhs): -0.006676673889160156
21821 domains visited
Cumulative time: 20.791985750198364

BaB round 24
batch: 78
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
split level 1: [/input-8, 1902] [/input-8, 1019] [/input-8, 1350] [/input-8, 1902] [/input-8, 1902] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1902] [/input-8, 1350] 
cut re-enabled after branching node selection
0 lb beta sum: 0.40081122517585754, worst -0.0018240511417388916
10 lb beta sum: 0.40081122517585754, worst -0.0018003582954406738
Time: prepare 0.0140    bound 0.1378    transfer 0.0017    finalize 0.0017    func 0.1581    
Accumulated time: func 7.7306    prepare 1.4928    bound 5.4007    transfer 0.1536    finalize 0.2335    
all_split False
======================Cut inference begins======================
max lb tensor(0.24842736) min lb tensor(-0.00178468)
Number of Verified Splits: 298 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.07826471328735352 
BICCOS Cumulative time: 6.428667306900024
Preprocessing time: 0.009544849395751953 Inference time: 0.06606149673461914 Add cuts time: 0.0014417171478271484 Cut analysis time: 0.0012166500091552734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00178 (39), -0.00154 (39), -0.00153 (39), -0.00098 (39), -0.00090 (39), -0.00071 (39), -0.00070 (39), -0.00066 (39), -0.00065 (39), -0.00042 (39), -0.00039 (39), -0.00026 (39), -0.00026 (39), -0.00017 (39), 
Length of domains: 14
Time: pickout 0.0037    decision 0.0167    set_bounds 0.0151    solve 0.1582    add 0.0012    
Accumulated time: pickout 0.4832    decision 2.5407    set_bounds 2.7209    solve 7.8958    add 0.5020    
Current (lb-rhs): -0.001784682273864746
21835 domains visited
Cumulative time: 21.067395210266113

BaB round 25
batch: 14
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] 
split level 1: [/input-8, 944] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 944] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 944] 
split level 2: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1019] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 1902] 
split level 3: [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2700290381908417, worst 0.007380008697509766

all verified at 0th iter
Time: prepare 0.0097    bound 0.0055    transfer 0.0011    finalize 0.0013    func 0.0191    
Accumulated time: func 7.7496    prepare 1.5028    bound 5.4061    transfer 0.1547    finalize 0.2348    
all_split False
======================Cut inference begins======================
max lb tensor(0.02001730) min lb tensor(0.00738001)
Number of Verified Splits: 224 of 224
No cut inferred: All or none verified.
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 3
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.006825685501098633 
BICCOS Cumulative time: 6.435492992401123
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.0146    set_bounds 0.0134    solve 0.0191    add 0.0003    
Accumulated time: pickout 0.4849    decision 2.5553    set_bounds 2.7344    solve 7.9149    add 0.5023    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
21835 domains visited
Cumulative time: 21.124207496643066


Properties batch 3, size 1
Remaining timeout: 177.1816327571869
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 177.18151831626892
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 177.18149542808533
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 177.1814706325531
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 177.18144726753235
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 177.18142867088318
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 22.8186 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.93376207, -6.71706390, -2.45791340, -1.94786179, -3.43069839,
         -0.01497591, -4.77984476, -2.99772120, -6.68260002, -5.67084932]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 775] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 775] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31793857, 4.18651581, 1.24683022, 1.51535189, 1.97004509, 3.30764079,
         1.65014255, 4.22077990, 3.37990856]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0306 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [623]; unstable size 623; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 623] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 623] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 623] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 252] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.65812516,  1.61883914, -2.82501483, -1.14642096, -1.45474672,
         -0.98869812, -1.28088367, -0.29947937,  0.88783264]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534],
         [ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07005119, -1.58760595, -0.32461691, -0.37417173, -0.11454773,
          -0.16214657,  1.70805979]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0834 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [549]; unstable size 549; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 549] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 549] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 549] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 167] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18721008,  2.73353958,  3.30611515,  2.10224628,  4.03056717,
          3.46064472,  2.85602856, -0.83577251,  1.03666818]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.89133787,  -4.93664169,  -8.66371727,  -9.56306934,  -8.16865921,
          -10.62470722,  -9.37549400,  -9.37268066,  -4.54248905,  -6.85806894]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39415264]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0579 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 636] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 636] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 231] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.34137440,  0.70376468,  3.10112047,  1.09246969,  3.41379452,
          3.82853699,  1.99575424, -0.16639972,  3.65535498]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.98635578, -17.72829819, -13.82835865, -16.31543732, -14.73994732,
          -16.84854698, -17.46200371, -16.24205780, -12.71058083, -17.06022263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.72422504]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1167 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.566566467285156
alpha/beta optimization time: 1.2640647888183594
initial alpha-crown bounds: tensor([[ 4.41341686,  0.78251982,  3.14730644,  1.16422820,  3.46807528,
          3.87461925,  2.07521486, -0.08284035,  3.72402620]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08284035325050354
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54685235023499
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5468146800995
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.54678893089294
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5467665195465
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5467483997345
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.54672861099243
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.54671001434326
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.54668831825256
Verifying property 7 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08284035]], device='cuda:0') need to verify.
Model prediction is: tensor([-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
        -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08284035]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 636
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 879
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001163482666015625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08283877372741699
10 lb beta sum: 0.0, worst -0.08285164833068848
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0001    func 0.0565    
Accumulated time: func 0.0565    prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] 
split level 1: [/input-12, 17] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 9] 
split level 5: [/input-8, 1516] 
split level 6: [/input-8, 1388] 
split level 7: [/input-8, 1523] 
split level 8: [/input-12, 99] 
split level 9: [/input-8, 1323] 
split level 10: [/input-8, 1386] 
split level 11: [/input-8, 1396] 
split level 12: [/input-8, 1076] 
split level 13: [/input-8, 618] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1077] 
split level 16: [/input-8, 1342] 
split level 17: [/input-8, 1395] 
split level 18: [/input-8, 1339] 
split level 19: [/input-8, 1390] 
split level 20: [/input-12, 40] 
split level 21: [/input-8, 1084] 
split level 22: [/input-8, 294] 
split level 23: [/input-8, 666] 
split level 24: [/input-8, 421] 
split level 25: [/input-8, 673] 
split level 26: [/input-8, 1070] 
split level 27: [/input-8, 571] 
split level 28: [/input-8, 1340] 
split level 29: [/input, 1659] 
split level 30: [/input-8, 1443] 
split level 31: [/input-8, 657] 
split level 32: [/input-8, 1341] 
split level 33: [/input-8, 1133] 
split level 34: [/input-8, 687] 
split level 35: [/input-8, 403] 
split level 36: [/input, 1660] 
split level 37: [/input-12, 32] 
split level 38: [/input-8, 1514] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 484] 
split level 41: [/input, 1625] 
split level 42: [/input-8, 1905] 
split level 43: [/input-8, 402] 
split level 44: [/input-8, 295] 
split level 45: [/input-8, 796] 
split level 46: [/input, 4066] 
split level 47: [/input-8, 278] 
split level 48: [/input, 3399] 
split level 49: [/input-8, 846] 
split level 50: [/input-8, 1085] 
split level 51: [/input, 199] 
split level 52: [/input-8, 803] 
split level 53: [/input-8, 1134] 
split level 54: [/input-8, 1573] 
split level 55: [/input, 168] 
split level 56: [/input-8, 871] 
split level 57: [/input-8, 1138] 
split level 58: [/input-8, 924] 
split level 59: [/input, 447] 
split level 60: [/input, 1595] 
split level 61: [/input-8, 486] 
split level 62: [/input-8, 1436] 
split level 63: [/input-8, 932] 
split level 64: [/input-8, 1402] 
split level 65: [/input-8, 1056] 
split level 66: [/input-8, 1264] 
split level 67: [/input-8, 1136] 
split level 68: [/input-8, 1130] 
split level 69: [/input-8, 1513] 
split level 70: [/input-8, 404] 
split level 71: [/input-8, 1334] 
split level 72: [/input-8, 993] 
split level 73: [/input, 462] 
split level 74: [/input, 1624] 
split level 75: [/input-8, 483] 
split level 76: [/input, 1365] 
split level 77: [/input, 190] 
split level 78: [/input, 2136] 
split level 79: [/input-8, 521] 
split level 80: [/input-8, 1110] 
split level 81: [/input-8, 97] 
split level 82: [/input, 4069] 
split level 83: [/input, 407] 
split level 84: [/input-8, 77] 
split level 85: [/input, 226] 
split level 86: [/input-8, 1446] 
split level 87: [/input, 4049] 
split level 88: [/input-8, 1307] 
split level 89: [/input, 2135] 
split level 90: [/input, 2244] 
split level 91: [/input, 1335] 
split level 92: [/input, 459] 
split level 93: [/input, 4035] 
split level 94: [/input-8, 795] 
split level 95: [/input, 1629] 
split level 96: [/input-8, 1378] 
split level 97: [/input, 3157] 
split level 98: [/input, 2152] 
split level 99: [/input, 4050] 
split level 100: [/input, 2753] 
split level 101: [/input, 1643] 
split level 102: [/input, 3492] 
split level 103: [/input, 4056] 
split level 104: [/input, 4067] 
split level 105: [/input, 2214] 
split level 106: [/input-8, 1485] 
split level 107: [/input-8, 1141] 
split level 108: [/input, 225] 
split level 109: [/input, 3753] 
split level 110: [/input-8, 2025] 
split level 111: [/input-8, 1615] 
split level 112: [/input, 2187] 
split level 113: [/input, 3429] 
split level 114: [/input-8, 685] 
split level 115: [/input, 358] 
split level 116: [/input, 488] 
split level 117: [/input-8, 2034] 
split level 118: [/input, 3277] 
split level 119: [/input-8, 1040] 
split level 120: [/input-8, 1438] 
split level 121: [/input, 3140] 
split level 122: [/input, 3781] 
split level 123: [/input, 1430] 
split level 124: [/input-8, 461] 
split level 125: [/input-8, 81] 
split level 126: [/input, 2360] 
split level 127: [/input, 3142] 
split level 128: [/input, 2139] 
split level 129: [/input, 242] 
split level 130: [/input, 492] 
split level 131: [/input, 2198] 
split level 132: [/input, 457] 
split level 133: [/input-8, 2033] 
split level 134: [/input, 458] 
split level 135: [/input, 2119] 
split level 136: [/input, 296] 
split level 137: [/input, 2373] 
split level 138: [/input-8, 302] 
split level 139: [/input, 3125] 
split level 140: [/input-8, 975] 
split level 141: [/input-8, 642] 
split level 142: [/input, 3709] 
split level 143: [/input-8, 1472] 
split level 144: [/input-8, 2037] 
split level 145: [/input, 3797] 
split level 146: [/input, 3737] 
split level 147: [/input, 3960] 
split level 148: [/input, 3445] 
split level 149: [/input-8, 1473] 
split level 150: [/input-8, 423] 
split level 151: [/input-8, 1346] 
split level 152: [/input-8, 1021] 
split level 153: [/input, 3263] 
split level 154: [/input, 3126] 
split level 155: [/input, 3292] 
split level 156: [/input, 3231] 
split level 157: [/input, 280] 
split level 158: [/input, 312] 
split level 159: [/input-8, 839] 
split level 160: [/input, 3411] 
split level 161: [/input, 1446] 
split level 162: [/input, 279] 
split level 163: [/input, 2256] 
split level 164: [/input, 2548] 
split level 165: [/input, 227] 
split level 166: [/input-8, 1818] 
split level 167: [/input, 2513] 
split level 168: [/input, 1439] 
split level 169: [/input, 3187] 
split level 170: [/input, 2165] 
split level 171: [/input, 2228] 
split level 172: [/input, 876] 
split level 173: [/input, 1966] 
split level 174: [/input, 136] 
split level 175: [/input-8, 2032] 
split level 176: [/input, 1455] 
split level 177: [/input-8, 1240] 
split level 178: [/input-8, 864] 
split level 179: [/input, 2794] 
split level 180: [/input, 2530] 
split level 181: [/input, 1160] 
split level 182: [/input, 4076] 
split level 183: [/input, 3870] 
split level 184: [/input, 1437] 
split level 185: [/input, 293] 
split level 186: [/input, 1469] 
split level 187: [/input, 3260] 
split level 188: [/input-8, 2038] 
split level 189: [/input, 2181] 
split level 190: [/input, 3307] 
split level 191: [/input, 1414] 
split level 192: [/input, 2532] 
split level 193: [/input, 2374] 
split level 194: [/input, 2586] 
split level 195: [/input, 3813] 
split level 196: [/input, 1347] 
split level 197: [/input-8, 945] 
split level 198: [/input, 877] 
split level 199: [/input, 282] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08275708556175232
10 lb beta sum: 0.0, worst -0.08277326822280884
Time: prepare 0.0119    bound 0.1038    transfer 0.0043    finalize 0.0031    func 0.1258    
Accumulated time: func 0.1822    prepare 0.0224    bound 0.1598    transfer 0.0044    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.28778768) min lb tensor(-0.08275348)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011276960372924805 
BICCOS Cumulative time: 0.011276960372924805
Preprocessing time: 0.010339975357055664 Inference time: 0.0004987716674804688 Add cuts time: 0.00020170211791992188 Cut analysis time: 0.00023651123046875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5207    set_bounds 0.0094    solve 0.1259    add 0.0102    
Accumulated time: pickout 0.0004    decision 0.5207    set_bounds 0.0094    solve 0.1259    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([44]), tensor([-1.]), tensor([0]), tensor([3.80912524e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([44]), tensor([1.]), tensor([0]), tensor([3.80912524e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007973730564117432

all verified at 1th iter
Time: prepare 0.0004    bound 0.0106    transfer 0.0001    finalize 0.0001    func 0.0112    
Accumulated time: func 0.1934    prepare 0.0228    bound 0.1703    transfer 0.0045    finalize 0.0034    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.57862162590027
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4215 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [634]; unstable size 634; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 634] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 634] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 634] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 244] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24761391,  2.93305993, -0.23562002, -0.90710044,  0.36504614,
         -1.18999720,  0.08451024,  3.42949820,  2.57326126]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536],
         [ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.63690901,  0.09095192, -0.22970200]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.68137455, -11.11765766,  -8.01337242,  -9.71148872,  -8.79326439,
         -10.48354340, -10.25170231, -11.03672123,  -9.45322895, -10.81242466]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [555]; unstable size 555; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 555] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 555] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 555] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 117] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.02142048, 2.59467483, 4.01387215, 3.15092182, 4.53091240, 4.70333385,
         4.88892937, 3.85758591, 5.04689932]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0603 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.59310770, -8.98699856, -1.98446643, -1.86275947, -2.02259350,
         -2.92739010,  0.91057259, -5.46356249, -8.21526527, -9.22765255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 269, 1, 455] with unstable size 268 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 455] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [268]; unstable size 268; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 268] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 268] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.81164742, 7.72943830, 1.56485271, 1.38150632, 1.52279830, 2.12491894,
         4.28514671, 7.13579178, 8.30115986]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0473 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 611] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 611] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 253] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99095178,  5.73210239, -0.06892395,  3.12794590,  2.97227120,
          2.38821363,  1.26657963,  4.99652910,  5.76884413]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.49070644, -14.02054882,  -6.77474308, -10.01947308,  -6.14811516,
           -9.94418907,  -9.79620838,  -8.69151878, -12.92936230, -13.88387489]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.62662792]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1209 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 9th iter
best_l after optimization: 29.920612335205078
alpha/beta optimization time: 0.12326884269714355
initial alpha-crown bounds: tensor([[3.09697318e+00, 5.84763908e+00, 1.91965699e-03, 3.17881107e+00,
         3.02511549e+00, 2.45539427e+00, 1.32388210e+00, 5.10637760e+00,
         5.88449955e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.0019196569919586182
verified with init bound!
Result: safe-incomplete in 0.3026 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 646] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 646] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 171] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.06740236,  0.96643007,  1.28222132,  0.65053391,  2.26329422,
          1.44973636,  2.01239896,  0.51638043, -0.32224536]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]100%|██████████| 1/1 [00:00<00:00,  8.52it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.57936287, -6.66815186, -7.30564022, -6.68102264, -8.49092770,
          -7.56898642, -7.92801905, -6.75226736, -5.11898041, -4.89544821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.22353220]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1202 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.232053756713867
alpha/beta optimization time: 1.2729721069335938
initial alpha-crown bounds: tensor([[ 1.09233963,  1.00209713,  1.32075167,  0.68928838,  2.30610156,
          1.48740721,  2.04873085,  0.55730712, -0.27196908]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2719690799713135
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5580976009369
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.55805850028992
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55803155899048
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.55800604820251
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.55798721313477
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.55796885490417
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.55795073509216
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.55793118476868
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.55790758132935
Verifying property 8 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27196908]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
        -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27196908]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 166
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 827
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011420249938964844
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27196741104125977
10 lb beta sum: 0.0, worst -0.27197265625
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    func 0.0568    
Accumulated time: func 0.0568    prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 51] 
split level 5: [/input-8, 1890] 
split level 6: [/input-12, 55] 
split level 7: [/input-8, 1121] 
split level 8: [/input-8, 477] 
split level 9: [/input-8, 1124] 
split level 10: [/input-8, 1888] 
split level 11: [/input-8, 1331] 
split level 12: [/input-8, 1132] 
split level 13: [/input-8, 1840] 
split level 14: [/input-8, 1131] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 1898] 
split level 17: [/input-8, 1506] 
split level 18: [/input-8, 802] 
split level 19: [/input-8, 1069] 
split level 20: [/input-8, 1113] 
split level 21: [/input-8, 932] 
split level 22: [/input, 1787] 
split level 23: [/input, 1518] 
split level 24: [/input-12, 54] 
split level 25: [/input, 2676] 
split level 26: [/input, 1770] 
split level 27: [/input-8, 1067] 
split level 28: [/input-8, 1049] 
split level 29: [/input-8, 1062] 
split level 30: [/input, 762] 
split level 31: [/input-8, 413] 
split level 32: [/input, 3581] 
split level 33: [/input, 1768] 
split level 34: [/input, 3383] 
split level 35: [/input, 1517] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 942] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 1894] 
split level 40: [/input-8, 1332] 
split level 41: [/input-8, 1509] 
split level 42: [/input-8, 1382] 
split level 43: [/input, 2168] 
split level 44: [/input, 3566] 
split level 45: [/input-8, 808] 
split level 46: [/input, 3580] 
split level 47: [/input-8, 623] 
split level 48: [/input, 2420] 
split level 49: [/input, 2269] 
split level 50: [/input, 2362] 
split level 51: [/input-8, 769] 
split level 52: [/input-8, 1897] 
split level 53: [/input-8, 1906] 
split level 54: [/input-8, 1857] 
split level 55: [/input, 2283] 
split level 56: [/input, 2617] 
split level 57: [/input, 4075] 
split level 58: [/input-8, 1465] 
split level 59: [/input, 1368] 
split level 60: [/input-8, 2041] 
split level 61: [/input, 1769] 
split level 62: [/input-8, 409] 
split level 63: [/input, 3914] 
split level 64: [/input-8, 81] 
split level 65: [/input-8, 2033] 
split level 66: [/input, 2683] 
split level 67: [/input, 3550] 
split level 68: [/input-8, 89] 
split level 69: [/input, 1753] 
split level 70: [/input, 2954] 
split level 71: [/input, 3043] 
split level 72: [/input-8, 1581] 
split level 73: [/input, 2798] 
split level 74: [/input-8, 1482] 
split level 75: [/input, 1519] 
split level 76: [/input-8, 1080] 
split level 77: [/input, 2884] 
split level 78: [/input, 3942] 
split level 79: [/input-8, 2046] 
split level 80: [/input, 2392] 
split level 81: [/input-8, 1441] 
split level 82: [/input-8, 893] 
split level 83: [/input-8, 96] 
split level 84: [/input, 1534] 
split level 85: [/input, 1987] 
split level 86: [/input-8, 1498] 
split level 87: [/input, 3929] 
split level 88: [/input-8, 1910] 
split level 89: [/input, 2691] 
split level 90: [/input, 3945] 
split level 91: [/input, 2393] 
split level 92: [/input-8, 72] 
split level 93: [/input-8, 1743] 
split level 94: [/input-8, 1440] 
split level 95: [/input, 2712] 
split level 96: [/input, 1949] 
split level 97: [/input, 2039] 
split level 98: [/input, 1622] 
split level 99: [/input, 1980] 
split level 100: [/input, 2005] 
split level 101: [/input, 581] 
split level 102: [/input, 3578] 
split level 103: [/input, 1503] 
split level 104: [/input, 3415] 
split level 105: [/input, 3928] 
split level 106: [/input, 1651] 
split level 107: [/input, 2359] 
split level 108: [/input, 1995] 
split level 109: [/input, 2949] 
split level 110: [/input-8, 1751] 
split level 111: [/input, 2932] 
split level 112: [/input, 2377] 
split level 113: [/input, 3907] 
split level 114: [/input, 3722] 
split level 115: [/input, 3796] 
split level 116: [/input, 1948] 
split level 117: [/input, 310] 
split level 118: [/input, 3779] 
split level 119: [/input-8, 2031] 
split level 120: [/input, 1964] 
split level 121: [/input, 1212] 
split level 122: [/input, 2011] 
split level 123: [/input, 4078] 
split level 124: [/input, 1685] 
split level 125: [/input, 1752] 
split level 126: [/input, 1988] 
split level 127: [/input, 2407] 
split level 128: [/input-8, 789] 
split level 129: [/input, 2826] 
split level 130: [/input-8, 2035] 
split level 131: [/input, 2388] 
split level 132: [/input, 3978] 
split level 133: [/input, 3718] 
split level 134: [/input, 1767] 
split level 135: [/input, 3310] 
split level 136: [/input, 1791] 
split level 137: [/input, 2542] 
split level 138: [/input, 3927] 
split level 139: [/input, 628] 
split level 140: [/input-8, 1371] 
split level 141: [/input-8, 2037] 
split level 142: [/input-8, 2019] 
split level 143: [/input, 2711] 
split level 144: [/input, 2994] 
split level 145: [/input, 3110] 
split level 146: [/input, 1592] 
split level 147: [/input-8, 936] 
split level 148: [/input-8, 2034] 
split level 149: [/input, 2024] 
split level 150: [/input, 2550] 
split level 151: [/input, 1502] 
split level 152: [/input, 2008] 
split level 153: [/input, 3180] 
split level 154: [/input, 3979] 
split level 155: [/input, 2900] 
split level 156: [/input, 3997] 
split level 157: [/input, 3730] 
split level 158: [/input, 3996] 
split level 159: [/input, 3027] 
split level 160: [/input-8, 2036] 
split level 161: [/input, 4012] 
split level 162: [/input, 2004] 
split level 163: [/input, 2023] 
split level 164: [/input, 2006] 
split level 165: [/input, 3398] 
split level 166: [/input, 2916] 
split level 167: [/input-8, 1488] 
split level 168: [/input, 2868] 
split level 169: [/input, 231] 
split level 170: [/input, 3128] 
split level 171: [/input, 2184] 
split level 172: [/input-8, 1974] 
split level 173: [/input, 3143] 
split level 174: [/input-8, 1032] 
split level 175: [/input, 3159] 
split level 176: [/input, 2007] 
split level 177: [/input, 2380] 
split level 178: [/input, 1400] 
split level 179: [/input, 3111] 
split level 180: [/input, 1873] 
split level 181: [/input, 2021] 
split level 182: [/input, 1383] 
split level 183: [/input, 3890] 
split level 184: [/input, 2022] 
split level 185: [/input, 3926] 
split level 186: [/input-8, 1618] 
split level 187: [/input, 3723] 
split level 188: [/input-8, 1449] 
split level 189: [/input, 2010] 
split level 190: [/input, 3156] 
split level 191: [/input, 1287] 
split level 192: [/input-8, 157] 
split level 193: [/input-8, 1501] 
split level 194: [/input, 2137] 
split level 195: [/input, 2918] 
split level 196: [/input, 2858] 
split level 197: [/input-8, 1416] 
split level 198: [/input, 618] 
split level 199: [/input, 1260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27196717262268066
10 lb beta sum: 0.0, worst -0.2719740867614746
Time: prepare 0.0118    bound 0.1031    transfer 0.0024    finalize 0.0031    func 0.1232    
Accumulated time: func 0.1800    prepare 0.0222    bound 0.1594    transfer 0.0025    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.31710291) min lb tensor(-0.27196550)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.011317968368530273 
BICCOS Cumulative time: 0.011317968368530273
Preprocessing time: 0.010205507278442383 Inference time: 0.0002846717834472656 Add cuts time: 0.00010204315185546875 Cut analysis time: 0.0007257461547851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26063 (1), -0.26061 (1), -0.26035 (1), -0.26031 (1), -0.26028 (1), -0.25989 (1), -0.25972 (1), -0.25968 (1), -0.25931 (1), -0.25924 (1), -0.25869 (1), -0.25819 (1), -0.25739 (1), -0.25723 (1), -0.25698 (1), -0.25687 (1), -0.25671 (1), -0.25577 (1), -0.25550 (1), -0.25478 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5202    set_bounds 0.0097    solve 0.1233    add 0.0717    
Accumulated time: pickout 0.0003    decision 0.5202    set_bounds 0.0097    solve 0.1233    add 0.0717    
Current (lb-rhs): -0.2606329917907715
50 domains visited
Cumulative time: 0.7996277809143066

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 68] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 3: [/input-12, 1] [/input-8, 1890] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24576425552368164
10 lb beta sum: 1.0268968343734741, worst -0.03684002161026001
Time: prepare 0.0078    bound 0.1290    transfer 0.0008    finalize 0.0028    func 0.1433    
Accumulated time: func 0.3233    prepare 0.0303    bound 0.2885    transfer 0.0033    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.53197277) min lb tensor(-0.03660566)
Number of Verified Splits: 241 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.02555227279663086 
BICCOS Cumulative time: 0.03687024116516113
Preprocessing time: 0.012336015701293945 Inference time: 0.00895071029663086 Add cuts time: 0.0037698745727539062 Cut analysis time: 0.0004956722259521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01761 (2), -0.01758 (2), -0.01756 (2), -0.01755 (2), -0.01751 (2), -0.01738 (2), -0.01686 (2), -0.01683 (2), -0.01681 (2), -0.01670 (2), -0.01540 (2), -0.01538 (2), -0.01537 (2), -0.01519 (2), -0.01439 (2), -0.01439 (2), -0.01437 (2), -0.01430 (2), -0.01429 (2), -0.01427 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0202    set_bounds 0.0116    solve 0.1434    add 0.0973    
Accumulated time: pickout 0.0015    decision 0.5404    set_bounds 0.0213    solve 0.2667    add 0.1690    
Current (lb-rhs): -0.017612695693969727
100 domains visited
Cumulative time: 1.0991604328155518

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 68] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 1] [/input-12, 68] [/input-12, 78] [/input-12, 68] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 68] [/input-12, 68] [/input-12, 78] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 78] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22659873962402344

all verified at 8th iter
Time: prepare 0.0085    bound 0.0676    transfer 0.0008    finalize 0.0027    func 0.0822    
Accumulated time: func 0.4055    prepare 0.0391    bound 0.3561    transfer 0.0040    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.42608333) min lb tensor(0.00041413)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.03842926025390625 
BICCOS Cumulative time: 0.07529950141906738
Preprocessing time: 0.012358427047729492 Inference time: 0.015445947647094727 Add cuts time: 0.009172439575195312 Cut analysis time: 0.0014524459838867188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0199    set_bounds 0.0160    solve 0.0824    add 0.0237    
Accumulated time: pickout 0.0028    decision 0.5603    set_bounds 0.0374    solve 0.3490    add 0.1927    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [1.4948109416934585e-10], [0]), '/input-12': (tensor([21, 68]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.56781843e-11, 1.58575818e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [1.4948109416934585e-10], [0]), '/input-12': (tensor([21, 68]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.56781843e-11, 1.85789336e-02]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [1.4948109416934585e-10], [0]), '/input-12': (tensor([21]), tensor([1.]), tensor([0]), tensor([4.08575951e-11]), tensor([1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1331]), tensor([1.]), tensor([0]), tensor([9.01910768e-11]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  4
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27009081840515137
10 lb beta sum: 2.5700511932373047, worst -0.009092330932617188
Time: prepare 0.0005    bound 0.1476    transfer 0.0001    finalize 0.0002    func 0.1484    
Accumulated time: func 0.5539    prepare 0.0395    bound 0.5036    transfer 0.0042    finalize 0.0090    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-8, 1890] 
split level 5: [/input-8, 1132] 
split level 6: [/input-8, 1131] 
split level 7: [/input-8, 1898] 
cut re-enabled after branching node selection
0 lb beta sum: 5.274028778076172, worst 0.02057957649230957

all verified at 0th iter
Time: prepare 0.0116    bound 0.0059    transfer 0.0013    finalize 0.0015    func 0.0220    
Accumulated time: func 0.5759    prepare 0.0516    bound 0.5095    transfer 0.0054    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(1.32283831) min lb tensor(0.02057958)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.007695674896240234 
BICCOS Cumulative time: 0.08299517631530762
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0227    set_bounds 0.0265    solve 0.0221    add 0.0001    
Accumulated time: pickout 0.0033    decision 0.5831    set_bounds 0.0638    solve 0.3711    add 0.1928    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.5218837261199951

Result: safe in 3.1605 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 667] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 667] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60612774,  4.23385715,  0.99936318,  2.04068351, -0.70643765,
          3.00155091,  1.31167316,  4.90406275,  3.47214985]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
          -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44388580]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0780 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20003605, -18.01286888, -15.99082375, -17.43127060, -15.99804783,
         -18.05647850, -17.26184273, -18.19654465, -14.18293667, -18.52462387]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 575] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 575] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 277] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.64699459, 2.80865288, 4.23958683, 2.61277056, 4.73358536, 3.88175774,
         4.35204315, 1.01147747, 5.09978485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0309 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.36256695, -13.41296291,  -7.44461441,  -8.80130768,  -6.03208971,
          -9.45968819,  -8.73321247,  -9.01270103, -12.02322006, -13.37573814]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 544] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 544] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 299] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.81327701, 5.48521423, 0.46946645, 1.82796884, 2.35864878, 1.48084855,
         1.92163301, 4.35953045, 5.34309292]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 659] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 162] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62464428,  3.89426279,  0.79460710,  0.29400671,  1.47056746,
          1.78599691, -0.22968006,  2.20870352,  2.15642881]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.56it/s]100%|██████████| 1/1 [00:00<00:00,  8.55it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.89979172, -7.36104774, -3.67233706, -2.66874647, -4.12950802,
          -2.08822346, -4.72593451, -2.15821362, -6.01429844, -5.55949211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06999016]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1200 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 16.392478942871094
alpha/beta optimization time: 1.2814769744873047
initial alpha-crown bounds: tensor([[ 3.67620063,  3.94920111,  0.83800352,  0.30350497,  1.50146973,
          1.81741750, -0.19317877,  2.29632831,  2.20353270]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.19317877292633057
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54064512252808
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.540607213974
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.54058361053467
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.54056310653687
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.54054427146912
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5405249595642
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.54050636291504
Verifying property 6 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19317877]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
        -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19317877]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 659
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 834
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011706352233886719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1931774616241455
10 lb beta sum: 0.0, worst -0.19318127632141113
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    func 0.0567    
Accumulated time: func 0.0567    prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 68] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 53] 
split level 6: [/input-8, 110] 
split level 7: [/input-8, 926] 
split level 8: [/input-8, 1460] 
split level 9: [/input-8, 162] 
split level 10: [/input-12, 64] 
split level 11: [/input-8, 486] 
split level 12: [/input-8, 1001] 
split level 13: [/input-8, 573] 
split level 14: [/input-8, 1017] 
split level 15: [/input-8, 1506] 
split level 16: [/input-8, 1058] 
split level 17: [/input-8, 998] 
split level 18: [/input-8, 102] 
split level 19: [/input-8, 1453] 
split level 20: [/input-8, 93] 
split level 21: [/input-8, 2036] 
split level 22: [/input-8, 619] 
split level 23: [/input-8, 1461] 
split level 24: [/input-8, 1329] 
split level 25: [/input, 2375] 
split level 26: [/input-8, 1523] 
split level 27: [/input-8, 598] 
split level 28: [/input, 481] 
split level 29: [/input-8, 1018] 
split level 30: [/input-8, 1009] 
split level 31: [/input-8, 2024] 
split level 32: [/input-8, 1421] 
split level 33: [/input-8, 993] 
split level 34: [/input-8, 1869] 
split level 35: [/input-8, 105] 
split level 36: [/input, 436] 
split level 37: [/input, 2430] 
split level 38: [/input, 1724] 
split level 39: [/input-8, 490] 
split level 40: [/input-8, 1765] 
split level 41: [/input, 2748] 
split level 42: [/input-8, 979] 
split level 43: [/input-8, 924] 
split level 44: [/input-8, 479] 
split level 45: [/input, 2071] 
split level 46: [/input-8, 1265] 
split level 47: [/input-8, 1467] 
split level 48: [/input, 497] 
split level 49: [/input, 2747] 
split level 50: [/input, 2397] 
split level 51: [/input-8, 892] 
split level 52: [/input-8, 521] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 1466] 
split level 56: [/input-8, 1525] 
split level 57: [/input, 2446] 
split level 58: [/input-8, 497] 
split level 59: [/input-8, 585] 
split level 60: [/input-8, 969] 
split level 61: [/input, 1658] 
split level 62: [/input, 126] 
split level 63: [/input-8, 2041] 
split level 64: [/input, 455] 
split level 65: [/input, 285] 
split level 66: [/input-8, 1774] 
split level 67: [/input-8, 1518] 
split level 68: [/input, 1925] 
split level 69: [/input-8, 698] 
split level 70: [/input, 3027] 
split level 71: [/input, 2719] 
split level 72: [/input-8, 1514] 
split level 73: [/input-8, 2039] 
split level 74: [/input-8, 1805] 
split level 75: [/input, 196] 
split level 76: [/input-8, 78] 
split level 77: [/input-8, 1396] 
split level 78: [/input, 2215] 
split level 79: [/input, 3880] 
split level 80: [/input, 1642] 
split level 81: [/input-8, 481] 
split level 82: [/input, 2072] 
split level 83: [/input-8, 111] 
split level 84: [/input, 3021] 
split level 85: [/input, 2329] 
split level 86: [/input, 2380] 
split level 87: [/input-8, 2006] 
split level 88: [/input, 2749] 
split level 89: [/input, 440] 
split level 90: [/input-8, 1860] 
split level 91: [/input, 2763] 
split level 92: [/input, 2245] 
split level 93: [/input, 2463] 
split level 94: [/input-8, 2026] 
split level 95: [/input, 3025] 
split level 96: [/input, 3811] 
split level 97: [/input, 2984] 
split level 98: [/input-8, 564] 
split level 99: [/input, 3815] 
split level 100: [/input, 3223] 
split level 101: [/input-8, 1470] 
split level 102: [/input, 2280] 
split level 103: [/input, 2989] 
split level 104: [/input, 2597] 
split level 105: [/input, 3967] 
split level 106: [/input-8, 529] 
split level 107: [/input, 1246] 
split level 108: [/input, 3096] 
split level 109: [/input, 1560] 
split level 110: [/input, 1784] 
split level 111: [/input, 2714] 
split level 112: [/input-8, 121] 
split level 113: [/input, 3966] 
split level 114: [/input, 3099] 
split level 115: [/input, 2294] 
split level 116: [/input-8, 454] 
split level 117: [/input, 2248] 
split level 118: [/input, 2371] 
split level 119: [/input, 3198] 
split level 120: [/input, 2426] 
split level 121: [/input, 2089] 
split level 122: [/input, 3998] 
split level 123: [/input, 3000] 
split level 124: [/input-8, 103] 
split level 125: [/input, 3795] 
split level 126: [/input, 2381] 
split level 127: [/input, 3876] 
split level 128: [/input, 3793] 
split level 129: [/input, 3197] 
split level 130: [/input, 2302] 
split level 131: [/input, 2238] 
split level 132: [/input, 1941] 
split level 133: [/input, 2815] 
split level 134: [/input, 1783] 
split level 135: [/input, 1518] 
split level 136: [/input, 2615] 
split level 137: [/input, 3112] 
split level 138: [/input, 273] 
split level 139: [/input, 3233] 
split level 140: [/input, 2585] 
split level 141: [/input, 2973] 
split level 142: [/input, 1307] 
split level 143: [/input, 1878] 
split level 144: [/input-8, 987] 
split level 145: [/input, 3100] 
split level 146: [/input, 1481] 
split level 147: [/input, 1657] 
split level 148: [/input, 2587] 
split level 149: [/input, 1785] 
split level 150: [/input, 4051] 
split level 151: [/input-8, 527] 
split level 152: [/input, 4043] 
split level 153: [/input, 3104] 
split level 154: [/input, 3794] 
split level 155: [/input, 3140] 
split level 156: [/input, 2244] 
split level 157: [/input, 2298] 
split level 158: [/input, 3115] 
split level 159: [/input, 474] 
split level 160: [/input, 1801] 
split level 161: [/input, 3826] 
split level 162: [/input, 2372] 
split level 163: [/input, 1942] 
split level 164: [/input, 1493] 
split level 165: [/input, 1305] 
split level 166: [/input-8, 1413] 
split level 167: [/input, 3185] 
split level 168: [/input, 3980] 
split level 169: [/input, 2415] 
split level 170: [/input, 3866] 
split level 171: [/input, 3043] 
split level 172: [/input, 2354] 
split level 173: [/input, 3102] 
split level 174: [/input, 2368] 
split level 175: [/input, 3825] 
split level 176: [/input, 2988] 
split level 177: [/input-8, 1397] 
split level 178: [/input, 2257] 
split level 179: [/input, 3881] 
split level 180: [/input, 3107] 
split level 181: [/input-8, 2033] 
split level 182: [/input-8, 525] 
split level 183: [/input, 2807] 
split level 184: [/input, 3790] 
split level 185: [/input, 3822] 
split level 186: [/input, 3054] 
split level 187: [/input, 3169] 
split level 188: [/input, 1247] 
split level 189: [/input, 2053] 
split level 190: [/input, 95] 
split level 191: [/input-8, 2025] 
split level 192: [/input, 3820] 
split level 193: [/input, 1653] 
split level 194: [/input-8, 1554] 
split level 195: [/input, 3092] 
split level 196: [/input, 2311] 
split level 197: [/input, 3136] 
split level 198: [/input, 2097] 
split level 199: [/input, 3088] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19308996200561523
10 lb beta sum: 0.0, worst -0.19309461116790771
Time: prepare 0.0117    bound 0.1053    transfer 0.0022    finalize 0.0031    func 0.1250    
Accumulated time: func 0.1817    prepare 0.0221    bound 0.1615    transfer 0.0023    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.22569799) min lb tensor(-0.19308937)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01092982292175293 
BICCOS Cumulative time: 0.01092982292175293
Preprocessing time: 0.010404109954833984 Inference time: 0.0001747608184814453 Add cuts time: 6.818771362304688e-05 Cut analysis time: 0.0002827644348144531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18751 (1), -0.18749 (1), -0.18735 (1), -0.18653 (1), -0.18647 (1), -0.18629 (1), -0.18607 (1), -0.18601 (1), -0.18571 (1), -0.18515 (1), -0.18504 (1), -0.18487 (1), -0.18453 (1), -0.18437 (1), -0.18431 (1), -0.18383 (1), -0.18302 (1), -0.18255 (1), -0.18149 (1), -0.18125 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5215    set_bounds 0.0093    solve 0.1251    add 0.0859    
Accumulated time: pickout 0.0004    decision 0.5215    set_bounds 0.0093    solve 0.1251    add 0.0859    
Current (lb-rhs): -0.1875094175338745
50 domains visited
Cumulative time: 0.8148696422576904

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 3: [/input-12, 10] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17298543453216553
10 lb beta sum: 0.4636729657649994, worst -0.1574433296918869
Time: prepare 0.0076    bound 0.1258    transfer 0.0007    finalize 0.0028    func 0.1398    
Accumulated time: func 0.3215    prepare 0.0299    bound 0.2873    transfer 0.0030    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.18049788) min lb tensor(-0.15740293)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01806473731994629 
BICCOS Cumulative time: 0.02899456024169922
Preprocessing time: 0.012217044830322266 Inference time: 0.003690481185913086 Add cuts time: 0.0018045902252197266 Cut analysis time: 0.00035262107849121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08632 (2), -0.08596 (2), -0.08590 (2), -0.08573 (2), -0.08541 (2), -0.08525 (2), -0.08522 (2), -0.08503 (2), -0.08444 (2), -0.08344 (2), -0.08337 (2), -0.08240 (2), -0.08172 (2), -0.08157 (2), -0.08088 (2), -0.08063 (2), -0.07994 (2), -0.07902 (2), -0.07897 (2), -0.07886 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0198    set_bounds 0.0119    solve 0.1400    add 0.0855    
Accumulated time: pickout 0.0016    decision 0.5413    set_bounds 0.0213    solve 0.2650    add 0.1714    
Current (lb-rhs): -0.0863155722618103
100 domains visited
Cumulative time: 1.0917716026306152

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] 
split level 3: [/input-12, 53] [/input-8, 93] [/input-8, 93] [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11706805229187012
10 lb beta sum: 0.6050258874893188, worst -0.09031254053115845
Time: prepare 0.0077    bound 0.1244    transfer 0.0007    finalize 0.0025    func 0.1390    
Accumulated time: func 0.4605    prepare 0.0379    bound 0.4117    transfer 0.0037    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.41315728) min lb tensor(-0.08440822)
Number of Verified Splits: 118 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02018451690673828 
BICCOS Cumulative time: 0.0491790771484375
Preprocessing time: 0.012111186981201172 Inference time: 0.0054171085357666016 Add cuts time: 0.002179861068725586 Cut analysis time: 0.0004763603210449219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04203 (3), -0.04177 (3), -0.04175 (3), -0.04160 (3), -0.04140 (3), -0.04020 (3), -0.04013 (3), -0.04010 (3), -0.04009 (3), -0.04008 (3), -0.03960 (3), -0.03951 (3), -0.03898 (3), -0.03818 (3), -0.03778 (3), -0.03772 (3), -0.03700 (3), -0.03681 (3), -0.03679 (3), -0.03669 (3), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0200    set_bounds 0.0160    solve 0.1391    add 0.0921    
Accumulated time: pickout 0.0031    decision 0.5613    set_bounds 0.0373    solve 0.4041    add 0.2635    
Current (lb-rhs): -0.04203474521636963
150 domains visited
Cumulative time: 1.3809309005737305

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 11] [/input-12, 1] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 6] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 1] 
split level 3: [/input-8, 93] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0773611068725586
10 lb beta sum: 0.5771251320838928, worst -0.05167064070701599
Time: prepare 0.0078    bound 0.1421    transfer 0.0007    finalize 0.0025    func 0.1559    
Accumulated time: func 0.6164    prepare 0.0460    bound 0.5539    transfer 0.0045    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.23823094) min lb tensor(-0.04147422)
Number of Verified Splits: 173 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 4
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.026477336883544922 
BICCOS Cumulative time: 0.07565641403198242
Preprocessing time: 0.012995719909667969 Inference time: 0.009647369384765625 Add cuts time: 0.003360748291015625 Cut analysis time: 0.0004734992980957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02279 (4), -0.02274 (4), -0.02267 (4), -0.02264 (4), -0.02106 (4), -0.02092 (4), -0.01980 (4), -0.01962 (4), -0.01948 (4), -0.01943 (4), -0.01936 (4), -0.01927 (4), -0.01905 (4), -0.01894 (4), -0.01866 (4), -0.01828 (4), -0.01768 (4), -0.01760 (4), -0.01735 (4), -0.01714 (4), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0201    set_bounds 0.0159    solve 0.1561    add 0.2766    
Accumulated time: pickout 0.0045    decision 0.5814    set_bounds 0.0532    solve 0.5602    add 0.5401    
Current (lb-rhs): -0.022792518138885498
200 domains visited
Cumulative time: 1.8778016567230225

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1460] [/input-8, 1460] [/input, 1724] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05926108360290527
10 lb beta sum: 0.41711097955703735, worst -0.03737384080886841
Time: prepare 0.0085    bound 0.1438    transfer 0.0019    finalize 0.0026    func 0.1596    
Accumulated time: func 0.7761    prepare 0.0548    bound 0.6976    transfer 0.0064    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.26413369) min lb tensor(-0.02279252)
Number of Verified Splits: 168 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.026618242263793945 
BICCOS Cumulative time: 0.10227465629577637
Preprocessing time: 0.012464523315429688 Inference time: 0.009667396545410156 Add cuts time: 0.003694772720336914 Cut analysis time: 0.0007915496826171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00639 (5), -0.00636 (5), -0.00633 (5), -0.00633 (5), -0.00631 (5), -0.00630 (5), -0.00616 (5), -0.00614 (5), -0.00612 (5), -0.00611 (5), -0.00607 (5), -0.00602 (5), -0.00601 (5), -0.00593 (5), -0.00592 (5), -0.00587 (5), -0.00585 (5), -0.00584 (5), -0.00578 (5), -0.00548 (5), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0199    set_bounds 0.0161    solve 0.1598    add 0.1059    
Accumulated time: pickout 0.0060    decision 0.6014    set_bounds 0.0693    solve 0.7200    add 0.6460    
Current (lb-rhs): -0.006388306617736816
250 domains visited
Cumulative time: 2.2078678607940674

Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 11]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.51770790e-06, 2.35388204e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 11]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.51770790e-06, 4.22047218e-04]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 10, 53, 11]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.63484512e-11, 1.84749831e-02, 2.99183000e-02, 2.67045319e-01]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 10, 53, 11]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.63484512e-11, 1.84749831e-02, 2.99183000e-02, 9.37567791e-04]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 10, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.63484512e-11, 1.84749831e-02, 8.54961760e-03]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 10, 11]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.63484512e-11, 3.44887823e-02, 2.30283663e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 10, 11,  6]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.63484512e-11, 3.44887823e-02, 1.08830794e-03, 6.35631531e-02]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.827324651646058e+31], [0]), '/input-12': (tensor([68, 10, 11,  6]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.63484512e-11, 3.44887823e-02, 1.08830794e-03, 5.30468067e-04]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([110]), tensor([1.]), tensor([0]), tensor([7.82732465e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19241571426391602
10 lb beta sum: 0.4281647205352783, worst -0.15425151586532593
Time: prepare 0.0006    bound 0.1542    transfer 0.0002    finalize 0.0002    func 0.1553    
Accumulated time: func 0.9314    prepare 0.0554    bound 0.8519    transfer 0.0066    finalize 0.0140    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 11] [/input-12, 1] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 53] [/input-12, 6] 
split level 2: [/input-12, 10] [/input-8, 1460] [/input-12, 1] [/input-8, 1460] [/input-12, 1] 
split level 3: [/input-12, 53] [/input-12, 64] [/input-8, 1460] [/input-8, 1506] [/input-12, 68] 
split level 4: [/input-8, 1460] [/input-8, 1461] [/input-8, 1506] [/input, 1724] [/input-12, 10] 
split level 5: [/input, 1724] [/input, 1724] [/input, 1724] [/input-8, 993] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7544558644294739, worst -0.10217273235321045
10 lb beta sum: 0.7544911503791809, worst -0.10202133655548096
Time: prepare 0.0155    bound 0.1550    transfer 0.0014    finalize 0.0022    func 0.1764    
Accumulated time: func 1.1077    prepare 0.0713    bound 1.0068    transfer 0.0080    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.39974850) min lb tensor(-0.10198593)
Number of Verified Splits: 290 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.747611403465271, worst -0.1418265700340271
10 lb beta sum: 0.9010509848594666, worst -0.11938869953155518
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.3641510009765625 
BICCOS Cumulative time: 0.46642565727233887
Preprocessing time: 0.01006174087524414 Inference time: 0.3440282344818115 Add cuts time: 0.009040594100952148 Cut analysis time: 0.0010204315185546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10199 (6), -0.08963 (6), -0.07870 (6), -0.07335 (6), -0.06774 (6), -0.04962 (6), -0.04822 (6), -0.04680 (6), -0.04025 (6), -0.04012 (6), -0.03998 (6), -0.03690 (6), -0.03289 (6), -0.03211 (6), -0.03161 (6), -0.02446 (6), -0.02302 (6), -0.01995 (6), -0.01472 (6), -0.01424 (6), 
Length of domains: 30
Time: pickout 0.0007    decision 0.0190    set_bounds 0.0375    solve 0.1765    add 0.0016    
Accumulated time: pickout 0.0066    decision 0.6204    set_bounds 0.1068    solve 0.8965    add 0.6476    
Current (lb-rhs): -0.10198593139648438
280 domains visited
Cumulative time: 2.9873032569885254

BaB round 2
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1058] [/input-8, 926] [/input-8, 1460] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 1460] [/input-8, 1453] [/input-8, 1058] 
split level 1: [/input-8, 1453] [/input-8, 1461] [/input-8, 1461] [/input-8, 1453] [/input-8, 1506] [/input-8, 1506] [/input-8, 1461] [/input-12, 64] [/input-8, 1461] [/input-8, 1461] 
split level 2: [/input-8, 1461] [/input, 2238] [/input, 2238] [/input-8, 1461] [/input-8, 1461] [/input, 2238] [/input, 2238] [/input-8, 1461] [/input, 2238] [/input, 2238] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09362125396728516
10 lb beta sum: 0.13182823359966278, worst -0.09104230999946594
Time: prepare 0.0061    bound 0.1522    transfer 0.0015    finalize 0.0025    func 0.1639    
Accumulated time: func 1.2716    prepare 0.0776    bound 1.1590    transfer 0.0095    finalize 0.0187    
all_split False
======================Cut inference begins======================
max lb tensor(0.11583522) min lb tensor(-0.09100990)
Number of Verified Splits: 106 of 240
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 5
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.02015829086303711 
BICCOS Cumulative time: 0.486583948135376
Preprocessing time: 0.007669210433959961 Inference time: 0.009363174438476562 Add cuts time: 0.0021791458129882812 Cut analysis time: 0.0009467601776123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09101 (9), -0.08883 (9), -0.08470 (9), -0.08359 (9), -0.08291 (9), -0.08251 (9), -0.08075 (9), -0.07652 (9), -0.07633 (9), -0.07553 (9), -0.07440 (9), -0.06849 (9), -0.06752 (9), -0.06458 (9), -0.06377 (9), -0.06027 (9), -0.06023 (9), -0.05855 (9), -0.05689 (9), -0.05645 (9), 
Length of domains: 134
Time: pickout 0.0017    decision 0.0133    set_bounds 0.0182    solve 0.1639    add 0.0027    
Accumulated time: pickout 0.0084    decision 0.6336    set_bounds 0.1250    solve 1.0604    add 0.6503    
Current (lb-rhs): -0.09100989997386932
414 domains visited
Cumulative time: 3.2081847190856934

BaB round 3
batch: 134
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 926] [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-8, 926] [/input-12, 64] [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-8, 926] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09125089645385742
10 lb beta sum: 0.13459119200706482, worst -0.08872024714946747
Time: prepare 0.0068    bound 0.1501    transfer 0.0009    finalize 0.0018    func 0.1615    
Accumulated time: func 1.4331    prepare 0.0846    bound 1.3091    transfer 0.0104    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(0.09980209) min lb tensor(-0.08870745)
Number of Verified Splits: 90 of 268
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.020578622817993164 
BICCOS Cumulative time: 0.5071625709533691
Preprocessing time: 0.00814199447631836 Inference time: 0.008816719055175781 Add cuts time: 0.0025997161865234375 Cut analysis time: 0.001020193099975586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08871 (10), -0.08653 (10), -0.08250 (10), -0.08161 (10), -0.08053 (10), -0.08028 (10), -0.07831 (10), -0.07420 (10), -0.07412 (10), -0.07336 (10), -0.07191 (10), -0.06764 (10), -0.06608 (10), -0.06547 (10), -0.06514 (10), -0.06419 (10), -0.06157 (10), -0.06133 (10), -0.06077 (10), -0.05953 (10), 
Length of domains: 178
Time: pickout 0.0029    decision 0.0195    set_bounds 0.0117    solve 0.1616    add 0.0014    
Accumulated time: pickout 0.0113    decision 0.6531    set_bounds 0.1366    solve 1.2220    add 0.6517    
Current (lb-rhs): -0.08870744705200195
592 domains visited
Cumulative time: 3.427269220352173

BaB round 4
batch: 178
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 926] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 162] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0891728401184082
10 lb beta sum: 0.09025385975837708, worst -0.08658628165721893
Time: prepare 0.0084    bound 0.1595    transfer 0.0021    finalize 0.0022    func 0.1747    
Accumulated time: func 1.6078    prepare 0.0933    bound 1.4686    transfer 0.0125    finalize 0.0227    
all_split False
======================Cut inference begins======================
max lb tensor(0.11826701) min lb tensor(-0.08657533)
Number of Verified Splits: 139 of 356
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.02812981605529785 
BICCOS Cumulative time: 0.535292387008667
Preprocessing time: 0.010621309280395508 Inference time: 0.013926267623901367 Add cuts time: 0.0024912357330322266 Cut analysis time: 0.00109100341796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08658 (11), -0.08441 (11), -0.07992 (11), -0.07941 (11), -0.07837 (11), -0.07768 (11), -0.07613 (11), -0.07215 (11), -0.07158 (11), -0.07094 (11), -0.06925 (11), -0.06530 (11), -0.06525 (11), -0.06500 (11), -0.06405 (11), -0.06364 (11), -0.06314 (11), -0.06296 (11), -0.06215 (11), -0.06191 (11), 
Length of domains: 217
Time: pickout 0.0031    decision 0.0218    set_bounds 0.0163    solve 0.1748    add 0.0019    
Accumulated time: pickout 0.0144    decision 0.6749    set_bounds 0.1529    solve 1.3969    add 0.6536    
Current (lb-rhs): -0.08657532930374146
809 domains visited
Cumulative time: 3.6744027137756348

BaB round 5
batch: 217
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 162] [/input-8, 1453] [/input-8, 1453] [/input-8, 1461] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 1453] [/input-8, 162] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08657526969909668
10 lb beta sum: 0.026391811668872833, worst -0.08657360076904297
Time: prepare 0.0105    bound 0.1621    transfer 0.0020    finalize 0.0027    func 0.1802    
Accumulated time: func 1.7880    prepare 0.1040    bound 1.6308    transfer 0.0145    finalize 0.0254    
all_split False
======================Cut inference begins======================
max lb tensor(0.08825816) min lb tensor(-0.08656955)
Number of Verified Splits: 106 of 434
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 6
#cuts 4-6: 26
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02826523780822754 
BICCOS Cumulative time: 0.5635576248168945
Preprocessing time: 0.012855768203735352 Inference time: 0.010615348815917969 Add cuts time: 0.0034363269805908203 Cut analysis time: 0.0013577938079833984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08657 (12), -0.08440 (12), -0.07992 (12), -0.07835 (12), -0.07768 (12), -0.07684 (12), -0.07610 (12), -0.07401 (12), -0.07158 (12), -0.06928 (12), -0.06925 (12), -0.06849 (12), -0.06670 (12), -0.06547 (12), -0.06520 (12), -0.06506 (12), -0.06374 (12), -0.06306 (12), -0.06278 (12), -0.06256 (12), 
Length of domains: 328
Time: pickout 0.0035    decision 0.0233    set_bounds 0.0194    solve 0.1804    add 0.0039    
Accumulated time: pickout 0.0178    decision 0.6981    set_bounds 0.1723    solve 1.5772    add 0.6575    
Current (lb-rhs): -0.08656954765319824
1137 domains visited
Cumulative time: 3.934258460998535

BaB round 6
batch: 328
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1329] [/input, 436] [/input-8, 1453] [/input-8, 1265] [/input-8, 1058] [/input-8, 1453] [/input-8, 1265] [/input-8, 162] [/input-8, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08437871932983398
10 lb beta sum: 0.00760618457570672, worst -0.08433067798614502
Time: prepare 0.0154    bound 0.1585    transfer 0.0014    finalize 0.0037    func 0.1833    
Accumulated time: func 1.9713    prepare 0.1196    bound 1.7893    transfer 0.0160    finalize 0.0291    
all_split False
======================Cut inference begins======================
max lb tensor(0.02528199) min lb tensor(-0.08430576)
Number of Verified Splits: 115 of 656
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 8
#cuts 4-6: 29
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.039092063903808594 
BICCOS Cumulative time: 0.6026496887207031
Preprocessing time: 0.019504308700561523 Inference time: 0.014286994934082031 Add cuts time: 0.0035347938537597656 Cut analysis time: 0.0017659664154052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08431 (13), -0.08190 (13), -0.07813 (13), -0.07767 (13), -0.07689 (13), -0.07594 (13), -0.07573 (13), -0.07518 (13), -0.07328 (13), -0.07261 (13), -0.07144 (13), -0.07083 (13), -0.07014 (13), -0.06980 (13), -0.06951 (13), -0.06916 (13), -0.06812 (13), -0.06738 (13), -0.06643 (13), -0.06512 (13), 
Length of domains: 541
Time: pickout 0.0069    decision 0.0271    set_bounds 0.0295    solve 0.1847    add 0.0042    
Accumulated time: pickout 0.0247    decision 0.7252    set_bounds 0.2018    solve 1.7620    add 0.6617    
Current (lb-rhs): -0.0843057632446289
1678 domains visited
Cumulative time: 4.227421045303345

BaB round 7
batch: 541
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1506] [/input, 436] [/input-8, 1329] [/input-8, 1467] [/input-8, 1506] [/input-8, 1329] [/input-8, 1467] [/input-8, 1329] [/input-8, 162] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08215999603271484
10 lb beta sum: 0.01166306808590889, worst -0.08208203315734863
Time: prepare 0.0270    bound 0.1737    transfer 0.0029    finalize 0.0076    func 0.2185    
Accumulated time: func 2.1899    prepare 0.1468    bound 1.9630    transfer 0.0188    finalize 0.0367    
all_split False
======================Cut inference begins======================
max lb tensor(0.01094709) min lb tensor(-0.08205712)
Number of Verified Splits: 144 of 1082
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 8
#cuts 4-6: 40
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.05773663520812988 
BICCOS Cumulative time: 0.660386323928833
Preprocessing time: 0.03339052200317383 Inference time: 0.016510486602783203 Add cuts time: 0.005428791046142578 Cut analysis time: 0.0024068355560302734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08206 (14), -0.07965 (14), -0.07581 (14), -0.07535 (14), -0.07530 (14), -0.07457 (14), -0.07433 (14), -0.07372 (14), -0.07289 (14), -0.07284 (14), -0.07153 (14), -0.07125 (14), -0.07106 (14), -0.06912 (14), -0.06905 (14), -0.06903 (14), -0.06853 (14), -0.06844 (14), -0.06778 (14), -0.06776 (14), 
Length of domains: 938
Time: pickout 0.0105    decision 0.0409    set_bounds 0.0454    solve 0.2188    add 0.0104    
Accumulated time: pickout 0.0352    decision 0.7661    set_bounds 0.2471    solve 1.9808    add 0.6721    
Current (lb-rhs): -0.08205711841583252
2616 domains visited
Cumulative time: 4.613454580307007

BaB round 8
batch: 938
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1329] [/input-8, 993] [/input, 436] [/input-8, 1453] [/input-8, 1329] [/input, 436] [/input-8, 1453] [/input-8, 993] [/input, 436] [/input, 2748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08080887794494629
10 lb beta sum: 0.005303637124598026, worst -0.0808035135269165
Time: prepare 0.0481    bound 0.2208    transfer 0.0087    finalize 0.0112    func 0.3023    
Accumulated time: func 2.4921    prepare 0.1952    bound 2.1838    transfer 0.0275    finalize 0.0479    
all_split False
======================Cut inference begins======================
max lb tensor(0.01373053) min lb tensor(-0.08079910)
Number of Verified Splits: 276 of 1876
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 10
#cuts 4-6: 44
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.10213398933410645 
BICCOS Cumulative time: 0.7625203132629395
Preprocessing time: 0.05788612365722656 Inference time: 0.03208518028259277 Add cuts time: 0.009100914001464844 Cut analysis time: 0.0030617713928222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08080 (15), -0.07837 (15), -0.07742 (15), -0.07499 (15), -0.07454 (15), -0.07331 (15), -0.07330 (15), -0.07326 (15), -0.07264 (15), -0.07247 (15), -0.07244 (15), -0.07159 (15), -0.07115 (15), -0.07091 (15), -0.07077 (15), -0.07021 (15), -0.06988 (15), -0.06978 (15), -0.06970 (15), -0.06943 (15), 
Length of domains: 1600
Time: pickout 0.0182    decision 0.2427    set_bounds 0.0758    solve 0.3027    add 0.0133    
Accumulated time: pickout 0.0534    decision 1.0088    set_bounds 0.3229    solve 2.2835    add 0.6854    
Current (lb-rhs): -0.08079910278320312
4216 domains visited
Cumulative time: 5.371996879577637

BaB round 9
batch: 1600
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 598] [/input-8, 479] [/input-8, 993] [/input, 2748] [/input-8, 598] [/input-8, 993] [/input, 2748] [/input-8, 479] [/input-8, 993] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07738149166107178
10 lb beta sum: 0.011458980850875378, worst -0.07738053798675537
Time: prepare 0.0846    bound 0.3280    transfer 0.0089    finalize 0.0200    func 0.4628    
Accumulated time: func 2.9550    prepare 0.2802    bound 2.5118    transfer 0.0364    finalize 0.0678    
all_split False
======================Cut inference begins======================
max lb tensor(0.01262216) min lb tensor(-0.07736897)
Number of Verified Splits: 419 of 3200
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 93.
#cuts 1-3: 10
#cuts 4-6: 55
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.1743171215057373 
BICCOS Cumulative time: 0.9368374347686768
Preprocessing time: 0.10143470764160156 Inference time: 0.05275559425354004 Add cuts time: 0.016002416610717773 Cut analysis time: 0.00412440299987793
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07737 (16), -0.07693 (16), -0.07495 (16), -0.07451 (16), -0.07385 (16), -0.07373 (16), -0.07142 (16), -0.07130 (16), -0.07110 (16), -0.07066 (16), -0.07043 (16), -0.06991 (16), -0.06986 (16), -0.06982 (16), -0.06941 (16), -0.06941 (16), -0.06919 (16), -0.06914 (16), -0.06902 (16), -0.06892 (16), 
Length of domains: 2781
Time: pickout 0.0239    decision 0.0990    set_bounds 0.1353    solve 0.4635    add 0.0172    
Accumulated time: pickout 0.0774    decision 1.1078    set_bounds 0.4583    solve 2.7470    add 0.7025    
Current (lb-rhs): -0.07736897468566895
6997 domains visited
Cumulative time: 6.292751312255859

BaB round 10
batch: 2781
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 436] [/input-8, 1009] [/input-8, 479] [/input, 436] [/input, 2748] [/input-8, 1009] [/input, 2748] [/input-8, 1009] [/input-8, 1009] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07543182373046875
10 lb beta sum: 0.009946955367922783, worst -0.07541632652282715
Time: prepare 0.1593    bound 0.5183    transfer 0.0270    finalize 0.0360    func 0.7775    
Accumulated time: func 3.7325    prepare 0.4398    bound 3.0301    transfer 0.0634    finalize 0.1038    
all_split False
======================Cut inference begins======================
max lb tensor(0.13914061) min lb tensor(-0.07540607)
Number of Verified Splits: 742 of 5562
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 125.
#cuts 1-3: 11
#cuts 4-6: 74
#cuts 7-9: 39
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3198840618133545 
BICCOS Cumulative time: 1.2567214965820312
Preprocessing time: 0.17783188819885254 Inference time: 0.10322809219360352 Add cuts time: 0.03308916091918945 Cut analysis time: 0.005734920501708984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07541 (17), -0.07497 (17), -0.07278 (17), -0.07234 (17), -0.07203 (17), -0.07191 (17), -0.07076 (17), -0.07032 (17), -0.06925 (17), -0.06912 (17), -0.06909 (17), -0.06864 (17), -0.06857 (17), -0.06811 (17), -0.06805 (17), -0.06798 (17), -0.06772 (17), -0.06764 (17), -0.06733 (17), -0.06728 (17), 
Length of domains: 4820
Time: pickout 0.0463    decision 0.3316    set_bounds 0.2523    solve 0.7791    add 0.0283    
Accumulated time: pickout 0.1237    decision 1.4394    set_bounds 0.7106    solve 3.5261    add 0.7309    
Current (lb-rhs): -0.07540607452392578
11817 domains visited
Cumulative time: 8.06113338470459

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 993] [/input-8, 93] [/input-8, 1009] [/input-8, 993] [/input-8, 1009] [/input-8, 479] [/input-8, 93] [/input-8, 479] [/input-8, 598] [/input-8, 993] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07286012172698975
10 lb beta sum: 0.008925005793571472, worst -0.07286691665649414
Time: prepare 0.2352    bound 0.7276    transfer 0.0294    finalize 0.0532    func 1.1008    
Accumulated time: func 4.8333    prepare 0.6754    bound 3.7577    transfer 0.0928    finalize 0.1570    
all_split False
======================Cut inference begins======================
max lb tensor(0.01396176) min lb tensor(-0.07285511)
Number of Verified Splits: 1358 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 189.
#cuts 1-3: 13
#cuts 4-6: 83
#cuts 7-9: 88
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.7249200344085693 
BICCOS Cumulative time: 1.9816415309906006
Preprocessing time: 0.26375889778137207 Inference time: 0.3892025947570801 Add cuts time: 0.06313681602478027 Cut analysis time: 0.008821725845336914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07286 (18), -0.07241 (18), -0.07220 (18), -0.07176 (18), -0.07082 (18), -0.07038 (18), -0.06947 (18), -0.06936 (18), -0.06882 (18), -0.06880 (18), -0.06870 (18), -0.06836 (18), -0.06742 (18), -0.06731 (18), -0.06722 (17), -0.06710 (18), -0.06667 (18), -0.06582 (18), -0.06576 (18), -0.06573 (18), 
Length of domains: 7558
Time: pickout 0.0675    decision 0.4420    set_bounds 0.3707    solve 1.1028    add 0.0468    
Accumulated time: pickout 0.1912    decision 1.8815    set_bounds 1.0813    solve 4.6289    add 0.7776    
Current (lb-rhs): -0.07285511493682861
18651 domains visited
current_vram/total_varm: 11.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.837242364883423

BaB round 12
batch: 7558
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 479] [/input, 2748] [/input-8, 479] [/input-8, 1265] [/input, 455] [/input-8, 479] [/input, 455] [/input-8, 1518] [/input-8, 1506] [/input-8, 479] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07161080837249756
10 lb beta sum: 0.011169174686074257, worst -0.07160568237304688
Time: prepare 0.4361    bound 1.3475    transfer 0.0454    finalize 0.0943    func 2.0250    
Accumulated time: func 6.8582    prepare 1.1120    bound 5.1051    transfer 0.1382    finalize 0.2513    
all_split False
======================Cut inference begins======================
max lb tensor(0.10861681) min lb tensor(-0.07159483)
Number of Verified Splits: 2976 of 15116
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 264.
#cuts 1-3: 5
#cuts 4-6: 107
#cuts 7-9: 148
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 1.3661680221557617 
BICCOS Cumulative time: 3.3478095531463623
Preprocessing time: 0.49293065071105957 Inference time: 0.7143011093139648 Add cuts time: 0.14563369750976562 Cut analysis time: 0.01330256462097168
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07159 (19), -0.07115 (19), -0.07095 (19), -0.07052 (19), -0.06827 (19), -0.06822 (19), -0.06811 (19), -0.06783 (19), -0.06762 (19), -0.06757 (19), -0.06745 (19), -0.06718 (19), -0.06625 (19), -0.06581 (19), -0.06561 (19), -0.06540 (18), -0.06516 (19), -0.06487 (19), -0.06475 (19), -0.06453 (19), 
Length of domains: 12140
Time: pickout 0.1528    decision 0.4233    set_bounds 0.9417    solve 2.0285    add 0.0565    
Accumulated time: pickout 0.3439    decision 2.3048    set_bounds 2.0230    solve 6.6574    add 0.8341    
Current (lb-rhs): -0.07159483432769775
30791 domains visited
Cumulative time: 15.851637840270996

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1467] [/input-8, 1453] [/input-8, 598] [/input, 436] [/input-8, 1009] [/input-8, 1329] [/input, 2763] [/input, 436] [/input-8, 1329] [/input-8, 598] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06967484951019287
10 lb beta sum: 0.021450378000736237, worst -0.06968021392822266
Time: prepare 0.4646    bound 1.5384    transfer 0.1158    finalize 0.1268    func 2.3563    
Accumulated time: func 9.2145    prepare 1.5770    bound 6.6436    transfer 0.2540    finalize 0.3781    
all_split False
======================Cut inference begins======================
max lb tensor(0.29512638) min lb tensor(-0.06967485)
Number of Verified Splits: 2715 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 382.
#cuts 1-3: 6
#cuts 4-6: 146
#cuts 7-9: 221
#cuts 10-12: 9
#cuts >= 20: 0
BICCOS time: 1.5359935760498047 
BICCOS Cumulative time: 4.883803129196167
Preprocessing time: 0.5386672019958496 Inference time: 0.7618279457092285 Add cuts time: 0.21640539169311523 Cut analysis time: 0.019093036651611328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06967 (20), -0.06923 (20), -0.06903 (20), -0.06860 (20), -0.06795 (20), -0.06750 (20), -0.06730 (20), -0.06702 (20), -0.06689 (20), -0.06658 (20), -0.06637 (20), -0.06630 (20), -0.06619 (20), -0.06593 (20), -0.06564 (20), -0.06561 (19), -0.06553 (20), -0.06516 (19), -0.06499 (20), -0.06457 (20), 
Length of domains: 17617
Time: pickout 0.1404    decision 0.4565    set_bounds 1.0384    solve 2.3608    add 0.0605    
Accumulated time: pickout 0.4843    decision 2.7613    set_bounds 3.0614    solve 9.0183    add 0.8946    
Current (lb-rhs): -0.06967484951019287
44460 domains visited
current_vram/total_varm: 26.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.48902130126953

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 479] [/input-8, 93] [/input-8, 1017] [/input, 455] [/input, 2430] [/input, 2748] [/input-8, 93] [/input-8, 1453] [/input-8, 479] [/input-8, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06840300559997559
10 lb beta sum: 0.07664491981267929, worst -0.06837749481201172
Time: prepare 0.9551    bound 3.2103    transfer 0.1367    finalize 0.5493    func 5.0713    
Accumulated time: func 14.2858    prepare 2.5326    bound 9.8538    transfer 0.3907    finalize 0.9274    
all_split False
======================Cut inference begins======================
max lb tensor(0.40371281) min lb tensor(-0.06836832)
Number of Verified Splits: 10517 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 260.
#cuts 1-3: 7
#cuts 4-6: 91
#cuts 7-9: 157
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 3.635953664779663 
BICCOS Cumulative time: 8.51975679397583
Preprocessing time: 1.4710345268249512 Inference time: 1.6731536388397217 Add cuts time: 0.4784674644470215 Cut analysis time: 0.01329803466796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06837 (21), -0.06793 (21), -0.06742 (21), -0.06698 (21), -0.06664 (21), -0.06619 (21), -0.06568 (21), -0.06524 (21), -0.06499 (21), -0.06499 (21), -0.06487 (21), -0.06454 (21), -0.06406 (21), -0.06403 (21), -0.06392 (21), -0.06362 (21), -0.06325 (21), -0.06325 (21), -0.06314 (21), -0.06307 (21), 
Length of domains: 23484
Time: pickout 0.2654    decision 1.6465    set_bounds 1.8912    solve 5.0774    add 0.1141    
Accumulated time: pickout 0.7497    decision 4.4078    set_bounds 4.9526    solve 14.0957    add 1.0087    
Current (lb-rhs): -0.06836831569671631
66711 domains visited
current_vram/total_varm: 41.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 34.268698930740356

BaB round 15
batch: 23484
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 969] [/input, 2748] [/input-8, 1009] [/input, 2430] [/input-8, 969] [/input-8, 1396] [/input-8, 1009] [/input-8, 479] [/input, 2446] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06663167476654053
10 lb beta sum: 0.17450042068958282, worst -0.06499683856964111
Time: prepare 1.3369    bound 4.2500    transfer 0.1836    finalize 0.7692    func 6.8544    
Accumulated time: func 21.1402    prepare 3.8700    bound 14.1038    transfer 0.5743    finalize 1.6966    
all_split False
======================Cut inference begins======================
max lb tensor(0.65844536) min lb tensor(-0.06498039)
Number of Verified Splits: 23307 of 46968
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 215.
#cuts 1-3: 9
#cuts 4-6: 118
#cuts 7-9: 83
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 6.752089500427246 
BICCOS Cumulative time: 15.271846294403076
Preprocessing time: 2.092092752456665 Inference time: 3.9048399925231934 Add cuts time: 0.7449584007263184 Cut analysis time: 0.010198354721069336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06498 (22), -0.06454 (22), -0.06443 (22), -0.06400 (22), -0.06324 (22), -0.06280 (22), -0.06270 (22), -0.06229 (22), -0.06228 (22), -0.06225 (22), -0.06201 (22), -0.06186 (22), -0.06183 (22), -0.06175 (22), -0.06158 (22), -0.06157 (22), -0.06146 (22), -0.06131 (22), -0.06104 (22), -0.06103 (21), 
Length of domains: 23661
Time: pickout 0.5135    decision 2.4703    set_bounds 2.7086    solve 6.8650    add 0.0968    
Accumulated time: pickout 1.2631    decision 6.8781    set_bounds 7.6612    solve 20.9607    add 1.1055    
Current (lb-rhs): -0.0649803876876831
90372 domains visited
Cumulative time: 53.96595478057861

BaB round 16
batch: 23661
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 93] [/input-8, 1017] [/input-8, 1518] [/input, 2748] [/input-8, 1009] [/input, 2430] [/input-8, 993] [/input, 2748] [/input, 2430] [/input-8, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06498026847839355
10 lb beta sum: 0.24355140328407288, worst -0.06638273596763611
Time: prepare 1.3613    bound 4.1301    transfer 0.2372    finalize 0.3359    func 6.3817    
Accumulated time: func 27.5219    prepare 5.2318    bound 18.2338    transfer 0.8115    finalize 2.0325    
all_split False
======================Cut inference begins======================
max lb tensor(0.72341084) min lb tensor(-0.06442690)
Number of Verified Splits: 29134 of 47322
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 8.724882364273071 
BICCOS Cumulative time: 23.996728658676147
Preprocessing time: 2.2238776683807373 Inference time: 5.792148590087891 Add cuts time: 0.7081656455993652 Cut analysis time: 0.000690460205078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06443 (23), -0.06399 (23), -0.06397 (23), -0.06350 (23), -0.06270 (23), -0.06225 (23), -0.06223 (23), -0.06200 (23), -0.06178 (23), -0.06156 (23), -0.06127 (23), -0.06103 (23), -0.06091 (23), -0.06079 (23), -0.06060 (23), -0.06046 (23), -0.06028 (23), -0.06003 (22), -0.05985 (23), -0.05956 (23), 
Length of domains: 18188
Time: pickout 0.4374    decision 2.8255    set_bounds 3.2908    solve 6.3927    add 0.0790    
Accumulated time: pickout 1.7006    decision 9.7036    set_bounds 10.9519    solve 27.3534    add 1.1845    
Current (lb-rhs): -0.06442689895629883
108560 domains visited
Cumulative time: 76.08488440513611

BaB round 17
batch: 18188
splitting decisions: 
split level 0: [/input, 2430] [/input-8, 1265] [/input-8, 1466] [/input-8, 1009] [/input-8, 1329] [/input-8, 1017] [/input-8, 969] [/input-8, 1017] [/input, 2430] [/input-8, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06397461891174316
10 lb beta sum: 0.19842538237571716, worst -0.010285943746566772
Time: prepare 1.0637    bound 1.5491    transfer 0.1477    finalize 0.2521    func 3.2597    
Accumulated time: func 30.7816    prepare 6.2960    bound 19.7829    transfer 0.9593    finalize 2.2846    
all_split False
======================Cut inference begins======================
max lb tensor(0.34401464) min lb tensor(8.34465027e-07)
Number of Verified Splits: 36376 of 36376
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.280855417251587 
BICCOS Cumulative time: 25.277584075927734
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.4351    decision 1.8484    set_bounds 2.3287    solve 3.7493    add 0.0038    
Accumulated time: pickout 2.1357    decision 11.5520    set_bounds 13.2807    solve 31.1027    add 1.1883    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
108560 domains visited
Cumulative time: 86.10497570037842


Properties batch 7, size 1
Remaining timeout: 112.18841552734375
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 112.18824625015259
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 87.8118 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.05410433,  -7.98528099,  -7.76803017,  -8.62869644,  -7.58290386,
          -9.83789062,  -8.41322899, -10.12581921,  -1.82107425,  -8.20621872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 462] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 462] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 195] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12438488, 5.28402185, 4.66859245, 5.64474773, 4.65305662, 6.76825285,
         5.48563194, 7.03934669, 5.25850201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0321 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.12188244,  -7.11672592, -10.05889606, -10.35688305, -11.79731369,
          -9.88283920, -13.23313427,  -9.69955254,  -9.69626141,  -8.79122162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 485] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 485] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 132] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78854418, 1.30756640, 1.88601065, 3.26214123, 1.25751054, 4.64157391,
         1.15222788, 1.10766840, 0.93016052]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0518 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 818] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 818] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 291] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.75854379,  3.26663184, -1.20437765, -1.10650253, -0.29332364,
         -0.34117436, -0.69933438,  1.05337381,  1.86989927]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016],
         [ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11027288,  0.08384085,  0.15161419,  0.75824881,  0.93692446]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 686] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 686] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 98] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.90750694, -0.64292061, -0.82822967,  1.19824719, -0.54596657,
          2.64874315, -0.17078567,  6.71303511,  6.26933956]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160],
         [ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15321684, -0.04940534,  0.24659157,  0.77655888]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0814 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.86313248,  -8.44097900, -13.20821190, -13.39188290, -12.26532078,
         -13.55902863, -14.16451168, -12.10001564, -14.36103153, -11.35003471]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [533]; unstable size 533; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 533] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 533] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 533] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 225] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58184528, 2.47264957, 2.70894527, 1.52923870, 2.67172718, 3.54394817,
         1.39660072, 3.88951159, 1.85305750]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0476 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [470]; unstable size 470; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 470] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 470] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 470] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 190] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.83597136,  1.88928604,  2.30730438,  1.75963402,  2.61177826,
          3.72314739,  2.18467283, -1.76713872,  1.99258900]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
          -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53973770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.17936504, -0.97301590, -0.90952379,  ..., -1.27460313,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.83015871,  ..., -1.56031740,
            -1.65555561, -1.41746020],
           [-1.19523799, -1.17936504, -1.03650784,  ..., -1.44920623,
            -1.65555561, -1.52857137],
           ...,
           [ 0.69365084,  0.70952386,  0.72539687,  ..., -1.38571417,
            -1.43333328, -1.44920623],
           [ 0.74126989,  0.75714290,  0.77301592,  ..., -1.35396814,
            -1.41746020, -1.44920623],
           [ 0.77301592,  0.75714290,  0.72539687,  ..., -1.33809519,
            -1.38571417, -1.40158725]],

          [[-1.25603855, -0.91787434, -0.70853460,  ..., -0.91787434,
            -1.11111104, -0.91787434],
           [-1.20772946, -1.03059578, -0.67632848,  ..., -1.25603855,
            -1.38486302, -1.09500802],
           [-1.27214170, -1.23993552, -0.98228657,  ..., -1.17552328,
            -1.38486302, -1.23993552],
           ...,
           [ 0.53140104,  0.54750413,  0.56360716,  ..., -1.27214170,
            -1.32045078, -1.33655393],
           [ 0.57971025,  0.59581327,  0.61191636,  ..., -1.23993552,
            -1.30434775, -1.32045078],
           [ 0.61191636,  0.59581327,  0.57971025,  ..., -1.22383249,
            -1.28824472, -1.28824472]],

          [[-1.28785622, -1.07796109, -1.01799107,  ..., -1.37781119,
            -1.51274371, -1.42278874],
           [-1.22788620, -1.15292358, -0.92803597,  ..., -1.52773619,
            -1.55772126, -1.43778121],
           [-1.27286363, -1.28785622, -1.10794616,  ..., -1.21289361,
            -1.34782624, -1.36281872],
           ...,
           [ 0.54122955,  0.55622208,  0.57121456,  ..., -0.86806595,
            -0.91304344, -0.92803597],
           [ 0.58620709,  0.60119957,  0.60119957,  ..., -0.83808094,
            -0.89805096, -0.92803597],
           [ 0.61619210,  0.60119957,  0.58620709,  ..., -0.82308841,
            -0.88305843, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [535]; unstable size 535; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 535] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 535] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 535] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 288] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.20215011,  3.29560637, -0.48173285,  2.02198029,  2.71108150,
          2.06479001,  1.99369478,  3.83842254,  4.76781797]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.90987015, -24.70122147, -20.82708359, -23.43597221, -24.32200050,
          -23.68591499, -23.38396645, -25.73447037, -20.12191963, -25.80022812],
         [-19.90987015, -24.70122147, -20.82708359, -23.43597221, -24.32200050,
          -23.68591499, -23.38396645, -25.73447037, -20.12191963, -25.80022812]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21204948,  0.70516396]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 632] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 632] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 260] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27221370, -1.34621978, -1.80932045, -2.15861177, -2.98624802,
         -1.27028847, -2.80886602, -2.57974577, -0.39991665]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333],
         [-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.18083191, -0.01482725,  0.08502436, -0.39196968, -1.33436108,
           0.59290266, -1.21450758, -0.79800320,  1.53494978]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0696 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 743] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 743] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 169] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60137367, -0.36385387, -1.25714397, -1.13711548, -0.05323410,
         -1.18300867,  0.78644705, -0.01430035, -2.42923403]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909],
         [ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33666229,  0.51909161,  0.24966431,  0.18370914,  1.32451820,
           0.33892918,  1.31310940, -0.97027397]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         ...,


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0913 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 508] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 508] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 185] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07057714,  2.60909176, -1.19970715,  0.02767622, -0.45064342,
          0.08406526, -0.38396728,  2.78343773,  1.49663746]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034],
         [-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48689651,  0.40603685,  0.31505728]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0773 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [685]; unstable size 685; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 685] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 685] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 685] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 208] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.39561689,  1.13157177, -1.32989585, -1.52063799, -1.36703992,
         -0.59409893,  0.40751410, -0.57752186,  0.47539353]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345],
         [ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.24832678,  0.17553520,  0.07364845,  0.39514923,  1.25650978,
           1.41384697]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0817 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 563] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 563] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 238] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90272826,  1.91782331, -1.66059613, -0.46604252, -2.21083879,
         -0.55527312, -1.51988971,  1.75675285, -0.03911400]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838],
         [-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.03242397, -0.36622477,  0.73475122, -0.81356907,  0.82818079,
           0.25716114,  2.07123041]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         ...,


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]]]],
       device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0839 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 584] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 584] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 262] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54147208,  3.51587915, -0.48492050, -0.11444473, -1.27845073,
          0.64233315,  1.06292796,  0.06253490,  1.78522801]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32136536, -13.92663002,  -9.13717842,  -8.60724545,  -8.21953201,
           -8.22270298, -10.20281887, -10.89065933, -10.21816635, -12.22472954],
         [ -9.32136536, -13.92663002,  -9.13717842,  -8.60724545,  -8.21953201,
           -8.22270298, -10.20281887, -10.89065933, -10.21816635, -12.22472954]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.09866238,  0.91447544,  0.38454247, -0.00317097]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0050 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0818 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 468] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 468] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 197] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.92446530,  1.83843088, -1.80397606, -0.25452477, -3.28706503,
         -1.12619364, -2.72712851,  3.37554169,  1.23327696]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088],
         [ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.75801039,  0.15584850, -2.14878273, -0.00911617, -1.34744263]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0824 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35881138, -13.11242390,  -9.13916874, -10.32992744,  -9.78460979,
         -10.37751198, -11.98755741, -12.49197388,  -5.29605007, -12.74240780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 574] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 192] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78351957, 6.23856354, 2.09941578, 3.41462421, 2.79624534, 3.32999086,
         5.10516357, 5.41959763, 6.04746532]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 660] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 660] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 142] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.91259813,  6.46374846,  5.83736515,  5.29915905,  7.56130886,
          6.20057392,  5.96402264,  1.06313801, -0.07201385]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.41it/s]100%|██████████| 1/1 [00:00<00:00,  8.39it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.66808319,  -8.80762291, -16.54941559, -15.81319427, -15.26967907,
          -17.61644936, -16.17386246, -15.95940590, -11.03059864,  -9.22308636]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.41546345]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1222 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 39.909873962402344
alpha/beta optimization time: 1.293370008468628
initial alpha-crown bounds: tensor([[ 0.98155403,  6.54999447,  5.92335987,  5.37160492,  7.64936495,
          6.28046989,  6.04217672,  1.13449574, -0.02314544]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.023145437240600586
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51565146446228
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5156126022339
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.51558566093445
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.51556205749512
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5155429840088
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.5155246257782
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.5155065059662
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.51547980308533
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.51546120643616
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02314544]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
        -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02314544]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 660
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 139
Node /15 input 0: size torch.Size([100]) unstable 12
-----------------
# of unstable neurons: 811
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011348724365234375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02314460277557373
10 lb beta sum: 0.0, worst -0.023145437240600586
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    func 0.0568    
Accumulated time: func 0.0568    prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 37] 
split level 2: [/input-8, 1436] 
split level 3: [/input-12, 25] 
split level 4: [/input-8, 796] 
split level 5: [/input-8, 1438] 
split level 6: [/input-12, 26] 
split level 7: [/input-8, 987] 
split level 8: [/input-12, 90] 
split level 9: [/input-12, 11] 
split level 10: [/input-8, 563] 
split level 11: [/input-8, 812] 
split level 12: [/input-8, 690] 
split level 13: [/input-8, 1076] 
split level 14: [/input-8, 169] 
split level 15: [/input-8, 1425] 
split level 16: [/input-8, 821] 
split level 17: [/input, 360] 
split level 18: [/input-12, 78] 
split level 19: [/input-12, 60] 
split level 20: [/input-8, 1646] 
split level 21: [/input-8, 788] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 797] 
split level 24: [/input-8, 1326] 
split level 25: [/input, 1416] 
split level 26: [/input-8, 1322] 
split level 27: [/input-8, 1947] 
split level 28: [/input-8, 179] 
split level 29: [/input, 2454] 
split level 30: [/input, 364] 
split level 31: [/input, 2471] 
split level 32: [/input-8, 1519] 
split level 33: [/input-8, 787] 
split level 34: [/input, 420] 
split level 35: [/input, 3272] 
split level 36: [/input-8, 884] 
split level 37: [/input, 4065] 
split level 38: [/input, 3239] 
split level 39: [/input-8, 681] 
split level 40: [/input, 2184] 
split level 41: [/input, 343] 
split level 42: [/input, 1617] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 1454] 
split level 45: [/input, 449] 
split level 46: [/input, 3269] 
split level 47: [/input-8, 1520] 
split level 48: [/input, 448] 
split level 49: [/input, 645] 
split level 50: [/input, 1495] 
split level 51: [/input-8, 1305] 
split level 52: [/input-8, 571] 
split level 53: [/input, 421] 
split level 54: [/input, 1431] 
split level 55: [/input-8, 573] 
split level 56: [/input, 4066] 
split level 57: [/input, 398] 
split level 58: [/input-8, 1289] 
split level 59: [/input-8, 1318] 
split level 60: [/input, 3287] 
split level 61: [/input, 3383] 
split level 62: [/input, 380] 
split level 63: [/input, 1404] 
split level 64: [/input, 1618] 
split level 65: [/input, 2121] 
split level 66: [/input, 1494] 
split level 67: [/input, 419] 
split level 68: [/input, 2469] 
split level 69: [/input, 404] 
split level 70: [/input-8, 570] 
split level 71: [/input, 422] 
split level 72: [/input, 2505] 
split level 73: [/input-8, 1508] 
split level 74: [/input, 2489] 
split level 75: [/input-8, 1505] 
split level 76: [/input, 3541] 
split level 77: [/input, 1769] 
split level 78: [/input, 2266] 
split level 79: [/input, 2507] 
split level 80: [/input, 3253] 
split level 81: [/input-8, 1353] 
split level 82: [/input, 2625] 
split level 83: [/input, 3221] 
split level 84: [/input, 3257] 
split level 85: [/input, 3527] 
split level 86: [/input, 3283] 
split level 87: [/input, 1447] 
split level 88: [/input-8, 2010] 
split level 89: [/input-8, 1039] 
split level 90: [/input-8, 540] 
split level 91: [/input, 1185] 
split level 92: [/input, 1500] 
split level 93: [/input, 2120] 
split level 94: [/input, 3166] 
split level 95: [/input, 2119] 
split level 96: [/input, 2200] 
split level 97: [/input, 4064] 
split level 98: [/input-8, 822] 
split level 99: [/input, 2504] 
split level 100: [/input, 1367] 
split level 101: [/input, 110] 
split level 102: [/input, 1509] 
split level 103: [/input, 3865] 
split level 104: [/input, 3219] 
split level 105: [/input, 3302] 
split level 106: [/input, 3385] 
split level 107: [/input, 929] 
split level 108: [/input, 4014] 
split level 109: [/input, 2538] 
split level 110: [/input, 1379] 
split level 111: [/input, 415] 
split level 112: [/input, 3547] 
split level 113: [/input-8, 679] 
split level 114: [/input, 3386] 
split level 115: [/input, 1451] 
split level 116: [/input, 3542] 
split level 117: [/input, 3384] 
split level 118: [/input, 2530] 
split level 119: [/input, 1381] 
split level 120: [/input, 1770] 
split level 121: [/input, 1403] 
split level 122: [/input, 2104] 
split level 123: [/input, 3284] 
split level 124: [/input, 41] 
split level 125: [/input, 227] 
split level 126: [/input, 3305] 
split level 127: [/input, 3291] 
split level 128: [/input, 3308] 
split level 129: [/input, 3282] 
split level 130: [/input, 3866] 
split level 131: [/input, 2523] 
split level 132: [/input, 373] 
split level 133: [/input, 3345] 
split level 134: [/input, 2346] 
split level 135: [/input, 3329] 
split level 136: [/input, 3150] 
split level 137: [/input, 3881] 
split level 138: [/input, 2534] 
split level 139: [/input-8, 546] 
split level 140: [/input, 2332] 
split level 141: [/input, 3556] 
split level 142: [/input, 2514] 
split level 143: [/input, 4067] 
split level 144: [/input, 4032] 
split level 145: [/input, 40] 
split level 146: [/input, 2345] 
split level 147: [/input, 2146] 
split level 148: [/input, 1335] 
split level 149: [/input, 3868] 
split level 150: [/input, 2257] 
split level 151: [/input, 3559] 
split level 152: [/input, 3884] 
split level 153: [/input, 3867] 
split level 154: [/input, 3915] 
split level 155: [/input, 2099] 
split level 156: [/input, 2519] 
split level 157: [/input, 3883] 
split level 158: [/input, 3304] 
split level 159: [/input, 2155] 
split level 160: [/input, 2397] 
split level 161: [/input, 3934] 
split level 162: [/input, 3165] 
split level 163: [/input, 3364] 
split level 164: [/input, 2329] 
split level 165: [/input-8, 1378] 
split level 166: [/input, 2539] 
split level 167: [/input, 2347] 
split level 168: [/input, 3864] 
split level 169: [/input-8, 1354] 
split level 170: [/input, 3199] 
split level 171: [/input, 2331] 
split level 172: [/input, 3330] 
split level 173: [/input, 3097] 
split level 174: [/input, 2348] 
split level 175: [/input, 3882] 
split level 176: [/input, 899] 
split level 177: [/input, 713] 
split level 178: [/input, 3863] 
split level 179: [/input, 3202] 
split level 180: [/input, 3870] 
split level 181: [/input, 3861] 
split level 182: [/input, 3363] 
split level 183: [/input, 3879] 
split level 184: [/input, 3354] 
split level 185: [/input, 3880] 
split level 186: [/input, 87] 
split level 187: [/input, 1775] 
split level 188: [/input, 3862] 
split level 189: [/input, 3296] 
split level 190: [/input, 3860] 
split level 191: [/input, 3332] 
split level 192: [/input, 2327] 
split level 193: [/input, 3349] 
split level 194: [/input, 1282] 
split level 195: [/input, 498] 
split level 196: [/input, 3398] 
split level 197: [/input, 2856] 
split level 198: [/input, 1515] 
split level 199: [/input, 2855] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02312493324279785
10 lb beta sum: 0.0, worst -0.023122429847717285
Time: prepare 0.0118    bound 0.1034    transfer 0.0025    finalize 0.0032    func 0.1237    
Accumulated time: func 0.1805    prepare 0.0223    bound 0.1598    transfer 0.0026    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.22458112) min lb tensor(-0.02311945)
Number of Verified Splits: 17 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011521339416503906 
BICCOS Cumulative time: 0.011521339416503906
Preprocessing time: 0.010366678237915039 Inference time: 0.0007202625274658203 Add cuts time: 0.00022912025451660156 Cut analysis time: 0.0002052783966064453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5224    set_bounds 0.0089    solve 0.1238    add 0.0103    
Accumulated time: pickout 0.0004    decision 0.5224    set_bounds 0.0089    solve 0.1238    add 0.0103    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([7.82732465e+31]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([7.82732465e+31]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.12833356857299805

all verified at 0th iter
Time: prepare 0.0003    bound 0.0044    transfer 0.0001    finalize 0.0001    func 0.0050    
Accumulated time: func 0.1855    prepare 0.0226    bound 0.1641    transfer 0.0027    finalize 0.0035    
After pruning, left:  0

Back to Regular BaB

Result: safe in 2.4856 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25358391, -24.01944351, -13.62016106, -15.25064659, -19.34745598,
         -15.90201569, -19.20198250, -17.42230415, -21.89736557, -21.49999237]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 554] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 97] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.17917967, 9.69885063, 1.01258540, 5.11244965, 1.56947911, 4.91068316,
         3.15387392, 7.60085869, 7.21997929]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0490 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [752]; unstable size 752; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 752] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 752] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 752] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 223] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77094555,  1.88772726,  3.21973848,  2.86656594,  4.79594135,
          2.18563271,  4.89809656, -1.79894888,  2.22324109]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
          -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63588810]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 511] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 511] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 203] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.79137325,  4.81029224,  3.58751011,  3.09708118,  4.12102795,
          5.00578594,  3.13694286,  2.81165648, -0.60362911]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.17292595, -3.44921255, -9.58248615, -8.45668793, -7.94491386,
          -9.12796783, -9.80561256, -8.33679199, -7.18043041, -3.17307949]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27613306]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0543 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.25000286, -9.54972458, -6.18170929, -5.75074911, -6.05999041,
         -5.86923456, -7.27043962, -7.67426729, -6.16280842, -8.88309860]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [683]; unstable size 683; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 683] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 683] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 683] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00514412, 1.08236051, 0.27113527, 0.77234662, 0.24157721, 1.78406549,
         1.89451575, 0.67536879, 3.36466646]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 508] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 508] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 297] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63653493,  3.73463655, -1.26144528, -0.64267170, -1.08236957,
         -0.74575412,  0.71406722,  3.06178904,  2.80589008]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201],
         [-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04696989,  0.53653121,  0.19065475,  0.55245256]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 578] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 578] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 188] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.28026736e-01, -4.45046544e-01, -7.57262468e-01, -6.84045792e-01,
         -8.51392746e-04, -3.69360209e-01,  3.41860175e-01,  4.21400309e-01,
         -1.54338706e+00]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018],
         [ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56228256,  0.35316277,  0.60233402,  1.22050858,  0.90888691,
          -0.16182518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0834 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 439] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 439] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 275] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.63732100,  4.43945503, -0.32903957,  1.63714910, -0.59455490,
          1.22534430,  1.17066145,  4.56741524,  4.21444321]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.46it/s]100%|██████████| 1/1 [00:00<00:00,  8.45it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.29665041, -9.85951042, -3.74907804, -5.51449394, -3.18303251,
          -5.30622292, -2.97571468, -5.53970671, -9.34093189, -9.30280685],
         [-7.29665041, -9.85951042, -3.74907804, -5.51449394, -3.18303251,
          -5.30622292, -2.97571468, -5.53970671, -9.34093189, -9.30280685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.77336335, 0.20731783]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1212 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.83037757873535
alpha/beta optimization time: 1.2851662635803223
initial alpha-crown bounds: tensor([[ 2.76347399,  4.57243633, -0.24465752,  1.68950343, -0.50626040,
          1.28860581,  1.25143158,  4.69473362,  4.32110977]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5062603950500488
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55865716934204
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5586175918579
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5585916042328
Verifying property 2 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24465752]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24465752]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011014938354492188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24465274810791016
10 lb beta sum: 0.0, worst -0.24466276168823242
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0589    transfer 0.0001    finalize 0.0001    func 0.0594    
Accumulated time: func 0.0594    prepare 0.0002    bound 0.0589    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 60] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 25] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 68] 
split level 11: [/input-8, 850] 
split level 12: [/input-12, 33] 
split level 13: [/input-8, 1828] 
split level 14: [/input-8, 923] 
split level 15: [/input-8, 932] 
split level 16: [/input-8, 88] 
split level 17: [/input-8, 95] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 1902] 
split level 20: [/input-8, 809] 
split level 21: [/input-8, 85] 
split level 22: [/input-8, 867] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1427] 
split level 25: [/input-8, 666] 
split level 26: [/input-8, 1362] 
split level 27: [/input-8, 674] 
split level 28: [/input-8, 988] 
split level 29: [/input-8, 292] 
split level 30: [/input-8, 1497] 
split level 31: [/input-8, 933] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 1357] 
split level 34: [/input-8, 985] 
split level 35: [/input-8, 485] 
split level 36: [/input-8, 682] 
split level 37: [/input-8, 1829] 
split level 38: [/input-8, 858] 
split level 39: [/input-8, 522] 
split level 40: [/input-8, 491] 
split level 41: [/input-8, 1364] 
split level 42: [/input-8, 660] 
split level 43: [/input-8, 1307] 
split level 44: [/input-8, 80] 
split level 45: [/input-8, 531] 
split level 46: [/input-8, 1373] 
split level 47: [/input-8, 542] 
split level 48: [/input-8, 1019] 
split level 49: [/input-8, 1021] 
split level 50: [/input-8, 989] 
split level 51: [/input-8, 994] 
split level 52: [/input-8, 1894] 
split level 53: [/input-8, 1306] 
split level 54: [/input-8, 2008] 
split level 55: [/input-8, 1876] 
split level 56: [/input-8, 1873] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 1910] 
split level 59: [/input-8, 1426] 
split level 60: [/input-8, 1428] 
split level 61: [/input, 1674] 
split level 62: [/input-8, 427] 
split level 63: [/input-8, 66] 
split level 64: [/input-8, 110] 
split level 65: [/input-8, 1429] 
split level 66: [/input-8, 1886] 
split level 67: [/input-8, 1486] 
split level 68: [/input-8, 1495] 
split level 69: [/input-8, 530] 
split level 70: [/input-8, 817] 
split level 71: [/input-8, 89] 
split level 72: [/input-8, 972] 
split level 73: [/input-8, 1515] 
split level 74: [/input-8, 1420] 
split level 75: [/input-8, 918] 
split level 76: [/input-8, 1012] 
split level 77: [/input-8, 1301] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1874] 
split level 80: [/input-8, 1291] 
split level 81: [/input-8, 1433] 
split level 82: [/input, 1603] 
split level 83: [/input-8, 1498] 
split level 84: [/input-8, 841] 
split level 85: [/input, 1671] 
split level 86: [/input-8, 1421] 
split level 87: [/input-8, 1506] 
split level 88: [/input-8, 1437] 
split level 89: [/input-8, 1885] 
split level 90: [/input-8, 973] 
split level 91: [/input-8, 1142] 
split level 92: [/input-8, 893] 
split level 93: [/input-8, 1869] 
split level 94: [/input-8, 1425] 
split level 95: [/input-8, 981] 
split level 96: [/input-8, 658] 
split level 97: [/input-8, 297] 
split level 98: [/input-8, 1139] 
split level 99: [/input, 1637] 
split level 100: [/input-8, 849] 
split level 101: [/input-8, 942] 
split level 102: [/input-8, 637] 
split level 103: [/input-8, 1011] 
split level 104: [/input, 482] 
split level 105: [/input-8, 1081] 
split level 106: [/input-8, 73] 
split level 107: [/input-8, 2024] 
split level 108: [/input-8, 953] 
split level 109: [/input-8, 1860] 
split level 110: [/input-8, 1911] 
split level 111: [/input-8, 565] 
split level 112: [/input-8, 1811] 
split level 113: [/input-8, 111] 
split level 114: [/input-8, 1417] 
split level 115: [/input-8, 916] 
split level 116: [/input-8, 65] 
split level 117: [/input, 1705] 
split level 118: [/input-8, 127] 
split level 119: [/input-8, 1352] 
split level 120: [/input-8, 1861] 
split level 121: [/input-8, 635] 
split level 122: [/input-8, 945] 
split level 123: [/input, 1669] 
split level 124: [/input-8, 1867] 
split level 125: [/input, 2169] 
split level 126: [/input-8, 495] 
split level 127: [/input-8, 2009] 
split level 128: [/input, 1721] 
split level 129: [/input-8, 1865] 
split level 130: [/input-8, 494] 
split level 131: [/input, 1641] 
split level 132: [/input-8, 471] 
split level 133: [/input-8, 436] 
split level 134: [/input, 1654] 
split level 135: [/input-8, 116] 
split level 136: [/input-8, 2000] 
split level 137: [/input, 2698] 
split level 138: [/input-8, 470] 
split level 139: [/input, 2291] 
split level 140: [/input-8, 2033] 
split level 141: [/input-8, 1302] 
split level 142: [/input-8, 559] 
split level 143: [/input-8, 936] 
split level 144: [/input-8, 1940] 
split level 145: [/input, 1602] 
split level 146: [/input, 2116] 
split level 147: [/input-8, 1533] 
split level 148: [/input-8, 1039] 
split level 149: [/input-8, 1881] 
split level 150: [/input-8, 1360] 
split level 151: [/input, 570] 
split level 152: [/input-8, 786] 
split level 153: [/input, 2115] 
split level 154: [/input, 2168] 
split level 155: [/input-8, 943] 
split level 156: [/input-8, 2032] 
split level 157: [/input-8, 699] 
split level 158: [/input, 2185] 
split level 159: [/input-8, 1787] 
split level 160: [/input-8, 1490] 
split level 161: [/input-8, 1788] 
split level 162: [/input-8, 1947] 
split level 163: [/input-8, 281] 
split level 164: [/input-8, 415] 
split level 165: [/input, 2699] 
split level 166: [/input, 2343] 
split level 167: [/input-8, 885] 
split level 168: [/input-8, 1465] 
split level 169: [/input, 676] 
split level 170: [/input-8, 1530] 
split level 171: [/input-8, 1120] 
split level 172: [/input-8, 905] 
split level 173: [/input-8, 1440] 
split level 174: [/input-8, 122] 
split level 175: [/input-8, 574] 
split level 176: [/input-8, 1350] 
split level 177: [/input, 293] 
split level 178: [/input, 1524] 
split level 179: [/input-8, 949] 
split level 180: [/input, 95] 
split level 181: [/input, 2345] 
split level 182: [/input-8, 1232] 
split level 183: [/input-8, 1872] 
split level 184: [/input, 2592] 
split level 185: [/input-8, 1448] 
split level 186: [/input-8, 1975] 
split level 187: [/input, 2700] 
split level 188: [/input, 2613] 
split level 189: [/input-8, 426] 
split level 190: [/input, 4] 
split level 191: [/input, 2260] 
split level 192: [/input, 1352] 
split level 193: [/input, 4049] 
split level 194: [/input-8, 961] 
split level 195: [/input, 647] 
split level 196: [/input-8, 1812] 
split level 197: [/input, 11] 
split level 198: [/input, 2359] 
split level 199: [/input, 3841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24462223052978516
10 lb beta sum: 0.0, worst -0.24462032318115234
Time: prepare 0.0117    bound 0.1061    transfer 0.0031    finalize 0.0030    func 0.1266    
Accumulated time: func 0.1861    prepare 0.0224    bound 0.1650    transfer 0.0032    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.41849852) min lb tensor(-0.24461031)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.011106729507446289 
BICCOS Cumulative time: 0.011106729507446289
Preprocessing time: 0.01043701171875 Inference time: 0.0002627372741699219 Add cuts time: 0.00010538101196289062 Cut analysis time: 0.00030159950256347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22439 (1), -0.22387 (1), -0.22345 (1), -0.22296 (1), -0.22291 (1), -0.22271 (1), -0.22150 (1), -0.22143 (1), -0.22069 (1), -0.22037 (1), -0.22016 (1), -0.21997 (1), -0.21990 (1), -0.21947 (1), -0.21886 (1), -0.21815 (1), -0.21752 (1), -0.21725 (1), -0.21681 (1), -0.21676 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5289    set_bounds 0.0112    solve 0.1267    add 0.0715    
Accumulated time: pickout 0.0004    decision 0.5289    set_bounds 0.0112    solve 0.1267    add 0.0715    
Current (lb-rhs): -0.22439146041870117
50 domains visited
Cumulative time: 0.8275983333587646

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 51] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 1] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611574172973633
10 lb beta sum: 0.7892306447029114, worst -0.13307738304138184
Time: prepare 0.0073    bound 0.1251    transfer 0.0008    finalize 0.0025    func 0.1386    
Accumulated time: func 0.3247    prepare 0.0299    bound 0.2901    transfer 0.0040    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.18590879) min lb tensor(-0.13278592)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.025389909744262695 
BICCOS Cumulative time: 0.036496639251708984
Preprocessing time: 0.012432336807250977 Inference time: 0.008656024932861328 Add cuts time: 0.004061222076416016 Cut analysis time: 0.000240325927734375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0202    set_bounds 0.0125    solve 0.1388    add 0.0163    
Accumulated time: pickout 0.0015    decision 0.5491    set_bounds 0.0237    solve 0.2655    add 0.0879    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.82732465e+31, 1.56261489e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.82732465e+31, 2.12774321e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.68940589e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([1., 1.]), tensor([0, 0]), tensor([7.82733239e+31, 1.94098040e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.06447458267211914

all verified at 0th iter
Time: prepare 0.0004    bound 0.0046    transfer 0.0001    finalize 0.0002    func 0.0053    
Accumulated time: func 0.3299    prepare 0.0303    bound 0.2947    transfer 0.0041    finalize 0.0058    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.21049857139587
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.21042132377625
Verifying property 4 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50626040]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50626040]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010776519775390625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5062603950500488
10 lb beta sum: 0.0, worst -0.5062627792358398
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0569    transfer 0.0001    finalize 0.0001    func 0.0574    
Accumulated time: func 0.0574    prepare 0.0002    bound 0.0569    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 92] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 26] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 54] 
split level 9: [/input-12, 46] 
split level 10: [/input-12, 33] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 88] 
split level 14: [/input-8, 1427] 
split level 15: [/input-8, 95] 
split level 16: [/input-8, 923] 
split level 17: [/input-8, 932] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 292] 
split level 20: [/input-8, 988] 
split level 21: [/input-8, 660] 
split level 22: [/input-12, 68] 
split level 23: [/input-8, 289] 
split level 24: [/input-8, 867] 
split level 25: [/input-8, 809] 
split level 26: [/input-8, 1420] 
split level 27: [/input-8, 989] 
split level 28: [/input, 1603] 
split level 29: [/input-8, 858] 
split level 30: [/input-8, 1873] 
split level 31: [/input-12, 40] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 434] 
split level 34: [/input-8, 933] 
split level 35: [/input-8, 1828] 
split level 36: [/input-8, 1428] 
split level 37: [/input-8, 2008] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 80] 
split level 40: [/input-8, 994] 
split level 41: [/input-8, 1437] 
split level 42: [/input-8, 297] 
split level 43: [/input-8, 972] 
split level 44: [/input-8, 981] 
split level 45: [/input-8, 307] 
split level 46: [/input, 1669] 
split level 47: [/input-8, 485] 
split level 48: [/input, 1674] 
split level 49: [/input-8, 1426] 
split level 50: [/input-8, 1005] 
split level 51: [/input-8, 985] 
split level 52: [/input-8, 1865] 
split level 53: [/input-8, 85] 
split level 54: [/input-8, 973] 
split level 55: [/input-8, 1497] 
split level 56: [/input-8, 1421] 
split level 57: [/input-8, 817] 
split level 58: [/input-8, 1429] 
split level 59: [/input-8, 302] 
split level 60: [/input-8, 1011] 
split level 61: [/input-8, 1829] 
split level 62: [/input-8, 1874] 
split level 63: [/input, 1654] 
split level 64: [/input-8, 436] 
split level 65: [/input-8, 849] 
split level 66: [/input-8, 2024] 
split level 67: [/input-8, 427] 
split level 68: [/input-8, 841] 
split level 69: [/input-8, 470] 
split level 70: [/input-8, 471] 
split level 71: [/input-8, 110] 
split level 72: [/input-8, 89] 
split level 73: [/input, 1671] 
split level 74: [/input-8, 522] 
split level 75: [/input-8, 1012] 
split level 76: [/input-8, 1142] 
split level 77: [/input-8, 281] 
split level 78: [/input-8, 674] 
split level 79: [/input-8, 293] 
split level 80: [/input-8, 1947] 
split level 81: [/input-8, 1019] 
split level 82: [/input-8, 565] 
split level 83: [/input-8, 1139] 
split level 84: [/input-8, 1486] 
split level 85: [/input, 1705] 
split level 86: [/input, 1721] 
split level 87: [/input-8, 116] 
split level 88: [/input-8, 1454] 
split level 89: [/input-8, 491] 
split level 90: [/input-8, 942] 
split level 91: [/input-8, 426] 
split level 92: [/input-8, 1857] 
split level 93: [/input-8, 1495] 
split level 94: [/input-8, 1425] 
split level 95: [/input, 2693] 
split level 96: [/input-8, 2000] 
split level 97: [/input-8, 415] 
split level 98: [/input-8, 1413] 
split level 99: [/input-8, 531] 
split level 100: [/input, 1556] 
split level 101: [/input, 2168] 
split level 102: [/input-8, 786] 
split level 103: [/input-8, 936] 
split level 104: [/input-8, 438] 
split level 105: [/input-8, 530] 
split level 106: [/input, 1767] 
split level 107: [/input, 2085] 
split level 108: [/input, 2613] 
split level 109: [/input-8, 1433] 
split level 110: [/input-8, 1452] 
split level 111: [/input-8, 997] 
split level 112: [/input-8, 916] 
split level 113: [/input, 2115] 
split level 114: [/input, 1641] 
split level 115: [/input, 2152] 
split level 116: [/input-8, 66] 
split level 117: [/input-8, 111] 
split level 118: [/input, 1734] 
split level 119: [/input, 2698] 
split level 120: [/input-8, 445] 
split level 121: [/input, 174] 
split level 122: [/input-8, 1417] 
split level 123: [/input, 2116] 
split level 124: [/input-8, 457] 
split level 125: [/input, 1735] 
split level 126: [/input, 300] 
split level 127: [/input-8, 65] 
split level 128: [/input, 482] 
split level 129: [/input, 2069] 
split level 130: [/input-8, 1533] 
split level 131: [/input, 1589] 
split level 132: [/input-8, 494] 
split level 133: [/input, 3862] 
split level 134: [/input-8, 495] 
split level 135: [/input-8, 1133] 
split level 136: [/input-8, 2033] 
split level 137: [/input, 1718] 
split level 138: [/input, 2185] 
split level 139: [/input-8, 1232] 
split level 140: [/input, 2150] 
split level 141: [/input, 2133] 
split level 142: [/input-8, 2032] 
split level 143: [/input-8, 1856] 
split level 144: [/input, 1602] 
split level 145: [/input-8, 1864] 
split level 146: [/input-8, 834] 
split level 147: [/input, 2291] 
split level 148: [/input-8, 1498] 
split level 149: [/input, 1100] 
split level 150: [/input-8, 1530] 
split level 151: [/input, 1765] 
split level 152: [/input-8, 1975] 
split level 153: [/input-8, 430] 
split level 154: [/input, 2090] 
split level 155: [/input-8, 1872] 
split level 156: [/input, 2699] 
split level 157: [/input-8, 1409] 
split level 158: [/input-8, 949] 
split level 159: [/input, 3861] 
split level 160: [/input-8, 2009] 
split level 161: [/input, 2108] 
split level 162: [/input, 2088] 
split level 163: [/input, 2592] 
split level 164: [/input, 2260] 
split level 165: [/input, 3892] 
split level 166: [/input, 282] 
split level 167: [/input, 3878] 
split level 168: [/input, 1352] 
split level 169: [/input-8, 635] 
split level 170: [/input, 46] 
split level 171: [/input, 3869] 
split level 172: [/input, 2101] 
split level 173: [/input-8, 1360] 
split level 174: [/input-8, 1787] 
split level 175: [/input-8, 73] 
split level 176: [/input, 4049] 
split level 177: [/input, 1524] 
split level 178: [/input-8, 1352] 
split level 179: [/input-8, 1490] 
split level 180: [/input, 1754] 
split level 181: [/input, 2182] 
split level 182: [/input, 1513] 
split level 183: [/input, 676] 
split level 184: [/input-8, 1120] 
split level 185: [/input, 1452] 
split level 186: [/input, 3357] 
split level 187: [/input-8, 1291] 
split level 188: [/input, 3448] 
split level 189: [/input, 3867] 
split level 190: [/input, 2203] 
split level 191: [/input, 2107] 
split level 192: [/input-8, 1008] 
split level 193: [/input, 647] 
split level 194: [/input, 2188] 
split level 195: [/input, 3560] 
split level 196: [/input, 3021] 
split level 197: [/input, 3386] 
split level 198: [/input, 1455] 
split level 199: [/input-8, 1839] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5061740875244141
10 lb beta sum: 0.0, worst -0.5061821937561035
Time: prepare 0.0120    bound 0.1052    transfer 0.0010    finalize 0.0028    func 0.1237    
Accumulated time: func 0.1811    prepare 0.0230    bound 0.1621    transfer 0.0011    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.40367413) min lb tensor(-0.50617218)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011170148849487305 
BICCOS Cumulative time: 0.011170148849487305
Preprocessing time: 0.010239839553833008 Inference time: 0.00019407272338867188 Add cuts time: 8.726119995117188e-05 Cut analysis time: 0.0006489753723144531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.48849 (1), -0.48792 (1), -0.48754 (1), -0.48726 (1), -0.48583 (1), -0.48515 (1), -0.48433 (1), -0.48392 (1), -0.48385 (1), -0.48346 (1), -0.48335 (1), -0.48328 (1), -0.48165 (1), -0.48136 (1), -0.48094 (1), -0.48011 (1), -0.47983 (1), -0.47808 (1), -0.47807 (1), -0.47700 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5313    set_bounds 0.0099    solve 0.1238    add 0.0740    
Accumulated time: pickout 0.0004    decision 0.5313    set_bounds 0.0099    solve 0.1238    add 0.0740    
Current (lb-rhs): -0.4884910583496094
50 domains visited
Cumulative time: 0.8132274150848389

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 92] [/input-12, 41] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4442729949951172
10 lb beta sum: 0.580084502696991, worst -0.43155229091644287
Time: prepare 0.0071    bound 0.1249    transfer 0.0008    finalize 0.0022    func 0.1377    
Accumulated time: func 0.3188    prepare 0.0304    bound 0.2870    transfer 0.0019    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.06436718) min lb tensor(-0.43132222)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.014181852340698242 
BICCOS Cumulative time: 0.025352001190185547
Preprocessing time: 0.012292861938476562 Inference time: 0.0006086826324462891 Add cuts time: 0.00028967857360839844 Cut analysis time: 0.0009906291961669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23470 (2), -0.23435 (2), -0.23302 (2), -0.23191 (2), -0.23077 (2), -0.22997 (2), -0.22990 (2), -0.22731 (2), -0.22637 (2), -0.22625 (2), -0.22572 (2), -0.22556 (2), -0.22311 (2), -0.22236 (2), -0.22210 (2), -0.22113 (2), -0.21567 (2), -0.21550 (2), -0.21354 (2), -0.20685 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0206    set_bounds 0.0130    solve 0.1378    add 0.0804    
Accumulated time: pickout 0.0015    decision 0.5519    set_bounds 0.0229    solve 0.2616    add 0.1544    
Current (lb-rhs): -0.23469752073287964
100 domains visited
Cumulative time: 1.0807054042816162

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 1] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2227473258972168
10 lb beta sum: 0.9273459911346436, worst -0.20668721199035645
Time: prepare 0.0065    bound 0.1272    transfer 0.0008    finalize 0.0023    func 0.1403    
Accumulated time: func 0.4592    prepare 0.0372    bound 0.4142    transfer 0.0027    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.14580774) min lb tensor(-0.19941163)
Number of Verified Splits: 61 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.01773214340209961 
BICCOS Cumulative time: 0.043084144592285156
Preprocessing time: 0.012693405151367188 Inference time: 0.0034911632537841797 Add cuts time: 0.0010178089141845703 Cut analysis time: 0.0005297660827636719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04815 (3), -0.04722 (3), -0.04629 (3), -0.04446 (3), -0.04413 (3), -0.04389 (3), -0.04357 (3), -0.04349 (3), -0.04334 (3), -0.04209 (3), -0.04107 (3), -0.04066 (3), -0.03809 (3), -0.03802 (3), -0.03509 (3), -0.03502 (3), -0.03434 (3), -0.03413 (3), -0.03267 (3), -0.03225 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0198    set_bounds 0.0157    solve 0.1405    add 0.0955    
Accumulated time: pickout 0.0025    decision 0.5717    set_bounds 0.0386    solve 0.4021    add 0.2499    
Current (lb-rhs): -0.04814642667770386
150 domains visited
Cumulative time: 1.371225357055664

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 46] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052874088287353516
10 lb beta sum: 0.7248146533966064, worst -0.03690224885940552
Time: prepare 0.0064    bound 0.1271    transfer 0.0008    finalize 0.0022    func 0.1392    
Accumulated time: func 0.5984    prepare 0.0438    bound 0.5413    transfer 0.0035    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.29559505) min lb tensor(-0.00390029)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 13
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.041649818420410156 
BICCOS Cumulative time: 0.08473396301269531
Preprocessing time: 0.012158393859863281 Inference time: 0.020653486251831055 Add cuts time: 0.007956504821777344 Cut analysis time: 0.0008814334869384766
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0205    set_bounds 0.0169    solve 0.1394    add 0.0248    
Accumulated time: pickout 0.0036    decision 0.5922    set_bounds 0.0555    solve 0.5415    add 0.2747    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.00585676e-11, 1.29911348e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.00585676e-11, 1.85313657e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.82732465e+31, 1.48647234e-01, 5.45033664e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 1.48647234e-01, 1.35761723e-01, 1.36166319e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 1.48647234e-01, 1.35761723e-01, 5.62617630e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.82732465e+31, 1.67330250e-01, 1.41800985e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92,  1]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 1.67330250e-01, 9.29244012e-02, 5.78576177e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92,  1]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([7.82732465e+31, 1.67330250e-01, 9.29244012e-02, 6.04485124e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32529163360595703
10 lb beta sum: 2.1049885749816895, worst -0.30181819200515747
Time: prepare 0.0005    bound 0.1321    transfer 0.0001    finalize 0.0002    func 0.1330    
Accumulated time: func 0.7314    prepare 0.0443    bound 0.6734    transfer 0.0036    finalize 0.0099    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 17] [/input-12, 17] 
split level 4: [/input-12, 46] [/input-12, 33] 
split level 5: [/input-12, 33] [/input-12, 46] 
split level 6: [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 1.317944049835205, worst -0.08894610404968262
10 lb beta sum: 1.3190902471542358, worst -0.08775210380554199
Time: prepare 0.0101    bound 0.1387    transfer 0.0008    finalize 0.0015    func 0.1531    
Accumulated time: func 0.8845    prepare 0.0549    bound 0.8121    transfer 0.0044    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.34541535) min lb tensor(-0.08726001)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.3205296993255615, worst -0.3950435519218445
10 lb beta sum: 1.642410397529602, worst -0.2002221941947937
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 13
#cuts 4-6: 44
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.46523237228393555 
BICCOS Cumulative time: 0.5499663352966309
Preprocessing time: 0.007512807846069336 Inference time: 0.44525957107543945 Add cuts time: 0.010420560836791992 Cut analysis time: 0.0020394325256347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08726 (7), -0.07200 (7), -0.03899 (7), -0.03201 (7), -0.02979 (7), -0.02331 (7), -0.01331 (7), -0.01069 (7), -0.00672 (7), -0.00424 (7), 
Length of domains: 10
Time: pickout 0.0005    decision 0.0198    set_bounds 0.0200    solve 0.1540    add 0.0009    
Accumulated time: pickout 0.0042    decision 0.6119    set_bounds 0.0755    solve 0.6955    add 0.2756    
Current (lb-rhs): -0.08726000785827637
160 domains visited
Cumulative time: 2.4324090480804443

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] 
split level 3: [/input-8, 867] [/input-8, 859] [/input-8, 291] [/input-8, 291] [/input-8, 291] [/input-8, 988] [/input-8, 859] [/input-8, 291] [/input-8, 291] [/input-8, 291] 
split level 4: [/input-8, 858] [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 427] [/input-8, 858] [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 281] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06752204895019531
10 lb beta sum: 0.0431610532104969, worst -0.06465816497802734
Time: prepare 0.0065    bound 0.1407    transfer 0.0020    finalize 0.0015    func 0.1528    
Accumulated time: func 1.0373    prepare 0.0616    bound 0.9528    transfer 0.0064    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.36717796) min lb tensor(-0.06448555)
Number of Verified Splits: 291 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22058391571044922
10 lb beta sum: 0.6365413069725037, worst -0.1898137629032135
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 76.
#cuts 1-3: 13
#cuts 4-6: 44
#cuts 7-9: 13
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.3821535110473633 
BICCOS Cumulative time: 0.9321198463439941
Preprocessing time: 0.010022163391113281 Inference time: 0.3535490036010742 Add cuts time: 0.015456914901733398 Cut analysis time: 0.003125429153442383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06449 (12), -0.06180 (12), -0.05758 (12), -0.05614 (12), -0.05462 (12), -0.05102 (12), -0.05003 (12), -0.04844 (12), -0.04719 (12), -0.04606 (12), -0.04193 (12), -0.04159 (12), -0.04014 (12), -0.03833 (12), -0.03563 (12), -0.03331 (12), -0.01188 (12), -0.01088 (12), -0.00966 (12), -0.00852 (12), 
Length of domains: 29
Time: pickout 0.0011    decision 0.0171    set_bounds 0.0262    solve 0.1530    add 0.0013    
Accumulated time: pickout 0.0053    decision 0.6290    set_bounds 0.1017    solve 0.8485    add 0.2768    
Current (lb-rhs): -0.06448554992675781
189 domains visited
Cumulative time: 3.016537666320801

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] 
split level 1: [/input-8, 994] [/input-8, 858] [/input-8, 1873] [/input-8, 994] [/input-8, 994] [/input-8, 1873] [/input-8, 994] [/input-8, 994] [/input-8, 1873] [/input-8, 994] 
split level 2: [/input-8, 858] [/input-8, 994] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-12, 40] [/input-8, 858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05118846893310547
10 lb beta sum: 0.21771880984306335, worst -0.048494815826416016
Time: prepare 0.0049    bound 0.1474    transfer 0.0006    finalize 0.0016    func 0.1561    
Accumulated time: func 1.1935    prepare 0.0667    bound 1.1002    transfer 0.0070    finalize 0.0144    
all_split False
======================Cut inference begins======================
max lb tensor(0.02909136) min lb tensor(-0.04841423)
Number of Verified Splits: 152 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 16
#cuts 4-6: 15
#cuts 7-9: 7
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.03345155715942383 
BICCOS Cumulative time: 0.965571403503418
Preprocessing time: 0.00754547119140625 Inference time: 0.018724441528320312 Add cuts time: 0.005326032638549805 Cut analysis time: 0.001855611801147461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04841 (15), -0.04576 (15), -0.04570 (15), -0.04458 (15), -0.04212 (15), -0.04168 (15), -0.04166 (15), -0.04115 (15), -0.04043 (15), -0.03865 (15), -0.03797 (15), -0.03756 (15), -0.03726 (15), -0.03636 (15), -0.03628 (15), -0.03617 (15), -0.03432 (15), -0.03422 (15), -0.03366 (15), -0.03319 (15), 
Length of domains: 80
Time: pickout 0.0020    decision 0.0159    set_bounds 0.0164    solve 0.1562    add 0.0014    
Accumulated time: pickout 0.0073    decision 0.6449    set_bounds 0.1180    solve 1.0047    add 0.2783    
Current (lb-rhs): -0.04841423034667969
269 domains visited
Cumulative time: 3.243096113204956

BaB round 4
batch: 80
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] 
split level 1: [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.040911197662353516
10 lb beta sum: 0.31019264459609985, worst -0.03813886642456055
Time: prepare 0.0067    bound 0.1476    transfer 0.0007    finalize 0.0018    func 0.1591    
Accumulated time: func 1.3525    prepare 0.0736    bound 1.2478    transfer 0.0077    finalize 0.0163    
all_split False
======================Cut inference begins======================
max lb tensor(0.02789450) min lb tensor(-0.03804159)
Number of Verified Splits: 184 of 320
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 15
#cuts 4-6: 32
#cuts 7-9: 7
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.047440290451049805 
BICCOS Cumulative time: 1.0130116939544678
Preprocessing time: 0.010541915893554688 Inference time: 0.027977466583251953 Add cuts time: 0.006434202194213867 Cut analysis time: 0.002486705780029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03804 (17), -0.03541 (17), -0.03513 (17), -0.03425 (17), -0.03150 (17), -0.03136 (17), -0.03135 (17), -0.03042 (17), -0.03016 (17), -0.02818 (17), -0.02757 (17), -0.02700 (17), -0.02688 (17), -0.02598 (17), -0.02590 (17), -0.02556 (17), -0.02398 (17), -0.02387 (17), -0.02372 (17), -0.02332 (17), 
Length of domains: 136
Time: pickout 0.0021    decision 0.0158    set_bounds 0.0239    solve 0.1592    add 0.0022    
Accumulated time: pickout 0.0094    decision 0.6608    set_bounds 0.1420    solve 1.1639    add 0.2804    
Current (lb-rhs): -0.03804159164428711
405 domains visited
Cumulative time: 3.4955251216888428

BaB round 5
batch: 136
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03584766387939453
10 lb beta sum: 0.3074636459350586, worst -0.03321027755737305
Time: prepare 0.0060    bound 0.1577    transfer 0.0010    finalize 0.0016    func 0.1683    
Accumulated time: func 1.5208    prepare 0.0799    bound 1.4055    transfer 0.0088    finalize 0.0179    
all_split False
======================Cut inference begins======================
max lb tensor(0.01716569) min lb tensor(-0.03314686)
Number of Verified Splits: 137 of 272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 70.
#cuts 1-3: 18
#cuts 4-6: 40
#cuts 7-9: 7
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.03703737258911133 
BICCOS Cumulative time: 1.050049066543579
Preprocessing time: 0.00864553451538086 Inference time: 0.019500732421875 Add cuts time: 0.00625920295715332 Cut analysis time: 0.0026319026947021484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03315 (18), -0.03102 (18), -0.02946 (18), -0.02901 (18), -0.02715 (18), -0.02681 (18), -0.02677 (18), -0.02614 (18), -0.02591 (18), -0.02548 (18), -0.02327 (18), -0.02252 (18), -0.02244 (18), -0.02224 (18), -0.02206 (18), -0.02154 (18), -0.02149 (18), -0.01949 (18), -0.01880 (18), -0.01873 (18), 
Length of domains: 135
Time: pickout 0.0032    decision 0.0218    set_bounds 0.0133    solve 0.1684    add 0.0016    
Accumulated time: pickout 0.0126    decision 0.6826    set_bounds 0.1552    solve 1.3323    add 0.2821    
Current (lb-rhs): -0.03314685821533203
540 domains visited
Cumulative time: 3.7424185276031494

BaB round 6
batch: 135
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02974843978881836
10 lb beta sum: 0.2931146025657654, worst -0.03505551442503929
Time: prepare 0.0057    bound 0.1425    transfer 0.0006    finalize 0.0015    func 0.1521    
Accumulated time: func 1.6729    prepare 0.0858    bound 1.5480    transfer 0.0094    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.01638937) min lb tensor(-0.02716541)
Number of Verified Splits: 127 of 270
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 69.
#cuts 1-3: 25
#cuts 4-6: 31
#cuts 7-9: 8
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.03537726402282715 
BICCOS Cumulative time: 1.0854263305664062
Preprocessing time: 0.008577585220336914 Inference time: 0.018474578857421875 Add cuts time: 0.005821704864501953 Cut analysis time: 0.0025033950805664062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02717 (19), -0.02503 (19), -0.02403 (19), -0.02394 (19), -0.02349 (19), -0.02182 (19), -0.02118 (19), -0.02118 (19), -0.02079 (19), -0.02070 (19), -0.02039 (19), -0.02037 (19), -0.01936 (19), -0.01817 (19), -0.01799 (19), -0.01755 (19), -0.01734 (19), -0.01722 (19), -0.01684 (19), -0.01642 (19), 
Length of domains: 143
Time: pickout 0.0028    decision 0.0199    set_bounds 0.0129    solve 0.1522    add 0.0023    
Accumulated time: pickout 0.0153    decision 0.7025    set_bounds 0.1681    solve 1.4845    add 0.2844    
Current (lb-rhs): -0.02716541290283203
683 domains visited
Cumulative time: 3.9694013595581055

BaB round 7
batch: 143
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 1865] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024634361267089844
10 lb beta sum: 0.27914342284202576, worst -0.022062301635742188
Time: prepare 0.0062    bound 0.1449    transfer 0.0008    finalize 0.0016    func 0.1555    
Accumulated time: func 1.8284    prepare 0.0923    bound 1.6929    transfer 0.0102    finalize 0.0210    
all_split False
======================Cut inference begins======================
max lb tensor(0.00520515) min lb tensor(-0.02202082)
Number of Verified Splits: 129 of 286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 69.
#cuts 1-3: 25
#cuts 4-6: 35
#cuts 7-9: 4
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.036147117614746094 
BICCOS Cumulative time: 1.1215734481811523
Preprocessing time: 0.008942365646362305 Inference time: 0.01897263526916504 Add cuts time: 0.005805253982543945 Cut analysis time: 0.0024268627166748047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02202 (20), -0.02180 (20), -0.01988 (20), -0.01956 (20), -0.01881 (20), -0.01872 (20), -0.01854 (20), -0.01835 (20), -0.01816 (20), -0.01657 (20), -0.01605 (20), -0.01604 (20), -0.01597 (20), -0.01577 (20), -0.01557 (20), -0.01550 (20), -0.01528 (20), -0.01525 (20), -0.01505 (20), -0.01505 (20), 
Length of domains: 157
Time: pickout 0.0033    decision 0.0210    set_bounds 0.0132    solve 0.1556    add 0.0030    
Accumulated time: pickout 0.0187    decision 0.7235    set_bounds 0.1814    solve 1.6401    add 0.2873    
Current (lb-rhs): -0.022020816802978516
840 domains visited
Cumulative time: 4.20309853553772

BaB round 8
batch: 157
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 1865] [/input-8, 973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4656222462654114, worst -0.022549688816070557
10 lb beta sum: 0.7460585832595825, worst -0.032089948654174805
Time: prepare 0.0138    bound 0.1483    transfer 0.0016    finalize 0.0018    func 0.1676    
Accumulated time: func 1.9960    prepare 0.1063    bound 1.8413    transfer 0.0118    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.01863189) min lb tensor(-0.01978022)
Number of Verified Splits: 165 of 314
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 24
#cuts 4-6: 23
#cuts 7-9: 1
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.04115557670593262 
BICCOS Cumulative time: 1.162729024887085
Preprocessing time: 0.009807348251342773 Inference time: 0.025176048278808594 Add cuts time: 0.004626274108886719 Cut analysis time: 0.0015459060668945312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01978 (21), -0.01761 (21), -0.01658 (21), -0.01644 (21), -0.01642 (21), -0.01613 (21), -0.01427 (21), -0.01415 (21), -0.01390 (21), -0.01385 (21), -0.01381 (21), -0.01325 (21), -0.01322 (21), -0.01315 (21), -0.01303 (21), -0.01298 (21), -0.01277 (21), -0.01276 (21), -0.01188 (21), -0.01169 (21), 
Length of domains: 149
Time: pickout 0.0033    decision 0.0216    set_bounds 0.0138    solve 0.1677    add 0.0032    
Accumulated time: pickout 0.0220    decision 0.7451    set_bounds 0.1952    solve 1.8078    add 0.2906    
Current (lb-rhs): -0.019780218601226807
989 domains visited
Cumulative time: 4.4555158615112305

BaB round 9
batch: 149
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018445491790771484
10 lb beta sum: 0.2748563587665558, worst -0.01584339141845703
Time: prepare 0.0076    bound 0.1498    transfer 0.0007    finalize 0.0017    func 0.1620    
Accumulated time: func 2.1581    prepare 0.1141    bound 1.9911    transfer 0.0125    finalize 0.0245    
all_split False
======================Cut inference begins======================
max lb tensor(0.01712847) min lb tensor(-0.01579142)
Number of Verified Splits: 202 of 298
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 22
#cuts 4-6: 19
#cuts 7-9: 1
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.046700477600097656 
BICCOS Cumulative time: 1.2094295024871826
Preprocessing time: 0.009536027908325195 Inference time: 0.03159594535827637 Add cuts time: 0.004148244857788086 Cut analysis time: 0.0014202594757080078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01579 (22), -0.01364 (22), -0.01250 (22), -0.01237 (22), -0.01233 (22), -0.01196 (22), -0.01024 (22), -0.01022 (22), -0.00993 (22), -0.00991 (22), -0.00965 (22), -0.00910 (22), -0.00898 (22), -0.00898 (22), -0.00896 (22), -0.00891 (22), -0.00867 (22), -0.00856 (22), -0.00771 (22), -0.00749 (22), 
Length of domains: 96
Time: pickout 0.0033    decision 0.0202    set_bounds 0.0136    solve 0.1622    add 0.0033    
Accumulated time: pickout 0.0253    decision 0.7653    set_bounds 0.2088    solve 1.9700    add 0.2938    
Current (lb-rhs): -0.01579141616821289
1085 domains visited
Cumulative time: 4.706646203994751

BaB round 10
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] 
split level 1: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014036178588867188
10 lb beta sum: 0.10179530084133148, worst -0.0113677978515625
Time: prepare 0.0077    bound 0.1415    transfer 0.0019    finalize 0.0021    func 0.1558    
Accumulated time: func 2.3139    prepare 0.1220    bound 2.1326    transfer 0.0144    finalize 0.0266    
all_split False
======================Cut inference begins======================
max lb tensor(0.03285456) min lb tensor(-0.01132774)
Number of Verified Splits: 339 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 28
#cuts 4-6: 11
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.07255125045776367 
BICCOS Cumulative time: 1.2819807529449463
Preprocessing time: 0.01214742660522461 Inference time: 0.05473804473876953 Add cuts time: 0.004538774490356445 Cut analysis time: 0.001127004623413086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01133 (24), -0.00916 (24), -0.00802 (24), -0.00794 (24), -0.00789 (24), -0.00756 (24), -0.00575 (24), -0.00570 (24), -0.00541 (24), -0.00533 (24), -0.00528 (24), -0.00458 (24), -0.00457 (24), -0.00447 (24), -0.00447 (24), -0.00442 (24), -0.00428 (24), -0.00410 (24), -0.00400 (24), -0.00321 (24), 
Length of domains: 45
Time: pickout 0.0031    decision 0.0176    set_bounds 0.0190    solve 0.1559    add 0.0017    
Accumulated time: pickout 0.0284    decision 0.7829    set_bounds 0.2278    solve 2.1259    add 0.2955    
Current (lb-rhs): -0.011327743530273438
1130 domains visited
Cumulative time: 4.97909140586853

BaB round 11
batch: 45
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] 
split level 1: [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1429] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] 
split level 2: [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1421] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00024890899658203125

all verified at 0th iter
Time: prepare 0.0072    bound 0.0080    transfer 0.0019    finalize 0.0018    func 0.0212    
Accumulated time: func 2.3351    prepare 0.1294    bound 2.1406    transfer 0.0163    finalize 0.0284    
all_split False
======================Cut inference begins======================
max lb tensor(0.01808739) min lb tensor(0.00024891)
Number of Verified Splits: 360 of 360
No cut inferred: All or none verified.
Total number of valid cuts: 40.
#cuts 1-3: 28
#cuts 4-6: 11
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.010540485382080078 
BICCOS Cumulative time: 1.2925212383270264
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0019    decision 0.0179    set_bounds 0.0202    solve 0.0213    add 0.0005    
Accumulated time: pickout 0.0303    decision 0.8008    set_bounds 0.2481    solve 2.1472    add 0.2960    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1130 domains visited
Cumulative time: 5.052957057952881


Properties batch 5, size 1
Remaining timeout: 191.9815263748169
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 191.98141503334045
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 191.98138880729675
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 191.9813690185547
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 8.0187 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70108557, -2.61450195, -7.88389778, -7.46980858, -7.10053349,
         -7.85311460, -7.32898045, -5.37792873, -5.26348686, -0.13527048]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 517] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 517] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 189] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44307899, 1.46007848, 5.86254692, 5.68103170, 5.60793304, 5.96620178,
         5.60759163, 3.70175481, 3.77148247]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 480] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 480] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 192] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.12637305,  0.23386812,  0.06982803,  0.04919577,  0.70030779,
         -0.06877613,  0.36111903, -0.89804602, -1.82256591]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760],
         [-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.28669405,  1.57674026,  0.28387690, -0.97752047]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0804 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.01175785, -9.22564220, -6.09865665, -6.68279839, -7.01091385,
         -7.66662741, -3.74865699, -8.93857002, -9.70948601, -9.36056805]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 290, 1, 415] with unstable size 289 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 415] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [289]; unstable size 289; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 289] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 289] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.92234182, 3.34474063, 0.83518076, 1.42703414, 1.62353683, 2.12632895,
         3.08041954, 3.64250827, 3.61395812]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0494 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 464] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 464] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 195] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50733924,  4.83027840, -1.04858816,  0.40518236, -0.05837488,
          0.48497462,  0.45264530,  4.44294167,  3.27292347]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.89328861, -11.87365723,  -4.72995949,  -6.58205509,  -5.11540079,
           -6.15687943,  -6.98943567,  -6.80347681, -11.29017735, -10.07491016],
         [ -7.89328861, -11.87365723,  -4.72995949,  -6.58205509,  -5.11540079,
           -6.15687943,  -6.98943567,  -6.80347681, -11.29017735, -10.07491016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.38544130,  1.04147863]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0756 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60607052, -9.81349945, -5.86607075, -4.14033175, -5.51711655,
         -3.53696299, -6.38849020, -6.08620310, -7.73200989, -8.22923183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 522] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 522] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 220] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89997911, 4.68741703, 1.57923102, 0.30736446, 1.14825940, 1.82109821,
         1.72909117, 2.65290213, 3.25950575]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 686] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 686] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 214] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63966489,  4.83987570,  0.26498532, -0.32372510,  1.13650560,
          1.87988937,  2.01293588,  5.47729778,  4.25807381]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
          -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03234124]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88469028, -12.65882111, -12.62442398, -13.26971817, -13.08886814,
         -14.39622879, -13.06826305, -13.77910519,  -7.61941338, -13.15269947]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [474]; unstable size 474; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 474] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 474] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 474] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 182] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66201413, 3.41532946, 3.31493211, 3.81620860, 3.48846436, 4.76713276,
         3.58373833, 3.89160752, 3.77728796]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0282 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.95316505, -29.04301071, -22.88550568, -26.99249268, -26.92433929,
         -26.87813187, -26.17901230, -26.50130844, -27.15471458, -29.93289757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 636] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 206] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.13847518, 4.55568886, 3.22048378, 3.02970290, 2.95622373, 2.20912457,
         2.32559395, 2.85925484, 5.64449787]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.92584610, -7.42483807, -4.62941742, -4.01557446, -4.85893917,
         -3.11745501, -6.51985884, -2.25635386, -7.85682869, -5.87989426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 573] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 164] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.58360767, 3.69630337, 1.62351346, 1.19872487, 1.87599468, 0.30902326,
         3.29060102, 4.20989084, 2.42179346]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0607 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [612]; unstable size 612; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 318, 1, 612] with unstable size 317 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 612] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 612] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [317]; unstable size 317; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 317] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 317] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.89976645,  5.63465977,  1.31290960, -0.68691450,  1.36818123,
         -1.07342291,  2.11838007,  5.13911676,  5.00889301]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.90783310, -15.16053009,  -7.57349110,  -9.97743225,  -7.48518276,
          -10.30821037,  -7.42592621, -11.38831425, -14.43945026, -14.46265030],
         [-11.90783310, -15.16053009,  -7.57349110,  -9.97743225,  -7.48518276,
          -10.30821037,  -7.42592621, -11.38831425, -14.43945026, -14.46265030]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08830833, -0.14756489]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0069 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0819 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 659] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 226] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.12454128,  2.88798237,  3.24317980,  1.46328306,  4.59323883,
          3.30328608,  1.93248844, -1.68345594, -1.69870019]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704],
         [-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.82233620, -0.07801056, -0.74905586]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0542 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 509] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 509] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 190] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.62681055,  3.42381358, -0.43489373, -0.80544960,  0.11626768,
          1.46117353, -0.19169974,  4.37902164,  2.50552464]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672],
         [-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52087593, -0.51638973,  0.55349255]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0596 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 511] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 511] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 246] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05601621,  4.40511179,  1.92022491, -0.67723632,  2.14849854,
          1.43644261,  1.45348632,  4.22401047,  4.17532158]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.95911980, -14.67740154,  -8.50276279, -11.15490532,  -8.22284317,
          -11.39343548, -10.70833683, -10.67666340, -14.70250797, -14.25697708]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27991962]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0403 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36052370, -3.64754987, -8.43094254, -6.93587589, -8.07399559,
         -7.95548391, -8.76295853, -8.07159233, -4.37078619, -1.63098276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [666]; unstable size 666; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 666] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 666] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 666] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 197] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.38331795, 0.85898781, 5.10982227, 3.81529808, 4.82118130, 4.66787243,
         5.43832827, 4.82864952, 1.05962706]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [665]; unstable size 665; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 665] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 665] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 665] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 190] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.81563950,  4.79626942, -0.23131990,  0.04256070, -0.61334944,
          0.76331389,  1.09416676,  2.70510554,  5.43058109]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.39031887, -13.36584949,  -7.99200344,  -7.88567734,  -7.51200867,
           -7.59368086,  -9.04060841,  -9.48881340, -11.36435127, -13.91123199],
         [-12.39031887, -13.36584949,  -7.99200344,  -7.88567734,  -7.51200867,
           -7.59368086,  -9.04060841,  -9.48881340, -11.36435127, -13.91123199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39832258, -0.08167219]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0560 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 522] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 522] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.54438424,  1.50450706, -1.00405812, -0.75059587, -0.65832686,
         -0.60824031,  0.62780261, -1.52603471,  1.13424706]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.39375973, -10.87876701,  -7.30129433,  -7.40815878,  -7.76286411,
           -7.76071310,  -7.42278099,  -9.15025520,  -7.50671482, -10.33001041],
         [ -9.39375973, -10.87876701,  -7.30129433,  -7.40815878,  -7.76286411,
           -7.76071310,  -7.42278099,  -9.15025520,  -7.50671482, -10.33001041]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12148666, -0.01462221,  0.34008312,  0.33793211,  0.08393383]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0131 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0442 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 520] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 520] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 184] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35063863,  3.30825806, -0.56681442, -0.80880809, -1.41259146,
         -1.49340796,  0.91902608,  3.26092339,  2.75898981]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751],
         [-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39236045, -0.52819037, -0.61819696, -0.38434362]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0448 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04801083,  -6.34156513, -11.41678429,  -9.62609482, -10.79650021,
         -10.91422462, -10.18493938,  -9.82091618,  -7.10640144,  -2.62643194]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [489]; unstable size 489; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 489] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 489] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 489] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 165] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36141157, 2.37881207, 7.25882244, 5.68141270, 6.92046452, 6.83364058,
         6.18870258, 5.80481195, 3.38991714]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0241 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 517] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 517] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 191] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71506000,  0.93899941,  2.11313176,  0.24073625,  1.31830454,
         -0.27658820,  1.65153718, -0.12758088,  2.09712458]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.30it/s]100%|██████████| 1/1 [00:00<00:00,  8.29it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.51523590,  -9.07377148, -10.23342419,  -8.17811871,  -9.40123940,
           -7.79556513,  -9.75415516,  -8.18024349,  -6.82714367, -10.12567520],
         [ -9.51523590,  -9.07377148, -10.23342419,  -8.17811871,  -9.40123940,
           -7.79556513,  -9.75415516,  -8.18024349,  -6.82714367, -10.12567520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96842146, 1.35309982]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1235 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.416449546813965
alpha/beta optimization time: 1.2631621360778809
initial alpha-crown bounds: tensor([[ 1.76490843,  1.00492322,  2.20698857,  0.32836914,  1.41238642,
         -0.17884588,  1.72935605, -0.01777864,  2.16614246]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17884588241577148
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.55939054489136
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5593502521515
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.55932307243347
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5593011379242
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5592827796936
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.55926322937012
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17884588]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17884588]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011181831359863281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17884302139282227
10 lb beta sum: 0.0, worst -0.17885589599609375
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0570    transfer 0.0001    finalize 0.0001    func 0.0575    
Accumulated time: func 0.0575    prepare 0.0002    bound 0.0570    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] 
split level 1: [/input-12, 25] 
split level 2: [/input-12, 26] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 24] 
split level 6: [/input-12, 45] 
split level 7: [/input-12, 51] 
split level 8: [/input-12, 74] 
split level 9: [/input-12, 60] 
split level 10: [/input, 1735] 
split level 11: [/input-8, 1452] 
split level 12: [/input-8, 1459] 
split level 13: [/input, 1720] 
split level 14: [/input, 1690] 
split level 15: [/input-8, 923] 
split level 16: [/input, 1734] 
split level 17: [/input, 1692] 
split level 18: [/input, 2248] 
split level 19: [/input, 1674] 
split level 20: [/input, 1706] 
split level 21: [/input, 1736] 
split level 22: [/input-8, 1460] 
split level 23: [/input-8, 845] 
split level 24: [/input, 1675] 
split level 25: [/input, 1691] 
split level 26: [/input, 1721] 
split level 27: [/input, 1723] 
split level 28: [/input, 1704] 
split level 29: [/input-8, 493] 
split level 30: [/input, 1705] 
split level 31: [/input-8, 1596] 
split level 32: [/input-8, 1451] 
split level 33: [/input-8, 1010] 
split level 34: [/input-8, 1293] 
split level 35: [/input-8, 921] 
split level 36: [/input-8, 1962] 
split level 37: [/input, 1739] 
split level 38: [/input, 2686] 
split level 39: [/input-8, 931] 
split level 40: [/input-8, 1588] 
split level 41: [/input-8, 1011] 
split level 42: [/input-8, 1965] 
split level 43: [/input, 2217] 
split level 44: [/input, 2743] 
split level 45: [/input-8, 1438] 
split level 46: [/input-8, 1353] 
split level 47: [/input-8, 1933] 
split level 48: [/input-8, 852] 
split level 49: [/input, 1689] 
split level 50: [/input, 1733] 
split level 51: [/input, 1686] 
split level 52: [/input, 2199] 
split level 53: [/input-8, 517] 
split level 54: [/input-8, 949] 
split level 55: [/input, 2702] 
split level 56: [/input, 2776] 
split level 57: [/input, 1658] 
split level 58: [/input, 2774] 
split level 59: [/input-8, 1309] 
split level 60: [/input-8, 1369] 
split level 61: [/input-8, 1592] 
split level 62: [/input-8, 1583] 
split level 63: [/input-8, 1644] 
split level 64: [/input-8, 483] 
split level 65: [/input-8, 494] 
split level 66: [/input, 1452] 
split level 67: [/input, 1636] 
split level 68: [/input, 2476] 
split level 69: [/input-8, 1453] 
split level 70: [/input, 1755] 
split level 71: [/input-8, 1925] 
split level 72: [/input, 2281] 
split level 73: [/input, 1747] 
split level 74: [/input, 2216] 
split level 75: [/input, 2250] 
split level 76: [/input, 1478] 
split level 77: [/input-8, 1445] 
split level 78: [/input, 2265] 
split level 79: [/input, 2157] 
split level 80: [/input, 1672] 
split level 81: [/input, 1347] 
split level 82: [/input-8, 301] 
split level 83: [/input-8, 862] 
split level 84: [/input, 1364] 
split level 85: [/input, 2486] 
split level 86: [/input, 2685] 
split level 87: [/input, 3527] 
split level 88: [/input, 2989] 
split level 89: [/input, 2200] 
split level 90: [/input, 1481] 
split level 91: [/input, 2501] 
split level 92: [/input-8, 522] 
split level 93: [/input-8, 799] 
split level 94: [/input, 2729] 
split level 95: [/input-8, 527] 
split level 96: [/input, 1731] 
split level 97: [/input, 2504] 
split level 98: [/input, 3544] 
split level 99: [/input, 3090] 
split level 100: [/input, 1647] 
split level 101: [/input, 3560] 
split level 102: [/input, 4043] 
split level 103: [/input-8, 1584] 
split level 104: [/input, 2213] 
split level 105: [/input, 3396] 
split level 106: [/input-8, 1444] 
split level 107: [/input, 2188] 
split level 108: [/input, 2472] 
split level 109: [/input, 2891] 
split level 110: [/input-8, 1656] 
split level 111: [/input, 2492] 
split level 112: [/input, 1607] 
split level 113: [/input, 2148] 
split level 114: [/input-8, 1585] 
split level 115: [/input, 3395] 
split level 116: [/input, 2473] 
split level 117: [/input, 2155] 
split level 118: [/input, 2535] 
split level 119: [/input, 2322] 
split level 120: [/input-8, 942] 
split level 121: [/input, 2493] 
split level 122: [/input-8, 1064] 
split level 123: [/input, 2164] 
split level 124: [/input, 2282] 
split level 125: [/input-8, 836] 
split level 126: [/input-8, 387] 
split level 127: [/input, 2197] 
split level 128: [/input, 2503] 
split level 129: [/input, 3749] 
split level 130: [/input, 1316] 
split level 131: [/input, 252] 
split level 132: [/input, 2521] 
split level 133: [/input-8, 149] 
split level 134: [/input, 2506] 
split level 135: [/input, 2337] 
split level 136: [/input, 2244] 
split level 137: [/input, 2458] 
split level 138: [/input, 2099] 
split level 139: [/input, 2154] 
split level 140: [/input, 3394] 
split level 141: [/input, 2324] 
split level 142: [/input, 3105] 
split level 143: [/input-8, 1285] 
split level 144: [/input, 3781] 
split level 145: [/input, 2132] 
split level 146: [/input, 3522] 
split level 147: [/input-8, 1973] 
split level 148: [/input-8, 963] 
split level 149: [/input, 2523] 
split level 150: [/input-8, 647] 
split level 151: [/input, 3490] 
split level 152: [/input, 3293] 
split level 153: [/input, 1363] 
split level 154: [/input, 4029] 
split level 155: [/input-8, 1449] 
split level 156: [/input, 3005] 
split level 157: [/input, 1498] 
split level 158: [/input, 2067] 
split level 159: [/input, 2356] 
split level 160: [/input, 2509] 
split level 161: [/input, 2171] 
split level 162: [/input, 3410] 
split level 163: [/input, 2499] 
split level 164: [/input, 3753] 
split level 165: [/input, 2494] 
split level 166: [/input, 2190] 
split level 167: [/input, 2508] 
split level 168: [/input, 2973] 
split level 169: [/input, 3783] 
split level 170: [/input, 2371] 
split level 171: [/input-8, 1397] 
split level 172: [/input-8, 1065] 
split level 173: [/input, 3770] 
split level 174: [/input, 1335] 
split level 175: [/input, 3153] 
split level 176: [/input, 3786] 
split level 177: [/input-8, 114] 
split level 178: [/input-8, 835] 
split level 179: [/input, 2369] 
split level 180: [/input, 2917] 
split level 181: [/input, 3539] 
split level 182: [/input, 2306] 
split level 183: [/input, 3091] 
split level 184: [/input-8, 516] 
split level 185: [/input, 2347] 
split level 186: [/input, 3529] 
split level 187: [/input, 2083] 
split level 188: [/input-8, 97] 
split level 189: [/input-8, 397] 
split level 190: [/input, 3246] 
split level 191: [/input, 2307] 
split level 192: [/input, 3411] 
split level 193: [/input, 2305] 
split level 194: [/input, 2942] 
split level 195: [/input-8, 1347] 
split level 196: [/input, 2206] 
split level 197: [/input-8, 2008] 
split level 198: [/input, 239] 
split level 199: [/input-8, 431] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17879533767700195
10 lb beta sum: 0.0, worst -0.17879199981689453
Time: prepare 0.0119    bound 0.1051    transfer 0.0023    finalize 0.0030    func 0.1249    
Accumulated time: func 0.1824    prepare 0.0222    bound 0.1621    transfer 0.0024    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.43607903) min lb tensor(-0.17878914)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.011200666427612305 
BICCOS Cumulative time: 0.011200666427612305
Preprocessing time: 0.010419845581054688 Inference time: 0.00034499168395996094 Add cuts time: 0.00011396408081054688 Cut analysis time: 0.0003218650817871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16462 (1), -0.16453 (1), -0.16450 (1), -0.16449 (1), -0.16446 (1), -0.16443 (1), -0.16429 (1), -0.16358 (1), -0.16302 (1), -0.16083 (1), -0.16055 (1), -0.16039 (1), -0.16034 (1), -0.16025 (1), -0.15999 (1), -0.15956 (1), -0.15856 (1), -0.15845 (1), -0.15833 (1), -0.15817 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5224    set_bounds 0.0098    solve 0.1250    add 0.0731    
Accumulated time: pickout 0.0003    decision 0.5224    set_bounds 0.0098    solve 0.1250    add 0.0731    
Current (lb-rhs): -0.16461753845214844
50 domains visited
Cumulative time: 0.8048570156097412

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] 
split level 2: [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 26] 
split level 3: [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09042072296142578

all verified at 1th iter
Time: prepare 0.0076    bound 0.0131    transfer 0.0008    finalize 0.0027    func 0.0268    
Accumulated time: func 0.2092    prepare 0.0301    bound 0.1752    transfer 0.0031    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.22435760) min lb tensor(0.00014544)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.035915374755859375 
BICCOS Cumulative time: 0.04711604118347168
Preprocessing time: 0.012264490127563477 Inference time: 0.014476537704467773 Add cuts time: 0.008925199508666992 Cut analysis time: 0.0002491474151611328
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0206    set_bounds 0.0126    solve 0.0269    add 0.0155    
Accumulated time: pickout 0.0015    decision 0.5430    set_bounds 0.0224    solve 0.1519    add 0.0886    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.50943664e-14, 2.44150922e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.50943664e-14, 1.25867411e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([ 1., -1.]), tensor([0, 0]), tensor([6.81656093e-06, 2.49523208e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([1., 1.]), tensor([0, 0]), tensor([6.81656093e-06, 1.24337718e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.014881610870361328

all verified at 0th iter
Time: prepare 0.0004    bound 0.0047    transfer 0.0001    finalize 0.0002    func 0.0053    
Accumulated time: func 0.2145    prepare 0.0305    bound 0.1798    transfer 0.0032    finalize 0.0060    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.43926095962524
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.43918538093567
Verifying property 7 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01777864]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01777864]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011444091796875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0177767276763916
10 lb beta sum: 0.0, worst -0.017783403396606445
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0001    func 0.0565    
Accumulated time: func 0.0565    prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 25] 
split level 6: [/input-12, 26] 
split level 7: [/input, 1735] 
split level 8: [/input-8, 1452] 
split level 9: [/input-12, 6] 
split level 10: [/input, 1720] 
split level 11: [/input-8, 1459] 
split level 12: [/input-8, 921] 
split level 13: [/input, 1690] 
split level 14: [/input, 1706] 
split level 15: [/input, 1692] 
split level 16: [/input-8, 1011] 
split level 17: [/input, 1734] 
split level 18: [/input-12, 1] 
split level 19: [/input, 2248] 
split level 20: [/input-8, 1460] 
split level 21: [/input-8, 870] 
split level 22: [/input, 1736] 
split level 23: [/input-8, 1010] 
split level 24: [/input, 1674] 
split level 25: [/input, 1704] 
split level 26: [/input, 1721] 
split level 27: [/input, 1705] 
split level 28: [/input, 1723] 
split level 29: [/input, 1675] 
split level 30: [/input-8, 1451] 
split level 31: [/input, 1739] 
split level 32: [/input, 2686] 
split level 33: [/input-8, 1438] 
split level 34: [/input, 2217] 
split level 35: [/input-8, 493] 
split level 36: [/input, 1691] 
split level 37: [/input-8, 923] 
split level 38: [/input, 2743] 
split level 39: [/input-8, 1596] 
split level 40: [/input, 2702] 
split level 41: [/input, 2219] 
split level 42: [/input-8, 1445] 
split level 43: [/input, 1755] 
split level 44: [/input, 2199] 
split level 45: [/input-8, 1962] 
split level 46: [/input-8, 949] 
split level 47: [/input, 2774] 
split level 48: [/input, 2776] 
split level 49: [/input-8, 1444] 
split level 50: [/input, 1733] 
split level 51: [/input-8, 1293] 
split level 52: [/input-8, 494] 
split level 53: [/input-8, 931] 
split level 54: [/input, 2216] 
split level 55: [/input, 2250] 
split level 56: [/input, 1689] 
split level 57: [/input, 2265] 
split level 58: [/input, 2684] 
split level 59: [/input, 2729] 
split level 60: [/input-8, 1453] 
split level 61: [/input-8, 862] 
split level 62: [/input-8, 517] 
split level 63: [/input, 2485] 
split level 64: [/input-8, 942] 
split level 65: [/input, 2685] 
split level 66: [/input, 2476] 
split level 67: [/input-8, 301] 
split level 68: [/input, 2213] 
split level 69: [/input-8, 1050] 
split level 70: [/input, 1672] 
split level 71: [/input, 2200] 
split level 72: [/input-8, 1868] 
split level 73: [/input-8, 1644] 
split level 74: [/input-8, 1937] 
split level 75: [/input, 1747] 
split level 76: [/input, 1658] 
split level 77: [/input, 2188] 
split level 78: [/input-8, 852] 
split level 79: [/input, 2157] 
split level 80: [/input, 1452] 
split level 81: [/input-8, 527] 
split level 82: [/input-8, 1965] 
split level 83: [/input, 2703] 
split level 84: [/input, 1647] 
split level 85: [/input-8, 522] 
split level 86: [/input, 2197] 
split level 87: [/input-8, 1064] 
split level 88: [/input, 1686] 
split level 89: [/input, 1636] 
split level 90: [/input, 2773] 
split level 91: [/input, 1478] 
split level 92: [/input, 1607] 
split level 93: [/input, 2486] 
split level 94: [/input-8, 488] 
split level 95: [/input, 2492] 
split level 96: [/input, 2282] 
split level 97: [/input-8, 1588] 
split level 98: [/input, 2989] 
split level 99: [/input, 2190] 
split level 100: [/input-8, 1369] 
split level 101: [/input-8, 1592] 
split level 102: [/input, 2493] 
split level 103: [/input-8, 1925] 
split level 104: [/input-8, 1583] 
split level 105: [/input, 2501] 
split level 106: [/input, 2281] 
split level 107: [/input, 3544] 
split level 108: [/input, 1481] 
split level 109: [/input-8, 1309] 
split level 110: [/input, 4043] 
split level 111: [/input, 1710] 
split level 112: [/input, 1731] 
split level 113: [/input-8, 387] 
split level 114: [/input-8, 835] 
split level 115: [/input-8, 1485] 
split level 116: [/input-8, 836] 
split level 117: [/input, 2164] 
split level 118: [/input, 3781] 
split level 119: [/input, 3560] 
split level 120: [/input, 2503] 
split level 121: [/input-8, 474] 
split level 122: [/input, 1742] 
split level 123: [/input-8, 114] 
split level 124: [/input-8, 963] 
split level 125: [/input, 2509] 
split level 126: [/input, 3527] 
split level 127: [/input, 2504] 
split level 128: [/input-8, 1449] 
split level 129: [/input, 2535] 
split level 130: [/input-8, 1739] 
split level 131: [/input-8, 647] 
split level 132: [/input, 3246] 
split level 133: [/input, 2462] 
split level 134: [/input-8, 982] 
split level 135: [/input-8, 1656] 
split level 136: [/input, 2155] 
split level 137: [/input, 2206] 
split level 138: [/input, 2521] 
split level 139: [/input, 2067] 
split level 140: [/input, 3396] 
split level 141: [/input, 2244] 
split level 142: [/input, 2324] 
split level 143: [/input, 2148] 
split level 144: [/input, 2171] 
split level 145: [/input, 2472] 
split level 146: [/input, 3090] 
split level 147: [/input-8, 1457] 
split level 148: [/input-8, 516] 
split level 149: [/input-8, 1013] 
split level 150: [/input, 113] 
split level 151: [/input, 2473] 
split level 152: [/input, 2494] 
split level 153: [/input, 2322] 
split level 154: [/input, 4029] 
split level 155: [/input, 3005] 
split level 156: [/input, 3786] 
split level 157: [/input, 3395] 
split level 158: [/input, 3749] 
split level 159: [/input, 3783] 
split level 160: [/input, 2973] 
split level 161: [/input, 2508] 
split level 162: [/input, 2523] 
split level 163: [/input, 2222] 
split level 164: [/input-8, 1933] 
split level 165: [/input, 3753] 
split level 166: [/input, 2083] 
split level 167: [/input, 3105] 
split level 168: [/input, 2506] 
split level 169: [/input, 2384] 
split level 170: [/input-8, 1945] 
split level 171: [/input, 3529] 
split level 172: [/input, 2337] 
split level 173: [/input, 2416] 
split level 174: [/input-8, 1024] 
split level 175: [/input, 3770] 
split level 176: [/input, 98] 
split level 177: [/input-8, 1959] 
split level 178: [/input, 2942] 
split level 179: [/input, 3767] 
split level 180: [/input-8, 962] 
split level 181: [/input, 2132] 
split level 182: [/input, 3153] 
split level 183: [/input-8, 661] 
split level 184: [/input, 2306] 
split level 185: [/input-8, 471] 
split level 186: [/input, 252] 
split level 187: [/input, 2285] 
split level 188: [/input, 3091] 
split level 189: [/input, 2369] 
split level 190: [/input, 2558] 
split level 191: [/input, 2499] 
split level 192: [/input, 2458] 
split level 193: [/input, 3522] 
split level 194: [/input, 2293] 
split level 195: [/input, 2479] 
split level 196: [/input, 239] 
split level 197: [/input, 1498] 
split level 198: [/input, 3490] 
split level 199: [/input, 3295] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017552852630615234
10 lb beta sum: 0.0, worst -0.01755976676940918
Time: prepare 0.0119    bound 0.1069    transfer 0.0008    finalize 0.0030    func 0.1255    
Accumulated time: func 0.1820    prepare 0.0224    bound 0.1629    transfer 0.0009    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.40603209) min lb tensor(-0.01755238)
Number of Verified Splits: 53 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013905763626098633 
BICCOS Cumulative time: 0.013905763626098633
Preprocessing time: 0.010589122772216797 Inference time: 0.0020961761474609375 Add cuts time: 0.0009732246398925781 Cut analysis time: 0.0002472400665283203
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5183    set_bounds 0.0101    solve 0.1256    add 0.0104    
Accumulated time: pickout 0.0004    decision 0.5183    set_bounds 0.0101    solve 0.1256    add 0.0104    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([-1.]), tensor([0]), tensor([2.98154646e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([1.]), tensor([0]), tensor([4.41592873e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.11853182315826416

all verified at 0th iter
Time: prepare 0.0004    bound 0.0044    transfer 0.0001    finalize 0.0001    func 0.0050    
Accumulated time: func 0.1870    prepare 0.0227    bound 0.1672    transfer 0.0010    finalize 0.0033    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.4598376750946
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.5403 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.94552898, -11.88663006, -11.47941303,  -9.72749805, -12.11168003,
         -10.94520473,  -8.55705357, -13.68229103, -10.67903423, -11.17602921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [836]; unstable size 836; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 836] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 836] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 836] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 188] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.05637693, 1.39599681, 1.75964928, 0.17517835, 2.39905357, 1.14613748,
         3.57038617, 0.74127942, 1.09699941]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [647]; unstable size 647; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 647] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 647] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 647] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 241] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95681775,  5.94022369, -0.25544402,  2.46004200,  2.96836090,
          1.44257140,  2.64147210,  3.15622759,  5.52299929]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.54it/s]100%|██████████| 1/1 [00:00<00:00,  8.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.53756809, -9.76719856, -2.86113811, -5.85877895, -2.57433796,
          -6.37398863, -5.08237123, -6.03231287, -7.07665539, -9.52616215]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.28680015]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1202 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.49099349975586
alpha/beta optimization time: 1.2578959465026855
initial alpha-crown bounds: tensor([[ 2.05517411,  6.03731346, -0.21251775,  2.50705290,  3.02221179,
          1.49958730,  2.69033241,  3.27446437,  5.61737490]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.21251775324344635
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56077814102173
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56073904037476
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5607135295868
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21251775]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
        -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21251775]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 647
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 238
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 906
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011658668518066406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2125169336795807
10 lb beta sum: 0.0, worst -0.212521031498909
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    func 0.0568    
Accumulated time: func 0.0568    prepare 0.0002    bound 0.0563    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 93] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 51] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 42] 
split level 9: [/input-12, 44] 
split level 10: [/input-12, 82] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1300] 
split level 13: [/input-8, 1066] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1291] 
split level 16: [/input-8, 666] 
split level 17: [/input-8, 532] 
split level 18: [/input-8, 682] 
split level 19: [/input-8, 1290] 
split level 20: [/input-8, 1292] 
split level 21: [/input-8, 658] 
split level 22: [/input-8, 1373] 
split level 23: [/input-8, 1020] 
split level 24: [/input-8, 1043] 
split level 25: [/input-8, 1365] 
split level 26: [/input-8, 1357] 
split level 27: [/input-8, 542] 
split level 28: [/input-8, 673] 
split level 29: [/input-8, 1819] 
split level 30: [/input-8, 524] 
split level 31: [/input-8, 468] 
split level 32: [/input-8, 1374] 
split level 33: [/input-8, 1309] 
split level 34: [/input-8, 1297] 
split level 35: [/input-8, 1347] 
split level 36: [/input-8, 517] 
split level 37: [/input-8, 538] 
split level 38: [/input-8, 541] 
split level 39: [/input-8, 698] 
split level 40: [/input, 1142] 
split level 41: [/input-8, 1021] 
split level 42: [/input-8, 484] 
split level 43: [/input-8, 1354] 
split level 44: [/input, 3221] 
split level 45: [/input-8, 79] 
split level 46: [/input, 3219] 
split level 47: [/input, 3220] 
split level 48: [/input-8, 1477] 
split level 49: [/input-8, 476] 
split level 50: [/input-12, 78] 
split level 51: [/input-8, 526] 
split level 52: [/input-8, 1072] 
split level 53: [/input-8, 1778] 
split level 54: [/input-8, 1382] 
split level 55: [/input-8, 1289] 
split level 56: [/input-8, 1349] 
split level 57: [/input-8, 1326] 
split level 58: [/input-8, 979] 
split level 59: [/input, 2452] 
split level 60: [/input-8, 516] 
split level 61: [/input-8, 572] 
split level 62: [/input-8, 87] 
split level 63: [/input-8, 1281] 
split level 64: [/input-8, 1396] 
split level 65: [/input-8, 530] 
split level 66: [/input-8, 1342] 
split level 67: [/input-8, 1388] 
split level 68: [/input-8, 1137] 
split level 69: [/input-8, 670] 
split level 70: [/input-8, 1476] 
split level 71: [/input-8, 1389] 
split level 72: [/input-8, 107] 
split level 73: [/input-8, 1053] 
split level 74: [/input-8, 562] 
split level 75: [/input-8, 1093] 
split level 76: [/input-8, 1478] 
split level 77: [/input-8, 1018] 
split level 78: [/input-8, 1779] 
split level 79: [/input-8, 1764] 
split level 80: [/input-8, 515] 
split level 81: [/input, 4036] 
split level 82: [/input-8, 1130] 
split level 83: [/input, 2453] 
split level 84: [/input-8, 1036] 
split level 85: [/input, 3204] 
split level 86: [/input-8, 860] 
split level 87: [/input-8, 990] 
split level 88: [/input-8, 1780] 
split level 89: [/input, 3430] 
split level 90: [/input-8, 987] 
split level 91: [/input-8, 535] 
split level 92: [/input-8, 895] 
split level 93: [/input-8, 1473] 
split level 94: [/input, 2906] 
split level 95: [/input, 3429] 
split level 96: [/input-12, 53] 
split level 97: [/input-12, 28] 
split level 98: [/input-8, 1438] 
split level 99: [/input, 1624] 
split level 100: [/input-8, 977] 
split level 101: [/input, 4046] 
split level 102: [/input-8, 564] 
split level 103: [/input-8, 565] 
split level 104: [/input-8, 1475] 
split level 105: [/input-8, 1777] 
split level 106: [/input, 450] 
split level 107: [/input, 459] 
split level 108: [/input, 4039] 
split level 109: [/input-8, 1738] 
split level 110: [/input-8, 1765] 
split level 111: [/input-8, 91] 
split level 112: [/input-8, 1457] 
split level 113: [/input, 4006] 
split level 114: [/input, 2149] 
split level 115: [/input-8, 552] 
split level 116: [/input, 453] 
split level 117: [/input, 4005] 
split level 118: [/input, 4020] 
split level 119: [/input, 1444] 
split level 120: [/input, 2922] 
split level 121: [/input-8, 1474] 
split level 122: [/input, 3445] 
split level 123: [/input-8, 1284] 
split level 124: [/input, 3452] 
split level 125: [/input, 2551] 
split level 126: [/input-8, 559] 
split level 127: [/input-8, 543] 
split level 128: [/input, 2235] 
split level 129: [/input, 460] 
split level 130: [/input-8, 982] 
split level 131: [/input, 2251] 
split level 132: [/input, 2535] 
split level 133: [/input, 2909] 
split level 134: [/input-8, 112] 
split level 135: [/input-8, 1294] 
split level 136: [/input, 410] 
split level 137: [/input, 2910] 
split level 138: [/input, 438] 
split level 139: [/input, 2507] 
split level 140: [/input-8, 569] 
split level 141: [/input-8, 1439] 
split level 142: [/input, 2553] 
split level 143: [/input, 2469] 
split level 144: [/input, 1993] 
split level 145: [/input, 3991] 
split level 146: [/input, 1782] 
split level 147: [/input, 2926] 
split level 148: [/input, 2492] 
split level 149: [/input, 2556] 
split level 150: [/input-8, 521] 
split level 151: [/input, 2547] 
split level 152: [/input, 2548] 
split level 153: [/input, 2526] 
split level 154: [/input, 3303] 
split level 155: [/input, 3268] 
split level 156: [/input, 2893] 
split level 157: [/input, 2203] 
split level 158: [/input, 445] 
split level 159: [/input, 2519] 
split level 160: [/input, 2924] 
split level 161: [/input, 2525] 
split level 162: [/input, 2749] 
split level 163: [/input-8, 71] 
split level 164: [/input, 2887] 
split level 165: [/input, 239] 
split level 166: [/input, 3317] 
split level 167: [/input-8, 974] 
split level 168: [/input, 3300] 
split level 169: [/input, 3469] 
split level 170: [/input, 4058] 
split level 171: [/input, 3254] 
split level 172: [/input, 2541] 
split level 173: [/input-8, 594] 
split level 174: [/input, 2491] 
split level 175: [/input, 1783] 
split level 176: [/input, 3318] 
split level 177: [/input, 250] 
split level 178: [/input, 1947] 
split level 179: [/input-8, 1766] 
split level 180: [/input, 1784] 
split level 181: [/input, 3188] 
split level 182: [/input, 4061] 
split level 183: [/input, 446] 
split level 184: [/input, 4018] 
split level 185: [/input, 3284] 
split level 186: [/input, 2538] 
split level 187: [/input, 2921] 
split level 188: [/input-8, 931] 
split level 189: [/input, 2783] 
split level 190: [/input, 2508] 
split level 191: [/input, 1691] 
split level 192: [/input, 3262] 
split level 193: [/input, 3304] 
split level 194: [/input, 2929] 
split level 195: [/input, 3428] 
split level 196: [/input, 1526] 
split level 197: [/input, 1962] 
split level 198: [/input, 3575] 
split level 199: [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2125198394060135
10 lb beta sum: 0.0, worst -0.2125183641910553
Time: prepare 0.0118    bound 0.1039    transfer 0.0022    finalize 0.0031    func 0.1237    
Accumulated time: func 0.1805    prepare 0.0221    bound 0.1602    transfer 0.0023    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.01664460) min lb tensor(-0.21251673)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011003255844116211 
BICCOS Cumulative time: 0.011003255844116211
Preprocessing time: 0.010230541229248047 Inference time: 8.96453857421875e-05 Add cuts time: 4.863739013671875e-05 Cut analysis time: 0.0006344318389892578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20007 (1), -0.19931 (1), -0.19922 (1), -0.19884 (1), -0.19873 (1), -0.19870 (1), -0.19839 (1), -0.19818 (1), -0.19745 (1), -0.19722 (1), -0.19709 (1), -0.19693 (1), -0.19679 (1), -0.19658 (1), -0.19653 (1), -0.19645 (1), -0.19573 (1), -0.19547 (1), -0.19451 (1), -0.19368 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5159    set_bounds 0.0096    solve 0.1238    add 0.0716    
Accumulated time: pickout 0.0004    decision 0.5159    set_bounds 0.0096    solve 0.1238    add 0.0716    
Current (lb-rhs): -0.2000732123851776
50 domains visited
Cumulative time: 0.7940657138824463

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17806105315685272
10 lb beta sum: 0.18744227290153503, worst -0.17715051770210266
Time: prepare 0.0074    bound 0.1257    transfer 0.0008    finalize 0.0030    func 0.1398    
Accumulated time: func 0.3203    prepare 0.0297    bound 0.2859    transfer 0.0031    finalize 0.0063    
all_split False
======================Cut inference begins======================
max lb tensor(0.08656800) min lb tensor(-0.17697021)
Number of Verified Splits: 29 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.014719724655151367 
BICCOS Cumulative time: 0.025722980499267578
Preprocessing time: 0.012617349624633789 Inference time: 0.001333475112915039 Add cuts time: 0.0004162788391113281 Cut analysis time: 0.00035262107849121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06183 (2), -0.06108 (2), -0.06098 (2), -0.06010 (2), -0.06008 (2), -0.05841 (2), -0.05738 (2), -0.05617 (2), -0.05609 (2), -0.05608 (2), -0.05552 (2), -0.05478 (2), -0.05453 (2), -0.05430 (2), -0.05320 (2), -0.05159 (2), -0.05085 (2), -0.05064 (2), -0.05053 (2), -0.04944 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0200    set_bounds 0.0134    solve 0.1399    add 0.0850    
Accumulated time: pickout 0.0015    decision 0.5360    set_bounds 0.0229    solve 0.2637    add 0.1567    
Current (lb-rhs): -0.06182779371738434
100 domains visited
Cumulative time: 1.0686640739440918

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] 
split level 2: [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] 
split level 3: [/input-12, 26] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04114997386932373
10 lb beta sum: 0.3064647912979126, worst -0.02137133479118347
Time: prepare 0.0065    bound 0.1254    transfer 0.0008    finalize 0.0029    func 0.1383    
Accumulated time: func 0.4586    prepare 0.0365    bound 0.4113    transfer 0.0039    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.15123570) min lb tensor(-0.02105322)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.038123369216918945 
BICCOS Cumulative time: 0.06384634971618652
Preprocessing time: 0.012310266494750977 Inference time: 0.018544912338256836 Add cuts time: 0.007010936737060547 Cut analysis time: 0.00025725364685058594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0204    set_bounds 0.0159    solve 0.1384    add 0.0204    
Accumulated time: pickout 0.0027    decision 0.5563    set_bounds 0.0389    solve 0.4022    add 0.1771    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 9.12893713e-02, 5.40402085e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 9.12893713e-02, 9.99766886e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 6.22049272e-02, 9.87888277e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 6.22049272e-02, 9.27544534e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 5.57918251e-02, 5.57575971e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 5.57918251e-02, 9.92324501e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 3.08174361e-02, 1.58616126e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.65469839e-07, 3.08174361e-02, 9.88000035e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005913630127906799

all verified at 1th iter
Time: prepare 0.0005    bound 0.0114    transfer 0.0001    finalize 0.0002    func 0.0123    
Accumulated time: func 0.4709    prepare 0.0370    bound 0.4227    transfer 0.0040    finalize 0.0093    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.03937315940857
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.03927636146545
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.03875923156738
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.0387258529663
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.0387020111084
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.0386826992035
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.9614 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37989235, -12.20897579,  -6.17734432,  -5.76625729,  -6.93807411,
          -3.77729273,  -8.37195778,  -7.49653196, -10.76665974, -11.58906174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [456]; unstable size 456; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 456] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 456] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 456] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.38867807, 6.47063160, 1.48629034, 1.57262683, 2.21376395, 3.23497486,
         2.94880295, 5.30806875, 6.18771648]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0578 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.11128426, -16.94595146,  -9.70340824, -12.93247986, -10.71098232,
         -13.59650612, -11.43742085, -14.93857956, -14.94828510, -17.84584045]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 429] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 429] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 210] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12003708, 5.67749071, 2.36852121, 0.16531789, 2.94698119, 0.60729098,
         3.85684562, 3.46587420, 6.63982296]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0399 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 638] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 638] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 259] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64108008, -0.23480177, -1.33058929, -0.47275209, -0.46761465,
         -0.91006291,  0.31482816,  1.61070669,  0.12702441]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.50275230,  -9.31137848,  -7.50799370,  -8.29128933,  -8.19631863,
           -7.91926050,  -9.32222462,  -7.97495413, -10.89629650,  -9.75931168],
         [ -8.50275230,  -9.31137848,  -7.50799370,  -8.29128933,  -8.19631863,
           -7.91926050,  -9.32222462,  -7.97495413, -10.89629650,  -9.75931168]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52779818,  1.33642435, -0.46696043,  0.31633520,  0.22136450,
          -0.05569363]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0070 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0397 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41563416, -7.71300030, -2.86234260, -2.13727427, -3.26359797,
         -1.15524995, -3.90352178, -2.95602751, -6.72349644, -6.40303564]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 677] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 677] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 254] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.88557839, 4.58735847, 0.73231387, 0.69587111, 1.00518155, 1.60793090,
         0.80470544, 3.98152113, 3.66006470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 678] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 678] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 228] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97155643, -0.03237677, -1.84702134, -0.69079268, -0.48902345,
          0.04457045,  0.97582543, -2.07122755, -0.15928924]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605],
         [-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.55486012,  1.62388039, -0.86219788, -0.03406239,  0.22356415,
          -0.59922028,  1.35349846]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [551]; unstable size 551; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 328, 1, 551] with unstable size 327 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 551] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 551] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [327]; unstable size 327; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 327] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 327] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57805014e+00,  3.19466400e+00,  7.62258053e-01,  2.92239189e-01,
         -4.12940979e-04,  8.40279341e-01,  1.08616257e+00,  3.18620467e+00,
          2.37681532e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.65it/s]100%|██████████| 1/1 [00:00<00:00,  8.64it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.55580521, -8.57808781, -5.04000854, -4.20195580, -4.09700203,
          -5.05925369, -2.93464255, -5.77540493, -8.65878296, -7.32569599]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.16235948]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1185 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 1th iter
best_l after optimization: 14.467981338500977
alpha/beta optimization time: 0.025365829467773438
initial alpha-crown bounds: tensor([[2.59561110, 3.21909380, 0.77398062, 0.30205655, 0.01444960, 0.85292077,
         1.10492146, 3.20971060, 2.39523673]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.014449596405029297
verified with init bound!
Result: safe-incomplete in 0.1935 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [625]; unstable size 625; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 625] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 625] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 625] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.12974119, -0.58860946,  0.22682774,  0.44695139,  0.33009386,
          0.98268557,  1.32415700, -0.52337855,  2.49502373]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.26it/s]100%|██████████| 1/1 [00:00<00:00,  8.25it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.69770527, -9.33743763, -5.35973167, -6.24397135, -6.46449852,
          -6.50081301, -7.10666513, -7.71766424, -4.85390425, -8.43731594],
         [-4.69770527, -9.33743763, -5.35973167, -6.24397135, -6.46449852,
          -6.50081301, -7.10666513, -7.71766424, -4.85390425, -8.43731594]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.66202641, 0.15619898]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1241 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.481103897094727
alpha/beta optimization time: 1.2534079551696777
initial alpha-crown bounds: tensor([[ 3.24760365, -0.53066254,  0.27715725,  0.50497174,  0.39338452,
          1.04264998,  1.40458202, -0.43028879,  2.57170677]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5306625366210938
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5611333847046
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.56109428405762
Verifying property 1 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.53066254]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.53066254]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011801719665527344
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5306605696678162
10 lb beta sum: 0.0, worst -0.5306681394577026
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    func 0.0564    
Accumulated time: func 0.0564    prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 41] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 10] 
split level 8: [/input-8, 1637] 
split level 9: [/input-8, 1628] 
split level 10: [/input-12, 45] 
split level 11: [/input-8, 1438] 
split level 12: [/input-8, 542] 
split level 13: [/input-8, 1620] 
split level 14: [/input-8, 1309] 
split level 15: [/input-8, 845] 
split level 16: [/input-8, 1889] 
split level 17: [/input-8, 659] 
split level 18: [/input-8, 1890] 
split level 19: [/input-8, 1052] 
split level 20: [/input-8, 996] 
split level 21: [/input-8, 413] 
split level 22: [/input-8, 1885] 
split level 23: [/input-8, 1446] 
split level 24: [/input-8, 1003] 
split level 25: [/input-8, 1069] 
split level 26: [/input-8, 1011] 
split level 27: [/input-8, 284] 
split level 28: [/input-8, 1289] 
split level 29: [/input-8, 1437] 
split level 30: [/input-8, 549] 
split level 31: [/input-8, 854] 
split level 32: [/input-8, 1453] 
split level 33: [/input-8, 1461] 
split level 34: [/input-8, 1071] 
split level 35: [/input-8, 1013] 
split level 36: [/input-8, 1651] 
split level 37: [/input, 2268] 
split level 38: [/input-8, 1054] 
split level 39: [/input-8, 1044] 
split level 40: [/input-8, 422] 
split level 41: [/input-8, 1648] 
split level 42: [/input-8, 1891] 
split level 43: [/input-8, 1460] 
split level 44: [/input, 3273] 
split level 45: [/input-8, 1010] 
split level 46: [/input-8, 412] 
split level 47: [/input-8, 550] 
split level 48: [/input-8, 1656] 
split level 49: [/input-8, 1253] 
split level 50: [/input-8, 1017] 
split level 51: [/input-8, 1063] 
split level 52: [/input, 2188] 
split level 53: [/input, 3479] 
split level 54: [/input-8, 614] 
split level 55: [/input-8, 698] 
split level 56: [/input, 3224] 
split level 57: [/input, 2172] 
split level 58: [/input, 2177] 
split level 59: [/input, 2235] 
split level 60: [/input-8, 1027] 
split level 61: [/input-8, 1470] 
split level 62: [/input-8, 276] 
split level 63: [/input-8, 1021] 
split level 64: [/input-8, 924] 
split level 65: [/input-8, 410] 
split level 66: [/input-8, 859] 
split level 67: [/input-8, 1001] 
split level 68: [/input-8, 678] 
split level 69: [/input, 442] 
split level 70: [/input, 2230] 
split level 71: [/input, 3438] 
split level 72: [/input, 937] 
split level 73: [/input, 3495] 
split level 74: [/input-8, 1640] 
split level 75: [/input-8, 867] 
split level 76: [/input-8, 1870] 
split level 77: [/input, 3208] 
split level 78: [/input, 2709] 
split level 79: [/input, 1585] 
split level 80: [/input-8, 1893] 
split level 81: [/input-8, 1608] 
split level 82: [/input-8, 690] 
split level 83: [/input-8, 1436] 
split level 84: [/input, 457] 
split level 85: [/input-8, 792] 
split level 86: [/input, 1769] 
split level 87: [/input, 2473] 
split level 88: [/input, 3242] 
split level 89: [/input, 2754] 
split level 90: [/input, 2913] 
split level 91: [/input, 3468] 
split level 92: [/input-8, 563] 
split level 93: [/input, 1626] 
split level 94: [/input, 324] 
split level 95: [/input, 2251] 
split level 96: [/input, 3240] 
split level 97: [/input, 3564] 
split level 98: [/input, 1675] 
split level 99: [/input-8, 630] 
split level 100: [/input, 3226] 
split level 101: [/input, 3449] 
split level 102: [/input, 198] 
split level 103: [/input, 1449] 
split level 104: [/input, 2519] 
split level 105: [/input, 2537] 
split level 106: [/input, 2293] 
split level 107: [/input-8, 1625] 
split level 108: [/input, 294] 
split level 109: [/input-8, 421] 
split level 110: [/input, 3320] 
split level 111: [/input-8, 1059] 
split level 112: [/input, 1627] 
split level 113: [/input, 3496] 
split level 114: [/input, 3454] 
split level 115: [/input, 1768] 
split level 116: [/input, 1411] 
split level 117: [/input, 4038] 
split level 118: [/input-8, 1641] 
split level 119: [/input, 490] 
split level 120: [/input-8, 406] 
split level 121: [/input, 4017] 
split level 122: [/input, 3239] 
split level 123: [/input, 2601] 
split level 124: [/input-8, 1347] 
split level 125: [/input-8, 1340] 
split level 126: [/input-8, 1614] 
split level 127: [/input, 3257] 
split level 128: [/input-8, 1447] 
split level 129: [/input, 489] 
split level 130: [/input, 2245] 
split level 131: [/input, 1434] 
split level 132: [/input, 2229] 
split level 133: [/input, 1577] 
split level 134: [/input, 4018] 
split level 135: [/input, 2489] 
split level 136: [/input, 2246] 
split level 137: [/input, 2073] 
split level 138: [/input, 4055] 
split level 139: [/input-8, 2044] 
split level 140: [/input, 441] 
split level 141: [/input, 2265] 
split level 142: [/input, 1672] 
split level 143: [/input, 3274] 
split level 144: [/input, 2439] 
split level 145: [/input-8, 1055] 
split level 146: [/input, 2504] 
split level 147: [/input, 2074] 
split level 148: [/input, 970] 
split level 149: [/input-8, 606] 
split level 150: [/input-8, 648] 
split level 151: [/input, 1602] 
split level 152: [/input, 2585] 
split level 153: [/input, 2089] 
split level 154: [/input, 3127] 
split level 155: [/input, 426] 
split level 156: [/input, 901] 
split level 157: [/input, 2513] 
split level 158: [/input, 2600] 
split level 159: [/input, 2554] 
split level 160: [/input, 343] 
split level 161: [/input, 3142] 
split level 162: [/input-8, 1880] 
split level 163: [/input-8, 952] 
split level 164: [/input, 3442] 
split level 165: [/input, 1415] 
split level 166: [/input, 2252] 
split level 167: [/input, 4049] 
split level 168: [/input, 291] 
split level 169: [/input-8, 393] 
split level 170: [/input, 3669] 
split level 171: [/input, 3193] 
split level 172: [/input, 2475] 
split level 173: [/input, 3681] 
split level 174: [/input, 1416] 
split level 175: [/input, 3262] 
split level 176: [/input, 2257] 
split level 177: [/input-8, 1236] 
split level 178: [/input, 485] 
split level 179: [/input, 3532] 
split level 180: [/input, 3110] 
split level 181: [/input, 3288] 
split level 182: [/input, 3259] 
split level 183: [/input, 825] 
split level 184: [/input-8, 1455] 
split level 185: [/input, 2603] 
split level 186: [/input, 2584] 
split level 187: [/input, 2428] 
split level 188: [/input, 972] 
split level 189: [/input, 2470] 
split level 190: [/input, 3665] 
split level 191: [/input, 4043] 
split level 192: [/input, 2203] 
split level 193: [/input, 2301] 
split level 194: [/input, 2213] 
split level 195: [/input, 3309] 
split level 196: [/input, 4056] 
split level 197: [/input, 1464] 
split level 198: [/input, 3715] 
split level 199: [/input, 3580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.530579686164856
10 lb beta sum: 0.0, worst -0.5305605530738831
Time: prepare 0.0120    bound 0.1059    transfer 0.0022    finalize 0.0032    func 0.1260    
Accumulated time: func 0.1824    prepare 0.0224    bound 0.1618    transfer 0.0023    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11686039) min lb tensor(-0.53055614)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010261774063110352 
BICCOS Cumulative time: 0.010261774063110352
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.52136 (1), -0.52083 (1), -0.52066 (1), -0.52060 (1), -0.52059 (1), -0.52049 (1), -0.52012 (1), -0.51991 (1), -0.51951 (1), -0.51931 (1), -0.51827 (1), -0.51807 (1), -0.51798 (1), -0.51768 (1), -0.51642 (1), -0.51638 (1), -0.51618 (1), -0.51527 (1), -0.51500 (1), -0.51495 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5223    set_bounds 0.0099    solve 0.1261    add 0.0695    
Accumulated time: pickout 0.0004    decision 0.5223    set_bounds 0.0099    solve 0.1261    add 0.0695    
Current (lb-rhs): -0.5213557481765747
50 domains visited
Cumulative time: 0.7999179363250732

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 31] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 1] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 26] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4770687222480774
10 lb beta sum: 0.0, worst -0.47671496868133545
Time: prepare 0.0128    bound 0.1038    transfer 0.0007    finalize 0.0025    func 0.1227    
Accumulated time: func 0.3051    prepare 0.0355    bound 0.2656    transfer 0.0031    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.18310130) min lb tensor(-0.47664076)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.013216257095336914 
BICCOS Cumulative time: 0.023478031158447266
Preprocessing time: 0.012218475341796875 Inference time: 0.0004858970642089844 Add cuts time: 0.00017213821411132812 Cut analysis time: 0.00033974647521972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18464 (2), -0.18406 (2), -0.18320 (2), -0.18254 (2), -0.18248 (2), -0.17996 (2), -0.17808 (2), -0.17793 (2), -0.17778 (2), -0.17772 (2), -0.17758 (2), -0.17571 (2), -0.17558 (2), -0.17549 (2), -0.17437 (2), -0.17410 (2), -0.17368 (2), -0.17343 (2), -0.17274 (2), -0.17022 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0207    set_bounds 0.0128    solve 0.1228    add 0.0836    
Accumulated time: pickout 0.0015    decision 0.5430    set_bounds 0.0227    solve 0.2489    add 0.1531    
Current (lb-rhs): -0.1846356987953186
100 domains visited
Cumulative time: 1.0544734001159668

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 54] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 26] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 4] [/input-12, 1] [/input-12, 4] [/input-12, 1] 
split level 3: [/input-12, 41] [/input-12, 41] [/input-12, 4] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1469431221485138
10 lb beta sum: 0.28084251284599304, worst -0.2666301131248474
Time: prepare 0.0069    bound 0.1251    transfer 0.0008    finalize 0.0022    func 0.1382    
Accumulated time: func 0.4433    prepare 0.0426    bound 0.3907    transfer 0.0038    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.25962412) min lb tensor(-0.12940475)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 7
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.024171829223632812 
BICCOS Cumulative time: 0.04764986038208008
Preprocessing time: 0.011865615844726562 Inference time: 0.00916743278503418 Add cuts time: 0.002670764923095703 Cut analysis time: 0.0004680156707763672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04495 (3), -0.04454 (3), -0.04374 (3), -0.04332 (3), -0.04310 (3), -0.04215 (3), -0.04170 (3), -0.04164 (3), -0.04091 (3), -0.04013 (3), -0.04000 (3), -0.03989 (3), -0.03973 (3), -0.03904 (3), -0.03824 (3), -0.03749 (3), -0.03708 (3), -0.03700 (3), -0.03668 (3), -0.03666 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0202    set_bounds 0.0162    solve 0.1383    add 0.0997    
Accumulated time: pickout 0.0027    decision 0.5632    set_bounds 0.0388    solve 0.3872    add 0.2528    
Current (lb-rhs): -0.04494570195674896
150 domains visited
Cumulative time: 1.3544609546661377

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08177503943443298
10 lb beta sum: 0.278549462556839, worst -0.4550175368785858
Time: prepare 0.0065    bound 0.1388    transfer 0.0007    finalize 0.0023    func 0.1520    
Accumulated time: func 0.5953    prepare 0.0494    bound 0.5295    transfer 0.0046    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.28025427) min lb tensor(-0.00902712)
Number of Verified Splits: 386 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.03786778450012207 
BICCOS Cumulative time: 0.08551764488220215
Preprocessing time: 0.01212763786315918 Inference time: 0.019539833068847656 Add cuts time: 0.005796670913696289 Cut analysis time: 0.0004036426544189453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0203    set_bounds 0.0161    solve 0.1521    add 0.0228    
Accumulated time: pickout 0.0038    decision 0.5835    set_bounds 0.0549    solve 0.5394    add 0.2756    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 31]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.09080397e-09, 1.72309563e-01, 2.80009031e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 31]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.09080397e-09, 1.72309563e-01, 1.10559031e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.09080397e-09, 6.63285702e-02, 8.54267329e-02, 2.20309958e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.09080397e-09, 6.63285702e-02, 8.54267329e-02, 5.91206998e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.09080397e-09, 6.63285702e-02, 1.01926550e-01, 2.27676138e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.09080397e-09, 6.63285702e-02, 1.01926550e-01, 5.80471605e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([9.00975258e-14, 2.26214394e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([9.00975258e-14, 1.57529458e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31494003534317017
10 lb beta sum: 0.3044258952140808, worst -0.310842365026474
Time: prepare 0.0005    bound 0.1210    transfer 0.0001    finalize 0.0002    func 0.1219    
Accumulated time: func 0.7172    prepare 0.0499    bound 0.6506    transfer 0.0047    finalize 0.0106    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 4] [/input-12, 26] 
split level 2: [/input-12, 26] [/input-12, 4] 
split level 3: [/input-12, 41] [/input-12, 41] 
split level 4: [/input-12, 10] [/input-12, 10] 
split level 5: [/input-8, 1628] [/input-8, 1628] 
split level 6: [/input-8, 1620] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6542748212814331, worst -0.0750487744808197
10 lb beta sum: 0.6542748212814331, worst -0.07435211539268494
Time: prepare 0.0114    bound 0.1218    transfer 0.0008    finalize 0.0015    func 0.1373    
Accumulated time: func 0.8545    prepare 0.0617    bound 0.7724    transfer 0.0055    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.16505283) min lb tensor(-0.07406604)
Number of Verified Splits: 218 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.6806412935256958, worst -0.5706882476806641
10 lb beta sum: 0.9990179538726807, worst -0.33046555519104004
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 5
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.44306492805480957 
BICCOS Cumulative time: 0.5285825729370117
Preprocessing time: 0.007643222808837891 Inference time: 0.43117332458496094 Add cuts time: 0.003016233444213867 Cut analysis time: 0.001232147216796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07407 (7), -0.07253 (7), -0.06941 (7), -0.06802 (7), -0.06747 (7), -0.06624 (7), -0.06231 (7), -0.06099 (7), -0.05614 (7), -0.05485 (7), -0.05301 (7), -0.05174 (7), -0.04789 (7), -0.04679 (7), -0.04462 (7), -0.04349 (7), -0.03821 (7), -0.03744 (7), -0.03445 (7), -0.03377 (7), 
Length of domains: 38
Time: pickout 0.0005    decision 0.0201    set_bounds 0.0249    solve 0.1374    add 0.0016    
Accumulated time: pickout 0.0043    decision 0.6036    set_bounds 0.0798    solve 0.6767    add 0.2771    
Current (lb-rhs): -0.07406604290008545
188 domains visited
Cumulative time: 2.37712025642395

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1620] [/input-8, 1620] [/input-8, 1885] [/input-8, 413] [/input-8, 1885] [/input-8, 1620] [/input-8, 1885] [/input-8, 1620] [/input-8, 1885] [/input-8, 1620] 
split level 1: [/input-8, 859] [/input-8, 845] [/input-8, 1620] [/input-8, 1013] [/input-8, 413] [/input-8, 845] [/input-8, 1620] [/input-8, 1885] [/input-8, 1013] [/input-8, 859] 
split level 2: [/input-8, 1885] [/input-8, 1885] [/input-8, 1013] [/input-8, 1885] [/input-8, 1013] [/input-8, 1885] [/input-8, 1013] [/input-8, 1013] [/input-8, 1620] [/input-8, 1885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06121408939361572
10 lb beta sum: 0.25052881240844727, worst -0.05815146863460541
Time: prepare 0.0060    bound 0.1410    transfer 0.0008    finalize 0.0017    func 0.1516    
Accumulated time: func 1.0061    prepare 0.0679    bound 0.9134    transfer 0.0063    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.02206296) min lb tensor(-0.05801177)
Number of Verified Splits: 116 of 304
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3106897473335266
10 lb beta sum: 0.7824165225028992, worst -0.21214187145233154
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 5
#cuts 4-6: 5
#cuts 7-9: 14
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2340095043182373 
BICCOS Cumulative time: 0.762592077255249
Preprocessing time: 0.00934910774230957 Inference time: 0.2214500904083252 Add cuts time: 0.0018656253814697266 Cut analysis time: 0.0013446807861328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05801 (10), -0.05789 (10), -0.05667 (10), -0.05651 (10), -0.05641 (10), -0.05641 (10), -0.05536 (10), -0.05514 (10), -0.05427 (10), -0.05414 (10), -0.05391 (10), -0.05378 (10), -0.05316 (10), -0.05293 (10), -0.05262 (10), -0.05241 (10), -0.05233 (10), -0.05223 (10), -0.05141 (10), -0.05119 (10), 
Length of domains: 188
Time: pickout 0.0017    decision 0.0167    set_bounds 0.0163    solve 0.1517    add 0.0019    
Accumulated time: pickout 0.0060    decision 0.6203    set_bounds 0.0961    solve 0.8285    add 0.2791    
Current (lb-rhs): -0.058011770248413086
376 domains visited
Cumulative time: 2.800875663757324

BaB round 3
batch: 188
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] [/input-8, 284] [/input-8, 284] [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05856513977050781
10 lb beta sum: 0.36208057403564453, worst -0.055641576647758484
Time: prepare 0.0076    bound 0.1495    transfer 0.0018    finalize 0.0021    func 0.1636    
Accumulated time: func 1.1697    prepare 0.0757    bound 1.0628    transfer 0.0081    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.01763719) min lb tensor(-0.05557722)
Number of Verified Splits: 62 of 376
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts 7-9: 10
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.021332979202270508 
BICCOS Cumulative time: 0.7839250564575195
Preprocessing time: 0.011551618576049805 Inference time: 0.006152153015136719 Add cuts time: 0.0025300979614257812 Cut analysis time: 0.0010991096496582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05558 (11), -0.05544 (11), -0.05433 (11), -0.05408 (11), -0.05404 (11), -0.05396 (11), -0.05275 (11), -0.05260 (11), -0.05159 (11), -0.05146 (11), -0.05146 (11), -0.05131 (11), -0.05053 (11), -0.05034 (11), -0.04998 (11), -0.04977 (11), -0.04971 (11), -0.04965 (11), -0.04872 (11), -0.04851 (11), 
Length of domains: 314
Time: pickout 0.0032    decision 0.0223    set_bounds 0.0169    solve 0.1638    add 0.0041    
Accumulated time: pickout 0.0092    decision 0.6426    set_bounds 0.1130    solve 0.9923    add 0.2831    
Current (lb-rhs): -0.055577218532562256
690 domains visited
Cumulative time: 3.033607244491577

BaB round 4
batch: 314
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1011] [/input-8, 284] [/input-8, 1656] [/input-8, 1891] [/input-8, 1437] [/input-8, 413] [/input-8, 1011] [/input-8, 284] [/input-8, 1620] [/input-8, 1891] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05619966983795166
10 lb beta sum: 0.42438337206840515, worst -0.05332450568675995
Time: prepare 0.0122    bound 0.1424    transfer 0.0028    finalize 0.0030    func 0.1656    
Accumulated time: func 1.3354    prepare 0.0882    bound 1.2052    transfer 0.0109    finalize 0.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.31267101) min lb tensor(-0.05328304)
Number of Verified Splits: 184 of 628
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.041750431060791016 
BICCOS Cumulative time: 0.8256754875183105
Preprocessing time: 0.018520355224609375 Inference time: 0.020416975021362305 Add cuts time: 0.0022552013397216797 Cut analysis time: 0.0005578994750976562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05328 (12), -0.05313 (12), -0.05205 (12), -0.05183 (12), -0.05160 (12), -0.05148 (12), -0.05051 (12), -0.05036 (12), -0.04911 (12), -0.04896 (12), -0.04891 (12), -0.04875 (12), -0.04808 (12), -0.04792 (12), -0.04775 (12), -0.04748 (12), -0.04712 (12), -0.04699 (12), -0.04632 (12), -0.04624 (12), 
Length of domains: 444
Time: pickout 0.0047    decision 0.0298    set_bounds 0.0285    solve 0.1659    add 0.0079    
Accumulated time: pickout 0.0140    decision 0.6724    set_bounds 0.1415    solve 1.1582    add 0.2910    
Current (lb-rhs): -0.05328303575515747
1134 domains visited
Cumulative time: 3.3141191005706787

BaB round 5
batch: 444
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1013] [/input-8, 1656] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 845] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 1656] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05198484659194946
10 lb beta sum: 1.1317832469940186, worst -0.045999348163604736
Time: prepare 0.0178    bound 0.1450    transfer 0.0036    finalize 0.0041    func 0.1764    
Accumulated time: func 1.5118    prepare 0.1062    bound 1.3502    transfer 0.0145    finalize 0.0229    
all_split False
======================Cut inference begins======================
max lb tensor(0.94085252) min lb tensor(-0.04589266)
Number of Verified Splits: 811 of 888
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.1251993179321289 
BICCOS Cumulative time: 0.9508748054504395
Preprocessing time: 0.025965213775634766 Inference time: 0.09038972854614258 Add cuts time: 0.008548259735107422 Cut analysis time: 0.0002961158752441406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04589 (13), -0.04573 (13), -0.04174 (13), -0.04156 (13), -0.04067 (13), -0.04052 (13), -0.04028 (13), -0.04011 (13), -0.03794 (13), -0.03778 (13), -0.02622 (13), -0.02609 (13), -0.02568 (13), -0.02549 (13), -0.02536 (13), -0.02513 (13), -0.02497 (13), -0.02476 (13), -0.02462 (13), -0.02195 (13), 
Length of domains: 77
Time: pickout 0.0083    decision 0.0360    set_bounds 0.0402    solve 0.1767    add 0.0023    
Accumulated time: pickout 0.0222    decision 0.7084    set_bounds 0.1817    solve 1.3349    add 0.2933    
Current (lb-rhs): -0.04589265584945679
1211 domains visited
Cumulative time: 3.708159923553467

BaB round 6
batch: 77
splitting decisions: 
split level 0: [/input-8, 1891] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] [/input-8, 1438] 
split level 1: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 413] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 413] [/input-8, 845] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04427015781402588

all verified at 5th iter
Time: prepare 0.0063    bound 0.0374    transfer 0.0019    finalize 0.0023    func 0.0498    
Accumulated time: func 1.5616    prepare 0.1127    bound 1.3876    transfer 0.0164    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.18955964) min lb tensor(3.36468220e-05)
Number of Verified Splits: 308 of 308
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.009873151779174805 
BICCOS Cumulative time: 0.9607479572296143
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0032    decision 0.0205    set_bounds 0.0150    solve 0.0499    add 0.0001    
Accumulated time: pickout 0.0254    decision 0.7290    set_bounds 0.1967    solve 1.3848    add 0.2934    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1211 domains visited
Cumulative time: 3.8080694675445557


Properties batch 2, size 1
Remaining timeout: 194.55759692192078
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 194.55748057365417
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 194.55686926841736
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 194.55684638023376
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.5568265914917
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.55680751800537
Verifying property 7 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.43028879]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.43028879]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010418891906738281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43028777837753296
10 lb beta sum: 0.0, worst -0.4303072690963745
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0578    transfer 0.0001    finalize 0.0001    func 0.0583    
Accumulated time: func 0.0583    prepare 0.0002    bound 0.0578    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 1139] 
split level 6: [/input-12, 99] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 26] 
split level 9: [/input-8, 1438] 
split level 10: [/input-8, 1323] 
split level 11: [/input-8, 1446] 
split level 12: [/input-8, 1436] 
split level 13: [/input-8, 1445] 
split level 14: [/input-8, 1444] 
split level 15: [/input, 2771] 
split level 16: [/input-8, 277] 
split level 17: [/input-8, 1437] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1381] 
split level 20: [/input-8, 1434] 
split level 21: [/input-8, 422] 
split level 22: [/input-8, 118] 
split level 23: [/input-8, 293] 
split level 24: [/input-8, 924] 
split level 25: [/input-8, 284] 
split level 26: [/input-8, 926] 
split level 27: [/input-8, 614] 
split level 28: [/input-8, 1111] 
split level 29: [/input-8, 1253] 
split level 30: [/input, 2741] 
split level 31: [/input-8, 413] 
split level 32: [/input, 2726] 
split level 33: [/input-8, 630] 
split level 34: [/input, 1643] 
split level 35: [/input, 1592] 
split level 36: [/input, 4070] 
split level 37: [/input-8, 1447] 
split level 38: [/input-8, 620] 
split level 39: [/input, 1745] 
split level 40: [/input-8, 933] 
split level 41: [/input, 2787] 
split level 42: [/input, 183] 
split level 43: [/input-8, 854] 
split level 44: [/input-8, 550] 
split level 45: [/input-8, 1148] 
split level 46: [/input-8, 1483] 
split level 47: [/input-8, 1571] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 410] 
split level 50: [/input-8, 934] 
split level 51: [/input, 1627] 
split level 52: [/input-8, 1325] 
split level 53: [/input-8, 1572] 
split level 54: [/input-8, 476] 
split level 55: [/input, 1623] 
split level 56: [/input, 417] 
split level 57: [/input, 2177] 
split level 58: [/input-8, 925] 
split level 59: [/input, 2601] 
split level 60: [/input-8, 1455] 
split level 61: [/input-8, 606] 
split level 62: [/input-8, 1439] 
split level 63: [/input-8, 567] 
split level 64: [/input-8, 1505] 
split level 65: [/input, 1762] 
split level 66: [/input-8, 1463] 
split level 67: [/input, 4069] 
split level 68: [/input-8, 1484] 
split level 69: [/input, 2209] 
split level 70: [/input-8, 430] 
split level 71: [/input-8, 274] 
split level 72: [/input-8, 1252] 
split level 73: [/input, 371] 
split level 74: [/input, 3438] 
split level 75: [/input, 369] 
split level 76: [/input-8, 294] 
split level 77: [/input, 1626] 
split level 78: [/input, 2585] 
split level 79: [/input-8, 1628] 
split level 80: [/input, 4036] 
split level 81: [/input-8, 1052] 
split level 82: [/input, 2587] 
split level 83: [/input-8, 111] 
split level 84: [/input, 2149] 
split level 85: [/input, 2150] 
split level 86: [/input, 418] 
split level 87: [/input, 2497] 
split level 88: [/input-8, 1238] 
split level 89: [/input, 2133] 
split level 90: [/input-8, 575] 
split level 91: [/input-8, 941] 
split level 92: [/input, 198] 
split level 93: [/input, 2759] 
split level 94: [/input, 2151] 
split level 95: [/input, 2140] 
split level 96: [/input-8, 1013] 
split level 97: [/input, 1620] 
split level 98: [/input-8, 103] 
split level 99: [/input, 2754] 
split level 100: [/input-8, 628] 
split level 101: [/input, 4055] 
split level 102: [/input, 2600] 
split level 103: [/input-8, 412] 
split level 104: [/input-8, 85] 
split level 105: [/input, 4038] 
split level 106: [/input-8, 475] 
split level 107: [/input-8, 469] 
split level 108: [/input, 1364] 
split level 109: [/input, 4006] 
split level 110: [/input, 1714] 
split level 111: [/input, 2709] 
split level 112: [/input-8, 276] 
split level 113: [/input, 37] 
split level 114: [/input-8, 1021] 
split level 115: [/input-8, 1486] 
split level 116: [/input, 2119] 
split level 117: [/input-8, 1521] 
split level 118: [/input, 2616] 
split level 119: [/input, 2513] 
split level 120: [/input, 1411] 
split level 121: [/input-8, 1063] 
split level 122: [/input, 2599] 
split level 123: [/input-8, 440] 
split level 124: [/input, 1609] 
split level 125: [/input, 192] 
split level 126: [/input-8, 458] 
split level 127: [/input, 3265] 
split level 128: [/input, 3454] 
split level 129: [/input-8, 1429] 
split level 130: [/input-8, 421] 
split level 131: [/input, 2225] 
split level 132: [/input-8, 445] 
split level 133: [/input-8, 1573] 
split level 134: [/input, 2770] 
split level 135: [/input-8, 1006] 
split level 136: [/input, 294] 
split level 137: [/input-8, 1347] 
split level 138: [/input-8, 629] 
split level 139: [/input-8, 500] 
split level 140: [/input-8, 1055] 
split level 141: [/input, 3249] 
split level 142: [/input, 2257] 
split level 143: [/input, 1698] 
split level 144: [/input, 2584] 
split level 145: [/input, 176] 
split level 146: [/input-8, 1608] 
split level 147: [/input, 1577] 
split level 148: [/input, 824] 
split level 149: [/input, 1439] 
split level 150: [/input, 2136] 
split level 151: [/input-8, 1625] 
split level 152: [/input, 2102] 
split level 153: [/input-8, 484] 
split level 154: [/input-8, 1261] 
split level 155: [/input, 2786] 
split level 156: [/input-8, 501] 
split level 157: [/input, 2466] 
split level 158: [/input, 2603] 
split level 159: [/input, 1363] 
split level 160: [/input, 2139] 
split level 161: [/input, 4007] 
split level 162: [/input, 3217] 
split level 163: [/input, 160] 
split level 164: [/input, 2629] 
split level 165: [/input-8, 502] 
split level 166: [/input, 4049] 
split level 167: [/input-8, 1581] 
split level 168: [/input, 4089] 
split level 169: [/input-8, 1230] 
split level 170: [/input, 3442] 
split level 171: [/input, 2913] 
split level 172: [/input, 2630] 
split level 173: [/input, 2371] 
split level 174: [/input-8, 1027] 
split level 175: [/input, 2104] 
split level 176: [/input, 216] 
split level 177: [/input, 1675] 
split level 178: [/input, 4008] 
split level 179: [/input, 1415] 
split level 180: [/input, 2206] 
split level 181: [/input, 970] 
split level 182: [/input, 4056] 
split level 183: [/input, 4039] 
split level 184: [/input-8, 450] 
split level 185: [/input, 1115] 
split level 186: [/input-8, 478] 
split level 187: [/input, 2537] 
split level 188: [/input, 307] 
split level 189: [/input, 2116] 
split level 190: [/input, 3654] 
split level 191: [/input, 4018] 
split level 192: [/input-8, 1254] 
split level 193: [/input, 2480] 
split level 194: [/input, 3349] 
split level 195: [/input, 1406] 
split level 196: [/input, 2830] 
split level 197: [/input, 3280] 
split level 198: [/input-8, 454] 
split level 199: [/input, 921] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4302481412887573
10 lb beta sum: 0.0, worst -0.4302435517311096
Time: prepare 0.0116    bound 0.1046    transfer 0.0023    finalize 0.0032    func 0.1244    
Accumulated time: func 0.1827    prepare 0.0219    bound 0.1624    transfer 0.0024    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.29873133) min lb tensor(-0.43022799)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011195898056030273 
BICCOS Cumulative time: 0.011195898056030273
Preprocessing time: 0.010373353958129883 Inference time: 9.369850158691406e-05 Add cuts time: 5.1021575927734375e-05 Cut analysis time: 0.0006778240203857422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41681 (1), -0.41668 (1), -0.41636 (1), -0.41632 (1), -0.41619 (1), -0.41599 (1), -0.41588 (1), -0.41587 (1), -0.41499 (1), -0.41497 (1), -0.41493 (1), -0.41406 (1), -0.41355 (1), -0.41318 (1), -0.41229 (1), -0.41185 (1), -0.41168 (1), -0.41157 (1), -0.41025 (1), -0.40885 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5167    set_bounds 0.0091    solve 0.1245    add 0.0708    
Accumulated time: pickout 0.0004    decision 0.5167    set_bounds 0.0091    solve 0.1245    add 0.0708    
Current (lb-rhs): -0.41680943965911865
50 domains visited
Cumulative time: 0.7960247993469238

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 17] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 53] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 17] [/input-12, 31] [/input-12, 53] [/input-12, 31] 
split level 3: [/input-8, 1436] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3957597613334656
10 lb beta sum: 0.18990863859653473, worst -0.3915736675262451
Time: prepare 0.0076    bound 0.1236    transfer 0.0008    finalize 0.0040    func 0.1387    
Accumulated time: func 0.3214    prepare 0.0298    bound 0.2859    transfer 0.0032    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.27107483) min lb tensor(-0.39155030)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01659536361694336 
BICCOS Cumulative time: 0.027791261672973633
Preprocessing time: 0.012561559677124023 Inference time: 0.0022902488708496094 Add cuts time: 0.0013353824615478516 Cut analysis time: 0.000408172607421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15930 (2), -0.15926 (2), -0.15783 (2), -0.15649 (2), -0.15638 (2), -0.15626 (2), -0.15568 (2), -0.15558 (2), -0.15435 (2), -0.15405 (2), -0.15358 (2), -0.15175 (2), -0.15160 (2), -0.15074 (2), -0.15065 (2), -0.15010 (2), -0.15009 (2), -0.14882 (2), -0.14841 (2), -0.14800 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0215    set_bounds 0.0126    solve 0.1389    add 0.1078    
Accumulated time: pickout 0.0015    decision 0.5382    set_bounds 0.0217    solve 0.2634    add 0.1786    
Current (lb-rhs): -0.15930020809173584
100 domains visited
Cumulative time: 1.094959020614624

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 46] [/input-12, 46] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 46] [/input-12, 53] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 118] [/input-8, 1323] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-8, 118] [/input-12, 31] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15617713332176208
10 lb beta sum: 0.5190643668174744, worst -0.01581457257270813
Time: prepare 0.0078    bound 0.1253    transfer 0.0008    finalize 0.0026    func 0.1392    
Accumulated time: func 0.4606    prepare 0.0379    bound 0.4112    transfer 0.0040    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.40861490) min lb tensor(-0.01292519)
Number of Verified Splits: 388 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.03912687301635742 
BICCOS Cumulative time: 0.06691813468933105
Preprocessing time: 0.012464284896850586 Inference time: 0.0170135498046875 Add cuts time: 0.009213685989379883 Cut analysis time: 0.0004353523254394531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0219    set_bounds 0.0161    solve 0.1393    add 0.0195    
Accumulated time: pickout 0.0028    decision 0.5601    set_bounds 0.0378    solve 0.4027    add 0.1981    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 82]), tensor([-1., -1.]), tensor([0, 0]), tensor([5.85719251e-11, 3.47544909e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 82]), tensor([-1.,  1.]), tensor([0, 0]), tensor([5.85719251e-11, 8.80174637e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.41592873e-11, 6.43083453e-02, 3.35751295e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.41592873e-11, 6.43083453e-02, 1.56019598e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.41592873e-11, 3.38865370e-02, 3.44450653e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.41592873e-11, 3.38865370e-02, 1.58906862e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2146783471107483
10 lb beta sum: 0.5160617828369141, worst -0.1498781442642212
Time: prepare 0.0005    bound 0.1411    transfer 0.0002    finalize 0.0002    func 0.1420    
Accumulated time: func 0.6026    prepare 0.0384    bound 0.5523    transfer 0.0041    finalize 0.0101    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 99] 
split level 4: [/input-12, 54] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1323] 
split level 7: [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 1.208592176437378, worst -0.09530681371688843
10 lb beta sum: 1.208592176437378, worst -0.09456151723861694
Time: prepare 0.0116    bound 0.1400    transfer 0.0009    finalize 0.0015    func 0.1558    
Accumulated time: func 0.7584    prepare 0.0505    bound 0.6923    transfer 0.0051    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.69290143) min lb tensor(-0.09422272)
Number of Verified Splits: 243 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.208592176437378, worst -0.34454840421676636
10 lb beta sum: 1.4508206844329834, worst -0.1366150975227356
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 6
#cuts 4-6: 3
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.31028103828430176 
BICCOS Cumulative time: 0.3771991729736328
Preprocessing time: 0.007668256759643555 Inference time: 0.2944304943084717 Add cuts time: 0.007187604904174805 Cut analysis time: 0.0009946823120117188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09422 (8), -0.08130 (8), -0.07997 (8), -0.06739 (8), -0.06703 (8), -0.05581 (8), -0.05352 (8), -0.04192 (8), -0.02503 (8), -0.01293 (8), -0.01101 (8), -0.00561 (8), -0.00194 (8), 
Length of domains: 13
Time: pickout 0.0005    decision 0.0229    set_bounds 0.0262    solve 0.1559    add 0.0013    
Accumulated time: pickout 0.0033    decision 0.5830    set_bounds 0.0640    solve 0.5586    add 0.1994    
Current (lb-rhs): -0.09422272443771362
113 domains visited
Cumulative time: 2.009852170944214

BaB round 2
batch: 13
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 118] [/input-8, 118] [/input-8, 413] [/input-8, 118] [/input-8, 118] [/input-8, 413] [/input-8, 118] [/input-8, 1437] [/input-8, 413] [/input-8, 413] 
split level 1: [/input-8, 413] [/input-8, 1437] [/input-8, 924] [/input-8, 413] [/input-8, 1437] [/input-8, 924] [/input-8, 1437] [/input-8, 413] [/input-8, 924] [/input-8, 924] 
split level 2: [/input-8, 1437] [/input-8, 924] [/input-8, 1620] [/input-8, 1437] [/input-8, 924] [/input-8, 1620] [/input-8, 413] [/input-8, 924] [/input-8, 1620] [/input-8, 1620] 
split level 3: [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0755355954170227
10 lb beta sum: 0.1280602514743805, worst -0.07474996149539948
Time: prepare 0.0045    bound 0.1417    transfer 0.0008    finalize 0.0014    func 0.1499    
Accumulated time: func 0.9083    prepare 0.0553    bound 0.8339    transfer 0.0059    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.04116505) min lb tensor(-0.07452610)
Number of Verified Splits: 79 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.016444683074951172 
BICCOS Cumulative time: 0.393643856048584
Preprocessing time: 0.006716251373291016 Inference time: 0.007876157760620117 Add cuts time: 0.0008957386016845703 Cut analysis time: 0.0009565353393554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07453 (12), -0.07377 (12), -0.06945 (12), -0.06882 (12), -0.06873 (12), -0.06810 (12), -0.06502 (12), -0.06429 (12), -0.06238 (12), -0.06172 (12), -0.06164 (12), -0.06121 (12), -0.06090 (12), -0.06063 (12), -0.06014 (12), -0.05979 (12), -0.05834 (12), -0.05768 (12), -0.05708 (12), -0.05669 (12), 
Length of domains: 129
Time: pickout 0.0016    decision 0.0141    set_bounds 0.0130    solve 0.1500    add 0.0025    
Accumulated time: pickout 0.0050    decision 0.5970    set_bounds 0.0770    solve 0.7086    add 0.2019    
Current (lb-rhs): -0.0745261013507843
242 domains visited
Cumulative time: 2.2083561420440674

BaB round 3
batch: 129
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07188087701797485
10 lb beta sum: 0.19118958711624146, worst -0.07127662003040314
Time: prepare 0.0052    bound 0.1459    transfer 0.0006    finalize 0.0016    func 0.1551    
Accumulated time: func 1.0634    prepare 0.0607    bound 0.9798    transfer 0.0065    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.00741196) min lb tensor(-0.07120672)
Number of Verified Splits: 12 of 258
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.012642383575439453 
BICCOS Cumulative time: 0.40628623962402344
Preprocessing time: 0.008837461471557617 Inference time: 0.0017528533935546875 Add cuts time: 0.0002913475036621094 Cut analysis time: 0.001760721206665039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07121 (13), -0.07047 (13), -0.06593 (13), -0.06531 (13), -0.06524 (13), -0.06456 (13), -0.06112 (13), -0.06039 (13), -0.05888 (13), -0.05837 (13), -0.05824 (13), -0.05807 (13), -0.05777 (13), -0.05764 (13), -0.05735 (13), -0.05721 (13), -0.05676 (13), -0.05642 (13), -0.05444 (13), -0.05380 (13), 
Length of domains: 246
Time: pickout 0.0024    decision 0.0194    set_bounds 0.0117    solve 0.1552    add 0.0038    
Accumulated time: pickout 0.0074    decision 0.6164    set_bounds 0.0887    solve 0.8638    add 0.2057    
Current (lb-rhs): -0.0712067186832428
488 domains visited
Cumulative time: 2.4142355918884277

BaB round 4
batch: 246
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1620] [/input-8, 413] [/input-8, 1620] [/input-8, 118] [/input-8, 1620] [/input-8, 118] [/input-8, 1620] [/input-8, 413] [/input-8, 1620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06852495670318604
10 lb beta sum: 0.18647979199886322, worst -0.06798864901065826
Time: prepare 0.0108    bound 0.1471    transfer 0.0022    finalize 0.0029    func 0.1663    
Accumulated time: func 1.2297    prepare 0.0718    bound 1.1269    transfer 0.0087    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.00514483) min lb tensor(-0.06794921)
Number of Verified Splits: 36 of 492
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.021369218826293945 
BICCOS Cumulative time: 0.4276554584503174
Preprocessing time: 0.01479649543762207 Inference time: 0.004439353942871094 Add cuts time: 0.0006742477416992188 Cut analysis time: 0.0014591217041015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06795 (14), -0.06721 (14), -0.06255 (14), -0.06203 (14), -0.06189 (14), -0.06128 (14), -0.05782 (14), -0.05708 (14), -0.05673 (14), -0.05601 (14), -0.05559 (14), -0.05496 (14), -0.05474 (14), -0.05452 (14), -0.05439 (14), -0.05403 (14), -0.05394 (14), -0.05365 (14), -0.05295 (14), -0.05261 (14), 
Length of domains: 456
Time: pickout 0.0043    decision 0.0260    set_bounds 0.0213    solve 0.1665    add 0.0132    
Accumulated time: pickout 0.0117    decision 0.6424    set_bounds 0.1100    solve 1.0303    add 0.2189    
Current (lb-rhs): -0.06794920563697815
944 domains visited
Cumulative time: 2.6680009365081787

BaB round 5
batch: 456
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input, 1623] [/input-8, 550] [/input, 1623] [/input-8, 1571] [/input-8, 550] [/input-8, 1571] [/input-8, 550] [/input, 1623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06514793634414673
10 lb beta sum: 0.18281243741512299, worst -0.06467355787754059
Time: prepare 0.0207    bound 0.1450    transfer 0.0028    finalize 0.0048    func 0.1794    
Accumulated time: func 1.4092    prepare 0.0928    bound 1.2719    transfer 0.0115    finalize 0.0223    
all_split False
======================Cut inference begins======================
max lb tensor(0.00592977) min lb tensor(-0.06464776)
Number of Verified Splits: 91 of 912
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.04629659652709961 
BICCOS Cumulative time: 0.473952054977417
Preprocessing time: 0.029787063598632812 Inference time: 0.01319742202758789 Add cuts time: 0.0020780563354492188 Cut analysis time: 0.0012340545654296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06465 (15), -0.06404 (15), -0.06129 (15), -0.06044 (15), -0.05875 (15), -0.05855 (15), -0.05815 (15), -0.05798 (15), -0.05544 (15), -0.05537 (15), -0.05461 (15), -0.05452 (15), -0.05425 (15), -0.05393 (15), -0.05277 (15), -0.05218 (15), -0.05167 (15), -0.05144 (15), -0.05123 (15), -0.05121 (15), 
Length of domains: 821
Time: pickout 0.0069    decision 0.2005    set_bounds 0.0378    solve 0.1801    add 0.0070    
Accumulated time: pickout 0.0185    decision 0.8428    set_bounds 0.1479    solve 1.2104    add 0.2259    
Current (lb-rhs): -0.06464776396751404
1765 domains visited
Cumulative time: 3.1482560634613037

BaB round 6
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1623] [/input, 1623] [/input-8, 1571] [/input, 1623] [/input-8, 1571] [/input, 1623] [/input-8, 1325] [/input, 1623] [/input, 1623] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06121760606765747
10 lb beta sum: 0.17749054729938507, worst -0.06071113049983978
Time: prepare 0.0402    bound 0.1688    transfer 0.0106    finalize 0.0100    func 0.2414    
Accumulated time: func 1.6505    prepare 0.1333    bound 1.4407    transfer 0.0221    finalize 0.0323    
all_split False
======================Cut inference begins======================
max lb tensor(0.00875355) min lb tensor(-0.06068611)
Number of Verified Splits: 221 of 1642
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 8
#cuts 4-6: 26
#cuts 7-9: 15
#cuts >= 20: 0
BICCOS time: 0.086822509765625 
BICCOS Cumulative time: 0.560774564743042
Preprocessing time: 0.051560401916503906 Inference time: 0.0280001163482666 Add cuts time: 0.005053043365478516 Cut analysis time: 0.0022089481353759766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06069 (16), -0.06013 (16), -0.05767 (16), -0.05732 (16), -0.05665 (16), -0.05656 (16), -0.05561 (16), -0.05509 (16), -0.05475 (16), -0.05435 (16), -0.05422 (16), -0.05331 (16), -0.05304 (16), -0.05257 (16), -0.05232 (16), -0.05163 (16), -0.05141 (16), -0.05125 (16), -0.05067 (16), -0.05053 (16), 
Length of domains: 1421
Time: pickout 0.0145    decision 0.0563    set_bounds 0.0630    solve 0.2417    add 0.0087    
Accumulated time: pickout 0.0330    decision 0.8992    set_bounds 0.2109    solve 1.4522    add 0.2346    
Current (lb-rhs): -0.06068611145019531
3186 domains visited
Cumulative time: 3.62292742729187

BaB round 7
batch: 1421
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1620] [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.056854307651519775
10 lb beta sum: 0.17387214303016663, worst -0.056394532322883606
Time: prepare 0.0732    bound 0.2933    transfer 0.0143    finalize 0.0158    func 0.4164    
Accumulated time: func 2.0669    prepare 0.2068    bound 1.7340    transfer 0.0363    finalize 0.0480    
all_split False
======================Cut inference begins======================
max lb tensor(0.00968859) min lb tensor(-0.05637237)
Number of Verified Splits: 483 of 2842
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 85.
#cuts 1-3: 8
#cuts 4-6: 41
#cuts 7-9: 36
#cuts >= 20: 0
BICCOS time: 0.3284001350402832 
BICCOS Cumulative time: 0.8891746997833252
Preprocessing time: 0.24437260627746582 Inference time: 0.06485390663146973 Add cuts time: 0.015117645263671875 Cut analysis time: 0.004055976867675781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05637 (17), -0.05584 (17), -0.05479 (17), -0.05419 (17), -0.05330 (17), -0.05308 (17), -0.05234 (17), -0.05231 (17), -0.05187 (17), -0.05176 (17), -0.05148 (17), -0.05113 (17), -0.05101 (17), -0.05098 (17), -0.05096 (17), -0.05061 (17), -0.05044 (17), -0.04980 (17), -0.04936 (17), -0.04901 (17), 
Length of domains: 2359
Time: pickout 0.0228    decision 0.0907    set_bounds 0.1218    solve 0.4169    add 0.0191    
Accumulated time: pickout 0.0558    decision 0.9899    set_bounds 0.3327    solve 1.8691    add 0.2537    
Current (lb-rhs): -0.056372374296188354
5545 domains visited
Cumulative time: 4.631266355514526

BaB round 8
batch: 2359
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 630] [/input-8, 1148] [/input-8, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0532873272895813
10 lb beta sum: 0.17226986587047577, worst -0.05271196365356445
Time: prepare 0.1192    bound 0.4498    transfer 0.0337    finalize 0.0252    func 0.6604    
Accumulated time: func 2.7274    prepare 0.3263    bound 2.1838    transfer 0.0700    finalize 0.0733    
all_split False
======================Cut inference begins======================
max lb tensor(0.01222731) min lb tensor(-0.05268027)
Number of Verified Splits: 1776 of 4718
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 180.
#cuts 1-3: 8
#cuts 4-6: 109
#cuts 7-9: 63
#cuts >= 20: 0
BICCOS time: 0.6813478469848633 
BICCOS Cumulative time: 1.5705225467681885
Preprocessing time: 0.15035462379455566 Inference time: 0.4461543560028076 Add cuts time: 0.07697534561157227 Cut analysis time: 0.007863521575927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05268 (18), -0.05213 (18), -0.05104 (18), -0.05059 (18), -0.05042 (18), -0.05012 (18), -0.04999 (18), -0.04945 (18), -0.04942 (18), -0.04904 (18), -0.04903 (18), -0.04890 (18), -0.04876 (18), -0.04849 (18), -0.04843 (18), -0.04819 (18), -0.04739 (18), -0.04735 (18), -0.04734 (18), -0.04729 (18), 
Length of domains: 2942
Time: pickout 0.0388    decision 0.1413    set_bounds 0.2178    solve 0.6614    add 0.0116    
Accumulated time: pickout 0.0946    decision 1.1312    set_bounds 0.5505    solve 2.5305    add 0.2653    
Current (lb-rhs): -0.05268026888370514
8487 domains visited
Cumulative time: 6.401109457015991

BaB round 9
batch: 2942
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 550] [/input-8, 1325] [/input-8, 1620] [/input-8, 1620] [/input-8, 550] [/input-8, 550] [/input-8, 1620] [/input-8, 1148] [/input-8, 1620] [/input-8, 550] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051616370677948
10 lb beta sum: 0.16592977941036224, worst -0.051165610551834106
Time: prepare 0.1577    bound 0.5685    transfer 0.0149    finalize 0.0328    func 0.8141    
Accumulated time: func 3.5414    prepare 0.4844    bound 2.7523    transfer 0.0849    finalize 0.1061    
all_split False
======================Cut inference begins======================
max lb tensor(0.02751173) min lb tensor(-0.05113591)
Number of Verified Splits: 1646 of 5884
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 188.
#cuts 1-3: 9
#cuts 4-6: 142
#cuts 7-9: 37
#cuts >= 20: 0
BICCOS time: 0.7818927764892578 
BICCOS Cumulative time: 2.3524153232574463
Preprocessing time: 0.18716001510620117 Inference time: 0.4973580837249756 Add cuts time: 0.08966302871704102 Cut analysis time: 0.007711648941040039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05114 (19), -0.05055 (19), -0.04948 (19), -0.04899 (19), -0.04888 (19), -0.04855 (19), -0.04840 (19), -0.04791 (19), -0.04748 (19), -0.04742 (19), -0.04721 (19), -0.04694 (19), -0.04690 (19), -0.04664 (19), -0.04586 (19), -0.04579 (19), -0.04577 (19), -0.04570 (19), -0.04538 (19), -0.04538 (19), 
Length of domains: 4238
Time: pickout 0.0616    decision 0.1688    set_bounds 0.2609    solve 0.8158    add 0.0358    
Accumulated time: pickout 0.1562    decision 1.3000    set_bounds 0.8113    solve 3.3463    add 0.3011    
Current (lb-rhs): -0.05113591253757477
12725 domains visited
Cumulative time: 8.551975965499878

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1572] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050158917903900146
10 lb beta sum: 0.146663635969162, worst -0.04971380531787872
Time: prepare 0.2178    bound 0.7665    transfer 0.0353    finalize 0.0476    func 1.3202    
Accumulated time: func 4.8616    prepare 0.7026    bound 3.5188    transfer 0.1202    finalize 0.1537    
all_split False
======================Cut inference begins======================
max lb tensor(0.04369096) min lb tensor(-0.04969522)
Number of Verified Splits: 4103 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 160.
#cuts 1-3: 10
#cuts 4-6: 131
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 1.0528860092163086 
BICCOS Cumulative time: 3.405301332473755
Preprocessing time: 0.26436686515808105 Inference time: 0.625349760055542 Add cuts time: 0.15712523460388184 Cut analysis time: 0.006044149398803711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04970 (20), -0.04910 (20), -0.04805 (20), -0.04746 (20), -0.04743 (20), -0.04709 (20), -0.04688 (20), -0.04647 (20), -0.04598 (20), -0.04593 (20), -0.04576 (20), -0.04547 (20), -0.04540 (20), -0.04522 (20), -0.04442 (20), -0.04438 (20), -0.04426 (20), -0.04421 (20), -0.04394 (20), -0.04394 (20), 
Length of domains: 4231
Time: pickout 0.0734    decision 0.2285    set_bounds 0.3841    solve 1.3220    add 0.0255    
Accumulated time: pickout 0.2295    decision 1.5285    set_bounds 1.1954    solve 4.6683    add 0.3266    
Current (lb-rhs): -0.049695223569869995
16814 domains visited
current_vram/total_varm: 11.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.68078088760376

BaB round 11
batch: 4231
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04593437910079956
10 lb beta sum: 0.16796672344207764, worst -0.04927557706832886
Time: prepare 0.2218    bound 0.7775    transfer 0.0112    finalize 0.0475    func 1.1138    
Accumulated time: func 5.9754    prepare 0.9248    bound 4.2963    transfer 0.1314    finalize 0.2012    
all_split False
======================Cut inference begins======================
max lb tensor(0.05073608) min lb tensor(-0.04545745)
Number of Verified Splits: 4720 of 8462
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 178.
#cuts 1-3: 11
#cuts 4-6: 152
#cuts 7-9: 15
#cuts >= 20: 0
BICCOS time: 1.3981034755706787 
BICCOS Cumulative time: 4.803404808044434
Preprocessing time: 0.27974987030029297 Inference time: 0.9587156772613525 Add cuts time: 0.1531679630279541 Cut analysis time: 0.0064699649810791016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04546 (21), -0.04487 (21), -0.04403 (21), -0.04401 (21), -0.04382 (21), -0.04379 (21), -0.04344 (21), -0.04343 (21), -0.04320 (21), -0.04318 (21), -0.04254 (21), -0.04237 (21), -0.04191 (21), -0.04174 (21), -0.04169 (21), -0.04151 (21), -0.04131 (21), -0.04122 (21), -0.04117 (21), -0.04097 (21), 
Length of domains: 3742
Time: pickout 0.0851    decision 0.2394    set_bounds 0.5688    solve 1.1164    add 0.0224    
Accumulated time: pickout 0.3147    decision 1.7679    set_bounds 1.7642    solve 5.7847    add 0.3490    
Current (lb-rhs): -0.04545745253562927
20556 domains visited
Cumulative time: 15.163102626800537

BaB round 12
batch: 3742
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 550] [/input-8, 1572] [/input-8, 550] [/input-8, 1325] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 1572] [/input-8, 550] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04268008470535278
10 lb beta sum: 0.1867293119430542, worst -0.0456467866897583
Time: prepare 0.2003    bound 0.6990    transfer 0.0198    finalize 0.0420    func 1.0104    
Accumulated time: func 6.9858    prepare 1.1255    bound 4.9953    transfer 0.1513    finalize 0.2433    
all_split False
======================Cut inference begins======================
max lb tensor(0.04047571) min lb tensor(-0.04220207)
Number of Verified Splits: 1656 of 7484
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 141.
#cuts 1-3: 15
#cuts 4-6: 114
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.589040994644165 
BICCOS Cumulative time: 5.392445802688599
Preprocessing time: 0.2500762939453125 Inference time: 0.2716684341430664 Add cuts time: 0.06220889091491699 Cut analysis time: 0.005087375640869141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04220 (22), -0.04161 (22), -0.04058 (22), -0.04051 (22), -0.03996 (22), -0.03994 (22), -0.03956 (22), -0.03950 (22), -0.03903 (22), -0.03896 (22), -0.03893 (22), -0.03886 (22), -0.03865 (22), -0.03845 (22), -0.03844 (22), -0.03824 (22), -0.03823 (22), -0.03808 (22), -0.03805 (22), -0.03797 (22), 
Length of domains: 5828
Time: pickout 0.0649    decision 0.2108    set_bounds 0.3462    solve 1.1929    add 0.0325    
Accumulated time: pickout 0.3795    decision 1.9787    set_bounds 2.1104    solve 6.9776    add 0.3815    
Current (lb-rhs): -0.042202070355415344
26384 domains visited
Cumulative time: 17.62376570701599

BaB round 13
batch: 5828
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.039246976375579834
10 lb beta sum: 0.1866065263748169, worst -0.040821462869644165
Time: prepare 0.3087    bound 1.0317    transfer 0.0400    finalize 0.0604    func 1.5190    
Accumulated time: func 8.5048    prepare 1.4345    bound 6.0270    transfer 0.1912    finalize 0.3036    
all_split False
======================Cut inference begins======================
max lb tensor(0.00903805) min lb tensor(-0.03875813)
Number of Verified Splits: 1267 of 11656
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 208.
#cuts 1-3: 17
#cuts 4-6: 137
#cuts 7-9: 53
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.9208636283874512 
BICCOS Cumulative time: 6.31330943107605
Preprocessing time: 0.6193990707397461 Inference time: 0.22533941268920898 Add cuts time: 0.06764340400695801 Cut analysis time: 0.008481740951538086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03876 (23), -0.03817 (23), -0.03775 (23), -0.03716 (23), -0.03713 (23), -0.03706 (23), -0.03651 (23), -0.03647 (23), -0.03644 (23), -0.03613 (23), -0.03612 (23), -0.03611 (23), -0.03587 (23), -0.03557 (23), -0.03555 (23), -0.03554 (23), -0.03552 (23), -0.03548 (23), -0.03542 (23), -0.03510 (23), 
Length of domains: 10389
Time: pickout 0.1241    decision 0.3272    set_bounds 0.7411    solve 1.5221    add 0.0492    
Accumulated time: pickout 0.5036    decision 2.3059    set_bounds 2.8515    solve 8.4998    add 0.4308    
Current (lb-rhs): -0.03875812888145447
36773 domains visited
Cumulative time: 21.333415031433105

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03570079803466797
10 lb beta sum: 0.16730289161205292, worst -0.03522086143493652
Time: prepare 0.4366    bound 1.4722    transfer 0.0425    finalize 0.0948    func 2.1544    
Accumulated time: func 10.6592    prepare 1.8716    bound 7.4992    transfer 0.2337    finalize 0.3984    
all_split False
======================Cut inference begins======================
max lb tensor(0.01049194) min lb tensor(-0.03518583)
Number of Verified Splits: 3397 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 207.
#cuts 1-3: 24
#cuts 4-6: 102
#cuts 7-9: 77
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 1.284106969833374 
BICCOS Cumulative time: 7.597416400909424
Preprocessing time: 0.5475037097930908 Inference time: 0.596264123916626 Add cuts time: 0.1316978931427002 Cut analysis time: 0.008641242980957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03519 (24), -0.03472 (24), -0.03459 (24), -0.03452 (23), -0.03415 (24), -0.03414 (24), -0.03411 (23), -0.03397 (23), -0.03376 (23), -0.03369 (24), -0.03359 (23), -0.03356 (24), -0.03351 (24), -0.03342 (24), -0.03340 (24), -0.03315 (23), -0.03310 (24), -0.03303 (24), -0.03298 (23), -0.03297 (24), 
Length of domains: 15184
Time: pickout 0.1378    decision 0.4782    set_bounds 1.1369    solve 2.3976    add 0.0504    
Accumulated time: pickout 0.6414    decision 2.7841    set_bounds 3.9884    solve 10.8974    add 0.4812    
Current (lb-rhs): -0.03518582880496979
49760 domains visited
current_vram/total_varm: 24.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 26.873729467391968

BaB round 15
batch: 15184
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 430] [/input-8, 1628] [/input-8, 430] [/input-8, 1628] [/input-8, 1628] [/input-8, 430] [/input-8, 1628] [/input-8, 1628] [/input-8, 575] [/input-8, 575] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03293406963348389
10 lb beta sum: 0.1435157209634781, worst -0.03771863877773285
Time: prepare 0.8284    bound 2.6855    transfer 0.1985    finalize 0.5248    func 4.4470    
Accumulated time: func 15.1062    prepare 2.7004    bound 10.1847    transfer 0.4322    finalize 0.9232    
all_split False
======================Cut inference begins======================
max lb tensor(0.01081876) min lb tensor(-0.03245349)
Number of Verified Splits: 12981 of 30368
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 275.
#cuts 1-3: 22
#cuts 4-6: 142
#cuts 7-9: 108
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 4.273595571517944 
BICCOS Cumulative time: 11.871011972427368
Preprocessing time: 1.0180611610412598 Inference time: 2.7985405921936035 Add cuts time: 0.4451136589050293 Cut analysis time: 0.011880159378051758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03245 (25), -0.03199 (25), -0.03186 (25), -0.03142 (25), -0.03139 (25), -0.03091 (25), -0.03089 (24), -0.03080 (25), -0.03080 (25), -0.03072 (25), -0.03068 (25), -0.03050 (24), -0.03044 (24), -0.03044 (24), -0.03034 (25), -0.03032 (24), -0.03031 (25), -0.03030 (25), -0.03021 (25), -0.03007 (25), 
Length of domains: 17387
Time: pickout 0.3237    decision 1.1199    set_bounds 1.8178    solve 4.4526    add 0.1617    
Accumulated time: pickout 0.9651    decision 3.9040    set_bounds 5.8062    solve 15.3499    add 0.6429    
Current (lb-rhs): -0.032453492283821106
67147 domains visited
Cumulative time: 39.190401792526245

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02962052822113037
10 lb beta sum: 0.12089605629444122, worst -0.04094398021697998
Time: prepare 0.9010    bound 3.0297    transfer 0.1782    finalize 0.2331    func 4.5630    
Accumulated time: func 19.6692    prepare 3.6019    bound 13.2144    transfer 0.6104    finalize 1.1563    
all_split False
======================Cut inference begins======================
max lb tensor(0.03068264) min lb tensor(-0.02961755)
Number of Verified Splits: 16207 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 33
#cuts 4-6: 11
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 5.144448757171631 
BICCOS Cumulative time: 17.015460729599
Preprocessing time: 1.5537474155426025 Inference time: 3.1800155639648438 Add cuts time: 0.4088778495788574 Cut analysis time: 0.0018079280853271484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03091 (25), -0.03034 (25), -0.02963 (25), -0.02962 (26), -0.02937 (26), -0.02901 (26), -0.02898 (25), -0.02883 (26), -0.02876 (26), -0.02865 (26), -0.02857 (26), -0.02854 (26), -0.02848 (26), -0.02848 (26), -0.02839 (26), -0.02823 (26), -0.02821 (25), -0.02819 (26), -0.02806 (26), -0.02798 (26), 
Length of domains: 17564
Time: pickout 0.3095    decision 1.7451    set_bounds 2.0327    solve 4.5719    add 0.0758    
Accumulated time: pickout 1.2746    decision 5.6491    set_bounds 7.8389    solve 19.9218    add 0.7187    
Current (lb-rhs): -0.03091280162334442
83708 domains visited
Cumulative time: 53.26518774032593

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1628] [/input-8, 1628] [/input-8, 575] [/input-8, 1628] [/input-8, 925] [/input-8, 430] [/input-8, 925] [/input-8, 925] [/input-8, 925] [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0288316011428833
10 lb beta sum: 0.32381540536880493, worst -0.028841078281402588
Time: prepare 0.9051    bound 2.5454    transfer 0.1685    finalize 0.5946    func 4.4368    
Accumulated time: func 24.1060    prepare 4.5074    bound 15.7598    transfer 0.7789    finalize 1.7509    
all_split False
======================Cut inference begins======================
max lb tensor(0.94081712) min lb tensor(-0.02882862)
Number of Verified Splits: 26867 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 7.460699081420898 
BICCOS Cumulative time: 24.476159811019897
Preprocessing time: 1.1284635066986084 Inference time: 5.928575277328491 Add cuts time: 0.40281128883361816 Cut analysis time: 0.0008490085601806641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02883 (27), -0.02853 (27), -0.02839 (27), -0.02823 (27), -0.02797 (27), -0.02793 (27), -0.02791 (26), -0.02780 (27), -0.02776 (27), -0.02753 (26), -0.02740 (27), -0.02739 (27), -0.02731 (26), -0.02719 (27), -0.02718 (27), -0.02717 (27), -0.02705 (27), -0.02697 (26), -0.02685 (27), -0.02684 (26), 
Length of domains: 7081
Time: pickout 0.3109    decision 1.9887    set_bounds 1.9651    solve 4.4437    add 0.0594    
Accumulated time: pickout 1.5855    decision 7.6378    set_bounds 9.8039    solve 24.3655    add 0.7781    
Current (lb-rhs): -0.02882862091064453
89609 domains visited
Cumulative time: 69.79983711242676

BaB round 18
batch: 7081
splitting decisions: 
split level 0: [/input-8, 422] [/input-8, 1139] [/input-8, 1139] [/input, 2149] [/input-8, 575] [/input, 2149] [/input, 1620] [/input-8, 1139] [/input-8, 422] [/input, 2149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027313232421875

all verified at 1th iter
Time: prepare 0.3942    bound 0.0577    transfer 0.0182    finalize 0.0939    func 0.6559    
Accumulated time: func 24.7619    prepare 4.9021    bound 15.8174    transfer 0.7971    finalize 1.8448    
all_split False
======================Cut inference begins======================
max lb tensor(0.05283050) min lb tensor(1.31130219e-06)
Number of Verified Splits: 14162 of 14162
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.772369384765625 
BICCOS Cumulative time: 25.248529195785522
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1375    decision 0.3971    set_bounds 0.9554    solve 0.6595    add 0.0026    
Accumulated time: pickout 1.7230    decision 8.0349    set_bounds 10.7593    solve 25.0249    add 0.7807    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
89609 domains visited
Cumulative time: 72.83967661857605


Properties batch 8, size 1
Remaining timeout: 121.48842883110046
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 78.5118 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.83010960, -18.46311760, -10.82516861, -14.02094841, -13.35524940,
         -13.57317543, -16.31656647, -16.24346542, -18.31108856, -17.83380508]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 77, 1, 478] with unstable size 76 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 478] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [76]; unstable size 76; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 76] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 76] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.44705343, 6.67497396, 2.73657393, 2.01246405, 2.17955494, 4.94374990,
         4.64395428, 6.66448021, 6.17840290]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 540] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 540] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 184] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.41975904,  2.63730335, -0.24886763,  1.14163053,  0.84137601,
          1.68192852,  1.20813775,  0.96860713,  2.32131553]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.67it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.51849270, -9.63056850, -5.03511810, -6.76035976, -4.96544600,
          -6.54092455, -7.44870996, -7.21986437, -7.37273216, -8.95295334]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06967211]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1183 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.406267166137695
alpha/beta optimization time: 1.2824742794036865
initial alpha-crown bounds: tensor([[ 0.48204637,  2.72113276, -0.22036755,  1.16896915,  0.86237276,
          1.72370422,  1.25071526,  1.03288579,  2.38480854]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.22036755084991455
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53148579597473
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5314474105835
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5314221382141
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22036755]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
        -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22036755]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 540
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 181
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 739
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011563301086425781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22036659717559814
10 lb beta sum: 0.0, worst -0.2203693389892578
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0571    transfer 0.0001    finalize 0.0001    func 0.0576    
Accumulated time: func 0.0576    prepare 0.0002    bound 0.0571    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 44] 
split level 2: [/input-12, 82] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 42] 
split level 5: [/input-12, 17] 
split level 6: [/input-8, 1868] 
split level 7: [/input-8, 1066] 
split level 8: [/input-8, 1124] 
split level 9: [/input-8, 556] 
split level 10: [/input-8, 2019] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1403] 
split level 13: [/input-8, 685] 
split level 14: [/input-8, 1362] 
split level 15: [/input-8, 1138] 
split level 16: [/input-8, 2020] 
split level 17: [/input-8, 1874] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 574] 
split level 20: [/input-8, 1073] 
split level 21: [/input-8, 787] 
split level 22: [/input-8, 555] 
split level 23: [/input-8, 1514] 
split level 24: [/input-8, 2018] 
split level 25: [/input-8, 89] 
split level 26: [/input-12, 64] 
split level 27: [/input-8, 1333] 
split level 28: [/input-8, 564] 
split level 29: [/input-8, 1361] 
split level 30: [/input-8, 1508] 
split level 31: [/input-8, 1896] 
split level 32: [/input-8, 700] 
split level 33: [/input-8, 571] 
split level 34: [/input, 2615] 
split level 35: [/input, 2682] 
split level 36: [/input-8, 1775] 
split level 37: [/input-8, 699] 
split level 38: [/input, 2691] 
split level 39: [/input-8, 90] 
split level 40: [/input-8, 573] 
split level 41: [/input, 3207] 
split level 42: [/input-8, 1366] 
split level 43: [/input-8, 1889] 
split level 44: [/input-8, 1499] 
split level 45: [/input-8, 808] 
split level 46: [/input-8, 1405] 
split level 47: [/input-8, 892] 
split level 48: [/input-8, 619] 
split level 49: [/input, 2534] 
split level 50: [/input-8, 923] 
split level 51: [/input-8, 1307] 
split level 52: [/input-12, 28] 
split level 53: [/input, 3973] 
split level 54: [/input, 2662] 
split level 55: [/input, 141] 
split level 56: [/input, 2409] 
split level 57: [/input, 2706] 
split level 58: [/input-8, 1974] 
split level 59: [/input-8, 1406] 
split level 60: [/input-8, 1107] 
split level 61: [/input, 2378] 
split level 62: [/input-8, 1393] 
split level 63: [/input-8, 855] 
split level 64: [/input, 2632] 
split level 65: [/input-8, 1272] 
split level 66: [/input-12, 53] 
split level 67: [/input-8, 1148] 
split level 68: [/input, 218] 
split level 69: [/input-8, 2009] 
split level 70: [/input-8, 1942] 
split level 71: [/input, 1628] 
split level 72: [/input-8, 534] 
split level 73: [/input, 2442] 
split level 74: [/input, 2651] 
split level 75: [/input-8, 883] 
split level 76: [/input-8, 1996] 
split level 77: [/input-8, 884] 
split level 78: [/input, 4039] 
split level 79: [/input-8, 1973] 
split level 80: [/input, 422] 
split level 81: [/input, 3301] 
split level 82: [/input-8, 612] 
split level 83: [/input, 3978] 
split level 84: [/input, 2661] 
split level 85: [/input, 3284] 
split level 86: [/input-8, 1957] 
split level 87: [/input-8, 865] 
split level 88: [/input-8, 1969] 
split level 89: [/input-8, 139] 
split level 90: [/input-8, 1922] 
split level 91: [/input, 2737] 
split level 92: [/input, 2441] 
split level 93: [/input-8, 1836] 
split level 94: [/input-8, 1056] 
split level 95: [/input-8, 1047] 
split level 96: [/input, 1558] 
split level 97: [/input-8, 1064] 
split level 98: [/input-8, 1847] 
split level 99: [/input, 3549] 
split level 100: [/input-8, 1039] 
split level 101: [/input, 2547] 
split level 102: [/input, 2680] 
split level 103: [/input, 3550] 
split level 104: [/input, 2546] 
split level 105: [/input, 2459] 
split level 106: [/input, 3981] 
split level 107: [/input, 2362] 
split level 108: [/input, 2455] 
split level 109: [/input, 2396] 
split level 110: [/input, 2550] 
split level 111: [/input-8, 1898] 
split level 112: [/input, 3226] 
split level 113: [/input, 3959] 
split level 114: [/input-8, 1783] 
split level 115: [/input, 3905] 
split level 116: [/input, 3253] 
split level 117: [/input, 2322] 
split level 118: [/input, 3299] 
split level 119: [/input, 2551] 
split level 120: [/input, 2328] 
split level 121: [/input-8, 277] 
split level 122: [/input, 2515] 
split level 123: [/input, 2774] 
split level 124: [/input, 3906] 
split level 125: [/input, 962] 
split level 126: [/input, 2549] 
split level 127: [/input, 3209] 
split level 128: [/input, 2922] 
split level 129: [/input, 2449] 
split level 130: [/input, 1653] 
split level 131: [/input-8, 489] 
split level 132: [/input, 2530] 
split level 133: [/input, 2972] 
split level 134: [/input, 3690] 
split level 135: [/input, 3752] 
split level 136: [/input, 3564] 
split level 137: [/input, 3554] 
split level 138: [/input, 2433] 
split level 139: [/input-12, 52] 
split level 140: [/input, 2273] 
split level 141: [/input, 997] 
split level 142: [/input-8, 1266] 
split level 143: [/input-8, 120] 
split level 144: [/input, 2726] 
split level 145: [/input, 3240] 
split level 146: [/input, 3904] 
split level 147: [/input, 3965] 
split level 148: [/input, 2548] 
split level 149: [/input-8, 122] 
split level 150: [/input, 3902] 
split level 151: [/input, 2986] 
split level 152: [/input, 2382] 
split level 153: [/input, 2686] 
split level 154: [/input, 3901] 
split level 155: [/input, 2674] 
split level 156: [/input-8, 1485] 
split level 157: [/input, 471] 
split level 158: [/input, 2337] 
split level 159: [/input, 2366] 
split level 160: [/input, 1527] 
split level 161: [/input, 1629] 
split level 162: [/input-8, 2021] 
split level 163: [/input, 1502] 
split level 164: [/input, 3546] 
split level 165: [/input, 3197] 
split level 166: [/input-8, 511] 
split level 167: [/input, 3293] 
split level 168: [/input-8, 1275] 
split level 169: [/input, 3204] 
split level 170: [/input, 3762] 
split level 171: [/input, 3166] 
split level 172: [/input, 3544] 
split level 173: [/input, 1614] 
split level 174: [/input, 1250] 
split level 175: [/input, 3561] 
split level 176: [/input-12, 55] 
split level 177: [/input-8, 1796] 
split level 178: [/input, 457] 
split level 179: [/input-8, 1008] 
split level 180: [/input, 1147] 
split level 181: [/input-8, 1975] 
split level 182: [/input, 980] 
split level 183: [/input-8, 792] 
split level 184: [/input, 3188] 
split level 185: [/input, 1882] 
split level 186: [/input, 2451] 
split level 187: [/input, 3297] 
split level 188: [/input, 2990] 
split level 189: [/input, 3545] 
split level 190: [/input, 2540] 
split level 191: [/input, 1526] 
split level 192: [/input-8, 121] 
split level 193: [/input, 3069] 
split level 194: [/input, 3765] 
split level 195: [/input, 1898] 
split level 196: [/input, 1329] 
split level 197: [/input, 2304] 
split level 198: [/input-8, 390] 
split level 199: [/input, 1794] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22031515836715698
10 lb beta sum: 0.0, worst -0.22030603885650635
Time: prepare 0.0120    bound 0.1054    transfer 0.0022    finalize 0.0031    func 0.1254    
Accumulated time: func 0.1830    prepare 0.0224    bound 0.1625    transfer 0.0023    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.11310434) min lb tensor(-0.22030210)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011235475540161133 
BICCOS Cumulative time: 0.011235475540161133
Preprocessing time: 0.010400772094726562 Inference time: 0.0001304149627685547 Add cuts time: 5.817413330078125e-05 Cut analysis time: 0.0006461143493652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21523 (1), -0.21491 (1), -0.21490 (1), -0.21488 (1), -0.21476 (1), -0.21474 (1), -0.21465 (1), -0.21448 (1), -0.21426 (1), -0.21426 (1), -0.21420 (1), -0.21397 (1), -0.21383 (1), -0.21379 (1), -0.21377 (1), -0.21375 (1), -0.21340 (1), -0.21311 (1), -0.21294 (1), -0.21290 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5217    set_bounds 0.0092    solve 0.1255    add 0.0716    
Accumulated time: pickout 0.0004    decision 0.5217    set_bounds 0.0092    solve 0.1255    add 0.0716    
Current (lb-rhs): -0.21523338556289673
50 domains visited
Cumulative time: 0.8075892925262451

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-12, 82] [/input-12, 42] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 2: [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1362] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 2019] [/input-12, 42] [/input-12, 42] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20950651168823242
10 lb beta sum: 0.3847499489784241, worst -0.20737916231155396
Time: prepare 0.0077    bound 0.1249    transfer 0.0008    finalize 0.0028    func 0.1390    
Accumulated time: func 0.3220    prepare 0.0304    bound 0.2873    transfer 0.0031    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.14024836) min lb tensor(-0.20672238)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01606011390686035 
BICCOS Cumulative time: 0.027295589447021484
Preprocessing time: 0.012385845184326172 Inference time: 0.002077817916870117 Add cuts time: 0.001256704330444336 Cut analysis time: 0.00033974647521972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05872 (2), -0.05825 (2), -0.05807 (2), -0.05794 (2), -0.05794 (2), -0.05794 (2), -0.05791 (2), -0.05784 (2), -0.05762 (2), -0.05754 (2), -0.05705 (2), -0.05704 (2), -0.05675 (2), -0.05653 (2), -0.05623 (2), -0.05606 (2), -0.05602 (2), -0.05587 (2), -0.05563 (2), -0.05547 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0253    set_bounds 0.0123    solve 0.1392    add 0.0883    
Accumulated time: pickout 0.0015    decision 0.5469    set_bounds 0.0215    solve 0.2647    add 0.1599    
Current (lb-rhs): -0.058718740940093994
100 domains visited
Cumulative time: 1.0901761054992676

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 11] [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] 
split level 2: [/input-12, 42] [/input-8, 1073] [/input-8, 1073] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1073] 
split level 3: [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05647432804107666
10 lb beta sum: 0.8361924290657043, worst -0.04702058434486389
Time: prepare 0.0081    bound 0.1256    transfer 0.0008    finalize 0.0029    func 0.1403    
Accumulated time: func 0.4623    prepare 0.0388    bound 0.4130    transfer 0.0039    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.31511825) min lb tensor(-0.04650573)
Number of Verified Splits: 160 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.024031400680541992 
BICCOS Cumulative time: 0.05132699012756348
Preprocessing time: 0.012078523635864258 Inference time: 0.007998466491699219 Add cuts time: 0.0034148693084716797 Cut analysis time: 0.0005395412445068359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02308 (3), -0.02286 (3), -0.02280 (3), -0.02271 (3), -0.02219 (3), -0.02216 (3), -0.02198 (3), -0.02198 (3), -0.02194 (3), -0.02191 (3), -0.02182 (3), -0.02161 (3), -0.02153 (3), -0.02143 (3), -0.02142 (3), -0.02097 (3), -0.02074 (3), -0.02067 (3), -0.02061 (3), -0.02030 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0201    set_bounds 0.0154    solve 0.1404    add 0.1003    
Accumulated time: pickout 0.0027    decision 0.5671    set_bounds 0.0370    solve 0.4051    add 0.2602    
Current (lb-rhs): -0.02308332920074463
150 domains visited
Cumulative time: 1.3919858932495117

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] 
split level 3: [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 2019] [/input-8, 2020] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03742671012878418
10 lb beta sum: 1.9878748655319214, worst -0.017298758029937744
Time: prepare 0.0084    bound 0.1408    transfer 0.0008    finalize 0.0027    func 0.1553    
Accumulated time: func 0.6177    prepare 0.0475    bound 0.5538    transfer 0.0048    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.27805519) min lb tensor(-0.01700360)
Number of Verified Splits: 162 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 14
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.02567315101623535 
BICCOS Cumulative time: 0.07700014114379883
Preprocessing time: 0.012095928192138672 Inference time: 0.007901430130004883 Add cuts time: 0.004687309265136719 Cut analysis time: 0.0009884834289550781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00518 (4), -0.00517 (4), -0.00517 (4), -0.00515 (4), -0.00497 (4), -0.00469 (4), -0.00466 (4), -0.00447 (4), -0.00442 (4), -0.00413 (4), -0.00405 (4), -0.00400 (4), -0.00393 (4), -0.00387 (4), -0.00383 (4), -0.00376 (4), -0.00361 (4), -0.00361 (4), -0.00357 (4), -0.00357 (4), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0202    set_bounds 0.0159    solve 0.1555    add 0.1251    
Accumulated time: pickout 0.0041    decision 0.5873    set_bounds 0.0529    solve 0.5606    add 0.3853    
Current (lb-rhs): -0.005176663398742676
200 domains visited
Cumulative time: 1.7361996173858643

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] 
split level 3: [/input-8, 1356] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025480210781097412
10 lb beta sum: 2.296804428100586, worst -0.01794952154159546
Time: prepare 0.0096    bound 0.1801    transfer 0.0015    finalize 0.0038    func 0.1997    
Accumulated time: func 0.8174    prepare 0.0574    bound 0.7339    transfer 0.0063    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.38955534) min lb tensor(-0.00196767)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts >= 20: 0
BICCOS time: 0.05539298057556152 
BICCOS Cumulative time: 0.13239312171936035
Preprocessing time: 0.014061450958251953 Inference time: 0.022610902786254883 Add cuts time: 0.016480684280395508 Cut analysis time: 0.0022399425506591797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.0238    set_bounds 0.0203    solve 0.1999    add 0.0377    
Accumulated time: pickout 0.0057    decision 0.6111    set_bounds 0.0732    solve 0.7605    add 0.4230    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 82]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.78060941e-11, 2.26022109e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 82]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.78060941e-11, 1.15239490e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073, 2019], [-1.0, -1.0], [0, 0], [1.489279810584776e-10, 0.014208363369107246], [2, 3]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.78060941e-11, 2.24906970e-02, 3.28064412e-02]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073, 2019], [-1.0, -1.0], [0, 0], [1.489279810584776e-10, 0.014208363369107246], [2, 3]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.78060941e-11, 2.24906970e-02, 6.10618433e-03]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1073, 2019]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.48927981e-10, 1.07039679e-02]), tensor([2, 3])), '/input-12': ([10, 11], [1.0, -1.0], [0, 0], [6.78060940728642e-11, 0.022490696981549263], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073], [1.0], [0], [6.726232628759122e-44], [2]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.78060941e-11, 2.24906970e-02, 3.78214568e-02]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073], [1.0], [0], [6.726232628759122e-44], [2]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.78060941e-11, 2.24906970e-02, 5.66969952e-03]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 11, 82]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.78060941e-11, 4.75855619e-02, 5.67662865e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 11, 82]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([6.78060941e-11, 4.75855619e-02, 1.72783602e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11081111431121826
10 lb beta sum: 1.3819385766983032, worst -0.10164064168930054
Time: prepare 0.0013    bound 0.2017    transfer 0.0005    finalize 0.0003    func 0.2039    
Accumulated time: func 1.0213    prepare 0.0587    bound 0.9356    transfer 0.0068    finalize 0.0158    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 11] [/input-8, 2019] 
split level 2: [/input-8, 2019] [/input-8, 1889] 
split level 3: [/input-8, 1356] [/input-8, 1362] 
split level 4: [/input-8, 1362] [/input-8, 555] 
split level 5: [/input-8, 574] [/input-8, 574] 
split level 6: [/input-8, 573] [/input-8, 1896] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0406832695007324, worst -0.059198200702667236
10 lb beta sum: 2.065885066986084, worst -0.05775579810142517
Time: prepare 0.0131    bound 0.2017    transfer 0.0018    finalize 0.0025    func 0.2209    
Accumulated time: func 1.2422    prepare 0.0722    bound 1.1373    transfer 0.0085    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.28182364) min lb tensor(-0.05735192)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.483191967010498, worst -2.7154622077941895
10 lb beta sum: 0.9227072596549988, worst -0.1841346025466919
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.3754100799560547 
BICCOS Cumulative time: 0.507803201675415
Preprocessing time: 0.009657621383666992 Inference time: 0.355557918548584 Add cuts time: 0.007999420166015625 Cut analysis time: 0.002195119857788086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05735 (7), -0.05705 (7), -0.05676 (7), -0.05646 (7), -0.05641 (7), -0.05610 (7), -0.05515 (7), -0.05507 (7), -0.05468 (7), -0.05456 (7), -0.05448 (7), -0.05438 (7), -0.05420 (7), -0.05412 (7), -0.05248 (7), -0.05240 (7), -0.05147 (7), -0.05143 (7), -0.05121 (7), -0.05105 (7), 
Length of domains: 64
Time: pickout 0.0008    decision 0.0243    set_bounds 0.0346    solve 0.2211    add 0.0027    
Accumulated time: pickout 0.0065    decision 0.6355    set_bounds 0.1077    solve 0.9816    add 0.4257    
Current (lb-rhs): -0.057351917028427124
264 domains visited
Cumulative time: 2.985668182373047

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] 
split level 1: [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05639028549194336
10 lb beta sum: 0.4958016276359558, worst -0.05315643548965454
Time: prepare 0.0060    bound 0.1941    transfer 0.0011    finalize 0.0021    func 0.2053    
Accumulated time: func 1.4475    prepare 0.0785    bound 1.3314    transfer 0.0096    finalize 0.0204    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00998843) min lb tensor(-0.05286583)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 57.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.010210752487182617 
BICCOS Cumulative time: 0.5180139541625977
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05287 (9), -0.05261 (9), -0.05237 (9), -0.05213 (9), -0.05212 (9), -0.05187 (9), -0.05074 (9), -0.05063 (9), -0.05029 (9), -0.05025 (9), -0.05014 (9), -0.05004 (9), -0.05000 (9), -0.04989 (9), -0.04878 (9), -0.04857 (9), -0.04828 (9), -0.04817 (9), -0.04807 (9), -0.04806 (9), 
Length of domains: 256
Time: pickout 0.0033    decision 0.0174    set_bounds 0.0164    solve 0.2055    add 0.0241    
Accumulated time: pickout 0.0098    decision 0.6529    set_bounds 0.1241    solve 1.1871    add 0.4498    
Current (lb-rhs): -0.052865833044052124
520 domains visited
Cumulative time: 3.263638734817505

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5935457944869995, worst -0.050182074308395386
10 lb beta sum: 0.593518078327179, worst -0.058033257722854614
Time: prepare 0.0258    bound 0.2078    transfer 0.0038    finalize 0.0035    func 0.2445    
Accumulated time: func 1.6920    prepare 0.1046    bound 1.5393    transfer 0.0134    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.00152107) min lb tensor(-0.04970762)
Number of Verified Splits: 4 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 14
#cuts 4-6: 44
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02557229995727539 
BICCOS Cumulative time: 0.543586254119873
Preprocessing time: 0.0174710750579834 Inference time: 0.001146554946899414 Add cuts time: 0.004695892333984375 Cut analysis time: 0.002258777618408203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04971 (10), -0.04947 (10), -0.04936 (10), -0.04913 (10), -0.04912 (10), -0.04889 (10), -0.04761 (10), -0.04748 (10), -0.04726 (10), -0.04722 (10), -0.04713 (10), -0.04702 (10), -0.04699 (10), -0.04690 (10), -0.04589 (10), -0.04576 (10), -0.04560 (10), -0.04541 (10), -0.04536 (10), -0.04518 (10), 
Length of domains: 508
Time: pickout 0.0078    decision 0.0335    set_bounds 0.3909    solve 0.2447    add 0.0069    
Accumulated time: pickout 0.0175    decision 0.6864    set_bounds 0.5149    solve 1.4318    add 0.4567    
Current (lb-rhs): -0.049707621335983276
1028 domains visited
Cumulative time: 3.9747016429901123

BaB round 4
batch: 508
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05059552192687988
10 lb beta sum: 0.34499186277389526, worst -0.04961185157299042
Time: prepare 0.0251    bound 0.2060    transfer 0.0064    finalize 0.0061    func 0.2506    
Accumulated time: func 1.9425    prepare 0.1300    bound 1.7453    transfer 0.0197    finalize 0.0300    
all_split False
======================Cut inference begins======================
max lb tensor(0.06839067) min lb tensor(-0.04954475)
Number of Verified Splits: 360 of 1016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 17
#cuts 4-6: 28
#cuts >= 20: 0
BICCOS time: 0.08549284934997559 
BICCOS Cumulative time: 0.6290791034698486
Preprocessing time: 0.03608512878417969 Inference time: 0.04216647148132324 Add cuts time: 0.005557537078857422 Cut analysis time: 0.0016837120056152344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04954 (11), -0.04931 (11), -0.04928 (11), -0.04904 (11), -0.04904 (11), -0.04880 (11), -0.04744 (11), -0.04732 (11), -0.04718 (11), -0.04711 (11), -0.04705 (11), -0.04694 (11), -0.04688 (11), -0.04681 (11), -0.04572 (11), -0.04559 (11), -0.04546 (11), -0.04533 (11), -0.04522 (11), -0.04509 (11), 
Length of domains: 656
Time: pickout 0.0102    decision 0.0438    set_bounds 0.0516    solve 0.2511    add 0.0046    
Accumulated time: pickout 0.0277    decision 0.7302    set_bounds 0.5666    solve 1.6829    add 0.4613    
Current (lb-rhs): -0.04954475164413452
1684 domains visited
Cumulative time: 4.428736686706543

BaB round 5
batch: 656
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1868] [/input-12, 44] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04945111274719238
10 lb beta sum: 0.6690714955329895, worst -0.04845161736011505
Time: prepare 0.0316    bound 0.2082    transfer 0.0054    finalize 0.0094    func 0.2637    
Accumulated time: func 2.2062    prepare 0.1620    bound 1.9535    transfer 0.0251    finalize 0.0395    
all_split False
======================Cut inference begins======================
max lb tensor(0.25151819) min lb tensor(-0.04838404)
Number of Verified Splits: 518 of 1312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 17
#cuts 4-6: 28
#cuts >= 20: 0
BICCOS time: 0.11455178260803223 
BICCOS Cumulative time: 0.7436308860778809
Preprocessing time: 0.04549860954284668 Inference time: 0.05985522270202637 Add cuts time: 0.0076367855072021484 Cut analysis time: 0.0015611648559570312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04838 (12), -0.04820 (12), -0.04813 (12), -0.04796 (12), -0.04795 (12), -0.04771 (12), -0.04647 (12), -0.04635 (12), -0.04629 (12), -0.04617 (12), -0.04605 (12), -0.04603 (12), -0.04593 (12), -0.04578 (12), -0.04454 (12), -0.04442 (12), -0.04437 (12), -0.04423 (12), -0.04414 (12), -0.04412 (12), 
Length of domains: 794
Time: pickout 0.0114    decision 0.0536    set_bounds 0.0691    solve 0.2642    add 0.0041    
Accumulated time: pickout 0.0391    decision 0.7838    set_bounds 0.6356    solve 1.9471    add 0.4654    
Current (lb-rhs): -0.04838404059410095
2478 domains visited
Cumulative time: 4.954559326171875

BaB round 6
batch: 794
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9698771834373474, worst -0.27467501163482666
10 lb beta sum: 1.2442362308502197, worst -0.04541853070259094
Time: prepare 0.0782    bound 0.2188    transfer 0.0097    finalize 0.0110    func 0.3287    
Accumulated time: func 2.5349    prepare 0.2404    bound 2.1723    transfer 0.0348    finalize 0.0505    
all_split False
======================Cut inference begins======================
max lb tensor(0.92645156) min lb tensor(-0.04537275)
Number of Verified Splits: 1114 of 1588
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.2051403522491455 
BICCOS Cumulative time: 0.9487712383270264
Preprocessing time: 0.055216312408447266 Inference time: 0.13457202911376953 Add cuts time: 0.013731002807617188 Cut analysis time: 0.0016210079193115234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04537 (13), -0.04522 (13), -0.04499 (13), -0.04479 (13), -0.04464 (13), -0.04440 (13), -0.04335 (13), -0.04320 (13), -0.04314 (13), -0.04306 (13), -0.04298 (13), -0.04296 (13), -0.04275 (13), -0.04248 (13), -0.04247 (13), -0.04239 (13), -0.04232 (13), -0.04224 (13), -0.04209 (13), -0.04201 (13), 
Length of domains: 474
Time: pickout 0.0169    decision 0.0636    set_bounds 0.0790    solve 0.3294    add 0.0026    
Accumulated time: pickout 0.0560    decision 0.8474    set_bounds 0.7147    solve 2.2765    add 0.4681    
Current (lb-rhs): -0.04537275433540344
2952 domains visited
Cumulative time: 5.671168088912964

BaB round 7
batch: 474
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04301488399505615
10 lb beta sum: 0.8321055173873901, worst -0.039515912532806396
Time: prepare 0.0217    bound 0.2030    transfer 0.0041    finalize 0.0055    func 0.2421    
Accumulated time: func 2.7770    prepare 0.2624    bound 2.3753    transfer 0.0390    finalize 0.0560    
all_split False
======================Cut inference begins======================
max lb tensor(0.00381923) min lb tensor(-0.03947061)
Number of Verified Splits: 156 of 948
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.05997943878173828 
BICCOS Cumulative time: 1.0087506771087646
Preprocessing time: 0.033054351806640625 Inference time: 0.022037029266357422 Add cuts time: 0.003362417221069336 Cut analysis time: 0.0015256404876708984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03947 (14), -0.03932 (14), -0.03911 (14), -0.03887 (14), -0.03872 (14), -0.03851 (14), -0.03744 (14), -0.03729 (14), -0.03722 (14), -0.03721 (14), -0.03718 (14), -0.03708 (14), -0.03707 (14), -0.03706 (14), -0.03689 (14), -0.03686 (14), -0.03665 (14), -0.03661 (14), -0.03658 (14), -0.03657 (14), 
Length of domains: 792
Time: pickout 0.0086    decision 0.0438    set_bounds 0.2045    solve 0.2425    add 0.0034    
Accumulated time: pickout 0.0646    decision 0.8912    set_bounds 0.9192    solve 2.5191    add 0.4715    
Current (lb-rhs): -0.0394706130027771
3744 domains visited
Cumulative time: 6.237684965133667

BaB round 8
batch: 792
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9771612882614136, worst -0.0394706130027771
10 lb beta sum: 0.9771612882614136, worst -0.039423227310180664
Time: prepare 0.0774    bound 0.2178    transfer 0.0046    finalize 0.0095    func 0.3202    
Accumulated time: func 3.0973    prepare 0.3400    bound 2.5932    transfer 0.0436    finalize 0.0655    
all_split False
======================Cut inference begins======================
max lb tensor(0.00206137) min lb tensor(-0.03938770)
Number of Verified Splits: 102 of 1584
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.07579326629638672 
BICCOS Cumulative time: 1.0845439434051514
Preprocessing time: 0.057064056396484375 Inference time: 0.013488531112670898 Add cuts time: 0.003665924072265625 Cut analysis time: 0.0015747547149658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03939 (15), -0.03923 (15), -0.03903 (15), -0.03881 (15), -0.03866 (15), -0.03845 (15), -0.03736 (15), -0.03721 (15), -0.03716 (15), -0.03714 (15), -0.03709 (15), -0.03707 (15), -0.03700 (15), -0.03700 (15), -0.03698 (15), -0.03691 (15), -0.03681 (15), -0.03680 (15), -0.03673 (15), -0.03663 (15), 
Length of domains: 1482
Time: pickout 0.0151    decision 0.0616    set_bounds 0.0791    solve 0.3221    add 0.0056    
Accumulated time: pickout 0.0797    decision 0.9528    set_bounds 0.9983    solve 2.8412    add 0.4770    
Current (lb-rhs): -0.03938770294189453
5226 domains visited
Cumulative time: 6.8016297817230225

BaB round 9
batch: 1482
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 90] [/input-12, 64] [/input-8, 90] [/input-12, 64] [/input-8, 90] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-8, 90] [/input-8, 564] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9640361070632935, worst -0.03669828176498413
10 lb beta sum: 0.9640361070632935, worst -0.03664213418960571
Time: prepare 0.1498    bound 0.3113    transfer 0.0181    finalize 0.0186    func 0.7792    
Accumulated time: func 3.8764    prepare 0.4901    bound 2.9045    transfer 0.0617    finalize 0.0841    
all_split False
======================Cut inference begins======================
max lb tensor(0.00687158) min lb tensor(-0.03661746)
Number of Verified Splits: 495 of 2964
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.1905808448791504 
BICCOS Cumulative time: 1.2751247882843018
Preprocessing time: 0.10511612892150879 Inference time: 0.07520675659179688 Add cuts time: 0.00873875617980957 Cut analysis time: 0.0015192031860351562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03662 (16), -0.03650 (16), -0.03623 (16), -0.03607 (16), -0.03595 (16), -0.03567 (16), -0.03459 (16), -0.03448 (16), -0.03447 (16), -0.03441 (16), -0.03435 (16), -0.03430 (16), -0.03426 (16), -0.03424 (16), -0.03423 (16), -0.03420 (16), -0.03412 (16), -0.03411 (16), -0.03406 (16), -0.03402 (16), 
Length of domains: 2469
Time: pickout 0.0224    decision 0.1056    set_bounds 0.1445    solve 0.7803    add 0.1002    
Accumulated time: pickout 0.1021    decision 1.0584    set_bounds 1.1428    solve 3.6215    add 0.5772    
Current (lb-rhs): -0.0366174578666687
7695 domains visited
Cumulative time: 8.157443284988403

BaB round 10
batch: 2469
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9366060495376587, worst -0.03349345922470093
10 lb beta sum: 0.9366060495376587, worst -0.03346818685531616
Time: prepare 0.2318    bound 0.4575    transfer 0.0163    finalize 0.0287    func 0.7682    
Accumulated time: func 4.6446    prepare 0.7223    bound 3.3620    transfer 0.0781    finalize 0.1128    
all_split False
======================Cut inference begins======================
max lb tensor(0.00653493) min lb tensor(-0.03345662)
Number of Verified Splits: 653 of 4938
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.5360212326049805 
BICCOS Cumulative time: 1.8111460208892822
Preprocessing time: 0.42621827125549316 Inference time: 0.09920167922973633 Add cuts time: 0.008994340896606445 Cut analysis time: 0.0016069412231445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03346 (17), -0.03334 (17), -0.03313 (17), -0.03291 (17), -0.03280 (17), -0.03258 (17), -0.03142 (17), -0.03131 (17), -0.03124 (17), -0.03122 (17), -0.03120 (17), -0.03113 (17), -0.03112 (17), -0.03109 (17), -0.03109 (17), -0.03109 (17), -0.03098 (17), -0.03093 (17), -0.03091 (17), -0.03091 (17), 
Length of domains: 4285
Time: pickout 0.0384    decision 0.1508    set_bounds 0.2340    solve 0.7700    add 0.0185    
Accumulated time: pickout 0.1405    decision 1.2092    set_bounds 1.3767    solve 4.3914    add 0.5957    
Current (lb-rhs): -0.033456623554229736
11980 domains visited
Cumulative time: 9.924630641937256

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 564] [/input-8, 1138] [/input-8, 564] [/input-8, 1138] [/input-8, 564] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-12, 64] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9234833121299744, worst -0.03134351968765259
10 lb beta sum: 0.9234833121299744, worst -0.03133392333984375
Time: prepare 0.3897    bound 0.6961    transfer 0.0231    finalize 0.0422    func 1.2088    
Accumulated time: func 5.8534    prepare 1.1124    bound 4.0581    transfer 0.1012    finalize 0.1550    
all_split False
======================Cut inference begins======================
max lb tensor(0.00651550) min lb tensor(-0.03132498)
Number of Verified Splits: 711 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.4405844211578369 
BICCOS Cumulative time: 2.251730442047119
Preprocessing time: 0.28763914108276367 Inference time: 0.1409294605255127 Add cuts time: 0.010421514511108398 Cut analysis time: 0.0015943050384521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03132 (18), -0.03121 (18), -0.03100 (18), -0.03073 (18), -0.03061 (18), -0.03040 (18), -0.02928 (18), -0.02917 (18), -0.02909 (18), -0.02907 (18), -0.02906 (18), -0.02900 (18), -0.02896 (18), -0.02896 (18), -0.02896 (18), -0.02894 (18), -0.02885 (18), -0.02878 (18), -0.02878 (18), -0.02873 (18), 
Length of domains: 7670
Time: pickout 0.0646    decision 0.2502    set_bounds 0.6868    solve 1.2107    add 0.0362    
Accumulated time: pickout 0.2051    decision 1.4594    set_bounds 2.0635    solve 5.6021    add 0.6319    
Current (lb-rhs): -0.03132498264312744
19461 domains visited
current_vram/total_varm: 12.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.640803575515747

BaB round 12
batch: 7670
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 90] [/input-8, 90] [/input-8, 1514] [/input-8, 90] [/input-8, 1514] [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9079780578613281, worst -0.02932065725326538
10 lb beta sum: 0.9079780578613281, worst -0.029314696788787842
Time: prepare 0.7244    bound 1.2456    transfer 0.0730    finalize 0.0861    func 2.2319    
Accumulated time: func 8.0853    prepare 1.8372    bound 5.3037    transfer 0.1742    finalize 0.2411    
all_split False
======================Cut inference begins======================
max lb tensor(0.00632453) min lb tensor(-0.02931088)
Number of Verified Splits: 2174 of 15340
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 1.372873067855835 
BICCOS Cumulative time: 3.624603509902954
Preprocessing time: 0.5421130657196045 Inference time: 0.7989771366119385 Add cuts time: 0.03006267547607422 Cut analysis time: 0.0017201900482177734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02931 (19), -0.02920 (19), -0.02899 (19), -0.02870 (19), -0.02859 (19), -0.02838 (19), -0.02727 (19), -0.02716 (19), -0.02703 (19), -0.02701 (19), -0.02700 (19), -0.02699 (19), -0.02695 (19), -0.02692 (19), -0.02690 (19), -0.02672 (19), -0.02671 (19), -0.02671 (19), -0.02667 (19), -0.02661 (19), 
Length of domains: 13166
Time: pickout 0.1555    decision 0.7675    set_bounds 1.1355    solve 2.2369    add 0.0559    
Accumulated time: pickout 0.3606    decision 2.2269    set_bounds 3.1991    solve 7.8389    add 0.6878    
Current (lb-rhs): -0.029310882091522217
32627 domains visited
Cumulative time: 18.42401647567749

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8721263408660889, worst -0.024831712245941162
10 lb beta sum: 0.8721263408660889, worst -0.02492004632949829
Time: prepare 0.7867    bound 1.3156    transfer 0.0484    finalize 0.0893    func 2.3505    
Accumulated time: func 10.4358    prepare 2.6244    bound 6.6194    transfer 0.2227    finalize 0.3304    
all_split False
======================Cut inference begins======================
max lb tensor(0.00508398) min lb tensor(-0.02483076)
Number of Verified Splits: 4597 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 19
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 1.732783555984497 
BICCOS Cumulative time: 5.357387065887451
Preprocessing time: 0.8753612041473389 Inference time: 0.8000009059906006 Add cuts time: 0.05578041076660156 Cut analysis time: 0.0016410350799560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02931 (19), -0.02920 (19), -0.02899 (19), -0.02870 (19), -0.02859 (19), -0.02838 (19), -0.02727 (19), -0.02716 (19), -0.02703 (19), -0.02700 (19), -0.02699 (19), -0.02695 (19), -0.02692 (19), -0.02690 (19), -0.02671 (19), -0.02671 (19), -0.02667 (19), -0.02656 (19), -0.02653 (19), -0.02652 (19), 
Length of domains: 16761
Time: pickout 0.1405    decision 0.4938    set_bounds 1.1416    solve 2.3546    add 0.0896    
Accumulated time: pickout 0.5011    decision 2.7206    set_bounds 4.3407    solve 10.1936    add 0.7775    
Current (lb-rhs): -0.029310882091522217
44414 domains visited
current_vram/total_varm: 25.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 24.452986478805542

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1514] [/input-8, 90] [/input-8, 700] [/input-8, 1514] [/input-8, 700] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028011441230773926
10 lb beta sum: 0.4913743734359741, worst -0.027133285999298096
Time: prepare 0.7565    bound 2.5289    transfer 0.1285    finalize 0.4976    func 4.1359    
Accumulated time: func 14.5717    prepare 3.3815    bound 9.1482    transfer 0.3512    finalize 0.8280    
all_split False
======================Cut inference begins======================
max lb tensor(0.22841397) min lb tensor(-0.02712543)
Number of Verified Splits: 9932 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 21
#cuts 4-6: 26
#cuts >= 20: 0
BICCOS time: 3.409024715423584 
BICCOS Cumulative time: 8.766411781311035
Preprocessing time: 1.0826165676116943 Inference time: 2.2101314067840576 Add cuts time: 0.11462879180908203 Cut analysis time: 0.00164794921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02713 (20), -0.02701 (20), -0.02680 (20), -0.02640 (20), -0.02629 (20), -0.02608 (20), -0.02509 (20), -0.02497 (20), -0.02497 (20), -0.02485 (20), -0.02480 (20), -0.02476 (20), -0.02473 (20), -0.02468 (20), -0.02462 (20), -0.02448 (20), -0.02441 (20), -0.02437 (20), -0.02424 (20), -0.02413 (20), 
Length of domains: 23213
Time: pickout 0.2578    decision 1.7509    set_bounds 1.9462    solve 4.1418    add 0.0960    
Accumulated time: pickout 0.7589    decision 4.4715    set_bounds 6.2869    solve 14.3354    add 0.8734    
Current (lb-rhs): -0.027125433087348938
67250 domains visited
current_vram/total_varm: 41.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 36.20235013961792

BaB round 15
batch: 23213
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 700] [/input-8, 700] [/input-8, 90] [/input-8, 700] [/input-8, 90] [/input-8, 1073] [/input-8, 700] [/input-8, 1073] [/input-8, 700] [/input-8, 700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025291800498962402
10 lb beta sum: 0.4879658818244934, worst -0.02440325915813446
Time: prepare 1.0187    bound 3.5735    transfer 0.2576    finalize 0.2456    func 5.4089    
Accumulated time: func 19.9806    prepare 4.4008    bound 12.7218    transfer 0.6087    finalize 1.0736    
all_split False
======================Cut inference begins======================
max lb tensor(0.23822820) min lb tensor(-0.02440102)
Number of Verified Splits: 27683 of 46426
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 32
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 7.881566047668457 
BICCOS Cumulative time: 16.647977828979492
Preprocessing time: 2.039034843444824 Inference time: 5.5321550369262695 Add cuts time: 0.30869340896606445 Cut analysis time: 0.0016827583312988281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02440 (21), -0.02429 (21), -0.02408 (21), -0.02378 (21), -0.02368 (21), -0.02367 (21), -0.02357 (21), -0.02346 (21), -0.02336 (21), -0.02306 (21), -0.02295 (21), -0.02274 (21), -0.02236 (21), -0.02225 (21), -0.02220 (21), -0.02209 (21), -0.02208 (21), -0.02204 (21), -0.02201 (21), -0.02192 (21), 
Length of domains: 18743
Time: pickout 0.4696    decision 2.4416    set_bounds 3.2212    solve 5.4174    add 0.1068    
Accumulated time: pickout 1.2285    decision 6.9131    set_bounds 9.5081    solve 19.7528    add 0.9803    
Current (lb-rhs): -0.024401023983955383
85993 domains visited
Cumulative time: 56.08896470069885

BaB round 16
batch: 18743
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023747920989990234
10 lb beta sum: 1.5103569030761719, worst -0.014086425304412842
Time: prepare 0.8455    bound 2.9168    transfer 0.1694    finalize 0.2155    func 4.4021    
Accumulated time: func 24.3827    prepare 5.2467    bound 15.6386    transfer 0.7781    finalize 1.2890    
all_split False
======================Cut inference begins======================
max lb tensor(1.41434968) min lb tensor(-0.01406193)
Number of Verified Splits: 36504 of 37486
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 34
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 9.02714228630066 
BICCOS Cumulative time: 25.67512011528015
Preprocessing time: 1.8292303085327148 Inference time: 6.879596710205078 Add cuts time: 0.3166234493255615 Cut analysis time: 0.0016918182373046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01406 (22), -0.01396 (22), -0.01393 (22), -0.01334 (22), -0.01324 (22), -0.01321 (22), -0.01202 (22), -0.01193 (22), -0.01189 (22), -0.01186 (22), -0.01167 (22), -0.01157 (22), -0.01154 (22), -0.01146 (22), -0.01136 (22), -0.01134 (22), -0.01129 (22), -0.01118 (22), -0.01114 (22), -0.01094 (22), 
Length of domains: 982
Time: pickout 0.3236    decision 1.8773    set_bounds 2.6795    solve 4.4088    add 0.0144    
Accumulated time: pickout 1.5521    decision 8.7904    set_bounds 12.1876    solve 24.1616    add 0.9947    
Current (lb-rhs): -0.014061927795410156
86975 domains visited
Cumulative time: 74.84596252441406

BaB round 17
batch: 982
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021586060523986816
10 lb beta sum: 1.7381960153579712, worst -0.011799514293670654
Time: prepare 0.0459    bound 0.2264    transfer 0.0074    finalize 0.0090    func 0.3024    
Accumulated time: func 24.6851    prepare 5.2929    bound 15.8650    transfer 0.7855    finalize 1.2980    
all_split False
======================Cut inference begins======================
max lb tensor(0.00559425) min lb tensor(-0.01177132)
Number of Verified Splits: 1030 of 1964
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 34
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.255631685256958 
BICCOS Cumulative time: 25.93075180053711
Preprocessing time: 0.06333804130554199 Inference time: 0.179459810256958 Add cuts time: 0.011288166046142578 Cut analysis time: 0.0015456676483154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01177 (23), -0.01168 (23), -0.01164 (23), -0.01108 (23), -0.01098 (23), -0.01095 (23), -0.00973 (23), -0.00964 (23), -0.00960 (23), -0.00958 (23), -0.00940 (23), -0.00930 (23), -0.00926 (23), -0.00917 (23), -0.00908 (23), -0.00904 (23), -0.00900 (23), -0.00893 (23), -0.00889 (23), -0.00888 (23), 
Length of domains: 934
Time: pickout 0.0255    decision 0.0652    set_bounds 0.0895    solve 0.3029    add 0.0059    
Accumulated time: pickout 1.5777    decision 8.8556    set_bounds 12.2771    solve 24.4644    add 1.0006    
Current (lb-rhs): -0.011771321296691895
87909 domains visited
Cumulative time: 75.6032989025116

BaB round 18
batch: 934
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1073] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8406623601913452, worst -0.009386599063873291
10 lb beta sum: 1.8406623601913452, worst -0.009369969367980957
Time: prepare 0.0827    bound 0.2175    transfer 0.0097    finalize 0.0088    func 0.3312    
Accumulated time: func 25.0163    prepare 5.3759    bound 16.0825    transfer 0.7952    finalize 1.3068    
all_split False
======================Cut inference begins======================
max lb tensor(0.23785257) min lb tensor(-0.00936401)
Number of Verified Splits: 1073 of 1868
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 34
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.24144697189331055 
BICCOS Cumulative time: 26.17219877243042
Preprocessing time: 0.05744504928588867 Inference time: 0.171311616897583 Add cuts time: 0.011188507080078125 Cut analysis time: 0.0015017986297607422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00936 (24), -0.00928 (24), -0.00923 (24), -0.00919 (24), -0.00911 (24), -0.00906 (24), -0.00822 (24), -0.00813 (24), -0.00809 (24), -0.00753 (24), -0.00751 (24), -0.00743 (24), -0.00738 (24), -0.00733 (24), -0.00724 (24), -0.00720 (24), -0.00718 (24), -0.00701 (24), -0.00679 (24), -0.00677 (24), 
Length of domains: 795
Time: pickout 0.0182    decision 0.0614    set_bounds 0.0831    solve 0.3316    add 0.0078    
Accumulated time: pickout 1.5959    decision 8.9170    set_bounds 12.3602    solve 24.7960    add 1.0084    
Current (lb-rhs): -0.009364008903503418
88704 domains visited
Cumulative time: 76.35733842849731

BaB round 19
batch: 795
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7283276319503784, worst -0.009363830089569092
10 lb beta sum: 1.7283276319503784, worst -0.009363710880279541
Time: prepare 0.0692    bound 0.1947    transfer 0.0023    finalize 0.0080    func 0.2848    
Accumulated time: func 25.3011    prepare 5.4454    bound 16.2772    transfer 0.7976    finalize 1.3148    
all_split False
======================Cut inference begins======================
max lb tensor(0.24064088) min lb tensor(-0.00936157)
Number of Verified Splits: 802 of 1590
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 35
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.19008874893188477 
BICCOS Cumulative time: 26.362287521362305
Preprocessing time: 0.04999828338623047 Inference time: 0.1303110122680664 Add cuts time: 0.008211612701416016 Cut analysis time: 0.001567840576171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00936 (25), -0.00927 (25), -0.00923 (25), -0.00919 (25), -0.00910 (25), -0.00906 (25), -0.00818 (25), -0.00810 (25), -0.00807 (25), -0.00753 (25), -0.00751 (25), -0.00742 (25), -0.00738 (25), -0.00732 (25), -0.00724 (25), -0.00719 (25), -0.00718 (25), -0.00700 (25), -0.00678 (25), -0.00676 (25), 
Length of domains: 788
Time: pickout 0.0159    decision 0.0539    set_bounds 0.0703    solve 0.2861    add 0.0052    
Accumulated time: pickout 1.6118    decision 8.9709    set_bounds 12.4305    solve 25.0821    add 1.0136    
Current (lb-rhs): -0.009361565113067627
89492 domains visited
Cumulative time: 76.98716974258423

BaB round 20
batch: 788
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1896] [/input-8, 1073] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016067862510681152
10 lb beta sum: 1.3434698581695557, worst -0.007502913475036621
Time: prepare 0.0364    bound 0.1951    transfer 0.0023    finalize 0.0070    func 0.2522    
Accumulated time: func 25.5532    prepare 5.4822    bound 16.4722    transfer 0.7998    finalize 1.3218    
all_split False
======================Cut inference begins======================
max lb tensor(0.47298783) min lb tensor(-0.00749809)
Number of Verified Splits: 1021 of 1576
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 36
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.23146510124206543 
BICCOS Cumulative time: 26.59375262260437
Preprocessing time: 0.0485990047454834 Inference time: 0.1715412139892578 Add cuts time: 0.009789228439331055 Cut analysis time: 0.001535654067993164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00750 (26), -0.00741 (26), -0.00737 (26), -0.00733 (26), -0.00724 (26), -0.00720 (26), -0.00625 (26), -0.00609 (26), -0.00605 (26), -0.00597 (26), -0.00592 (26), -0.00575 (26), -0.00567 (26), -0.00565 (26), -0.00562 (26), -0.00558 (26), -0.00556 (26), -0.00552 (26), -0.00549 (26), -0.00546 (26), 
Length of domains: 555
Time: pickout 0.0145    decision 0.0550    set_bounds 0.0691    solve 0.2525    add 0.0386    
Accumulated time: pickout 1.6264    decision 9.0260    set_bounds 12.4995    solve 25.3346    add 1.0522    
Current (lb-rhs): -0.0074980854988098145
90047 domains visited
Cumulative time: 77.65885829925537

BaB round 21
batch: 555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014024853706359863
10 lb beta sum: 1.2629468441009521, worst -0.0075026750564575195
Time: prepare 0.0222    bound 0.1705    transfer 0.0038    finalize 0.0050    func 0.2087    
Accumulated time: func 25.7619    prepare 5.5046    bound 16.6427    transfer 0.8036    finalize 1.3269    
all_split False
======================Cut inference begins======================
max lb tensor(0.24213827) min lb tensor(-0.00749612)
Number of Verified Splits: 705 of 1110
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 36
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.1657881736755371 
BICCOS Cumulative time: 26.759540796279907
Preprocessing time: 0.034882307052612305 Inference time: 0.12180304527282715 Add cuts time: 0.007428884506225586 Cut analysis time: 0.0016739368438720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00750 (27), -0.00741 (27), -0.00737 (27), -0.00733 (27), -0.00724 (27), -0.00720 (27), -0.00575 (27), -0.00566 (27), -0.00565 (27), -0.00562 (27), -0.00557 (27), -0.00556 (27), -0.00552 (27), -0.00548 (27), -0.00546 (27), -0.00545 (27), -0.00537 (27), -0.00533 (27), -0.00531 (27), -0.00514 (27), 
Length of domains: 405
Time: pickout 0.0111    decision 0.0412    set_bounds 0.0506    solve 0.2099    add 0.0028    
Accumulated time: pickout 1.6374    decision 9.0671    set_bounds 12.5502    solve 25.5445    add 1.0550    
Current (lb-rhs): -0.0074961185455322266
90452 domains visited
Cumulative time: 78.1469829082489

BaB round 22
batch: 405
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2698010206222534, worst -0.007496356964111328
10 lb beta sum: 1.2698010206222534, worst -0.0074977874755859375
Time: prepare 0.0354    bound 0.1647    transfer 0.0014    finalize 0.0037    func 0.2107    
Accumulated time: func 25.9727    prepare 5.5403    bound 16.8074    transfer 0.8050    finalize 1.3306    
all_split False
======================Cut inference begins======================
max lb tensor(0.23097134) min lb tensor(-0.00749397)
Number of Verified Splits: 160 of 810
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 36
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.05965995788574219 
BICCOS Cumulative time: 26.81920075416565
Preprocessing time: 0.023870229721069336 Inference time: 0.030766010284423828 Add cuts time: 0.003580808639526367 Cut analysis time: 0.0014429092407226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00749 (28), -0.00741 (28), -0.00736 (28), -0.00732 (28), -0.00724 (28), -0.00719 (28), -0.00704 (28), -0.00695 (28), -0.00691 (28), -0.00687 (28), -0.00678 (28), -0.00674 (28), -0.00573 (28), -0.00565 (28), -0.00564 (28), -0.00559 (28), -0.00556 (28), -0.00556 (28), -0.00551 (28), -0.00546 (28), 
Length of domains: 650
Time: pickout 0.0081    decision 0.0338    set_bounds 0.1965    solve 0.2109    add 0.0050    
Accumulated time: pickout 1.6455    decision 9.1009    set_bounds 12.7466    solve 25.7554    add 1.0601    
Current (lb-rhs): -0.0074939727783203125
91102 domains visited
Cumulative time: 78.66343975067139

BaB round 23
batch: 650
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2344759702682495, worst -0.00644761323928833
10 lb beta sum: 1.2344759702682495, worst -0.006439685821533203
Time: prepare 0.0557    bound 0.1781    transfer 0.0042    finalize 0.0055    func 0.2532    
Accumulated time: func 26.2258    prepare 5.5963    bound 16.9856    transfer 0.8091    finalize 1.3360    
all_split False
======================Cut inference begins======================
max lb tensor(0.00739622) min lb tensor(-0.00643891)
Number of Verified Splits: 892 of 1300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 37
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.20961475372314453 
BICCOS Cumulative time: 27.028815507888794
Preprocessing time: 0.03985881805419922 Inference time: 0.16010546684265137 Add cuts time: 0.00801706314086914 Cut analysis time: 0.0016334056854248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00644 (29), -0.00635 (29), -0.00631 (29), -0.00628 (29), -0.00619 (29), -0.00615 (29), -0.00598 (29), -0.00589 (29), -0.00584 (29), -0.00582 (29), -0.00573 (29), -0.00568 (29), -0.00467 (29), -0.00463 (29), -0.00457 (29), -0.00455 (29), -0.00453 (29), -0.00451 (29), -0.00450 (29), -0.00442 (29), 
Length of domains: 408
Time: pickout 0.0118    decision 0.0441    set_bounds 0.0561    solve 0.2535    add 0.0021    
Accumulated time: pickout 1.6573    decision 9.1450    set_bounds 12.8027    solve 26.0089    add 1.0622    
Current (lb-rhs): -0.006438910961151123
91510 domains visited
Cumulative time: 79.24842667579651

BaB round 24
batch: 408
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] 
cut re-enabled after branching node selection
0 lb beta sum: 1.166741967201233, worst -0.007264330983161926
10 lb beta sum: 1.3795247077941895, worst -0.006352782249450684
Time: prepare 0.0354    bound 0.1656    transfer 0.0014    finalize 0.0038    func 0.2127    
Accumulated time: func 26.4386    prepare 5.6320    bound 17.1511    transfer 0.8105    finalize 1.3398    
all_split False
======================Cut inference begins======================
max lb tensor(0.23664916) min lb tensor(-0.00634706)
Number of Verified Splits: 528 of 816
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 37
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.12948060035705566 
BICCOS Cumulative time: 27.15829610824585
Preprocessing time: 0.024463415145874023 Inference time: 0.09831786155700684 Add cuts time: 0.005234241485595703 Cut analysis time: 0.0014650821685791016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00635 (30), -0.00619 (30), -0.00479 (30), -0.00465 (30), -0.00462 (30), -0.00457 (30), -0.00455 (30), -0.00449 (30), -0.00441 (30), -0.00434 (30), -0.00430 (30), -0.00425 (30), -0.00425 (30), -0.00421 (30), -0.00418 (30), -0.00409 (30), -0.00409 (30), -0.00405 (30), -0.00378 (30), -0.00376 (30), 
Length of domains: 288
Time: pickout 0.0092    decision 0.0351    set_bounds 0.0359    solve 0.2130    add 0.0031    
Accumulated time: pickout 1.6665    decision 9.1801    set_bounds 12.8386    solve 26.2219    add 1.0652    
Current (lb-rhs): -0.006347060203552246
91798 domains visited
Cumulative time: 79.67843413352966

BaB round 25
batch: 288
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5457041263580322, worst -0.005278289318084717
10 lb beta sum: 1.5457041263580322, worst -0.005278110504150391
Time: prepare 0.0278    bound 0.1783    transfer 0.0032    finalize 0.0028    func 0.2160    
Accumulated time: func 26.6546    prepare 5.6600    bound 17.3295    transfer 0.8137    finalize 1.3426    
all_split False
======================Cut inference begins======================
max lb tensor(0.00414771) min lb tensor(-0.00527209)
Number of Verified Splits: 414 of 576
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 39
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.09774994850158691 
BICCOS Cumulative time: 27.256046056747437
Preprocessing time: 0.0176699161529541 Inference time: 0.0742342472076416 Add cuts time: 0.004335165023803711 Cut analysis time: 0.0015106201171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00527 (31), -0.00511 (31), -0.00371 (31), -0.00358 (31), -0.00355 (31), -0.00349 (31), -0.00347 (31), -0.00342 (31), -0.00333 (31), -0.00326 (31), -0.00322 (31), -0.00317 (31), -0.00317 (31), -0.00313 (31), -0.00310 (31), -0.00301 (31), -0.00301 (31), -0.00296 (31), -0.00270 (31), -0.00269 (31), 
Length of domains: 162
Time: pickout 0.0063    decision 0.0271    set_bounds 0.0149    solve 0.2162    add 0.0020    
Accumulated time: pickout 1.6728    decision 9.2071    set_bounds 12.8535    solve 26.4381    add 1.0672    
Current (lb-rhs): -0.005272090435028076
91960 domains visited
Cumulative time: 80.04574680328369

BaB round 26
batch: 162
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1393] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004756927490234375
10 lb beta sum: 0.47865381836891174, worst -0.0037102997303009033
Time: prepare 0.0087    bound 0.1587    transfer 0.0007    finalize 0.0028    func 0.1731    
Accumulated time: func 26.8277    prepare 5.6689    bound 17.4882    transfer 0.8144    finalize 1.3454    
all_split False
======================Cut inference begins======================
max lb tensor(0.23682669) min lb tensor(-0.00370505)
Number of Verified Splits: 208 of 324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 39
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.052841901779174805 
BICCOS Cumulative time: 27.30888795852661
Preprocessing time: 0.010427236557006836 Inference time: 0.0381014347076416 Add cuts time: 0.0028901100158691406 Cut analysis time: 0.0014231204986572266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00371 (32), -0.00362 (32), -0.00358 (32), -0.00354 (32), -0.00345 (32), -0.00341 (32), -0.00325 (32), -0.00316 (32), -0.00312 (32), -0.00309 (32), -0.00300 (32), -0.00296 (32), -0.00213 (32), -0.00204 (32), -0.00200 (32), -0.00196 (32), -0.00193 (32), -0.00190 (32), -0.00187 (32), -0.00185 (32), 
Length of domains: 116
Time: pickout 0.0051    decision 0.0209    set_bounds 0.0143    solve 0.1732    add 0.0013    
Accumulated time: pickout 1.6780    decision 9.2281    set_bounds 12.8679    solve 26.6113    add 1.0685    
Current (lb-rhs): -0.003705054521560669
92076 domains visited
Cumulative time: 80.31500601768494

BaB round 27
batch: 116
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6666459441184998, worst -0.002530127763748169
10 lb beta sum: 0.6666459441184998, worst -0.002524763345718384
Time: prepare 0.0115    bound 0.1529    transfer 0.0006    finalize 0.0013    func 0.1679    
Accumulated time: func 26.9956    prepare 5.6806    bound 17.6411    transfer 0.8150    finalize 1.3467    
all_split False
======================Cut inference begins======================
max lb tensor(0.00299883) min lb tensor(-0.00251940)
Number of Verified Splits: 191 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 40
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.047338247299194336 
BICCOS Cumulative time: 27.356226205825806
Preprocessing time: 0.0074770450592041016 Inference time: 0.03557848930358887 Add cuts time: 0.002796173095703125 Cut analysis time: 0.0014865398406982422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00252 (33), -0.00243 (33), -0.00239 (33), -0.00235 (33), -0.00227 (33), -0.00222 (33), -0.00207 (33), -0.00198 (33), -0.00194 (33), -0.00190 (33), -0.00181 (33), -0.00177 (33), -0.00094 (33), -0.00086 (33), -0.00081 (33), -0.00078 (33), -0.00076 (33), -0.00069 (33), -0.00068 (33), -0.00066 (33), 
Length of domains: 41
Time: pickout 0.0034    decision 0.0158    set_bounds 0.0102    solve 0.1680    add 0.0012    
Accumulated time: pickout 1.6813    decision 9.2438    set_bounds 12.8781    solve 26.7793    add 1.0697    
Current (lb-rhs): -0.0025193989276885986
92117 domains visited
Cumulative time: 80.56244492530823

BaB round 28
batch: 41
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] 
split level 1: [/input, 2632] [/input, 2632] [/input-8, 1836] [/input, 2632] [/input-8, 1836] [/input, 2632] [/input, 2632] [/input, 2632] [/input-8, 1836] [/input, 2632] 
split level 2: [/input-8, 1836] [/input-8, 1836] [/input, 2632] [/input-8, 1836] [/input, 2632] [/input-8, 1836] [/input-8, 1836] [/input-8, 1836] [/input, 2632] [/input-8, 1836] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0014396905899047852

all verified at 0th iter
Time: prepare 0.0085    bound 0.0086    transfer 0.0007    finalize 0.0019    func 0.0219    
Accumulated time: func 27.0175    prepare 5.6893    bound 17.6497    transfer 0.8157    finalize 1.3486    
all_split False
======================Cut inference begins======================
max lb tensor(0.01132393) min lb tensor(0.00143969)
Number of Verified Splits: 328 of 328
No cut inferred: All or none verified.
Total number of valid cuts: 61.
#cuts 1-3: 40
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.010196685791015625 
BICCOS Cumulative time: 27.36642289161682
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0021    decision 0.0172    set_bounds 0.0284    solve 0.0220    add 0.0001    
Accumulated time: pickout 1.6835    decision 9.2611    set_bounds 12.9065    solve 26.8013    add 1.0698    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
92117 domains visited
Cumulative time: 80.64393901824951


Properties batch 3, size 1
Remaining timeout: 117.64495825767517
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 117.64484095573425
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 117.6439745426178
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 117.64395213127136
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 117.64392757415771
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 117.64390826225281
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 82.3562 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [571]; unstable size 571; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 571] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 571] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 571] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 150] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57134819,  7.26472521, -1.64735651,  1.38431621,  0.25252247,
          3.19363260,  1.94417953,  5.92638016,  5.30164909]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
           -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.98141098]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0593 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.39601326, -14.69097233, -12.64669704, -12.07789993, -12.42763519,
         -12.80878258, -10.90289593, -13.06480980, -16.92237282, -13.27768993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 576] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 576] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 199] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.12973344, 2.10289240, 0.60040081, 0.30346024, 0.51467490, 0.89803648,
         1.03227448, 3.96525574, 0.86045051]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [722]; unstable size 722; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 722] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 722] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 722] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 179] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99104667,  0.21340603,  2.51710486, -0.09744835,  3.08586311,
          3.07672834,  2.41397476, -0.15205145,  3.96747732]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.38it/s]100%|██████████| 1/1 [00:00<00:00,  8.37it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.91187239, -11.79963017,  -8.07671642, -10.41768456,  -7.87977695,
          -11.27148438, -10.87535191, -11.22656631,  -7.33530617, -11.91874981],
         [ -6.91187239, -11.79963017,  -8.07671642, -10.41768456,  -7.87977695,
          -11.27148438, -10.87535191, -11.22656631,  -7.33530617, -11.91874981]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96790457, 0.42343378]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1225 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.568557739257812
alpha/beta optimization time: 1.27146577835083
initial alpha-crown bounds: tensor([[ 4.04605579,  0.26190412,  2.56589413, -0.03486246,  3.13469791,
          3.12771034,  2.50110173, -0.06319153,  4.02924871]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.06319153308868408
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5346348285675
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5345962047577
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5345721244812
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5345504283905
Verifying property 3 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03486246]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03486246]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010824203491210938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.034862399101257324
10 lb beta sum: 0.0, worst -0.03486752510070801
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0561    transfer 0.0001    finalize 0.0001    func 0.0566    
Accumulated time: func 0.0566    prepare 0.0002    bound 0.0561    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 9] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 651] 
split level 7: [/input-12, 92] 
split level 8: [/input-8, 802] 
split level 9: [/input-12, 58] 
split level 10: [/input-8, 534] 
split level 11: [/input-8, 652] 
split level 12: [/input-8, 1012] 
split level 13: [/input-8, 563] 
split level 14: [/input-8, 684] 
split level 15: [/input-8, 650] 
split level 16: [/input-8, 653] 
split level 17: [/input-8, 996] 
split level 18: [/input-8, 1886] 
split level 19: [/input-8, 564] 
split level 20: [/input, 1483] 
split level 21: [/input-8, 1306] 
split level 22: [/input, 3514] 
split level 23: [/input-8, 1330] 
split level 24: [/input-8, 548] 
split level 25: [/input-8, 1331] 
split level 26: [/input, 2250] 
split level 27: [/input-8, 1454] 
split level 28: [/input-8, 566] 
split level 29: [/input-8, 1010] 
split level 30: [/input-8, 1554] 
split level 31: [/input, 1721] 
split level 32: [/input, 2266] 
split level 33: [/input, 2983] 
split level 34: [/input-8, 573] 
split level 35: [/input-8, 994] 
split level 36: [/input, 2409] 
split level 37: [/input-8, 2024] 
split level 38: [/input-8, 857] 
split level 39: [/input-8, 681] 
split level 40: [/input-8, 927] 
split level 41: [/input-8, 1316] 
split level 42: [/input, 3530] 
split level 43: [/input, 3113] 
split level 44: [/input-8, 1449] 
split level 45: [/input-8, 1305] 
split level 46: [/input, 3110] 
split level 47: [/input-8, 1553] 
split level 48: [/input-8, 2022] 
split level 49: [/input, 3112] 
split level 50: [/input, 3173] 
split level 51: [/input, 1499] 
split level 52: [/input, 3257] 
split level 53: [/input-8, 1629] 
split level 54: [/input, 3429] 
split level 55: [/input, 342] 
split level 56: [/input, 3131] 
split level 57: [/input, 2361] 
split level 58: [/input, 3432] 
split level 59: [/input, 3357] 
split level 60: [/input, 375] 
split level 61: [/input, 1749] 
split level 62: [/input, 3735] 
split level 63: [/input, 3546] 
split level 64: [/input, 2375] 
split level 65: [/input, 3383] 
split level 66: [/input-8, 1974] 
split level 67: [/input, 2987] 
split level 68: [/input, 3493] 
split level 69: [/input, 3369] 
split level 70: [/input-8, 1461] 
split level 71: [/input, 2651] 
split level 72: [/input, 676] 
split level 73: [/input-8, 1109] 
split level 74: [/input, 3370] 
split level 75: [/input-8, 1803] 
split level 76: [/input, 341] 
split level 77: [/input, 3895] 
split level 78: [/input, 3174] 
split level 79: [/input-8, 1071] 
split level 80: [/input, 3143] 
split level 81: [/input, 3115] 
split level 82: [/input-8, 278] 
split level 83: [/input, 2405] 
split level 84: [/input, 3893] 
split level 85: [/input, 3116] 
split level 86: [/input, 3945] 
split level 87: [/input, 3928] 
split level 88: [/input-8, 1001] 
split level 89: [/input, 3929] 
split level 90: [/input, 2379] 
split level 91: [/input, 3511] 
split level 92: [/input, 1335] 
split level 93: [/input-8, 1249] 
split level 94: [/input, 2392] 
split level 95: [/input-8, 1122] 
split level 96: [/input-8, 1997] 
split level 97: [/input, 3927] 
split level 98: [/input-8, 464] 
split level 99: [/input, 2374] 
split level 100: [/input, 328] 
split level 101: [/input, 3256] 
split level 102: [/input, 3761] 
split level 103: [/input, 3523] 
split level 104: [/input, 3545] 
split level 105: [/input, 2404] 
split level 106: [/input, 3382] 
split level 107: [/input, 1750] 
split level 108: [/input, 3448] 
split level 109: [/input-8, 1552] 
split level 110: [/input-8, 1065] 
split level 111: [/input, 1310] 
split level 112: [/input-8, 574] 
split level 113: [/input-8, 1308] 
split level 114: [/input, 1351] 
split level 115: [/input, 3413] 
split level 116: [/input, 3098] 
split level 117: [/input, 330] 
split level 118: [/input, 3550] 
split level 119: [/input, 3894] 
split level 120: [/input, 2395] 
split level 121: [/input, 2373] 
split level 122: [/input, 1446] 
split level 123: [/input, 3763] 
split level 124: [/input, 2981] 
split level 125: [/input, 3241] 
split level 126: [/input, 344] 
split level 127: [/input, 2393] 
split level 128: [/input-8, 465] 
split level 129: [/input, 1502] 
split level 130: [/input, 3431] 
split level 131: [/input, 1336] 
split level 132: [/input, 2376] 
split level 133: [/input, 1531] 
split level 134: [/input-8, 646] 
split level 135: [/input-8, 645] 
split level 136: [/input, 3925] 
split level 137: [/input, 3125] 
split level 138: [/input-8, 1995] 
split level 139: [/input, 3931] 
split level 140: [/input, 1365] 
split level 141: [/input, 3738] 
split level 142: [/input, 2380] 
split level 143: [/input, 3397] 
split level 144: [/input, 3371] 
split level 145: [/input, 3175] 
split level 146: [/input, 2363] 
split level 147: [/input, 2235] 
split level 148: [/input, 1479] 
split level 149: [/input, 1337] 
split level 150: [/input, 3926] 
split level 151: [/input, 3005] 
split level 152: [/input-8, 2030] 
split level 153: [/input, 1532] 
split level 154: [/input, 3576] 
split level 155: [/input, 3571] 
split level 156: [/input, 3573] 
split level 157: [/input, 2506] 
split level 158: [/input, 1415] 
split level 159: [/input, 2652] 
split level 160: [/input, 438] 
split level 161: [/input, 3384] 
split level 162: [/input-8, 1441] 
split level 163: [/input, 1309] 
split level 164: [/input-8, 981] 
split level 165: [/input, 3356] 
split level 166: [/input-8, 1996] 
split level 167: [/input, 2388] 
split level 168: [/input, 2362] 
split level 169: [/input, 3160] 
split level 170: [/input, 3580] 
split level 171: [/input, 3385] 
split level 172: [/input, 44] 
split level 173: [/input, 3381] 
split level 174: [/input, 1863] 
split level 175: [/input, 3883] 
split level 176: [/input, 3387] 
split level 177: [/input, 2346] 
split level 178: [/input, 3572] 
split level 179: [/input, 3582] 
split level 180: [/input, 340] 
split level 181: [/input, 1530] 
split level 182: [/input, 2394] 
split level 183: [/input, 769] 
split level 184: [/input, 3574] 
split level 185: [/input, 1491] 
split level 186: [/input, 3575] 
split level 187: [/input, 2542] 
split level 188: [/input-8, 1758] 
split level 189: [/input, 1533] 
split level 190: [/input, 1453] 
split level 191: [/input, 3271] 
split level 192: [/input, 2403] 
split level 193: [/input, 1487] 
split level 194: [/input, 2553] 
split level 195: [/input, 3753] 
split level 196: [/input, 3943] 
split level 197: [/input-8, 1524] 
split level 198: [/input, 1334] 
split level 199: [/input, 3354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.034767091274261475
10 lb beta sum: 0.0, worst -0.03476232290267944
Time: prepare 0.0118    bound 0.1021    transfer 0.0016    finalize 0.0031    func 0.1214    
Accumulated time: func 0.1780    prepare 0.0221    bound 0.1583    transfer 0.0017    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.10734296) min lb tensor(-0.03475940)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011433601379394531 
BICCOS Cumulative time: 0.011433601379394531
Preprocessing time: 0.010216474533081055 Inference time: 0.0004639625549316406 Add cuts time: 0.0001678466796875 Cut analysis time: 0.0005853176116943359
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5110    set_bounds 0.0092    solve 0.1215    add 0.0101    
Accumulated time: pickout 0.0004    decision 0.5110    set_bounds 0.0092    solve 0.1215    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41]), tensor([-1.]), tensor([0]), tensor([8.46006208e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41]), tensor([1.]), tensor([0]), tensor([8.46006208e-14]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.08163261413574219

all verified at 0th iter
Time: prepare 0.0004    bound 0.0056    transfer 0.0001    finalize 0.0002    func 0.0063    
Accumulated time: func 0.1844    prepare 0.0225    bound 0.1638    transfer 0.0018    finalize 0.0034    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.58904266357422
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.58897185325623
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.58894562721252
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.5889220237732
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06319153]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06319153]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010323524475097656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06319153308868408
10 lb beta sum: 0.0, worst -0.06319063901901245
Time: prepare 0.0002    bound 0.0939    transfer 0.0001    finalize 0.0001    func 0.0944    
Accumulated time: func 0.0944    prepare 0.0002    bound 0.0939    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] 
split level 1: [/input-12, 21] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 9] 
split level 4: [/input-8, 1331] 
split level 5: [/input-12, 74] 
split level 6: [/input-12, 99] 
split level 7: [/input-8, 1330] 
split level 8: [/input-8, 1777] 
split level 9: [/input-8, 1396] 
split level 10: [/input-8, 1785] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 564] 
split level 13: [/input-8, 1776] 
split level 14: [/input-12, 40] 
split level 15: [/input-8, 563] 
split level 16: [/input, 2167] 
split level 17: [/input-8, 1372] 
split level 18: [/input-8, 1395] 
split level 19: [/input-8, 566] 
split level 20: [/input-8, 1769] 
split level 21: [/input-8, 880] 
split level 22: [/input-8, 1509] 
split level 23: [/input-8, 1839] 
split level 24: [/input-8, 1394] 
split level 25: [/input-12, 32] 
split level 26: [/input-8, 573] 
split level 27: [/input-8, 1524] 
split level 28: [/input-8, 1525] 
split level 29: [/input-8, 1900] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 1554] 
split level 32: [/input-8, 650] 
split level 33: [/input-8, 1454] 
split level 34: [/input, 3432] 
split level 35: [/input, 2983] 
split level 36: [/input-8, 299] 
split level 37: [/input-8, 1782] 
split level 38: [/input-8, 567] 
split level 39: [/input-8, 651] 
split level 40: [/input-8, 1841] 
split level 41: [/input-8, 1138] 
split level 42: [/input-8, 1843] 
split level 43: [/input, 3736] 
split level 44: [/input-8, 1374] 
split level 45: [/input, 3431] 
split level 46: [/input, 2683] 
split level 47: [/input-8, 117] 
split level 48: [/input, 1370] 
split level 49: [/input-8, 1306] 
split level 50: [/input-8, 1305] 
split level 51: [/input, 3433] 
split level 52: [/input, 2392] 
split level 53: [/input, 3417] 
split level 54: [/input, 3753] 
split level 55: [/input-8, 1429] 
split level 56: [/input, 2950] 
split level 57: [/input-8, 574] 
split level 58: [/input, 2409] 
split level 59: [/input-8, 2020] 
split level 60: [/input, 2987] 
split level 61: [/input, 3415] 
split level 62: [/input-8, 1842] 
split level 63: [/input, 676] 
split level 64: [/input-8, 1523] 
split level 65: [/input-8, 1364] 
split level 66: [/input-8, 1249] 
split level 67: [/input, 3174] 
split level 68: [/input, 388] 
split level 69: [/input, 1369] 
split level 70: [/input, 3448] 
split level 71: [/input, 3928] 
split level 72: [/input, 2391] 
split level 73: [/input, 3735] 
split level 74: [/input, 3160] 
split level 75: [/input, 2393] 
split level 76: [/input-8, 646] 
split level 77: [/input, 3429] 
split level 78: [/input, 1400] 
split level 79: [/input-8, 1122] 
split level 80: [/input, 3175] 
split level 81: [/input, 375] 
split level 82: [/input, 3942] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1803] 
split level 85: [/input, 3927] 
split level 86: [/input, 2375] 
split level 87: [/input, 3550] 
split level 88: [/input, 3975] 
split level 89: [/input, 3144] 
split level 90: [/input-8, 1908] 
split level 91: [/input-8, 1010] 
split level 92: [/input, 387] 
split level 93: [/input-8, 1526] 
split level 94: [/input, 371] 
split level 95: [/input, 3413] 
split level 96: [/input, 3401] 
split level 97: [/input, 2394] 
split level 98: [/input, 1502] 
split level 99: [/input-8, 1441] 
split level 100: [/input, 2981] 
split level 101: [/input, 3739] 
split level 102: [/input, 1386] 
split level 103: [/input, 3738] 
split level 104: [/input, 1335] 
split level 105: [/input, 3382] 
split level 106: [/input, 342] 
split level 107: [/input, 674] 
split level 108: [/input, 2374] 
split level 109: [/input, 2395] 
split level 110: [/input, 3419] 
split level 111: [/input-8, 1069] 
split level 112: [/input, 3944] 
split level 113: [/input-8, 1319] 
split level 114: [/input-8, 927] 
split level 115: [/input, 1402] 
split level 116: [/input, 1385] 
split level 117: [/input, 2407] 
split level 118: [/input, 3383] 
split level 119: [/input, 1356] 
split level 120: [/input, 3926] 
split level 121: [/input, 3925] 
split level 122: [/input-8, 681] 
split level 123: [/input, 344] 
split level 124: [/input, 3397] 
split level 125: [/input, 3546] 
split level 126: [/input-8, 1436] 
split level 127: [/input, 1893] 
split level 128: [/input, 2747] 
split level 129: [/input, 3754] 
split level 130: [/input, 2376] 
split level 131: [/input, 3381] 
split level 132: [/input-8, 464] 
split level 133: [/input, 2652] 
split level 134: [/input-8, 1780] 
split level 135: [/input-8, 1886] 
split level 136: [/input, 1351] 
split level 137: [/input, 3943] 
split level 138: [/input, 3143] 
split level 139: [/input, 3404] 
split level 140: [/input, 341] 
split level 141: [/input, 1353] 
split level 142: [/input-8, 1109] 
split level 143: [/input-8, 1001] 
split level 144: [/input, 1454] 
split level 145: [/input, 2379] 
split level 146: [/input-8, 111] 
split level 147: [/input, 328] 
split level 148: [/input, 3384] 
split level 149: [/input, 1605] 
split level 150: [/input-8, 1366] 
split level 151: [/input, 4022] 
split level 152: [/input, 2723] 
split level 153: [/input-8, 114] 
split level 154: [/input, 1365] 
split level 155: [/input-8, 1371] 
split level 156: [/input, 1336] 
split level 157: [/input, 1349] 
split level 158: [/input, 3569] 
split level 159: [/input, 2872] 
split level 160: [/input, 3403] 
split level 161: [/input-8, 1778] 
split level 162: [/input, 2373] 
split level 163: [/input, 3948] 
split level 164: [/input, 3718] 
split level 165: [/input, 662] 
split level 166: [/input, 2871] 
split level 167: [/input, 3412] 
split level 168: [/input-8, 1758] 
split level 169: [/input, 3929] 
split level 170: [/input, 330] 
split level 171: [/input, 1633] 
split level 172: [/input-8, 466] 
split level 173: [/input, 1415] 
split level 174: [/input, 1649] 
split level 175: [/input, 2189] 
split level 176: [/input, 2636] 
split level 177: [/input, 1665] 
split level 178: [/input, 340] 
split level 179: [/input, 2762] 
split level 180: [/input, 2685] 
split level 181: [/input, 3723] 
split level 182: [/input, 3570] 
split level 183: [/input, 1606] 
split level 184: [/input-8, 1903] 
split level 185: [/input, 1681] 
split level 186: [/input, 2123] 
split level 187: [/input, 385] 
split level 188: [/input, 1334] 
split level 189: [/input, 3530] 
split level 190: [/input, 3428] 
split level 191: [/input, 1595] 
split level 192: [/input, 1891] 
split level 193: [/input, 1984] 
split level 194: [/input, 1487] 
split level 195: [/input, 696] 
split level 196: [/input, 3385] 
split level 197: [/input-8, 645] 
split level 198: [/input, 2633] 
split level 199: [/input, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06312179565429688
10 lb beta sum: 0.0, worst -0.06312042474746704
Time: prepare 0.0118    bound 0.1050    transfer 0.0011    finalize 0.0028    func 0.1232    
Accumulated time: func 0.2177    prepare 0.0220    bound 0.1989    transfer 0.0012    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.25270063) min lb tensor(-0.06311536)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010906219482421875 
BICCOS Cumulative time: 0.010906219482421875
Preprocessing time: 0.01017308235168457 Inference time: 0.00040149688720703125 Add cuts time: 0.00014090538024902344 Cut analysis time: 0.00019073486328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5180    set_bounds 0.0098    solve 0.1233    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5180    set_bounds 0.0098    solve 0.1233    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53]), tensor([-1.]), tensor([0]), tensor([7.90035355e-14]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53]), tensor([1.]), tensor([0]), tensor([1.65907181e-08]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06109362840652466

all verified at 2th iter
Time: prepare 0.0003    bound 0.0153    transfer 0.0001    finalize 0.0001    func 0.0159    
Accumulated time: func 0.2336    prepare 0.0224    bound 0.2142    transfer 0.0013    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.57921266555786
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.4209 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 631] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 631] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 230] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.21187735,  1.27583182, -0.23146796, -0.57322311,  0.65389627,
         -1.39956295,  0.85230488,  2.21380830,  0.78132987]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387],
         [-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89119387,  0.47919416, -0.20521069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0312 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 646] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 646] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 266] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.30793691,  4.85469532, -0.91200399,  0.07975245,  0.11433178,
          0.44498557,  0.30451035,  1.77916288,  3.32839966]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.93743134, -13.31060886,  -5.83817673,  -7.27862358,  -6.16091633,
           -7.49989176,  -7.92654562,  -7.81988096,  -9.65338612, -11.76567936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.32273960]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0729 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 638] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 638] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 291] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.04846907,  1.83894706,  1.50338137,  1.00280190,  1.39925611,
          1.18970442,  0.10379371,  0.61262095, -1.38501263]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.18911934, -11.47594929, -14.00399876, -13.58273888, -13.39752102,
          -13.68156528, -13.77247524, -12.52532673, -12.20017910,  -9.48548031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.70363903]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0434 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 583] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 583] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 186] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66228336,  2.91003036, -0.61161304, -0.37437868, -0.12838539,
          0.54327869,  1.21973610,  1.01675761,  2.96338701]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.35448074, -11.02279854,  -6.83222103,  -6.96178865,  -7.00913334,
           -7.09443521,  -7.94125366,  -8.94181538,  -9.05925179, -10.96881390],
         [ -8.35448074, -11.02279854,  -6.83222103,  -6.96178865,  -7.00913334,
           -7.09443521,  -7.94125366,  -8.94181538,  -9.05925179, -10.96881390]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12956762,  0.04734468,  0.13264656]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0335 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68456459, -32.53074646, -22.78745079, -27.68545341, -28.40427208,
         -27.83055687, -30.00589561, -28.70033264, -29.08596420, -31.81694031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [868]; unstable size 868; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 868] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 868] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 868] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 117] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35312653, 8.74417496, 4.20461988, 4.84282970, 4.24144888, 6.39423656,
         5.11291981, 5.55689526, 8.21585178]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0294 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.60622311, -13.14030361,  -7.17618370,  -8.58381081,  -7.30063725,
          -9.39536190, -10.97736740,  -8.69489574, -13.14762592, -13.82670879]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 636] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 148] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.19068098, 0.71572351, 1.81306052, 0.68747520, 2.54502153, 4.18923807,
         1.59729898, 6.44614601, 7.10734844]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0420 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -2.84328127,  -9.61974049,  -5.05914211,  -8.02449036,  -6.49527788,
          -8.10750866,  -9.04593754,  -9.49392796,  -6.18774319, -10.90580273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 499] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 152] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54959440, 1.51223147, 4.22370148, 2.84299278, 4.27301931, 5.08756065,
         5.54216433, 2.37470174, 6.85313034]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0335 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.90164661, -15.08635235,  -9.72878838,  -9.48129559,  -7.66526318,
          -8.64265442, -10.58757114,  -3.94943619, -14.45550442, -12.59689999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 635] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 635] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.91279745, 8.85579300, 4.06592464, 3.92259717, 2.47752619, 3.07655239,
         4.65876579, 8.33458710, 6.58941221]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 561] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 561] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 199] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70906806,  1.71759224, -0.59509242,  1.34410000, -0.63401103,
          1.15857661,  2.08130550,  2.03014278,  1.72439241]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.20649433, -8.83073616, -5.63355064, -7.40713882, -5.33580017,
          -7.33170795, -5.46423101, -8.16074944, -8.97980404, -8.67313671],
         [-8.20649433, -8.83073616, -5.63355064, -7.40713882, -5.33580017,
          -7.33170795, -5.46423101, -8.16074944, -8.97980404, -8.67313671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.16931963, -0.12843084]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0715 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.62970924, -15.32867241, -14.02665234, -15.90782928, -15.88710308,
         -16.84171295, -16.61499405, -15.84648132, -15.30559063, -15.92606258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [630]; unstable size 630; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 112, 1, 630] with unstable size 111 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 630] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 630] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [111]; unstable size 111; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 111] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 111] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.55479407, 0.65966964, 2.49934220, 2.45695758, 3.24221277, 3.17709970,
         2.06576133, 1.70381474, 2.33342171]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0647 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [785]; unstable size 785; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 441, 1, 785] with unstable size 440 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 785] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 785] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [440]; unstable size 440; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 440] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.74053049,  4.37037373, -0.76029533,  0.68074846,  0.98781753,
         -0.06960225,  1.50687981,  3.12951851,  4.10273933]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.52it/s]100%|██████████| 1/1 [00:00<00:00,  8.51it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.97328854, -15.64343452,  -8.67847157, -10.54068565,  -8.60878944,
          -11.21894646, -10.33001900, -11.86674881, -13.97623920, -15.42976952],
         [-11.97328854, -15.64343452,  -8.67847157, -10.54068565,  -8.60878944,
          -11.21894646, -10.33001900, -11.86674881, -13.97623920, -15.42976952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06968212, 1.72122955]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1204 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.027103424072266
alpha/beta optimization time: 1.293318271636963
initial alpha-crown bounds: tensor([[ 1.93041945,  4.51296186, -0.64870286,  0.80698407,  1.16863036,
          0.07121491,  1.61320734,  3.32261610,  4.24977207]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.64870285987854
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5246078968048
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.52456736564636
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.52454113960266
Verifying property 2 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.64870286]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
        -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.64870286]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 785
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 435
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1246
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012063980102539062
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6486997604370117
10 lb beta sum: 0.0, worst -0.6487016677856445
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0557    transfer 0.0001    finalize 0.0001    func 0.0562    
Accumulated time: func 0.0562    prepare 0.0002    bound 0.0557    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 44] 
split level 5: [/input-12, 51] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 26] 
split level 8: [/input-12, 82] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 1372] 
split level 12: [/input-8, 1058] 
split level 13: [/input-8, 1373] 
split level 14: [/input-8, 1564] 
split level 15: [/input-12, 9] 
split level 16: [/input-8, 1911] 
split level 17: [/input-8, 1356] 
split level 18: [/input-12, 21] 
split level 19: [/input-8, 1869] 
split level 20: [/input-8, 1057] 
split level 21: [/input-8, 1870] 
split level 22: [/input-8, 531] 
split level 23: [/input-8, 1878] 
split level 24: [/input-12, 64] 
split level 25: [/input-8, 1555] 
split level 26: [/input-8, 1299] 
split level 27: [/input-8, 1371] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1073] 
split level 30: [/input-8, 1066] 
split level 31: [/input-8, 532] 
split level 32: [/input-8, 1884] 
split level 33: [/input-8, 571] 
split level 34: [/input-8, 1363] 
split level 35: [/input-8, 1065] 
split level 36: [/input-8, 533] 
split level 37: [/input-8, 1563] 
split level 38: [/input-8, 523] 
split level 39: [/input-8, 1565] 
split level 40: [/input-8, 530] 
split level 41: [/input-8, 1894] 
split level 42: [/input-8, 1307] 
split level 43: [/input-8, 1074] 
split level 44: [/input-8, 682] 
split level 45: [/input-8, 1902] 
split level 46: [/input-8, 1883] 
split level 47: [/input-8, 1886] 
split level 48: [/input-8, 677] 
split level 49: [/input-8, 1354] 
split level 50: [/input-8, 1355] 
split level 51: [/input-8, 1549] 
split level 52: [/input-8, 2020] 
split level 53: [/input-8, 1381] 
split level 54: [/input-8, 666] 
split level 55: [/input-8, 1548] 
split level 56: [/input-8, 686] 
split level 57: [/input-8, 1297] 
split level 58: [/input-8, 642] 
split level 59: [/input-8, 460] 
split level 60: [/input-8, 1760] 
split level 61: [/input-8, 668] 
split level 62: [/input-8, 846] 
split level 63: [/input-8, 573] 
split level 64: [/input-8, 1361] 
split level 65: [/input-8, 1021] 
split level 66: [/input-8, 891] 
split level 67: [/input-8, 1083] 
split level 68: [/input-8, 681] 
split level 69: [/input-8, 1301] 
split level 70: [/input-8, 1915] 
split level 71: [/input-8, 1062] 
split level 72: [/input-8, 1077] 
split level 73: [/input-8, 684] 
split level 74: [/input-8, 1881] 
split level 75: [/input-8, 700] 
split level 76: [/input-8, 1877] 
split level 77: [/input-8, 1506] 
split level 78: [/input-8, 1369] 
split level 79: [/input-8, 1558] 
split level 80: [/input, 4006] 
split level 81: [/input-12, 28] 
split level 82: [/input-8, 1289] 
split level 83: [/input-8, 1143] 
split level 84: [/input-8, 546] 
split level 85: [/input-8, 860] 
split level 86: [/input-8, 1509] 
split level 87: [/input, 183] 
split level 88: [/input-8, 665] 
split level 89: [/input-8, 1505] 
split level 90: [/input-8, 1347] 
split level 91: [/input-8, 854] 
split level 92: [/input, 4003] 
split level 93: [/input-8, 1580] 
split level 94: [/input, 3273] 
split level 95: [/input, 390] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 491] 
split level 98: [/input, 3988] 
split level 99: [/input-8, 990] 
split level 100: [/input-8, 1310] 
split level 101: [/input-8, 1876] 
split level 102: [/input-8, 83] 
split level 103: [/input-8, 673] 
split level 104: [/input-8, 1597] 
split level 105: [/input-8, 1339] 
split level 106: [/input-8, 2021] 
split level 107: [/input-8, 1836] 
split level 108: [/input-8, 884] 
split level 109: [/input-8, 517] 
split level 110: [/input, 4043] 
split level 111: [/input-8, 545] 
split level 112: [/input-8, 570] 
split level 113: [/input, 426] 
split level 114: [/input, 1188] 
split level 115: [/input, 2757] 
split level 116: [/input, 199] 
split level 117: [/input, 3236] 
split level 118: [/input-8, 1752] 
split level 119: [/input-8, 987] 
split level 120: [/input-12, 53] 
split level 121: [/input-8, 1547] 
split level 122: [/input, 4053] 
split level 123: [/input-8, 1437] 
split level 124: [/input-8, 515] 
split level 125: [/input-8, 1940] 
split level 126: [/input, 3223] 
split level 127: [/input-8, 947] 
split level 128: [/input-8, 1405] 
split level 129: [/input, 4044] 
split level 130: [/input-8, 917] 
split level 131: [/input-8, 1540] 
split level 132: [/input, 2617] 
split level 133: [/input-8, 1819] 
split level 134: [/input-8, 1402] 
split level 135: [/input-8, 1546] 
split level 136: [/input, 2517] 
split level 137: [/input-8, 1545] 
split level 138: [/input-8, 694] 
split level 139: [/input, 1386] 
split level 140: [/input-8, 988] 
split level 141: [/input, 387] 
split level 142: [/input, 3468] 
split level 143: [/input, 583] 
split level 144: [/input, 4055] 
split level 145: [/input, 3304] 
split level 146: [/input, 4072] 
split level 147: [/input-8, 514] 
split level 148: [/input, 456] 
split level 149: [/input, 2533] 
split level 150: [/input-8, 276] 
split level 151: [/input-8, 883] 
split level 152: [/input, 3205] 
split level 153: [/input-8, 1281] 
split level 154: [/input, 3243] 
split level 155: [/input-8, 1318] 
split level 156: [/input-8, 952] 
split level 157: [/input, 3230] 
split level 158: [/input-8, 1873] 
split level 159: [/input, 4054] 
split level 160: [/input, 3290] 
split level 161: [/input, 2461] 
split level 162: [/input-8, 1541] 
split level 163: [/input, 3241] 
split level 164: [/input, 3228] 
split level 165: [/input, 3255] 
split level 166: [/input-8, 2028] 
split level 167: [/input-8, 1775] 
split level 168: [/input-8, 998] 
split level 169: [/input-8, 1017] 
split level 170: [/input-8, 1539] 
split level 171: [/input-8, 569] 
split level 172: [/input, 3218] 
split level 173: [/input, 2493] 
split level 174: [/input, 2467] 
split level 175: [/input, 4002] 
split level 176: [/input, 2867] 
split level 177: [/input, 4035] 
split level 178: [/input-8, 1559] 
split level 179: [/input-8, 552] 
split level 180: [/input, 2348] 
split level 181: [/input-8, 98] 
split level 182: [/input, 3286] 
split level 183: [/input-8, 1524] 
split level 184: [/input-8, 2013] 
split level 185: [/input, 2883] 
split level 186: [/input-8, 467] 
split level 187: [/input-8, 985] 
split level 188: [/input, 2478] 
split level 189: [/input, 3246] 
split level 190: [/input-8, 1475] 
split level 191: [/input-8, 836] 
split level 192: [/input-8, 1439] 
split level 193: [/input-8, 461] 
split level 194: [/input, 4029] 
split level 195: [/input, 2734] 
split level 196: [/input-8, 558] 
split level 197: [/input, 2885] 
split level 198: [/input, 649] 
split level 199: [/input, 2543] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6486304402351379
10 lb beta sum: 0.0, worst -0.6486299633979797
Time: prepare 0.0120    bound 0.1048    transfer 0.0024    finalize 0.0032    func 0.1250    
Accumulated time: func 0.1812    prepare 0.0225    bound 0.1605    transfer 0.0025    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01551718) min lb tensor(-0.64861727)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010109663009643555 
BICCOS Cumulative time: 0.010109663009643555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.63266 (1), -0.63181 (1), -0.63171 (1), -0.63153 (1), -0.63097 (1), -0.63057 (1), -0.62999 (1), -0.62990 (1), -0.62917 (1), -0.62872 (1), -0.62614 (1), -0.62477 (1), -0.62431 (1), -0.62339 (1), -0.62303 (1), -0.62265 (1), -0.62257 (1), -0.62230 (1), -0.62227 (1), -0.62135 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5238    set_bounds 0.0096    solve 0.1251    add 0.0831    
Accumulated time: pickout 0.0004    decision 0.5238    set_bounds 0.0096    solve 0.1251    add 0.0831    
Current (lb-rhs): -0.6326590776443481
50 domains visited
Cumulative time: 0.8225457668304443

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 72] [/input-12, 26] 
split level 2: [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6041440963745117
10 lb beta sum: 0.0, worst -0.6032806634902954
Time: prepare 0.0123    bound 0.1013    transfer 0.0008    finalize 0.0022    func 0.1192    
Accumulated time: func 0.3004    prepare 0.0350    bound 0.2618    transfer 0.0032    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.36800933) min lb tensor(-0.60306144)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.016000032424926758 
BICCOS Cumulative time: 0.026109695434570312
Preprocessing time: 0.012015104293823242 Inference time: 0.002376556396484375 Add cuts time: 0.0012805461883544922 Cut analysis time: 0.00032782554626464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45763 (2), -0.45667 (2), -0.45442 (2), -0.45375 (2), -0.45297 (2), -0.45240 (2), -0.45240 (2), -0.45211 (2), -0.44602 (2), -0.44595 (2), -0.43917 (2), -0.43637 (2), -0.43430 (2), -0.43303 (2), -0.43122 (2), -0.42882 (2), -0.42760 (2), -0.42280 (2), -0.42162 (2), -0.41747 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0201    set_bounds 0.0136    solve 0.1193    add 0.0980    
Accumulated time: pickout 0.0017    decision 0.5440    set_bounds 0.0232    solve 0.2444    add 0.1811    
Current (lb-rhs): -0.4576277732849121
100 domains visited
Cumulative time: 1.0910224914550781

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 72] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4300527572631836
10 lb beta sum: 0.614547848701477, worst -0.42935067415237427
Time: prepare 0.0061    bound 0.1252    transfer 0.0008    finalize 0.0032    func 0.1385    
Accumulated time: func 0.4389    prepare 0.0414    bound 0.3870    transfer 0.0040    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.29501939) min lb tensor(-0.42451519)
Number of Verified Splits: 67 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01896071434020996 
BICCOS Cumulative time: 0.04507040977478027
Preprocessing time: 0.013361454010009766 Inference time: 0.0033152103424072266 Add cuts time: 0.0018725395202636719 Cut analysis time: 0.0004115104675292969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17833 (3), -0.17712 (3), -0.17582 (3), -0.17505 (3), -0.17439 (3), -0.16764 (3), -0.16761 (3), -0.16675 (3), -0.16650 (3), -0.16602 (3), -0.15966 (3), -0.15853 (3), -0.15840 (3), -0.15837 (3), -0.15830 (3), -0.15744 (3), -0.13857 (3), -0.13778 (3), -0.13701 (3), -0.13665 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0200    set_bounds 0.0157    solve 0.1387    add 0.0951    
Accumulated time: pickout 0.0027    decision 0.5639    set_bounds 0.0389    solve 0.3830    add 0.2762    
Current (lb-rhs): -0.17833101749420166
150 domains visited
Cumulative time: 1.3807532787322998

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19959455728530884
10 lb beta sum: 0.7670318484306335, worst -0.1797357201576233
Time: prepare 0.0058    bound 0.1230    transfer 0.0008    finalize 0.0020    func 0.1343    
Accumulated time: func 0.5732    prepare 0.0475    bound 0.5100    transfer 0.0048    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.29197884) min lb tensor(-0.17422432)
Number of Verified Splits: 194 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02745962142944336 
BICCOS Cumulative time: 0.07253003120422363
Preprocessing time: 0.012128591537475586 Inference time: 0.011523723602294922 Add cuts time: 0.003328084945678711 Cut analysis time: 0.0004792213439941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10330 (4), -0.10092 (4), -0.09934 (4), -0.09898 (4), -0.09885 (4), -0.09863 (4), -0.09858 (4), -0.09853 (4), -0.09691 (4), -0.09688 (4), -0.09657 (4), -0.09622 (4), -0.09587 (4), -0.09449 (4), -0.09447 (4), -0.09407 (4), -0.09327 (4), -0.09163 (4), -0.09159 (4), -0.09132 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0161    solve 0.1345    add 0.2661    
Accumulated time: pickout 0.0037    decision 0.5836    set_bounds 0.0550    solve 0.5175    add 0.5423    
Current (lb-rhs): -0.10330307483673096
200 domains visited
Cumulative time: 1.8458504676818848

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12425732612609863
10 lb beta sum: 0.88362717628479, worst -0.1075330376625061
Time: prepare 0.0058    bound 0.1225    transfer 0.0008    finalize 0.0027    func 0.1345    
Accumulated time: func 0.7077    prepare 0.0535    bound 0.6325    transfer 0.0055    finalize 0.0135    
all_split False
======================Cut inference begins======================
max lb tensor(0.31959510) min lb tensor(-0.10136235)
Number of Verified Splits: 178 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 5
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.027688980102539062 
BICCOS Cumulative time: 0.1002190113067627
Preprocessing time: 0.013027191162109375 Inference time: 0.010865926742553711 Add cuts time: 0.0028510093688964844 Cut analysis time: 0.0009448528289794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02888 (5), -0.02862 (5), -0.02831 (5), -0.02819 (5), -0.02778 (5), -0.02774 (5), -0.02760 (5), -0.02751 (5), -0.02725 (5), -0.02693 (5), -0.02669 (5), -0.02584 (5), -0.02566 (5), -0.02486 (5), -0.02465 (5), -0.02439 (5), -0.02425 (5), -0.02348 (5), -0.02277 (5), -0.02169 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0160    solve 0.1347    add 0.1079    
Accumulated time: pickout 0.0048    decision 0.6037    set_bounds 0.0710    solve 0.6522    add 0.6502    
Current (lb-rhs): -0.028878450393676758
250 domains visited
Cumulative time: 2.1535611152648926

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.61180244e-11, 1.11574933e-01, 7.56634921e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.11574933e-01, 1.83466420e-01, 7.14199990e-02,
        3.29055488e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.11574933e-01, 1.83466420e-01, 7.14199990e-02,
        1.11299027e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.11574933e-01, 1.83466420e-01, 6.28498048e-02,
        3.14733684e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.11574933e-01, 1.83466420e-01, 6.28498048e-02,
        1.05633605e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.09280273e-01, 7.20031708e-02,
        3.37688029e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.09280273e-01, 7.20031708e-02,
        2.29422911e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.09280273e-01, 3.94459218e-02,
        3.48723412e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.09280273e-01, 3.94459218e-02,
        6.47775969e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.01475880e-01, 7.15672225e-02,
        3.31104815e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.01475880e-01, 7.15672225e-02,
        3.93431028e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.01475880e-01, 4.20072526e-02,
        3.34315896e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.61180244e-11, 1.77105531e-01, 1.01475880e-01, 4.20072526e-02,
        6.70169434e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28]), tensor([1.]), tensor([0]), tensor([6.93175517e-11]), tensor([0]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6479569673538208
10 lb beta sum: 0.48991328477859497, worst -0.6125630140304565
Time: prepare 0.0006    bound 0.1177    transfer 0.0002    finalize 0.0004    func 0.1191    
Accumulated time: func 0.8268    prepare 0.0541    bound 0.7503    transfer 0.0058    finalize 0.0139    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 51] [/input-12, 44] [/input-12, 44] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 44] [/input-12, 51] [/input-12, 51] [/input-12, 1] 
split level 2: [/input-12, 26] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] 
split level 3: [/input-12, 82] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 72] 
split level 4: [/input-12, 93] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0258398056030273, worst -0.3657097816467285
10 lb beta sum: 1.0260599851608276, worst -0.36419665813446045
Time: prepare 0.0123    bound 0.1232    transfer 0.0006    finalize 0.0022    func 0.1401    
Accumulated time: func 0.9669    prepare 0.0667    bound 0.8735    transfer 0.0064    finalize 0.0161    
all_split False
======================Cut inference begins======================
max lb tensor(0.34318638) min lb tensor(-0.36353791)
Number of Verified Splits: 232 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.001375436782837, worst -0.47529780864715576
10 lb beta sum: 1.2999365329742432, worst -0.15140610933303833
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 0.27990031242370605 
BICCOS Cumulative time: 0.38011932373046875
Preprocessing time: 0.007456064224243164 Inference time: 0.26311564445495605 Add cuts time: 0.007421731948852539 Cut analysis time: 0.0019068717956542969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36354 (5), -0.36271 (5), -0.35309 (5), -0.35298 (5), -0.32920 (5), -0.32398 (5), -0.32216 (5), -0.31578 (5), -0.30802 (5), -0.30209 (5), -0.29779 (5), -0.29043 (5), -0.27680 (5), -0.26871 (5), -0.26540 (5), -0.24024 (5), -0.07496 (5), -0.07129 (5), -0.06359 (5), -0.06024 (5), 
Length of domains: 24
Time: pickout 0.0006    decision 0.0176    set_bounds 0.0200    solve 0.1402    add 0.0012    
Accumulated time: pickout 0.0054    decision 0.6213    set_bounds 0.0910    solve 0.7924    add 0.6514    
Current (lb-rhs): -0.36353790760040283
274 domains visited
Cumulative time: 2.766571044921875

BaB round 2
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 1: [/input-12, 51] [/input-8, 1057] [/input-12, 51] [/input-12, 51] [/input-8, 1058] [/input-12, 51] [/input-12, 51] [/input-8, 1058] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 93] [/input-8, 1066] [/input-12, 93] [/input-12, 93] [/input-8, 1057] [/input-12, 93] [/input-12, 93] [/input-8, 1057] [/input-12, 93] [/input-12, 93] 
split level 3: [/input-8, 1057] [/input-8, 1555] [/input-8, 1057] [/input-8, 1057] [/input-8, 1066] [/input-8, 1057] [/input-8, 1555] [/input-8, 1066] [/input-8, 1057] [/input-12, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2868533432483673
10 lb beta sum: 0.5786423087120056, worst -0.279263973236084
Time: prepare 0.0082    bound 0.1425    transfer 0.0008    finalize 0.0037    func 0.1578    
Accumulated time: func 1.1247    prepare 0.0752    bound 1.0160    transfer 0.0072    finalize 0.0197    
all_split False
======================Cut inference begins======================
max lb tensor(0.21709085) min lb tensor(-0.27885419)
Number of Verified Splits: 196 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.034571170806884766 
BICCOS Cumulative time: 0.4146904945373535
Preprocessing time: 0.011766672134399414 Inference time: 0.01913928985595703 Add cuts time: 0.003170013427734375 Cut analysis time: 0.0004951953887939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27885 (9), -0.27578 (9), -0.27268 (9), -0.27226 (9), -0.27133 (9), -0.27000 (9), -0.26817 (9), -0.26286 (9), -0.26258 (9), -0.26075 (9), -0.26051 (9), -0.25912 (9), -0.25043 (9), -0.24927 (9), -0.24376 (9), -0.23951 (9), -0.23935 (9), -0.23730 (9), -0.23664 (9), -0.23470 (9), 
Length of domains: 188
Time: pickout 0.0014    decision 0.0198    set_bounds 0.0295    solve 0.1579    add 0.0020    
Accumulated time: pickout 0.0068    decision 0.6411    set_bounds 0.1205    solve 0.9503    add 0.6534    
Current (lb-rhs): -0.2788541913032532
462 domains visited
Cumulative time: 3.0136237144470215

BaB round 3
batch: 188
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1058] [/input-12, 9] [/input-8, 1058] [/input-8, 1057] [/input-12, 9] [/input-8, 1057] [/input-8, 1057] [/input-8, 1058] [/input-8, 1058] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2812820076942444
10 lb beta sum: 0.7556444406509399, worst -0.2753778100013733
Time: prepare 0.0081    bound 0.1255    transfer 0.0012    finalize 0.0038    func 0.1412    
Accumulated time: func 1.2659    prepare 0.0835    bound 1.1415    transfer 0.0084    finalize 0.0236    
all_split False
======================Cut inference begins======================
max lb tensor(0.63915741) min lb tensor(-0.27518803)
Number of Verified Splits: 68 of 376
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.019544601440429688 
BICCOS Cumulative time: 0.4342350959777832
Preprocessing time: 0.011362552642822266 Inference time: 0.006200313568115234 Add cuts time: 0.0009377002716064453 Cut analysis time: 0.0010440349578857422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27519 (10), -0.27391 (10), -0.26774 (10), -0.26721 (10), -0.26692 (10), -0.26531 (10), -0.26313 (10), -0.25856 (10), -0.25739 (10), -0.25614 (10), -0.25531 (10), -0.25470 (10), -0.24585 (10), -0.24395 (10), -0.23774 (10), -0.23414 (10), -0.23377 (10), -0.23343 (10), -0.23339 (10), -0.23326 (10), 
Length of domains: 308
Time: pickout 0.0033    decision 0.0204    set_bounds 0.0165    solve 0.1414    add 0.0043    
Accumulated time: pickout 0.0101    decision 0.6615    set_bounds 0.1371    solve 1.0917    add 0.6577    
Current (lb-rhs): -0.27518802881240845
770 domains visited
Cumulative time: 3.2200074195861816

BaB round 4
batch: 308
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 9] [/input-12, 9] [/input-8, 1058] [/input-12, 9] [/input-12, 9] [/input-8, 1299] [/input-8, 1555] [/input-8, 1299] [/input-12, 9] [/input-12, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9235310554504395, worst -0.2739056348800659
10 lb beta sum: 0.9313501119613647, worst -0.27368903160095215
Time: prepare 0.0270    bound 0.1364    transfer 0.0031    finalize 0.0042    func 0.1757    
Accumulated time: func 1.4416    prepare 0.1107    bound 1.2779    transfer 0.0115    finalize 0.0278    
all_split False
======================Cut inference begins======================
max lb tensor(0.21939361) min lb tensor(-0.27355385)
Number of Verified Splits: 166 of 616
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.04100799560546875 
BICCOS Cumulative time: 0.47524309158325195
Preprocessing time: 0.01855754852294922 Inference time: 0.0197446346282959 Add cuts time: 0.002232789993286133 Cut analysis time: 0.0004730224609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27355 (11), -0.27100 (11), -0.26727 (11), -0.26650 (11), -0.26497 (11), -0.26275 (11), -0.25825 (11), -0.25778 (11), -0.25701 (11), -0.25465 (11), -0.25415 (11), -0.24689 (11), -0.24561 (11), -0.24351 (11), -0.23708 (11), -0.23342 (11), -0.23277 (11), -0.23253 (11), -0.23127 (11), -0.22993 (11), 
Length of domains: 450
Time: pickout 0.0043    decision 0.0285    set_bounds 0.0267    solve 0.1759    add 0.0050    
Accumulated time: pickout 0.0144    decision 0.6899    set_bounds 0.1638    solve 1.2676    add 0.6627    
Current (lb-rhs): -0.27355384826660156
1220 domains visited
Cumulative time: 3.503268241882324

BaB round 5
batch: 450
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1555] [/input-8, 1299] [/input-8, 1555] [/input-8, 1299] [/input-8, 1058] [/input-8, 1299] [/input-8, 1555] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26660284399986267
10 lb beta sum: 1.5173579454421997, worst -0.26146334409713745
Time: prepare 0.0196    bound 0.1457    transfer 0.0026    finalize 0.1604    func 0.3345    
Accumulated time: func 1.7761    prepare 0.1306    bound 1.4236    transfer 0.0141    finalize 0.1882    
all_split False
======================Cut inference begins======================
max lb tensor(0.94186902) min lb tensor(-0.26140350)
Number of Verified Splits: 725 of 900
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.10872554779052734 
BICCOS Cumulative time: 0.5839686393737793
Preprocessing time: 0.027680158615112305 Inference time: 0.07319951057434082 Add cuts time: 0.007214069366455078 Cut analysis time: 0.0006318092346191406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26140 (12), -0.26122 (12), -0.25370 (12), -0.25287 (12), -0.25206 (12), -0.25085 (12), -0.24487 (12), -0.24280 (12), -0.23783 (12), -0.23723 (12), -0.23123 (12), -0.22429 (12), -0.22018 (12), -0.22012 (12), -0.21970 (12), -0.21949 (12), -0.21921 (12), -0.21891 (12), -0.21862 (12), -0.21664 (12), 
Length of domains: 175
Time: pickout 0.0074    decision 0.0379    set_bounds 0.0426    solve 0.3347    add 0.0022    
Accumulated time: pickout 0.0218    decision 0.7278    set_bounds 0.2064    solve 1.6023    add 0.6649    
Current (lb-rhs): -0.26140350103378296
1395 domains visited
Cumulative time: 4.0426952838897705

BaB round 6
batch: 175
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1299] [/input-12, 68] [/input-8, 1299] [/input-8, 1299] [/input-12, 68] [/input-8, 1299] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2609025537967682
10 lb beta sum: 1.7458328008651733, worst -0.25123465061187744
Time: prepare 0.0072    bound 0.1450    transfer 0.0007    finalize 0.0027    func 0.1581    
Accumulated time: func 1.9342    prepare 0.1380    bound 1.5686    transfer 0.0148    finalize 0.1909    
all_split False
======================Cut inference begins======================
max lb tensor(0.72909403) min lb tensor(-0.25112176)
Number of Verified Splits: 116 of 350
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.02692866325378418 
BICCOS Cumulative time: 0.6108973026275635
Preprocessing time: 0.01099848747253418 Inference time: 0.013697147369384766 Add cuts time: 0.0017638206481933594 Cut analysis time: 0.000469207763671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25112 (13), -0.24534 (13), -0.24513 (13), -0.24195 (13), -0.24094 (13), -0.24081 (13), -0.23629 (13), -0.23441 (13), -0.23336 (13), -0.23275 (13), -0.22999 (13), -0.22767 (13), -0.22754 (13), -0.22249 (13), -0.22230 (13), -0.22140 (13), -0.21896 (13), -0.21381 (13), -0.20944 (13), -0.20938 (13), 
Length of domains: 234
Time: pickout 0.0032    decision 0.0216    set_bounds 0.0153    solve 0.1594    add 0.0038    
Accumulated time: pickout 0.0250    decision 0.7494    set_bounds 0.2217    solve 1.7617    add 0.6687    
Current (lb-rhs): -0.25112175941467285
1629 domains visited
Cumulative time: 4.274039030075073

BaB round 7
batch: 234
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-8, 1066] [/input-12, 68] [/input-12, 68] [/input-8, 1356] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-8, 1299] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9552594423294067, worst -0.24601459503173828
10 lb beta sum: 1.9552594423294067, worst -0.24590539932250977
Time: prepare 0.0203    bound 0.1462    transfer 0.0010    finalize 0.0035    func 0.1743    
Accumulated time: func 2.1085    prepare 0.1586    bound 1.7148    transfer 0.0158    finalize 0.1944    
all_split False
======================Cut inference begins======================
max lb tensor(0.21799779) min lb tensor(-0.24586511)
Number of Verified Splits: 18 of 468
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.017589092254638672 
BICCOS Cumulative time: 0.6284863948822021
Preprocessing time: 0.013789892196655273 Inference time: 0.002161741256713867 Add cuts time: 0.000507354736328125 Cut analysis time: 0.0011301040649414062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24587 (14), -0.24503 (14), -0.23995 (14), -0.23818 (14), -0.23676 (14), -0.23571 (14), -0.23522 (14), -0.23459 (14), -0.23428 (14), -0.23287 (14), -0.23102 (14), -0.22869 (14), -0.22771 (14), -0.22767 (14), -0.22754 (14), -0.22753 (14), -0.22613 (14), -0.22500 (14), -0.22403 (14), -0.22230 (14), 
Length of domains: 450
Time: pickout 0.0041    decision 0.0240    set_bounds 0.0203    solve 0.1745    add 0.0072    
Accumulated time: pickout 0.0291    decision 0.7734    set_bounds 0.2419    solve 1.9361    add 0.6759    
Current (lb-rhs): -0.2458651065826416
2079 domains visited
Cumulative time: 4.5226218700408936

BaB round 8
batch: 450
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1356] [/input-8, 1066] [/input-8, 1363] [/input-8, 1356] [/input-8, 1307] [/input-8, 1307] [/input-8, 666] [/input-8, 1555] [/input-8, 1356] [/input-8, 1299] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9417599439620972, worst -0.24215972423553467
10 lb beta sum: 1.9417599439620972, worst -0.2420409917831421
Time: prepare 0.0394    bound 0.1396    transfer 0.0014    finalize 0.0040    func 0.1903    
Accumulated time: func 2.2987    prepare 0.1982    bound 1.8543    transfer 0.0172    finalize 0.1984    
all_split False
======================Cut inference begins======================
max lb tensor(-4.11868095e-05) min lb tensor(-0.24200356)
Number of Verified Splits: 0 of 900
No cut inferred: All or none verified.
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.02794027328491211 
BICCOS Cumulative time: 0.6564266681671143
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24200 (15), -0.24160 (15), -0.23600 (15), -0.23566 (15), -0.23514 (15), -0.23437 (15), -0.23293 (15), -0.23083 (15), -0.23041 (15), -0.22938 (15), -0.22806 (15), -0.22767 (15), -0.22754 (15), -0.22750 (15), -0.22707 (15), -0.22705 (15), -0.22449 (15), -0.22439 (15), -0.22395 (15), -0.22389 (15), 
Length of domains: 900
Time: pickout 0.0079    decision 0.0337    set_bounds 0.0406    solve 0.1906    add 0.0056    
Accumulated time: pickout 0.0370    decision 0.8072    set_bounds 0.2825    solve 2.1267    add 0.6814    
Current (lb-rhs): -0.24200356006622314
2979 domains visited
Cumulative time: 4.830054521560669

BaB round 9
batch: 900
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 1363] [/input-8, 1066] [/input-8, 532] [/input-8, 666] [/input-8, 1555] [/input-8, 1307] [/input-8, 666] [/input-8, 532] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9417600631713867, worst -0.2370765209197998
10 lb beta sum: 1.9417600631713867, worst -0.23704147338867188
Time: prepare 0.0770    bound 0.1691    transfer 0.0152    finalize 0.0087    func 0.2836    
Accumulated time: func 2.5823    prepare 0.2755    bound 2.0234    transfer 0.0324    finalize 0.2071    
all_split False
======================Cut inference begins======================
max lb tensor(0.00588989) min lb tensor(-0.23701060)
Number of Verified Splits: 4 of 1800
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.058280229568481445 
BICCOS Cumulative time: 0.7147068977355957
Preprocessing time: 0.056552886962890625 Inference time: 0.0007085800170898438 Add cuts time: 0.00042057037353515625 Cut analysis time: 0.0005981922149658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23701 (16), -0.23564 (16), -0.23515 (16), -0.23512 (16), -0.23223 (16), -0.23119 (16), -0.23003 (16), -0.22987 (16), -0.22802 (16), -0.22796 (16), -0.22793 (16), -0.22767 (16), -0.22754 (16), -0.22701 (16), -0.22688 (16), -0.22522 (16), -0.22467 (16), -0.22432 (16), -0.22394 (16), -0.22306 (16), 
Length of domains: 1796
Time: pickout 0.0125    decision 0.0628    set_bounds 0.0791    solve 0.2839    add 0.0086    
Accumulated time: pickout 0.0495    decision 0.8699    set_bounds 0.3616    solve 2.4106    add 0.6900    
Current (lb-rhs): -0.23701059818267822
4775 domains visited
Cumulative time: 5.337191820144653

BaB round 10
batch: 1796
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 533] [/input-8, 533] [/input-8, 1363] [/input-8, 1363] [/input-8, 1564] [/input-8, 1363] [/input-8, 1564] [/input-8, 1363] [/input-8, 666] 
cut re-enabled after branching node selection
0 lb beta sum: 1.940934658050537, worst -0.2316220998764038
10 lb beta sum: 1.940934658050537, worst -0.2315387725830078
Time: prepare 0.1590    bound 0.2670    transfer 0.0176    finalize 0.0205    func 0.4878    
Accumulated time: func 3.0701    prepare 0.4348    bound 2.2904    transfer 0.0499    finalize 0.2276    
all_split False
======================Cut inference begins======================
max lb tensor(0.01081109) min lb tensor(-0.23152065)
Number of Verified Splits: 24 of 3592
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.11844444274902344 
BICCOS Cumulative time: 0.8331513404846191
Preprocessing time: 0.11308073997497559 Inference time: 0.003541231155395508 Add cuts time: 0.0012750625610351562 Cut analysis time: 0.0005474090576171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23152 (17), -0.23135 (17), -0.23078 (17), -0.23043 (17), -0.22804 (17), -0.22656 (17), -0.22608 (17), -0.22498 (17), -0.22451 (17), -0.22407 (17), -0.22378 (17), -0.22346 (17), -0.22304 (17), -0.22238 (17), -0.22226 (17), -0.22170 (17), -0.22140 (17), -0.22016 (17), -0.21997 (17), -0.21962 (17), 
Length of domains: 3568
Time: pickout 0.0261    decision 0.1101    set_bounds 0.3461    solve 0.4886    add 0.0255    
Accumulated time: pickout 0.0756    decision 0.9800    set_bounds 0.7077    solve 2.8992    add 0.7156    
Current (lb-rhs): -0.2315206527709961
8343 domains visited
Cumulative time: 6.456485748291016

BaB round 11
batch: 3568
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 532] [/input-8, 532] [/input-8, 533] [/input-8, 1356] [/input-8, 1363] [/input-8, 1356] [/input-8, 1363] [/input-8, 533] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9388303756713867, worst -0.226027250289917
10 lb beta sum: 1.9388303756713867, worst -0.2259218692779541
Time: prepare 0.3133    bound 0.4547    transfer 0.0523    finalize 0.0337    func 0.9024    
Accumulated time: func 3.9726    prepare 0.7484    bound 2.7451    transfer 0.1022    finalize 0.2613    
all_split False
======================Cut inference begins======================
max lb tensor(0.01735878) min lb tensor(-0.22586370)
Number of Verified Splits: 121 of 7136
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.25195956230163574 
BICCOS Cumulative time: 1.0851109027862549
Preprocessing time: 0.2223200798034668 Inference time: 0.026336669921875 Add cuts time: 0.0026702880859375 Cut analysis time: 0.0006325244903564453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22586 (18), -0.22555 (18), -0.22527 (18), -0.22476 (18), -0.22116 (18), -0.22082 (18), -0.21998 (18), -0.21966 (18), -0.21947 (18), -0.21936 (18), -0.21886 (18), -0.21886 (18), -0.21865 (18), -0.21819 (18), -0.21814 (18), -0.21805 (18), -0.21773 (18), -0.21751 (18), -0.21712 (18), -0.21693 (18), 
Length of domains: 7015
Time: pickout 0.0479    decision 0.2075    set_bounds 0.4950    solve 0.9039    add 0.0378    
Accumulated time: pickout 0.1235    decision 1.1876    set_bounds 1.2027    solve 3.8031    add 0.7534    
Current (lb-rhs): -0.22586369514465332
15358 domains visited
Cumulative time: 8.409979820251465

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1307] [/input-8, 1886] [/input-8, 1886] [/input-8, 1886] [/input-8, 1555] [/input-8, 682] [/input-8, 1555] [/input-8, 1307] [/input-8, 1307] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.930330753326416, worst -0.22081315517425537
10 lb beta sum: 1.930330753326416, worst -0.2207319736480713
Time: prepare 0.3593    bound 0.5067    transfer 0.0354    finalize 0.0423    func 1.1925    
Accumulated time: func 5.1651    prepare 1.1081    bound 3.2519    transfer 0.1376    finalize 0.3036    
all_split False
======================Cut inference begins======================
max lb tensor(0.01927876) min lb tensor(-0.22068763)
Number of Verified Splits: 216 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.315932035446167 
BICCOS Cumulative time: 1.4010429382324219
Preprocessing time: 0.26046061515808105 Inference time: 0.0445559024810791 Add cuts time: 0.01021575927734375 Cut analysis time: 0.0006997585296630859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22082 (18), -0.22069 (19), -0.21968 (19), -0.21911 (19), -0.21886 (18), -0.21878 (19), -0.21814 (18), -0.21805 (18), -0.21750 (19), -0.21727 (19), -0.21638 (19), -0.21540 (18), -0.21527 (19), -0.21444 (19), -0.21432 (19), -0.21399 (19), -0.21386 (19), -0.21372 (19), -0.21371 (19), -0.21302 (18), 
Length of domains: 10895
Time: pickout 0.0552    decision 0.4421    set_bounds 0.3786    solve 1.1947    add 0.0693    
Accumulated time: pickout 0.1786    decision 1.6297    set_bounds 1.5813    solve 4.9978    add 0.8227    
Current (lb-rhs): -0.22082054615020752
23334 domains visited
current_vram/total_varm: 13.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.879209041595459

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1548] [/input-8, 531] [/input-8, 682] [/input-8, 1548] [/input-8, 532] [/input-8, 533] [/input-8, 1548] [/input-8, 1363] [/input-8, 682] [/input-8, 532] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9280660152435303, worst -0.21749532222747803
10 lb beta sum: 1.9280660152435303, worst -0.2174825668334961
Time: prepare 0.9656    bound 0.9403    transfer 0.0620    finalize 0.0912    func 2.1679    
Accumulated time: func 7.3330    prepare 2.0741    bound 4.1921    transfer 0.1996    finalize 0.3948    
all_split False
======================Cut inference begins======================
max lb tensor(0.01856279) min lb tensor(-0.21746707)
Number of Verified Splits: 539 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.6623773574829102 
BICCOS Cumulative time: 2.063420295715332
Preprocessing time: 0.5338535308837891 Inference time: 0.11123466491699219 Add cuts time: 0.016622304916381836 Cut analysis time: 0.0006668567657470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22069 (19), -0.21747 (20), -0.21638 (19), -0.21530 (19), -0.21527 (19), -0.21416 (20), -0.21399 (19), -0.21365 (20), -0.21346 (20), -0.21305 (19), -0.21299 (20), -0.21253 (19), -0.21187 (19), -0.21178 (20), -0.21175 (19), -0.21161 (19), -0.21155 (20), -0.21109 (20), -0.21104 (20), -0.21026 (20), 
Length of domains: 18548
Time: pickout 0.1206    decision 0.4486    set_bounds 0.9790    solve 2.1705    add 0.0959    
Accumulated time: pickout 0.2993    decision 2.0783    set_bounds 2.5603    solve 7.1683    add 0.9186    
Current (lb-rhs): -0.2206876277923584
39179 domains visited
current_vram/total_varm: 20.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 15.38516616821289

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1548] [/input-8, 1307] [/input-8, 533] [/input-8, 1066] [/input-8, 1355] [/input-8, 1564] [/input-8, 1307] [/input-8, 533] [/input-8, 682] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9227111339569092, worst -0.2206876277923584
10 lb beta sum: 1.9227111339569092, worst -0.22065651416778564
Time: prepare 1.4763    bound 1.8060    transfer 0.1592    finalize 0.2208    func 4.2329    
Accumulated time: func 11.5659    prepare 3.5509    bound 5.9981    transfer 0.3588    finalize 0.6155    
all_split False
======================Cut inference begins======================
max lb tensor(0.02011323) min lb tensor(-0.22062910)
Number of Verified Splits: 1402 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 1.3912725448608398 
BICCOS Cumulative time: 3.454692840576172
Preprocessing time: 1.0606756210327148 Inference time: 0.3035542964935303 Add cuts time: 0.026300907135009766 Cut analysis time: 0.0007417201995849609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22063 (20), -0.21507 (21), -0.21393 (20), -0.21168 (20), -0.21155 (20), -0.21154 (20), -0.21109 (20), -0.21108 (20), -0.21104 (20), -0.21101 (21), -0.21006 (20), -0.20989 (21), -0.20970 (20), -0.20909 (20), -0.20895 (21), -0.20894 (21), -0.20875 (20), -0.20868 (20), -0.20854 (20), -0.20798 (20), 
Length of domains: 33530
Time: pickout 0.2271    decision 1.9061    set_bounds 2.1326    solve 4.2381    add 0.1380    
Accumulated time: pickout 0.5264    decision 3.9844    set_bounds 4.6930    solve 11.4063    add 1.0566    
Current (lb-rhs): -0.22062909603118896
70545 domains visited
current_vram/total_varm: 33.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 25.472705602645874

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1356] [/input-8, 1886] [/input-8, 1548] [/input-8, 1564] [/input-8, 531] [/input-8, 523] [/input-8, 1307] [/input-8, 682] [/input-8, 532] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 1.913963794708252, worst -0.21767210960388184
10 lb beta sum: 1.913963794708252, worst -0.21760261058807373
Time: prepare 2.9196    bound 8.7379    transfer 0.3734    finalize 0.4470    func 12.9119    
Accumulated time: func 24.4777    prepare 6.4710    bound 14.7360    transfer 0.7322    finalize 1.0625    
all_split False
======================Cut inference begins======================
max lb tensor(0.02088690) min lb tensor(-0.21756744)
Number of Verified Splits: 3621 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.0409131050109863 
BICCOS Cumulative time: 6.495605945587158
Preprocessing time: 2.160895586013794 Inference time: 0.815345048904419 Add cuts time: 0.06391310691833496 Cut analysis time: 0.0007593631744384766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21757 (21), -0.21134 (21), -0.20987 (22), -0.20969 (22), -0.20916 (21), -0.20847 (21), -0.20821 (21), -0.20798 (21), -0.20752 (22), -0.20747 (21), -0.20697 (22), -0.20675 (21), -0.20666 (21), -0.20604 (22), -0.20576 (21), -0.20547 (21), -0.20539 (22), -0.20511 (21), -0.20488 (21), -0.20422 (22), 
Length of domains: 62677
Time: pickout 0.4717    decision 3.6707    set_bounds 4.0605    solve 13.4437    add 0.2838    
Accumulated time: pickout 0.9980    decision 7.6550    set_bounds 8.7534    solve 24.8501    add 1.3404    
Current (lb-rhs): -0.21756744384765625
132460 domains visited
Cumulative time: 50.56862139701843

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1555] [/input-8, 523] [/input-8, 533] [/input-8, 1307] [/input-8, 533] [/input-8, 682] [/input-8, 1354] [/input-8, 523] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9077513217926025, worst -0.2122713327407837
10 lb beta sum: 1.9077513217926025, worst -0.2121880054473877
Time: prepare 2.9832    bound 8.7377    transfer 0.3834    finalize 0.5084    func 13.0895    
Accumulated time: func 37.5672    prepare 9.4548    bound 23.4737    transfer 1.1157    finalize 1.5709    
all_split False
======================Cut inference begins======================
max lb tensor(0.01996994) min lb tensor(-0.21216166)
Number of Verified Splits: 3491 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.3443398475646973 
BICCOS Cumulative time: 9.839945793151855
Preprocessing time: 2.3616318702697754 Inference time: 0.9110231399536133 Add cuts time: 0.07089614868164062 Cut analysis time: 0.0007886886596679688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21216 (22), -0.20944 (22), -0.20747 (21), -0.20697 (22), -0.20666 (21), -0.20643 (23), -0.20604 (22), -0.20570 (22), -0.20548 (23), -0.20539 (22), -0.20408 (23), -0.20376 (22), -0.20375 (22), -0.20330 (22), -0.20319 (22), -0.20291 (22), -0.20276 (22), -0.20259 (22), -0.20204 (21), -0.20190 (21), 
Length of domains: 91954
Time: pickout 0.4979    decision 3.8695    set_bounds 4.6965    solve 14.4469    add 0.3637    
Accumulated time: pickout 1.4960    decision 11.5245    set_bounds 13.4499    solve 39.2970    add 1.7041    
Current (lb-rhs): -0.21216166019439697
194505 domains visited
Cumulative time: 77.99087882041931

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 1301] [/input-8, 1548] [/input-8, 682] [/input-8, 1548] [/input-8, 666] [/input-8, 533] [/input-8, 533] [/input-8, 531] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9003885984420776, worst -0.2066577672958374
10 lb beta sum: 1.9003885984420776, worst -0.2066493034362793
Time: prepare 2.9858    bound 8.7417    transfer 0.3944    finalize 0.5049    func 14.1651    
Accumulated time: func 51.7323    prepare 12.4413    bound 32.2154    transfer 1.5101    finalize 2.0758    
all_split False
======================Cut inference begins======================
max lb tensor(0.01994801) min lb tensor(-0.20657897)
Number of Verified Splits: 3938 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.2453997135162354 
BICCOS Cumulative time: 13.08534550666809
Preprocessing time: 2.2256593704223633 Inference time: 0.9463894367218018 Add cuts time: 0.07252073287963867 Cut analysis time: 0.0008301734924316406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21216 (22), -0.20944 (22), -0.20658 (22), -0.20643 (23), -0.20570 (22), -0.20548 (23), -0.20408 (23), -0.20375 (22), -0.20319 (22), -0.20291 (22), -0.20276 (22), -0.20276 (22), -0.20261 (23), -0.20259 (22), -0.20223 (23), -0.20192 (22), -0.20188 (22), -0.20170 (22), -0.20140 (23), -0.20102 (22), 
Length of domains: 120784
Time: pickout 0.5230    decision 4.0633    set_bounds 4.9726    solve 14.1738    add 0.3012    
Accumulated time: pickout 2.0190    decision 15.5878    set_bounds 18.4225    solve 53.4707    add 2.0053    
Current (lb-rhs): -0.21216166019439697
256103 domains visited
Cumulative time: 105.3969190120697

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 682] [/input-8, 682] [/input-8, 1355] [/input-8, 1373] [/input-8, 1548] [/input-8, 1373] [/input-8, 531] [/input-8, 1066] [/input-8, 1355] [/input-8, 523] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9020133018493652, worst -0.20801401138305664
10 lb beta sum: 1.9020133018493652, worst -0.20796537399291992
Time: prepare 3.0186    bound 8.7367    transfer 0.4007    finalize 0.5201    func 13.1194    
Accumulated time: func 64.8516    prepare 15.4604    bound 40.9521    transfer 1.9108    finalize 2.5959    
all_split False
======================Cut inference begins======================
max lb tensor(0.02081966) min lb tensor(-0.20794582)
Number of Verified Splits: 3342 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 4.438017845153809 
BICCOS Cumulative time: 17.5233633518219
Preprocessing time: 2.2204203605651855 Inference time: 0.7948391437530518 Add cuts time: 1.4219715595245361 Cut analysis time: 0.0007867813110351562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20795 (23), -0.20658 (22), -0.20642 (24), -0.20548 (23), -0.20508 (23), -0.20407 (24), -0.20276 (22), -0.20261 (23), -0.20223 (23), -0.20192 (22), -0.20188 (22), -0.20142 (23), -0.20140 (23), -0.20102 (22), -0.20076 (24), -0.20043 (22), -0.20023 (24), -0.20002 (23), -0.19986 (22), -0.19972 (22), 
Length of domains: 150210
Time: pickout 0.5007    decision 3.9671    set_bounds 4.7882    solve 13.1335    add 0.2708    
Accumulated time: pickout 2.5197    decision 19.5548    set_bounds 23.2107    solve 66.6042    add 2.2761    
Current (lb-rhs): -0.2079458236694336
318297 domains visited
Cumulative time: 132.73543643951416

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1066] [/input-8, 523] [/input-8, 523] [/input-8, 1558] [/input-8, 1355] [/input-8, 532] [/input-8, 1066] [/input-8, 1878] [/input-8, 1555] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.899011254310608, worst -0.20325970649719238
10 lb beta sum: 1.899011254310608, worst -0.20321905612945557
Time: prepare 2.9725    bound 8.7254    transfer 0.3980    finalize 0.5704    func 13.1091    
Accumulated time: func 77.9608    prepare 18.4336    bound 49.6775    transfer 2.3089    finalize 3.1663    
all_split False
======================Cut inference begins======================
max lb tensor(0.01781797) min lb tensor(-0.20320511)
Number of Verified Splits: 3483 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 5.0267698764801025 
BICCOS Cumulative time: 22.550133228302002
Preprocessing time: 2.3815722465515137 Inference time: 0.8426856994628906 Add cuts time: 1.801546573638916 Cut analysis time: 0.0009653568267822266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20795 (23), -0.20642 (24), -0.20508 (23), -0.20407 (24), -0.20321 (24), -0.20313 (23), -0.20276 (22), -0.20261 (23), -0.20223 (23), -0.20188 (22), -0.20142 (23), -0.20140 (23), -0.20076 (24), -0.20023 (24), -0.20002 (23), -0.19920 (22), -0.19906 (23), -0.19897 (23), -0.19895 (24), -0.19893 (23), 
Length of domains: 179495
Time: pickout 0.5928    decision 3.4143    set_bounds 5.1582    solve 13.1231    add 0.3523    
Accumulated time: pickout 3.1125    decision 22.9691    set_bounds 28.3689    solve 79.7273    add 2.6284    
Current (lb-rhs): -0.2079458236694336
380350 domains visited
Cumulative time: 160.56104397773743

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 682] [/input-8, 682] [/input-8, 1555] [/input-8, 532] [/input-8, 682] [/input-8, 531] [/input-8, 1354] [/input-8, 1878] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 1.89287531375885, worst -0.20222747325897217
10 lb beta sum: 1.89287531375885, worst -0.20220685005187988
Time: prepare 2.9762    bound 8.7296    transfer 0.3796    finalize 0.5634    func 13.0964    
Accumulated time: func 91.0572    prepare 21.4103    bound 58.4071    transfer 2.6885    finalize 3.7297    
all_split False
======================Cut inference begins======================
max lb tensor(0.01917052) min lb tensor(-0.20212388)
Number of Verified Splits: 3620 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.5248825550079346 
BICCOS Cumulative time: 26.075015783309937
Preprocessing time: 2.4965548515319824 Inference time: 0.8810977935791016 Add cuts time: 0.14613580703735352 Cut analysis time: 0.0010941028594970703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20795 (23), -0.20642 (24), -0.20508 (23), -0.20407 (24), -0.20321 (24), -0.20313 (23), -0.20212 (24), -0.20142 (23), -0.20140 (23), -0.20076 (24), -0.20028 (24), -0.20023 (24), -0.19992 (24), -0.19906 (23), -0.19895 (24), -0.19894 (23), -0.19893 (23), -0.19874 (23), -0.19855 (23), -0.19852 (23), 
Length of domains: 208643
Time: pickout 0.5038    decision 3.3290    set_bounds 5.3416    solve 13.1096    add 0.3370    
Accumulated time: pickout 3.6163    decision 26.2981    set_bounds 33.7105    solve 92.8370    add 2.9654    
Current (lb-rhs): -0.2079458236694336
442266 domains visited
Cumulative time: 186.89338040351868

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 523] [/input-8, 1373] [/input-8, 1886] [/input-8, 1301] [/input-8, 531] [/input-8, 1883] [/input-8, 1066] [/input-8, 1373] [/input-8, 1355] [/input-8, 1355] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8914339542388916, worst -0.19943416118621826
10 lb beta sum: 1.8914339542388916, worst -0.1994304656982422
Time: prepare 2.9597    bound 8.7572    transfer 0.3961    finalize 0.5733    func 13.1306    
Accumulated time: func 104.1878    prepare 24.3705    bound 67.1643    transfer 3.0846    finalize 4.3030    
all_split False
======================Cut inference begins======================
max lb tensor(0.02121902) min lb tensor(-0.19933391)
Number of Verified Splits: 3379 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.3351659774780273 
BICCOS Cumulative time: 29.410181760787964
Preprocessing time: 2.4158077239990234 Inference time: 0.8525469303131104 Add cuts time: 0.06579971313476562 Cut analysis time: 0.0010116100311279297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20795 (23), -0.20642 (24), -0.20508 (23), -0.20407 (24), -0.20321 (24), -0.20313 (23), -0.20212 (24), -0.20142 (23), -0.20076 (24), -0.20028 (24), -0.20023 (24), -0.19992 (24), -0.19933 (24), -0.19906 (23), -0.19895 (24), -0.19894 (23), -0.19893 (23), -0.19874 (23), -0.19855 (23), -0.19852 (23), 
Length of domains: 238032
Time: pickout 0.5188    decision 4.7824    set_bounds 3.5471    solve 15.1049    add 0.4657    
Accumulated time: pickout 4.1352    decision 31.0805    set_bounds 37.2577    solve 107.9418    add 3.4311    
Current (lb-rhs): -0.2079458236694336
504423 domains visited
Time out!!!!!!!!
Result: unknown in 218.7309 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 578] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 578] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 155] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.10633993,  0.71801627,  3.55015612,  3.86298275,  2.74121571,
          5.07143879,  4.74717522,  3.53826118, -1.04089260]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24040604,  -6.51685905,  -9.96843529,  -9.76380062,  -9.11704445,
          -11.15218353, -10.71066093, -10.13462257,  -4.86371136,  -4.98990440]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12619305]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0082 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0911 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 539] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 220] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97405243,  0.32927644,  0.17750072, -0.10494661, -0.85372496,
          0.32606649, -0.43116236, -0.31671739,  2.66897058]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12968159, -6.54487228, -6.24013519, -5.73320532, -5.06740761,
          -6.21982479, -5.72114992, -6.02204561, -8.81664181, -5.19222641],
         [-8.12968159, -6.54487228, -6.24013519, -5.73320532, -5.06740761,
          -6.21982479, -5.72114992, -6.02204561, -8.81664181, -5.19222641]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.54097891, -0.12481880,  0.52892351,  0.82981920]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.47806835, -16.40879250, -15.09305000, -16.23484230, -16.50166130,
         -18.09269333, -17.71716118, -17.61732292,  -9.91329861, -15.71094036]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 596] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 596] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 184] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06263447, 4.58382511, 3.51261330, 4.72654152, 4.75524092, 6.32470655,
         6.04849243, 5.57820702, 4.16677713]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [737]; unstable size 737; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 737] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 737] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 737] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 235] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.51290512,  2.97313166,  0.25002050,  0.22753614, -0.42947245,
          0.68455642,  0.85951889,  1.57969713,  0.97213173]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.80it/s]100%|██████████| 1/1 [00:00<00:00,  8.79it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.76056576, -9.90643501, -7.24392986, -7.12848854, -6.38653946,
          -7.83770800, -7.66693401, -8.70800304, -5.73674393, -7.76976919],
         [-5.76056576, -9.90643501, -7.24392986, -7.12848854, -6.38653946,
          -7.83770800, -7.66693401, -8.70800304, -5.73674393, -7.76976919]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02382183, 0.64979553]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1165 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 7.152825832366943
alpha/beta optimization time: 1.2002599239349365
initial alpha-crown bounds: tensor([[-0.46917987,  3.03084326,  0.32193422,  0.28774762, -0.37226677,
          0.75499594,  0.91308260,  1.66521239,  1.02045631]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4691798686981201
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63374829292297
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.46917987]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.46917987]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010967254638671875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4691770672798157
10 lb beta sum: 0.0, worst -0.46917980909347534
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    func 0.0541    
Accumulated time: func 0.0541    prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 92] 
split level 5: [/input-8, 1956] 
split level 6: [/input-8, 884] 
split level 7: [/input-12, 36] 
split level 8: [/input-8, 539] 
split level 9: [/input-8, 1884] 
split level 10: [/input-8, 875] 
split level 11: [/input-8, 1892] 
split level 12: [/input-8, 1052] 
split level 13: [/input-12, 61] 
split level 14: [/input, 3512] 
split level 15: [/input-12, 55] 
split level 16: [/input-8, 508] 
split level 17: [/input-8, 1881] 
split level 18: [/input-8, 684] 
split level 19: [/input-8, 538] 
split level 20: [/input, 2521] 
split level 21: [/input-8, 92] 
split level 22: [/input-8, 867] 
split level 23: [/input-12, 45] 
split level 24: [/input, 3513] 
split level 25: [/input-8, 556] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 499] 
split level 28: [/input-8, 1876] 
split level 29: [/input, 2232] 
split level 30: [/input-8, 659] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 1910] 
split level 33: [/input-8, 100] 
split level 34: [/input-8, 84] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 988] 
split level 37: [/input-12, 37] 
split level 38: [/input-8, 1116] 
split level 39: [/input, 3529] 
split level 40: [/input-8, 1888] 
split level 41: [/input, 2248] 
split level 42: [/input-8, 1460] 
split level 43: [/input-8, 1049] 
split level 44: [/input-8, 90] 
split level 45: [/input-8, 996] 
split level 46: [/input, 2264] 
split level 47: [/input, 1497] 
split level 48: [/input-8, 1425] 
split level 49: [/input-8, 1909] 
split level 50: [/input-8, 1298] 
split level 51: [/input-8, 541] 
split level 52: [/input-8, 667] 
split level 53: [/input, 3272] 
split level 54: [/input-8, 1003] 
split level 55: [/input-8, 93] 
split level 56: [/input, 2494] 
split level 57: [/input-8, 1893] 
split level 58: [/input-8, 1866] 
split level 59: [/input, 2472] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 319] 
split level 62: [/input, 174] 
split level 63: [/input-8, 1361] 
split level 64: [/input, 1466] 
split level 65: [/input-8, 1107] 
split level 66: [/input, 3165] 
split level 67: [/input, 1482] 
split level 68: [/input-8, 1098] 
split level 69: [/input-8, 1369] 
split level 70: [/input-8, 642] 
split level 71: [/input, 2506] 
split level 72: [/input-8, 500] 
split level 73: [/input, 365] 
split level 74: [/input-8, 510] 
split level 75: [/input, 1736] 
split level 76: [/input-8, 1259] 
split level 77: [/input-8, 944] 
split level 78: [/input, 3274] 
split level 79: [/input, 395] 
split level 80: [/input-8, 1041] 
split level 81: [/input-8, 492] 
split level 82: [/input-8, 1353] 
split level 83: [/input, 3018] 
split level 84: [/input-8, 1583] 
split level 85: [/input, 3254] 
split level 86: [/input-8, 1249] 
split level 87: [/input, 3257] 
split level 88: [/input, 2433] 
split level 89: [/input, 3287] 
split level 90: [/input, 3258] 
split level 91: [/input, 2473] 
split level 92: [/input-8, 1867] 
split level 93: [/input-8, 1106] 
split level 94: [/input-8, 1908] 
split level 95: [/input-8, 1293] 
split level 96: [/input-8, 1941] 
split level 97: [/input, 103] 
split level 98: [/input, 3306] 
split level 99: [/input, 3271] 
split level 100: [/input, 2449] 
split level 101: [/input-8, 1461] 
split level 102: [/input-8, 2021] 
split level 103: [/input-12, 72] 
split level 104: [/input, 1717] 
split level 105: [/input-8, 1373] 
split level 106: [/input-8, 694] 
split level 107: [/input, 3278] 
split level 108: [/input-8, 1305] 
split level 109: [/input, 2470] 
split level 110: [/input, 2446] 
split level 111: [/input, 3215] 
split level 112: [/input, 2524] 
split level 113: [/input, 426] 
split level 114: [/input, 2474] 
split level 115: [/input, 2455] 
split level 116: [/input, 3289] 
split level 117: [/input, 2386] 
split level 118: [/input, 3229] 
split level 119: [/input, 1703] 
split level 120: [/input, 3277] 
split level 121: [/input-8, 801] 
split level 122: [/input, 3182] 
split level 123: [/input, 3998] 
split level 124: [/input, 3305] 
split level 125: [/input, 3186] 
split level 126: [/input, 2936] 
split level 127: [/input, 3290] 
split level 128: [/input, 3246] 
split level 129: [/input, 1357] 
split level 130: [/input, 2515] 
split level 131: [/input-8, 1767] 
split level 132: [/input, 3170] 
split level 133: [/input-8, 1887] 
split level 134: [/input, 3245] 
split level 135: [/input, 2510] 
split level 136: [/input, 3269] 
split level 137: [/input, 3688] 
split level 138: [/input, 104] 
split level 139: [/input, 1563] 
split level 140: [/input, 3672] 
split level 141: [/input, 91] 
split level 142: [/input, 366] 
split level 143: [/input-8, 1534] 
split level 144: [/input, 3299] 
split level 145: [/input, 2398] 
split level 146: [/input, 2397] 
split level 147: [/input-8, 394] 
split level 148: [/input-8, 1377] 
split level 149: [/input-8, 1001] 
split level 150: [/input-8, 1430] 
split level 151: [/input, 2076] 
split level 152: [/input, 2251] 
split level 153: [/input, 2413] 
split level 154: [/input, 1576] 
split level 155: [/input, 2463] 
split level 156: [/input, 2540] 
split level 157: [/input-8, 1803] 
split level 158: [/input, 3260] 
split level 159: [/input, 2478] 
split level 160: [/input, 1579] 
split level 161: [/input-8, 1121] 
split level 162: [/input-8, 1047] 
split level 163: [/input, 3054] 
split level 164: [/input, 3532] 
split level 165: [/input, 3786] 
split level 166: [/input, 2092] 
split level 167: [/input, 2696] 
split level 168: [/input, 1618] 
split level 169: [/input, 3202] 
split level 170: [/input-8, 1424] 
split level 171: [/input-8, 648] 
split level 172: [/input, 3915] 
split level 173: [/input, 394] 
split level 174: [/input, 1733] 
split level 175: [/input-8, 1422] 
split level 176: [/input, 3250] 
split level 177: [/input, 407] 
split level 178: [/input-8, 649] 
split level 179: [/input-8, 980] 
split level 180: [/input, 2401] 
split level 181: [/input, 1650] 
split level 182: [/input, 3153] 
split level 183: [/input, 3977] 
split level 184: [/input, 3195] 
split level 185: [/input, 1594] 
split level 186: [/input, 1560] 
split level 187: [/input, 3834] 
split level 188: [/input, 3475] 
split level 189: [/input, 3052] 
split level 190: [/input, 1558] 
split level 191: [/input, 1569] 
split level 192: [/input, 1438] 
split level 193: [/input, 3833] 
split level 194: [/input, 3974] 
split level 195: [/input, 2412] 
split level 196: [/input, 3917] 
split level 197: [/input, 392] 
split level 198: [/input, 3832] 
split level 199: [/input, 1592] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4691307544708252
10 lb beta sum: 0.0, worst -0.4691340923309326
Time: prepare 0.0115    bound 0.0992    transfer 0.0014    finalize 0.0030    func 0.1178    
Accumulated time: func 0.1719    prepare 0.0219    bound 0.1529    transfer 0.0015    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.20137167) min lb tensor(-0.46913075)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010724067687988281 
BICCOS Cumulative time: 0.010724067687988281
Preprocessing time: 0.00992131233215332 Inference time: 0.0001590251922607422 Add cuts time: 6.842613220214844e-05 Cut analysis time: 0.0005753040313720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45634 (1), -0.45630 (1), -0.45597 (1), -0.45538 (1), -0.45497 (1), -0.45487 (1), -0.45482 (1), -0.45452 (1), -0.45408 (1), -0.45407 (1), -0.45389 (1), -0.45371 (1), -0.45326 (1), -0.45284 (1), -0.45103 (1), -0.44987 (1), -0.44986 (1), -0.44822 (1), -0.44822 (1), -0.44779 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5199    set_bounds 0.0090    solve 0.1179    add 0.0689    
Accumulated time: pickout 0.0003    decision 0.5199    set_bounds 0.0090    solve 0.1179    add 0.0689    
Current (lb-rhs): -0.45633697509765625
50 domains visited
Cumulative time: 0.7857983112335205

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 1: [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] 
split level 3: [/input-8, 100] [/input-8, 556] [/input-8, 1956] [/input-8, 1003] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 1881] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44958925247192383
10 lb beta sum: 0.5860037207603455, worst -0.4427410364151001
Time: prepare 0.0077    bound 0.1194    transfer 0.0010    finalize 0.0025    func 0.1333    
Accumulated time: func 0.3053    prepare 0.0299    bound 0.2723    transfer 0.0025    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.30997223) min lb tensor(-0.44269544)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013343095779418945 
BICCOS Cumulative time: 0.024067163467407227
Preprocessing time: 0.011899232864379883 Inference time: 0.0007984638214111328 Add cuts time: 0.0003070831298828125 Cut analysis time: 0.0003383159637451172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10253 (2), -0.10252 (2), -0.10240 (2), -0.10159 (2), -0.10135 (2), -0.10072 (2), -0.10033 (2), -0.10012 (2), -0.09994 (2), -0.09992 (2), -0.09977 (2), -0.09954 (2), -0.09702 (2), -0.09374 (2), -0.09239 (2), -0.09198 (2), -0.09112 (2), -0.09101 (2), -0.09091 (2), -0.09079 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0242    set_bounds 0.0118    solve 0.1334    add 0.0819    
Accumulated time: pickout 0.0014    decision 0.5441    set_bounds 0.0207    solve 0.2513    add 0.1508    
Current (lb-rhs): -0.10253092646598816
100 domains visited
Cumulative time: 1.0517008304595947

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-8, 1956] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 556] [/input-8, 556] [/input-8, 1003] [/input-12, 61] [/input-8, 556] [/input-8, 1900] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10243630409240723
10 lb beta sum: 0.9573811888694763, worst -0.07350507378578186
Time: prepare 0.0080    bound 0.1332    transfer 0.0008    finalize 0.0028    func 0.1475    
Accumulated time: func 0.4527    prepare 0.0381    bound 0.4055    transfer 0.0033    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.50515795) min lb tensor(-0.06758779)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.037081003189086914 
BICCOS Cumulative time: 0.06114816665649414
Preprocessing time: 0.011940956115722656 Inference time: 0.0157167911529541 Add cuts time: 0.00905752182006836 Cut analysis time: 0.0003657341003417969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06648 (3), -0.06646 (3), -0.06573 (3), -0.06571 (3), -0.05539 (3), -0.05526 (3), -0.04889 (3), -0.04318 (3), -0.03955 (3), -0.03895 (3), 
Length of domains: 10
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0153    solve 0.1476    add 0.1066    
Accumulated time: pickout 0.0024    decision 0.5637    set_bounds 0.0360    solve 0.3989    add 0.2574    
Current (lb-rhs): -0.06647741794586182
110 domains visited
Cumulative time: 1.3791606426239014

Shallow-BaB round 4
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 1] [/input-12, 10] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 884] [/input-8, 884] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 4: [/input-8, 1052] [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] 
split level 5: [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 1052] [/input-8, 1892] [/input-8, 1052] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] 
split level 6: [/input-8, 1892] [/input-8, 1892] [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 875] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] 
split level 7: [/input-12, 61] [/input-12, 61] [/input-8, 1892] [/input-12, 55] [/input-8, 875] [/input-8, 1892] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 8: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 61] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 9: [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1892] [/input-12, 61] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] 
split level 10: [/input-8, 1061] [/input-8, 1061] [/input-8, 538] [/input-8, 1881] [/input-8, 1881] [/input-8, 538] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
split level 11: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 12: [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 867] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] 
split level 13: [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] 
split level 14: [/input, 1463] [/input, 1463] [/input-8, 1460] [/input-8, 1061] [/input, 1463] [/input-8, 867] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 15: [/input-8, 1460] [/input-8, 1460] [/input-12, 37] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
split level 16: [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 17: [/input-12, 37] [/input-12, 37] [/input-8, 1909] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input, 3529] [/input-8, 100] [/input, 3529] [/input-8, 100] 
split level 18: [/input, 3529] [/input, 3529] [/input-8, 1003] [/input, 3529] [/input, 3529] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input-8, 100] [/input, 3529] 
split level 19: [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0788079500198364, worst -0.2880154848098755
10 lb beta sum: 1.3399749994277954, worst -0.03714430332183838
Time: prepare 0.0177    bound 0.1195    transfer 0.0008    finalize 0.0026    func 0.1440    
Accumulated time: func 0.5967    prepare 0.0569    bound 0.5250    transfer 0.0041    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.52888519) min lb tensor(-0.03311904)
Number of Verified Splits: 98 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.019204378128051758 
BICCOS Cumulative time: 0.0803525447845459
Preprocessing time: 0.011686563491821289 Inference time: 0.00423884391784668 Add cuts time: 0.0026934146881103516 Cut analysis time: 0.0005855560302734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01301 (4), -0.01301 (4), -0.01301 (4), -0.01299 (4), -0.01294 (4), -0.01259 (4), -0.01244 (4), -0.01242 (4), -0.01233 (4), -0.01202 (4), -0.01192 (4), -0.01170 (4), -0.01168 (4), -0.01163 (4), -0.01101 (4), -0.01101 (4), -0.01083 (4), -0.01071 (4), -0.01004 (4), -0.00999 (4), 
Length of domains: 50
Time: pickout 0.0008    decision 0.0616    set_bounds 0.0152    solve 0.1441    add 0.0894    
Accumulated time: pickout 0.0032    decision 0.6253    set_bounds 0.0512    solve 0.5430    add 0.3468    
Current (lb-rhs): -0.01300966739654541
160 domains visited
Cumulative time: 1.7096641063690186

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 58] [/input-12, 1] [/input-12, 58] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 10] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] [/input-12, 92] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 92] [/input-12, 61] [/input-12, 92] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07483339309692383
10 lb beta sum: 0.8150667548179626, worst -0.02241741120815277
Time: prepare 0.0085    bound 0.1335    transfer 0.0008    finalize 0.0029    func 0.3242    
Accumulated time: func 0.9210    prepare 0.0656    bound 0.6585    transfer 0.0049    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.10647202) min lb tensor(-0.00765541)
Number of Verified Splits: 307 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03678274154663086 
BICCOS Cumulative time: 0.11713528633117676
Preprocessing time: 0.012439727783203125 Inference time: 0.014480829238891602 Add cuts time: 0.009406328201293945 Cut analysis time: 0.0004558563232421875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0158    solve 0.3243    add 0.0273    
Accumulated time: pickout 0.0043    decision 0.6450    set_bounds 0.0670    solve 0.8674    add 0.3741    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
160 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.90993790e-14, 1.87769998e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 10]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.90993790e-14, 3.48194659e-01, 1.16623983e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 10]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([7.90993790e-14, 3.48194659e-01, 5.91169447e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, -1.0], [0, 0, 0], [1.1210387714598537e-43, 0.04608951508998871, 0.043558403849601746], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.90993790e-14, 9.48085077e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, -1.0], [0, 0, 0], [1.1210387714598537e-43, 0.04608951508998871, 0.043558403849601746], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([7.90993790e-14, 5.07453531e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, 1.0], [0, 0, 0], [1.1210387714598537e-43, 0.04608951508998871, 0.04551832377910614], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.90993790e-14, 8.64710100e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, 1.0], [0, 0, 0], [1.1210387714598537e-43, 0.04608951508998871, 0.04551832377910614], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([7.90993790e-14, 5.17678112e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, -1.0], [0, 0, 0], [1.1210387714598537e-43, 0.05245552957057953, 0.04586125910282135], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.90993790e-14, 4.61696228e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, -1.0], [0, 0, 0], [1.1210387714598537e-43, 0.05245552957057953, 0.04586125910282135], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([7.90993790e-14, 4.81776148e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, 1.0], [0, 0, 0], [1.1210387714598537e-43, 0.05245552957057953, 0.047395095229148865], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.90993790e-14, 8.33760388e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, 1.0], [0, 0, 0], [1.1210387714598537e-43, 0.05245552957057953, 0.047395095229148865], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([7.90993790e-14, 4.94008511e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1956]), tensor([1.]), tensor([0]), tensor([7.82744845e+31]), tensor([1])), '/input-12': ([60], [1.0], [0], [7.909937895650421e-14], [0])}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3996230959892273
10 lb beta sum: 1.3558812141418457, worst -0.37878960371017456
Time: prepare 0.0005    bound 0.1296    transfer 0.0001    finalize 0.0002    func 0.1306    
Accumulated time: func 1.0516    prepare 0.0662    bound 0.7881    transfer 0.0050    finalize 0.0143    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 92] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] 
split level 2: [/input-8, 875] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] 
split level 3: [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-12, 92] 
split level 4: [/input-12, 61] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-12, 61] 
split level 5: [/input-8, 1881] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6163148880004883, worst -0.323621928691864
10 lb beta sum: 1.6327571868896484, worst -0.3232812285423279
Time: prepare 0.0164    bound 0.1326    transfer 0.0017    finalize 0.0021    func 0.1555    
Accumulated time: func 1.2072    prepare 0.0830    bound 0.9207    transfer 0.0067    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.85477376) min lb tensor(-0.32319278)
Number of Verified Splits: 348 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.6762975454330444, worst -0.7873749732971191
10 lb beta sum: 1.7423521280288696, worst -0.11505508422851562
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.3644847869873047 
BICCOS Cumulative time: 0.48162007331848145
Preprocessing time: 0.010932207107543945 Inference time: 0.34311342239379883 Add cuts time: 0.010030508041381836 Cut analysis time: 0.0004086494445800781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.32319 (6), -0.31410 (6), -0.31177 (6), -0.31177 (6), -0.30267 (6), -0.30266 (6), -0.30098 (6), -0.29231 (6), -0.29186 (6), -0.28826 (6), -0.27645 (6), -0.27544 (6), -0.27270 (6), -0.27208 (6), -0.25983 (6), -0.25645 (6), -0.11401 (6), -0.11200 (6), -0.10201 (6), -0.10034 (6), 
Length of domains: 36
Time: pickout 0.0006    decision 0.0185    set_bounds 0.0398    solve 0.1557    add 0.0011    
Accumulated time: pickout 0.0050    decision 0.6635    set_bounds 0.1067    solve 1.0230    add 0.3752    
Current (lb-rhs): -0.3231927752494812
196 domains visited
Cumulative time: 2.876253366470337

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-8, 1956] [/input-12, 58] [/input-8, 884] [/input-8, 1956] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 92] [/input-8, 988] [/input-8, 92] [/input-8, 1052] [/input-8, 988] [/input-8, 92] [/input-8, 84] [/input-8, 92] [/input-8, 84] [/input-8, 884] 
split level 2: [/input-8, 556] [/input-8, 1003] [/input-8, 556] [/input-8, 1881] [/input-8, 1003] [/input-8, 556] [/input-8, 1003] [/input-8, 556] [/input-8, 1003] [/input-8, 538] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1404742002487183, worst -0.3097197413444519
10 lb beta sum: 1.1404742002487183, worst -0.30960482358932495
Time: prepare 0.0125    bound 0.1299    transfer 0.0011    finalize 0.0018    func 0.1472    
Accumulated time: func 1.3543    prepare 0.0957    bound 1.0506    transfer 0.0078    finalize 0.0182    
all_split False
======================Cut inference begins======================
max lb tensor(0.36962730) min lb tensor(-0.30955070)
Number of Verified Splits: 162 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.026887178421020508 
BICCOS Cumulative time: 0.508507251739502
Preprocessing time: 0.008567333221435547 Inference time: 0.015851259231567383 Add cuts time: 0.0020477771759033203 Cut analysis time: 0.0004208087921142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30955 (9), -0.30811 (9), -0.30050 (9), -0.29906 (9), -0.29748 (9), -0.29707 (9), -0.29706 (9), -0.29695 (9), -0.29561 (9), -0.29539 (9), -0.28840 (9), -0.28796 (9), -0.28795 (9), -0.28789 (9), -0.28650 (9), -0.28636 (9), -0.28628 (9), -0.28606 (9), -0.28559 (9), -0.28544 (9), 
Length of domains: 126
Time: pickout 0.0020    decision 0.0161    set_bounds 0.0212    solve 0.1473    add 0.0016    
Accumulated time: pickout 0.0070    decision 0.6796    set_bounds 0.1279    solve 1.1703    add 0.3767    
Current (lb-rhs): -0.3095507025718689
322 domains visited
Cumulative time: 3.0922975540161133

BaB round 3
batch: 126
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 875] [/input-8, 1956] [/input-8, 884] [/input-8, 875] [/input-8, 884] [/input-8, 1956] [/input-8, 884] [/input-8, 1956] [/input-8, 1956] [/input-8, 884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30824732780456543
10 lb beta sum: 0.42883870005607605, worst -0.30645114183425903
Time: prepare 0.0050    bound 0.1294    transfer 0.0006    finalize 0.0013    func 0.1379    
Accumulated time: func 1.4923    prepare 0.1009    bound 1.1800    transfer 0.0084    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.30557793) min lb tensor(-0.30640334)
Number of Verified Splits: 86 of 252
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.01733231544494629 
BICCOS Cumulative time: 0.5258395671844482
Preprocessing time: 0.0075261592864990234 Inference time: 0.007741212844848633 Add cuts time: 0.0016400814056396484 Cut analysis time: 0.0004248619079589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30640 (10), -0.30523 (10), -0.29738 (10), -0.29621 (10), -0.29486 (10), -0.29453 (10), -0.29427 (10), -0.29355 (10), -0.29226 (10), -0.29216 (10), -0.28583 (10), -0.28548 (10), -0.28521 (10), -0.28447 (10), -0.28337 (10), -0.28321 (10), -0.28317 (10), -0.28310 (10), -0.28286 (10), -0.28253 (10), 
Length of domains: 166
Time: pickout 0.0023    decision 0.0180    set_bounds 0.0106    solve 0.1380    add 0.0014    
Accumulated time: pickout 0.0093    decision 0.6976    set_bounds 0.1385    solve 1.3083    add 0.3782    
Current (lb-rhs): -0.30640333890914917
488 domains visited
Cumulative time: 3.2807776927948

BaB round 4
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 1956] [/input-8, 538] [/input-8, 1956] [/input-8, 1956] [/input-8, 92] [/input-8, 1956] [/input-8, 100] [/input-8, 92] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5229463577270508, worst -0.30391329526901245
10 lb beta sum: 0.7921643257141113, worst -0.30355507135391235
Time: prepare 0.0142    bound 0.1307    transfer 0.0007    finalize 0.0016    func 0.1494    
Accumulated time: func 1.6417    prepare 0.1154    bound 1.3107    transfer 0.0090    finalize 0.0210    
all_split False
======================Cut inference begins======================
max lb tensor(0.01108575) min lb tensor(-0.30353010)
Number of Verified Splits: 10 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.011268377304077148 
BICCOS Cumulative time: 0.5371079444885254
Preprocessing time: 0.009613752365112305 Inference time: 0.0010409355163574219 Add cuts time: 0.0002808570861816406 Cut analysis time: 0.00033283233642578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30353 (11), -0.30242 (11), -0.29452 (11), -0.29340 (11), -0.29167 (11), -0.29136 (11), -0.29106 (11), -0.28998 (11), -0.28959 (11), -0.28885 (11), -0.28265 (11), -0.28234 (11), -0.28200 (11), -0.28091 (11), -0.28053 (11), -0.28045 (11), -0.27987 (11), -0.27977 (11), -0.27948 (11), -0.27878 (11), 
Length of domains: 322
Time: pickout 0.0025    decision 0.0198    set_bounds 0.0147    solve 0.1495    add 0.0020    
Accumulated time: pickout 0.0118    decision 0.7174    set_bounds 0.1532    solve 1.4578    add 0.3801    
Current (lb-rhs): -0.30353009700775146
810 domains visited
Cumulative time: 3.481428861618042

BaB round 5
batch: 322
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 538] [/input-8, 100] [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 1061] [/input-8, 538] [/input-8, 1061] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2982915937900543
10 lb beta sum: 0.512264609336853, worst -0.2961448132991791
Time: prepare 0.0126    bound 0.1391    transfer 0.0028    finalize 0.0028    func 0.1616    
Accumulated time: func 1.8033    prepare 0.1282    bound 1.4498    transfer 0.0118    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.00692555) min lb tensor(-0.29592949)
Number of Verified Splits: 8 of 644
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02129340171813965 
BICCOS Cumulative time: 0.558401346206665
Preprocessing time: 0.018653392791748047 Inference time: 0.0009219646453857422 Add cuts time: 0.0003345012664794922 Cut analysis time: 0.0013835430145263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29593 (12), -0.29480 (12), -0.28993 (12), -0.28917 (12), -0.28885 (12), -0.28802 (12), -0.28418 (12), -0.28378 (12), -0.28315 (12), -0.28212 (12), -0.28167 (12), -0.28100 (12), -0.28079 (12), -0.27969 (12), -0.27825 (12), -0.27785 (12), -0.27766 (12), -0.27735 (12), -0.27699 (12), -0.27625 (12), 
Length of domains: 636
Time: pickout 0.0046    decision 0.0288    set_bounds 0.0280    solve 0.1618    add 0.0034    
Accumulated time: pickout 0.0164    decision 0.7462    set_bounds 0.1812    solve 1.6196    add 0.3835    
Current (lb-rhs): -0.295929491519928
1446 domains visited
Cumulative time: 3.7301740646362305

BaB round 6
batch: 636
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 1061] [/input-12, 55] [/input-8, 1061] [/input-8, 1061] [/input-8, 867] [/input-8, 867] [/input-8, 1460] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.291687548160553
10 lb beta sum: 0.4946651756763458, worst -0.28969040513038635
Time: prepare 0.0252    bound 0.1483    transfer 0.0055    finalize 0.0068    func 0.1940    
Accumulated time: func 1.9974    prepare 0.1537    bound 1.5980    transfer 0.0173    finalize 0.0307    
all_split False
======================Cut inference begins======================
max lb tensor(0.11618179) min lb tensor(-0.28963611)
Number of Verified Splits: 117 of 1272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.05563688278198242 
BICCOS Cumulative time: 0.6140382289886475
Preprocessing time: 0.03823494911193848 Inference time: 0.014404773712158203 Add cuts time: 0.002530336380004883 Cut analysis time: 0.0004668235778808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28964 (13), -0.28872 (13), -0.28451 (13), -0.28309 (13), -0.28297 (13), -0.28259 (13), -0.28218 (13), -0.28056 (13), -0.27789 (13), -0.27776 (13), -0.27703 (13), -0.27595 (13), -0.27586 (13), -0.27566 (13), -0.27531 (13), -0.27482 (13), -0.27434 (13), -0.27430 (13), -0.27389 (13), -0.27382 (13), 
Length of domains: 1155
Time: pickout 0.0106    decision 0.0467    set_bounds 0.0541    solve 0.1944    add 0.0050    
Accumulated time: pickout 0.0270    decision 0.7929    set_bounds 0.2353    solve 1.8140    add 0.3885    
Current (lb-rhs): -0.28963610529899597
2601 domains visited
Cumulative time: 4.0984790325164795

BaB round 7
batch: 1155
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2857615351676941
10 lb beta sum: 0.4801153540611267, worst -0.2838664948940277
Time: prepare 0.0484    bound 0.1879    transfer 0.0057    finalize 0.0151    func 0.2735    
Accumulated time: func 2.2709    prepare 0.2023    bound 1.7859    transfer 0.0230    finalize 0.0458    
all_split False
======================Cut inference begins======================
max lb tensor(0.14537522) min lb tensor(-0.28380826)
Number of Verified Splits: 72 of 2310
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.08300232887268066 
BICCOS Cumulative time: 0.6970405578613281
Preprocessing time: 0.07146286964416504 Inference time: 0.009145021438598633 Add cuts time: 0.0018897056579589844 Cut analysis time: 0.0005047321319580078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28381 (14), -0.28306 (14), -0.27840 (14), -0.27772 (14), -0.27723 (14), -0.27675 (14), -0.27649 (14), -0.27497 (14), -0.27439 (14), -0.27342 (14), -0.27147 (14), -0.27146 (14), -0.27132 (14), -0.27090 (14), -0.27009 (14), -0.26971 (14), -0.26955 (14), -0.26921 (14), -0.26902 (14), -0.26847 (14), 
Length of domains: 2238
Time: pickout 0.0151    decision 0.0734    set_bounds 0.2555    solve 0.2740    add 0.0094    
Accumulated time: pickout 0.0420    decision 0.8663    set_bounds 0.4908    solve 2.0880    add 0.3979    
Current (lb-rhs): -0.28380826115608215
4839 domains visited
Cumulative time: 4.81196665763855

BaB round 8
batch: 2238
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 1460] [/input-12, 55] [/input-12, 55] [/input-8, 1900] [/input-8, 92] [/input-8, 1900] [/input-8, 1900] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5717276334762573, worst -0.27939555048942566
10 lb beta sum: 0.5715392231941223, worst -0.2793472111225128
Time: prepare 0.2018    bound 0.3054    transfer 0.0201    finalize 0.1716    func 0.7282    
Accumulated time: func 2.9991    prepare 0.4044    bound 2.0913    transfer 0.0431    finalize 0.2174    
all_split False
======================Cut inference begins======================
max lb tensor(0.12494057) min lb tensor(-0.27933505)
Number of Verified Splits: 216 of 4476
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 9
#cuts 4-6: 4
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.17452216148376465 
BICCOS Cumulative time: 0.8715627193450928
Preprocessing time: 0.13832378387451172 Inference time: 0.03201723098754883 Add cuts time: 0.003325939178466797 Cut analysis time: 0.0008552074432373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27934 (15), -0.27861 (15), -0.27395 (15), -0.27328 (15), -0.27260 (15), -0.27210 (15), -0.27188 (15), -0.27043 (15), -0.26929 (15), -0.26829 (15), -0.26689 (15), -0.26679 (15), -0.26673 (15), -0.26636 (15), -0.26526 (15), -0.26520 (15), -0.26506 (15), -0.26471 (15), -0.26427 (15), -0.26399 (15), 
Length of domains: 4260
Time: pickout 0.0294    decision 0.1324    set_bounds 0.1876    solve 0.7291    add 0.0178    
Accumulated time: pickout 0.0714    decision 0.9987    set_bounds 0.6784    solve 2.8171    add 0.4156    
Current (lb-rhs): -0.27933505177497864
9099 domains visited
Cumulative time: 6.089537858963013

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input, 2472] [/input-8, 100] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.277378112077713
10 lb beta sum: 0.461588978767395, worst -0.2755805552005768
Time: prepare 0.1926    bound 0.4979    transfer 0.0454    finalize 0.0540    func 0.8456    
Accumulated time: func 3.8447    prepare 0.5973    bound 2.5892    transfer 0.0884    finalize 0.2714    
all_split False
======================Cut inference begins======================
max lb tensor(0.22688842) min lb tensor(-0.27555466)
Number of Verified Splits: 741 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 9
#cuts 4-6: 15
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.3920156955718994 
BICCOS Cumulative time: 1.2635784149169922
Preprocessing time: 0.2595846652984619 Inference time: 0.1146547794342041 Add cuts time: 0.016314268112182617 Cut analysis time: 0.0014619827270507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27555 (16), -0.27476 (16), -0.27013 (16), -0.26937 (16), -0.26873 (16), -0.26830 (16), -0.26261 (16), -0.26237 (16), -0.26228 (16), -0.26213 (16), -0.26198 (16), -0.26138 (16), -0.26098 (16), -0.26095 (16), -0.26085 (16), -0.26022 (16), -0.26004 (16), -0.25992 (16), -0.25981 (16), -0.25966 (16), 
Length of domains: 7615
Time: pickout 0.0558    decision 0.2311    set_bounds 0.5092    solve 0.8477    add 0.0504    
Accumulated time: pickout 0.1272    decision 1.2298    set_bounds 1.1876    solve 3.6648    add 0.4661    
Current (lb-rhs): -0.2755546569824219
16550 domains visited
current_vram/total_varm: 24.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.204039812088013

BaB round 10
batch: 7615
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 1892] [/input-12, 55] [/input-8, 1900] [/input-12, 37] [/input-8, 100] [/input-8, 1892] [/input-12, 55] [/input-8, 1900] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2746410369873047
10 lb beta sum: 0.48971039056777954, worst -0.27289146184921265
Time: prepare 0.4163    bound 1.2310    transfer 0.0750    finalize 0.1178    func 1.9461    
Accumulated time: func 5.7909    prepare 1.0140    bound 3.8202    transfer 0.1634    finalize 0.3892    
all_split False
======================Cut inference begins======================
max lb tensor(0.38956177) min lb tensor(-0.27287835)
Number of Verified Splits: 3444 of 15230
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 11
#cuts 4-6: 23
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 1.316385269165039 
BICCOS Cumulative time: 2.5799636840820312
Preprocessing time: 0.5849096775054932 Inference time: 0.6566674709320068 Add cuts time: 0.07307744026184082 Cut analysis time: 0.0017306804656982422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (17), -0.26745 (17), -0.26599 (17), -0.26552 (17), -0.26532 (17), -0.26522 (17), -0.25991 (17), -0.25986 (17), -0.25980 (17), -0.25857 (17), -0.25839 (17), -0.25834 (17), -0.25821 (17), -0.25818 (17), -0.25790 (17), -0.25717 (17), -0.25623 (17), -0.25604 (17), -0.25531 (17), -0.25530 (17), 
Length of domains: 11786
Time: pickout 0.1743    decision 0.8059    set_bounds 1.0858    solve 2.2251    add 0.0517    
Accumulated time: pickout 0.3015    decision 2.0357    set_bounds 2.2734    solve 5.8898    add 0.5177    
Current (lb-rhs): -0.27287834882736206
28336 domains visited
Cumulative time: 13.970059871673584

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 1892] [/input-8, 100] [/input-8, 1884] [/input-8, 100] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26440513134002686
10 lb beta sum: 0.7754087448120117, worst -0.2626601457595825
Time: prepare 0.4679    bound 1.3238    transfer 0.0895    finalize 0.1350    func 2.1283    
Accumulated time: func 7.9192    prepare 1.4824    bound 5.1440    transfer 0.2529    finalize 0.5242    
all_split False
======================Cut inference begins======================
max lb tensor(0.75146943) min lb tensor(-0.26264238)
Number of Verified Splits: 11142 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 18
#cuts 4-6: 15
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 3.115919589996338 
BICCOS Cumulative time: 5.695883274078369
Preprocessing time: 0.5766668319702148 Inference time: 2.3196754455566406 Add cuts time: 0.21808362007141113 Cut analysis time: 0.001493692398071289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (17), -0.26745 (17), -0.26599 (17), -0.26552 (17), -0.26522 (17), -0.26264 (18), -0.25986 (17), -0.25980 (17), -0.25857 (17), -0.25834 (17), -0.25821 (17), -0.25818 (17), -0.25724 (18), -0.25623 (17), -0.25604 (17), -0.25572 (18), -0.25530 (17), -0.25523 (18), -0.25501 (17), -0.25422 (17), 
Length of domains: 8836
Time: pickout 0.1538    decision 0.8471    set_bounds 1.3131    solve 2.1346    add 0.0434    
Accumulated time: pickout 0.4553    decision 2.8828    set_bounds 3.5864    solve 8.0244    add 0.5611    
Current (lb-rhs): -0.27287834882736206
33578 domains visited
current_vram/total_varm: 34.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.78122115135193

BaB round 12
batch: 8836
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 1884] [/input-8, 1884] [/input-8, 1884] [/input-8, 1884] [/input-12, 55] [/input-8, 1884] [/input-8, 1003] [/input-8, 1884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2710033059120178
10 lb beta sum: 1.2384300231933594, worst -0.25370270013809204
Time: prepare 0.4739    bound 1.4112    transfer 0.0866    finalize 0.5316    func 2.6247    
Accumulated time: func 10.5439    prepare 1.9567    bound 6.5552    transfer 0.3394    finalize 1.0557    
all_split False
======================Cut inference begins======================
max lb tensor(1.23836732) min lb tensor(-0.25366795)
Number of Verified Splits: 14703 of 17672
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 3.7102677822113037 
BICCOS Cumulative time: 9.406151056289673
Preprocessing time: 0.6359498500823975 Inference time: 2.7933924198150635 Add cuts time: 0.2800607681274414 Cut analysis time: 0.0008647441864013672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25367 (18), -0.24712 (18), -0.24596 (18), -0.24586 (18), -0.24324 (19), -0.23933 (18), -0.23822 (18), -0.23803 (18), -0.23700 (18), -0.23638 (18), -0.23568 (19), -0.23547 (19), -0.23516 (18), -0.23101 (19), -0.23026 (18), -0.23023 (18), -0.23000 (19), -0.22999 (18), -0.22934 (19), -0.22882 (18), 
Length of domains: 2969
Time: pickout 0.2148    decision 0.5186    set_bounds 1.2419    solve 2.6311    add 0.0432    
Accumulated time: pickout 0.6701    decision 3.4014    set_bounds 4.8283    solve 10.6555    add 0.6043    
Current (lb-rhs): -0.253667950630188
36547 domains visited
Cumulative time: 30.445321321487427

BaB round 13
batch: 2969
splitting decisions: 
split level 0: [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input-8, 1909] [/input-8, 1909] [/input-12, 37] [/input, 1463] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2549588978290558
10 lb beta sum: 0.27569442987442017, worst -0.01256173849105835
Time: prepare 0.1603    bound 0.3056    transfer 0.0711    finalize 0.0509    func 0.6290    
Accumulated time: func 11.1729    prepare 2.1173    bound 6.8608    transfer 0.4106    finalize 1.1066    
all_split False
======================Cut inference begins======================
max lb tensor(0.34813282) min lb tensor(7.03334808e-06)
Number of Verified Splits: 5938 of 5938
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.5696895122528076 
BICCOS Cumulative time: 9.97584056854248
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0620    decision 0.1926    set_bounds 0.2980    solve 0.6320    add 0.0014    
Accumulated time: pickout 0.7321    decision 3.5941    set_bounds 5.1262    solve 11.2876    add 0.6058    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
36547 domains visited
Cumulative time: 32.28905534744263


Properties batch 1, size 1
Remaining timeout: 166.1145040988922
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 166.1143455505371
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 166.1143021583557
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 166.11427450180054
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37226677]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37226677]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012302398681640625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37226390838623047
10 lb beta sum: 0.0, worst -0.3722662925720215
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0606    transfer 0.0001    finalize 0.0001    func 0.0611    
Accumulated time: func 0.0611    prepare 0.0002    bound 0.0606    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 92] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 60] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 26] 
split level 8: [/input-8, 884] 
split level 9: [/input-8, 667] 
split level 10: [/input-8, 539] 
split level 11: [/input, 2232] 
split level 12: [/input, 3512] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 1956] 
split level 15: [/input, 3513] 
split level 16: [/input-8, 556] 
split level 17: [/input-8, 684] 
split level 18: [/input-8, 867] 
split level 19: [/input-8, 1884] 
split level 20: [/input-8, 659] 
split level 21: [/input, 2248] 
split level 22: [/input-8, 996] 
split level 23: [/input, 3529] 
split level 24: [/input, 1463] 
split level 25: [/input-8, 1876] 
split level 26: [/input-8, 93] 
split level 27: [/input-8, 1052] 
split level 28: [/input-8, 538] 
split level 29: [/input-8, 541] 
split level 30: [/input-8, 1460] 
split level 31: [/input-8, 1061] 
split level 32: [/input, 2521] 
split level 33: [/input, 1736] 
split level 34: [/input-8, 1892] 
split level 35: [/input, 1482] 
split level 36: [/input-8, 1003] 
split level 37: [/input-8, 508] 
split level 38: [/input-8, 92] 
split level 39: [/input-8, 988] 
split level 40: [/input-8, 1867] 
split level 41: [/input-8, 1866] 
split level 42: [/input-8, 1461] 
split level 43: [/input, 2264] 
split level 44: [/input-8, 860] 
split level 45: [/input, 1466] 
split level 46: [/input, 3272] 
split level 47: [/input-8, 801] 
split level 48: [/input-8, 1881] 
split level 49: [/input-8, 2044] 
split level 50: [/input-8, 1893] 
split level 51: [/input-8, 806] 
split level 52: [/input, 3018] 
split level 53: [/input, 3254] 
split level 54: [/input-8, 406] 
split level 55: [/input-8, 394] 
split level 56: [/input-8, 1305] 
split level 57: [/input, 3271] 
split level 58: [/input-8, 431] 
split level 59: [/input-8, 319] 
split level 60: [/input, 3704] 
split level 61: [/input, 2227] 
split level 62: [/input, 3306] 
split level 63: [/input, 3688] 
split level 64: [/input, 2251] 
split level 65: [/input-8, 90] 
split level 66: [/input, 2376] 
split level 67: [/input, 1357] 
split level 68: [/input, 2533] 
split level 69: [/input-8, 419] 
split level 70: [/input, 1717] 
split level 71: [/input, 1703] 
split level 72: [/input, 3287] 
split level 73: [/input-8, 1885] 
split level 74: [/input, 1300] 
split level 75: [/input, 3786] 
split level 76: [/input, 2332] 
split level 77: [/input, 3299] 
split level 78: [/input, 2472] 
split level 79: [/input-8, 1259] 
split level 80: [/input-8, 1123] 
split level 81: [/input, 2524] 
split level 82: [/input-8, 1910] 
split level 83: [/input, 3289] 
split level 84: [/input-8, 2016] 
split level 85: [/input-8, 395] 
split level 86: [/input-8, 507] 
split level 87: [/input, 1756] 
split level 88: [/input-8, 1048] 
split level 89: [/input-8, 1121] 
split level 90: [/input, 3305] 
split level 91: [/input-8, 2045] 
split level 92: [/input, 2515] 
split level 93: [/input-8, 2043] 
split level 94: [/input, 2506] 
split level 95: [/input-8, 1900] 
split level 96: [/input, 3290] 
split level 97: [/input-8, 1443] 
split level 98: [/input, 3310] 
split level 99: [/input, 3301] 
split level 100: [/input, 2514] 
split level 101: [/input, 2076] 
split level 102: [/input, 2381] 
split level 103: [/input-8, 1308] 
split level 104: [/input, 3548] 
split level 105: [/input, 3274] 
split level 106: [/input, 2092] 
split level 107: [/input, 1733] 
split level 108: [/input, 3269] 
split level 109: [/input-8, 1249] 
split level 110: [/input, 2379] 
split level 111: [/input, 3532] 
split level 112: [/input-8, 1909] 
split level 113: [/input-8, 1253] 
split level 114: [/input, 3282] 
split level 115: [/input, 3186] 
split level 116: [/input, 2920] 
split level 117: [/input, 2386] 
split level 118: [/input, 2534] 
split level 119: [/input, 2252] 
split level 120: [/input, 2433] 
split level 121: [/input, 3363] 
split level 122: [/input, 3783] 
split level 123: [/input, 3257] 
split level 124: [/input, 2382] 
split level 125: [/input, 3143] 
split level 126: [/input, 3297] 
split level 127: [/input, 2557] 
split level 128: [/input, 2936] 
split level 129: [/input-8, 2047] 
split level 130: [/input, 1754] 
split level 131: [/input-8, 397] 
split level 132: [/input, 2083] 
split level 133: [/input, 2540] 
split level 134: [/input-8, 1449] 
split level 135: [/input, 3128] 
split level 136: [/input, 1768] 
split level 137: [/input, 2397] 
split level 138: [/input, 2967] 
split level 139: [/input-8, 1583] 
split level 140: [/input, 423] 
split level 141: [/input, 2267] 
split level 142: [/input, 3475] 
split level 143: [/input, 3106] 
split level 144: [/input, 2363] 
split level 145: [/input, 2982] 
split level 146: [/input-8, 551] 
split level 147: [/input, 1751] 
split level 148: [/input, 2364] 
split level 149: [/input-8, 945] 
split level 150: [/input, 3116] 
split level 151: [/input-8, 84] 
split level 152: [/input, 2470] 
split level 153: [/input-8, 1021] 
split level 154: [/input, 2398] 
split level 155: [/input, 2353] 
split level 156: [/input-8, 980] 
split level 157: [/input, 1500] 
split level 158: [/input, 3672] 
split level 159: [/input, 273] 
split level 160: [/input, 1771] 
split level 161: [/input, 3754] 
split level 162: [/input, 2510] 
split level 163: [/input, 2455] 
split level 164: [/input, 3687] 
split level 165: [/input, 3734] 
split level 166: [/input, 3703] 
split level 167: [/input, 3102] 
split level 168: [/input, 2345] 
split level 169: [/input, 3134] 
split level 170: [/input, 2473] 
split level 171: [/input, 3278] 
split level 172: [/input-8, 2042] 
split level 173: [/input, 3822] 
split level 174: [/input, 3105] 
split level 175: [/input, 3833] 
split level 176: [/input, 2089] 
split level 177: [/input, 3131] 
split level 178: [/input, 2952] 
split level 179: [/input, 2346] 
split level 180: [/input, 3356] 
split level 181: [/input, 3182] 
split level 182: [/input, 2369] 
split level 183: [/input-8, 267] 
split level 184: [/input, 3174] 
split level 185: [/input-8, 1422] 
split level 186: [/input, 3719] 
split level 187: [/input, 2330] 
split level 188: [/input, 3820] 
split level 189: [/input, 3834] 
split level 190: [/input, 3054] 
split level 191: [/input, 3153] 
split level 192: [/input-8, 1887] 
split level 193: [/input, 3832] 
split level 194: [/input, 1560] 
split level 195: [/input, 3821] 
split level 196: [/input, 2413] 
split level 197: [/input, 2374] 
split level 198: [/input, 3388] 
split level 199: [/input, 3091] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.372194766998291
10 lb beta sum: 0.0, worst -0.3721945285797119
Time: prepare 0.0117    bound 0.1112    transfer 0.0023    finalize 0.0031    func 0.1311    
Accumulated time: func 0.1922    prepare 0.0222    bound 0.1718    transfer 0.0024    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.36769688) min lb tensor(-0.37219298)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01075887680053711 
BICCOS Cumulative time: 0.01075887680053711
Preprocessing time: 0.010282516479492188 Inference time: 0.0001552104949951172 Add cuts time: 7.581710815429688e-05 Cut analysis time: 0.0002453327178955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35942 (1), -0.35939 (1), -0.35907 (1), -0.35832 (1), -0.35790 (1), -0.35784 (1), -0.35783 (1), -0.35737 (1), -0.35679 (1), -0.35572 (1), -0.35427 (1), -0.35413 (1), -0.35333 (1), -0.35272 (1), -0.35246 (1), -0.35138 (1), -0.35134 (1), -0.35101 (1), -0.35089 (1), -0.35000 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5598    set_bounds 0.0103    solve 0.1312    add 0.0925    
Accumulated time: pickout 0.0004    decision 0.5598    set_bounds 0.0103    solve 0.1312    add 0.0925    
Current (lb-rhs): -0.3594231605529785
50 domains visited
Cumulative time: 0.8803842067718506

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] 
split level 3: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3526524305343628
10 lb beta sum: 0.5643506646156311, worst -0.3396764099597931
Time: prepare 0.0078    bound 0.1322    transfer 0.0019    finalize 0.0029    func 0.1476    
Accumulated time: func 0.3398    prepare 0.0302    bound 0.3041    transfer 0.0044    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.72341615) min lb tensor(-0.33942124)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01606464385986328 
BICCOS Cumulative time: 0.02682352066040039
Preprocessing time: 0.012317895889282227 Inference time: 0.001963376998901367 Add cuts time: 0.0015223026275634766 Cut analysis time: 0.00026106834411621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21028 (2), -0.20994 (2), -0.20763 (2), -0.20676 (2), -0.20596 (2), -0.20458 (2), -0.20287 (2), -0.20250 (2), -0.20185 (2), -0.20170 (2), -0.20160 (2), -0.20132 (2), -0.20097 (2), -0.19993 (2), -0.19956 (2), -0.19843 (2), -0.19774 (2), -0.19736 (2), -0.19725 (2), -0.19595 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0258    set_bounds 0.0127    solve 0.1477    add 0.0847    
Accumulated time: pickout 0.0016    decision 0.5856    set_bounds 0.0231    solve 0.2789    add 0.1772    
Current (lb-rhs): -0.21028247475624084
100 domains visited
Cumulative time: 1.1689512729644775

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 31] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6981905698776245, worst -0.2102818787097931
10 lb beta sum: 0.6981905698776245, worst -0.2081966996192932
Time: prepare 0.0182    bound 0.1318    transfer 0.0014    finalize 0.0027    func 0.1568    
Accumulated time: func 0.4965    prepare 0.0486    bound 0.4358    transfer 0.0058    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.42930502) min lb tensor(-0.20763355)
Number of Verified Splits: 74 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.01770925521850586 
BICCOS Cumulative time: 0.04453277587890625
Preprocessing time: 0.012183189392089844 Inference time: 0.0030946731567382812 Add cuts time: 0.002099275588989258 Cut analysis time: 0.00033211708068847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08856 (3), -0.08850 (3), -0.08691 (3), -0.08674 (3), -0.08641 (3), -0.08620 (3), -0.08620 (3), -0.08612 (3), -0.08583 (3), -0.08474 (3), -0.08471 (3), -0.08456 (3), -0.08371 (3), -0.08361 (3), -0.08215 (3), -0.08210 (3), -0.08202 (3), -0.08122 (3), -0.08072 (3), -0.07991 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0205    set_bounds 0.0157    solve 0.1569    add 0.0888    
Accumulated time: pickout 0.0027    decision 0.6062    set_bounds 0.0388    solve 0.4357    add 0.2660    
Current (lb-rhs): -0.08856469392776489
150 domains visited
Cumulative time: 1.470001459121704

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-8, 556] [/input-8, 556] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10333251953125
10 lb beta sum: 0.5451884865760803, worst -0.08753103017807007
Time: prepare 0.0079    bound 0.1327    transfer 0.0014    finalize 0.0035    func 0.1481    
Accumulated time: func 0.6446    prepare 0.0568    bound 0.5685    transfer 0.0072    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.64171124) min lb tensor(-0.08472903)
Number of Verified Splits: 209 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.026874780654907227 
BICCOS Cumulative time: 0.07140755653381348
Preprocessing time: 0.011864900588989258 Inference time: 0.009883642196655273 Add cuts time: 0.004257917404174805 Cut analysis time: 0.0008683204650878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02611 (4), -0.02605 (4), -0.02603 (4), -0.02600 (4), -0.02500 (4), -0.02472 (4), -0.02459 (4), -0.02457 (4), -0.02440 (4), -0.02402 (4), -0.02397 (4), -0.02396 (4), -0.02384 (4), -0.02382 (4), -0.02376 (4), -0.02372 (4), -0.02244 (4), -0.02243 (4), -0.02183 (4), -0.02121 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0205    set_bounds 0.0152    solve 0.1482    add 0.1048    
Accumulated time: pickout 0.0038    decision 0.6267    set_bounds 0.0540    solve 0.5839    add 0.3708    
Current (lb-rhs): -0.026114284992218018
200 domains visited
Cumulative time: 1.786966323852539

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 1] 
split level 2: [/input-12, 60] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 60] [/input-8, 875] [/input-8, 875] [/input-12, 60] [/input-12, 60] [/input-8, 875] 
split level 3: [/input-12, 37] [/input-8, 988] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-12, 37] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08737754821777344
10 lb beta sum: 0.965366780757904, worst -0.016910314559936523
Time: prepare 0.0084    bound 0.1679    transfer 0.0017    finalize 0.0029    func 0.1836    
Accumulated time: func 0.8282    prepare 0.0655    bound 0.7364    transfer 0.0089    finalize 0.0152    
all_split False
======================Cut inference begins======================
max lb tensor(0.67920601) min lb tensor(-0.01341569)
Number of Verified Splits: 377 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.04491424560546875 
BICCOS Cumulative time: 0.11632180213928223
Preprocessing time: 0.01326751708984375 Inference time: 0.0187685489654541 Add cuts time: 0.012121915817260742 Cut analysis time: 0.0007562637329101562
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0205    set_bounds 0.0154    solve 0.1837    add 0.0278    
Accumulated time: pickout 0.0049    decision 0.6472    set_bounds 0.0694    solve 0.7676    add 0.3986    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([92, 45]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.49388510e-10, 1.95881296e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([92, 45]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.49388510e-10, 9.90081728e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [0.022020863369107246], [2]), '/input-12': (tensor([92, 26, 31, 45]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 5.60388863e-02, 2.87621588e-01]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [0.022020863369107246], [2]), '/input-12': (tensor([92, 26, 31, 45]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 5.60388863e-02, 2.04140320e-01]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [0.022020863369107246], [2]), '/input-12': (tensor([92, 26, 31]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 3.00574183e-01]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [7.827456182775232e+31, 0.0720769464969635], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 2.75765151e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [7.827456182775232e+31, 0.0720769464969635], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 1.50639787e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [7.827456182775232e+31, 0.07813091576099396], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 4.02238905e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [7.827456182775232e+31, 0.07813091576099396], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 6.14809692e-02, 1.50507182e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, -1.0], [0, 0], [0.02142624743282795, 0.07245543599128723], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.30089179e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, -1.0], [0, 0], [0.02142624743282795, 0.07245543599128723], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.51840582e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, 1.0], [0, 0], [0.02142624743282795, 0.0788954347372055], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.27014667e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, 1.0], [0, 0], [0.02142624743282795, 0.0788954347372055], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.52123749e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [7.827456182775232e+31, 0.07278163731098175], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.22664735e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [7.827456182775232e+31, 0.07278163731098175], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.52546734e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [7.827456182775232e+31, 0.07880130410194397], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.34028673e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [7.827456182775232e+31, 0.07880130410194397], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.90033186e-14, 5.61544597e-02, 1.52416244e-01]), tensor([0, 1, 4]))}
Shallow branching resets to n domains:  17
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32731378078460693
10 lb beta sum: 0.38232433795928955, worst -0.31433334946632385
Time: prepare 0.0007    bound 0.1709    transfer 0.0005    finalize 0.0003    func 0.1725    
Accumulated time: func 1.0007    prepare 0.0662    bound 0.9073    transfer 0.0094    finalize 0.0155    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 26] 
split level 5: [/input-8, 875] 
split level 6: [/input-8, 556] 
split level 7: [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.08673624694347382
10 lb beta sum: 0.7106413841247559, worst -0.08613424003124237
Time: prepare 0.0118    bound 0.1649    transfer 0.0011    finalize 0.0017    func 0.1812    
Accumulated time: func 1.1819    prepare 0.0784    bound 1.0722    transfer 0.0105    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.18925257) min lb tensor(-0.08596341)
Number of Verified Splits: 160 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531546115875, worst -0.359563410282135
10 lb beta sum: 1.0785250663757324, worst -0.3142915368080139
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts 7-9: 6
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.5301902294158936 
BICCOS Cumulative time: 0.6465120315551758
Preprocessing time: 0.007628440856933594 Inference time: 0.5155079364776611 Add cuts time: 0.005686044692993164 Cut analysis time: 0.001367807388305664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08596 (8), -0.08427 (8), -0.08291 (8), -0.07970 (8), -0.07665 (8), -0.07635 (8), -0.07534 (8), -0.07500 (8), -0.07474 (8), -0.07473 (8), -0.07202 (8), -0.07153 (8), -0.06976 (8), -0.06961 (8), -0.06794 (8), -0.06637 (8), -0.06266 (8), -0.06194 (8), -0.06160 (8), -0.06106 (8), 
Length of domains: 96
Time: pickout 0.0005    decision 0.0232    set_bounds 0.0259    solve 0.1813    add 0.0015    
Accumulated time: pickout 0.0054    decision 0.6704    set_bounds 0.0953    solve 0.9490    add 0.4001    
Current (lb-rhs): -0.0859634131193161
296 domains visited
Cumulative time: 3.0707027912139893

BaB round 2
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-8, 1061] [/input-8, 538] [/input-8, 1460] [/input-8, 659] [/input-8, 659] [/input-8, 1460] [/input-8, 1061] [/input-8, 538] [/input-8, 1061] [/input-8, 659] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0782245397567749
10 lb beta sum: 0.015153199434280396, worst -0.07798361778259277
Time: prepare 0.0087    bound 0.1679    transfer 0.0013    finalize 0.0026    func 0.1830    
Accumulated time: func 1.3649    prepare 0.0873    bound 1.2401    transfer 0.0118    finalize 0.0198    
all_split False
======================Cut inference begins======================
max lb tensor(0.60888171) min lb tensor(-0.07789183)
Number of Verified Splits: 209 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03385663032531738 
BICCOS Cumulative time: 0.6803686618804932
Preprocessing time: 0.011673212051391602 Inference time: 0.0193784236907959 Add cuts time: 0.002427816390991211 Cut analysis time: 0.0003771781921386719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07789 (10), -0.07588 (10), -0.07452 (10), -0.07152 (10), -0.06926 (10), -0.06868 (10), -0.06828 (10), -0.06824 (10), -0.06743 (10), -0.06720 (10), -0.06715 (10), -0.06629 (10), -0.06542 (10), -0.06472 (10), -0.06413 (10), -0.06410 (10), -0.06241 (10), -0.06215 (10), -0.06104 (10), -0.06104 (10), 
Length of domains: 175
Time: pickout 0.0023    decision 0.0182    set_bounds 0.0284    solve 0.1831    add 0.0017    
Accumulated time: pickout 0.0077    decision 0.6886    set_bounds 0.1236    solve 1.1321    add 0.4018    
Current (lb-rhs): -0.07789182662963867
471 domains visited
Cumulative time: 3.339855194091797

BaB round 3
batch: 175
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 659] [/input-8, 659] [/input-8, 659] [/input, 3529] [/input, 3529] [/input-8, 659] [/input-8, 659] [/input-8, 1061] [/input, 3529] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0720524787902832
10 lb beta sum: 0.32383641600608826, worst -0.07192158699035645
Time: prepare 0.0084    bound 0.1480    transfer 0.0013    finalize 0.0024    func 0.1625    
Accumulated time: func 1.5275    prepare 0.0959    bound 1.3881    transfer 0.0131    finalize 0.0223    
all_split False
======================Cut inference begins======================
max lb tensor(0.69688129) min lb tensor(-0.07186627)
Number of Verified Splits: 318 of 350
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.04259657859802246 
BICCOS Cumulative time: 0.7229652404785156
Preprocessing time: 0.01045536994934082 Inference time: 0.02867269515991211 Add cuts time: 0.0029985904693603516 Cut analysis time: 0.0004699230194091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07187 (11), -0.07182 (11), -0.06674 (11), -0.06340 (11), -0.06318 (11), -0.06229 (11), -0.06212 (11), -0.06151 (11), -0.06086 (11), -0.06042 (11), -0.05935 (11), -0.05734 (11), -0.05703 (11), -0.05597 (11), -0.05416 (11), -0.05392 (11), -0.05316 (11), -0.05290 (11), -0.05254 (11), -0.05213 (11), 
Length of domains: 32
Time: pickout 0.0031    decision 0.0195    set_bounds 0.0143    solve 0.1626    add 0.0011    
Accumulated time: pickout 0.0108    decision 0.7081    set_bounds 0.1379    solve 1.2947    add 0.4030    
Current (lb-rhs): -0.07186627388000488
503 domains visited
Cumulative time: 3.5851552486419678

BaB round 4
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input, 1463] [/input, 1463] [/input, 3529] [/input-8, 538] [/input, 1463] [/input, 1463] [/input, 3529] [/input-8, 538] [/input, 1463] 
split level 1: [/input-8, 1460] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1460] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1460] [/input-8, 538] 
split level 2: [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1460] [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1460] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052039504051208496
10 lb beta sum: 0.5822661519050598, worst -0.043833062052726746
Time: prepare 0.0063    bound 0.1637    transfer 0.0009    finalize 0.0018    func 0.1745    
Accumulated time: func 1.7019    prepare 0.1024    bound 1.5518    transfer 0.0140    finalize 0.0240    
all_split False
======================Cut inference begins======================
max lb tensor(0.05626814) min lb tensor(-0.04372770)
Number of Verified Splits: 128 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.02534937858581543 
BICCOS Cumulative time: 0.748314619064331
Preprocessing time: 0.00933384895324707 Inference time: 0.014316082000732422 Add cuts time: 0.0012743473052978516 Cut analysis time: 0.00042510032653808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04373 (14), -0.04174 (14), -0.04078 (14), -0.04032 (14), -0.03878 (14), -0.03776 (14), -0.03704 (14), -0.03458 (14), -0.03449 (14), -0.03420 (14), -0.03419 (14), -0.03335 (14), -0.03306 (14), -0.03281 (14), -0.03223 (14), -0.03166 (14), -0.03125 (14), -0.03090 (14), -0.03074 (14), -0.03071 (14), 
Length of domains: 128
Time: pickout 0.0018    decision 0.0136    set_bounds 0.0194    solve 0.1746    add 0.0016    
Accumulated time: pickout 0.0126    decision 0.7217    set_bounds 0.1573    solve 1.4693    add 0.4046    
Current (lb-rhs): -0.04372769594192505
631 domains visited
Cumulative time: 3.8224658966064453

BaB round 5
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04682803153991699
10 lb beta sum: 0.4208202660083771, worst -0.040164828300476074
Time: prepare 0.0067    bound 0.1684    transfer 0.0011    finalize 0.0020    func 0.1800    
Accumulated time: func 1.8819    prepare 0.1094    bound 1.7202    transfer 0.0151    finalize 0.0260    
all_split False
======================Cut inference begins======================
max lb tensor(0.03723814) min lb tensor(-0.04012918)
Number of Verified Splits: 96 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.021216392517089844 
BICCOS Cumulative time: 0.7695310115814209
Preprocessing time: 0.008913755416870117 Inference time: 0.010158300399780273 Add cuts time: 0.0016789436340332031 Cut analysis time: 0.00046539306640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04013 (15), -0.03879 (15), -0.03684 (15), -0.03664 (15), -0.03582 (15), -0.03485 (15), -0.03401 (15), -0.03366 (15), -0.03300 (15), -0.03290 (15), -0.03156 (15), -0.03057 (15), -0.03051 (15), -0.03031 (15), -0.03001 (15), -0.02985 (15), -0.02872 (15), -0.02864 (15), -0.02845 (15), -0.02780 (15), 
Length of domains: 160
Time: pickout 0.0027    decision 0.0168    set_bounds 0.0111    solve 0.1801    add 0.0019    
Accumulated time: pickout 0.0153    decision 0.7384    set_bounds 0.1685    solve 1.6494    add 0.4065    
Current (lb-rhs): -0.04012918472290039
791 domains visited
Cumulative time: 4.057111978530884

BaB round 6
batch: 160
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input, 3529] [/input-8, 541] [/input, 3529] [/input, 3529] [/input-8, 541] [/input, 3529] [/input-8, 541] [/input, 3529] [/input-8, 541] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04125344753265381
10 lb beta sum: 0.4118797481060028, worst -0.03483617305755615
Time: prepare 0.0082    bound 0.1650    transfer 0.0025    finalize 0.0021    func 0.1800    
Accumulated time: func 2.0619    prepare 0.1178    bound 1.8852    transfer 0.0176    finalize 0.0281    
all_split False
======================Cut inference begins======================
max lb tensor(0.26225686) min lb tensor(-0.03483295)
Number of Verified Splits: 215 of 320
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03573417663574219 
BICCOS Cumulative time: 0.8052651882171631
Preprocessing time: 0.00954127311706543 Inference time: 0.023938417434692383 Add cuts time: 0.0017714500427246094 Cut analysis time: 0.0004830360412597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03483 (16), -0.03327 (16), -0.03245 (16), -0.03174 (16), -0.03151 (16), -0.03030 (16), -0.02949 (16), -0.02911 (16), -0.02876 (16), -0.02869 (16), -0.02863 (16), -0.02779 (16), -0.02654 (16), -0.02651 (16), -0.02632 (16), -0.02567 (16), -0.02521 (16), -0.02506 (16), -0.02413 (16), -0.02375 (16), 
Length of domains: 105
Time: pickout 0.0031    decision 0.0212    set_bounds 0.0138    solve 0.1801    add 0.0016    
Accumulated time: pickout 0.0184    decision 0.7597    set_bounds 0.1823    solve 1.8295    add 0.4081    
Current (lb-rhs): -0.03483295440673828
896 domains visited
Cumulative time: 4.314114093780518

BaB round 7
batch: 105
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3512] [/input, 3512] [/input, 3512] [/input-8, 541] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03649628162384033
10 lb beta sum: 0.4528680741786957, worst -0.027262017130851746
Time: prepare 0.0056    bound 0.1694    transfer 0.0017    finalize 0.0017    func 0.1797    
Accumulated time: func 2.2416    prepare 0.1236    bound 2.0545    transfer 0.0192    finalize 0.0298    
all_split False
======================Cut inference begins======================
max lb tensor(0.12364745) min lb tensor(-0.02725083)
Number of Verified Splits: 171 of 210
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.02852320671081543 
BICCOS Cumulative time: 0.8337883949279785
Preprocessing time: 0.006550788879394531 Inference time: 0.02008342742919922 Add cuts time: 0.0014274120330810547 Cut analysis time: 0.000461578369140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02725 (17), -0.02427 (17), -0.02408 (17), -0.02151 (17), -0.02113 (17), -0.01973 (17), -0.01854 (17), -0.01831 (17), -0.01794 (17), -0.01676 (17), -0.01659 (17), -0.01510 (17), -0.01496 (17), -0.01457 (17), -0.01362 (17), -0.01268 (17), -0.01228 (17), -0.01137 (17), -0.01118 (17), -0.01017 (17), 
Length of domains: 39
Time: pickout 0.0026    decision 0.0178    set_bounds 0.0094    solve 0.1798    add 0.0012    
Accumulated time: pickout 0.0210    decision 0.7775    set_bounds 0.1917    solve 2.0093    add 0.4093    
Current (lb-rhs): -0.027250826358795166
935 domains visited
Cumulative time: 4.554298162460327

BaB round 8
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 1003] [/input-8, 1061] [/input-8, 1003] [/input-8, 1003] [/input-8, 1061] [/input-8, 1061] [/input-8, 1003] [/input-8, 1003] [/input-8, 1061] 
split level 1: [/input-8, 1003] [/input-8, 1061] [/input-8, 1003] [/input-8, 1061] [/input-8, 1061] [/input-8, 1003] [/input-8, 1003] [/input-8, 1061] [/input-8, 1061] [/input-8, 1003] 
split level 2: [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7342997789382935, worst -0.012688398361206055
10 lb beta sum: 0.7342997789382935, worst -0.012670636177062988
Time: prepare 0.0160    bound 0.1633    transfer 0.0014    finalize 0.0019    func 0.1846    
Accumulated time: func 2.4262    prepare 0.1398    bound 2.2178    transfer 0.0206    finalize 0.0317    
all_split False
======================Cut inference begins======================
max lb tensor(0.01853395) min lb tensor(-0.01266325)
Number of Verified Splits: 222 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03946948051452637 
BICCOS Cumulative time: 0.8732578754425049
Preprocessing time: 0.009260892868041992 Inference time: 0.028214693069458008 Add cuts time: 0.001344442367553711 Cut analysis time: 0.0006494522094726562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01266 (20), -0.01208 (20), -0.01191 (20), -0.01150 (20), -0.01147 (20), -0.01092 (20), -0.01075 (20), -0.01037 (20), -0.00969 (20), -0.00960 (20), -0.00931 (20), -0.00915 (20), -0.00910 (20), -0.00905 (20), -0.00892 (20), -0.00889 (20), -0.00873 (20), -0.00866 (20), -0.00856 (20), -0.00848 (20), 
Length of domains: 90
Time: pickout 0.0016    decision 0.0164    set_bounds 0.0218    solve 0.1847    add 0.0019    
Accumulated time: pickout 0.0225    decision 0.7939    set_bounds 0.2135    solve 2.1940    add 0.4111    
Current (lb-rhs): -0.01266324520111084
1025 domains visited
Cumulative time: 4.821506023406982

BaB round 9
batch: 90
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input, 2248] [/input, 2248] [/input, 2248] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input, 2248] 
split level 1: [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 1461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5544373393058777, worst -0.005434215068817139
10 lb beta sum: 0.5544373393058777, worst -0.005429565906524658
Time: prepare 0.0186    bound 0.1684    transfer 0.0015    finalize 0.0028    func 0.1936    
Accumulated time: func 2.6199    prepare 0.1585    bound 2.3862    transfer 0.0221    finalize 0.0344    
all_split False
======================Cut inference begins======================
max lb tensor(0.02773115) min lb tensor(-0.00542349)
Number of Verified Splits: 336 of 360
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.05830955505371094 
BICCOS Cumulative time: 0.9315674304962158
Preprocessing time: 0.01076650619506836 Inference time: 0.045757293701171875 Add cuts time: 0.0012509822845458984 Cut analysis time: 0.0005347728729248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00542 (22), -0.00425 (22), -0.00419 (22), -0.00351 (22), -0.00302 (22), -0.00271 (22), -0.00248 (22), -0.00229 (22), -0.00209 (22), -0.00195 (22), -0.00147 (22), -0.00127 (22), -0.00126 (22), -0.00123 (22), -0.00093 (22), -0.00093 (22), -0.00067 (22), -0.00056 (22), -0.00055 (22), -0.00050 (22), 
Length of domains: 24
Time: pickout 0.0029    decision 0.0173    set_bounds 0.0258    solve 0.1938    add 0.0014    
Accumulated time: pickout 0.0254    decision 0.8112    set_bounds 0.2393    solve 2.3878    add 0.4125    
Current (lb-rhs): -0.005423486232757568
1049 domains visited
Cumulative time: 5.122960805892944

BaB round 10
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2248] [/input, 2248] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] 
split level 1: [/input-8, 1052] [/input-8, 1052] [/input, 3272] [/input, 3272] [/input-8, 801] [/input, 1466] [/input-8, 801] [/input, 1466] [/input, 1466] [/input, 1466] 
split level 2: [/input, 1466] [/input, 1466] [/input, 1466] [/input, 1466] [/input-8, 860] [/input, 3272] [/input-8, 1461] [/input, 3272] [/input, 3272] [/input-8, 860] 
split level 3: [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input, 3272] [/input-8, 1461] [/input, 3272] [/input-8, 860] [/input-8, 860] [/input, 3272] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00932323932647705

all verified at 0th iter
Time: prepare 0.0097    bound 0.0060    transfer 0.0019    finalize 0.0024    func 0.0224    
Accumulated time: func 2.6423    prepare 0.1685    bound 2.3922    transfer 0.0240    finalize 0.0368    
all_split False
======================Cut inference begins======================
max lb tensor(0.04338396) min lb tensor(0.00932324)
Number of Verified Splits: 384 of 384
No cut inferred: All or none verified.
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.011070489883422852 
BICCOS Cumulative time: 0.9426379203796387
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0054    decision 0.0163    set_bounds 0.0339    solve 0.0225    add 0.0005    
Accumulated time: pickout 0.0308    decision 0.8275    set_bounds 0.2732    solve 2.4103    add 0.4130    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1049 domains visited
Cumulative time: 5.214275598526001


Properties batch 5, size 1
Remaining timeout: 160.60641193389893
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 160.60630989074707
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 160.60628008842468
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 160.60625171661377
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 39.3941 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [467]; unstable size 467; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 467] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 467] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 467] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 228] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97516215,  1.98761272,  0.85461819, -0.25794786,  1.12561274,
          1.30599141,  2.30291867, -0.37233806,  1.60615587]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63235426, -6.99965382, -3.16620398, -4.74267912, -3.64146614,
          -5.16480732, -5.39866543, -6.50665092, -4.55494928, -6.46017027],
         [-2.63235426, -6.99965382, -3.16620398, -4.74267912, -3.64146614,
          -5.16480732, -5.39866543, -6.50665092, -4.55494928, -6.46017027]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53384972,  0.47526217,  1.38874531]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0798 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48303747, -10.29648781,  -4.77946949,  -6.41142654,  -3.71523380,
          -6.92542839,  -5.50940371,  -7.37353468,  -9.88126087,  -9.47254848]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 427] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 427] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 238] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.48654866, 5.05169868, 0.07906580, 1.63433266, 2.04545784, 0.66316915,
         2.76845455, 4.94088602, 4.35907745]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.12282085,  -8.68214226, -10.30647087, -10.71084213,  -9.83157253,
         -12.23327827, -10.64780331, -11.54215813,  -3.88245940,  -8.45811939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 654] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 654] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 193] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.77125740, 3.34607601, 4.68589306, 5.31103897, 4.23434258, 6.53741455,
         5.22720718, 5.57845974, 3.04642582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0688 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 611] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 611] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 277] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.15812969,  6.06970501,  0.46179670, -0.24430570, -0.42243236,
          1.52134788,  1.26745129,  4.78580761,  5.02399111]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.09659863, -11.14431095,  -4.78569984,  -3.24227643,  -4.00490522,
           -3.02182770,  -6.23932791,  -5.82052755,  -9.75665855, -10.23669529],
         [ -9.09659863, -11.14431095,  -4.78569984,  -3.24227643,  -4.00490522,
           -3.02182770,  -6.23932791,  -5.82052755,  -9.75665855, -10.23669529]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76262879, -0.22044873]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0381 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.02367878, -16.68686485,  -9.24556446, -13.41522598, -11.11723232,
         -13.42477131, -11.50259304, -13.30918312, -17.15509415, -16.44651794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 297, 1, 639] with unstable size 296 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 639] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [296]; unstable size 296; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 296] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 296] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.69086027, 5.29207325, 2.62997866, 0.65836817, 2.47528172, 0.66326332,
         2.12296391, 6.32425117, 5.31157303]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20210648,  -8.82046795, -12.04976559, -10.42980194, -10.17031384,
         -10.70486259, -10.72393131,  -9.02217484, -12.87825584,  -7.13908768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 635] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 635] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 210] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.61224699, 0.46522063, 2.92189741, 1.71166372, 1.48281288, 1.75262117,
         1.73563385, 0.26523209, 4.10882807]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0327 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [568]; unstable size 568; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 568] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 568] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 568] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 231] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97100043,  5.75294304,  2.62268901, -0.44995359,  2.71119261,
          1.17250752,  2.60135579,  3.52469110,  4.91072893]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.13951874, -14.36657238,  -7.07374001, -10.33502197,  -7.07293224,
          -10.55265427,  -9.27702045, -10.69626236, -12.32909775, -13.79920959]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00080776]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0796 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 544] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 544] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 204] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09186602,  1.89036942,  0.01000285, -0.14229453,  0.23984718,
          0.71584272,  0.47055030,  3.11726570,  2.74282694]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]100%|██████████| 1/1 [00:00<00:00,  8.48it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00582647, -6.23171902, -3.06578517, -3.62733269, -3.13952780,
          -3.98571920, -4.44840622, -4.01183987, -7.31225204, -6.86313581]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07374263]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1209 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.540643692016602
alpha/beta optimization time: 1.2815165519714355
initial alpha-crown bounds: tensor([[ 2.13471866,  1.94881105,  0.04223776, -0.12571079,  0.27320933,
          0.80250359,  0.49561954,  3.17971754,  2.78953791]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.12571078538894653
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5280725955963
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.52801966667175
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5279896259308
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.52796506881714
Verifying property 3 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12571079]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
        -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12571079]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 544
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 200
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 757
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011277198791503906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.125710129737854
10 lb beta sum: 0.0, worst -0.12571555376052856
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    func 0.0564    
Accumulated time: func 0.0564    prepare 0.0002    bound 0.0559    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 33] 
split level 3: [/input-12, 40] 
split level 4: [/input-8, 179] 
split level 5: [/input-8, 2044] 
split level 6: [/input, 1448] 
split level 7: [/input-8, 296] 
split level 8: [/input-8, 1028] 
split level 9: [/input-8, 2016] 
split level 10: [/input, 1689] 
split level 11: [/input, 1688] 
split level 12: [/input-8, 493] 
split level 13: [/input, 454] 
split level 14: [/input, 1705] 
split level 15: [/input, 2121] 
split level 16: [/input-8, 2042] 
split level 17: [/input, 2105] 
split level 18: [/input-8, 1733] 
split level 19: [/input, 453] 
split level 20: [/input, 298] 
split level 21: [/input, 1321] 
split level 22: [/input, 1305] 
split level 23: [/input-8, 259] 
split level 24: [/input, 3524] 
split level 25: [/input-8, 138] 
split level 26: [/input, 2244] 
split level 27: [/input-8, 2036] 
split level 28: [/input, 362] 
split level 29: [/input-8, 494] 
split level 30: [/input-8, 469] 
split level 31: [/input, 2485] 
split level 32: [/input-8, 787] 
split level 33: [/input-8, 598] 
split level 34: [/input, 1703] 
split level 35: [/input, 3555] 
split level 36: [/input-8, 1053] 
split level 37: [/input-8, 501] 
split level 38: [/input-8, 597] 
split level 39: [/input, 2155] 
split level 40: [/input, 1337] 
split level 41: [/input-8, 477] 
split level 42: [/input, 2578] 
split level 43: [/input-8, 140] 
split level 44: [/input-8, 439] 
split level 45: [/input, 3237] 
split level 46: [/input-8, 452] 
split level 47: [/input-8, 423] 
split level 48: [/input, 77] 
split level 49: [/input-8, 2045] 
split level 50: [/input, 2215] 
split level 51: [/input-8, 2031] 
split level 52: [/input, 312] 
split level 53: [/input-8, 2035] 
split level 54: [/input, 435] 
split level 55: [/input-8, 921] 
split level 56: [/input-8, 2034] 
split level 57: [/input, 2137] 
split level 58: [/input-8, 473] 
split level 59: [/input-8, 2037] 
split level 60: [/input-8, 980] 
split level 61: [/input, 469] 
split level 62: [/input, 3401] 
split level 63: [/input, 2453] 
split level 64: [/input-8, 925] 
split level 65: [/input, 3385] 
split level 66: [/input-8, 1947] 
split level 67: [/input, 2625] 
split level 68: [/input, 3239] 
split level 69: [/input-8, 872] 
split level 70: [/input-8, 431] 
split level 71: [/input-8, 500] 
split level 72: [/input, 2211] 
split level 73: [/input, 3163] 
split level 74: [/input-8, 2023] 
split level 75: [/input-8, 2025] 
split level 76: [/input-8, 1970] 
split level 77: [/input-8, 1977] 
split level 78: [/input, 3222] 
split level 79: [/input, 438] 
split level 80: [/input, 282] 
split level 81: [/input, 2580] 
split level 82: [/input, 2214] 
split level 83: [/input, 2195] 
split level 84: [/input-8, 924] 
split level 85: [/input, 214] 
split level 86: [/input-8, 478] 
split level 87: [/input, 2473] 
split level 88: [/input-8, 429] 
split level 89: [/input, 3560] 
split level 90: [/input, 213] 
split level 91: [/input, 379] 
split level 92: [/input-8, 486] 
split level 93: [/input, 378] 
split level 94: [/input, 1720] 
split level 95: [/input, 2610] 
split level 96: [/input, 4037] 
split level 97: [/input, 296] 
split level 98: [/input, 3954] 
split level 99: [/input, 3211] 
split level 100: [/input-8, 794] 
split level 101: [/input, 193] 
split level 102: [/input-8, 1925] 
split level 103: [/input-8, 124] 
split level 104: [/input, 2189] 
split level 105: [/input-8, 590] 
split level 106: [/input-8, 2032] 
split level 107: [/input, 401] 
split level 108: [/input, 179] 
split level 109: [/input, 2153] 
split level 110: [/input, 2261] 
split level 111: [/input, 3511] 
split level 112: [/input-8, 1994] 
split level 113: [/input, 197] 
split level 114: [/input, 1355] 
split level 115: [/input, 3220] 
split level 116: [/input-8, 454] 
split level 117: [/input, 1371] 
split level 118: [/input, 2082] 
split level 119: [/input, 2474] 
split level 120: [/input, 2212] 
split level 121: [/input-8, 392] 
split level 122: [/input, 3876] 
split level 123: [/input-8, 398] 
split level 124: [/input, 2196] 
split level 125: [/input-8, 1452] 
split level 126: [/input, 4038] 
split level 127: [/input-8, 1990] 
split level 128: [/input, 102] 
split level 129: [/input, 1339] 
split level 130: [/input, 4020] 
split level 131: [/input, 2089] 
split level 132: [/input, 3801] 
split level 133: [/input, 103] 
split level 134: [/input, 1323] 
split level 135: [/input, 3414] 
split level 136: [/input-8, 2046] 
split level 137: [/input, 2182] 
split level 138: [/input, 199] 
split level 139: [/input, 3196] 
split level 140: [/input-8, 1390] 
split level 141: [/input, 98] 
split level 142: [/input, 3180] 
split level 143: [/input, 68] 
split level 144: [/input, 129] 
split level 145: [/input, 2190] 
split level 146: [/input, 3145] 
split level 147: [/input-8, 449] 
split level 148: [/input-8, 397] 
split level 149: [/input, 196] 
split level 150: [/input, 3161] 
split level 151: [/input, 472] 
split level 152: [/input-8, 1610] 
split level 153: [/input, 1381] 
split level 154: [/input, 3111] 
split level 155: [/input-8, 1989] 
split level 156: [/input, 2075] 
split level 157: [/input, 3226] 
split level 158: [/input-8, 1979] 
split level 159: [/input, 3750] 
split level 160: [/input, 3114] 
split level 161: [/input, 1913] 
split level 162: [/input, 3800] 
split level 163: [/input, 3755] 
split level 164: [/input, 3112] 
split level 165: [/input-8, 1124] 
split level 166: [/input, 111] 
split level 167: [/input, 3047] 
split level 168: [/input, 3081] 
split level 169: [/input, 3429] 
split level 170: [/input, 1576] 
split level 171: [/input, 1592] 
split level 172: [/input, 2280] 
split level 173: [/input-8, 412] 
split level 174: [/input, 3785] 
split level 175: [/input-8, 395] 
split level 176: [/input, 2341] 
split level 177: [/input, 2059] 
split level 178: [/input, 3048] 
split level 179: [/input, 3173] 
split level 180: [/input, 58] 
split level 181: [/input-8, 2022] 
split level 182: [/input, 89] 
split level 183: [/input, 2081] 
split level 184: [/input, 265] 
split level 185: [/input-8, 2006] 
split level 186: [/input-8, 1993] 
split level 187: [/input, 2052] 
split level 188: [/input, 3967] 
split level 189: [/input, 3452] 
split level 190: [/input, 1865] 
split level 191: [/input, 3337] 
split level 192: [/input, 72] 
split level 193: [/input, 3019] 
split level 194: [/input, 3098] 
split level 195: [/input, 2314] 
split level 196: [/input, 464] 
split level 197: [/input, 156] 
split level 198: [/input, 3300] 
split level 199: [/input, 2352] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12571078538894653
10 lb beta sum: 0.0, worst -0.1257106065750122
Time: prepare 0.0117    bound 0.1009    transfer 0.0019    finalize 0.0036    func 0.1208    
Accumulated time: func 0.1773    prepare 0.0221    bound 0.1568    transfer 0.0020    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(0.02029556) min lb tensor(-0.12570739)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01169729232788086 
BICCOS Cumulative time: 0.01169729232788086
Preprocessing time: 0.010810375213623047 Inference time: 0.0005702972412109375 Add cuts time: 7.510185241699219e-05 Cut analysis time: 0.0002415180206298828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12096 (1), -0.12093 (1), -0.12088 (1), -0.12064 (1), -0.12044 (1), -0.12023 (1), -0.12020 (1), -0.12015 (1), -0.12013 (1), -0.12004 (1), -0.11999 (1), -0.11969 (1), -0.11949 (1), -0.11942 (1), -0.11908 (1), -0.11907 (1), -0.11889 (1), -0.11885 (1), -0.11871 (1), -0.11832 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5240    set_bounds 0.0104    solve 0.1209    add 0.0744    
Accumulated time: pickout 0.0003    decision 0.5240    set_bounds 0.0104    solve 0.1209    add 0.0744    
Current (lb-rhs): -0.12095969915390015
50 domains visited
Cumulative time: 0.8036167621612549

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 40] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11638379096984863
10 lb beta sum: 0.5046917796134949, worst -0.07249754667282104
Time: prepare 0.0079    bound 0.1223    transfer 0.0007    finalize 0.0028    func 0.1364    
Accumulated time: func 0.3137    prepare 0.0303    bound 0.2791    transfer 0.0027    finalize 0.0065    
all_split False
======================Cut inference begins======================
max lb tensor(0.35519597) min lb tensor(-0.07244572)
Number of Verified Splits: 148 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.021392345428466797 
BICCOS Cumulative time: 0.033089637756347656
Preprocessing time: 0.012740373611450195 Inference time: 0.006252288818359375 Add cuts time: 0.002115011215209961 Cut analysis time: 0.0002846717834472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04607 (2), -0.04596 (2), -0.04589 (2), -0.04579 (2), -0.04569 (2), -0.04561 (2), -0.04554 (2), -0.04540 (2), -0.04534 (2), -0.04533 (2), -0.04508 (2), -0.04506 (2), -0.04491 (2), -0.04477 (2), -0.04465 (2), -0.04457 (2), -0.04434 (2), -0.04421 (2), -0.04383 (2), -0.04373 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0122    solve 0.1365    add 0.0923    
Accumulated time: pickout 0.0015    decision 0.5439    set_bounds 0.0226    solve 0.2575    add 0.1667    
Current (lb-rhs): -0.046071648597717285
100 domains visited
Cumulative time: 1.0874176025390625

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8368811011314392, worst -0.04607117176055908
10 lb beta sum: 0.8368811011314392, worst -0.04742412269115448
Time: prepare 0.0180    bound 0.1222    transfer 0.0008    finalize 0.0025    func 0.1468    
Accumulated time: func 0.4606    prepare 0.0486    bound 0.4013    transfer 0.0035    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.46004492) min lb tensor(-0.04584786)
Number of Verified Splits: 150 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.022867918014526367 
BICCOS Cumulative time: 0.05595755577087402
Preprocessing time: 0.012774944305419922 Inference time: 0.006923675537109375 Add cuts time: 0.0028967857360839844 Cut analysis time: 0.00027251243591308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03640 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03612 (3), -0.03595 (3), -0.03588 (3), -0.03588 (3), -0.03557 (3), -0.03550 (3), -0.03497 (3), -0.03484 (3), -0.03445 (3), -0.03436 (3), -0.03398 (3), -0.03395 (3), -0.03395 (3), -0.03394 (3), -0.03394 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0200    set_bounds 0.0181    solve 0.1470    add 0.1363    
Accumulated time: pickout 0.0027    decision 0.5639    set_bounds 0.0406    solve 0.4044    add 0.3030    
Current (lb-rhs): -0.03640085458755493
150 domains visited
Cumulative time: 1.433133840560913

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 2044] 
split level 3: [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8377211093902588, worst -0.03640037775039673
10 lb beta sum: 0.8377211093902588, worst -0.03755645453929901
Time: prepare 0.0179    bound 0.1297    transfer 0.0008    finalize 0.0031    func 0.1545    
Accumulated time: func 0.6151    prepare 0.0668    bound 0.5309    transfer 0.0044    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.46546537) min lb tensor(-0.03631860)
Number of Verified Splits: 135 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.023659467697143555 
BICCOS Cumulative time: 0.07961702346801758
Preprocessing time: 0.013470649719238281 Inference time: 0.006839752197265625 Add cuts time: 0.0030548572540283203 Cut analysis time: 0.0002942085266113281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02527 (4), -0.02527 (4), -0.02527 (4), -0.02520 (4), -0.02519 (4), -0.02519 (4), -0.02519 (4), -0.02517 (4), -0.02511 (4), -0.02511 (4), -0.02511 (4), -0.02508 (4), -0.02508 (4), -0.02508 (4), -0.02508 (4), -0.02484 (4), -0.02418 (4), -0.02415 (4), -0.02400 (4), -0.02387 (4), 
Length of domains: 50
Time: pickout 0.0020    decision 0.0225    set_bounds 0.0172    solve 0.1546    add 0.3093    
Accumulated time: pickout 0.0047    decision 0.5865    set_bounds 0.0578    solve 0.5591    add 0.6123    
Current (lb-rhs): -0.025272831320762634
200 domains visited
Cumulative time: 1.9627363681793213

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input, 89] [/input-8, 2042] [/input-8, 2042] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8371503949165344, worst -0.025272652506828308
10 lb beta sum: 0.8371503949165344, worst -0.027121320366859436
Time: prepare 0.0180    bound 0.1194    transfer 0.0017    finalize 0.0027    func 0.1445    
Accumulated time: func 0.7595    prepare 0.0850    bound 0.6504    transfer 0.0060    finalize 0.0147    
all_split False
======================Cut inference begins======================
max lb tensor(0.47148412) min lb tensor(-0.02527265)
Number of Verified Splits: 126 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.02146601676940918 
BICCOS Cumulative time: 0.10108304023742676
Preprocessing time: 0.011759042739868164 Inference time: 0.006569385528564453 Add cuts time: 0.0028738975524902344 Cut analysis time: 0.0002636909484863281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01814 (5), -0.01807 (5), -0.01792 (5), -0.01787 (5), -0.01785 (5), -0.01768 (5), -0.01724 (5), -0.01724 (5), -0.01724 (5), -0.01717 (5), -0.01717 (5), -0.01717 (5), -0.01708 (5), -0.01708 (5), -0.01708 (5), -0.01702 (5), -0.01702 (5), -0.01702 (5), -0.01699 (5), -0.01699 (5), 
Length of domains: 50
Time: pickout 0.0017    decision 0.0198    set_bounds 0.0164    solve 0.1446    add 0.0995    
Accumulated time: pickout 0.0064    decision 0.6063    set_bounds 0.0742    solve 0.7036    add 0.7118    
Current (lb-rhs): -0.018135353922843933
250 domains visited
Cumulative time: 2.2665719985961914

Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [7.827324651646058e+31, 0.0068626864813268185, 0.007401274051517248], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.06610985, 0.00011490]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [7.827324651646058e+31, 0.0068626864813268185, 0.007401274051517248], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.06610985, 0.48751682]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 179, 1028, 2044]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.82732465e+31, 6.86268648e-03, 3.35632428e-03]), tensor([0, 2, 3])), '/input-12': ([40], [-1.0], [0], [0.06610985100269318], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028], [-1.0, 1.0], [0, 0], [7.827324651646058e+31, 0.00333301885984838], [0, 2]), '/input-12': (tensor([40, 35]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.06610985, 0.00010590]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028], [-1.0, 1.0], [0, 0], [7.827324651646058e+31, 0.00333301885984838], [0, 2]), '/input-12': (tensor([40, 35]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.06610985, 0.48905736]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [7.827324651646058e+31, 0.006906346883624792, 0.006778316106647253], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07176311, 0.00022210]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [7.827324651646058e+31, 0.006906346883624792, 0.006778316106647253], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07176311, 0.48859766]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, 1.0], [0, 0, 0], [7.827324651646058e+31, 0.006906346883624792, 0.003360913833603263], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07176311, 0.00014423]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, 1.0], [0, 0, 0], [7.827324651646058e+31, 0.006906346883624792, 0.003360913833603263], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07176311, 0.48926574]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, -1.0], [0, 0, 0], [7.827324651646058e+31, 0.0035615728702396154, 0.006658719386905432], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07176311, 0.00014179]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, -1.0], [0, 0, 0], [7.827324651646058e+31, 0.0035615728702396154, 0.006658719386905432], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07176311, 0.48802739]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, 1.0], [0, 0, 0], [7.827324651646058e+31, 0.0035615728702396154, 0.003383802017197013], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.17631131e-02, 9.39832462e-05]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, 1.0], [0, 0, 0], [7.827324651646058e+31, 0.0035615728702396154, 0.003383802017197013], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07176311, 0.48905987]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([179]), tensor([1.]), tensor([0]), tensor([7.82732465e+31]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12408900260925293
10 lb beta sum: 0.2709725797176361, worst -0.0709906816482544
Time: prepare 0.0006    bound 0.1160    transfer 0.0003    finalize 0.0002    func 0.1173    
Accumulated time: func 0.8768    prepare 0.0856    bound 0.7664    transfer 0.0063    finalize 0.0150    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 58] 
split level 2: [/input-8, 2042] [/input-12, 33] [/input-8, 2044] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-12, 33] 
split level 3: [/input, 214] [/input-8, 2042] [/input-8, 2042] [/input, 214] [/input, 214] [/input, 214] [/input, 214] [/input-12, 40] 
split level 4: [/input, 1719] [/input, 214] [/input, 214] [/input, 472] [/input, 472] [/input, 472] [/input, 472] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5458825826644897, worst -0.05446271598339081
10 lb beta sum: 0.5458825826644897, worst -0.054381921887397766
Time: prepare 0.0124    bound 0.1172    transfer 0.0006    finalize 0.0023    func 0.1343    
Accumulated time: func 1.0111    prepare 0.0983    bound 0.8837    transfer 0.0069    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.77321380) min lb tensor(-0.05435245)
Number of Verified Splits: 200 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5575119853019714, worst -0.07906967401504517
10 lb beta sum: 0.6177944540977478, worst -0.06447075307369232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.2604401111602783 
BICCOS Cumulative time: 0.3615231513977051
Preprocessing time: 0.007712364196777344 Inference time: 0.2475757598876953 Add cuts time: 0.00487208366394043 Cut analysis time: 0.0002799034118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05435 (5), -0.05105 (5), -0.04720 (5), -0.04410 (5), -0.02477 (5), -0.02362 (5), -0.02167 (5), -0.02118 (5), -0.02104 (5), -0.02078 (5), -0.02008 (5), -0.01977 (5), -0.01825 (5), -0.01808 (5), -0.01803 (5), -0.01722 (5), -0.01708 (5), -0.01673 (5), -0.01644 (5), -0.01530 (5), 
Length of domains: 56
Time: pickout 0.0009    decision 0.0161    set_bounds 0.0301    solve 0.1344    add 0.0013    
Accumulated time: pickout 0.0073    decision 0.6224    set_bounds 0.1043    solve 0.8380    add 0.7131    
Current (lb-rhs): -0.054352447390556335
306 domains visited
Cumulative time: 2.859070062637329

BaB round 2
batch: 56
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1053] [/input-8, 1053] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 1053] [/input-8, 2044] [/input-8, 1053] [/input-8, 1053] 
split level 1: [/input-8, 787] [/input-8, 787] [/input, 1719] [/input, 1719] [/input, 1719] [/input, 1719] [/input, 1719] [/input-8, 2042] [/input-8, 787] [/input, 1719] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5043492913246155, worst -0.04969523847103119
10 lb beta sum: 0.5043492913246155, worst -0.04966716468334198
Time: prepare 0.0109    bound 0.1178    transfer 0.0016    finalize 0.0014    func 0.1332    
Accumulated time: func 1.1443    prepare 0.1095    bound 1.0015    transfer 0.0085    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.00664206) min lb tensor(-0.04964416)
Number of Verified Splits: 30 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 3
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.010503530502319336 
BICCOS Cumulative time: 0.3720266819000244
Preprocessing time: 0.006874561309814453 Inference time: 0.002834320068359375 Add cuts time: 0.0004057884216308594 Cut analysis time: 0.00038886070251464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04964 (7), -0.04834 (7), -0.04627 (7), -0.04498 (7), -0.04251 (7), -0.04185 (7), -0.04097 (7), -0.04066 (7), -0.03933 (7), -0.03844 (7), -0.03783 (7), -0.03727 (7), -0.03568 (7), -0.03443 (7), -0.03247 (7), -0.03120 (7), -0.02070 (7), -0.01990 (7), -0.01967 (7), -0.01888 (7), 
Length of domains: 194
Time: pickout 0.0025    decision 0.0139    set_bounds 0.0157    solve 0.1333    add 0.0015    
Accumulated time: pickout 0.0098    decision 0.6362    set_bounds 0.1200    solve 0.9713    add 0.7146    
Current (lb-rhs): -0.04964415729045868
500 domains visited
Cumulative time: 3.037259340286255

BaB round 3
batch: 194
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input, 4038] [/input-8, 787] [/input-8, 1053] [/input, 213] [/input-8, 787] [/input, 213] [/input-8, 787] [/input, 213] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0471896231174469
10 lb beta sum: 6.761718395864591e-05, worst -0.047139972448349
Time: prepare 0.0096    bound 0.1542    transfer 0.0007    finalize 0.0022    func 0.1694    
Accumulated time: func 1.3137    prepare 0.1193    bound 1.1557    transfer 0.0092    finalize 0.0208    
all_split False
======================Cut inference begins======================
max lb tensor(0.00663328) min lb tensor(-0.04711449)
Number of Verified Splits: 105 of 388
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 3
#cuts 4-6: 9
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.02455449104309082 
BICCOS Cumulative time: 0.39658117294311523
Preprocessing time: 0.011308431625366211 Inference time: 0.010318517684936523 Add cuts time: 0.002228975296020508 Cut analysis time: 0.0006985664367675781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04711 (8), -0.04638 (8), -0.04582 (8), -0.04509 (8), -0.04369 (8), -0.04295 (8), -0.04240 (8), -0.04166 (8), -0.04069 (8), -0.03926 (8), -0.03918 (8), -0.03853 (8), -0.03808 (8), -0.03751 (8), -0.03735 (8), -0.03734 (8), -0.03597 (8), -0.03579 (8), -0.03578 (8), -0.03507 (8), 
Length of domains: 283
Time: pickout 0.0029    decision 0.0220    set_bounds 0.0170    solve 0.1695    add 0.0019    
Accumulated time: pickout 0.0127    decision 0.6582    set_bounds 0.1371    solve 1.1408    add 0.7165    
Current (lb-rhs): -0.04711449146270752
783 domains visited
Cumulative time: 3.2762715816497803

BaB round 4
batch: 283
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1703] [/input, 213] [/input, 1689] [/input, 213] [/input, 1703] [/input, 213] [/input-8, 1053] [/input-8, 1053] [/input-8, 1053] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04685664176940918
10 lb beta sum: 0.0004916442558169365, worst -0.04684168100357056
Time: prepare 0.0140    bound 0.1566    transfer 0.0017    finalize 0.0030    func 0.1791    
Accumulated time: func 1.4928    prepare 0.1336    bound 1.3123    transfer 0.0109    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.00622344) min lb tensor(-0.04682940)
Number of Verified Splits: 203 of 566
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 4
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.04230499267578125 
BICCOS Cumulative time: 0.4388861656188965
Preprocessing time: 0.016772747039794922 Inference time: 0.021570682525634766 Add cuts time: 0.002921581268310547 Cut analysis time: 0.0010399818420410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04683 (9), -0.04609 (9), -0.04553 (9), -0.04479 (9), -0.04336 (9), -0.04262 (9), -0.04206 (9), -0.04132 (9), -0.04074 (9), -0.04045 (9), -0.03955 (9), -0.03943 (9), -0.03899 (9), -0.03824 (9), -0.03824 (9), -0.03780 (9), -0.03729 (9), -0.03713 (9), -0.03704 (9), -0.03653 (9), 
Length of domains: 363
Time: pickout 0.0046    decision 0.0287    set_bounds 0.0253    solve 0.1793    add 0.0033    
Accumulated time: pickout 0.0173    decision 0.6869    set_bounds 0.1624    solve 1.3200    add 0.7198    
Current (lb-rhs): -0.046829402446746826
1146 domains visited
Cumulative time: 3.561399459838867

BaB round 5
batch: 363
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input, 1703] [/input, 362] [/input, 1703] [/input, 1703] [/input, 1703] [/input-8, 1053] [/input, 1703] [/input-8, 477] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04504510760307312
10 lb beta sum: 0.01818239316344261, worst -0.04502883553504944
Time: prepare 0.0180    bound 0.1551    transfer 0.0034    finalize 0.0040    func 0.1853    
Accumulated time: func 1.6781    prepare 0.1518    bound 1.4674    transfer 0.0143    finalize 0.0278    
all_split False
======================Cut inference begins======================
max lb tensor(0.00718361) min lb tensor(-0.04501745)
Number of Verified Splits: 284 of 726
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 5
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.05518460273742676 
BICCOS Cumulative time: 0.49407076835632324
Preprocessing time: 0.021023988723754883 Inference time: 0.02991509437561035 Add cuts time: 0.003502368927001953 Cut analysis time: 0.0007431507110595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04502 (10), -0.04406 (10), -0.04371 (10), -0.04275 (10), -0.04161 (10), -0.04072 (10), -0.04056 (10), -0.04032 (10), -0.04026 (10), -0.04024 (10), -0.03926 (10), -0.03892 (10), -0.03847 (10), -0.03783 (10), -0.03759 (10), -0.03743 (10), -0.03724 (10), -0.03715 (10), -0.03658 (10), -0.03642 (10), 
Length of domains: 442
Time: pickout 0.0065    decision 0.0315    set_bounds 0.0309    solve 0.1855    add 0.0058    
Accumulated time: pickout 0.0238    decision 0.7184    set_bounds 0.1932    solve 1.5055    add 0.7256    
Current (lb-rhs): -0.04501745104789734
1588 domains visited
Cumulative time: 3.878596305847168

BaB round 6
batch: 442
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1689] [/input-8, 787] [/input, 1689] [/input-8, 787] [/input, 1689] [/input, 362] [/input, 213] [/input, 1689] [/input-8, 787] [/input, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042530834674835205
10 lb beta sum: 0.02428824082016945, worst -0.042495280504226685
Time: prepare 0.0225    bound 0.1583    transfer 0.0017    finalize 0.0051    func 0.1935    
Accumulated time: func 1.8716    prepare 0.1745    bound 1.6257    transfer 0.0160    finalize 0.0330    
all_split False
======================Cut inference begins======================
max lb tensor(0.00630301) min lb tensor(-0.04248613)
Number of Verified Splits: 275 of 884
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 5
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.06291675567626953 
BICCOS Cumulative time: 0.5569875240325928
Preprocessing time: 0.025668621063232422 Inference time: 0.032827138900756836 Add cuts time: 0.003629446029663086 Cut analysis time: 0.0007915496826171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04249 (11), -0.04223 (11), -0.04200 (11), -0.04119 (11), -0.04093 (11), -0.04070 (11), -0.03988 (11), -0.03903 (11), -0.03893 (11), -0.03857 (11), -0.03848 (11), -0.03839 (11), -0.03792 (11), -0.03773 (11), -0.03763 (11), -0.03745 (11), -0.03742 (11), -0.03720 (11), -0.03710 (11), -0.03664 (11), 
Length of domains: 609
Time: pickout 0.0067    decision 0.0352    set_bounds 0.0372    solve 0.1938    add 0.0093    
Accumulated time: pickout 0.0306    decision 0.7536    set_bounds 0.2304    solve 1.6993    add 0.7350    
Current (lb-rhs): -0.04248613119125366
2197 domains visited
Cumulative time: 4.2258641719818115

BaB round 7
batch: 609
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 438] [/input-8, 469] [/input, 438] [/input, 1703] [/input, 438] [/input, 438] [/input-8, 2034] [/input, 438] [/input-8, 469] [/input-8, 2034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04108142852783203
10 lb beta sum: 0.01375646237283945, worst -0.04107409715652466
Time: prepare 0.0306    bound 0.1691    transfer 0.0029    finalize 0.0078    func 0.2187    
Accumulated time: func 2.0903    prepare 0.2053    bound 1.7948    transfer 0.0189    finalize 0.0408    
all_split False
======================Cut inference begins======================
max lb tensor(0.00623131) min lb tensor(-0.04106951)
Number of Verified Splits: 385 of 1218
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.08464884757995605 
BICCOS Cumulative time: 0.6416363716125488
Preprocessing time: 0.037557363510131836 Inference time: 0.04170823097229004 Add cuts time: 0.004683732986450195 Cut analysis time: 0.0006995201110839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04107 (12), -0.04059 (12), -0.03976 (12), -0.03970 (12), -0.03945 (12), -0.03929 (12), -0.03920 (12), -0.03891 (12), -0.03841 (12), -0.03814 (12), -0.03792 (12), -0.03777 (12), -0.03762 (12), -0.03746 (12), -0.03721 (12), -0.03715 (12), -0.03689 (12), -0.03656 (12), -0.03649 (12), -0.03632 (12), 
Length of domains: 833
Time: pickout 0.0117    decision 0.0437    set_bounds 0.0533    solve 0.2190    add 0.0065    
Accumulated time: pickout 0.0423    decision 0.7973    set_bounds 0.2838    solve 1.9183    add 0.7415    
Current (lb-rhs): -0.04106950759887695
3030 domains visited
Cumulative time: 4.647978067398071

BaB round 8
batch: 833
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input, 1703] [/input-8, 2034] [/input, 362] [/input-8, 2034] [/input-8, 494] [/input-8, 2034] [/input, 1703] [/input-8, 2034] [/input-8, 2034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.039524465799331665
10 lb beta sum: 0.005848236382007599, worst -0.03952166438102722
Time: prepare 0.0435    bound 0.1948    transfer 0.0082    finalize 0.0100    func 0.2676    
Accumulated time: func 2.3578    prepare 0.2491    bound 1.9896    transfer 0.0271    finalize 0.0508    
all_split False
======================Cut inference begins======================
max lb tensor(0.00670095) min lb tensor(-0.03951931)
Number of Verified Splits: 362 of 1666
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 8
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.09865140914916992 
BICCOS Cumulative time: 0.7402877807617188
Preprocessing time: 0.052445173263549805 Inference time: 0.041474342346191406 Add cuts time: 0.004004716873168945 Cut analysis time: 0.0007271766662597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03952 (13), -0.03903 (13), -0.03821 (13), -0.03806 (13), -0.03785 (13), -0.03774 (13), -0.03757 (13), -0.03747 (13), -0.03731 (13), -0.03699 (13), -0.03676 (13), -0.03676 (13), -0.03655 (13), -0.03627 (13), -0.03626 (13), -0.03624 (13), -0.03615 (13), -0.03602 (13), -0.03594 (13), -0.03591 (13), 
Length of domains: 1304
Time: pickout 0.0116    decision 0.2299    set_bounds 0.0725    solve 0.2680    add 0.0092    
Accumulated time: pickout 0.0539    decision 1.0272    set_bounds 0.3562    solve 2.1863    add 0.7507    
Current (lb-rhs): -0.039519309997558594
4334 domains visited
Cumulative time: 5.341414213180542

BaB round 9
batch: 1304
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 494] [/input-8, 473] [/input, 438] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 473] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03829926252365112
10 lb beta sum: 0.0023864666000008583, worst -0.038297057151794434
Time: prepare 0.0665    bound 0.2683    transfer 0.0094    finalize 0.0152    func 0.3771    
Accumulated time: func 2.7349    prepare 0.3158    bound 2.2580    transfer 0.0365    finalize 0.0659    
all_split False
======================Cut inference begins======================
max lb tensor(0.00546873) min lb tensor(-0.03829622)
Number of Verified Splits: 303 of 2608
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 10
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.1237325668334961 
BICCOS Cumulative time: 0.8640203475952148
Preprocessing time: 0.08088231086730957 Inference time: 0.03794145584106445 Add cuts time: 0.0041348934173583984 Cut analysis time: 0.0007739067077636719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03830 (14), -0.03781 (14), -0.03698 (14), -0.03683 (14), -0.03663 (14), -0.03652 (14), -0.03648 (14), -0.03635 (14), -0.03625 (14), -0.03609 (14), -0.03599 (14), -0.03577 (14), -0.03551 (14), -0.03532 (14), -0.03519 (14), -0.03518 (14), -0.03517 (14), -0.03505 (14), -0.03491 (14), -0.03480 (14), 
Length of domains: 2305
Time: pickout 0.0188    decision 0.0820    set_bounds 0.1146    solve 0.3776    add 0.0188    
Accumulated time: pickout 0.0727    decision 1.1092    set_bounds 0.4708    solve 2.5640    add 0.7694    
Current (lb-rhs): -0.03829622268676758
6639 domains visited
Cumulative time: 6.082272291183472

BaB round 10
batch: 2305
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input-8, 501] [/input-8, 2016] [/input-8, 597] [/input-8, 2016] [/input-8, 2034] [/input-8, 2016] [/input-8, 494] [/input, 3385] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03730061650276184
10 lb beta sum: 0.005214531905949116, worst -0.0373041033744812
Time: prepare 0.1252    bound 0.4179    transfer 0.0201    finalize 0.0274    func 0.6214    
Accumulated time: func 3.3563    prepare 0.4413    bound 2.6758    transfer 0.0566    finalize 0.0933    
all_split False
======================Cut inference begins======================
max lb tensor(0.00590024) min lb tensor(-0.03729922)
Number of Verified Splits: 342 of 4610
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 4
#cuts 7-9: 5
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.19483566284179688 
BICCOS Cumulative time: 1.0588560104370117
Preprocessing time: 0.14516925811767578 Inference time: 0.045168161392211914 Add cuts time: 0.0036163330078125 Cut analysis time: 0.0008819103240966797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03730 (15), -0.03681 (15), -0.03598 (15), -0.03582 (15), -0.03562 (15), -0.03552 (15), -0.03534 (15), -0.03527 (15), -0.03524 (15), -0.03508 (15), -0.03478 (15), -0.03477 (15), -0.03450 (15), -0.03433 (15), -0.03415 (15), -0.03404 (15), -0.03397 (15), -0.03396 (15), -0.03392 (15), -0.03381 (15), 
Length of domains: 4268
Time: pickout 0.0362    decision 0.1327    set_bounds 0.3640    solve 0.6230    add 0.0247    
Accumulated time: pickout 0.1090    decision 1.2419    set_bounds 0.8348    solve 3.1869    add 0.7942    
Current (lb-rhs): -0.03729921579360962
10907 domains visited
Cumulative time: 7.4653401374816895

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2016] [/input-8, 2034] [/input-8, 2035] [/input, 435] [/input-8, 2035] [/input-8, 501] [/input-8, 2035] [/input-8, 2016] [/input-8, 494] [/input-8, 2016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.035346150398254395
10 lb beta sum: 0.005925134755671024, worst -0.035345762968063354
Time: prepare 0.2221    bound 0.6778    transfer 0.0283    finalize 0.0486    func 1.0318    
Accumulated time: func 4.3881    prepare 0.6637    bound 3.3537    transfer 0.0849    finalize 0.1418    
all_split False
======================Cut inference begins======================
max lb tensor(0.00555097) min lb tensor(-0.03534216)
Number of Verified Splits: 319 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 4
#cuts 7-9: 17
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 0.32448458671569824 
BICCOS Cumulative time: 1.38334059715271
Preprocessing time: 0.26331019401550293 Inference time: 0.05215597152709961 Add cuts time: 0.007027387619018555 Cut analysis time: 0.0019910335540771484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03534 (16), -0.03489 (16), -0.03486 (16), -0.03470 (16), -0.03443 (16), -0.03427 (16), -0.03422 (16), -0.03386 (16), -0.03377 (16), -0.03367 (16), -0.03355 (16), -0.03341 (16), -0.03339 (16), -0.03334 (15), -0.03328 (16), -0.03324 (16), -0.03322 (16), -0.03312 (16), -0.03311 (16), -0.03302 (16), 
Length of domains: 8045
Time: pickout 0.0609    decision 0.2278    set_bounds 0.5630    solve 1.0342    add 0.0549    
Accumulated time: pickout 0.1699    decision 1.4697    set_bounds 1.3979    solve 4.2211    add 0.8491    
Current (lb-rhs): -0.03534215688705444
18780 domains visited
current_vram/total_varm: 10.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.743030071258545

BaB round 12
batch: 8045
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input, 435] [/input-8, 494] [/input, 435] [/input-8, 494] [/input-8, 2034] [/input-8, 597] [/input, 435] [/input, 1703] [/input, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03423747420310974
10 lb beta sum: 0.0034240528475493193, worst -0.03423920273780823
Time: prepare 0.4370    bound 1.2659    transfer 0.0704    finalize 0.0931    func 1.9728    
Accumulated time: func 6.3609    prepare 1.1011    bound 4.6196    transfer 0.1553    finalize 0.2350    
all_split False
======================Cut inference begins======================
max lb tensor(0.00559566) min lb tensor(-0.03423613)
Number of Verified Splits: 1098 of 16090
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 74.
#cuts 1-3: 4
#cuts 4-6: 3
#cuts 7-9: 58
#cuts 10-12: 9
#cuts >= 20: 0
BICCOS time: 1.0014317035675049 
BICCOS Cumulative time: 2.384772300720215
Preprocessing time: 0.5261952877044678 Inference time: 0.4420332908630371 Add cuts time: 0.028673171997070312 Cut analysis time: 0.0045299530029296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03424 (17), -0.03376 (17), -0.03361 (17), -0.03313 (17), -0.03295 (17), -0.03278 (17), -0.03274 (17), -0.03256 (17), -0.03253 (17), -0.03248 (17), -0.03232 (17), -0.03232 (17), -0.03230 (16), -0.03227 (17), -0.03220 (17), -0.03217 (17), -0.03215 (17), -0.03213 (17), -0.03213 (17), -0.03207 (17), 
Length of domains: 14992
Time: pickout 0.1543    decision 0.6371    set_bounds 0.9628    solve 1.9762    add 0.0699    
Accumulated time: pickout 0.3242    decision 2.1068    set_bounds 2.3607    solve 6.1973    add 0.9190    
Current (lb-rhs): -0.034236133098602295
33772 domains visited
Cumulative time: 14.571288108825684

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 2045] [/input-8, 2035] [/input-8, 477] [/input-8, 2035] [/input, 435] [/input-8, 473] [/input-8, 2016] [/input, 3385] [/input-8, 2016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0331290066242218
10 lb beta sum: 0.0019554332830011845, worst -0.05812589451670647
Time: prepare 0.7008    bound 1.3292    transfer 0.0784    finalize 0.1055    func 2.3240    
Accumulated time: func 8.6849    prepare 1.8023    bound 5.9488    transfer 0.2337    finalize 0.3405    
all_split False
======================Cut inference begins======================
max lb tensor(0.00567500) min lb tensor(-0.03312659)
Number of Verified Splits: 1497 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 113.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 89
#cuts 10-12: 9
#cuts >= 20: 0
BICCOS time: 1.1821718215942383 
BICCOS Cumulative time: 3.566944122314453
Preprocessing time: 0.5296657085418701 Inference time: 0.24712395668029785 Add cuts time: 0.3985908031463623 Cut analysis time: 0.006791353225708008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03313 (18), -0.03295 (17), -0.03278 (17), -0.03263 (18), -0.03250 (18), -0.03248 (17), -0.03232 (17), -0.03220 (17), -0.03201 (18), -0.03173 (17), -0.03169 (17), -0.03163 (18), -0.03143 (18), -0.03122 (18), -0.03119 (17), -0.03117 (18), -0.03115 (18), -0.03108 (18), -0.03106 (18), -0.03105 (18), 
Length of domains: 21687
Time: pickout 0.1278    decision 0.4510    set_bounds 0.7566    solve 2.3285    add 0.0893    
Accumulated time: pickout 0.4520    decision 2.5578    set_bounds 3.1173    solve 8.5258    add 1.0083    
Current (lb-rhs): -0.0331265926361084
48659 domains visited
current_vram/total_varm: 26.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 19.541701078414917

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2035] [/input-8, 2035] [/input-8, 2035] [/input-8, 1053] [/input-8, 477] [/input-8, 1053] [/input-8, 2034] [/input-8, 2035] [/input-8, 501] [/input-8, 2035] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03184577822685242
10 lb beta sum: 0.0012150644324719906, worst -0.045549891889095306
Time: prepare 0.9119    bound 2.6642    transfer 0.1575    finalize 0.5691    func 4.5203    
Accumulated time: func 13.2052    prepare 2.7147    bound 8.6130    transfer 0.3912    finalize 0.9096    
all_split False
======================Cut inference begins======================
max lb tensor(0.00703526) min lb tensor(-0.03184193)
Number of Verified Splits: 4037 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 165.
#cuts 1-3: 4
#cuts 4-6: 33
#cuts 7-9: 117
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 2.319261312484741 
BICCOS Cumulative time: 5.886205434799194
Preprocessing time: 1.0643718242645264 Inference time: 1.1045775413513184 Add cuts time: 0.14111924171447754 Cut analysis time: 0.009192705154418945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03184 (18), -0.03173 (19), -0.03168 (18), -0.03136 (18), -0.03125 (19), -0.03121 (18), -0.03111 (19), -0.03110 (18), -0.03063 (19), -0.03062 (18), -0.03060 (18), -0.03056 (18), -0.03022 (19), -0.03011 (18), -0.03010 (18), -0.03010 (19), -0.03002 (19), -0.02988 (18), -0.02987 (18), -0.02985 (18), 
Length of domains: 34034
Time: pickout 0.2537    decision 1.6421    set_bounds 1.8573    solve 4.5261    add 0.1301    
Accumulated time: pickout 0.7057    decision 4.1999    set_bounds 4.9745    solve 13.0519    add 1.1384    
Current (lb-rhs): -0.031841933727264404
77390 domains visited
current_vram/total_varm: 42.2GB/99.9GB, batch_size increase to 32768
Cumulative time: 30.344526052474976

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input-8, 2045] [/input-8, 2035] [/input-8, 2045] [/input, 3385] [/input, 3385] [/input-8, 597] [/input-8, 2045] [/input, 3401] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030440419912338257
10 lb beta sum: 0.0009459048160351813, worst -0.048036303371191025
Time: prepare 1.8430    bound 10.6743    transfer 0.3696    finalize 1.0296    func 14.3563    
Accumulated time: func 27.5615    prepare 4.5582    bound 19.2873    transfer 0.7607    finalize 1.9392    
all_split False
======================Cut inference begins======================
max lb tensor(0.00966419) min lb tensor(-0.03043461)
Number of Verified Splits: 9337 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 234.
#cuts 1-3: 4
#cuts 4-6: 61
#cuts 7-9: 153
#cuts 10-12: 16
#cuts >= 20: 0
BICCOS time: 4.731138467788696 
BICCOS Cumulative time: 10.61734390258789
Preprocessing time: 2.8164916038513184 Inference time: 1.5736315250396729 Add cuts time: 0.32792162895202637 Cut analysis time: 0.013093709945678711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03043 (19), -0.03027 (19), -0.03020 (20), -0.02998 (19), -0.02982 (19), -0.02974 (20), -0.02969 (19), -0.02959 (20), -0.02948 (19), -0.02924 (19), -0.02916 (19), -0.02912 (20), -0.02897 (19), -0.02870 (20), -0.02868 (19), -0.02862 (20), -0.02859 (20), -0.02850 (20), -0.02848 (19), -0.02847 (19), 
Length of domains: 57465
Time: pickout 0.5072    decision 3.3195    set_bounds 3.6876    solve 14.3677    add 0.2801    
Accumulated time: pickout 1.2130    decision 7.5195    set_bounds 8.6622    solve 27.4196    add 1.4185    
Current (lb-rhs): -0.030434608459472656
133589 domains visited
Cumulative time: 57.40499138832092

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 501] [/input, 435] [/input-8, 501] [/input, 435] [/input-8, 477] [/input-8, 478] [/input-8, 477] [/input-8, 477] [/input-8, 597] [/input, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028920084238052368
10 lb beta sum: 0.012299553491175175, worst -0.04110914468765259
Time: prepare 1.8497    bound 10.8908    transfer 0.3741    finalize 1.3265    func 14.8829    
Accumulated time: func 42.4444    prepare 6.4083    bound 30.1782    transfer 1.1349    finalize 3.2657    
all_split False
======================Cut inference begins======================
max lb tensor(0.01208840) min lb tensor(-0.02891314)
Number of Verified Splits: 11720 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 263.
#cuts 1-3: 4
#cuts 4-6: 106
#cuts 7-9: 142
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 5.666706085205078 
BICCOS Cumulative time: 16.28404998779297
Preprocessing time: 2.236396074295044 Inference time: 2.9120736122131348 Add cuts time: 0.5046472549438477 Cut analysis time: 0.013589143753051758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03020 (20), -0.02974 (20), -0.02959 (20), -0.02912 (20), -0.02891 (20), -0.02875 (20), -0.02870 (20), -0.02850 (20), -0.02847 (20), -0.02830 (20), -0.02825 (20), -0.02825 (20), -0.02824 (20), -0.02817 (20), -0.02809 (20), -0.02805 (20), -0.02800 (20), -0.02782 (20), -0.02781 (20), -0.02772 (20), 
Length of domains: 78513
Time: pickout 0.5389    decision 3.9926    set_bounds 3.8931    solve 14.8965    add 0.2872    
Accumulated time: pickout 1.7519    decision 11.5121    set_bounds 12.5552    solve 42.3161    add 1.7058    
Current (lb-rhs): -0.030204594135284424
187405 domains visited
Cumulative time: 86.89937949180603

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2045] [/input, 3385] [/input-8, 477] [/input, 3401] [/input-8, 501] [/input, 3401] [/input-8, 2045] [/input-8, 2045] [/input-8, 597] [/input, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02890413999557495
10 lb beta sum: 0.04690425097942352, worst -0.052291885018348694
Time: prepare 1.8923    bound 11.0548    transfer 0.3762    finalize 1.5326    func 15.2891    
Accumulated time: func 57.7336    prepare 8.3012    bound 41.2329    transfer 1.5111    finalize 4.7983    
all_split False
======================Cut inference begins======================
max lb tensor(0.01028710) min lb tensor(-0.02890250)
Number of Verified Splits: 15049 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 337.
#cuts 1-3: 4
#cuts 4-6: 117
#cuts 7-9: 205
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 6.887396574020386 
BICCOS Cumulative time: 23.171446561813354
Preprocessing time: 2.221172571182251 Inference time: 3.6366231441497803 Add cuts time: 1.012258529663086 Cut analysis time: 0.017342329025268555
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02891 (20), -0.02890 (21), -0.02875 (20), -0.02847 (20), -0.02830 (20), -0.02828 (21), -0.02817 (20), -0.02772 (20), -0.02769 (21), -0.02767 (21), -0.02763 (20), -0.02740 (21), -0.02727 (21), -0.02723 (21), -0.02719 (21), -0.02719 (20), -0.02711 (21), -0.02711 (21), -0.02707 (20), -0.02696 (20), 
Length of domains: 96232
Time: pickout 0.5649    decision 3.3191    set_bounds 4.2956    solve 15.3036    add 0.2211    
Accumulated time: pickout 2.3168    decision 14.8311    set_bounds 16.8509    solve 57.6197    add 1.9269    
Current (lb-rhs): -0.028913140296936035
237892 domains visited
Cumulative time: 117.73265385627747

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2045] [/input-8, 2035] [/input-8, 478] [/input-8, 501] [/input-8, 597] [/input-8, 501] [/input, 3163] [/input-8, 501] [/input-8, 478] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027612745761871338
10 lb beta sum: 0.05653025954961777, worst -0.046098556369543076
Time: prepare 1.9113    bound 11.2957    transfer 0.3813    finalize 0.5318    func 15.8397    
Accumulated time: func 73.5732    prepare 10.2131    bound 52.5286    transfer 1.8923    finalize 5.3301    
all_split False
======================Cut inference begins======================
max lb tensor(0.01167217) min lb tensor(-0.02761227)
Number of Verified Splits: 17533 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 285.
#cuts 1-3: 5
#cuts 4-6: 99
#cuts 7-9: 171
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 6.37756872177124 
BICCOS Cumulative time: 29.549015283584595
Preprocessing time: 2.2464606761932373 Inference time: 2.9382829666137695 Add cuts time: 1.1776995658874512 Cut analysis time: 0.015125513076782227
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02890 (21), -0.02828 (21), -0.02769 (21), -0.02767 (21), -0.02761 (21), -0.02745 (21), -0.02740 (21), -0.02723 (21), -0.02719 (21), -0.02696 (20), -0.02695 (21), -0.02695 (21), -0.02687 (21), -0.02686 (21), -0.02679 (20), -0.02678 (21), -0.02653 (20), -0.02650 (21), -0.02649 (21), -0.02643 (20), 
Length of domains: 111467
Time: pickout 0.5650    decision 3.3437    set_bounds 4.4952    solve 15.8538    add 0.2171    
Accumulated time: pickout 2.8818    decision 18.1748    set_bounds 21.3461    solve 73.4734    add 2.1440    
Current (lb-rhs): -0.028902500867843628
285895 domains visited
Cumulative time: 148.89769840240479

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input, 3385] [/input, 3385] [/input-8, 598] [/input, 2215] [/input-8, 124] [/input-8, 477] [/input-8, 1970] [/input-8, 2045] [/input-8, 1970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026871293783187866
10 lb beta sum: 0.10938326269388199, worst -0.05277615785598755
Time: prepare 1.9239    bound 11.1282    transfer 0.3827    finalize 0.5575    func 14.4366    
Accumulated time: func 88.0099    prepare 12.1375    bound 63.6568    transfer 2.2750    finalize 5.8876    
all_split False
======================Cut inference begins======================
max lb tensor(0.01000577) min lb tensor(-0.02686679)
Number of Verified Splits: 13406 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 307.
#cuts 1-3: 5
#cuts 4-6: 102
#cuts 7-9: 189
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 7.285048723220825 
BICCOS Cumulative time: 36.83406400680542
Preprocessing time: 2.4019784927368164 Inference time: 3.9164175987243652 Add cuts time: 0.9505088329315186 Cut analysis time: 0.016143798828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02767 (21), -0.02761 (21), -0.02745 (21), -0.02723 (21), -0.02687 (22), -0.02687 (21), -0.02684 (22), -0.02650 (21), -0.02649 (21), -0.02642 (21), -0.02641 (22), -0.02640 (21), -0.02639 (22), -0.02633 (21), -0.02619 (21), -0.02607 (21), -0.02603 (22), -0.02601 (21), -0.02597 (21), -0.02584 (21), 
Length of domains: 130829
Time: pickout 0.5864    decision 4.1662    set_bounds 4.8837    solve 14.4566    add 0.2578    
Accumulated time: pickout 3.4682    decision 22.3410    set_bounds 26.2298    solve 87.9300    add 2.4018    
Current (lb-rhs): -0.027669906616210938
338025 domains visited
Cumulative time: 180.82201385498047

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2045] [/input-8, 2035] [/input-8, 478] [/input-8, 2035] [/input-8, 2045] [/input-8, 477] [/input-8, 2035] [/input-8, 478] [/input-8, 2035] [/input-8, 478] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026370733976364136
10 lb beta sum: 0.12331715226173401, worst -0.0500369668006897
Time: prepare 1.9391    bound 11.1938    transfer 0.3889    finalize 0.5933    func 14.5669    
Accumulated time: func 102.5768    prepare 14.0772    bound 74.8506    transfer 2.6639    finalize 6.4809    
all_split False
======================Cut inference begins======================
max lb tensor(0.01013041) min lb tensor(-0.02637008)
Number of Verified Splits: 13036 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 324.
#cuts 1-3: 6
#cuts 4-6: 109
#cuts 7-9: 197
#cuts 10-12: 12
#cuts >= 20: 0
BICCOS time: 7.507567882537842 
BICCOS Cumulative time: 44.34163188934326
Preprocessing time: 2.389448404312134 Inference time: 4.124041557312012 Add cuts time: 0.9770760536193848 Cut analysis time: 0.017001867294311523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02761 (21), -0.02745 (21), -0.02687 (22), -0.02687 (21), -0.02684 (22), -0.02650 (21), -0.02642 (21), -0.02641 (22), -0.02640 (21), -0.02639 (22), -0.02637 (22), -0.02633 (21), -0.02603 (22), -0.02593 (22), -0.02584 (21), -0.02579 (21), -0.02566 (21), -0.02557 (22), -0.02557 (21), -0.02551 (22), 
Length of domains: 150561
Time: pickout 0.5913    decision 3.3399    set_bounds 5.0991    solve 14.5888    add 0.2136    
Accumulated time: pickout 4.0594    decision 25.6809    set_bounds 31.3288    solve 102.5188    add 2.6154    
Current (lb-rhs): -0.027612268924713135
390525 domains visited
Time out!!!!!!!!
Result: unknown in 215.7090 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [641]; unstable size 641; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 325, 1, 641] with unstable size 324 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 641] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 641] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [324]; unstable size 324; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 324] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 324] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.40970659,  2.98208618, -0.34637284, -0.05800223,  0.34521291,
         -1.21884346,  0.55216181,  0.57143271,  1.41924000]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597],
         [-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.88025999,  1.03268290, -0.07172775]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0439 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.18270683, -12.47354031,  -6.10897255, -10.00190735,  -9.06741428,
         -10.42314816, -10.68535328, -12.50943470,  -6.97327232, -13.13700008]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 464] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 464] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 146] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.42324018, 0.28036869, 3.85285258, 3.13763332, 4.20778561, 4.47631264,
         6.43918276, 0.91171372, 6.93784571]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [766]; unstable size 766; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 766] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 766] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 766] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 173] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.95912170, -0.24805653, -0.27043343,  0.63014293, -0.09771174,
          1.73836112,  2.00863838,  1.75885797,  3.03999758]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.87it/s]100%|██████████| 1/1 [00:00<00:00,  8.86it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.10750008, -16.42879486, -11.24630737, -11.71199989, -12.43719864,
          -12.07831478, -13.57210922, -14.31756973, -13.90190697, -15.47457600],
         [-11.10750008, -16.42879486, -11.24630737, -11.71199989, -12.43719864,
          -12.07831478, -13.57210922, -14.31756973, -13.90190697, -15.47457600]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13880730, 0.60449982, 0.97081470]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1158 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.115752220153809
alpha/beta optimization time: 1.2241184711456299
initial alpha-crown bounds: tensor([[ 4.07125235, -0.22706413, -0.22163165,  0.67958426, -0.04805118,
          1.79753470,  2.07503724,  1.87824059,  3.11084986]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 3 ; Worst class: (+ rhs) -0.2270641326904297
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5974678993225
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5974292755127
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22706413]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22706413]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001125335693359375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2270641326904297
10 lb beta sum: 0.0, worst -0.227073073387146
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 78] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 25] 
split level 4: [/input-12, 11] 
split level 5: [/input-8, 1628] 
split level 6: [/input-8, 1437] 
split level 7: [/input-8, 1035] 
split level 8: [/input-8, 413] 
split level 9: [/input-8, 1366] 
split level 10: [/input-8, 1500] 
split level 11: [/input-8, 1621] 
split level 12: [/input-8, 1619] 
split level 13: [/input-8, 1044] 
split level 14: [/input-12, 45] 
split level 15: [/input-8, 996] 
split level 16: [/input-8, 1356] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 276] 
split level 19: [/input-8, 1134] 
split level 20: [/input, 2471] 
split level 21: [/input, 3527] 
split level 22: [/input, 3272] 
split level 23: [/input, 2503] 
split level 24: [/input, 3240] 
split level 25: [/input, 2231] 
split level 26: [/input, 429] 
split level 27: [/input, 1448] 
split level 28: [/input-8, 667] 
split level 29: [/input-8, 1618] 
split level 30: [/input, 2966] 
split level 31: [/input, 3494] 
split level 32: [/input-8, 1347] 
split level 33: [/input-8, 1610] 
split level 34: [/input, 2263] 
split level 35: [/input, 3509] 
split level 36: [/input, 2472] 
split level 37: [/input-8, 1625] 
split level 38: [/input, 2504] 
split level 39: [/input, 3525] 
split level 40: [/input-8, 1341] 
split level 41: [/input, 3274] 
split level 42: [/input-8, 680] 
split level 43: [/input-8, 990] 
split level 44: [/input, 3222] 
split level 45: [/input-8, 1609] 
split level 46: [/input, 3258] 
split level 47: [/input, 3253] 
split level 48: [/input, 2501] 
split level 49: [/input, 1447] 
split level 50: [/input, 3269] 
split level 51: [/input-8, 102] 
split level 52: [/input, 3526] 
split level 53: [/input-8, 1370] 
split level 54: [/input, 3524] 
split level 55: [/input, 2486] 
split level 56: [/input-8, 614] 
split level 57: [/input, 1388] 
split level 58: [/input, 327] 
split level 59: [/input, 2487] 
split level 60: [/input, 2500] 
split level 61: [/input, 3543] 
split level 62: [/input-8, 1441] 
split level 63: [/input-8, 1122] 
split level 64: [/input, 3239] 
split level 65: [/input-8, 1617] 
split level 66: [/input, 279] 
split level 67: [/input, 3254] 
split level 68: [/input, 3287] 
split level 69: [/input, 3288] 
split level 70: [/input, 2519] 
split level 71: [/input-8, 1346] 
split level 72: [/input-8, 1342] 
split level 73: [/input, 2536] 
split level 74: [/input, 1720] 
split level 75: [/input, 2535] 
split level 76: [/input, 1477] 
split level 77: [/input-8, 550] 
split level 78: [/input, 2517] 
split level 79: [/input-8, 641] 
split level 80: [/input, 3511] 
split level 81: [/input, 445] 
split level 82: [/input, 3257] 
split level 83: [/input, 2499] 
split level 84: [/input, 4055] 
split level 85: [/input, 3529] 
split level 86: [/input, 4071] 
split level 87: [/input, 2514] 
split level 88: [/input, 2228] 
split level 89: [/input-8, 1354] 
split level 90: [/input, 3507] 
split level 91: [/input, 3241] 
split level 92: [/input, 2516] 
split level 93: [/input, 3522] 
split level 94: [/input, 1718] 
split level 95: [/input, 460] 
split level 96: [/input, 4058] 
split level 97: [/input, 1432] 
split level 98: [/input, 312] 
split level 99: [/input, 4056] 
split level 100: [/input, 3523] 
split level 101: [/input, 2227] 
split level 102: [/input, 1434] 
split level 103: [/input, 2965] 
split level 104: [/input, 328] 
split level 105: [/input, 4054] 
split level 106: [/input, 3542] 
split level 107: [/input, 4057] 
split level 108: [/input-8, 86] 
split level 109: [/input-8, 1345] 
split level 110: [/input, 2531] 
split level 111: [/input, 4036] 
split level 112: [/input, 4051] 
split level 113: [/input, 2534] 
split level 114: [/input, 3541] 
split level 115: [/input, 3539] 
split level 116: [/input, 3291] 
split level 117: [/input, 2518] 
split level 118: [/input, 3733] 
split level 119: [/input, 2202] 
split level 120: [/input, 3734] 
split level 121: [/input-8, 414] 
split level 122: [/input, 4053] 
split level 123: [/input, 4073] 
split level 124: [/input, 2186] 
split level 125: [/input, 4070] 
split level 126: [/input-8, 1863] 
split level 127: [/input, 1431] 
split level 128: [/input, 1674] 
split level 129: [/input, 3434] 
split level 130: [/input, 4023] 
split level 131: [/input-8, 1476] 
split level 132: [/input, 1475] 
split level 133: [/input-8, 1362] 
split level 134: [/input, 2533] 
split level 135: [/input, 4068] 
split level 136: [/input, 2515] 
split level 137: [/input, 3731] 
split level 138: [/input, 4035] 
split level 139: [/input, 2183] 
split level 140: [/input-8, 412] 
split level 141: [/input, 2521] 
split level 142: [/input, 2537] 
split level 143: [/input-8, 1079] 
split level 144: [/input, 2498] 
split level 145: [/input, 4038] 
split level 146: [/input, 1641] 
split level 147: [/input, 2970] 
split level 148: [/input, 3292] 
split level 149: [/input, 4069] 
split level 150: [/input, 1497] 
split level 151: [/input, 2513] 
split level 152: [/input, 3989] 
split level 153: [/input, 3545] 
split level 154: [/input-8, 1325] 
split level 155: [/input, 4075] 
split level 156: [/input, 3266] 
split level 157: [/input, 3478] 
split level 158: [/input, 213] 
split level 159: [/input, 408] 
split level 160: [/input, 4049] 
split level 161: [/input, 236] 
split level 162: [/input, 4067] 
split level 163: [/input, 3555] 
split level 164: [/input, 4052] 
split level 165: [/input, 2980] 
split level 166: [/input, 4040] 
split level 167: [/input, 889] 
split level 168: [/input, 3290] 
split level 169: [/input-8, 402] 
split level 170: [/input, 4041] 
split level 171: [/input, 1518] 
split level 172: [/input, 2204] 
split level 173: [/input, 2284] 
split level 174: [/input-8, 447] 
split level 175: [/input, 161] 
split level 176: [/input, 280] 
split level 177: [/input, 3283] 
split level 178: [/input, 227] 
split level 179: [/input, 3556] 
split level 180: [/input, 3557] 
split level 181: [/input, 199] 
split level 182: [/input-8, 672] 
split level 183: [/input, 3538] 
split level 184: [/input, 2967] 
split level 185: [/input, 2154] 
split level 186: [/input, 2532] 
split level 187: [/input-8, 2021] 
split level 188: [/input, 3305] 
split level 189: [/input, 3554] 
split level 190: [/input, 217] 
split level 191: [/input, 3560] 
split level 192: [/input, 3418] 
split level 193: [/input, 3540] 
split level 194: [/input-8, 1333] 
split level 195: [/input, 4037] 
split level 196: [/input, 3537] 
split level 197: [/input, 2940] 
split level 198: [/input, 1754] 
split level 199: [/input, 4074] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2269071340560913
10 lb beta sum: 0.0, worst -0.22691500186920166
Time: prepare 0.0114    bound 0.0977    transfer 0.0030    finalize 0.0028    func 0.1176    
Accumulated time: func 0.1715    prepare 0.0217    bound 0.1511    transfer 0.0031    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.16679192) min lb tensor(-0.22690439)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010314702987670898 
BICCOS Cumulative time: 0.010314702987670898
Preprocessing time: 0.009990453720092773 Inference time: 7.43865966796875e-05 Add cuts time: 4.076957702636719e-05 Cut analysis time: 0.0002090930938720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22304 (1), -0.22297 (1), -0.22286 (1), -0.22274 (1), -0.22249 (1), -0.22245 (1), -0.22224 (1), -0.22224 (1), -0.22212 (1), -0.22199 (1), -0.22181 (1), -0.22175 (1), -0.22146 (1), -0.22136 (1), -0.22133 (1), -0.22104 (1), -0.22056 (1), -0.22049 (1), -0.21992 (1), -0.21973 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5211    set_bounds 0.0087    solve 0.1177    add 0.0695    
Accumulated time: pickout 0.0003    decision 0.5211    set_bounds 0.0087    solve 0.1177    add 0.0695    
Current (lb-rhs): -0.22303986549377441
50 domains visited
Cumulative time: 0.7901341915130615

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 26] [/input-12, 26] [/input-12, 41] [/input-12, 26] [/input-12, 41] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 25] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-8, 614] [/input-12, 11] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-12, 11] [/input-8, 1628] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21615922451019287
10 lb beta sum: 0.19533458352088928, worst -0.21392326056957245
Time: prepare 0.0091    bound 0.1161    transfer 0.0014    finalize 0.0025    func 0.1317    
Accumulated time: func 0.3032    prepare 0.0311    bound 0.2672    transfer 0.0045    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.06712791) min lb tensor(-0.21392006)
Number of Verified Splits: 24 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013528823852539062 
BICCOS Cumulative time: 0.02384352684020996
Preprocessing time: 0.011852264404296875 Inference time: 0.0010411739349365234 Add cuts time: 0.0003781318664550781 Cut analysis time: 0.00025725364685058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12353 (2), -0.12319 (2), -0.12273 (2), -0.12254 (2), -0.12232 (2), -0.12217 (2), -0.12175 (2), -0.12094 (2), -0.12086 (2), -0.12070 (2), -0.12066 (2), -0.12058 (2), -0.12045 (2), -0.12034 (2), -0.11955 (2), -0.11868 (2), -0.11631 (2), -0.11623 (2), -0.11403 (2), -0.11238 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0261    set_bounds 0.0117    solve 0.1318    add 0.0808    
Accumulated time: pickout 0.0014    decision 0.5472    set_bounds 0.0205    solve 0.2495    add 0.1504    
Current (lb-rhs): -0.12352637946605682
100 domains visited
Cumulative time: 1.0561635494232178

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 41] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 25] [/input-12, 25] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1437] [/input-8, 1122] [/input-8, 1437] [/input-8, 1437] [/input-8, 1122] [/input-8, 1437] [/input-8, 1437] [/input-8, 1625] [/input-8, 1122] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12317514419555664
10 lb beta sum: 0.47312140464782715, worst -0.11898505687713623
Time: prepare 0.0077    bound 0.1178    transfer 0.0008    finalize 0.0026    func 0.1317    
Accumulated time: func 0.4350    prepare 0.0391    bound 0.3850    transfer 0.0053    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(0.42252842) min lb tensor(-0.11545865)
Number of Verified Splits: 70 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.017128467559814453 
BICCOS Cumulative time: 0.040971994400024414
Preprocessing time: 0.011872291564941406 Inference time: 0.0030472278594970703 Add cuts time: 0.0019290447235107422 Cut analysis time: 0.0002799034118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02767 (3), -0.02762 (3), -0.02760 (3), -0.02745 (3), -0.02737 (3), -0.02736 (3), -0.02713 (3), -0.02704 (3), -0.02702 (3), -0.02669 (3), -0.02657 (3), -0.02619 (3), -0.02609 (3), -0.02603 (3), -0.02211 (3), -0.02207 (3), -0.02182 (3), -0.02151 (3), -0.02045 (3), -0.02011 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0170    solve 0.1318    add 0.0895    
Accumulated time: pickout 0.0025    decision 0.5666    set_bounds 0.0375    solve 0.3813    add 0.2399    
Current (lb-rhs): -0.0276661217212677
150 domains visited
Cumulative time: 1.3324246406555176

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-8, 1628] [/input-8, 1628] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-8, 1628] 
split level 3: [/input-8, 1437] [/input-8, 1437] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1437] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.679379403591156, worst -0.027666211128234863
10 lb beta sum: 0.679379403591156, worst -0.03589583933353424
Time: prepare 0.0170    bound 0.1172    transfer 0.0008    finalize 0.0027    func 0.1404    
Accumulated time: func 0.5754    prepare 0.0564    bound 0.5022    transfer 0.0061    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.27352339) min lb tensor(-0.02690792)
Number of Verified Splits: 196 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 7
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.024437904357910156 
BICCOS Cumulative time: 0.06540989875793457
Preprocessing time: 0.011666536331176758 Inference time: 0.00921630859375 Add cuts time: 0.0029616355895996094 Cut analysis time: 0.0005934238433837891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01387 (4), -0.01370 (4), -0.01361 (4), -0.01331 (4), -0.01326 (4), -0.01321 (4), -0.01314 (4), -0.01299 (4), -0.01298 (4), -0.01292 (4), -0.01278 (4), -0.01272 (4), -0.01270 (4), -0.01247 (4), -0.01244 (4), -0.01244 (4), -0.01234 (4), -0.01189 (4), -0.01189 (4), -0.01187 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0202    set_bounds 0.0145    solve 0.1405    add 0.1036    
Accumulated time: pickout 0.0035    decision 0.5868    set_bounds 0.0520    solve 0.5218    add 0.3435    
Current (lb-rhs): -0.013865500688552856
200 domains visited
Cumulative time: 1.6370110511779785

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 1: [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 2: [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1500] [/input-8, 1437] [/input-8, 1437] 
split level 3: [/input-8, 1357] [/input-8, 1357] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1346] [/input-8, 1500] [/input-8, 1500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023829936981201172
10 lb beta sum: 1.6707464456558228, worst -0.01890517771244049
Time: prepare 0.0079    bound 0.1332    transfer 0.0008    finalize 0.0021    func 0.1466    
Accumulated time: func 0.7220    prepare 0.0645    bound 0.6353    transfer 0.0069    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.02952147) min lb tensor(-0.00915059)
Number of Verified Splits: 277 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.030867576599121094 
BICCOS Cumulative time: 0.09627747535705566
Preprocessing time: 0.012150287628173828 Inference time: 0.014353036880493164 Add cuts time: 0.0038118362426757812 Cut analysis time: 0.0005524158477783203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00559 (5), -0.00551 (5), -0.00520 (5), -0.00506 (5), -0.00502 (5), -0.00502 (5), -0.00486 (5), -0.00486 (5), -0.00468 (5), -0.00464 (5), -0.00463 (5), -0.00455 (5), -0.00455 (5), -0.00454 (5), -0.00442 (5), -0.00442 (5), -0.00440 (5), -0.00436 (5), -0.00434 (5), -0.00434 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0157    solve 0.1468    add 0.3225    
Accumulated time: pickout 0.0047    decision 0.6066    set_bounds 0.0676    solve 0.6686    add 0.6660    
Current (lb-rhs): -0.005589008331298828
250 domains visited
Cumulative time: 2.17411208152771

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([-1., -1.]), tensor([0, 0]), tensor([8.48352421e-14, 2.14201082e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [-1.0], [0], [7.8273942857732675e+31], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([8.48352421e-14, 9.40040350e-02, 5.31238317e-02, 7.47616729e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [-1.0], [0], [7.8273942857732675e+31], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.48352421e-14, 9.40040350e-02, 5.31238317e-02, 3.22218686e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [1.0], [0], [3.647444152266033e-11], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([8.48352421e-14, 9.40040350e-02, 5.31238317e-02, 8.17997940e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [1.0], [0], [3.647444152266033e-11], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.48352421e-14, 9.40040350e-02, 5.31238317e-02, 3.28074247e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([8.48352421e-14, 9.40040350e-02, 3.97384018e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 25]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.39846898e-09, 2.23516095e-02, 7.53800711e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 25]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.39846898e-09, 2.23516095e-02, 1.90435216e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.39846898e-09, 8.40303302e-02, 5.15982062e-02, 7.70570477e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.39846898e-09, 8.40303302e-02, 5.15982062e-02, 2.54748583e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.0445417055469424e-22], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.39846898e-09, 8.40303302e-02, 3.93516123e-02, 1.33180637e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.0445417055469424e-22], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.39846898e-09, 8.40303302e-02, 3.93516123e-02, 3.36561203e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [1.0], [0], [0.004030437674373388], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.39846898e-09, 8.40303302e-02, 3.93516123e-02, 1.32931489e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [1.0], [0], [0.004030437674373388], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.39846898e-09, 8.40303302e-02, 3.93516123e-02, 3.40429544e-02]), tensor([0, 1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14499354362487793
10 lb beta sum: 1.2770133018493652, worst -0.13281460106372833
Time: prepare 0.0007    bound 0.1302    transfer 0.0002    finalize 0.0002    func 0.1314    
Accumulated time: func 0.8534    prepare 0.0652    bound 0.7655    transfer 0.0072    finalize 0.0131    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-12, 78] 
split level 1: [/input-12, 11] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-12, 11] 
split level 2: [/input-8, 1628] [/input-8, 1366] [/input-8, 1366] [/input-8, 1437] [/input-8, 1628] 
split level 3: [/input-8, 1437] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1437] 
split level 4: [/input-8, 1619] [/input-8, 1357] [/input-8, 1357] [/input-8, 1500] [/input-8, 1619] 
split level 5: [/input-8, 1357] [/input-8, 1346] [/input-8, 1346] [/input-8, 1357] [/input-8, 1357] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1683599948883057, worst -0.09104451537132263
10 lb beta sum: 1.1683599948883057, worst -0.09067663550376892
Time: prepare 0.0137    bound 0.1297    transfer 0.0018    finalize 0.0018    func 0.1491    
Accumulated time: func 1.0026    prepare 0.0793    bound 0.8952    transfer 0.0090    finalize 0.0149    
all_split False
======================Cut inference begins======================
max lb tensor(0.27318120) min lb tensor(-0.09061369)
Number of Verified Splits: 250 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.307379961013794, worst -0.1398109495639801
10 lb beta sum: 1.5705927610397339, worst -0.06489241123199463
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 8
#cuts 4-6: 10
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.3086833953857422 
BICCOS Cumulative time: 0.40496087074279785
Preprocessing time: 0.008852243423461914 Inference time: 0.2892496585845947 Add cuts time: 0.009514808654785156 Cut analysis time: 0.0010666847229003906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09061 (6), -0.08850 (6), -0.08659 (6), -0.08450 (6), -0.08052 (6), -0.07863 (6), -0.07814 (6), -0.07651 (6), -0.07604 (6), -0.07457 (6), -0.07367 (6), -0.07250 (6), -0.06810 (6), -0.06581 (6), -0.06413 (6), -0.06374 (6), -0.06199 (6), -0.06143 (6), -0.06041 (6), -0.05831 (6), 
Length of domains: 70
Time: pickout 0.0006    decision 0.0181    set_bounds 0.0263    solve 0.1492    add 0.0243    
Accumulated time: pickout 0.0053    decision 0.6247    set_bounds 0.0940    solve 0.8178    add 0.6903    
Current (lb-rhs): -0.09061369299888611
320 domains visited
Cumulative time: 2.867161750793457

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-12, 78] [/input-8, 1366] [/input-12, 78] 
split level 1: [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09060835838317871
10 lb beta sum: 0.21281041204929352, worst -0.08862113952636719
Time: prepare 0.0058    bound 0.1339    transfer 0.0007    finalize 0.0016    func 0.1438    
Accumulated time: func 1.1464    prepare 0.0852    bound 1.0291    transfer 0.0096    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.30030972) min lb tensor(-0.08860612)
Number of Verified Splits: 93 of 280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.0184023380279541 
BICCOS Cumulative time: 0.42336320877075195
Preprocessing time: 0.008342266082763672 Inference time: 0.007819414138793945 Add cuts time: 0.0019578933715820312 Cut analysis time: 0.0002827644348144531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08861 (8), -0.08598 (8), -0.08434 (8), -0.08187 (8), -0.07962 (8), -0.07725 (8), -0.07616 (8), -0.07558 (8), -0.07540 (8), -0.07453 (8), -0.07410 (8), -0.07288 (8), -0.07179 (8), -0.07159 (8), -0.07095 (8), -0.07051 (8), -0.06997 (8), -0.06811 (8), -0.06747 (8), -0.06670 (8), 
Length of domains: 187
Time: pickout 0.0022    decision 0.0178    set_bounds 0.0176    solve 0.1439    add 0.0023    
Accumulated time: pickout 0.0075    decision 0.6426    set_bounds 0.1116    solve 0.9617    add 0.6926    
Current (lb-rhs): -0.08860611915588379
507 domains visited
Cumulative time: 3.070228099822998

BaB round 3
batch: 187
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1347] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08833980560302734
10 lb beta sum: 0.2818792760372162, worst -0.08637094497680664
Time: prepare 0.0074    bound 0.1410    transfer 0.0010    finalize 0.0019    func 0.1538    
Accumulated time: func 1.3001    prepare 0.0928    bound 1.1701    transfer 0.0106    finalize 0.0184    
all_split False
======================Cut inference begins======================
max lb tensor(0.28017282) min lb tensor(-0.08636272)
Number of Verified Splits: 28 of 374
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.014734029769897461 
BICCOS Cumulative time: 0.4380972385406494
Preprocessing time: 0.010927915573120117 Inference time: 0.002652406692504883 Add cuts time: 0.0003497600555419922 Cut analysis time: 0.0008039474487304688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08636 (9), -0.08369 (9), -0.08202 (9), -0.07955 (9), -0.07728 (9), -0.07522 (9), -0.07392 (9), -0.07331 (9), -0.07319 (9), -0.07201 (9), -0.07183 (9), -0.07082 (9), -0.06970 (9), -0.06922 (9), -0.06898 (9), -0.06887 (9), -0.06785 (9), -0.06762 (9), -0.06683 (9), -0.06580 (9), 
Length of domains: 346
Time: pickout 0.0028    decision 0.0210    set_bounds 0.0163    solve 0.1539    add 0.0036    
Accumulated time: pickout 0.0103    decision 0.6636    set_bounds 0.1279    solve 1.1156    add 0.6962    
Current (lb-rhs): -0.08636271953582764
853 domains visited
Cumulative time: 3.2834112644195557

BaB round 4
batch: 346
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1610] [/input-8, 1347] [/input-8, 1044] [/input-8, 1347] [/input-8, 1610] [/input-8, 1625] [/input-8, 1044] [/input-8, 1610] [/input-8, 1347] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08540511131286621
10 lb beta sum: 0.4499298930168152, worst -0.08341765403747559
Time: prepare 0.0134    bound 0.1397    transfer 0.0029    finalize 0.0031    func 0.1638    
Accumulated time: func 1.4639    prepare 0.1065    bound 1.3099    transfer 0.0135    finalize 0.0215    
all_split False
======================Cut inference begins======================
max lb tensor(0.01669359) min lb tensor(-0.08340156)
Number of Verified Splits: 62 of 692
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.027370691299438477 
BICCOS Cumulative time: 0.4654679298400879
Preprocessing time: 0.019856691360473633 Inference time: 0.006301403045654297 Add cuts time: 0.0009250640869140625 Cut analysis time: 0.0002875328063964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08340 (10), -0.08170 (10), -0.07905 (10), -0.07819 (10), -0.07742 (10), -0.07521 (10), -0.07389 (10), -0.07158 (10), -0.07108 (10), -0.07096 (10), -0.06993 (10), -0.06944 (10), -0.06887 (10), -0.06761 (10), -0.06759 (10), -0.06717 (10), -0.06671 (10), -0.06598 (10), -0.06557 (10), -0.06513 (10), 
Length of domains: 630
Time: pickout 0.0044    decision 0.0299    set_bounds 0.0291    solve 0.1640    add 0.0055    
Accumulated time: pickout 0.0147    decision 0.6935    set_bounds 0.1570    solve 1.2796    add 0.7018    
Current (lb-rhs): -0.08340156078338623
1483 domains visited
Cumulative time: 3.5461039543151855

BaB round 5
batch: 630
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1044] [/input-8, 1618] [/input-8, 1610] [/input-8, 1625] [/input-8, 1610] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5274463295936584, worst -0.08320820331573486
10 lb beta sum: 0.5274463295936584, worst -0.08320152759552002
Time: prepare 0.0552    bound 0.1480    transfer 0.0052    finalize 0.0062    func 0.2228    
Accumulated time: func 1.6867    prepare 0.1619    bound 1.4578    transfer 0.0188    finalize 0.0277    
all_split False
======================Cut inference begins======================
max lb tensor(0.01300684) min lb tensor(-0.08319426)
Number of Verified Splits: 99 of 1260
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.052050113677978516 
BICCOS Cumulative time: 0.5175180435180664
Preprocessing time: 0.038231849670410156 Inference time: 0.011382102966308594 Add cuts time: 0.0017807483673095703 Cut analysis time: 0.0006554126739501953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08319 (11), -0.07808 (11), -0.07806 (11), -0.07656 (11), -0.07565 (11), -0.07530 (11), -0.07468 (11), -0.07446 (11), -0.07340 (11), -0.07154 (11), -0.07154 (11), -0.07135 (11), -0.07010 (11), -0.06964 (11), -0.06858 (11), -0.06819 (11), -0.06770 (11), -0.06735 (11), -0.06735 (11), -0.06689 (11), 
Length of domains: 1161
Time: pickout 0.0116    decision 0.0460    set_bounds 0.0519    solve 0.2239    add 0.0092    
Accumulated time: pickout 0.0263    decision 0.7396    set_bounds 0.2089    solve 1.5034    add 0.7109    
Current (lb-rhs): -0.08319425582885742
2644 domains visited
Cumulative time: 3.9426686763763428

BaB round 6
batch: 1161
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1610] [/input-8, 1609] [/input-8, 1625] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08266353607177734
10 lb beta sum: 0.40280017256736755, worst -0.08070921897888184
Time: prepare 0.2063    bound 0.1889    transfer 0.0090    finalize 0.0139    func 0.4335    
Accumulated time: func 2.1202    prepare 0.3685    bound 1.6468    transfer 0.0278    finalize 0.0416    
all_split False
======================Cut inference begins======================
max lb tensor(0.28549314) min lb tensor(-0.08070660)
Number of Verified Splits: 296 of 2322
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.11176943778991699 
BICCOS Cumulative time: 0.6292874813079834
Preprocessing time: 0.07228994369506836 Inference time: 0.033763885498046875 Add cuts time: 0.0048274993896484375 Cut analysis time: 0.0008881092071533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08071 (12), -0.07950 (12), -0.07788 (12), -0.07514 (12), -0.07418 (12), -0.07387 (12), -0.07261 (12), -0.07258 (12), -0.07205 (12), -0.07189 (12), -0.07133 (12), -0.07130 (12), -0.07107 (12), -0.07099 (12), -0.07090 (12), -0.07069 (12), -0.07012 (12), -0.06925 (12), -0.06864 (12), -0.06860 (12), 
Length of domains: 2026
Time: pickout 0.0148    decision 0.0736    set_bounds 0.0948    solve 0.4341    add 0.0152    
Accumulated time: pickout 0.0412    decision 0.8132    set_bounds 0.3037    solve 1.9376    add 0.7261    
Current (lb-rhs): -0.08070659637451172
4670 domains visited
Cumulative time: 4.691256523132324

BaB round 7
batch: 2026
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 641] [/input-8, 1609] [/input-8, 680] [/input-8, 641] [/input-8, 1609] [/input-8, 641] [/input-8, 1625] [/input-8, 680] [/input-8, 641] [/input-8, 1625] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07919955253601074
10 lb beta sum: 0.3814918100833893, worst -0.07720088958740234
Time: prepare 0.0909    bound 0.2870    transfer 0.0302    finalize 0.0247    func 0.4597    
Accumulated time: func 2.5799    prepare 0.4597    bound 1.9338    transfer 0.0579    finalize 0.0663    
all_split False
======================Cut inference begins======================
max lb tensor(0.25456554) min lb tensor(-0.07717884)
Number of Verified Splits: 647 of 4052
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.4080541133880615 
BICCOS Cumulative time: 1.037341594696045
Preprocessing time: 0.12590789794921875 Inference time: 0.2675437927246094 Add cuts time: 0.012840032577514648 Cut analysis time: 0.00176239013671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07718 (13), -0.07699 (13), -0.07597 (13), -0.07578 (13), -0.07544 (13), -0.07513 (13), -0.07435 (13), -0.07416 (13), -0.07253 (13), -0.07203 (13), -0.07188 (13), -0.07099 (13), -0.07089 (13), -0.07087 (13), -0.07067 (13), -0.07025 (13), -0.07019 (13), -0.07012 (13), -0.06924 (13), -0.06905 (13), 
Length of domains: 3405
Time: pickout 0.0376    decision 0.1199    set_bounds 0.1770    solve 0.4606    add 0.0218    
Accumulated time: pickout 0.0788    decision 0.9331    set_bounds 0.4807    solve 2.3981    add 0.7480    
Current (lb-rhs): -0.07717883586883545
8075 domains visited
Cumulative time: 5.927343845367432

BaB round 8
batch: 3405
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 86] [/input-8, 86] [/input-8, 1609] [/input-8, 86] [/input-8, 641] [/input-8, 86] [/input-8, 86] [/input-8, 86] [/input-8, 641] [/input-8, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0771782398223877
10 lb beta sum: 0.34674543142318726, worst -0.07717907428741455
Time: prepare 0.1572    bound 0.4327    transfer 0.0283    finalize 0.0395    func 0.8891    
Accumulated time: func 3.4690    prepare 0.6171    bound 2.3665    transfer 0.0862    finalize 0.1058    
all_split False
======================Cut inference begins======================
max lb tensor(0.38155130) min lb tensor(-0.07717347)
Number of Verified Splits: 1712 of 6810
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 6
#cuts 4-6: 24
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.474365234375 
BICCOS Cumulative time: 1.511706829071045
Preprocessing time: 0.21818256378173828 Inference time: 0.2214827537536621 Add cuts time: 0.03268146514892578 Cut analysis time: 0.002018451690673828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (14), -0.07699 (14), -0.07597 (14), -0.07578 (14), -0.07544 (14), -0.07493 (14), -0.07435 (14), -0.07396 (14), -0.07183 (14), -0.07080 (14), -0.07047 (14), -0.07024 (14), -0.07019 (14), -0.06993 (14), -0.06935 (14), -0.06905 (14), -0.06905 (14), -0.06896 (14), -0.06882 (14), -0.06879 (14), 
Length of domains: 5098
Time: pickout 0.0449    decision 0.1910    set_bounds 0.3069    solve 0.8908    add 0.0354    
Accumulated time: pickout 0.1236    decision 1.1241    set_bounds 0.7877    solve 3.2889    add 0.7833    
Current (lb-rhs): -0.07717347145080566
13173 domains visited
Cumulative time: 7.8983683586120605

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 1134] [/input-8, 641] [/input-8, 641] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07417488098144531
10 lb beta sum: 0.32574206590652466, worst -0.07407975196838379
Time: prepare 0.2034    bound 0.6914    transfer 0.0332    finalize 0.0503    func 1.0332    
Accumulated time: func 4.5023    prepare 0.8208    bound 3.0578    transfer 0.1194    finalize 0.1561    
all_split False
======================Cut inference begins======================
max lb tensor(0.40163928) min lb tensor(-0.07407439)
Number of Verified Splits: 1752 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 7
#cuts 4-6: 22
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.5462632179260254 
BICCOS Cumulative time: 2.0579700469970703
Preprocessing time: 0.2596125602722168 Inference time: 0.2440812587738037 Add cuts time: 0.040700435638427734 Cut analysis time: 0.0018689632415771484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (14), -0.07544 (14), -0.07407 (15), -0.07396 (14), -0.07352 (15), -0.07313 (15), -0.07305 (15), -0.07268 (15), -0.07211 (15), -0.07210 (15), -0.07210 (15), -0.07183 (14), -0.07128 (15), -0.07080 (14), -0.07070 (15), -0.07047 (14), -0.06993 (14), -0.06935 (14), -0.06905 (14), -0.06879 (14), 
Length of domains: 7442
Time: pickout 0.0582    decision 0.2270    set_bounds 0.5432    solve 1.0363    add 0.0485    
Accumulated time: pickout 0.1818    decision 1.3511    set_bounds 1.3309    solve 4.3252    add 0.8319    
Current (lb-rhs): -0.07717347145080566
19613 domains visited
current_vram/total_varm: 24.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.38749384880066

BaB round 10
batch: 7442
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 86] [/input, 2503] [/input, 2504] [/input-8, 641] [/input, 2504] [/input, 2503] [/input, 2503] [/input-8, 641] [/input, 2504] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07494449615478516
10 lb beta sum: 0.32939794659614563, worst -0.07492685317993164
Time: prepare 0.4046    bound 1.1993    transfer 0.0570    finalize 0.0921    func 1.8524    
Accumulated time: func 6.3546    prepare 1.2258    bound 4.2571    transfer 0.1764    finalize 0.2482    
all_split False
======================Cut inference begins======================
max lb tensor(0.57822245) min lb tensor(-0.07491887)
Number of Verified Splits: 4254 of 14884
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 7
#cuts 4-6: 37
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 1.492720603942871 
BICCOS Cumulative time: 3.5506906509399414
Preprocessing time: 0.7618863582611084 Inference time: 0.6524670124053955 Add cuts time: 0.07525944709777832 Cut analysis time: 0.003107786178588867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07492 (15), -0.07351 (15), -0.07320 (15), -0.07225 (16), -0.07179 (15), -0.07171 (15), -0.07170 (16), -0.07130 (16), -0.07123 (16), -0.07086 (16), -0.07031 (15), -0.07029 (16), -0.07029 (16), -0.07025 (16), -0.06966 (15), -0.06945 (16), -0.06929 (16), -0.06888 (16), -0.06873 (16), -0.06854 (15), 
Length of domains: 10630
Time: pickout 0.1503    decision 0.6162    set_bounds 0.8420    solve 1.8556    add 0.0491    
Accumulated time: pickout 0.3321    decision 1.9673    set_bounds 2.1729    solve 6.1808    add 0.8810    
Current (lb-rhs): -0.07491886615753174
30243 domains visited
Cumulative time: 15.458969831466675

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2503] [/input, 2504] [/input-12, 45] [/input, 2503] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input, 2503] [/input-12, 45] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07311046123504639
10 lb beta sum: 0.3141849637031555, worst -0.10053521394729614
Time: prepare 0.4429    bound 1.3226    transfer 0.0805    finalize 0.3923    func 2.3468    
Accumulated time: func 8.7015    prepare 1.6691    bound 5.5797    transfer 0.2569    finalize 0.6404    
all_split False
======================Cut inference begins======================
max lb tensor(0.79120266) min lb tensor(-0.07310283)
Number of Verified Splits: 5323 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 7
#cuts 4-6: 27
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 1.4708642959594727 
BICCOS Cumulative time: 5.021554946899414
Preprocessing time: 0.5337202548980713 Inference time: 0.8405942916870117 Add cuts time: 0.09441089630126953 Cut analysis time: 0.002138853073120117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07310 (16), -0.07170 (16), -0.07169 (16), -0.07138 (16), -0.07130 (16), -0.07086 (16), -0.07029 (16), -0.07025 (16), -0.07013 (16), -0.07001 (17), -0.06997 (16), -0.06989 (16), -0.06897 (17), -0.06872 (16), -0.06860 (17), -0.06848 (16), -0.06841 (16), -0.06824 (16), -0.06819 (16), -0.06783 (16), 
Length of domains: 13499
Time: pickout 0.1361    decision 0.4544    set_bounds 0.9876    solve 2.3514    add 0.0573    
Accumulated time: pickout 0.4681    decision 2.4217    set_bounds 3.1604    solve 8.5322    add 0.9382    
Current (lb-rhs): -0.07310283184051514
41304 domains visited
current_vram/total_varm: 24.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 20.989866733551025

BaB round 12
batch: 13499
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 680] [/input-12, 45] [/input-8, 680] [/input-12, 45] [/input-8, 1347] [/input-8, 1134] [/input-8, 1134] [/input-12, 45] [/input-8, 1617] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06999576091766357
10 lb beta sum: 0.2548257112503052, worst -0.06990909576416016
Time: prepare 0.7563    bound 2.1072    transfer 0.1399    finalize 0.5128    func 3.6982    
Accumulated time: func 12.3997    prepare 2.4258    bound 7.6869    transfer 0.3968    finalize 1.1533    
all_split False
======================Cut inference begins======================
max lb tensor(0.65511954) min lb tensor(-0.06990039)
Number of Verified Splits: 12972 of 26998
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 9
#cuts 4-6: 36
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 3.3214054107666016 
BICCOS Cumulative time: 8.342960357666016
Preprocessing time: 0.8813927173614502 Inference time: 2.262561798095703 Add cuts time: 0.1749122142791748 Cut analysis time: 0.0025386810302734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06990 (17), -0.06973 (17), -0.06914 (18), -0.06905 (17), -0.06853 (17), -0.06848 (17), -0.06832 (17), -0.06829 (17), -0.06826 (17), -0.06817 (17), -0.06800 (17), -0.06800 (17), -0.06773 (18), -0.06765 (17), -0.06762 (17), -0.06754 (17), -0.06730 (17), -0.06710 (17), -0.06687 (17), -0.06676 (17), 
Length of domains: 14026
Time: pickout 0.3024    decision 1.0690    set_bounds 1.5517    solve 3.7042    add 0.0696    
Accumulated time: pickout 0.7706    decision 3.4906    set_bounds 4.7121    solve 12.2365    add 1.0078    
Current (lb-rhs): -0.06990039348602295
55330 domains visited
Cumulative time: 31.16743302345276

BaB round 13
batch: 14026
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 1134] [/input, 2503] [/input-8, 1134] [/input, 2503] [/input-8, 86] [/input, 2504] [/input, 2503] [/input, 2504] [/input, 2503] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0690380334854126
10 lb beta sum: 0.19270847737789154, worst -0.07769866287708282
Time: prepare 0.7895    bound 2.1983    transfer 0.1400    finalize 0.5626    func 3.8756    
Accumulated time: func 16.2753    prepare 3.2158    bound 9.8852    transfer 0.5367    finalize 1.7159    
all_split False
======================Cut inference begins======================
max lb tensor(0.33314258) min lb tensor(-0.06902993)
Number of Verified Splits: 5893 of 28052
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 80.
#cuts 1-3: 13
#cuts 4-6: 50
#cuts 7-9: 15
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 2.4434268474578857 
BICCOS Cumulative time: 10.786387205123901
Preprocessing time: 0.9428553581237793 Inference time: 1.3966095447540283 Add cuts time: 0.10046672821044922 Cut analysis time: 0.0034952163696289062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06903 (18), -0.06887 (18), -0.06761 (18), -0.06745 (18), -0.06677 (18), -0.06676 (18), -0.06618 (19), -0.06610 (18), -0.06609 (18), -0.06604 (19), -0.06594 (18), -0.06592 (18), -0.06557 (18), -0.06542 (18), -0.06534 (18), -0.06534 (18), -0.06531 (18), -0.06521 (18), -0.06519 (18), -0.06517 (18), 
Length of domains: 22159
Time: pickout 0.3116    decision 0.7960    set_bounds 1.6337    solve 3.8827    add 0.1234    
Accumulated time: pickout 1.0822    decision 4.2866    set_bounds 6.3458    solve 16.1192    add 1.1312    
Current (lb-rhs): -0.06902992725372314
77489 domains visited
Cumulative time: 40.45283818244934

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2503] [/input, 2503] [/input, 2504] [/input, 2504] [/input, 2503] [/input, 3511] [/input, 2504] [/input, 3509] [/input, 2504] [/input-8, 1609] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06608092784881592
10 lb beta sum: 0.24192087352275848, worst -0.0701725035905838
Time: prepare 0.9592    bound 2.6047    transfer 0.1547    finalize 0.7123    func 4.6485    
Accumulated time: func 20.9238    prepare 4.1755    bound 12.4899    transfer 0.6914    finalize 2.4282    
all_split False
======================Cut inference begins======================
max lb tensor(0.39653075) min lb tensor(-0.06607521)
Number of Verified Splits: 7589 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 16
#cuts 4-6: 25
#cuts 7-9: 14
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 2.978269100189209 
BICCOS Cumulative time: 13.76465630531311
Preprocessing time: 1.0754590034484863 Inference time: 1.7690253257751465 Add cuts time: 0.13123559951782227 Cut analysis time: 0.0025491714477539062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06608 (19), -0.06593 (19), -0.06592 (18), -0.06592 (19), -0.06577 (19), -0.06567 (20), -0.06523 (19), -0.06508 (19), -0.06505 (18), -0.06471 (19), -0.06465 (19), -0.06463 (20), -0.06456 (19), -0.06452 (18), -0.06450 (19), -0.06449 (19), -0.06447 (19), -0.06445 (19), -0.06435 (19), -0.06435 (18), 
Length of domains: 30954
Time: pickout 0.2902    decision 1.6472    set_bounds 1.9466    solve 4.6562    add 0.1187    
Accumulated time: pickout 1.3724    decision 5.9338    set_bounds 8.2924    solve 20.7754    add 1.2499    
Current (lb-rhs): -0.06607520580291748
102668 domains visited
Cumulative time: 52.217846155166626

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-12, 45] [/input-8, 1625] [/input-8, 86] [/input-8, 1122] [/input-8, 1356] [/input-8, 1044] [/input-8, 1122] [/input, 3509] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.060406893491744995, worst -1.389471173286438
10 lb beta sum: 0.3477325141429901, worst -0.09031860530376434
Time: prepare 1.2046    bound 2.5577    transfer 0.1570    finalize 0.2393    func 4.9690    
Accumulated time: func 25.8927    prepare 5.3805    bound 15.0477    transfer 0.8485    finalize 2.6674    
all_split False
======================Cut inference begins======================
max lb tensor(0.50917310) min lb tensor(-0.06384015)
Number of Verified Splits: 11078 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 17
#cuts 4-6: 38
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 3.1124815940856934 
BICCOS Cumulative time: 16.877137899398804
Preprocessing time: 1.1173584461212158 Inference time: 1.812427282333374 Add cuts time: 0.1798088550567627 Cut analysis time: 0.0028870105743408203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06608 (19), -0.06592 (19), -0.06567 (20), -0.06523 (19), -0.06465 (19), -0.06463 (20), -0.06449 (19), -0.06447 (19), -0.06445 (19), -0.06424 (20), -0.06417 (19), -0.06384 (20), -0.06381 (19), -0.06376 (20), -0.06339 (19), -0.06321 (20), -0.06314 (19), -0.06314 (20), -0.06305 (19), -0.06278 (19), 
Length of domains: 36260
Time: pickout 0.3072    decision 1.6510    set_bounds 2.0935    solve 4.9772    add 0.1239    
Accumulated time: pickout 1.6796    decision 7.5848    set_bounds 10.3860    solve 25.7525    add 1.3738    
Current (lb-rhs): -0.06607520580291748
124358 domains visited
Cumulative time: 64.64313387870789

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 641] [/input-8, 641] [/input-8, 614] [/input-8, 641] [/input-8, 641] [/input-8, 614] [/input, 2504] [/input-8, 1609] [/input, 2504] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06556832790374756
10 lb beta sum: 0.4940069019794464, worst -0.1062772274017334
Time: prepare 0.9478    bound 2.5889    transfer 0.1566    finalize 0.2320    func 4.1458    
Accumulated time: func 30.0386    prepare 6.3287    bound 17.6366    transfer 1.0051    finalize 2.8994    
all_split False
======================Cut inference begins======================
max lb tensor(0.39835477) min lb tensor(-0.06413400)
Number of Verified Splits: 12589 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 17
#cuts 4-6: 45
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 4.044152736663818 
BICCOS Cumulative time: 20.921290636062622
Preprocessing time: 1.14921236038208 Inference time: 2.7062935829162598 Add cuts time: 0.18578839302062988 Cut analysis time: 0.002858400344848633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06413 (20), -0.06399 (20), -0.06384 (20), -0.06333 (20), -0.06278 (19), -0.06276 (20), -0.06272 (20), -0.06256 (20), -0.06255 (20), -0.06252 (20), -0.06241 (20), -0.06241 (20), -0.06240 (20), -0.06228 (20), -0.06227 (20), -0.06224 (20), -0.06212 (20), -0.06209 (21), -0.06208 (19), -0.06196 (21), 
Length of domains: 40055
Time: pickout 0.3152    decision 1.9746    set_bounds 2.2552    solve 4.1559    add 0.0965    
Accumulated time: pickout 1.9948    decision 9.5594    set_bounds 12.6412    solve 29.9085    add 1.4703    
Current (lb-rhs): -0.06413400173187256
144537 domains visited
Cumulative time: 77.66151237487793

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2504] [/input, 2504] [/input, 2504] [/input-8, 1356] [/input, 3239] [/input, 460] [/input, 460] [/input-8, 1617] [/input-8, 1122] [/input-8, 1617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06371665000915527
10 lb beta sum: 0.4926913380622864, worst -0.10509498417377472
Time: prepare 0.9465    bound 2.5950    transfer 0.1561    finalize 0.2371    func 4.1610    
Accumulated time: func 34.1995    prepare 7.2757    bound 20.2315    transfer 1.1612    finalize 3.1365    
all_split False
======================Cut inference begins======================
max lb tensor(0.39726639) min lb tensor(-0.06226754)
Number of Verified Splits: 7985 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 19
#cuts 4-6: 41
#cuts 7-9: 5
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 3.322319507598877 
BICCOS Cumulative time: 24.2436101436615
Preprocessing time: 1.8703107833862305 Inference time: 1.3248710632324219 Add cuts time: 0.1244814395904541 Cut analysis time: 0.002656221389770508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06413 (20), -0.06399 (20), -0.06384 (20), -0.06333 (20), -0.06276 (20), -0.06272 (20), -0.06256 (20), -0.06255 (20), -0.06252 (20), -0.06241 (20), -0.06241 (20), -0.06228 (20), -0.06227 (20), -0.06212 (20), -0.06209 (21), -0.06196 (21), -0.06190 (20), -0.06182 (21), -0.06180 (20), -0.06171 (21), 
Length of domains: 48454
Time: pickout 0.3133    decision 1.6603    set_bounds 2.2822    solve 4.1692    add 0.1132    
Accumulated time: pickout 2.3081    decision 11.2197    set_bounds 14.9234    solve 34.0777    add 1.5835    
Current (lb-rhs): -0.06413400173187256
169320 domains visited
Cumulative time: 89.65852475166321

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1346] [/input, 2486] [/input-8, 1122] [/input-8, 1122] [/input-8, 1122] [/input-8, 1122] [/input-8, 1122] [/input, 460] [/input-8, 1122] [/input, 2501] 
cut re-enabled after branching node selection
0 lb beta sum: 0.465925008058548, worst -1.1853282451629639
10 lb beta sum: 0.5619834661483765, worst -0.10376530885696411
Time: prepare 1.5465    bound 2.5891    transfer 0.1607    finalize 0.2378    func 4.7584    
Accumulated time: func 38.9580    prepare 8.8226    bound 22.8206    transfer 1.3219    finalize 3.3743    
all_split False
======================Cut inference begins======================
max lb tensor(0.53968376) min lb tensor(-0.06221521)
Number of Verified Splits: 6083 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 72.
#cuts 1-3: 20
#cuts 4-6: 45
#cuts 7-9: 6
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 2.273003339767456 
BICCOS Cumulative time: 26.516613483428955
Preprocessing time: 1.1220061779022217 Inference time: 1.0340654850006104 Add cuts time: 0.11419391632080078 Cut analysis time: 0.002737760543823242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06399 (20), -0.06256 (20), -0.06227 (20), -0.06222 (21), -0.06196 (21), -0.06186 (21), -0.06171 (21), -0.06160 (20), -0.06156 (21), -0.06146 (20), -0.06131 (21), -0.06121 (20), -0.06105 (20), -0.06097 (21), -0.06091 (21), -0.06090 (20), -0.06084 (20), -0.06081 (21), -0.06079 (21), -0.06052 (21), 
Length of domains: 58755
Time: pickout 0.3116    decision 1.6641    set_bounds 2.3752    solve 5.5520    add 0.1142    
Accumulated time: pickout 2.6197    decision 12.8839    set_bounds 17.2986    solve 39.6297    add 1.6977    
Current (lb-rhs): -0.06399047374725342
196005 domains visited
Cumulative time: 102.06356358528137

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 460] [/input, 2486] [/input, 3511] [/input, 3239] [/input, 460] [/input, 460] [/input, 460] [/input, 460] [/input, 460] [/input, 3239] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06314826011657715
10 lb beta sum: 0.5029417872428894, worst -0.11045639961957932
Time: prepare 0.9708    bound 2.5939    transfer 0.1572    finalize 0.2781    func 4.2212    
Accumulated time: func 43.1792    prepare 9.7938    bound 25.4145    transfer 1.4791    finalize 3.6525    
all_split False
======================Cut inference begins======================
max lb tensor(0.39172357) min lb tensor(-0.06170702)
Number of Verified Splits: 5328 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 23
#cuts 4-6: 31
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 3.1110336780548096 
BICCOS Cumulative time: 29.627647161483765
Preprocessing time: 2.034330129623413 Inference time: 0.9717221260070801 Add cuts time: 0.10209131240844727 Cut analysis time: 0.0028901100158691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06227 (20), -0.06222 (21), -0.06186 (21), -0.06171 (21), -0.06171 (21), -0.06160 (20), -0.06156 (21), -0.06131 (21), -0.06116 (21), -0.06105 (20), -0.06097 (21), -0.06091 (21), -0.06090 (20), -0.06083 (22), -0.06081 (21), -0.06079 (21), -0.06052 (21), -0.06050 (21), -0.06048 (21), -0.06043 (21), 
Length of domains: 69811
Time: pickout 0.3122    decision 1.6581    set_bounds 2.4635    solve 4.2348    add 0.2887    
Accumulated time: pickout 2.9319    decision 14.5420    set_bounds 19.7621    solve 43.8645    add 1.9864    
Current (lb-rhs): -0.06226754188537598
223445 domains visited
Cumulative time: 114.32219958305359

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2503] [/input-8, 1356] [/input, 2504] [/input, 2504] [/input, 2503] [/input, 460] [/input-8, 1356] [/input, 2504] [/input, 2503] [/input-8, 1122] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06258273124694824
10 lb beta sum: 0.508080244064331, worst -0.1148911789059639
Time: prepare 1.0434    bound 2.5659    transfer 0.1629    finalize 0.3310    func 4.3333    
Accumulated time: func 47.5125    prepare 10.8378    bound 27.9805    transfer 1.6421    finalize 3.9835    
all_split False
======================Cut inference begins======================
max lb tensor(0.44415218) min lb tensor(-0.05998527)
Number of Verified Splits: 4863 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 24
#cuts 4-6: 21
#cuts 7-9: 13
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 3.327820062637329 
BICCOS Cumulative time: 32.955467224121094
Preprocessing time: 1.2313790321350098 Inference time: 2.002133846282959 Add cuts time: 0.09170842170715332 Cut analysis time: 0.0025987625122070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06222 (21), -0.06186 (21), -0.06171 (21), -0.06156 (21), -0.06131 (21), -0.06116 (21), -0.06083 (22), -0.06081 (21), -0.06079 (21), -0.06050 (21), -0.06048 (21), -0.06043 (21), -0.06037 (21), -0.06029 (22), -0.06028 (21), -0.06026 (21), -0.06023 (21), -0.06014 (21), -0.06013 (21), -0.06000 (21), 
Length of domains: 81332
Time: pickout 0.4040    decision 1.8358    set_bounds 3.7494    solve 4.3480    add 0.1658    
Accumulated time: pickout 3.3359    decision 16.3778    set_bounds 23.5115    solve 48.2125    add 2.1522    
Current (lb-rhs): -0.062215209007263184
251350 domains visited
Cumulative time: 128.29150080680847

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1122] [/input, 460] [/input, 3239] [/input, 460] [/input, 3239] [/input, 3511] [/input, 3239] [/input, 460] [/input-8, 1122] [/input, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06162858009338379
10 lb beta sum: 0.5201455950737, worst -0.11307115107774734
Time: prepare 1.0009    bound 2.5611    transfer 0.1575    finalize 1.3593    func 5.2965    
Accumulated time: func 52.8090    prepare 11.8392    bound 30.5415    transfer 1.7996    finalize 5.3428    
all_split False
======================Cut inference begins======================
max lb tensor(0.44314560) min lb tensor(-0.06019139)
Number of Verified Splits: 4699 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 62.
#cuts 1-3: 24
#cuts 4-6: 21
#cuts 7-9: 16
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 2.102215528488159 
BICCOS Cumulative time: 35.05768275260925
Preprocessing time: 1.1308844089508057 Inference time: 0.8766956329345703 Add cuts time: 0.09206342697143555 Cut analysis time: 0.0025720596313476562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06186 (21), -0.06171 (21), -0.06116 (21), -0.06083 (22), -0.06050 (21), -0.06043 (21), -0.06037 (21), -0.06028 (21), -0.06026 (21), -0.06019 (22), -0.06000 (21), -0.05999 (21), -0.05993 (22), -0.05985 (22), -0.05981 (22), -0.05978 (22), -0.05973 (21), -0.05970 (22), -0.05970 (22), -0.05956 (22), 
Length of domains: 93017
Time: pickout 0.3366    decision 1.7081    set_bounds 1.7756    solve 5.3047    add 0.1215    
Accumulated time: pickout 3.6725    decision 18.0859    set_bounds 25.2871    solve 53.5172    add 2.2737    
Current (lb-rhs): -0.06185805797576904
279419 domains visited
Cumulative time: 139.74935507774353

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 460] [/input, 460] [/input-8, 1625] [/input-8, 680] [/input-8, 1617] [/input, 3239] [/input, 3239] [/input, 2486] [/input, 3239] [/input-8, 1346] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06216931343078613
10 lb beta sum: 0.5016939043998718, worst -0.11518854647874832
Time: prepare 0.9828    bound 2.5632    transfer 0.1591    finalize 0.2581    func 4.1853    
Accumulated time: func 56.9943    prepare 12.8224    bound 33.1047    transfer 1.9587    finalize 5.6009    
all_split False
======================Cut inference begins======================
max lb tensor(0.42271978) min lb tensor(-0.06073439)
Number of Verified Splits: 4658 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 24
#cuts 4-6: 22
#cuts 7-9: 20
#cuts >= 20: 0
BICCOS time: 3.4055192470550537 
BICCOS Cumulative time: 38.46320199966431
Preprocessing time: 1.1864192485809326 Inference time: 2.1274898052215576 Add cuts time: 0.08881902694702148 Cut analysis time: 0.002791166305541992
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06171 (21), -0.06073 (22), -0.06028 (21), -0.06019 (22), -0.06005 (22), -0.05999 (21), -0.05993 (22), -0.05985 (22), -0.05970 (22), -0.05970 (22), -0.05956 (22), -0.05942 (22), -0.05938 (22), -0.05935 (22), -0.05931 (21), -0.05930 (22), -0.05927 (22), -0.05913 (22), -0.05911 (22), -0.05904 (22), 
Length of domains: 104743
Time: pickout 0.3193    decision 1.6690    set_bounds 2.8678    solve 4.1974    add 0.1370    
Accumulated time: pickout 3.9918    decision 19.7549    set_bounds 28.1550    solve 57.7146    add 2.4106    
Current (lb-rhs): -0.0617070198059082
307529 domains visited
Cumulative time: 152.4589376449585

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1617] [/input-8, 1122] [/input, 3239] [/input-8, 1341] [/input-8, 1625] [/input, 3239] [/input, 460] [/input, 3239] [/input-8, 1342] [/input-8, 1625] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06202554702758789
10 lb beta sum: 0.5193541049957275, worst -0.1092868521809578
Time: prepare 0.9784    bound 2.5888    transfer 0.1567    finalize 0.2903    func 4.2383    
Accumulated time: func 61.2326    prepare 13.8013    bound 35.6936    transfer 2.1154    finalize 5.8912    
all_split False
======================Cut inference begins======================
max lb tensor(0.44045192) min lb tensor(-0.06058526)
Number of Verified Splits: 4438 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 75.
#cuts 1-3: 24
#cuts 4-6: 24
#cuts 7-9: 25
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 3.458939790725708 
BICCOS Cumulative time: 41.922141790390015
Preprocessing time: 2.4966909885406494 Inference time: 0.8647041320800781 Add cuts time: 0.09417176246643066 Cut analysis time: 0.0033729076385498047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06073 (22), -0.06059 (22), -0.06019 (22), -0.06005 (22), -0.05999 (21), -0.05993 (22), -0.05985 (22), -0.05970 (22), -0.05970 (22), -0.05956 (22), -0.05942 (22), -0.05938 (22), -0.05935 (22), -0.05931 (21), -0.05930 (22), -0.05927 (22), -0.05916 (22), -0.05913 (22), -0.05904 (22), -0.05901 (22), 
Length of domains: 116689
Time: pickout 0.3214    decision 1.6724    set_bounds 1.7020    solve 4.2500    add 0.1432    
Accumulated time: pickout 4.3131    decision 21.4273    set_bounds 29.8570    solve 61.9646    add 2.5538    
Current (lb-rhs): -0.06073439121246338
335859 domains visited
Cumulative time: 164.1336305141449

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 668] [/input, 3511] [/input, 3239] [/input-8, 1342] [/input, 3511] [/input, 460] [/input, 3509] [/input-8, 1342] [/input-8, 1044] [/input, 3239] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06026887893676758
10 lb beta sum: 0.5106656551361084, worst -0.10219559073448181
Time: prepare 0.9773    bound 2.6019    transfer 0.1621    finalize 1.7000    func 5.6588    
Accumulated time: func 66.8914    prepare 14.7791    bound 38.2955    transfer 2.2775    finalize 7.5911    
all_split False
======================Cut inference begins======================
max lb tensor(0.44495040) min lb tensor(-0.05774689)
Number of Verified Splits: 4455 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 27
#cuts 4-6: 27
#cuts 7-9: 16
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 2.093351364135742 
BICCOS Cumulative time: 44.01549315452576
Preprocessing time: 1.1265501976013184 Inference time: 0.8627839088439941 Add cuts time: 0.10105586051940918 Cut analysis time: 0.002961397171020508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06073 (22), -0.06059 (22), -0.06019 (22), -0.06005 (22), -0.05993 (22), -0.05970 (22), -0.05970 (22), -0.05956 (22), -0.05938 (22), -0.05935 (22), -0.05930 (22), -0.05927 (22), -0.05916 (22), -0.05913 (22), -0.05901 (22), -0.05889 (22), -0.05889 (22), -0.05886 (22), -0.05886 (22), -0.05884 (23), 
Length of domains: 128618
Time: pickout 0.3227    decision 1.6681    set_bounds 1.7194    solve 5.6672    add 0.1570    
Accumulated time: pickout 4.6358    decision 23.0954    set_bounds 31.5763    solve 67.6318    add 2.7108    
Current (lb-rhs): -0.06073439121246338
364172 domains visited
Cumulative time: 175.89649415016174

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1342] [/input, 3239] [/input, 3509] [/input-8, 1122] [/input, 2501] [/input-8, 1122] [/input, 3509] [/input, 3509] [/input, 2501] [/input, 2486] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.059133291244506836
10 lb beta sum: 0.7003477811813354, worst -0.09714097529649734
Time: prepare 0.9885    bound 2.5956    transfer 0.1600    finalize 0.2757    func 4.2543    
Accumulated time: func 71.1458    prepare 15.7681    bound 40.8911    transfer 2.4374    finalize 7.8669    
all_split False
======================Cut inference begins======================
max lb tensor(0.85516143) min lb tensor(-0.05768931)
Number of Verified Splits: 14013 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 3.970573902130127 
BICCOS Cumulative time: 47.986067056655884
Preprocessing time: 1.180006980895996 Inference time: 2.3789479732513428 Add cuts time: 0.41023731231689453 Cut analysis time: 0.0013816356658935547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06073 (22), -0.06059 (22), -0.06019 (22), -0.06005 (22), -0.05993 (22), -0.05956 (22), -0.05938 (22), -0.05935 (22), -0.05930 (22), -0.05927 (22), -0.05916 (22), -0.05913 (22), -0.05901 (22), -0.05886 (22), -0.05886 (22), -0.05884 (23), -0.05880 (22), -0.05876 (22), -0.05875 (22), -0.05861 (22), 
Length of domains: 130989
Time: pickout 0.3223    decision 1.6611    set_bounds 3.2335    solve 4.2631    add 0.1243    
Accumulated time: pickout 4.9581    decision 24.7565    set_bounds 34.8098    solve 71.8949    add 2.8351    
Current (lb-rhs): -0.06073439121246338
382927 domains visited
Cumulative time: 189.69195556640625

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3239] [/input-8, 1122] [/input-8, 1122] [/input-8, 1122] [/input-8, 1122] [/input-8, 1044] [/input-8, 1346] [/input, 3239] [/input-8, 1342] [/input, 3239] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05964994430541992
10 lb beta sum: 2.415783405303955, worst -0.04689216613769531
Time: prepare 0.9735    bound 2.5144    transfer 0.1526    finalize 0.2637    func 4.1269    
Accumulated time: func 75.2727    prepare 16.7421    bound 43.4055    transfer 2.5900    finalize 8.1306    
all_split False
======================Cut inference begins======================
max lb tensor(1.65549672) min lb tensor(-0.04685783)
Number of Verified Splits: 32478 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 7.189024925231934 
BICCOS Cumulative time: 55.17509198188782
Preprocessing time: 1.1993110179901123 Inference time: 5.653693437576294 Add cuts time: 0.33518004417419434 Cut analysis time: 0.0008404254913330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06073 (22), -0.06059 (22), -0.06005 (22), -0.05993 (22), -0.05956 (22), -0.05930 (22), -0.05927 (22), -0.05916 (22), -0.05913 (22), -0.05901 (22), -0.05886 (22), -0.05886 (22), -0.05884 (23), -0.05861 (22), -0.05850 (22), -0.05847 (22), -0.05832 (22), -0.05820 (22), -0.05812 (22), -0.05793 (22), 
Length of domains: 114895
Time: pickout 0.3430    decision 1.6682    set_bounds 3.1496    solve 4.1355    add 0.0370    
Accumulated time: pickout 5.3012    decision 26.4247    set_bounds 37.9594    solve 76.0304    add 2.8722    
Current (lb-rhs): -0.06073439121246338
383217 domains visited
Time out!!!!!!!!
Result: unknown in 209.6001 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 599] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 599] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 270] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17036009, -1.17387700, -0.10739541, -1.19881415, -0.49474239,
         -1.09854007, -0.81328821,  0.67185235, -1.93993378]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.37687588, -4.47643137, -4.55286217, -3.14921999, -4.19641304,
          -3.52143621, -3.41718960, -4.04783678, -6.27502346, -3.11812735],
         [-5.37687588, -4.47643137, -4.55286217, -3.14921999, -4.19641304,
          -3.52143621, -3.41718960, -4.04783678, -6.27502346, -3.11812735]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.05924177,  1.13567257, -0.26796961,  0.77922344,  0.10424662,
           0.63064718, -0.29906225]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0142 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0596 seconds
############# Summary #############
Final verified acc: 47.0% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 94 , total falsified (unsafe/sat): 100 , timeout: 6
mean time for ALL instances (total 200):8.45212743817816, max time: 219.2881462574005
mean time for verified SAFE instances(total 94): 4.261456362744595, max time: 87.81181764602661
mean time for verified (SAFE + UNSAFE) instances (total 194): 2.1330584533435784, max time: [5.282353401184082, 1.1901898384094238, 0.07673263549804688, 0.07365679740905762, 0.07355189323425293, 0.05750679969787598, 0.07164955139160156, 0.0865330696105957, 0.04997110366821289, 0.08039259910583496, 0.07219982147216797, 0.0708310604095459, 0.08497118949890137, 0.07737326622009277, 0.07659578323364258, 0.0949552059173584, 0.0892486572265625, 0.055411338806152344, 0.060735225677490234, 0.07065939903259277, 0.08230328559875488, 0.08602070808410645, 0.04504990577697754, 0.08372902870178223, 0.06688070297241211, 0.0981743335723877, 0.0777127742767334, 0.06656241416931152, 0.05598163604736328, 0.046416282653808594, 0.0423123836517334, 0.10285425186157227, 0.08046865463256836, 0.04700636863708496, 0.06067919731140137, 0.03829598426818848, 0.07143974304199219, 0.08284306526184082, 0.08050727844238281, 0.06889820098876953, 0.08199381828308105, 0.08537149429321289, 0.09535002708435059, 0.07370185852050781, 0.043334007263183594, 0.0731205940246582, 0.08912444114685059, 0.03504204750061035, 0.07464933395385742, 0.07589364051818848, 0.08472943305969238, 0.04072427749633789, 0.06920075416564941, 0.05292057991027832, 0.06732964515686035, 0.07913899421691895, 0.08343315124511719, 0.05787014961242676, 0.07253670692443848, 0.0779726505279541, 0.06688261032104492, 0.08141517639160156, 0.07825016975402832, 0.07793712615966797, 0.06957411766052246, 0.09132194519042969, 0.07734012603759766, 0.0817418098449707, 0.0838932991027832, 0.08180880546569824, 0.08239555358886719, 0.07372713088989258, 0.05431175231933594, 0.048265933990478516, 0.08344864845275879, 0.08037090301513672, 0.07557082176208496, 0.07038331031799316, 0.08191537857055664, 0.05424141883850098, 0.05956578254699707, 0.04031109809875488, 0.05601620674133301, 0.044229745864868164, 0.04480266571044922, 0.03974723815917969, 0.08538031578063965, 0.05931997299194336, 0.03119516372680664, 0.07291054725646973, 0.04344534873962402, 0.03347921371459961, 0.07152342796325684, 0.0911109447479248, 0.07449197769165039, 0.07982015609741211, 0.03814816474914551, 0.07955598831176758, 0.04391813278198242, 0.05958127975463867]
mean time for verified SAFE + TIMEOUT instances (total 100): 16.77189130306244, max time: [208.88092374801636, 219.2881462574005, 204.40318942070007, 218.730886220932, 215.7089958190918, 209.6000907421112] 
mean time for verified UNSAFE instances (total 100): 0.1323644185066223, max time: 5.282353401184082
unsafe-pgd (total 100), index: [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 72, 75, 77, 78, 80, 82, 87, 88, 90, 91, 92, 94, 96, 98, 99, 100, 101, 102, 105, 106, 108, 113, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 137, 138, 141, 143, 145, 149, 150, 151, 152, 154, 155, 156, 163, 165, 170, 173, 174, 175, 176, 181, 184, 185, 188, 191, 194, 196, 199]
safe-incomplete (total 73), index: [2, 8, 14, 17, 20, 21, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 47, 48, 49, 51, 52, 62, 68, 71, 73, 74, 76, 79, 81, 83, 85, 86, 93, 104, 109, 110, 111, 114, 115, 117, 118, 121, 131, 133, 136, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 162, 164, 166, 168, 171, 177, 178, 179, 180, 182, 186, 189, 190, 192, 193, 197]
safe (total 21), index: [11, 38, 42, 54, 60, 70, 84, 89, 95, 103, 107, 112, 116, 132, 139, 158, 160, 167, 169, 172, 187]
unknown (total 6), index: [24, 55, 97, 183, 195, 198]
