Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_mix4/biccos_all_selective_mts.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_mix4
  path: models/sdp/cifar_cnn_a_mix4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_9797
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 07:06:41 2024 on n23g0025.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_mix4/biccos_all_selective_mts.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71758652, -10.60625553,  -8.48054504,  -7.71353006,  -8.18405724,
          -8.17642593,  -8.98493576,  -8.79066181, -11.70876884, -10.32774353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 744] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 744] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.43510056, 2.04025674, 0.39722514, 0.03137290, 0.32232380, 0.68482637,
         0.70088989, 3.05900335, 1.95559001]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.1651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [681]; unstable size 681; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 237, 1, 681] with unstable size 236 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 681] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 681] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [236]; unstable size 236; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 236] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 236] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86854887, -1.72656691,  7.80241537,  6.11302614,  6.77265596,
          6.66194582,  6.08438683,  7.59612846,  5.53368664]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
          -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83598518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1153 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [974]; unstable size 974; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 974] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 974] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 974] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 267] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.48544836,  2.23013401,  1.58959103,  1.19109154,  1.84305763,
          1.51451588,  3.08925152,  0.10891151,  0.42558682]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  2.00it/s]100%|██████████| 1/1 [00:00<00:00,  2.00it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.96112823, -19.53406715, -23.43943405, -22.77491570, -22.15659523,
          -23.06166649, -22.97703743, -23.94551468, -21.15086555, -20.97314644]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42706108]]], device='cuda:0')
number of violation:  0
Attack finished in 0.5040 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.328781127929688
alpha/beta optimization time: 3.642361640930176
initial alpha-crown bounds: tensor([[-0.41349983,  2.33963728,  1.68941736,  1.28608990,  1.95209122,
          1.58836555,  3.19598055,  0.21351480,  0.47718400]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4134998321533203
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.8197727203369
Verifying property 0 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.41349983]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
        -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.41349983]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 974
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 263
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1259
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013375282287597656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41349172592163086
10 lb beta sum: 0.0, worst -0.41351842880249023
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5562    transfer 0.0001    finalize 0.0003    func 0.5568    
Accumulated time: func 0.5568    prepare 0.0002    bound 0.5562    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 67] 
split level 4: [/input-12, 24] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 1963] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 64] 
split level 9: [/input-12, 29] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 1964] 
split level 12: [/input-8, 1956] 
split level 13: [/input-12, 57] 
split level 14: [/input-8, 1133] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 853] 
split level 17: [/input-8, 852] 
split level 18: [/input-8, 857] 
split level 19: [/input-8, 425] 
split level 20: [/input-8, 165] 
split level 21: [/input-8, 379] 
split level 22: [/input-8, 157] 
split level 23: [/input-8, 155] 
split level 24: [/input-8, 282] 
split level 25: [/input-8, 314] 
split level 26: [/input-8, 854] 
split level 27: [/input-8, 1719] 
split level 28: [/input-8, 922] 
split level 29: [/input-8, 421] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 619] 
split level 32: [/input-8, 1932] 
split level 33: [/input-8, 424] 
split level 34: [/input-8, 603] 
split level 35: [/input-8, 1236] 
split level 36: [/input-8, 317] 
split level 37: [/input-8, 745] 
split level 38: [/input-8, 617] 
split level 39: [/input-8, 154] 
split level 40: [/input-8, 618] 
split level 41: [/input-8, 1709] 
split level 42: [/input-8, 439] 
split level 43: [/input, 3542] 
split level 44: [/input-8, 928] 
split level 45: [/input, 3557] 
split level 46: [/input-8, 614] 
split level 47: [/input-8, 1763] 
split level 48: [/input-8, 1393] 
split level 49: [/input-8, 432] 
split level 50: [/input-8, 749] 
split level 51: [/input-8, 377] 
split level 52: [/input-8, 1698] 
split level 53: [/input-8, 416] 
split level 54: [/input-8, 105] 
split level 55: [/input-8, 318] 
split level 56: [/input-8, 1649] 
split level 57: [/input-8, 422] 
split level 58: [/input-8, 372] 
split level 59: [/input-8, 1701] 
split level 60: [/input-8, 313] 
split level 61: [/input-8, 1931] 
split level 62: [/input-8, 1625] 
split level 63: [/input-8, 1702] 
split level 64: [/input-8, 858] 
split level 65: [/input-8, 1700] 
split level 66: [/input-8, 1764] 
split level 67: [/input-8, 410] 
split level 68: [/input-8, 1235] 
split level 69: [/input, 3541] 
split level 70: [/input, 3958] 
split level 71: [/input-8, 316] 
split level 72: [/input-8, 414] 
split level 73: [/input-8, 371] 
split level 74: [/input-8, 1617] 
split level 75: [/input-8, 1650] 
split level 76: [/input-8, 1585] 
split level 77: [/input-8, 1040] 
split level 78: [/input-8, 408] 
split level 79: [/input-8, 1705] 
split level 80: [/input-8, 1704] 
split level 81: [/input-8, 1125] 
split level 82: [/input, 3573] 
split level 83: [/input-8, 1210] 
split level 84: [/input, 3560] 
split level 85: [/input, 2726] 
split level 86: [/input, 3558] 
split level 87: [/input, 3564] 
split level 88: [/input-8, 92] 
split level 89: [/input, 998] 
split level 90: [/input, 1016] 
split level 91: [/input, 3789] 
split level 92: [/input, 3575] 
split level 93: [/input, 1004] 
split level 94: [/input-8, 1628] 
split level 95: [/input-8, 1314] 
split level 96: [/input-8, 904] 
split level 97: [/input, 1003] 
split level 98: [/input-8, 981] 
split level 99: [/input, 3559] 
split level 100: [/input-12, 12] 
split level 101: [/input, 1483] 
split level 102: [/input, 3447] 
split level 103: [/input-8, 1619] 
split level 104: [/input, 1444] 
split level 105: [/input, 3578] 
split level 106: [/input, 3581] 
split level 107: [/input, 164] 
split level 108: [/input, 3556] 
split level 109: [/input-8, 381] 
split level 110: [/input, 3555] 
split level 111: [/input, 1002] 
split level 112: [/input, 1021] 
split level 113: [/input, 1948] 
split level 114: [/input, 995] 
split level 115: [/input, 3237] 
split level 116: [/input, 3572] 
split level 117: [/input-8, 1610] 
split level 118: [/input-8, 828] 
split level 119: [/input, 1457] 
split level 120: [/input-8, 973] 
split level 121: [/input, 1943] 
split level 122: [/input, 3543] 
split level 123: [/input-8, 1535] 
split level 124: [/input, 3553] 
split level 125: [/input, 1484] 
split level 126: [/input-8, 370] 
split level 127: [/input, 3574] 
split level 128: [/input-8, 412] 
split level 129: [/input-8, 2045] 
split level 130: [/input-8, 810] 
split level 131: [/input-8, 1712] 
split level 132: [/input, 2537] 
split level 133: [/input-8, 949] 
split level 134: [/input-8, 475] 
split level 135: [/input, 2503] 
split level 136: [/input, 3540] 
split level 137: [/input, 2282] 
split level 138: [/input, 2538] 
split level 139: [/input, 2519] 
split level 140: [/input, 494] 
split level 141: [/input-8, 415] 
split level 142: [/input, 2553] 
split level 143: [/input, 3554] 
split level 144: [/input, 2786] 
split level 145: [/input, 1970] 
split level 146: [/input, 2551] 
split level 147: [/input, 2552] 
split level 148: [/input, 1947] 
split level 149: [/input, 1758] 
split level 150: [/input-8, 1713] 
split level 151: [/input, 2788] 
split level 152: [/input, 2266] 
split level 153: [/input, 2279] 
split level 154: [/input-12, 36] 
split level 155: [/input, 3537] 
split level 156: [/input-8, 1609] 
split level 157: [/input, 888] 
split level 158: [/input-8, 1369] 
split level 159: [/input, 3241] 
split level 160: [/input, 3570] 
split level 161: [/input, 2991] 
split level 162: [/input, 3571] 
split level 163: [/input, 2769] 
split level 164: [/input, 872] 
split level 165: [/input-8, 818] 
split level 166: [/input-8, 980] 
split level 167: [/input-8, 1620] 
split level 168: [/input, 3569] 
split level 169: [/input, 3873] 
split level 170: [/input-8, 162] 
split level 171: [/input, 3269] 
split level 172: [/input, 1000] 
split level 173: [/input, 3041] 
split level 174: [/input, 2555] 
split level 175: [/input, 2182] 
split level 176: [/input-8, 466] 
split level 177: [/input-8, 1708] 
split level 178: [/input, 3469] 
split level 179: [/input, 2534] 
split level 180: [/input-8, 401] 
split level 181: [/input, 2682] 
split level 182: [/input-8, 168] 
split level 183: [/input, 2529] 
split level 184: [/input, 2214] 
split level 185: [/input, 2004] 
split level 186: [/input, 1950] 
split level 187: [/input-8, 1924] 
split level 188: [/input-8, 407] 
split level 189: [/input, 1917] 
split level 190: [/input, 3282] 
split level 191: [/input, 2278] 
split level 192: [/input, 2275] 
split level 193: [/input-8, 1611] 
split level 194: [/input, 1999] 
split level 195: [/input, 2583] 
split level 196: [/input, 2006] 
split level 197: [/input, 3161] 
split level 198: [/input, 1698] 
split level 199: [/input, 2260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4132957458496094
10 lb beta sum: 0.0, worst -0.4132547378540039
Time: prepare 0.0112    bound 0.1928    transfer 0.0029    finalize 0.0032    func 0.2126    
Accumulated time: func 0.7694    prepare 0.0212    bound 0.7490    transfer 0.0030    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.27174711) min lb tensor(-0.41324759)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01123499870300293 
BICCOS Cumulative time: 0.01123499870300293
Preprocessing time: 0.01009988784790039 Inference time: 0.0007548332214355469 Add cuts time: 9.965896606445312e-05 Cut analysis time: 0.00028061866760253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39414 (1), -0.39300 (1), -0.39261 (1), -0.39248 (1), -0.39090 (1), -0.39077 (1), -0.39066 (1), -0.38895 (1), -0.38809 (1), -0.38751 (1), -0.38647 (1), -0.38566 (1), -0.38450 (1), -0.38403 (1), -0.38379 (1), -0.38223 (1), -0.38198 (1), -0.38050 (1), -0.37986 (1), -0.37857 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5245    set_bounds 0.0081    solve 0.2127    add 0.0655    
Accumulated time: pickout 0.0004    decision 0.5245    set_bounds 0.0081    solve 0.2127    add 0.0655    
Current (lb-rhs): -0.39414215087890625
50 domains visited
Cumulative time: 1.4107980728149414

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 6] 
split level 2: [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3831205368041992
10 lb beta sum: 0.3769442141056061, worst -0.379885196685791
Time: prepare 0.0069    bound 1.2007    transfer 0.0015    finalize 0.0024    func 1.2141    
Accumulated time: func 1.9835    prepare 0.0284    bound 1.9497    transfer 0.0045    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.66269970) min lb tensor(-0.37981558)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.014548540115356445 
BICCOS Cumulative time: 0.025783538818359375
Preprocessing time: 0.011327743530273438 Inference time: 0.0020432472229003906 Add cuts time: 0.0008883476257324219 Cut analysis time: 0.0002892017364501953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21197 (2), -0.20936 (2), -0.20675 (2), -0.20535 (2), -0.20519 (2), -0.20485 (2), -0.20467 (2), -0.20369 (2), -0.20359 (2), -0.20279 (2), -0.20237 (2), -0.20111 (2), -0.19948 (2), -0.19932 (2), -0.19780 (2), -0.19748 (2), -0.19485 (2), -0.19454 (2), -0.19351 (2), -0.19337 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0216    set_bounds 0.0120    solve 1.2142    add 0.0760    
Accumulated time: pickout 0.0014    decision 0.5461    set_bounds 0.0201    solve 1.4269    add 0.1415    
Current (lb-rhs): -0.2119736671447754
100 domains visited
Cumulative time: 2.750349521636963

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 6] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21503305435180664
10 lb beta sum: 0.46232762932777405, worst -0.20423173904418945
Time: prepare 0.0061    bound 0.1130    transfer 0.0016    finalize 0.0023    func 0.1256    
Accumulated time: func 2.1092    prepare 0.0348    bound 2.0628    transfer 0.0061    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(0.70497185) min lb tensor(-0.20009983)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01702880859375 
BICCOS Cumulative time: 0.042812347412109375
Preprocessing time: 0.010989665985107422 Inference time: 0.003698110580444336 Add cuts time: 0.0020797252655029297 Cut analysis time: 0.0002613067626953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08881 (3), -0.08832 (3), -0.08765 (3), -0.08721 (3), -0.08684 (3), -0.08682 (3), -0.08682 (3), -0.08677 (3), -0.08601 (3), -0.08598 (3), -0.08485 (3), -0.08445 (3), -0.08441 (3), -0.08427 (3), -0.08364 (3), -0.08334 (3), -0.08140 (3), -0.07975 (3), -0.07883 (3), -0.07870 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0191    set_bounds 0.0147    solve 0.1257    add 0.0850    
Accumulated time: pickout 0.0023    decision 0.5652    set_bounds 0.0348    solve 1.5526    add 0.2265    
Current (lb-rhs): -0.08881276845932007
150 domains visited
Cumulative time: 3.0130107402801514

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10747528076171875
10 lb beta sum: 0.5602759122848511, worst -0.0903526246547699
Time: prepare 0.0061    bound 0.1129    transfer 0.0016    finalize 0.0019    func 0.1251    
Accumulated time: func 2.2343    prepare 0.0411    bound 2.1757    transfer 0.0076    finalize 0.0100    
all_split False
======================Cut inference begins======================
max lb tensor(0.20466952) min lb tensor(-0.08728595)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02724289894104004 
BICCOS Cumulative time: 0.07005524635314941
Preprocessing time: 0.011035919189453125 Inference time: 0.011312246322631836 Add cuts time: 0.0044934749603271484 Cut analysis time: 0.0004012584686279297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02493 (4), -0.02442 (4), -0.02426 (4), -0.02323 (4), -0.02240 (4), -0.02002 (4), -0.01941 (4), -0.01938 (4), -0.01919 (4), -0.01884 (4), -0.01854 (4), -0.01790 (4), -0.01783 (4), -0.01734 (4), -0.01732 (4), -0.01724 (4), -0.01713 (4), -0.01711 (4), -0.01692 (4), -0.01682 (4), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0191    set_bounds 0.0150    solve 0.1252    add 0.2363    
Accumulated time: pickout 0.0032    decision 0.5843    set_bounds 0.0498    solve 1.6778    add 0.4628    
Current (lb-rhs): -0.024925649166107178
200 domains visited
Cumulative time: 3.4370131492614746

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 29] [/input-12, 29] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04501533508300781
10 lb beta sum: 0.4397026598453522, worst -0.024164676666259766
Time: prepare 0.0064    bound 1.3350    transfer 0.0018    finalize 0.0021    func 1.3487    
Accumulated time: func 3.5830    prepare 0.0478    bound 3.5107    transfer 0.0095    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.12612247) min lb tensor(-0.01518822)
Number of Verified Splits: 385 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.04070734977722168 
BICCOS Cumulative time: 0.1107625961303711
Preprocessing time: 0.011369943618774414 Inference time: 0.01962566375732422 Add cuts time: 0.00925302505493164 Cut analysis time: 0.00045871734619140625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0148    solve 1.3488    add 0.0264    
Accumulated time: pickout 0.0042    decision 0.6037    set_bounds 0.0646    solve 3.0266    add 0.4892    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26118642e-33,  1.43375862e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26118642e-33,  9.85801756e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.75094289e-02, 7.81418607e-02, 6.25447407e-02,
        3.94192934e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.75094289e-02, 7.81418607e-02, 6.25447407e-02,
        1.14625975e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.75094289e-02, 7.81418607e-02, 6.34540692e-02,
        4.67395335e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.75094289e-02, 7.81418607e-02, 6.34540692e-02,
        1.18123099e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([8.71191584e-19, 9.75094289e-02, 5.11671528e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.43298787e-02, 7.25505054e-02, 6.51420355e-02,
        2.63838633e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.43298787e-02, 7.25505054e-02, 6.51420355e-02,
        1.15702674e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.43298787e-02, 7.25505054e-02, 6.91527128e-02,
        2.31890543e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([8.71191584e-19, 9.43298787e-02, 7.25505054e-02, 6.91527128e-02,
        1.12629458e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([8.71191584e-19, 9.43298787e-02, 5.42985201e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.36418676376342773
10 lb beta sum: 0.5715237259864807, worst -0.34502410888671875
Time: prepare 0.0005    bound 0.1297    transfer 0.0001    finalize 0.0002    func 0.1306    
Accumulated time: func 3.7136    prepare 0.0482    bound 3.6405    transfer 0.0096    finalize 0.0123    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 53] [/input-12, 29] [/input-12, 71] 
split level 3: [/input-12, 64] [/input-12, 71] [/input-12, 29] 
split level 4: [/input-12, 29] [/input-8, 1964] [/input-8, 1964] 
split level 5: [/input-12, 71] [/input-8, 1956] [/input-8, 1956] 
split level 6: [/input-8, 1956] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8771109580993652, worst -0.03697347640991211
10 lb beta sum: 0.8771077990531921, worst -0.03566455841064453
Time: prepare 0.0161    bound 0.1332    transfer 0.0006    finalize 0.0019    func 0.1542    
Accumulated time: func 3.8678    prepare 0.0647    bound 3.7737    transfer 0.0102    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.55727005) min lb tensor(-0.03531456)
Number of Verified Splits: 358 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8891011476516724, worst -0.39519834518432617
10 lb beta sum: 1.1341547966003418, worst -0.3837594985961914
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 9
#cuts 4-6: 32
#cuts 7-9: 26
#cuts >= 20: 0
BICCOS time: 0.3736457824707031 
BICCOS Cumulative time: 0.4844083786010742
Preprocessing time: 0.010333061218261719 Inference time: 0.339550256729126 Add cuts time: 0.020880699157714844 Cut analysis time: 0.002881765365600586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03531 (7), -0.03087 (7), -0.03007 (7), -0.03004 (7), -0.02788 (7), -0.02460 (7), -0.02212 (7), -0.02056 (7), -0.01998 (7), -0.01838 (7), -0.01821 (7), -0.01431 (7), -0.01092 (7), -0.00978 (7), -0.00931 (7), -0.00803 (7), -0.00701 (7), -0.00693 (7), -0.00607 (7), -0.00446 (7), 
Length of domains: 26
Time: pickout 0.0005    decision 0.0197    set_bounds 0.0331    solve 0.1544    add 0.0009    
Accumulated time: pickout 0.0047    decision 0.6234    set_bounds 0.0978    solve 3.1810    add 0.4900    
Current (lb-rhs): -0.03531455993652344
226 domains visited
Cumulative time: 5.630777597427368

BaB round 2
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1964] [/input-12, 57] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] 
split level 1: [/input-12, 57] [/input-12, 57] [/input-8, 1964] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] 
split level 2: [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008118629455566406

all verified at 1th iter
Time: prepare 0.0042    bound 0.0187    transfer 0.0004    finalize 0.0011    func 0.0258    
Accumulated time: func 3.8936    prepare 0.0690    bound 3.7924    transfer 0.0107    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.12116814) min lb tensor(6.67572021e-05)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Total number of valid cuts: 67.
#cuts 1-3: 9
#cuts 4-6: 32
#cuts 7-9: 26
#cuts >= 20: 0
BICCOS time: 0.006310939788818359 
BICCOS Cumulative time: 0.4907193183898926
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0151    set_bounds 0.0169    solve 0.0258    add 0.0001    
Accumulated time: pickout 0.0060    decision 0.6385    set_bounds 0.1147    solve 3.2068    add 0.4901    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
226 domains visited
Cumulative time: 5.697417736053467


Properties batch 1, size 1
Remaining timeout: 189.95025730133057
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 189.94964981079102
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 189.9496066570282
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 189.9495837688446
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 189.94956302642822
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 189.94954323768616
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 189.94951105117798
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 189.94948935508728
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 10.0506 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [524]; unstable size 524; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 524] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 524] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 524] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 230] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.57842255,  7.92652655,  0.44128633,  0.66715562, -0.01040864,
          3.37060833, -2.14889312,  8.08667374,  6.50471783]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058],
         [-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.83204842, -1.47079277]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 586] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 586] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 240] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88010216,  3.64075089, -1.31467104,  1.09980798,  0.71520233,
          0.08684754,  0.73927283,  3.52310109,  2.98584604]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
          -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36829662]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [702]; unstable size 702; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 702] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 702] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 702] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 197] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.11360037,  4.75878477, -0.60330045, -1.14847994, -0.96145183,
          1.62045550,  1.45869017,  4.42397833,  5.39402199]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729],
         [-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39752007, -0.34215164, -0.12359238]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0639 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 600] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 209] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.74476361,  2.03233957,  3.50479388,  2.95214272,  3.84003520,
          3.82891750,  2.31719398,  0.27049708,  0.99338436]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.70954704, -22.50856209, -25.82820511, -27.24475288, -26.80752373,
          -27.71620750, -27.81856155, -26.49511337, -23.68723488, -24.25093651]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20098495]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0472 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.38412285, -21.59840584, -16.79981041, -17.57214165, -15.52907753,
         -18.46681404, -14.29935837, -18.97409439, -21.41892242, -22.47642326]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [661]; unstable size 661; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 661] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 661] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 661] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 280] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.40035534, 4.96538591, 1.38254356, 2.09833956, 0.19922996, 2.73652554,
         2.77133179, 5.19357300, 5.75338459]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0514 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.33151817, -30.12449837, -30.12789345, -32.32761765, -31.50092506,
         -33.39948273, -34.24899292, -33.59529877, -28.85486984, -31.05011368]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 660] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 660] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 124] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10990691, 3.26029587, 5.21397638, 4.49963474, 6.16231871, 7.11179638,
         6.38362360, 1.83803439, 4.12780380]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0279 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [652]; unstable size 652; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 652] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 652] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 652] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 272] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.76794982,  3.46308851, -1.30139816, -0.50252217, -0.49823141,
          0.25928640,  1.05345273,  0.17230195,  2.34708500]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003],
         [-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31040668, -0.25894260,  0.48612785]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 602] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 137] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.99381113,  6.23490906, -1.89244652, -1.75638437,  1.05084109,
         -2.64184880,  3.30787516,  3.47557902,  4.31073761]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675],
         [-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.34857178, -1.27011299, -2.14654350]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.21021080, -22.37670517, -15.79945183, -19.83161354, -17.04315186,
         -20.54102135, -18.07866096, -20.16787720, -20.66229820, -22.52699852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [783]; unstable size 783; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 272, 1, 783] with unstable size 271 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 783] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 783] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [271]; unstable size 271; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 271] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 271] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.10988879, 4.28678799, 2.71925116, 0.07136536, 3.35213280, 0.93095881,
         2.59224534, 3.15873384, 4.39236116]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0310 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 512] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 512] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.19138694,  0.13958716, -1.25776410,  0.64105916,  1.78223956,
         -0.24006486,  4.64796305,  2.03586769,  0.69128168]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820],
         [-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.45954132,  0.39414024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0344 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 212, 1, 800] with unstable size 211 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 800] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [211]; unstable size 211; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 211] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 211] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64949751,  2.53695774,  4.98263073,  4.08614826,  6.12158632,
          4.88727856,  5.69290876,  0.59366226,  1.31843650]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.39it/s]100%|██████████| 1/1 [00:00<00:00,  9.38it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.69252968, -23.57816505, -27.19650650, -29.87729073, -29.16208076,
          -31.30131340, -29.60456848, -30.91409683, -24.93794060, -25.69927025]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11436462]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1091 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 30.024333953857422
alpha/beta optimization time: 1.1794931888580322
initial alpha-crown bounds: tensor([[-0.60099888,  2.58548021,  5.03595257,  4.14844227,  6.18062592,
          4.93974638,  5.75246811,  0.64157867,  1.34103751]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6009988784790039
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.66962337493896
Verifying property 0 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.60099888]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
        -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.60099888]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 800
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 204
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1025
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010085105895996094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6009936332702637
10 lb beta sum: 0.0, worst -0.6010003089904785
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 89] 
split level 5: [/input-12, 64] 
split level 6: [/input-12, 2] 
split level 7: [/input-12, 90] 
split level 8: [/input-12, 8] 
split level 9: [/input-12, 71] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 32] 
split level 12: [/input-8, 292] 
split level 13: [/input-12, 14] 
split level 14: [/input-8, 1949] 
split level 15: [/input-8, 757] 
split level 16: [/input-8, 146] 
split level 17: [/input-8, 155] 
split level 18: [/input-8, 1134] 
split level 19: [/input-8, 1387] 
split level 20: [/input-8, 418] 
split level 21: [/input-8, 420] 
split level 22: [/input-8, 158] 
split level 23: [/input-8, 147] 
split level 24: [/input-8, 416] 
split level 25: [/input-8, 306] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 751] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1388] 
split level 30: [/input-12, 13] 
split level 31: [/input-8, 939] 
split level 32: [/input-8, 150] 
split level 33: [/input, 3544] 
split level 34: [/input-8, 1852] 
split level 35: [/input-8, 1396] 
split level 36: [/input-8, 423] 
split level 37: [/input, 374] 
split level 38: [/input-8, 1755] 
split level 39: [/input-8, 1629] 
split level 40: [/input-8, 1195] 
split level 41: [/input-8, 1395] 
split level 42: [/input-8, 633] 
split level 43: [/input-8, 154] 
split level 44: [/input, 3545] 
split level 45: [/input-8, 242] 
split level 46: [/input-8, 634] 
split level 47: [/input-8, 414] 
split level 48: [/input-8, 1391] 
split level 49: [/input, 469] 
split level 50: [/input-8, 1178] 
split level 51: [/input-8, 1754] 
split level 52: [/input-8, 1851] 
split level 53: [/input-8, 1397] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 737] 
split level 56: [/input-8, 141] 
split level 57: [/input, 506] 
split level 58: [/input, 2503] 
split level 59: [/input, 3165] 
split level 60: [/input, 3563] 
split level 61: [/input, 1449] 
split level 62: [/input, 3130] 
split level 63: [/input, 1003] 
split level 64: [/input-12, 68] 
split level 65: [/input-8, 433] 
split level 66: [/input-8, 1615] 
split level 67: [/input-8, 1399] 
split level 68: [/input-8, 635] 
split level 69: [/input-8, 1097] 
split level 70: [/input-8, 400] 
split level 71: [/input-8, 410] 
split level 72: [/input, 986] 
split level 73: [/input, 987] 
split level 74: [/input, 968] 
split level 75: [/input, 373] 
split level 76: [/input, 983] 
split level 77: [/input, 1453] 
split level 78: [/input-8, 736] 
split level 79: [/input, 961] 
split level 80: [/input, 508] 
split level 81: [/input, 2931] 
split level 82: [/input-8, 350] 
split level 83: [/input, 981] 
split level 84: [/input, 963] 
split level 85: [/input, 988] 
split level 86: [/input, 1001] 
split level 87: [/input, 3480] 
split level 88: [/input, 492] 
split level 89: [/input-8, 1377] 
split level 90: [/input, 3197] 
split level 91: [/input, 977] 
split level 92: [/input-8, 2033] 
split level 93: [/input, 3913] 
split level 94: [/input, 1006] 
split level 95: [/input, 3579] 
split level 96: [/input, 3565] 
split level 97: [/input, 2264] 
split level 98: [/input, 408] 
split level 99: [/input-8, 1512] 
split level 100: [/input, 3525] 
split level 101: [/input-8, 241] 
split level 102: [/input, 825] 
split level 103: [/input, 995] 
split level 104: [/input, 452] 
split level 105: [/input, 2266] 
split level 106: [/input, 2265] 
split level 107: [/input, 2913] 
split level 108: [/input, 325] 
split level 109: [/input, 2282] 
split level 110: [/input, 844] 
split level 111: [/input, 2771] 
split level 112: [/input-8, 243] 
split level 113: [/input, 2262] 
split level 114: [/input, 996] 
split level 115: [/input, 2406] 
split level 116: [/input, 470] 
split level 117: [/input, 2263] 
split level 118: [/input, 3580] 
split level 119: [/input, 979] 
split level 120: [/input, 2183] 
split level 121: [/input, 2789] 
split level 122: [/input, 3113] 
split level 123: [/input, 3578] 
split level 124: [/input, 827] 
split level 125: [/input, 998] 
split level 126: [/input, 505] 
split level 127: [/input, 2515] 
split level 128: [/input, 3562] 
split level 129: [/input-8, 1398] 
split level 130: [/input-8, 427] 
split level 131: [/input, 3269] 
split level 132: [/input, 993] 
split level 133: [/input, 2516] 
split level 134: [/input, 2009] 
split level 135: [/input-8, 1376] 
split level 136: [/input, 692] 
split level 137: [/input, 2010] 
split level 138: [/input, 2281] 
split level 139: [/input-8, 636] 
split level 140: [/input, 3180] 
split level 141: [/input, 693] 
split level 142: [/input, 904] 
split level 143: [/input, 2267] 
split level 144: [/input, 2539] 
split level 145: [/input, 2969] 
split level 146: [/input-8, 363] 
split level 147: [/input, 2654] 
split level 148: [/input, 3007] 
split level 149: [/input, 691] 
split level 150: [/input, 2553] 
split level 151: [/input, 2283] 
split level 152: [/input, 2258] 
split level 153: [/input, 2538] 
split level 154: [/input, 129] 
split level 155: [/input, 3148] 
split level 156: [/input, 2517] 
split level 157: [/input, 709] 
split level 158: [/input, 2757] 
split level 159: [/input-8, 94] 
split level 160: [/input, 2129] 
split level 161: [/input, 711] 
split level 162: [/input, 371] 
split level 163: [/input, 2685] 
split level 164: [/input, 710] 
split level 165: [/input, 822] 
split level 166: [/input, 3133] 
split level 167: [/input, 2530] 
split level 168: [/input, 3283] 
split level 169: [/input, 3284] 
split level 170: [/input, 2273] 
split level 171: [/input, 707] 
split level 172: [/input, 225] 
split level 173: [/input, 729] 
split level 174: [/input, 808] 
split level 175: [/input, 2514] 
split level 176: [/input, 497] 
split level 177: [/input, 708] 
split level 178: [/input-8, 1855] 
split level 179: [/input, 690] 
split level 180: [/input, 210] 
split level 181: [/input, 2011] 
split level 182: [/input, 713] 
split level 183: [/input, 498] 
split level 184: [/input, 3560] 
split level 185: [/input, 3576] 
split level 186: [/input, 2180] 
split level 187: [/input, 689] 
split level 188: [/input, 487] 
split level 189: [/input-8, 912] 
split level 190: [/input, 705] 
split level 191: [/input, 2259] 
split level 192: [/input, 2436] 
split level 193: [/input, 2916] 
split level 194: [/input, 209] 
split level 195: [/input, 706] 
split level 196: [/input, 989] 
split level 197: [/input, 2556] 
split level 198: [/input, 208] 
split level 199: [/input, 885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6008281707763672
10 lb beta sum: 0.0, worst -0.6008310317993164
Time: prepare 0.0111    bound 0.0974    transfer 0.0023    finalize 0.0030    func 0.1164    
Accumulated time: func 0.1688    prepare 0.0212    bound 0.1493    transfer 0.0024    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.07157040) min lb tensor(-0.60082436)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010755538940429688 
BICCOS Cumulative time: 0.010755538940429688
Preprocessing time: 0.010034561157226562 Inference time: 0.00011706352233886719 Add cuts time: 7.200241088867188e-05 Cut analysis time: 0.0005319118499755859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58948 (1), -0.58923 (1), -0.58918 (1), -0.58856 (1), -0.58774 (1), -0.58718 (1), -0.58651 (1), -0.58590 (1), -0.58476 (1), -0.58436 (1), -0.58392 (1), -0.58375 (1), -0.58357 (1), -0.58354 (1), -0.58352 (1), -0.58341 (1), -0.58314 (1), -0.58214 (1), -0.58196 (1), -0.58137 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5115    set_bounds 0.0088    solve 0.1165    add 0.0696    
Accumulated time: pickout 0.0003    decision 0.5115    set_bounds 0.0088    solve 0.1165    add 0.0696    
Current (lb-rhs): -0.589484691619873
50 domains visited
Cumulative time: 0.774700403213501

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 38] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5508780479431152
10 lb beta sum: 0.3896826207637787, worst -0.5451330542564392
Time: prepare 0.0069    bound 0.1151    transfer 0.0007    finalize 0.0023    func 0.1277    
Accumulated time: func 0.2965    prepare 0.0284    bound 0.2645    transfer 0.0031    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.28868076) min lb tensor(-0.54499131)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.013121366500854492 
BICCOS Cumulative time: 0.02387690544128418
Preprocessing time: 0.011446952819824219 Inference time: 0.0005562305450439453 Add cuts time: 0.0002205371856689453 Cut analysis time: 0.0008976459503173828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11142 (2), -0.11041 (2), -0.11035 (2), -0.10907 (2), -0.10885 (2), -0.10838 (2), -0.10740 (2), -0.10658 (2), -0.10575 (2), -0.10568 (2), -0.10505 (2), -0.10482 (2), -0.10467 (2), -0.10429 (2), -0.10407 (2), -0.10341 (2), -0.10272 (2), -0.10258 (2), -0.10214 (2), -0.10083 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0125    solve 0.1277    add 0.0795    
Accumulated time: pickout 0.0013    decision 0.5310    set_bounds 0.0214    solve 0.2442    add 0.1491    
Current (lb-rhs): -0.11141559481620789
100 domains visited
Cumulative time: 1.0282948017120361

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 89] [/input-12, 38] [/input-12, 4] [/input-12, 89] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 4] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 89] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1111288070678711
10 lb beta sum: 0.3345995545387268, worst -0.13498370349407196
Time: prepare 0.0069    bound 0.1305    transfer 0.0007    finalize 0.0023    func 0.1434    
Accumulated time: func 0.4399    prepare 0.0355    bound 0.3949    transfer 0.0038    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.88377148) min lb tensor(-0.02826771)
Number of Verified Splits: 347 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03320145606994629 
BICCOS Cumulative time: 0.05707836151123047
Preprocessing time: 0.011315345764160156 Inference time: 0.014582633972167969 Add cuts time: 0.006974697113037109 Cut analysis time: 0.0003287792205810547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0152    solve 0.1435    add 0.0185    
Accumulated time: pickout 0.0023    decision 0.5503    set_bounds 0.0366    solve 0.3878    add 0.1676    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.51234277e-13, 6.66846782e-02, 2.01029912e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.51234277e-13, 6.66846782e-02, 9.07593518e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.51234277e-13, 7.44635910e-02, 2.00230345e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.51234277e-13, 7.44635910e-02, 8.51441920e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.51234277e-13, 3.82359266e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([1., 1.]), tensor([0, 0]), tensor([1.51234277e-13, 4.49638218e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5220303535461426
10 lb beta sum: 0.7933704853057861, worst -0.5109838247299194
Time: prepare 0.0004    bound 0.1159    transfer 0.0001    finalize 0.0002    func 0.1167    
Accumulated time: func 0.5565    prepare 0.0359    bound 0.5108    transfer 0.0039    finalize 0.0079    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-12, 8] [/input-12, 8] 
split level 4: [/input-8, 1134] [/input-8, 1134] [/input-12, 71] [/input-12, 71] 
split level 5: [/input-8, 306] [/input-8, 306] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8030343055725098, worst -0.2650505304336548
10 lb beta sum: 0.8030343055725098, worst -0.2637568712234497
Time: prepare 0.0102    bound 0.1167    transfer 0.0021    finalize 0.0014    func 0.1321    
Accumulated time: func 0.6886    prepare 0.0464    bound 0.6275    transfer 0.0060    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.38014561) min lb tensor(-0.26314414)
Number of Verified Splits: 216 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8198963403701782, worst -0.3264857530593872
10 lb beta sum: 1.056137204170227, worst -0.0384213924407959
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.245375394821167 
BICCOS Cumulative time: 0.30245375633239746
Preprocessing time: 0.006810426712036133 Inference time: 0.23105478286743164 Add cuts time: 0.006471395492553711 Cut analysis time: 0.0010387897491455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26314 (6), -0.26243 (6), -0.26222 (6), -0.26033 (6), -0.25068 (6), -0.25031 (6), -0.24857 (6), -0.24766 (6), -0.23446 (6), -0.23230 (6), -0.22927 (6), -0.22670 (6), -0.22049 (6), -0.21992 (6), -0.20895 (6), -0.20486 (6), -0.13450 (6), -0.13002 (6), -0.12823 (6), -0.12460 (6), 
Length of domains: 40
Time: pickout 0.0005    decision 0.0199    set_bounds 0.0195    solve 0.1322    add 0.0011    
Accumulated time: pickout 0.0028    decision 0.5702    set_bounds 0.0560    solve 0.5199    add 0.1687    
Current (lb-rhs): -0.2631441354751587
140 domains visited
Cumulative time: 1.8100266456604004

BaB round 2
batch: 40
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2497096061706543
10 lb beta sum: 0.3530046343803406, worst -0.24106726050376892
Time: prepare 0.0061    bound 0.1186    transfer 0.0007    finalize 0.0018    func 0.1293    
Accumulated time: func 0.8179    prepare 0.0528    bound 0.7461    transfer 0.0067    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.61744249) min lb tensor(-0.24094117)
Number of Verified Splits: 187 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5191988945007324
10 lb beta sum: 1.1497737169265747, worst -0.21387410163879395
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 8
#cuts 4-6: 19
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.2453322410583496 
BICCOS Cumulative time: 0.5477859973907471
Preprocessing time: 0.009251117706298828 Inference time: 0.2263469696044922 Add cuts time: 0.008279085159301758 Cut analysis time: 0.001455068588256836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24094 (9), -0.24032 (9), -0.23947 (9), -0.23802 (9), -0.22835 (9), -0.22736 (9), -0.22492 (9), -0.22490 (9), -0.22472 (9), -0.22373 (9), -0.22373 (9), -0.22175 (9), -0.21480 (9), -0.21273 (9), -0.21242 (9), -0.21238 (9), -0.21055 (9), -0.20977 (9), -0.20969 (9), -0.20963 (9), 
Length of domains: 133
Time: pickout 0.0012    decision 0.0155    set_bounds 0.0210    solve 0.1294    add 0.0020    
Accumulated time: pickout 0.0040    decision 0.5857    set_bounds 0.0770    solve 0.6493    add 0.1706    
Current (lb-rhs): -0.24094116687774658
273 domains visited
Cumulative time: 2.226348638534546

BaB round 3
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2436065673828125
10 lb beta sum: 0.32711535692214966, worst -0.2408222258090973
Time: prepare 0.0054    bound 0.1324    transfer 0.0007    finalize 0.0015    func 0.1423    
Accumulated time: func 0.9602    prepare 0.0583    bound 0.8785    transfer 0.0075    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.35024920) min lb tensor(-0.24073796)
Number of Verified Splits: 90 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 8
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.020818233489990234 
BICCOS Cumulative time: 0.5686042308807373
Preprocessing time: 0.008361339569091797 Inference time: 0.008496284484863281 Add cuts time: 0.0029060840606689453 Cut analysis time: 0.001054525375366211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24074 (10), -0.24014 (10), -0.23932 (10), -0.23782 (10), -0.22819 (10), -0.22720 (10), -0.22456 (10), -0.22455 (10), -0.22424 (10), -0.22330 (10), -0.22325 (10), -0.22139 (10), -0.21446 (10), -0.21229 (10), -0.21209 (10), -0.21208 (10), -0.21002 (10), -0.20912 (10), -0.20842 (10), -0.20839 (10), 
Length of domains: 176
Time: pickout 0.0022    decision 0.0187    set_bounds 0.0116    solve 0.2771    add 0.0020    
Accumulated time: pickout 0.0062    decision 0.6044    set_bounds 0.0886    solve 0.9263    add 0.1726    
Current (lb-rhs): -0.24073795974254608
449 domains visited
Cumulative time: 2.5595314502716064

BaB round 4
batch: 176
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2373661994934082
10 lb beta sum: 0.28920039534568787, worst -0.23460952937602997
Time: prepare 0.0070    bound 0.1333    transfer 0.0007    finalize 0.0018    func 0.1451    
Accumulated time: func 1.1053    prepare 0.0655    bound 1.0118    transfer 0.0081    finalize 0.0144    
all_split False
======================Cut inference begins======================
max lb tensor(0.33024013) min lb tensor(-0.23455578)
Number of Verified Splits: 95 of 352
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 8
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.024039030075073242 
BICCOS Cumulative time: 0.5926432609558105
Preprocessing time: 0.01009821891784668 Inference time: 0.009549856185913086 Add cuts time: 0.0032958984375 Cut analysis time: 0.0010950565338134766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23456 (11), -0.23386 (11), -0.23169 (11), -0.23168 (11), -0.22210 (11), -0.22104 (11), -0.21791 (11), -0.21761 (11), -0.21736 (11), -0.21702 (11), -0.21559 (11), -0.21524 (11), -0.20902 (11), -0.20682 (11), -0.20599 (11), -0.20582 (11), -0.20278 (11), -0.20256 (11), -0.20242 (11), -0.20227 (11), 
Length of domains: 257
Time: pickout 0.0028    decision 0.0210    set_bounds 0.0151    solve 0.1457    add 0.0013    
Accumulated time: pickout 0.0090    decision 0.6254    set_bounds 0.1037    solve 1.0721    add 0.1739    
Current (lb-rhs): -0.23455578088760376
706 domains visited
Cumulative time: 2.770423412322998

BaB round 5
batch: 257
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 146] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23123645782470703
10 lb beta sum: 0.2563958168029785, worst -0.22845211625099182
Time: prepare 0.0099    bound 0.1378    transfer 0.0020    finalize 0.0025    func 0.1555    
Accumulated time: func 1.2608    prepare 0.0756    bound 1.1496    transfer 0.0102    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.21275610) min lb tensor(-0.22843316)
Number of Verified Splits: 118 of 514
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0319666862487793 
BICCOS Cumulative time: 0.6246099472045898
Preprocessing time: 0.014545202255249023 Inference time: 0.013238668441772461 Add cuts time: 0.0032761096954345703 Cut analysis time: 0.0009067058563232422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22843 (12), -0.22841 (12), -0.22804 (12), -0.22502 (12), -0.21588 (12), -0.21579 (12), -0.21461 (12), -0.21338 (12), -0.21253 (12), -0.21229 (12), -0.21194 (12), -0.21167 (12), -0.21165 (12), -0.21113 (12), -0.20855 (12), -0.20850 (12), -0.19964 (12), -0.19931 (12), -0.19925 (12), -0.19854 (12), 
Length of domains: 396
Time: pickout 0.0036    decision 0.0246    set_bounds 0.0215    solve 0.1557    add 0.0024    
Accumulated time: pickout 0.0126    decision 0.6500    set_bounds 0.1252    solve 1.2277    add 0.1763    
Current (lb-rhs): -0.22843316197395325
1102 domains visited
Cumulative time: 3.0114452838897705

BaB round 6
batch: 396
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 1134] [/input-8, 147] [/input-8, 1134] [/input-8, 147] [/input-8, 306] [/input-8, 147] [/input-8, 306] [/input-8, 155] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22609758377075195
10 lb beta sum: 0.21597331762313843, worst -0.22331896424293518
Time: prepare 0.0156    bound 0.1378    transfer 0.0032    finalize 0.0042    func 0.1659    
Accumulated time: func 1.4267    prepare 0.0915    bound 1.2874    transfer 0.0133    finalize 0.0211    
all_split False
======================Cut inference begins======================
max lb tensor(0.45713514) min lb tensor(-0.22328286)
Number of Verified Splits: 171 of 792
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 10
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.045847177505493164 
BICCOS Cumulative time: 0.670457124710083
Preprocessing time: 0.02225637435913086 Inference time: 0.02016735076904297 Add cuts time: 0.002839326858520508 Cut analysis time: 0.0005841255187988281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22328 (13), -0.22326 (13), -0.21539 (13), -0.21506 (13), -0.21333 (13), -0.21270 (13), -0.21020 (13), -0.21012 (13), -0.20967 (13), -0.20889 (13), -0.20885 (13), -0.20823 (13), -0.20765 (13), -0.20711 (13), -0.20691 (13), -0.20510 (13), -0.20403 (13), -0.20360 (13), -0.20308 (13), -0.19853 (13), 
Length of domains: 621
Time: pickout 0.0060    decision 0.0332    set_bounds 0.0334    solve 0.1660    add 0.0031    
Accumulated time: pickout 0.0186    decision 0.6832    set_bounds 0.1586    solve 1.3938    add 0.1794    
Current (lb-rhs): -0.2232828587293625
1723 domains visited
Cumulative time: 3.3007395267486572

BaB round 7
batch: 621
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 751] [/input-8, 306] [/input, 374] [/input-8, 306] [/input-8, 751] [/input-8, 751] [/input, 374] [/input-8, 751] [/input-8, 1134] [/input-8, 306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.222900390625
10 lb beta sum: 0.475667804479599, worst -0.21830502152442932
Time: prepare 0.0245    bound 0.1467    transfer 0.0069    finalize 0.0068    func 0.1937    
Accumulated time: func 1.6205    prepare 0.1162    bound 1.4341    transfer 0.0202    finalize 0.0279    
all_split False
======================Cut inference begins======================
max lb tensor(0.49802959) min lb tensor(-0.21827845)
Number of Verified Splits: 220 of 1242
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 13
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.06600713729858398 
BICCOS Cumulative time: 0.736464262008667
Preprocessing time: 0.03746175765991211 Inference time: 0.02500462532043457 Add cuts time: 0.0029175281524658203 Cut analysis time: 0.0006232261657714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21828 (14), -0.21733 (14), -0.20967 (14), -0.20921 (14), -0.20717 (14), -0.20652 (14), -0.20491 (14), -0.20351 (14), -0.20282 (14), -0.20252 (14), -0.20243 (14), -0.20131 (14), -0.20105 (14), -0.20043 (14), -0.19976 (14), -0.19922 (14), -0.19876 (14), -0.19763 (14), -0.19704 (14), -0.19628 (14), 
Length of domains: 1022
Time: pickout 0.0093    decision 0.0450    set_bounds 0.0505    solve 0.1940    add 0.0338    
Accumulated time: pickout 0.0278    decision 0.7283    set_bounds 0.2091    solve 1.5878    add 0.2131    
Current (lb-rhs): -0.2182784527540207
2745 domains visited
Cumulative time: 3.7028355598449707

BaB round 8
batch: 1022
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 751] [/input-8, 751] [/input-8, 416] [/input, 374] [/input-8, 147] [/input-8, 751] [/input-8, 1134] [/input-8, 751] [/input-8, 751] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2205190658569336
10 lb beta sum: 0.9153330326080322, worst -0.20715753734111786
Time: prepare 0.0449    bound 0.5216    transfer 0.0106    finalize 0.0122    func 0.6026    
Accumulated time: func 2.2231    prepare 0.1613    bound 1.9557    transfer 0.0308    finalize 0.0401    
all_split False
======================Cut inference begins======================
max lb tensor(0.57387966) min lb tensor(-0.20713715)
Number of Verified Splits: 1401 of 2044
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 13
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.3924541473388672 
BICCOS Cumulative time: 1.1289184093475342
Preprocessing time: 0.1975710391998291 Inference time: 0.17194485664367676 Add cuts time: 0.022116422653198242 Cut analysis time: 0.0008218288421630859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20714 (15), -0.20666 (15), -0.20521 (15), -0.20312 (15), -0.20249 (15), -0.20190 (15), -0.19655 (15), -0.19599 (15), -0.19251 (15), -0.19230 (15), -0.19169 (15), -0.19162 (15), -0.19160 (15), -0.19102 (15), -0.19086 (15), -0.19066 (15), -0.19046 (15), -0.19037 (15), -0.19032 (15), -0.18979 (15), 
Length of domains: 643
Time: pickout 0.0176    decision 0.0679    set_bounds 0.0822    solve 0.6035    add 0.0037    
Accumulated time: pickout 0.0454    decision 0.7962    set_bounds 0.2913    solve 2.1913    add 0.2169    
Current (lb-rhs): -0.20713715255260468
3388 domains visited
Cumulative time: 4.882076263427734

BaB round 9
batch: 643
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 418] [/input-8, 147] [/input-8, 418] [/input-8, 147] [/input-8, 751] [/input-8, 147] [/input-8, 416] [/input-8, 147] [/input-8, 416] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8577305674552917, worst -0.202945277094841
10 lb beta sum: 0.8577305674552917, worst -0.20289330184459686
Time: prepare 0.0542    bound 0.1460    transfer 0.0018    finalize 0.0074    func 0.2176    
Accumulated time: func 2.4407    prepare 0.2158    bound 2.1017    transfer 0.0326    finalize 0.0474    
all_split False
======================Cut inference begins======================
max lb tensor(0.15450239) min lb tensor(-0.20287280)
Number of Verified Splits: 24 of 1286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 15
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.04513740539550781 
BICCOS Cumulative time: 1.174055814743042
Preprocessing time: 0.03961682319641113 Inference time: 0.003874540328979492 Add cuts time: 0.0010311603546142578 Cut analysis time: 0.0006148815155029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20287 (16), -0.20234 (16), -0.20055 (16), -0.19954 (16), -0.19945 (16), -0.19882 (16), -0.19283 (16), -0.19230 (16), -0.18912 (16), -0.18889 (16), -0.18844 (16), -0.18774 (16), -0.18760 (16), -0.18716 (16), -0.18713 (16), -0.18706 (16), -0.18688 (16), -0.18634 (16), -0.18633 (16), -0.18629 (16), 
Length of domains: 1262
Time: pickout 0.0117    decision 0.0457    set_bounds 0.0553    solve 0.2179    add 0.1030    
Accumulated time: pickout 0.0572    decision 0.8419    set_bounds 0.3466    solve 2.4093    add 0.3199    
Current (lb-rhs): -0.20287279784679413
4650 domains visited
Cumulative time: 5.369330167770386

BaB round 10
batch: 1262
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 292] [/input-8, 423] [/input-8, 292] [/input-8, 423] [/input-8, 147] [/input-8, 423] [/input-8, 147] [/input-8, 292] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8562052845954895, worst -0.20174074172973633
10 lb beta sum: 1.0308959484100342, worst -0.1990469992160797
Time: prepare 0.1073    bound 0.2007    transfer 0.0096    finalize 0.0127    func 0.3472    
Accumulated time: func 2.7879    prepare 0.3234    bound 2.3024    transfer 0.0422    finalize 0.0601    
all_split False
======================Cut inference begins======================
max lb tensor(0.41921943) min lb tensor(-0.19902281)
Number of Verified Splits: 1439 of 2524
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 16
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.46355128288269043 
BICCOS Cumulative time: 1.6376070976257324
Preprocessing time: 0.07656288146972656 Inference time: 0.36803269386291504 Add cuts time: 0.018226146697998047 Cut analysis time: 0.0007295608520507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19902 (17), -0.19846 (17), -0.19633 (17), -0.19555 (17), -0.19325 (17), -0.19261 (17), -0.18913 (17), -0.18884 (17), -0.18847 (17), -0.18827 (17), -0.18450 (17), -0.18393 (17), -0.18334 (17), -0.18301 (17), -0.18251 (17), -0.18248 (17), -0.18231 (17), -0.18204 (17), -0.18188 (17), -0.18112 (17), 
Length of domains: 1085
Time: pickout 0.0355    decision 0.0806    set_bounds 0.1087    solve 0.3477    add 0.1226    
Accumulated time: pickout 0.0927    decision 0.9225    set_bounds 0.4553    solve 2.7569    add 0.4425    
Current (lb-rhs): -0.1990228146314621
5735 domains visited
Cumulative time: 6.5495710372924805

BaB round 11
batch: 1085
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 292] [/input-8, 155] [/input-8, 155] [/input-8, 292] [/input-8, 420] [/input-8, 939] [/input-8, 155] [/input-8, 292] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20913314819335938
10 lb beta sum: 0.8857776522636414, worst -0.19347649812698364
Time: prepare 0.0407    bound 0.1789    transfer 0.0085    finalize 0.0098    func 0.2527    
Accumulated time: func 3.0407    prepare 0.3643    bound 2.4813    transfer 0.0508    finalize 0.0699    
all_split False
======================Cut inference begins======================
max lb tensor(0.28126252) min lb tensor(-0.19346157)
Number of Verified Splits: 296 of 2170
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 16
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.12041449546813965 
BICCOS Cumulative time: 1.758021593093872
Preprocessing time: 0.07008862495422363 Inference time: 0.04370284080505371 Add cuts time: 0.005915641784667969 Cut analysis time: 0.0007073879241943359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19346 (18), -0.19290 (18), -0.19230 (18), -0.19230 (18), -0.19084 (18), -0.19021 (18), -0.18821 (18), -0.18762 (18), -0.18681 (18), -0.18609 (18), -0.18275 (18), -0.18251 (18), -0.18250 (18), -0.18216 (18), -0.18060 (18), -0.17989 (18), -0.17982 (18), -0.17903 (18), -0.17827 (18), -0.17804 (18), 
Length of domains: 1874
Time: pickout 0.0832    decision 0.0695    set_bounds 0.0928    solve 0.2532    add 0.1284    
Accumulated time: pickout 0.1759    decision 0.9920    set_bounds 0.5481    solve 3.0101    add 0.5708    
Current (lb-rhs): -0.1934615671634674
7609 domains visited
Cumulative time: 7.3085150718688965

BaB round 12
batch: 1874
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 420] [/input-8, 292] [/input-8, 155] [/input-8, 416] [/input-8, 292] [/input-8, 292] [/input-8, 420] [/input-8, 420] [/input-8, 1195] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2056446075439453
10 lb beta sum: 0.8427092432975769, worst -0.19256049394607544
Time: prepare 0.0732    bound 0.2677    transfer 0.0149    finalize 0.1456    func 0.5262    
Accumulated time: func 3.5669    prepare 0.4377    bound 2.7490    transfer 0.0656    finalize 0.2155    
all_split False
======================Cut inference begins======================
max lb tensor(0.31621152) min lb tensor(-0.19229943)
Number of Verified Splits: 431 of 3748
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 16
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.19589638710021973 
BICCOS Cumulative time: 1.9539179801940918
Preprocessing time: 0.11444950103759766 Inference time: 0.07106137275695801 Add cuts time: 0.009630441665649414 Cut analysis time: 0.0007550716400146484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19230 (19), -0.19229 (19), -0.18999 (19), -0.18810 (19), -0.18749 (19), -0.18638 (19), -0.18572 (19), -0.18370 (19), -0.18310 (19), -0.18256 (19), -0.18187 (19), -0.17994 (19), -0.17982 (19), -0.17967 (19), -0.17966 (19), -0.17794 (19), -0.17747 (19), -0.17737 (19), -0.17723 (19), -0.17681 (19), 
Length of domains: 3317
Time: pickout 0.0629    decision 0.1130    set_bounds 0.1617    solve 0.5270    add 0.0352    
Accumulated time: pickout 0.2389    decision 1.1049    set_bounds 0.7099    solve 3.5371    add 0.6060    
Current (lb-rhs): -0.19229942560195923
10926 domains visited
Cumulative time: 8.41227102279663

BaB round 13
batch: 3317
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 423] [/input-8, 423] [/input-8, 306] [/input-8, 423] [/input-8, 292] [/input-8, 292] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 423] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19576311111450195
10 lb beta sum: 0.7961387038230896, worst -0.19077187776565552
Time: prepare 0.1340    bound 0.4191    transfer 0.0328    finalize 0.0301    func 0.6582    
Accumulated time: func 4.2251    prepare 0.5720    bound 3.1681    transfer 0.0984    finalize 0.2457    
all_split False
======================Cut inference begins======================
max lb tensor(0.37322980) min lb tensor(-0.18999356)
Number of Verified Splits: 1257 of 6634
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 16
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.44010281562805176 
BICCOS Cumulative time: 2.3940207958221436
Preprocessing time: 0.20234251022338867 Inference time: 0.20724725723266602 Add cuts time: 0.02968883514404297 Cut analysis time: 0.0008242130279541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18999 (20), -0.18999 (20), -0.18901 (20), -0.18887 (20), -0.18809 (20), -0.18749 (20), -0.18368 (20), -0.18309 (20), -0.18162 (20), -0.18095 (20), -0.17793 (20), -0.17786 (20), -0.17735 (20), -0.17715 (20), -0.17628 (20), -0.17622 (20), -0.17620 (20), -0.17608 (20), -0.17608 (20), -0.17600 (20), 
Length of domains: 5377
Time: pickout 0.0457    decision 0.1860    set_bounds 0.4396    solve 0.6598    add 0.0617    
Accumulated time: pickout 0.2846    decision 1.2909    set_bounds 1.1494    solve 4.1969    add 0.6677    
Current (lb-rhs): -0.18999356031417847
16303 domains visited
Cumulative time: 10.266810417175293

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1384] [/input-8, 1384] [/input-8, 146] [/input-8, 416] [/input-8, 1384] [/input-8, 146] [/input-8, 146] [/input-8, 1384] [/input-8, 292] [/input-8, 1195] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18848276138305664
10 lb beta sum: 0.7430644035339355, worst -0.1835373044013977
Time: prepare 0.1710    bound 0.4997    transfer 0.0371    finalize 0.0470    func 0.9794    
Accumulated time: func 5.2045    prepare 0.7433    bound 3.6678    transfer 0.1355    finalize 0.2927    
all_split False
======================Cut inference begins======================
max lb tensor(0.39108318) min lb tensor(-0.18338072)
Number of Verified Splits: 2094 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 16
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.6652107238769531 
BICCOS Cumulative time: 3.0592315196990967
Preprocessing time: 0.252155065536499 Inference time: 0.3642559051513672 Add cuts time: 0.04796147346496582 Cut analysis time: 0.0008382797241210938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18338 (21), -0.18335 (21), -0.18312 (21), -0.18296 (21), -0.18275 (21), -0.18269 (21), -0.18221 (21), -0.18211 (21), -0.18161 (21), -0.18125 (21), -0.18114 (21), -0.18094 (21), -0.17895 (21), -0.17836 (21), -0.17783 (21), -0.17713 (21), -0.17608 (20), -0.17600 (20), -0.17466 (20), -0.17321 (21), 
Length of domains: 7379
Time: pickout 0.0555    decision 0.3886    set_bounds 0.3621    solve 0.9813    add 0.0162    
Accumulated time: pickout 0.3400    decision 1.6795    set_bounds 1.5116    solve 5.1782    add 0.6839    
Current (lb-rhs): -0.18338072299957275
22401 domains visited
current_vram/total_varm: 10.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.768951416015625

BaB round 15
batch: 7379
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1384] [/input-8, 423] [/input-8, 423] [/input-8, 751] [/input-8, 146] [/input-8, 1384] [/input-8, 416] [/input-8, 155] [/input-8, 146] [/input-8, 154] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18526172637939453
10 lb beta sum: 0.7176120281219482, worst -0.18039637804031372
Time: prepare 0.3079    bound 0.8457    transfer 0.0715    finalize 0.0861    func 1.4081    
Accumulated time: func 6.6125    prepare 1.0516    bound 4.5135    transfer 0.2070    finalize 0.3788    
all_split False
======================Cut inference begins======================
max lb tensor(0.37427270) min lb tensor(-0.18036231)
Number of Verified Splits: 2460 of 14758
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 16
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 1.2194292545318604 
BICCOS Cumulative time: 4.278660774230957
Preprocessing time: 0.4622166156768799 Inference time: 0.6994762420654297 Add cuts time: 0.05683541297912598 Cut analysis time: 0.0009009838104248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18036 (22), -0.18028 (22), -0.17983 (22), -0.17974 (22), -0.17961 (22), -0.17934 (22), -0.17929 (22), -0.17901 (22), -0.17835 (22), -0.17835 (22), -0.17829 (22), -0.17765 (22), -0.17525 (22), -0.17466 (22), -0.17443 (22), -0.17372 (22), -0.17216 (21), -0.17128 (21), -0.17083 (21), -0.16984 (22), 
Length of domains: 12298
Time: pickout 0.1228    decision 0.5778    set_bounds 0.8735    solve 1.4107    add 0.1287    
Accumulated time: pickout 0.4628    decision 2.2573    set_bounds 2.3851    solve 6.5890    add 0.8126    
Current (lb-rhs): -0.18036231398582458
34699 domains visited
Cumulative time: 17.145063400268555

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-8, 414] [/input-8, 1384] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-12, 13] [/input-8, 1195] [/input-8, 1195] [/input-8, 155] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18163251876831055
10 lb beta sum: 0.7322773933410645, worst -0.17690497636795044
Time: prepare 0.3440    bound 0.9289    transfer 0.0738    finalize 0.0999    func 1.7951    
Accumulated time: func 8.4077    prepare 1.3959    bound 5.4424    transfer 0.2808    finalize 0.4786    
all_split False
======================Cut inference begins======================
max lb tensor(0.67348653) min lb tensor(-0.17687616)
Number of Verified Splits: 4123 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 18
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 1.3982181549072266 
BICCOS Cumulative time: 5.676878929138184
Preprocessing time: 0.5289647579193115 Inference time: 0.7655303478240967 Add cuts time: 0.10268330574035645 Cut analysis time: 0.001039743423461914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18036 (22), -0.18028 (22), -0.17961 (22), -0.17901 (22), -0.17835 (22), -0.17765 (22), -0.17688 (23), -0.17682 (23), -0.17525 (22), -0.17515 (23), -0.17512 (23), -0.17466 (22), -0.17443 (22), -0.17417 (23), -0.17414 (23), -0.17372 (22), -0.16984 (22), -0.16959 (22), -0.16949 (22), -0.16891 (22), 
Length of domains: 16367
Time: pickout 0.1178    decision 0.4502    set_bounds 0.9528    solve 1.7983    add 0.0315    
Accumulated time: pickout 0.5806    decision 2.7075    set_bounds 3.3378    solve 8.3873    add 0.8441    
Current (lb-rhs): -0.18036231398582458
46960 domains visited
current_vram/total_varm: 22.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.95966124534607

BaB round 17
batch: 16367
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 1195] [/input-12, 13] [/input-8, 158] [/input-8, 1134] [/input-8, 154] [/input-8, 414] [/input-8, 155] [/input-8, 154] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1822347640991211
10 lb beta sum: 0.7326818704605103, worst -0.1775415539741516
Time: prepare 0.6971    bound 1.7944    transfer 0.1578    finalize 0.2160    func 3.0732    
Accumulated time: func 11.4809    prepare 2.0934    bound 7.2368    transfer 0.4386    finalize 0.6946    
all_split False
======================Cut inference begins======================
max lb tensor(0.67218596) min lb tensor(-0.17751566)
Number of Verified Splits: 8323 of 32734
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 18
#cuts 4-6: 13
#cuts 7-9: 16
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 3.083873987197876 
BICCOS Cumulative time: 8.76075291633606
Preprocessing time: 1.3262577056884766 Inference time: 1.5646145343780518 Add cuts time: 0.19087696075439453 Cut analysis time: 0.002124786376953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17752 (23), -0.17747 (23), -0.17548 (23), -0.17488 (23), -0.17434 (23), -0.17397 (24), -0.17392 (24), -0.17366 (23), -0.17239 (24), -0.17134 (24), -0.17132 (24), -0.17110 (23), -0.17052 (23), -0.17040 (23), -0.17030 (24), -0.16972 (23), -0.16702 (23), -0.16673 (23), -0.16655 (24), -0.16538 (23), 
Length of domains: 24411
Time: pickout 0.2865    decision 1.1719    set_bounds 2.0546    solve 3.0816    add 0.2519    
Accumulated time: pickout 0.8671    decision 3.8794    set_bounds 5.3925    solve 11.4688    add 1.0960    
Current (lb-rhs): -0.1775156557559967
71371 domains visited
Cumulative time: 32.00980758666992

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-8, 154] [/input-8, 420] [/input-12, 53] [/input-12, 13] [/input-8, 146] [/input-8, 146] [/input-8, 155] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1793818473815918
10 lb beta sum: 0.6920202374458313, worst -0.17463713884353638
Time: prepare 0.7306    bound 1.8152    transfer 0.1473    finalize 0.2281    func 3.1307    
Accumulated time: func 14.6116    prepare 2.8244    bound 9.0521    transfer 0.5859    finalize 0.9227    
all_split False
======================Cut inference begins======================
max lb tensor(0.80340910) min lb tensor(-0.17461786)
Number of Verified Splits: 7691 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 92.
#cuts 1-3: 18
#cuts 4-6: 29
#cuts 7-9: 40
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 3.2388558387756348 
BICCOS Cumulative time: 11.999608755111694
Preprocessing time: 0.9831264019012451 Inference time: 2.0398428440093994 Add cuts time: 0.21157169342041016 Cut analysis time: 0.004314899444580078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17462 (24), -0.17456 (24), -0.17397 (24), -0.17392 (24), -0.17154 (24), -0.17111 (24), -0.17095 (24), -0.17043 (24), -0.17030 (24), -0.16758 (25), -0.16716 (24), -0.16715 (24), -0.16657 (24), -0.16652 (25), -0.16651 (25), -0.16647 (24), -0.16382 (25), -0.16362 (25), -0.16340 (23), -0.16277 (25), 
Length of domains: 33104
Time: pickout 0.2657    decision 2.0034    set_bounds 2.3384    solve 3.1376    add 0.4562    
Accumulated time: pickout 1.1329    decision 5.8828    set_bounds 7.7309    solve 14.6065    add 1.5522    
Current (lb-rhs): -0.17461785674095154
96448 domains visited
current_vram/total_varm: 38.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 43.570685148239136

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 1949] [/input-8, 416] [/input-8, 1195] [/input-8, 1387] [/input-8, 1387] [/input-8, 1195] [/input-8, 1195] [/input-8, 1387] [/input-8, 414] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17504119873046875
10 lb beta sum: 0.6410162448883057, worst -0.17110443115234375
Time: prepare 1.4800    bound 10.4092    transfer 0.2975    finalize 1.0551    func 13.6616    
Accumulated time: func 28.2732    prepare 4.3047    bound 19.4612    transfer 0.8834    finalize 1.9778    
all_split False
======================Cut inference begins======================
max lb tensor(0.81173205) min lb tensor(-0.17109871)
Number of Verified Splits: 15446 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 153.
#cuts 1-3: 18
#cuts 4-6: 62
#cuts 7-9: 70
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 6.727093458175659 
BICCOS Cumulative time: 18.726702213287354
Preprocessing time: 2.0610709190368652 Inference time: 4.196485996246338 Add cuts time: 0.4623844623565674 Cut analysis time: 0.007152080535888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17110 (25), -0.17042 (25), -0.17040 (25), -0.17034 (25), -0.16975 (25), -0.16969 (25), -0.16836 (25), -0.16777 (25), -0.16757 (25), -0.16715 (25), -0.16646 (25), -0.16498 (26), -0.16396 (25), -0.16391 (26), -0.16389 (26), -0.16339 (25), -0.16269 (25), -0.16245 (25), -0.16242 (25), -0.16102 (26), 
Length of domains: 50426
Time: pickout 0.5179    decision 3.3342    set_bounds 4.0899    solve 13.6734    add 0.1311    
Accumulated time: pickout 1.6508    decision 9.2171    set_bounds 11.8209    solve 28.2798    add 1.6833    
Current (lb-rhs): -0.1710987091064453
146538 domains visited
Cumulative time: 72.27001857757568

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input-8, 146] [/input-8, 1395] [/input-8, 1949] [/input-8, 410] [/input-8, 1384] [/input-8, 146] [/input-8, 410] [/input-8, 158] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1723480224609375
10 lb beta sum: 0.7275575995445251, worst -0.1697261929512024
Time: prepare 1.5240    bound 10.6689    transfer 0.2974    finalize 1.2536    func 14.1669    
Accumulated time: func 42.4401    prepare 5.8291    bound 30.1302    transfer 1.1808    finalize 3.2315    
all_split False
======================Cut inference begins======================
max lb tensor(1.62279463) min lb tensor(-0.16971406)
Number of Verified Splits: 19215 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 73.
#cuts 1-3: 23
#cuts 4-6: 45
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 8.186358213424683 
BICCOS Cumulative time: 26.913060426712036
Preprocessing time: 2.0787582397460938 Inference time: 5.482174873352051 Add cuts time: 0.6227478981018066 Cut analysis time: 0.0026772022247314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17040 (25), -0.17034 (25), -0.16971 (26), -0.16967 (26), -0.16861 (26), -0.16792 (26), -0.16568 (26), -0.16510 (26), -0.16498 (26), -0.16495 (26), -0.16465 (26), -0.16396 (26), -0.16391 (26), -0.16389 (26), -0.16269 (25), -0.16242 (25), -0.16128 (26), -0.16102 (26), -0.16097 (26), -0.16069 (26), 
Length of domains: 63979
Time: pickout 0.5658    decision 3.5626    set_bounds 3.7662    solve 14.1812    add 0.1244    
Accumulated time: pickout 2.2166    decision 12.7796    set_bounds 15.5870    solve 42.4611    add 1.8076    
Current (lb-rhs): -0.17039591073989868
192859 domains visited
Cumulative time: 102.94226932525635

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 146] [/input-8, 1387] [/input-8, 423] [/input-8, 1387] [/input-8, 420] [/input-8, 423] [/input-8, 414] [/input-12, 53] [/input-8, 420] [/input-8, 414] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17299604415893555
10 lb beta sum: 0.7134438157081604, worst -0.17037612199783325
Time: prepare 1.5561    bound 10.3559    transfer 0.2955    finalize 0.4812    func 14.1625    
Accumulated time: func 56.6026    prepare 7.3856    bound 40.4861    transfer 1.4763    finalize 3.7127    
all_split False
======================Cut inference begins======================
max lb tensor(1.19978070) min lb tensor(-0.17036593)
Number of Verified Splits: 29109 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 125.
#cuts 1-3: 24
#cuts 4-6: 95
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 11.308305025100708 
BICCOS Cumulative time: 38.221365451812744
Preprocessing time: 2.1133527755737305 Inference time: 8.37375783920288 Add cuts time: 0.8166623115539551 Cut analysis time: 0.0045320987701416016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17037 (26), -0.17032 (26), -0.16971 (26), -0.16967 (26), -0.16595 (27), -0.16527 (27), -0.16497 (27), -0.16495 (26), -0.16391 (27), -0.16389 (27), -0.16288 (27), -0.16229 (27), -0.16191 (27), -0.16122 (27), -0.16099 (27), -0.16097 (27), -0.15993 (27), -0.15991 (27), -0.15848 (27), -0.15790 (27), 
Length of domains: 67638
Time: pickout 0.5808    decision 3.7690    set_bounds 4.1428    solve 14.1746    add 14.9223    
Accumulated time: pickout 2.7974    decision 16.5487    set_bounds 19.7298    solve 56.6357    add 16.7300    
Current (lb-rhs): -0.17036592960357666
229286 domains visited
Cumulative time: 152.24210929870605

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1195] [/input-12, 13] [/input-8, 1949] [/input-12, 53] [/input-12, 13] [/input-8, 1949] [/input-12, 53] [/input-8, 414] [/input-8, 1395] [/input-8, 414] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16755104064941406
10 lb beta sum: 0.7687281370162964, worst -0.16495800018310547
Time: prepare 1.5606    bound 10.5239    transfer 0.2976    finalize 0.5256    func 13.3560    
Accumulated time: func 69.9585    prepare 8.9466    bound 51.0100    transfer 1.7739    finalize 4.2382    
all_split False
======================Cut inference begins======================
max lb tensor(1.21297503) min lb tensor(-0.16495116)
Number of Verified Splits: 27472 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 140.
#cuts 1-3: 30
#cuts 4-6: 104
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 10.699800491333008 
BICCOS Cumulative time: 48.92116594314575
Preprocessing time: 2.3080453872680664 Inference time: 7.511524677276611 Add cuts time: 0.874274730682373 Cut analysis time: 0.005955696105957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17037 (26), -0.17032 (26), -0.16595 (27), -0.16527 (27), -0.16497 (27), -0.16495 (27), -0.16494 (27), -0.16489 (27), -0.16391 (27), -0.16389 (27), -0.16288 (27), -0.16229 (27), -0.16191 (27), -0.16122 (27), -0.16122 (27), -0.16112 (27), -0.16098 (28), -0.16097 (28), -0.15993 (28), -0.15991 (28), 
Length of domains: 72934
Time: pickout 0.6091    decision 3.3459    set_bounds 5.3875    solve 13.3737    add 0.3636    
Accumulated time: pickout 3.4065    decision 19.8946    set_bounds 25.1173    solve 70.0094    add 17.0936    
Current (lb-rhs): -0.17036592960357666
267350 domains visited
Cumulative time: 186.56072616577148

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input, 3180] [/input-8, 146] [/input-12, 53] [/input, 3180] [/input-8, 1949] [/input-8, 146] [/input-12, 53] [/input, 3180] [/input, 3180] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16820144653320312
10 lb beta sum: 0.8246893286705017, worst -0.16559535264968872
Time: prepare 1.6456    bound 10.6287    transfer 0.3035    finalize 0.5795    func 13.6032    
Accumulated time: func 83.5618    prepare 10.5927    bound 61.6387    transfer 2.0774    finalize 4.8177    
all_split False
======================Cut inference begins======================
max lb tensor(1.74671221) min lb tensor(-0.16555333)
Number of Verified Splits: 27779 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 159.
#cuts 1-3: 27
#cuts 4-6: 127
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 11.108015298843384 
BICCOS Cumulative time: 60.029181241989136
Preprocessing time: 3.8386037349700928 Inference time: 6.429660081863403 Add cuts time: 0.833317756652832 Cut analysis time: 0.006433725357055664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16555 (27), -0.16550 (27), -0.16497 (28), -0.16495 (27), -0.16494 (27), -0.16489 (27), -0.16391 (28), -0.16389 (28), -0.16287 (28), -0.16230 (28), -0.16229 (28), -0.16185 (27), -0.16180 (27), -0.16163 (28), -0.16122 (27), -0.16112 (27), -0.16098 (28), -0.16097 (28), -0.15993 (28), -0.15991 (28), 
Length of domains: 77923
Time: pickout 0.6527    decision 4.2312    set_bounds 4.8280    solve 13.6255    add 0.1637    
Accumulated time: pickout 4.0592    decision 24.1258    set_bounds 29.9453    solve 83.6349    add 17.2573    
Current (lb-rhs): -0.16555333137512207
305107 domains visited
Time out!!!!!!!!
Result: unknown in 223.9342 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.06784821, -10.58980083, -14.57435703, -13.27788925, -13.83081436,
         -14.45864487, -13.14409447, -13.97298336, -12.07690144,  -9.28960514]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 479] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 479] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 217] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56003904, 0.62899369, 3.70473719, 2.64316034, 3.00231957, 3.71363759,
         2.32805920, 2.93838763, 1.83370113]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0493 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [587]; unstable size 587; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 587] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 587] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 587] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 221] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55051112,  4.09006119,  0.36009514, -0.47126305, -0.31621832,
          1.88454628, -0.86957824,  4.73674726,  3.06783509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193],
         [-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13222218, -0.00041962, -0.31917953]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0128 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0564 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [857]; unstable size 857; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 401, 1, 857] with unstable size 400 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 857] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 857] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [400]; unstable size 400; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 400] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 400] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.34057224,  3.30707312, -1.46605647, -1.78303576, -0.07614893,
         -1.46367002,  0.02865028,  2.77813053,  3.23617649]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920],
         [-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15315437, -0.41795540,  0.39637947, -0.27752686]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0808 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.55547142, -21.29835701, -26.80152893, -27.28372574, -26.67305183,
         -28.70449638, -26.93589401, -28.94626617, -24.43898201, -23.37986755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 525] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 525] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 253] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.71861219, 3.84952354, 4.56171322, 3.84017467, 5.90634918, 4.26612568,
         6.14898109, 1.99088383, 1.41389096]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [463]; unstable size 463; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 463] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 463] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 463] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 310] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.97309542,  6.70187187, -0.02662659,  2.50170517, -0.07382107,
          1.85107899,  1.77262068,  7.00046825,  5.85668850]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.74it/s]100%|██████████| 1/1 [00:00<00:00,  8.73it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350],
         [-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.81191444, 1.13087845]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1173 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 8th iter
best_l after optimization: 30.210880279541016
alpha/beta optimization time: 0.11161327362060547
initial alpha-crown bounds: tensor([[4.06331825e+00, 6.77928352e+00, 3.31616402e-02, 2.54543591e+00,
         2.59351730e-03, 1.90330637e+00, 1.86108613e+00, 7.08985615e+00,
         5.93283844e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.002593517303466797
verified with init bound!
Result: safe-incomplete in 0.2951 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [624]; unstable size 624; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 333, 1, 624] with unstable size 332 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 624] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 624] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [332]; unstable size 332; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 332] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 332] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.85007000,  6.56637955,  0.72854495,  0.16635013,  0.09236526,
         -0.16829300,  2.54186058,  4.97395611,  6.48725271]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.17it/s]100%|██████████| 1/1 [00:00<00:00,  9.16it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.02144432, -22.99676323, -16.43036079, -14.81798553, -15.77610588,
          -15.32225418, -15.29498672, -18.67889786, -21.40403748, -22.81297874]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.47700119]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1118 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.75709342956543
alpha/beta optimization time: 1.191329002380371
initial alpha-crown bounds: tensor([[ 3.92190504,  6.63770437,  0.78050649,  0.20929885,  0.10922245,
         -0.07384825,  2.59734726,  5.03754330,  6.53741264]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07384824752807617
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64379906654358
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64375972747803
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64373326301575
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.64368963241577
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6436698436737
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.64365100860596
Verifying property 5 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07384825]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
        -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07384825]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 624
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 330
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 975
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010037422180175781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07384824752807617
10 lb beta sum: 0.0, worst -0.07385134696960449
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 61] 
split level 6: [/input-8, 220] 
split level 7: [/input-8, 227] 
split level 8: [/input-12, 72] 
split level 9: [/input-8, 219] 
split level 10: [/input-8, 1947] 
split level 11: [/input-8, 229] 
split level 12: [/input-8, 221] 
split level 13: [/input-8, 612] 
split level 14: [/input-12, 43] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 214] 
split level 17: [/input-8, 1697] 
split level 18: [/input-8, 206] 
split level 19: [/input-8, 1372] 
split level 20: [/input-8, 578] 
split level 21: [/input-8, 605] 
split level 22: [/input, 3153] 
split level 23: [/input-8, 238] 
split level 24: [/input-8, 1380] 
split level 25: [/input-8, 1954] 
split level 26: [/input-8, 1381] 
split level 27: [/input-8, 245] 
split level 28: [/input-8, 593] 
split level 29: [/input-8, 946] 
split level 30: [/input-8, 213] 
split level 31: [/input-8, 1709] 
split level 32: [/input-8, 239] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 218] 
split level 35: [/input-8, 235] 
split level 36: [/input-8, 223] 
split level 37: [/input, 2657] 
split level 38: [/input-8, 211] 
split level 39: [/input-8, 222] 
split level 40: [/input, 1403] 
split level 41: [/input, 3475] 
split level 42: [/input-8, 1373] 
split level 43: [/input-8, 1379] 
split level 44: [/input-8, 1374] 
split level 45: [/input-8, 1710] 
split level 46: [/input, 3427] 
split level 47: [/input-8, 224] 
split level 48: [/input, 929] 
split level 49: [/input-8, 254] 
split level 50: [/input, 710] 
split level 51: [/input, 922] 
split level 52: [/input, 3139] 
split level 53: [/input, 3235] 
split level 54: [/input, 900] 
split level 55: [/input, 1002] 
split level 56: [/input-8, 203] 
split level 57: [/input-8, 1763] 
split level 58: [/input, 3138] 
split level 59: [/input, 3973] 
split level 60: [/input, 2441] 
split level 61: [/input, 2993] 
split level 62: [/input-8, 240] 
split level 63: [/input, 1351] 
split level 64: [/input-8, 345] 
split level 65: [/input-8, 231] 
split level 66: [/input-8, 988] 
split level 67: [/input, 2423] 
split level 68: [/input-8, 1931] 
split level 69: [/input-8, 196] 
split level 70: [/input-8, 1169] 
split level 71: [/input-8, 1774] 
split level 72: [/input-8, 242] 
split level 73: [/input, 2679] 
split level 74: [/input-8, 204] 
split level 75: [/input-8, 1365] 
split level 76: [/input, 1400] 
split level 77: [/input-8, 2005] 
split level 78: [/input-8, 1946] 
split level 79: [/input, 2673] 
split level 80: [/input, 3219] 
split level 81: [/input, 930] 
split level 82: [/input-8, 241] 
split level 83: [/input, 193] 
split level 84: [/input, 1385] 
split level 85: [/input, 2184] 
split level 86: [/input, 2263] 
split level 87: [/input, 2721] 
split level 88: [/input, 2977] 
split level 89: [/input, 172] 
split level 90: [/input, 2994] 
split level 91: [/input-8, 247] 
split level 92: [/input, 2165] 
split level 93: [/input, 1640] 
split level 94: [/input-8, 197] 
split level 95: [/input, 2197] 
split level 96: [/input-8, 1366] 
split level 97: [/input, 3429] 
split level 98: [/input-8, 255] 
split level 99: [/input-8, 1981] 
split level 100: [/input, 2708] 
split level 101: [/input-8, 1382] 
split level 102: [/input, 2470] 
split level 103: [/input, 120] 
split level 104: [/input, 2425] 
split level 105: [/input-8, 1994] 
split level 106: [/input-8, 201] 
split level 107: [/input-8, 1305] 
split level 108: [/input, 1356] 
split level 109: [/input, 156] 
split level 110: [/input, 401] 
split level 111: [/input, 2697] 
split level 112: [/input, 984] 
split level 113: [/input, 990] 
split level 114: [/input, 985] 
split level 115: [/input, 836] 
split level 116: [/input-8, 1737] 
split level 117: [/input-8, 934] 
split level 118: [/input, 2504] 
split level 119: [/input, 2540] 
split level 120: [/input, 2166] 
split level 121: [/input, 2279] 
split level 122: [/input, 155] 
split level 123: [/input, 2473] 
split level 124: [/input, 2476] 
split level 125: [/input, 3444] 
split level 126: [/input, 149] 
split level 127: [/input, 2698] 
split level 128: [/input, 3530] 
split level 129: [/input, 2274] 
split level 130: [/input, 2426] 
split level 131: [/input, 121] 
split level 132: [/input, 1006] 
split level 133: [/input-8, 1758] 
split level 134: [/input, 163] 
split level 135: [/input, 742] 
split level 136: [/input, 994] 
split level 137: [/input, 2971] 
split level 138: [/input, 177] 
split level 139: [/input, 2716] 
split level 140: [/input, 2979] 
split level 141: [/input-8, 1733] 
split level 142: [/input-8, 1244] 
split level 143: [/input, 419] 
split level 144: [/input, 932] 
split level 145: [/input, 2179] 
split level 146: [/input, 171] 
split level 147: [/input-8, 216] 
split level 148: [/input, 2537] 
split level 149: [/input, 2121] 
split level 150: [/input, 2724] 
split level 151: [/input, 3140] 
split level 152: [/input-8, 1746] 
split level 153: [/input, 91] 
split level 154: [/input-8, 1999] 
split level 155: [/input-8, 843] 
split level 156: [/input, 1863] 
split level 157: [/input, 3411] 
split level 158: [/input, 1494] 
split level 159: [/input, 129] 
split level 160: [/input, 2465] 
split level 161: [/input, 3173] 
split level 162: [/input, 2467] 
split level 163: [/input, 2661] 
split level 164: [/input, 2190] 
split level 165: [/input, 157] 
split level 166: [/input, 3497] 
split level 167: [/input-8, 1389] 
split level 168: [/input, 147] 
split level 169: [/input, 180] 
split level 170: [/input-8, 1226] 
split level 171: [/input, 3390] 
split level 172: [/input, 2460] 
split level 173: [/input, 3227] 
split level 174: [/input, 2395] 
split level 175: [/input, 2103] 
split level 176: [/input, 60] 
split level 177: [/input, 2360] 
split level 178: [/input, 1617] 
split level 179: [/input, 597] 
split level 180: [/input, 2257] 
split level 181: [/input, 2156] 
split level 182: [/input, 2844] 
split level 183: [/input, 137] 
split level 184: [/input, 2409] 
split level 185: [/input, 1469] 
split level 186: [/input, 1454] 
split level 187: [/input, 2148] 
split level 188: [/input, 2690] 
split level 189: [/input, 59] 
split level 190: [/input, 2119] 
split level 191: [/input, 2088] 
split level 192: [/input, 54] 
split level 193: [/input, 2406] 
split level 194: [/input, 2089] 
split level 195: [/input-8, 1752] 
split level 196: [/input, 1022] 
split level 197: [/input, 820] 
split level 198: [/input, 2498] 
split level 199: [/input, 2542] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0737314224243164
10 lb beta sum: 0.0, worst -0.0737295150756836
Time: prepare 0.0112    bound 0.0959    transfer 0.0019    finalize 0.0027    func 0.1142    
Accumulated time: func 0.1664    prepare 0.0216    bound 0.1477    transfer 0.0020    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.28505659) min lb tensor(-0.07372808)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010829925537109375 
BICCOS Cumulative time: 0.010829925537109375
Preprocessing time: 0.009882926940917969 Inference time: 0.00033092498779296875 Add cuts time: 0.000125885009765625 Cut analysis time: 0.0004901885986328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5113    set_bounds 0.0087    solve 0.1142    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5113    set_bounds 0.0087    solve 0.1142    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([-1.]), tensor([0]), tensor([9.88562824e-05]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([1.]), tensor([0]), tensor([9.88562824e-05]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026599407196044922

all verified at 1th iter
Time: prepare 0.0003    bound 0.0164    transfer 0.0001    finalize 0.0001    func 0.0170    
Accumulated time: func 0.1834    prepare 0.0219    bound 0.1641    transfer 0.0021    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.63335371017456
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.6332929134369
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.63327074050903
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3668 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.15224266, -25.34284210, -20.68698883, -21.11905098, -21.28755379,
         -21.18818092, -18.96833420, -23.86169434, -24.43035507, -25.58597183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [838]; unstable size 838; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 838] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 838] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 838] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 333] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44667244, 4.02514362, 0.65229511, 0.96642137, 0.94116783, 0.84790790,
         2.93652320, 3.08846760, 4.46393156]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0551 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 523] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 523] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.59975958,  3.72134495, -0.09878159,  0.47413671,  0.20959401,
          1.12203467, -0.49487051,  3.08997488,  2.65038395]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833],
         [-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89831924, -0.08036995]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0535 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.87531281, -15.75632095, -14.57347012, -15.76169777, -14.07984734,
         -16.31337166, -16.52824211, -16.65783691,  -8.99959373, -15.31440544]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 604] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 604] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 243] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74084163, 5.52800465, 4.11085033, 5.41803837, 3.71402264, 5.74122143,
         6.21470261, 6.00886154, 4.98770475]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0423 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.64936256, -23.01173401, -19.97909546, -17.49272156, -20.01158905,
         -17.02442741, -21.03547668, -19.50024414, -20.38127136, -20.46527672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [447]; unstable size 447; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 447] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 447] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 447] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 188] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.30454588, 4.15309858, 1.79540038, 0.15248439, 1.72279477, 3.02521467,
         1.09999573, 1.62638307, 1.86410713]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0471 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1052]; unstable size 1052; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 1052] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1052] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1052] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 365] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.67349291,  0.95226765,  3.60676432,  1.65505981,  4.16816044,
          2.46865177,  3.16671324,  0.41265249,  0.44317591]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.26it/s]100%|██████████| 1/1 [00:00<00:00,  9.25it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.87743950, -19.35758781, -22.15427971, -24.89256096, -22.97465324,
          -25.62451553, -23.85381317, -24.51388931, -21.46959877, -20.74610329]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51985168]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1107 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.485843658447266
alpha/beta optimization time: 1.20023775100708
initial alpha-crown bounds: tensor([[-0.55390930,  1.12264442,  3.76586771,  1.80786324,  4.34684658,
          2.61715698,  3.32345629,  0.54351616,  0.51240098]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.5539093017578125
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64403200149536
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55390930]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
        -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55390930]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1052
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 355
Node /15 input 0: size torch.Size([100]) unstable 29
-----------------
# of unstable neurons: 1436
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011444091796875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5539083480834961
10 lb beta sum: 0.0, worst -0.5539202690124512
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 8] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 67] 
split level 8: [/input-12, 2] 
split level 9: [/input-12, 89] 
split level 10: [/input-12, 64] 
split level 11: [/input-12, 24] 
split level 12: [/input-12, 14] 
split level 13: [/input-12, 42] 
split level 14: [/input-8, 1957] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1964] 
split level 17: [/input-12, 71] 
split level 18: [/input-12, 90] 
split level 19: [/input-12, 57] 
split level 20: [/input-8, 421] 
split level 21: [/input-8, 749] 
split level 22: [/input-8, 914] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1965] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1386] 
split level 27: [/input-8, 414] 
split level 28: [/input-8, 150] 
split level 29: [/input-8, 371] 
split level 30: [/input-8, 1951] 
split level 31: [/input-8, 1710] 
split level 32: [/input-8, 1635] 
split level 33: [/input-8, 605] 
split level 34: [/input-8, 604] 
split level 35: [/input-8, 433] 
split level 36: [/input-8, 1689] 
split level 37: [/input-8, 1392] 
split level 38: [/input-8, 416] 
split level 39: [/input-8, 1688] 
split level 40: [/input-12, 13] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 1675] 
split level 43: [/input-8, 1658] 
split level 44: [/input-8, 1657] 
split level 45: [/input-8, 1650] 
split level 46: [/input-8, 411] 
split level 47: [/input-8, 1483] 
split level 48: [/input-8, 1577] 
split level 49: [/input-8, 1393] 
split level 50: [/input-8, 1194] 
split level 51: [/input-8, 1179] 
split level 52: [/input-8, 748] 
split level 53: [/input-8, 1385] 
split level 54: [/input-8, 1619] 
split level 55: [/input-8, 821] 
split level 56: [/input-8, 1397] 
split level 57: [/input, 3546] 
split level 58: [/input, 1678] 
split level 59: [/input-8, 1620] 
split level 60: [/input-8, 1649] 
split level 61: [/input, 3547] 
split level 62: [/input, 2186] 
split level 63: [/input, 3545] 
split level 64: [/input-8, 406] 
split level 65: [/input-8, 958] 
split level 66: [/input-8, 1715] 
split level 67: [/input-8, 843] 
split level 68: [/input, 3450] 
split level 69: [/input-8, 1396] 
split level 70: [/input-8, 1395] 
split level 71: [/input-8, 293] 
split level 72: [/input-8, 1754] 
split level 73: [/input-8, 1067] 
split level 74: [/input-8, 1702] 
split level 75: [/input, 3537] 
split level 76: [/input, 131] 
split level 77: [/input-8, 307] 
split level 78: [/input-8, 1317] 
split level 79: [/input-8, 403] 
split level 80: [/input-8, 1230] 
split level 81: [/input-8, 1484] 
split level 82: [/input, 2714] 
split level 83: [/input-8, 820] 
split level 84: [/input, 3770] 
split level 85: [/input-8, 1399] 
split level 86: [/input-8, 889] 
split level 87: [/input-8, 1226] 
split level 88: [/input, 999] 
split level 89: [/input-8, 245] 
split level 90: [/input-8, 145] 
split level 91: [/input, 3525] 
split level 92: [/input-8, 242] 
split level 93: [/input-8, 1598] 
split level 94: [/input, 2283] 
split level 95: [/input-8, 1388] 
split level 96: [/input, 985] 
split level 97: [/input-8, 1593] 
split level 98: [/input, 1000] 
split level 99: [/input-8, 890] 
split level 100: [/input, 982] 
split level 101: [/input, 3542] 
split level 102: [/input-8, 497] 
split level 103: [/input, 962] 
split level 104: [/input-8, 1610] 
split level 105: [/input, 978] 
split level 106: [/input, 3526] 
split level 107: [/input-8, 308] 
split level 108: [/input-8, 373] 
split level 109: [/input-8, 826] 
split level 110: [/input, 1413] 
split level 111: [/input, 713] 
split level 112: [/input, 998] 
split level 113: [/input, 712] 
split level 114: [/input-8, 284] 
split level 115: [/input, 694] 
split level 116: [/input-8, 402] 
split level 117: [/input, 983] 
split level 118: [/input, 1003] 
split level 119: [/input-8, 891] 
split level 120: [/input, 2785] 
split level 121: [/input, 997] 
split level 122: [/input, 1001] 
split level 123: [/input, 715] 
split level 124: [/input, 2770] 
split level 125: [/input-8, 292] 
split level 126: [/input-8, 241] 
split level 127: [/input, 2539] 
split level 128: [/input, 2945] 
split level 129: [/input-8, 1318] 
split level 130: [/input-8, 306] 
split level 131: [/input, 1012] 
split level 132: [/input-8, 825] 
split level 133: [/input, 1020] 
split level 134: [/input, 977] 
split level 135: [/input, 2786] 
split level 136: [/input, 907] 
split level 137: [/input-8, 1323] 
split level 138: [/input-8, 244] 
split level 139: [/input, 2769] 
split level 140: [/input, 1011] 
split level 141: [/input-8, 1594] 
split level 142: [/input-8, 1398] 
split level 143: [/input, 2266] 
split level 144: [/input-8, 827] 
split level 145: [/input-8, 1609] 
split level 146: [/input, 2407] 
split level 147: [/input, 1006] 
split level 148: [/input, 3528] 
split level 149: [/input, 961] 
split level 150: [/input, 1896] 
split level 151: [/input, 2555] 
split level 152: [/input-8, 246] 
split level 153: [/input, 2716] 
split level 154: [/input, 714] 
split level 155: [/input, 3508] 
split level 156: [/input-8, 250] 
split level 157: [/input, 2537] 
split level 158: [/input-8, 254] 
split level 159: [/input-8, 1376] 
split level 160: [/input-8, 255] 
split level 161: [/input, 2267] 
split level 162: [/input-8, 819] 
split level 163: [/input, 2279] 
split level 164: [/input-8, 840] 
split level 165: [/input, 2284] 
split level 166: [/input, 2282] 
split level 167: [/input-8, 393] 
split level 168: [/input, 2753] 
split level 169: [/input, 2538] 
split level 170: [/input, 675] 
split level 171: [/input-8, 253] 
split level 172: [/input, 1013] 
split level 173: [/input, 1019] 
split level 174: [/input-8, 243] 
split level 175: [/input-8, 842] 
split level 176: [/input-8, 1175] 
split level 177: [/input-8, 2033] 
split level 178: [/input, 2265] 
split level 179: [/input, 2549] 
split level 180: [/input, 2285] 
split level 181: [/input-8, 833] 
split level 182: [/input-8, 203] 
split level 183: [/input, 2550] 
split level 184: [/input-12, 36] 
split level 185: [/input, 2536] 
split level 186: [/input, 2535] 
split level 187: [/input, 2903] 
split level 188: [/input, 2551] 
split level 189: [/input, 1912] 
split level 190: [/input, 2552] 
split level 191: [/input, 2787] 
split level 192: [/input, 2280] 
split level 193: [/input, 2261] 
split level 194: [/input, 2557] 
split level 195: [/input, 2553] 
split level 196: [/input, 2541] 
split level 197: [/input, 2548] 
split level 198: [/input, 2547] 
split level 199: [/input, 2281] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5538907051086426
10 lb beta sum: 0.0, worst -0.5538878440856934
Time: prepare 0.0112    bound 0.0952    transfer 0.0010    finalize 0.0029    func 0.1128    
Accumulated time: func 0.1652    prepare 0.0212    bound 0.1471    transfer 0.0011    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.25172138) min lb tensor(-0.55388069)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01032257080078125 
BICCOS Cumulative time: 0.01032257080078125
Preprocessing time: 0.009924650192260742 Inference time: 0.00011658668518066406 Add cuts time: 6.628036499023438e-05 Cut analysis time: 0.00021505355834960938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53513 (1), -0.53305 (1), -0.53185 (1), -0.53179 (1), -0.53135 (1), -0.53029 (1), -0.52977 (1), -0.52829 (1), -0.52829 (1), -0.52762 (1), -0.52753 (1), -0.52681 (1), -0.52651 (1), -0.52603 (1), -0.52467 (1), -0.52371 (1), -0.52368 (1), -0.52164 (1), -0.52128 (1), -0.52092 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5056    set_bounds 0.0086    solve 0.1129    add 0.0693    
Accumulated time: pickout 0.0003    decision 0.5056    set_bounds 0.0086    solve 0.1129    add 0.0693    
Current (lb-rhs): -0.5351319313049316
50 domains visited
Cumulative time: 0.7743580341339111

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 31] [/input-12, 69] [/input-12, 31] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.49222278594970703
10 lb beta sum: 0.41372600197792053, worst -0.4795803427696228
Time: prepare 0.0068    bound 0.1148    transfer 0.0007    finalize 0.0024    func 0.1272    
Accumulated time: func 0.2924    prepare 0.0282    bound 0.2619    transfer 0.0018    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.31830114) min lb tensor(-0.47951084)
Number of Verified Splits: 80 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01695728302001953 
BICCOS Cumulative time: 0.02727985382080078
Preprocessing time: 0.011531829833984375 Inference time: 0.003022909164428711 Add cuts time: 0.0020241737365722656 Cut analysis time: 0.0003783702850341797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24997 (2), -0.24938 (2), -0.24669 (2), -0.24511 (2), -0.24503 (2), -0.24322 (2), -0.24095 (2), -0.23992 (2), -0.23679 (2), -0.23601 (2), -0.23483 (2), -0.23272 (2), -0.23188 (2), -0.23043 (2), -0.22825 (2), -0.22772 (2), -0.22688 (2), -0.22620 (2), -0.22558 (2), -0.22239 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0243    set_bounds 0.0131    solve 0.1273    add 0.0861    
Accumulated time: pickout 0.0016    decision 0.5299    set_bounds 0.0217    solve 0.2402    add 0.1555    
Current (lb-rhs): -0.24997484683990479
100 domains visited
Cumulative time: 1.0436692237854004

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 38] [/input-12, 38] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 46] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25121116638183594
10 lb beta sum: 1.217774510383606, worst -0.15147286653518677
Time: prepare 0.0063    bound 0.1147    transfer 0.0007    finalize 0.0020    func 0.1264    
Accumulated time: func 0.4188    prepare 0.0347    bound 0.3766    transfer 0.0026    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.67256272) min lb tensor(-0.14962745)
Number of Verified Splits: 286 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.030200481414794922 
BICCOS Cumulative time: 0.0574803352355957
Preprocessing time: 0.011338233947753906 Inference time: 0.01266789436340332 Add cuts time: 0.005759000778198242 Cut analysis time: 0.0004353523254394531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14963 (3), -0.14961 (3), -0.09265 (3), -0.05456 (3), -0.05450 (3), -0.05446 (3), -0.05425 (3), -0.05423 (3), -0.05409 (3), -0.04081 (3), -0.00303 (3), -0.00267 (3), 
Length of domains: 12
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0158    solve 0.1265    add 0.1064    
Accumulated time: pickout 0.0026    decision 0.5491    set_bounds 0.0375    solve 0.3666    add 0.2619    
Current (lb-rhs): -0.1496274471282959
112 domains visited
Cumulative time: 1.3428971767425537

Shallow-BaB round 4
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] 
split level 2: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 38] 
split level 3: [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
split level 4: [/input-12, 2] [/input-12, 2] [/input-12, 67] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 53] 
split level 5: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
split level 6: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] 
split level 7: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 64] 
split level 8: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 14] 
split level 9: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 42] 
split level 10: [/input-12, 90] [/input-12, 90] [/input-12, 71] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-8, 1964] 
split level 11: [/input-12, 71] [/input-12, 71] [/input-12, 90] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 12: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 90] 
split level 13: [/input-8, 914] [/input-8, 914] [/input-8, 1951] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-12, 57] 
split level 14: [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1951] 
split level 15: [/input-8, 1710] [/input-8, 1710] [/input-8, 1689] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22480344772338867
10 lb beta sum: 1.8370306491851807, worst -0.04542738199234009
Time: prepare 0.0059    bound 0.1277    transfer 0.0018    finalize 0.0023    func 0.1402    
Accumulated time: func 0.5590    prepare 0.0414    bound 0.5043    transfer 0.0044    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.65292799) min lb tensor(-0.04146981)
Number of Verified Splits: 350 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.1840229034423828 
BICCOS Cumulative time: 0.24150323867797852
Preprocessing time: 0.010872602462768555 Inference time: 0.1669309139251709 Add cuts time: 0.005455732345581055 Cut analysis time: 0.0007636547088623047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0531    set_bounds 0.0137    solve 0.1403    add 0.0252    
Accumulated time: pickout 0.0032    decision 0.6021    set_bounds 0.0512    solve 0.5069    add 0.2871    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  2.28397056e-01,  4.01763380e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  2.28397056e-01,  1.50064692e-01,  7.92784542e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  2.28397056e-01,  1.50064692e-01,  9.30011123e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.51293561e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  2.31371924e-01,  4.39488471e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  2.31371924e-01,  1.45004943e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.50099799e-01,  4.59899962e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.50099799e-01,  1.44925818e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31609106063842773
10 lb beta sum: 1.1069294214248657, worst -0.08423936367034912
Time: prepare 0.0004    bound 0.1319    transfer 0.0002    finalize 0.0002    func 0.1327    
Accumulated time: func 0.6917    prepare 0.0418    bound 0.6362    transfer 0.0045    finalize 0.0100    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 38] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 89] 
split level 6: [/input-12, 71] 
split level 7: [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 2.9545745849609375, worst 0.02366030216217041

all verified at 0th iter
Time: prepare 0.0094    bound 0.0049    transfer 0.0012    finalize 0.0015    func 0.0186    
Accumulated time: func 0.7103    prepare 0.0517    bound 0.6411    transfer 0.0057    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(2.00363016) min lb tensor(0.02366030)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.006567955017089844 
BICCOS Cumulative time: 0.24807119369506836
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0219    set_bounds 0.0208    solve 0.0187    add 0.0002    
Accumulated time: pickout 0.0037    decision 0.6240    set_bounds 0.0719    solve 0.5256    add 0.2873    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
Cumulative time: 1.9815325736999512


Properties batch 1, size 1
Remaining timeout: 196.31372332572937
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 196.3136444091797
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 196.3136215209961
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.31360244750977
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.31327962875366
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.31325268745422
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.31323313713074
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.31321454048157
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.6868 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 659] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 659] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 310] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.06798172, -2.58395004, -2.91112757, -3.35464382, -2.51877689,
         -3.61695004, -2.86971092,  0.43352503, -1.25155306]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608],
         [-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.58797550, -1.25629997, -1.39370346, -1.92769146, -0.81752968,
          -2.13807678, -0.99972248,  0.72580242]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.90988064, -12.45664406, -15.21899319, -13.88694572, -14.48770905,
         -14.28946209, -14.69633865, -13.84464264, -14.34021282, -11.62079906]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [500]; unstable size 500; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 500] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 500] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 500] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 172] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81550562, 0.12776923, 1.67829549, 0.58634543, 0.90821457, 0.83706665,
         1.15808940, 0.31059206, 1.68028712]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.65237999, -26.28784180, -22.21496773, -22.94103813, -19.88295174,
         -23.10355949, -23.92632675, -16.94944000, -25.83104324, -24.10295296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 632] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 632] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 241] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.00603724, 7.31206417, 3.91715908, 4.58261061, 2.16801453, 4.73693943,
         5.37613630, 6.48344898, 5.24407578]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.01066399, -28.57836723, -25.32221985, -26.57108498, -26.69775391,
         -27.17006111, -27.16849136, -29.60597229, -25.49334908, -28.60743141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 602] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 602] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 133] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.69067621, 1.75672960, 2.90525103, 3.03809547, 3.37360620, 3.51928473,
         5.64078951, 1.68218994, 4.79778767]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0558 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [824]; unstable size 824; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 824] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 824] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 824] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 256] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.94624829,  4.85114574, -0.16955948, -1.79679918, -1.73069477,
         -1.51086402, -1.98932171,  3.64661932,  4.09455395]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420],
         [-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.04877281, -0.86913109, -0.84417152, -0.60509300, -0.59322166]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0598 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.97128105, -37.96307373, -34.52404785, -37.46557999, -35.63014603,
         -38.36451340, -36.77544022, -40.04882431, -35.94057846, -38.51336288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [763]; unstable size 763; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 763] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 763] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 763] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 175] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.93386269, 1.84800124, 4.37804556, 2.56460929, 5.05402088, 3.82877159,
         6.62602043, 3.10796762, 5.56228876]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0421 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.48475838, -29.65727234, -23.60843277, -25.59186363, -21.86170197,
         -25.18845367, -25.36190605, -23.12098694, -27.66559601, -28.33211899]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [618]; unstable size 618; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 618] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 618] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 618] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.15050721, 5.57539129, 0.71036410, 2.73630524, 2.29937887, 2.30952501,
         0.40072036, 4.11238289, 4.36770439]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 331, 1, 1008] with unstable size 330 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1008] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [330]; unstable size 330; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 330] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 330] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17812490,  2.10233808, -1.56133437, -0.11888313, -1.70705867,
          0.52253580, -0.66222930, -0.72439551,  1.23998904]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907],
         [-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22510529,  1.75610542, -0.26020622,  1.61910248,  1.90497017]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35557175, -32.47544098, -30.43883324, -33.30394363, -32.17427444,
         -34.25338364, -33.63493729, -35.26922607, -29.93074799, -32.68428421]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [840]; unstable size 840; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 840] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 840] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 840] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.16921949, 2.31352949, 4.99022293, 3.81911087, 5.78720474, 5.29893923,
         6.80568743, 1.75992763, 4.51705360]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0428 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [649]; unstable size 649; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 316, 1, 649] with unstable size 315 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 649] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 649] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [315]; unstable size 315; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 315] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 315] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.31691861,  2.24976492,  0.04557943, -0.85450840,  0.30286229,
         -0.63437951, -0.21570843,  3.64171410,  1.40587425]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459],
         [-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20651436,  0.33895111,  0.69560242]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0478 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 539] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 539] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 282] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.73897886,  3.94992828,  0.45281982,  1.56286335,  0.87203968,
         -1.16177833,  0.85932612,  3.68842459,  2.19751191]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
          -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.06229782]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0364 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 563] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 563] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 155] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52441835,  5.39360380,  0.73585320, -1.15312314,  0.82712793,
         -0.08107734,  1.07491684,  4.02794266,  3.11614561]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685],
         [-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44894600,  0.58358002]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0523 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.70158577, -22.21768379, -23.95887756, -27.52854156, -24.44779968,
         -28.61229897, -28.66467094, -26.43075180, -22.27626801, -22.80558968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 756] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 756] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.58621788, 2.47436047, 5.86044216, 2.89928865, 6.82225561, 6.78166199,
         4.58398342, 0.69966269, 1.06527948]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0333 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 302, 1, 453] with unstable size 301 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 453] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [301]; unstable size 301; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 301] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 301] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.36418676e+00,  3.88016152e+00, -1.22761726e-03,  5.18171310e-01,
         -7.83934593e-02,  5.22855282e-01,  8.93965244e-01,  5.49661064e+00,
          2.41142797e+00]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.99it/s]100%|██████████| 1/1 [00:00<00:00,  8.98it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674],
         [-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59818363, 0.80048466]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1141 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.59307098388672
alpha/beta optimization time: 1.198657512664795
initial alpha-crown bounds: tensor([[ 4.42038774,  3.93954492,  0.04252601,  0.59053844, -0.04267073,
          0.61050254,  0.96340299,  5.55710411,  2.51173663]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.04267072677612305
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.65081095695496
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.65077185630798
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6507465839386
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6507270336151
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.65070843696594
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04267073]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
        -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04267073]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 299
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 772
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010156631469726562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04266810417175293
10 lb beta sum: 0.0, worst -0.042676687240600586
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    func 0.0519    
Accumulated time: func 0.0519    prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 85] 
split level 3: [/input-12, 14] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 10] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 17] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 163] 
split level 12: [/input-8, 154] 
split level 13: [/input-8, 132] 
split level 14: [/input-8, 142] 
split level 15: [/input-8, 172] 
split level 16: [/input, 2887] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1249] 
split level 19: [/input-12, 55] 
split level 20: [/input-8, 298] 
split level 21: [/input-8, 309] 
split level 22: [/input-8, 155] 
split level 23: [/input-8, 1362] 
split level 24: [/input-8, 1386] 
split level 25: [/input-8, 914] 
split level 26: [/input-8, 147] 
split level 27: [/input-8, 1242] 
split level 28: [/input-8, 1203] 
split level 29: [/input-8, 178] 
split level 30: [/input, 3300] 
split level 31: [/input-8, 290] 
split level 32: [/input-12, 8] 
split level 33: [/input-8, 315] 
split level 34: [/input-8, 492] 
split level 35: [/input, 2919] 
split level 36: [/input-8, 307] 
split level 37: [/input-8, 1627] 
split level 38: [/input-8, 282] 
split level 39: [/input-8, 1389] 
split level 40: [/input-8, 146] 
split level 41: [/input-8, 1271] 
split level 42: [/input-8, 162] 
split level 43: [/input-8, 252] 
split level 44: [/input, 2934] 
split level 45: [/input-8, 1390] 
split level 46: [/input-8, 1395] 
split level 47: [/input-8, 1674] 
split level 48: [/input-8, 171] 
split level 49: [/input, 840] 
split level 50: [/input-8, 1382] 
split level 51: [/input, 3556] 
split level 52: [/input-8, 445] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1240] 
split level 55: [/input-8, 99] 
split level 56: [/input-8, 1363] 
split level 57: [/input-8, 957] 
split level 58: [/input-8, 1066] 
split level 59: [/input-8, 2029] 
split level 60: [/input, 345] 
split level 61: [/input-8, 348] 
split level 62: [/input-8, 1675] 
split level 63: [/input, 856] 
split level 64: [/input-8, 1628] 
split level 65: [/input, 824] 
split level 66: [/input-8, 777] 
split level 67: [/input-8, 1644] 
split level 68: [/input-8, 257] 
split level 69: [/input-8, 430] 
split level 70: [/input-8, 1587] 
split level 71: [/input-8, 1673] 
split level 72: [/input-8, 250] 
split level 73: [/input-8, 342] 
split level 74: [/input-8, 499] 
split level 75: [/input-8, 341] 
split level 76: [/input, 854] 
split level 77: [/input-12, 72] 
split level 78: [/input-8, 46] 
split level 79: [/input-8, 1689] 
split level 80: [/input, 2788] 
split level 81: [/input-8, 1181] 
split level 82: [/input, 341] 
split level 83: [/input-8, 1354] 
split level 84: [/input, 2933] 
split level 85: [/input-8, 98] 
split level 86: [/input-8, 238] 
split level 87: [/input-8, 1676] 
split level 88: [/input, 821] 
split level 89: [/input, 2901] 
split level 90: [/input-8, 424] 
split level 91: [/input, 2922] 
split level 92: [/input-8, 55] 
split level 93: [/input-8, 1383] 
split level 94: [/input, 2949] 
split level 95: [/input-8, 1005] 
split level 96: [/input, 873] 
split level 97: [/input, 487] 
split level 98: [/input, 3381] 
split level 99: [/input, 859] 
split level 100: [/input-8, 1680] 
split level 101: [/input-8, 1399] 
split level 102: [/input-8, 922] 
split level 103: [/input-8, 1355] 
split level 104: [/input-8, 275] 
split level 105: [/input-8, 1660] 
split level 106: [/input-8, 878] 
split level 107: [/input-8, 253] 
split level 108: [/input-8, 1361] 
split level 109: [/input, 1655] 
split level 110: [/input-8, 446] 
split level 111: [/input-8, 1375] 
split level 112: [/input, 362] 
split level 113: [/input-8, 1044] 
split level 114: [/input-8, 249] 
split level 115: [/input-8, 230] 
split level 116: [/input-8, 493] 
split level 117: [/input-8, 1602] 
split level 118: [/input, 409] 
split level 119: [/input-8, 447] 
split level 120: [/input-8, 1540] 
split level 121: [/input, 329] 
split level 122: [/input-8, 151] 
split level 123: [/input, 3572] 
split level 124: [/input, 2952] 
split level 125: [/input, 456] 
split level 126: [/input, 969] 
split level 127: [/input, 146] 
split level 128: [/input, 2872] 
split level 129: [/input-8, 2021] 
split level 130: [/input-8, 1512] 
split level 131: [/input-8, 485] 
split level 132: [/input, 3215] 
split level 133: [/input, 885] 
split level 134: [/input-8, 103] 
split level 135: [/input-8, 441] 
split level 136: [/input, 841] 
split level 137: [/input-8, 231] 
split level 138: [/input, 791] 
split level 139: [/input-8, 1665] 
split level 140: [/input, 795] 
split level 141: [/input, 844] 
split level 142: [/input-8, 786] 
split level 143: [/input-8, 107] 
split level 144: [/input-8, 1652] 
split level 145: [/input, 3557] 
split level 146: [/input-8, 137] 
split level 147: [/input-8, 18] 
split level 148: [/input, 440] 
split level 149: [/input, 283] 
split level 150: [/input, 2907] 
split level 151: [/input-8, 458] 
split level 152: [/input, 3214] 
split level 153: [/input-8, 369] 
split level 154: [/input, 3497] 
split level 155: [/input, 2966] 
split level 156: [/input, 789] 
split level 157: [/input-8, 350] 
split level 158: [/input, 981] 
split level 159: [/input-8, 1535] 
split level 160: [/input-8, 191] 
split level 161: [/input-8, 1527] 
split level 162: [/input-8, 1353] 
split level 163: [/input, 2836] 
split level 164: [/input, 339] 
split level 165: [/input, 2910] 
split level 166: [/input, 3286] 
split level 167: [/input-8, 143] 
split level 168: [/input, 4013] 
split level 169: [/input, 3181] 
split level 170: [/input-8, 1729] 
split level 171: [/input-8, 1333] 
split level 172: [/input, 3293] 
split level 173: [/input, 3419] 
split level 174: [/input, 2838] 
split level 175: [/input, 867] 
split level 176: [/input-8, 1081] 
split level 177: [/input-8, 97] 
split level 178: [/input, 3268] 
split level 179: [/input, 90] 
split level 180: [/input, 2894] 
split level 181: [/input, 793] 
split level 182: [/input-8, 1217] 
split level 183: [/input-8, 1653] 
split level 184: [/input, 2719] 
split level 185: [/input, 1013] 
split level 186: [/input-8, 439] 
split level 187: [/input-8, 963] 
split level 188: [/input, 1187] 
split level 189: [/input-8, 1356] 
split level 190: [/input-8, 339] 
split level 191: [/input, 2852] 
split level 192: [/input, 2893] 
split level 193: [/input-8, 204] 
split level 194: [/input-8, 1225] 
split level 195: [/input, 3099] 
split level 196: [/input, 21] 
split level 197: [/input, 861] 
split level 198: [/input, 403] 
split level 199: [/input, 104] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04265546798706055
10 lb beta sum: 0.0, worst -0.042644500732421875
Time: prepare 0.0112    bound 0.0957    transfer 0.0009    finalize 0.0026    func 0.1130    
Accumulated time: func 0.1649    prepare 0.0212    bound 0.1471    transfer 0.0010    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.44494545) min lb tensor(-0.04263711)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011447668075561523 
BICCOS Cumulative time: 0.011447668075561523
Preprocessing time: 0.009992599487304688 Inference time: 0.0007195472717285156 Add cuts time: 0.00024247169494628906 Cut analysis time: 0.0004930496215820312
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5073    set_bounds 0.0086    solve 0.1131    add 0.0098    
Accumulated time: pickout 0.0003    decision 0.5073    set_bounds 0.0086    solve 0.1131    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([-1.]), tensor([0]), tensor([-1.26117907e-33]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([1.]), tensor([0]), tensor([-1.26118054e-33]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030647754669189453

all verified at 1th iter
Time: prepare 0.0003    bound 0.0095    transfer 0.0001    finalize 0.0001    func 0.0101    
Accumulated time: func 0.1750    prepare 0.0214    bound 0.1566    transfer 0.0011    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.75107049942017
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.75100922584534
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.75098705291748
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.75096774101257
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.2491 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25883293, -16.40706444, -12.91650105, -13.33503723, -12.76172256,
         -14.05701828, -10.42017269, -14.10208035, -18.75581741, -16.93133926]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 259, 1, 403] with unstable size 258 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 403] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [258]; unstable size 258; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 258] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 258] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00860643, 4.23702192, 1.09872413, 1.64570773, 0.89420414, 2.14901733,
         1.57642496, 6.09759998, 4.54596281]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.57652092, -32.23639679, -28.36616898, -29.83554840, -30.16464424,
         -30.64960480, -32.17686844, -29.80444527, -29.91892624, -32.09518433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 483] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 483] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07906628, 1.77047968, 3.19271374, 3.46971655, 3.86028957, 5.23355198,
         2.96001410, 3.10798597, 5.22356081]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0309 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.71967888, -24.49569893, -23.46326828, -21.31615639, -22.26188850,
         -21.78440475, -22.43858719, -23.19987106, -16.18318367, -22.82086182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 644] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 644] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 214] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.49413395, 6.51567554, 5.72104549, 3.75618219, 4.40788603, 4.05219269,
         4.77330208, 5.20549011, 5.05213833]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.19749069, -20.07060051, -15.00829124, -14.86962318, -16.28983498,
         -15.46364594, -13.24634743, -17.95564651, -17.94532013, -19.32559013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 570] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 570] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 264] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89140368, 4.24306488, 0.43238330, 0.61651587, 1.44491482, 0.98225832,
         2.89481401, 2.46429324, 3.67898226]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0484 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 591] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 591] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 291] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08203340,  2.15383005, -1.83007860, -0.33773947, -2.24676943,
         -3.21968865, -0.57630783,  2.02706242,  0.67616558]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454],
         [-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53871918,  0.04095840, -1.00980091, -2.01896667,  0.82336426]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0818 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [929]; unstable size 929; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 450, 1, 929] with unstable size 449 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 929] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 929] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [449]; unstable size 449; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 449] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88848358,  3.70000124,  0.24056005, -1.21744084,  0.64094102,
         -1.06626415, -0.11656284,  2.34579206,  3.68335915]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201],
         [-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20256615,  0.37226105,  1.56615639]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0408 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [670]; unstable size 670; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 670] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 670] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 670] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 244] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.87631369, -2.55956173, -2.18437910, -2.77099609, -1.83020782,
         -2.16091871, -1.01760483, -2.05305576, -0.77688050]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689],
         [-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36907768, -0.63944435, -0.68422890, -1.06904411, -0.29378319,
          -0.66966820,  0.68347168, -0.39215279, -0.08926010]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [889]; unstable size 889; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 324, 1, 889] with unstable size 323 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 889] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 889] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [323]; unstable size 323; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 323] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 323] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86873055,  3.27330327, -1.23502302, -0.61113083, -0.78136897,
         -0.75137866,  0.93968022,  3.48995113,  3.24112606]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925],
         [-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20915604, -0.23009109,  0.44242859,  0.35466194]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0813 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.53012466, -29.66223907, -26.90876389, -28.07838631, -26.04151726,
         -29.22808647, -27.47805023, -29.35506439, -20.28993988, -29.09470940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 586] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 586] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 173] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51274943, 8.23108101, 5.60526609, 6.71246958, 4.74748850, 7.73364496,
         6.02225113, 7.97453213, 7.67071819]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0579 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [688]; unstable size 688; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 688] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 688] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 688] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 260] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.49447227,  3.06922221,  0.62996531, -0.02265921,  0.38052893,
         -0.22107947,  0.10723698,  4.39991140,  2.21292210]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637],
         [-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.17633629, 0.72260857]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1206 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.641366958618164
alpha/beta optimization time: 1.2209804058074951
initial alpha-crown bounds: tensor([[ 2.55440712,  3.16163659,  0.69625568,  0.01558399,  0.45437050,
         -0.16967297,  0.16310728,  4.47692776,  2.28875065]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16967296600341797
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62712860107422
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62709069252014
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62706446647644
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62704348564148
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6270251274109
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.62700605392456
Verifying property 5 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16967297]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
        -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16967297]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 688
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 258
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 968
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.393692016601562e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16967153549194336
10 lb beta sum: 0.0, worst -0.1696796417236328
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 17] 
split level 4: [/input-12, 72] 
split level 5: [/input-12, 35] 
split level 6: [/input-8, 944] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 89] 
split level 9: [/input-8, 593] 
split level 10: [/input-12, 36] 
split level 11: [/input-8, 421] 
split level 12: [/input-8, 1948] 
split level 13: [/input-8, 1949] 
split level 14: [/input-12, 18] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1946] 
split level 17: [/input-8, 853] 
split level 18: [/input-8, 418] 
split level 19: [/input-8, 1709] 
split level 20: [/input-8, 1938] 
split level 21: [/input-8, 427] 
split level 22: [/input-8, 601] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 938] 
split level 25: [/input-8, 585] 
split level 26: [/input, 1431] 
split level 27: [/input-8, 979] 
split level 28: [/input-8, 604] 
split level 29: [/input-8, 594] 
split level 30: [/input, 3209] 
split level 31: [/input-8, 980] 
split level 32: [/input-8, 1684] 
split level 33: [/input-12, 71] 
split level 34: [/input-8, 1170] 
split level 35: [/input, 1377] 
split level 36: [/input-8, 844] 
split level 37: [/input-8, 1693] 
split level 38: [/input, 3124] 
split level 39: [/input-8, 1675] 
split level 40: [/input-8, 1954] 
split level 41: [/input-8, 587] 
split level 42: [/input-8, 1742] 
split level 43: [/input, 2710] 
split level 44: [/input-8, 403] 
split level 45: [/input, 1443] 
split level 46: [/input, 2676] 
split level 47: [/input, 276] 
split level 48: [/input, 1444] 
split level 49: [/input, 2679] 
split level 50: [/input, 3171] 
split level 51: [/input, 1394] 
split level 52: [/input-8, 404] 
split level 53: [/input, 3238] 
split level 54: [/input, 2485] 
split level 55: [/input-8, 1331] 
split level 56: [/input-8, 1599] 
split level 57: [/input, 147] 
split level 58: [/input, 131] 
split level 59: [/input, 2451] 
split level 60: [/input-12, 43] 
split level 61: [/input-8, 1177] 
split level 62: [/input, 1346] 
split level 63: [/input-8, 1341] 
split level 64: [/input, 2197] 
split level 65: [/input-8, 1676] 
split level 66: [/input, 1361] 
split level 67: [/input, 2180] 
split level 68: [/input, 2198] 
split level 69: [/input-8, 1752] 
split level 70: [/input, 3285] 
split level 71: [/input-8, 580] 
split level 72: [/input, 209] 
split level 73: [/input, 132] 
split level 74: [/input, 2586] 
split level 75: [/input, 1441] 
split level 76: [/input, 3287] 
split level 77: [/input, 3102] 
split level 78: [/input, 3118] 
split level 79: [/input, 803] 
split level 80: [/input, 1719] 
split level 81: [/input, 787] 
split level 82: [/input, 3363] 
split level 83: [/input, 2603] 
split level 84: [/input, 2434] 
split level 85: [/input, 820] 
split level 86: [/input, 2099] 
split level 87: [/input-8, 1782] 
split level 88: [/input-8, 60] 
split level 89: [/input, 2257] 
split level 90: [/input, 1387] 
split level 91: [/input, 3379] 
split level 92: [/input-8, 1315] 
split level 93: [/input, 1410] 
split level 94: [/input, 146] 
split level 95: [/input, 788] 
split level 96: [/input, 804] 
split level 97: [/input, 2587] 
split level 98: [/input, 3142] 
split level 99: [/input, 2258] 
split level 100: [/input, 2707] 
split level 101: [/input, 1994] 
split level 102: [/input, 2792] 
split level 103: [/input, 2437] 
split level 104: [/input, 2145] 
split level 105: [/input, 819] 
split level 106: [/input, 156] 
split level 107: [/input, 1426] 
split level 108: [/input, 3154] 
split level 109: [/input, 851] 
split level 110: [/input, 1449] 
split level 111: [/input, 2512] 
split level 112: [/input, 177] 
split level 113: [/input, 2266] 
split level 114: [/input, 2387] 
split level 115: [/input, 2433] 
split level 116: [/input, 1468] 
split level 117: [/input, 2116] 
split level 118: [/input, 2741] 
split level 119: [/input, 2758] 
split level 120: [/input, 166] 
split level 121: [/input-8, 836] 
split level 122: [/input, 2658] 
split level 123: [/input-8, 1765] 
split level 124: [/input, 2529] 
split level 125: [/input, 1480] 
split level 126: [/input, 214] 
split level 127: [/input, 2620] 
split level 128: [/input, 2211] 
split level 129: [/input, 2530] 
split level 130: [/input, 835] 
split level 131: [/input, 999] 
split level 132: [/input, 2757] 
split level 133: [/input, 3301] 
split level 134: [/input, 2148] 
split level 135: [/input-8, 396] 
split level 136: [/input, 2791] 
split level 137: [/input, 2242] 
split level 138: [/input, 182] 
split level 139: [/input-8, 1265] 
split level 140: [/input, 113] 
split level 141: [/input, 2161] 
split level 142: [/input, 2774] 
split level 143: [/input, 995] 
split level 144: [/input, 193] 
split level 145: [/input, 3288] 
split level 146: [/input, 2773] 
split level 147: [/input-8, 1784] 
split level 148: [/input, 2657] 
split level 149: [/input-8, 402] 
split level 150: [/input, 3525] 
split level 151: [/input, 837] 
split level 152: [/input, 2977] 
split level 153: [/input, 996] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 977] 
split level 156: [/input, 2686] 
split level 157: [/input, 2507] 
split level 158: [/input, 3358] 
split level 159: [/input, 2777] 
split level 160: [/input, 162] 
split level 161: [/input, 195] 
split level 162: [/input, 145] 
split level 163: [/input, 2699] 
split level 164: [/input, 2355] 
split level 165: [/input, 2450] 
split level 166: [/input, 227] 
split level 167: [/input, 2204] 
split level 168: [/input, 3381] 
split level 169: [/input, 114] 
split level 170: [/input, 199] 
split level 171: [/input, 3014] 
split level 172: [/input, 789] 
split level 173: [/input, 2654] 
split level 174: [/input, 2488] 
split level 175: [/input, 3284] 
split level 176: [/input, 2193] 
split level 177: [/input, 2273] 
split level 178: [/input, 2226] 
split level 179: [/input, 3303] 
split level 180: [/input-8, 1743] 
split level 181: [/input, 2705] 
split level 182: [/input, 173] 
split level 183: [/input, 2210] 
split level 184: [/input-8, 835] 
split level 185: [/input, 2611] 
split level 186: [/input, 2776] 
split level 187: [/input, 183] 
split level 188: [/input, 3555] 
split level 189: [/input, 2466] 
split level 190: [/input, 2515] 
split level 191: [/input, 1978] 
split level 192: [/input, 2214] 
split level 193: [/input, 2489] 
split level 194: [/input, 2248] 
split level 195: [/input, 2209] 
split level 196: [/input, 482] 
split level 197: [/input, 2517] 
split level 198: [/input, 2521] 
split level 199: [/input, 167] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16962385177612305
10 lb beta sum: 0.0, worst -0.1696162223815918
Time: prepare 0.0112    bound 0.0960    transfer 0.0010    finalize 0.0027    func 0.1135    
Accumulated time: func 0.1658    prepare 0.0214    bound 0.1479    transfer 0.0011    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.26162279) min lb tensor(-0.16961336)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010484695434570312 
BICCOS Cumulative time: 0.010484695434570312
Preprocessing time: 0.00995945930480957 Inference time: 0.00022077560424804688 Add cuts time: 6.890296936035156e-05 Cut analysis time: 0.00023555755615234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16202 (1), -0.16198 (1), -0.16191 (1), -0.16179 (1), -0.16161 (1), -0.16152 (1), -0.16143 (1), -0.16133 (1), -0.16131 (1), -0.16121 (1), -0.16121 (1), -0.16063 (1), -0.16056 (1), -0.15996 (1), -0.15976 (1), -0.15969 (1), -0.15870 (1), -0.15793 (1), -0.15793 (1), -0.15643 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5136    set_bounds 0.0086    solve 0.1136    add 0.0696    
Accumulated time: pickout 0.0003    decision 0.5136    set_bounds 0.0086    solve 0.1136    add 0.0696    
Current (lb-rhs): -0.16202235221862793
50 domains visited
Cumulative time: 0.7735800743103027

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 42] [/input-12, 64] 
split level 2: [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] 
split level 3: [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13135385513305664
10 lb beta sum: 0.688862144947052, worst -0.060483694076538086
Time: prepare 0.0072    bound 0.1156    transfer 0.0007    finalize 0.0024    func 0.1285    
Accumulated time: func 0.2943    prepare 0.0288    bound 0.2634    transfer 0.0018    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.38817406) min lb tensor(-0.06029934)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.02638101577758789 
BICCOS Cumulative time: 0.0368657112121582
Preprocessing time: 0.01143193244934082 Inference time: 0.009764671325683594 Add cuts time: 0.00499415397644043 Cut analysis time: 0.00019025802612304688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0119    solve 0.1286    add 0.0154    
Accumulated time: pickout 0.0014    decision 0.5332    set_bounds 0.0205    solve 0.2421    add 0.0850    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  4.32353556e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.08534262e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  4.34408009e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.11148164e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031603097915649414

all verified at 1th iter
Time: prepare 0.0003    bound 0.0133    transfer 0.0001    finalize 0.0002    func 0.0139    
Accumulated time: func 0.3082    prepare 0.0291    bound 0.2767    transfer 0.0019    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.4497766494751
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.44970655441284
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.44968342781067
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5505 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.84988976, -27.04168510, -32.56347275, -33.70067215, -33.15383530,
         -34.10073471, -32.55872345, -32.39547729, -30.81136703, -29.74110985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 597] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 597] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 252] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.47295213, 3.67134190, 4.79961014, 4.17743587, 5.03716660, 3.67931032,
         3.29446173, 2.28837848, 1.78437126]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0473 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1300]; unstable size 1300; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 386, 1, 1300] with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1300] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1300] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [385]; unstable size 385; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 385] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 385] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.83590496, -0.36369705, -0.81580961, -0.21350288, -1.76645565,
         -0.45421165,  1.06313860,  0.19591486,  0.91548681]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199],
         [-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31268501,  1.78907394,  0.52776527,  0.10321236, -0.60608101,
           0.84778404]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0512 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.02009583, -25.62828255, -18.56137657, -22.16949654, -20.18937492,
         -22.90802956, -21.61422729, -24.61019516, -20.71578217, -25.30768013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [637]; unstable size 637; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 637] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 637] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 637] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 151] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.60369205, 1.05985808, 4.44430256, 2.54081893, 5.11138248, 3.84395027,
         6.83230686, 2.69353676, 7.41863632]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0481 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.94017601, -28.86633301, -23.06001091, -21.31272125, -22.19619942,
         -20.90770912, -22.69350815, -22.96586227, -29.16728783, -27.83672142]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [615]; unstable size 615; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 323, 1, 615] with unstable size 322 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 615] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 615] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [322]; unstable size 322; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 322] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 322] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51382399, 5.73519135, 0.91068625, 0.11511421, 0.03012872, 0.51855588,
         1.05246663, 6.62892151, 5.18492365]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0561 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [580]; unstable size 580; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 580] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 580] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 580] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 183] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.55080438,  1.90782428, -1.05542922, -0.76249844, -0.39093399,
         -0.77109873, -0.48512778,  2.12622023, -0.21663570]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083],
         [-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35001183, -0.36779404, -0.14274788,  0.46432114, -0.00468636,
           0.60235405,  1.08270454]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0155 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0599 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 631] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 631] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 276] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26207805,  2.67205715, -0.09352732,  0.10025716,  0.83907413,
          0.73086953,  0.70621514,  0.08608764,  2.33385897]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.73it/s]100%|██████████| 1/1 [00:00<00:00,  8.72it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.58753777, -25.74412537, -22.30705833, -22.74228668, -23.48993874,
          -23.62050629, -23.39388275, -23.13651657, -21.69568634, -25.29735374]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.61137199]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1176 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.14977741241455
alpha/beta optimization time: 1.2075505256652832
initial alpha-crown bounds: tensor([[ 2.29125190,  2.73074389, -0.03381777,  0.15643954,  0.90439415,
          0.79678774,  0.77209949,  0.15606049,  2.37581801]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03381776809692383
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62048935890198
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62045073509216
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62042498588562
Verifying property 2 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03381777]], device='cuda:0') need to verify.
Model prediction is: tensor([-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
        -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03381777]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 631
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 271
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 917
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010704994201660156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0338132381439209
10 lb beta sum: 0.0, worst -0.03382539749145508
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 50] 
split level 6: [/input-8, 1963] 
split level 7: [/input-8, 1947] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1718] 
split level 10: [/input-8, 1693] 
split level 11: [/input-8, 370] 
split level 12: [/input-8, 923] 
split level 13: [/input-8, 371] 
split level 14: [/input-8, 1956] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 938] 
split level 17: [/input-8, 299] 
split level 18: [/input-8, 454] 
split level 19: [/input-8, 365] 
split level 20: [/input-8, 362] 
split level 21: [/input-8, 1710] 
split level 22: [/input-8, 1656] 
split level 23: [/input-8, 909] 
split level 24: [/input-8, 1970] 
split level 25: [/input-8, 291] 
split level 26: [/input-8, 795] 
split level 27: [/input-8, 1644] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1636] 
split level 30: [/input-8, 617] 
split level 31: [/input-8, 908] 
split level 32: [/input-8, 1840] 
split level 33: [/input-8, 587] 
split level 34: [/input-8, 186] 
split level 35: [/input-8, 586] 
split level 36: [/input-8, 1640] 
split level 37: [/input-8, 785] 
split level 38: [/input-8, 604] 
split level 39: [/input-8, 778] 
split level 40: [/input, 3544] 
split level 41: [/input-8, 1684] 
split level 42: [/input-8, 905] 
split level 43: [/input, 2423] 
split level 44: [/input-8, 354] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1648] 
split level 47: [/input, 2231] 
split level 48: [/input-8, 781] 
split level 49: [/input-8, 1971] 
split level 50: [/input-8, 1631] 
split level 51: [/input-8, 918] 
split level 52: [/input-8, 178] 
split level 53: [/input-8, 1639] 
split level 54: [/input-8, 1651] 
split level 55: [/input-8, 1295] 
split level 56: [/input, 2023] 
split level 57: [/input-8, 1698] 
split level 58: [/input-8, 218] 
split level 59: [/input, 3541] 
split level 60: [/input-8, 580] 
split level 61: [/input-8, 1627] 
split level 62: [/input, 469] 
split level 63: [/input-8, 346] 
split level 64: [/input-8, 1284] 
split level 65: [/input, 2153] 
split level 66: [/input, 2472] 
split level 67: [/input, 3542] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2442] 
split level 70: [/input-8, 172] 
split level 71: [/input-8, 1781] 
split level 72: [/input, 2201] 
split level 73: [/input, 2457] 
split level 74: [/input, 2370] 
split level 75: [/input, 2024] 
split level 76: [/input, 488] 
split level 77: [/input, 2421] 
split level 78: [/input-8, 222] 
split level 79: [/input-8, 337] 
split level 80: [/input, 2022] 
split level 81: [/input, 754] 
split level 82: [/input, 2021] 
split level 83: [/input, 3545] 
split level 84: [/input, 2181] 
split level 85: [/input-8, 1150] 
split level 86: [/input-8, 1706] 
split level 87: [/input, 1415] 
split level 88: [/input-8, 910] 
split level 89: [/input, 2488] 
split level 90: [/input, 981] 
split level 91: [/input, 487] 
split level 92: [/input, 2246] 
split level 93: [/input-8, 907] 
split level 94: [/input-8, 1824] 
split level 95: [/input, 2518] 
split level 96: [/input-8, 1617] 
split level 97: [/input, 696] 
split level 98: [/input, 2154] 
split level 99: [/input, 2473] 
split level 100: [/input-8, 48] 
split level 101: [/input-8, 997] 
split level 102: [/input, 2282] 
split level 103: [/input, 3540] 
split level 104: [/input-8, 1974] 
split level 105: [/input, 998] 
split level 106: [/input-8, 1587] 
split level 107: [/input-8, 42] 
split level 108: [/input, 2026] 
split level 109: [/input, 2538] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 1773] 
split level 112: [/input, 2489] 
split level 113: [/input, 2114] 
split level 114: [/input-8, 213] 
split level 115: [/input-8, 1607] 
split level 116: [/input-8, 233] 
split level 117: [/input-8, 776] 
split level 118: [/input, 2121] 
split level 119: [/input, 985] 
split level 120: [/input, 3557] 
split level 121: [/input, 4066] 
split level 122: [/input-8, 211] 
split level 123: [/input-8, 1034] 
split level 124: [/input, 2263] 
split level 125: [/input-8, 330] 
split level 126: [/input, 2264] 
split level 127: [/input, 486] 
split level 128: [/input, 2075] 
split level 129: [/input, 3558] 
split level 130: [/input-8, 219] 
split level 131: [/input, 2265] 
split level 132: [/input, 2533] 
split level 133: [/input, 2325] 
split level 134: [/input, 2451] 
split level 135: [/input-8, 1736] 
split level 136: [/input, 707] 
split level 137: [/input, 2435] 
split level 138: [/input, 738] 
split level 139: [/input, 2525] 
split level 140: [/input, 3973] 
split level 141: [/input, 2261] 
split level 142: [/input, 3371] 
split level 143: [/input-8, 1816] 
split level 144: [/input, 2248] 
split level 145: [/input, 4006] 
split level 146: [/input, 2347] 
split level 147: [/input-8, 217] 
split level 148: [/input, 812] 
split level 149: [/input, 2025] 
split level 150: [/input-8, 215] 
split level 151: [/input, 2163] 
split level 152: [/input-8, 339] 
split level 153: [/input, 2369] 
split level 154: [/input, 485] 
split level 155: [/input, 2280] 
split level 156: [/input, 2113] 
split level 157: [/input, 299] 
split level 158: [/input-8, 238] 
split level 159: [/input, 2382] 
split level 160: [/input-8, 253] 
split level 161: [/input, 2353] 
split level 162: [/input, 3422] 
split level 163: [/input, 1000] 
split level 164: [/input, 3361] 
split level 165: [/input-8, 290] 
split level 166: [/input, 952] 
split level 167: [/input, 489] 
split level 168: [/input-8, 197] 
split level 169: [/input, 2536] 
split level 170: [/input, 3395] 
split level 171: [/input, 986] 
split level 172: [/input, 2505] 
split level 173: [/input, 2552] 
split level 174: [/input, 2281] 
split level 175: [/input, 4082] 
split level 176: [/input, 1977] 
split level 177: [/input, 3882] 
split level 178: [/input, 1976] 
split level 179: [/input, 3559] 
split level 180: [/input-8, 225] 
split level 181: [/input-8, 1254] 
split level 182: [/input, 3942] 
split level 183: [/input, 2554] 
split level 184: [/input, 3372] 
split level 185: [/input, 2278] 
split level 186: [/input, 2125] 
split level 187: [/input, 2092] 
split level 188: [/input, 2515] 
split level 189: [/input, 2551] 
split level 190: [/input-8, 1848] 
split level 191: [/input, 3344] 
split level 192: [/input, 2788] 
split level 193: [/input, 2277] 
split level 194: [/input, 2126] 
split level 195: [/input, 2499] 
split level 196: [/input, 2279] 
split level 197: [/input, 2549] 
split level 198: [/input-8, 410] 
split level 199: [/input, 2227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03361153602600098
10 lb beta sum: 0.0, worst -0.03361082077026367
Time: prepare 0.0112    bound 0.0976    transfer 0.0010    finalize 0.0027    func 0.1151    
Accumulated time: func 0.1678    prepare 0.0213    bound 0.1498    transfer 0.0011    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.16245198) min lb tensor(-0.03360319)
Number of Verified Splits: 24 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011828184127807617 
BICCOS Cumulative time: 0.011828184127807617
Preprocessing time: 0.010100603103637695 Inference time: 0.0009157657623291016 Add cuts time: 0.0002818107604980469 Cut analysis time: 0.0005300045013427734
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5143    set_bounds 0.0090    solve 0.1152    add 0.0098    
Accumulated time: pickout 0.0003    decision 0.5143    set_bounds 0.0090    solve 0.1152    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([4.68400319e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([-1.26117907e-33]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0047914981842041016

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1724    prepare 0.0216    bound 0.1539    transfer 0.0012    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.70676612854004
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.7067060470581
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.70668411254883
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.7066354751587
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.7066159248352
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.70659732818604
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.2934 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.79308891, -23.41397476, -18.82098770, -19.48437309, -18.56243706,
         -19.91847992, -17.07889175, -20.97890472, -23.56008720, -23.37459755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 336, 1, 606] with unstable size 335 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 606] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [335]; unstable size 335; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 335] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 335] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91788816, 3.99140882, 0.67279989, 1.37791431, 0.25162333, 1.69752848,
         2.11260509, 4.47059774, 4.00945711]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0472 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 675] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 675] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 216] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.57993078,  3.15776873,  6.31814718,  3.25631618,  7.08248043,
          6.16690874,  5.13876152, -1.86000657,  3.30038881]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
          -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.01841354]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0501 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [645]; unstable size 645; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 645] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 645] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 645] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 262] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.42895699,  4.10993195, -0.60754895, -0.13815880, -0.32017219,
          1.23225927, -0.67439431,  4.97595882,  2.89095926]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.60it/s]100%|██████████| 1/1 [00:00<00:00,  8.59it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760],
         [-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.78236008, 0.03847885, 0.80645561, 0.76422501]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1192 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.555826187133789
alpha/beta optimization time: 1.188263177871704
initial alpha-crown bounds: tensor([[ 3.51031208,  4.22539425, -0.55174983, -0.12316984, -0.26672733,
          1.27698302, -0.59470588,  5.09362888,  2.98586059]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5947058796882629
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6479136943817
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64787483215332
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64784789085388
Verifying property 2 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55174983]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55174983]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.441375732421875e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5517477989196777
10 lb beta sum: 0.0, worst -0.5517463684082031
Time: prepare 0.0002    bound 0.0859    transfer 0.0001    finalize 0.0001    func 0.0863    
Accumulated time: func 0.0863    prepare 0.0002    bound 0.0859    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 85] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 83] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 7] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 92] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1651] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1963] 
split level 15: [/input-8, 1643] 
split level 16: [/input-8, 1627] 
split level 17: [/input-8, 1652] 
split level 18: [/input-8, 1636] 
split level 19: [/input-8, 227] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 416] 
split level 22: [/input-8, 1691] 
split level 23: [/input-8, 1628] 
split level 24: [/input-12, 71] 
split level 25: [/input-8, 1692] 
split level 26: [/input-8, 844] 
split level 27: [/input-8, 212] 
split level 28: [/input-8, 1644] 
split level 29: [/input-8, 1637] 
split level 30: [/input-8, 218] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 394] 
split level 33: [/input-8, 1946] 
split level 34: [/input-8, 1645] 
split level 35: [/input-8, 419] 
split level 36: [/input-8, 211] 
split level 37: [/input-8, 417] 
split level 38: [/input-8, 1650] 
split level 39: [/input-8, 48] 
split level 40: [/input-8, 828] 
split level 41: [/input-8, 1658] 
split level 42: [/input-8, 1716] 
split level 43: [/input-8, 1661] 
split level 44: [/input-8, 1619] 
split level 45: [/input-8, 1708] 
split level 46: [/input-8, 469] 
split level 47: [/input-8, 57] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 1387] 
split level 50: [/input-8, 1953] 
split level 51: [/input-8, 1653] 
split level 52: [/input-12, 6] 
split level 53: [/input-8, 201] 
split level 54: [/input-8, 205] 
split level 55: [/input-8, 395] 
split level 56: [/input-8, 1669] 
split level 57: [/input-8, 921] 
split level 58: [/input-8, 229] 
split level 59: [/input-8, 1970] 
split level 60: [/input-8, 425] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input-8, 222] 
split level 64: [/input-8, 246] 
split level 65: [/input-8, 186] 
split level 66: [/input-8, 204] 
split level 67: [/input-8, 194] 
split level 68: [/input-8, 253] 
split level 69: [/input-8, 499] 
split level 70: [/input, 2985] 
split level 71: [/input, 89] 
split level 72: [/input-8, 1323] 
split level 73: [/input-8, 1576] 
split level 74: [/input, 2986] 
split level 75: [/input-8, 164] 
split level 76: [/input-8, 214] 
split level 77: [/input-8, 51] 
split level 78: [/input, 2906] 
split level 79: [/input-8, 1673] 
split level 80: [/input-8, 238] 
split level 81: [/input-8, 1662] 
split level 82: [/input-8, 254] 
split level 83: [/input-8, 200] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 349] 
split level 86: [/input-8, 1521] 
split level 87: [/input-12, 56] 
split level 88: [/input-8, 407] 
split level 89: [/input-8, 393] 
split level 90: [/input-8, 424] 
split level 91: [/input-8, 1378] 
split level 92: [/input, 75] 
split level 93: [/input-8, 187] 
split level 94: [/input, 2378] 
split level 95: [/input-8, 41] 
split level 96: [/input-8, 255] 
split level 97: [/input, 1320] 
split level 98: [/input, 2871] 
split level 99: [/input-8, 342] 
split level 100: [/input-8, 129] 
split level 101: [/input-8, 723] 
split level 102: [/input-8, 161] 
split level 103: [/input-8, 1979] 
split level 104: [/input, 138] 
split level 105: [/input, 391] 
split level 106: [/input, 130] 
split level 107: [/input, 2380] 
split level 108: [/input-8, 1370] 
split level 109: [/input-8, 1759] 
split level 110: [/input-8, 714] 
split level 111: [/input-8, 1250] 
split level 112: [/input-8, 223] 
split level 113: [/input-8, 188] 
split level 114: [/input, 1845] 
split level 115: [/input, 3018] 
split level 116: [/input, 104] 
split level 117: [/input-8, 1579] 
split level 118: [/input, 1942] 
split level 119: [/input-8, 171] 
split level 120: [/input-8, 209] 
split level 121: [/input, 1410] 
split level 122: [/input-8, 1362] 
split level 123: [/input-8, 930] 
split level 124: [/input-8, 207] 
split level 125: [/input-8, 61] 
split level 126: [/input-8, 1566] 
split level 127: [/input, 140] 
split level 128: [/input, 41] 
split level 129: [/input-8, 1666] 
split level 130: [/input, 1669] 
split level 131: [/input, 2952] 
split level 132: [/input, 2477] 
split level 133: [/input-8, 1322] 
split level 134: [/input-8, 216] 
split level 135: [/input, 74] 
split level 136: [/input, 2203] 
split level 137: [/input-8, 1159] 
split level 138: [/input-8, 195] 
split level 139: [/input, 2953] 
split level 140: [/input, 2958] 
split level 141: [/input, 1864] 
split level 142: [/input-8, 730] 
split level 143: [/input-8, 1343] 
split level 144: [/input, 732] 
split level 145: [/input, 45] 
split level 146: [/input-8, 245] 
split level 147: [/input, 71] 
split level 148: [/input-8, 196] 
split level 149: [/input, 3541] 
split level 150: [/input, 1305] 
split level 151: [/input, 1879] 
split level 152: [/input, 470] 
split level 153: [/input, 177] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 1665] 
split level 156: [/input-8, 1717] 
split level 157: [/input-8, 198] 
split level 158: [/input, 2156] 
split level 159: [/input, 1483] 
split level 160: [/input, 1827] 
split level 161: [/input, 1953] 
split level 162: [/input, 1022] 
split level 163: [/input, 2397] 
split level 164: [/input, 1878] 
split level 165: [/input, 1910] 
split level 166: [/input, 1925] 
split level 167: [/input, 1338] 
split level 168: [/input, 3527] 
split level 169: [/input, 37] 
split level 170: [/input, 2823] 
split level 171: [/input-8, 199] 
split level 172: [/input-8, 1944] 
split level 173: [/input, 188] 
split level 174: [/input, 1898] 
split level 175: [/input, 1416] 
split level 176: [/input, 360] 
split level 177: [/input, 1064] 
split level 178: [/input, 1146] 
split level 179: [/input, 204] 
split level 180: [/input, 136] 
split level 181: [/input, 2493] 
split level 182: [/input, 1894] 
split level 183: [/input, 2758] 
split level 184: [/input, 203] 
split level 185: [/input, 1882] 
split level 186: [/input, 3019] 
split level 187: [/input, 2824] 
split level 188: [/input, 1922] 
split level 189: [/input, 2674] 
split level 190: [/input, 1952] 
split level 191: [/input, 748] 
split level 192: [/input, 1032] 
split level 193: [/input, 1905] 
split level 194: [/input, 1400] 
split level 195: [/input, 1080] 
split level 196: [/input, 216] 
split level 197: [/input, 2215] 
split level 198: [/input, 1130] 
split level 199: [/input, 1846] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5515989065170288
10 lb beta sum: 0.0, worst -0.551600456237793
Time: prepare 0.0112    bound 0.0967    transfer 0.0010    finalize 0.0027    func 0.1141    
Accumulated time: func 0.2005    prepare 0.0214    bound 0.1826    transfer 0.0011    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.19855744) min lb tensor(-0.55159783)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010286092758178711 
BICCOS Cumulative time: 0.010286092758178711
Preprocessing time: 0.009984254837036133 Inference time: 7.295608520507812e-05 Add cuts time: 3.4332275390625e-05 Cut analysis time: 0.000194549560546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53793 (1), -0.53784 (1), -0.53751 (1), -0.53739 (1), -0.53731 (1), -0.53662 (1), -0.53626 (1), -0.53596 (1), -0.53518 (1), -0.53447 (1), -0.53445 (1), -0.53430 (1), -0.53380 (1), -0.53343 (1), -0.53274 (1), -0.53200 (1), -0.53140 (1), -0.53086 (1), -0.53082 (1), -0.53068 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5136    set_bounds 0.0093    solve 0.1142    add 0.0677    
Accumulated time: pickout 0.0003    decision 0.5136    set_bounds 0.0093    solve 0.1142    add 0.0677    
Current (lb-rhs): -0.5379335880279541
50 domains visited
Cumulative time: 0.8069980144500732

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 72] [/input-12, 53] [/input-12, 53] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5343048572540283
10 lb beta sum: 0.1711643934249878, worst -0.5342094898223877
Time: prepare 0.0067    bound 0.1130    transfer 0.0007    finalize 0.0022    func 0.1252    
Accumulated time: func 0.3256    prepare 0.0283    bound 0.2956    transfer 0.0018    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.35147232) min lb tensor(-0.53420091)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01450347900390625 
BICCOS Cumulative time: 0.02478957176208496
Preprocessing time: 0.01143956184387207 Inference time: 0.001756906509399414 Add cuts time: 0.001094818115234375 Cut analysis time: 0.00021219253540039062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26691 (2), -0.26648 (2), -0.26535 (2), -0.26480 (2), -0.26434 (2), -0.26118 (2), -0.25831 (2), -0.25826 (2), -0.25797 (2), -0.25592 (2), -0.25321 (2), -0.25115 (2), -0.25048 (2), -0.24998 (2), -0.24935 (2), -0.24767 (2), -0.24742 (2), -0.24734 (2), -0.24730 (2), -0.24688 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0125    solve 0.1252    add 0.0768    
Accumulated time: pickout 0.0013    decision 0.5330    set_bounds 0.0218    solve 0.2395    add 0.1445    
Current (lb-rhs): -0.2669094204902649
100 domains visited
Cumulative time: 1.0566306114196777

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 53] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 72] [/input-12, 72] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.233876571059227, worst -0.2669094204902649
10 lb beta sum: 0.233876571059227, worst -0.2670937180519104
Time: prepare 0.0155    bound 0.1143    transfer 0.0008    finalize 0.0020    func 0.1358    
Accumulated time: func 0.4614    prepare 0.0441    bound 0.4099    transfer 0.0025    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.31539437) min lb tensor(-0.26520962)
Number of Verified Splits: 65 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.01577305793762207 
BICCOS Cumulative time: 0.04056262969970703
Preprocessing time: 0.011397600173950195 Inference time: 0.002776622772216797 Add cuts time: 0.0013077259063720703 Cut analysis time: 0.0002911090850830078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05860 (3), -0.05851 (3), -0.05511 (3), -0.05446 (3), -0.05428 (3), -0.05278 (3), -0.04822 (3), -0.04545 (3), -0.04481 (3), -0.04472 (3), -0.04460 (3), -0.04453 (3), -0.04440 (3), -0.04354 (3), -0.04347 (3), -0.04311 (3), -0.04272 (3), -0.04108 (3), -0.04094 (3), -0.04052 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0190    set_bounds 0.0150    solve 0.1359    add 0.0837    
Accumulated time: pickout 0.0022    decision 0.5520    set_bounds 0.0368    solve 0.3753    add 0.2282    
Current (lb-rhs): -0.05859808623790741
150 domains visited
Cumulative time: 1.327195167541504

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 7] [/input-12, 83] [/input-12, 7] [/input-12, 83] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.058597564697265625
10 lb beta sum: 0.08440738171339035, worst -0.30580276250839233
Time: prepare 0.0055    bound 0.1142    transfer 0.0007    finalize 0.0016    func 0.1246    
Accumulated time: func 0.5860    prepare 0.0498    bound 0.5241    transfer 0.0032    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.40299761) min lb tensor(-0.04527950)
Number of Verified Splits: 368 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0350642204284668 
BICCOS Cumulative time: 0.07562685012817383
Preprocessing time: 0.011179447174072266 Inference time: 0.018397808074951172 Add cuts time: 0.0050811767578125 Cut analysis time: 0.0004057884216308594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0196    set_bounds 0.0154    solve 0.1247    add 0.0221    
Accumulated time: pickout 0.0031    decision 0.5716    set_bounds 0.0522    solve 0.5000    add 0.2503    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([8.58410010e-11, 1.36681288e-01, 1.09197900e-01, 4.07759488e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.58410010e-11, 1.36681288e-01, 1.09197900e-01, 1.26600284e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([8.58410010e-11, 1.36681288e-01, 1.41220972e-01, 4.13896918e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.58410010e-11, 1.36681288e-01, 1.41220972e-01, 5.56126311e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([8.58410010e-11, 9.18749571e-02, 5.17962426e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([8.58410010e-11, 9.18749571e-02, 1.55068919e-01, 3.99764895e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([8.58410010e-11, 9.18749571e-02, 1.55068919e-01, 7.79221803e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([6.56882326e-11, 6.91658378e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([6.56882326e-11, 4.25569853e-03]), tensor([0, 1]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4491678476333618
10 lb beta sum: 0.1761602908372879, worst -0.4485132694244385
Time: prepare 0.0004    bound 0.1111    transfer 0.0001    finalize 0.0002    func 0.1119    
Accumulated time: func 0.6979    prepare 0.0502    bound 0.6352    transfer 0.0034    finalize 0.0089    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 53] 
split level 1: [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 17] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 83] 
split level 5: [/input-12, 4] [/input-12, 7] 
split level 6: [/input-12, 92] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2052432745695114, worst -0.14022046327590942
10 lb beta sum: 0.20555423200130463, worst -0.11078262329101562
Time: prepare 0.0095    bound 0.1112    transfer 0.0011    finalize 0.0012    func 0.1247    
Accumulated time: func 0.8227    prepare 0.0601    bound 0.7464    transfer 0.0045    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.64063978) min lb tensor(-0.11029446)
Number of Verified Splits: 249 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.21021518111228943, worst -0.34843873977661133
10 lb beta sum: 0.345706045627594, worst -0.40309450030326843
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 7
#cuts 4-6: 19
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.40751218795776367 
BICCOS Cumulative time: 0.4831390380859375
Preprocessing time: 0.006326913833618164 Inference time: 0.3919563293457031 Add cuts time: 0.0074863433837890625 Cut analysis time: 0.0017426013946533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11029 (7), -0.09267 (7), -0.05665 (7), -0.05055 (7), -0.02000 (7), -0.01265 (7), -0.01231 (7), 
Length of domains: 7
Time: pickout 0.0005    decision 0.0196    set_bounds 0.0185    solve 0.1248    add 0.0009    
Accumulated time: pickout 0.0035    decision 0.5912    set_bounds 0.0708    solve 0.6248    add 0.2512    
Current (lb-rhs): -0.11029446125030518
157 domains visited
Cumulative time: 2.250530481338501

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 1: [/input-12, 92] [/input-8, 1683] [/input-12, 92] [/input-8, 1683] [/input-8, 1963] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 71] [/input-8, 1636] [/input-8, 1963] [/input-12, 92] [/input-12, 92] [/input-8, 1636] [/input-8, 1691] 
split level 3: [/input-8, 1627] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1692] 
split level 4: [/input-8, 419] [/input-8, 1644] [/input-8, 1946] [/input-8, 1636] [/input-8, 1946] [/input-8, 1644] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06443649530410767
10 lb beta sum: 0.0, worst -0.06370872259140015
Time: prepare 0.0043    bound 0.1175    transfer 0.0014    finalize 0.0015    func 0.1262    
Accumulated time: func 0.9489    prepare 0.0647    bound 0.8640    transfer 0.0059    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.17694855) min lb tensor(-0.06337982)
Number of Verified Splits: 185 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.02682042121887207 
BICCOS Cumulative time: 0.5099594593048096
Preprocessing time: 0.006721019744873047 Inference time: 0.017348527908325195 Add cuts time: 0.002121448516845703 Cut analysis time: 0.000629425048828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06338 (12), -0.06072 (12), -0.05041 (12), -0.04874 (12), -0.04795 (12), -0.04782 (12), -0.04763 (12), -0.04704 (12), -0.04337 (12), -0.03798 (12), -0.03760 (12), -0.03621 (12), -0.03604 (12), -0.03556 (12), -0.03482 (12), -0.03452 (12), -0.03417 (12), -0.03015 (12), -0.03003 (12), -0.02945 (12), 
Length of domains: 39
Time: pickout 0.0012    decision 0.0180    set_bounds 0.0179    solve 0.1263    add 0.0009    
Accumulated time: pickout 0.0047    decision 0.6092    set_bounds 0.0886    solve 0.7511    add 0.2521    
Current (lb-rhs): -0.06337982416152954
196 domains visited
Cumulative time: 2.442612648010254

BaB round 3
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1683] [/input-8, 1692] [/input-8, 1692] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1692] 
split level 1: [/input-8, 1627] [/input-12, 71] [/input-12, 92] [/input-12, 71] [/input-12, 71] [/input-8, 1627] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1627] 
split level 2: [/input-12, 71] [/input-8, 930] [/input-8, 1963] [/input-8, 1636] [/input-8, 930] [/input-12, 71] [/input-8, 930] [/input-8, 1636] [/input-8, 930] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0430566668510437
10 lb beta sum: 0.0, worst -0.04264289140701294
Time: prepare 0.0061    bound 0.1185    transfer 0.0009    finalize 0.0023    func 0.1299    
Accumulated time: func 1.0787    prepare 0.0711    bound 0.9824    transfer 0.0068    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.06310195) min lb tensor(-0.04242593)
Number of Verified Splits: 219 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03613734245300293 
BICCOS Cumulative time: 0.5460968017578125
Preprocessing time: 0.009017229080200195 Inference time: 0.02480030059814453 Add cuts time: 0.0017232894897460938 Cut analysis time: 0.0005965232849121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04243 (15), -0.03924 (15), -0.03607 (15), -0.03477 (15), -0.03304 (15), -0.03160 (15), -0.02957 (15), -0.02863 (15), -0.02716 (15), -0.02666 (15), -0.02664 (15), -0.02623 (15), -0.02600 (15), -0.02347 (15), -0.02299 (15), -0.02242 (15), -0.02235 (15), -0.02171 (15), -0.02086 (15), -0.02065 (15), 
Length of domains: 93
Time: pickout 0.0014    decision 0.0155    set_bounds 0.0250    solve 0.1299    add 0.0011    
Accumulated time: pickout 0.0061    decision 0.6247    set_bounds 0.1137    solve 0.8810    add 0.2532    
Current (lb-rhs): -0.04242593050003052
289 domains visited
Cumulative time: 2.6529345512390137

BaB round 4
batch: 93
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1627] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] 
split level 1: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 417] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03145080804824829
10 lb beta sum: 0.0644829124212265, worst -0.03121161460876465
Time: prepare 0.0070    bound 0.1321    transfer 0.0021    finalize 0.0017    func 0.1453    
Accumulated time: func 1.2240    prepare 0.0783    bound 1.1146    transfer 0.0088    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.28976518) min lb tensor(-0.03108716)
Number of Verified Splits: 313 of 372
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 16
#cuts 4-6: 1
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.051753997802734375 
BICCOS Cumulative time: 0.5978507995605469
Preprocessing time: 0.010525941848754883 Inference time: 0.03824663162231445 Add cuts time: 0.00234222412109375 Cut analysis time: 0.0006392002105712891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03109 (17), -0.02748 (17), -0.02718 (17), -0.02407 (17), -0.02353 (17), -0.02277 (17), -0.01801 (17), -0.01795 (17), -0.01667 (17), -0.01479 (17), -0.01457 (17), -0.01433 (17), -0.01426 (17), -0.01400 (17), -0.01258 (17), -0.01208 (17), -0.01181 (17), -0.01137 (17), -0.01121 (17), -0.01116 (17), 
Length of domains: 59
Time: pickout 0.0021    decision 0.0189    set_bounds 0.0168    solve 0.1461    add 0.0010    
Accumulated time: pickout 0.0083    decision 0.6436    set_bounds 0.1305    solve 1.0271    add 0.2542    
Current (lb-rhs): -0.031087160110473633
348 domains visited
Cumulative time: 2.8909974098205566

BaB round 5
batch: 59
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 921] [/input-8, 1708] 
split level 1: [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 419] [/input-8, 1619] [/input-8, 1619] [/input-8, 1708] [/input-8, 1619] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018959760665893555
10 lb beta sum: 0.09447357803583145, worst -0.01592162251472473
Time: prepare 0.0046    bound 0.1321    transfer 0.0005    finalize 0.0013    func 0.1401    
Accumulated time: func 1.3641    prepare 0.0831    bound 1.2467    transfer 0.0093    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.47063211) min lb tensor(-0.01584134)
Number of Verified Splits: 225 of 236
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 1
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03841757774353027 
BICCOS Cumulative time: 0.6362683773040771
Preprocessing time: 0.00701904296875 Inference time: 0.02935194969177246 Add cuts time: 0.001405954360961914 Cut analysis time: 0.0006406307220458984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01584 (19), -0.01510 (19), -0.01409 (19), -0.01335 (19), -0.01218 (19), -0.01131 (19), -0.00997 (19), -0.00909 (19), -0.00249 (19), -0.00176 (19), -0.00060 (19), 
Length of domains: 11
Time: pickout 0.0018    decision 0.0163    set_bounds 0.0108    solve 0.1402    add 0.0008    
Accumulated time: pickout 0.0100    decision 0.6599    set_bounds 0.1413    solve 1.1672    add 0.2549    
Current (lb-rhs): -0.01584133505821228
359 domains visited
Cumulative time: 3.1004860401153564

BaB round 6
batch: 11
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] 
split level 1: [/input-8, 1644] [/input-8, 1953] [/input-8, 419] [/input-8, 1644] [/input-8, 419] [/input-8, 1953] [/input-8, 1953] [/input-8, 419] [/input-8, 1644] [/input-8, 419] 
split level 2: [/input-8, 1953] [/input-8, 1644] [/input-8, 1628] [/input-8, 419] [/input-8, 1953] [/input-8, 1628] [/input-8, 1644] [/input-8, 1953] [/input-8, 419] [/input-8, 1953] 
split level 3: [/input-8, 419] [/input-8, 419] [/input-8, 417] [/input-8, 1953] [/input-8, 1644] [/input-8, 417] [/input-8, 419] [/input-8, 417] [/input-8, 1953] [/input-8, 1644] 
split level 4: [/input-8, 417] [/input-8, 417] [/input-8, 1644] [/input-8, 417] [/input-8, 417] [/input-8, 1644] [/input-8, 417] [/input-8, 1644] [/input-8, 417] [/input-8, 417] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.002467811107635498

all verified at 0th iter
Time: prepare 0.0065    bound 0.0049    transfer 0.0010    finalize 0.0016    func 0.0163    
Accumulated time: func 1.3804    prepare 0.0899    bound 1.2516    transfer 0.0104    finalize 0.0184    
all_split False
======================Cut inference begins======================
max lb tensor(0.05130643) min lb tensor(0.00246781)
Number of Verified Splits: 352 of 352
No cut inferred: All or none verified.
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 1
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.009753942489624023 
BICCOS Cumulative time: 0.6460223197937012
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0185    set_bounds 0.0226    solve 0.0164    add 0.0001    
Accumulated time: pickout 0.0111    decision 0.6784    set_bounds 0.1638    solve 1.1836    add 0.2550    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
359 domains visited
Cumulative time: 3.170076847076416


Properties batch 3, size 1
Remaining timeout: 195.30314111709595
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12316984]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12316984]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.322166442871094e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12316906452178955
10 lb beta sum: 0.0, worst -0.12317246198654175
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    func 0.0519    
Accumulated time: func 0.0519    prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 7] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 49] 
split level 10: [/input-12, 4] 
split level 11: [/input-12, 57] 
split level 12: [/input-8, 1098] 
split level 13: [/input-12, 92] 
split level 14: [/input-12, 53] 
split level 15: [/input-12, 71] 
split level 16: [/input-8, 1683] 
split level 17: [/input-8, 395] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 416] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 227] 
split level 24: [/input-8, 394] 
split level 25: [/input-8, 406] 
split level 26: [/input-8, 132] 
split level 27: [/input-8, 417] 
split level 28: [/input-8, 714] 
split level 29: [/input-8, 723] 
split level 30: [/input-8, 211] 
split level 31: [/input-8, 629] 
split level 32: [/input-8, 425] 
split level 33: [/input-8, 393] 
split level 34: [/input-8, 1673] 
split level 35: [/input, 3099] 
split level 36: [/input-8, 419] 
split level 37: [/input-8, 1665] 
split level 38: [/input-8, 1323] 
split level 39: [/input-8, 1692] 
split level 40: [/input-12, 20] 
split level 41: [/input-8, 78] 
split level 42: [/input-8, 1666] 
split level 43: [/input-8, 61] 
split level 44: [/input-8, 1276] 
split level 45: [/input-8, 716] 
split level 46: [/input-8, 613] 
split level 47: [/input-8, 627] 
split level 48: [/input-8, 1697] 
split level 49: [/input-8, 1946] 
split level 50: [/input-8, 142] 
split level 51: [/input-8, 1576] 
split level 52: [/input, 1416] 
split level 53: [/input-8, 2034] 
split level 54: [/input, 1374] 
split level 55: [/input-8, 2028] 
split level 56: [/input, 1448] 
split level 57: [/input-8, 1730] 
split level 58: [/input-8, 1982] 
split level 59: [/input-8, 434] 
split level 60: [/input-8, 48] 
split level 61: [/input-8, 129] 
split level 62: [/input-8, 1084] 
split level 63: [/input-8, 1736] 
split level 64: [/input, 1879] 
split level 65: [/input-8, 844] 
split level 66: [/input-8, 1273] 
split level 67: [/input-8, 57] 
split level 68: [/input, 1400] 
split level 69: [/input-8, 1322] 
split level 70: [/input, 130] 
split level 71: [/input-8, 218] 
split level 72: [/input-8, 407] 
split level 73: [/input, 2269] 
split level 74: [/input, 1410] 
split level 75: [/input, 2622] 
split level 76: [/input-8, 1987] 
split level 77: [/input, 2796] 
split level 78: [/input-8, 1708] 
split level 79: [/input-8, 1157] 
split level 80: [/input-8, 456] 
split level 81: [/input-8, 1082] 
split level 82: [/input, 1864] 
split level 83: [/input-8, 1088] 
split level 84: [/input-8, 1159] 
split level 85: [/input-8, 398] 
split level 86: [/input, 812] 
split level 87: [/input, 2674] 
split level 88: [/input, 2670] 
split level 89: [/input, 421] 
split level 90: [/input, 2587] 
split level 91: [/input, 2952] 
split level 92: [/input, 1878] 
split level 93: [/input, 34] 
split level 94: [/input, 1563] 
split level 95: [/input-8, 1081] 
split level 96: [/input, 2638] 
split level 97: [/input, 1942] 
split level 98: [/input, 2779] 
split level 99: [/input, 1898] 
split level 100: [/input-8, 1275] 
split level 101: [/input, 2689] 
split level 102: [/input, 2218] 
split level 103: [/input, 2184] 
split level 104: [/input, 136] 
split level 105: [/input-8, 1759] 
split level 106: [/input, 788] 
split level 107: [/input, 1438] 
split level 108: [/input, 813] 
split level 109: [/input, 2750] 
split level 110: [/input, 119] 
split level 111: [/input, 3230] 
split level 112: [/input, 2685] 
split level 113: [/input, 1508] 
split level 114: [/input-8, 267] 
split level 115: [/input, 2697] 
split level 116: [/input-8, 229] 
split level 117: [/input-8, 424] 
split level 118: [/input, 152] 
split level 119: [/input, 221] 
split level 120: [/input, 2778] 
split level 121: [/input-8, 2038] 
split level 122: [/input, 1507] 
split level 123: [/input, 2871] 
split level 124: [/input, 1422] 
split level 125: [/input, 1450] 
split level 126: [/input, 2777] 
split level 127: [/input, 619] 
split level 128: [/input, 1064] 
split level 129: [/input, 2906] 
split level 130: [/input, 2797] 
split level 131: [/input, 2540] 
split level 132: [/input, 2932] 
split level 133: [/input, 228] 
split level 134: [/input-8, 808] 
split level 135: [/input, 1164] 
split level 136: [/input-8, 204] 
split level 137: [/input, 134] 
split level 138: [/input, 2794] 
split level 139: [/input, 786] 
split level 140: [/input, 220] 
split level 141: [/input, 2746] 
split level 142: [/input, 790] 
split level 143: [/input, 3527] 
split level 144: [/input, 2232] 
split level 145: [/input, 153] 
split level 146: [/input, 2980] 
split level 147: [/input-8, 1716] 
split level 148: [/input, 2732] 
split level 149: [/input, 1130] 
split level 150: [/input, 1894] 
split level 151: [/input, 2765] 
split level 152: [/input, 1925] 
split level 153: [/input, 1469] 
split level 154: [/input, 1882] 
split level 155: [/input, 216] 
split level 156: [/input, 1483] 
split level 157: [/input, 1862] 
split level 158: [/input, 2456] 
split level 159: [/input, 987] 
split level 160: [/input, 2747] 
split level 161: [/input, 2763] 
split level 162: [/input, 237] 
split level 163: [/input, 3149] 
split level 164: [/input-8, 481] 
split level 165: [/input, 2264] 
split level 166: [/input, 3973] 
split level 167: [/input-8, 143] 
split level 168: [/input, 2715] 
split level 169: [/input-8, 612] 
split level 170: [/input, 2251] 
split level 171: [/input, 893] 
split level 172: [/input, 305] 
split level 173: [/input, 2760] 
split level 174: [/input, 203] 
split level 175: [/input, 2705] 
split level 176: [/input, 2798] 
split level 177: [/input, 1146] 
split level 178: [/input, 177] 
split level 179: [/input, 1899] 
split level 180: [/input, 238] 
split level 181: [/input, 148] 
split level 182: [/input, 2698] 
split level 183: [/input, 2776] 
split level 184: [/input, 179] 
split level 185: [/input, 2234] 
split level 186: [/input, 2781] 
split level 187: [/input-8, 1953] 
split level 188: [/input-8, 368] 
split level 189: [/input, 1846] 
split level 190: [/input, 37] 
split level 191: [/input, 3013] 
split level 192: [/input, 2266] 
split level 193: [/input, 142] 
split level 194: [/input-8, 1662] 
split level 195: [/input, 49] 
split level 196: [/input, 1470] 
split level 197: [/input, 1490] 
split level 198: [/input-8, 1344] 
split level 199: [/input, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1231381893157959
10 lb beta sum: 0.0, worst -0.123135507106781
Time: prepare 0.0112    bound 0.0955    transfer 0.0009    finalize 0.0026    func 0.1129    
Accumulated time: func 0.1647    prepare 0.0209    bound 0.1470    transfer 0.0010    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03540307) min lb tensor(-0.12313414)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009891271591186523 
BICCOS Cumulative time: 0.009891271591186523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11944 (1), -0.11921 (1), -0.11918 (1), -0.11910 (1), -0.11884 (1), -0.11875 (1), -0.11855 (1), -0.11833 (1), -0.11830 (1), -0.11821 (1), -0.11819 (1), -0.11776 (1), -0.11733 (1), -0.11667 (1), -0.11663 (1), -0.11643 (1), -0.11610 (1), -0.11566 (1), -0.11554 (1), -0.11544 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5042    set_bounds 0.0084    solve 0.1129    add 0.0664    
Accumulated time: pickout 0.0003    decision 0.5042    set_bounds 0.0084    solve 0.1129    add 0.0664    
Current (lb-rhs): -0.11944341659545898
50 domains visited
Cumulative time: 0.7587049007415771

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 3: [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11154532432556152
10 lb beta sum: 0.0, worst -0.11152887344360352
Time: prepare 0.0117    bound 0.0940    transfer 0.0007    finalize 0.0021    func 0.1110    
Accumulated time: func 0.2757    prepare 0.0329    bound 0.2409    transfer 0.0017    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.09722227) min lb tensor(-0.11147040)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.01266026496887207 
BICCOS Cumulative time: 0.022551536560058594
Preprocessing time: 0.011364459991455078 Inference time: 0.0003638267517089844 Add cuts time: 0.00011539459228515625 Cut analysis time: 0.0008165836334228516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05446 (2), -0.05433 (2), -0.05411 (2), -0.05385 (2), -0.05308 (2), -0.05264 (2), -0.05237 (2), -0.05200 (2), -0.05193 (2), -0.05190 (2), -0.05183 (2), -0.05165 (2), -0.05139 (2), -0.05124 (2), -0.05101 (2), -0.05075 (2), -0.05074 (2), -0.05032 (2), -0.05031 (2), -0.05023 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0131    solve 0.1110    add 0.0813    
Accumulated time: pickout 0.0013    decision 0.5238    set_bounds 0.0215    solve 0.2240    add 0.1477    
Current (lb-rhs): -0.05445873737335205
100 domains visited
Cumulative time: 0.9977107048034668

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 85] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] 
split level 3: [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04602658748626709
10 lb beta sum: 0.03813401982188225, worst -0.06466803699731827
Time: prepare 0.0063    bound 0.4250    transfer 0.0007    finalize 0.0021    func 0.4373    
Accumulated time: func 0.7131    prepare 0.0395    bound 0.6660    transfer 0.0024    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.03650284) min lb tensor(-0.04320808)
Number of Verified Splits: 125 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.019823551177978516 
BICCOS Cumulative time: 0.04237508773803711
Preprocessing time: 0.01138925552368164 Inference time: 0.006062030792236328 Add cuts time: 0.002003908157348633 Cut analysis time: 0.00036835670471191406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01939 (3), -0.01938 (3), -0.01880 (3), -0.01871 (3), -0.01853 (3), -0.01845 (3), -0.01765 (3), -0.01665 (3), -0.01604 (3), -0.01591 (3), -0.01501 (3), -0.01430 (3), -0.01414 (3), -0.01338 (3), -0.01204 (3), -0.01199 (3), -0.01196 (3), -0.01149 (3), -0.01089 (3), -0.01007 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0202    set_bounds 0.0169    solve 0.4374    add 0.0916    
Accumulated time: pickout 0.0024    decision 0.5440    set_bounds 0.0384    solve 0.6614    add 0.2393    
Current (lb-rhs): -0.019390149042010307
150 domains visited
Cumulative time: 1.5850975513458252

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 6] [/input-12, 34] [/input-12, 34] [/input-12, 83] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 85] [/input-12, 72] [/input-12, 85] [/input-12, 6] [/input-12, 72] 
split level 3: [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019506990909576416
10 lb beta sum: 0.11796390265226364, worst -0.04228409379720688
Time: prepare 0.0064    bound 0.1297    transfer 0.0012    finalize 0.0021    func 0.1420    
Accumulated time: func 0.8550    prepare 0.0462    bound 0.7956    transfer 0.0036    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.03649813) min lb tensor(-0.01602637)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 8
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03354239463806152 
BICCOS Cumulative time: 0.07591748237609863
Preprocessing time: 0.011269092559814453 Inference time: 0.015925168991088867 Add cuts time: 0.005846738815307617 Cut analysis time: 0.0005013942718505859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01124 (4), -0.01013 (4), -0.00988 (4), -0.00973 (4), -0.00938 (4), -0.00913 (4), -0.00859 (4), -0.00826 (4), -0.00795 (4), -0.00787 (4), -0.00764 (4), -0.00712 (4), -0.00694 (4), -0.00689 (4), -0.00658 (4), -0.00651 (4), -0.00647 (4), -0.00643 (4), -0.00641 (4), -0.00610 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0216    set_bounds 0.0151    solve 0.1421    add 0.2506    
Accumulated time: pickout 0.0035    decision 0.5656    set_bounds 0.0535    solve 0.8035    add 0.4899    
Current (lb-rhs): -0.011243711225688457
200 domains visited
Cumulative time: 2.0493409633636475

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 34] [/input-12, 36] [/input-12, 34] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 18] 
split level 2: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 85] 
split level 3: [/input-12, 6] [/input-12, 72] [/input-12, 85] [/input-12, 57] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01219099760055542
10 lb beta sum: 0.2403797060251236, worst -0.0363563597202301
Time: prepare 0.0066    bound 0.1157    transfer 0.0007    finalize 0.0021    func 0.1277    
Accumulated time: func 0.9828    prepare 0.0530    bound 0.9113    transfer 0.0044    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.03790975) min lb tensor(-0.00584504)
Number of Verified Splits: 384 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 9
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.04132556915283203 
BICCOS Cumulative time: 0.11724305152893066
Preprocessing time: 0.011366605758666992 Inference time: 0.019536495208740234 Add cuts time: 0.009363412857055664 Cut analysis time: 0.0010590553283691406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0198    set_bounds 0.0157    solve 0.1278    add 0.0276    
Accumulated time: pickout 0.0047    decision 0.5854    set_bounds 0.0692    solve 0.9313    add 0.5175    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82561974e-10, 1.85123850e-02, 4.00036722e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82561974e-10, 1.85123850e-02, 1.67133380e-02, 3.56992930e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82561974e-10, 1.85123850e-02, 1.67133380e-02, 8.47135670e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.82561974e-10, 1.87054742e-02, 4.04283255e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82561974e-10, 1.87054742e-02, 1.66081060e-02, 3.61138433e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82561974e-10, 1.87054742e-02, 1.66081060e-02, 8.48137029e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([1.]), tensor([0]), tensor([6.55023813e-11]), tensor([0]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12286478281021118
10 lb beta sum: 0.36642852425575256, worst -0.12248140573501587
Time: prepare 0.0004    bound 0.1323    transfer 0.0002    finalize 0.0002    func 0.1331    
Accumulated time: func 1.1159    prepare 0.0534    bound 1.0437    transfer 0.0045    finalize 0.0113    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 57] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23172040283679962, worst -0.04968529939651489
10 lb beta sum: 0.2543511986732483, worst -0.04949992895126343
Time: prepare 0.0097    bound 0.1281    transfer 0.0015    finalize 0.0015    func 0.1425    
Accumulated time: func 1.2584    prepare 0.0635    bound 1.1718    transfer 0.0060    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.05327238) min lb tensor(-0.04941183)
Number of Verified Splits: 197 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23172038793563843, worst -0.08272027969360352
10 lb beta sum: 0.444138765335083, worst -0.08259272575378418
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 9
#cuts 4-6: 26
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 0.24771571159362793 
BICCOS Cumulative time: 0.3649587631225586
Preprocessing time: 0.006685495376586914 Inference time: 0.2329883575439453 Add cuts time: 0.005928754806518555 Cut analysis time: 0.0021131038665771484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04941 (8), -0.04920 (8), -0.04826 (8), -0.04781 (8), -0.04768 (8), -0.04704 (8), -0.04645 (8), -0.04562 (8), -0.04154 (8), -0.04144 (8), -0.03979 (8), -0.03887 (8), -0.03850 (8), -0.03827 (8), -0.03819 (8), -0.03662 (8), -0.02767 (8), -0.02649 (8), -0.02478 (8), -0.02403 (8), 
Length of domains: 59
Time: pickout 0.0004    decision 0.0220    set_bounds 0.0203    solve 0.1426    add 0.0022    
Accumulated time: pickout 0.0052    decision 0.6073    set_bounds 0.0895    solve 1.0739    add 0.5196    
Current (lb-rhs): -0.0494118332862854
259 domains visited
Cumulative time: 2.8696603775024414

BaB round 2
batch: 59
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 71] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04104411602020264
10 lb beta sum: 0.10630499571561813, worst -0.04054057598114014
Time: prepare 0.0034    bound 0.1270    transfer 0.0010    finalize 0.0013    func 0.1342    
Accumulated time: func 1.3926    prepare 0.0671    bound 1.2988    transfer 0.0070    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.02214420) min lb tensor(-0.04050636)
Number of Verified Splits: 139 of 236
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05587482452392578
10 lb beta sum: 0.4191801846027374, worst -0.058289408683776855
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 84.
#cuts 1-3: 9
#cuts 4-6: 27
#cuts 7-9: 48
#cuts >= 20: 0
BICCOS time: 0.23293614387512207 
BICCOS Cumulative time: 0.5978949069976807
Preprocessing time: 0.006832122802734375 Inference time: 0.20840024948120117 Add cuts time: 0.01367807388305664 Cut analysis time: 0.004025697708129883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04051 (10), -0.04038 (10), -0.03934 (10), -0.03890 (10), -0.03858 (10), -0.03788 (10), -0.03748 (10), -0.03735 (10), -0.03697 (10), -0.03663 (10), -0.03633 (10), -0.03608 (10), -0.03566 (10), -0.03562 (10), -0.03493 (10), -0.03434 (10), -0.03246 (10), -0.03236 (10), -0.03076 (10), -0.02993 (10), 
Length of domains: 97
Time: pickout 0.0014    decision 0.0137    set_bounds 0.0107    solve 0.1343    add 0.0017    
Accumulated time: pickout 0.0066    decision 0.6211    set_bounds 0.1002    solve 1.2082    add 0.5213    
Current (lb-rhs): -0.04050636291503906
356 domains visited
Cumulative time: 3.265869617462158

BaB round 3
batch: 97
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03394520282745361
10 lb beta sum: 0.10831579566001892, worst -0.033511459827423096
Time: prepare 0.0057    bound 0.1342    transfer 0.0019    finalize 0.0023    func 0.1465    
Accumulated time: func 1.5391    prepare 0.0730    bound 1.4329    transfer 0.0089    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.03238642) min lb tensor(-0.03349233)
Number of Verified Splits: 266 of 388
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 20
#cuts 4-6: 18
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.04831957817077637 
BICCOS Cumulative time: 0.646214485168457
Preprocessing time: 0.011120319366455078 Inference time: 0.029363632202148438 Add cuts time: 0.006531953811645508 Cut analysis time: 0.0013036727905273438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03349 (12), -0.03337 (12), -0.03238 (12), -0.03197 (12), -0.03156 (12), -0.03090 (12), -0.03058 (12), -0.03026 (12), -0.02998 (12), -0.02974 (12), -0.02941 (12), -0.02914 (12), -0.02875 (12), -0.02869 (12), -0.02807 (12), -0.02759 (12), -0.02572 (12), -0.02533 (12), -0.02530 (12), -0.02529 (12), 
Length of domains: 122
Time: pickout 0.0015    decision 0.0192    set_bounds 0.0177    solve 0.1466    add 0.0012    
Accumulated time: pickout 0.0080    decision 0.6403    set_bounds 0.1180    solve 1.3548    add 0.5225    
Current (lb-rhs): -0.033492326736450195
478 domains visited
Cumulative time: 3.5023813247680664

BaB round 4
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029082536697387695
10 lb beta sum: 0.1418052464723587, worst -0.03368586301803589
Time: prepare 0.0036    bound 0.1324    transfer 0.0005    finalize 0.0012    func 0.1393    
Accumulated time: func 1.6785    prepare 0.0768    bound 1.5653    transfer 0.0095    finalize 0.0176    
all_split False
======================Cut inference begins======================
max lb tensor(0.00674450) min lb tensor(-0.02864325)
Number of Verified Splits: 73 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 23
#cuts 4-6: 18
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.01888275146484375 
BICCOS Cumulative time: 0.6650972366333008
Preprocessing time: 0.007113456726074219 Inference time: 0.007841825485229492 Add cuts time: 0.0025386810302734375 Cut analysis time: 0.0013887882232666016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02864 (13), -0.02841 (13), -0.02753 (13), -0.02737 (13), -0.02729 (13), -0.02705 (13), -0.02681 (13), -0.02619 (13), -0.02611 (13), -0.02588 (13), -0.02584 (13), -0.02532 (13), -0.02502 (13), -0.02498 (13), -0.02495 (13), -0.02451 (13), -0.02444 (13), -0.02430 (13), -0.02418 (13), -0.02405 (13), 
Length of domains: 171
Time: pickout 0.0020    decision 0.0178    set_bounds 0.0101    solve 0.1394    add 0.0036    
Accumulated time: pickout 0.0101    decision 0.6580    set_bounds 0.1280    solve 1.4942    add 0.5261    
Current (lb-rhs): -0.028643250465393066
649 domains visited
Cumulative time: 3.6947927474975586

BaB round 5
batch: 171
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02734154462814331
10 lb beta sum: 0.17313626408576965, worst -0.026912927627563477
Time: prepare 0.0065    bound 0.1344    transfer 0.0015    finalize 0.0018    func 0.1465    
Accumulated time: func 1.8249    prepare 0.0835    bound 1.6998    transfer 0.0110    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.31488085) min lb tensor(-0.02690214)
Number of Verified Splits: 65 of 342
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.019516944885253906 
BICCOS Cumulative time: 0.6846141815185547
Preprocessing time: 0.009759664535522461 Inference time: 0.006779670715332031 Add cuts time: 0.0021741390228271484 Cut analysis time: 0.0008034706115722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02690 (14), -0.02649 (14), -0.02584 (14), -0.02560 (14), -0.02541 (14), -0.02523 (14), -0.02509 (14), -0.02453 (14), -0.02445 (14), -0.02424 (14), -0.02405 (14), -0.02390 (14), -0.02363 (14), -0.02337 (14), -0.02332 (14), -0.02323 (14), -0.02320 (14), -0.02316 (14), -0.02307 (14), -0.02307 (14), 
Length of domains: 277
Time: pickout 0.0023    decision 0.0200    set_bounds 0.0086    solve 0.1466    add 0.0017    
Accumulated time: pickout 0.0124    decision 0.6780    set_bounds 0.1366    solve 1.6408    add 0.5277    
Current (lb-rhs): -0.02690213918685913
926 domains visited
Cumulative time: 3.8942596912384033

BaB round 6
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02602243423461914
10 lb beta sum: 0.18538618087768555, worst -0.037287794053554535
Time: prepare 0.0104    bound 0.1352    transfer 0.0013    finalize 0.0023    func 0.1528    
Accumulated time: func 1.9777    prepare 0.0941    bound 1.8350    transfer 0.0123    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.31752360) min lb tensor(-0.02550542)
Number of Verified Splits: 93 of 554
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.030184030532836914 
BICCOS Cumulative time: 0.7147982120513916
Preprocessing time: 0.015936613082885742 Inference time: 0.010323524475097656 Add cuts time: 0.002630472183227539 Cut analysis time: 0.0012934207916259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02551 (15), -0.02505 (15), -0.02457 (15), -0.02417 (15), -0.02390 (15), -0.02387 (15), -0.02376 (15), -0.02326 (15), -0.02323 (15), -0.02318 (15), -0.02289 (15), -0.02261 (15), -0.02251 (15), -0.02243 (15), -0.02240 (15), -0.02229 (15), -0.02209 (15), -0.02204 (15), -0.02203 (15), -0.02191 (15), 
Length of domains: 461
Time: pickout 0.0047    decision 0.0256    set_bounds 0.0241    solve 0.1530    add 0.0053    
Accumulated time: pickout 0.0170    decision 0.7037    set_bounds 0.1608    solve 1.7938    add 0.5331    
Current (lb-rhs): -0.025505423545837402
1387 domains visited
Cumulative time: 4.1383445262908936

BaB round 7
batch: 461
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 723] [/input-8, 723] [/input-8, 419] [/input-8, 1692] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1698] [/input-8, 723] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23727335035800934, worst -0.024278640747070312
10 lb beta sum: 0.24706535041332245, worst -0.024249553680419922
Time: prepare 0.0385    bound 0.1377    transfer 0.0018    finalize 0.0044    func 0.1884    
Accumulated time: func 2.1661    prepare 0.1328    bound 1.9727    transfer 0.0141    finalize 0.0261    
all_split False
======================Cut inference begins======================
max lb tensor(0.37782913) min lb tensor(-0.02423960)
Number of Verified Splits: 101 of 922
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 10
#cuts 4-6: 6
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.04163217544555664 
BICCOS Cumulative time: 0.7564303874969482
Preprocessing time: 0.027255773544311523 Inference time: 0.011720657348632812 Add cuts time: 0.0019443035125732422 Cut analysis time: 0.0007114410400390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02424 (16), -0.02366 (16), -0.02331 (16), -0.02297 (16), -0.02279 (16), -0.02243 (16), -0.02238 (16), -0.02234 (16), -0.02231 (16), -0.02204 (16), -0.02181 (16), -0.02180 (16), -0.02158 (16), -0.02158 (16), -0.02127 (16), -0.02113 (16), -0.02110 (16), -0.02108 (16), -0.02106 (16), -0.02103 (16), 
Length of domains: 821
Time: pickout 0.0074    decision 0.0373    set_bounds 0.0387    solve 0.1886    add 0.0072    
Accumulated time: pickout 0.0245    decision 0.7410    set_bounds 0.1995    solve 1.9824    add 0.5402    
Current (lb-rhs): -0.02423959970474243
2208 domains visited
Cumulative time: 4.460859537124634

BaB round 8
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 723] [/input-8, 419] [/input-8, 723] [/input-8, 419] [/input-8, 419] [/input-8, 419] [/input-8, 1673] [/input-8, 723] [/input-8, 1692] [/input-8, 419] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02293241024017334
10 lb beta sum: 0.28205403685569763, worst -0.022520840167999268
Time: prepare 0.0308    bound 0.1559    transfer 0.0063    finalize 0.0069    func 0.2112    
Accumulated time: func 2.3773    prepare 0.1639    bound 2.1285    transfer 0.0205    finalize 0.0329    
all_split False
======================Cut inference begins======================
max lb tensor(0.39156061) min lb tensor(-0.02250910)
Number of Verified Splits: 657 of 1642
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 20
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.14025187492370605 
BICCOS Cumulative time: 0.8966822624206543
Preprocessing time: 0.04976701736450195 Inference time: 0.08165645599365234 Add cuts time: 0.008276939392089844 Cut analysis time: 0.0005514621734619141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (17), -0.02180 (17), -0.02164 (17), -0.02161 (17), -0.02130 (17), -0.02110 (17), -0.02097 (17), -0.02095 (17), -0.02088 (17), -0.02066 (17), -0.02064 (17), -0.02058 (17), -0.02057 (17), -0.02034 (17), -0.02029 (17), -0.02019 (17), -0.02004 (17), -0.02002 (17), -0.02002 (17), -0.01991 (17), 
Length of domains: 985
Time: pickout 0.0157    decision 0.0570    set_bounds 0.2286    solve 0.2115    add 0.0126    
Accumulated time: pickout 0.0401    decision 0.7979    set_bounds 0.4281    solve 2.1939    add 0.5528    
Current (lb-rhs): -0.022509098052978516
3193 domains visited
Cumulative time: 5.1327009201049805

BaB round 9
batch: 985
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 1698] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1692] [/input-8, 419] [/input-8, 1692] [/input-8, 1673] [/input-8, 1673] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022055625915527344
10 lb beta sum: 1.2657158374786377, worst -0.01991569995880127
Time: prepare 0.0416    bound 0.1674    transfer 0.0046    finalize 0.0093    func 0.2356    
Accumulated time: func 2.6129    prepare 0.2057    bound 2.2960    transfer 0.0251    finalize 0.0422    
all_split False
======================Cut inference begins======================
max lb tensor(0.94948757) min lb tensor(-0.01990642)
Number of Verified Splits: 1714 of 1970
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.3005843162536621 
BICCOS Cumulative time: 1.1972665786743164
Preprocessing time: 0.059607744216918945 Inference time: 0.21969032287597656 Add cuts time: 0.021018505096435547 Cut analysis time: 0.0002677440643310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01991 (18), -0.01909 (18), -0.01908 (18), -0.01849 (18), -0.01795 (18), -0.01765 (18), -0.01736 (18), -0.01717 (18), -0.01706 (18), -0.01692 (18), -0.01682 (18), -0.01678 (18), -0.01669 (18), -0.01662 (18), -0.01655 (18), -0.01652 (18), -0.01644 (18), -0.01631 (18), -0.01622 (18), -0.01621 (18), 
Length of domains: 256
Time: pickout 0.0174    decision 0.0634    set_bounds 0.0829    solve 0.2359    add 0.0034    
Accumulated time: pickout 0.0576    decision 0.8613    set_bounds 0.5110    solve 2.4298    add 0.5562    
Current (lb-rhs): -0.019906416535377502
3449 domains visited
Cumulative time: 5.854879856109619

BaB round 10
batch: 256
splitting decisions: 
split level 0: [/input-8, 212] [/input-8, 212] [/input-8, 212] [/input-8, 212] [/input-8, 419] [/input-8, 425] [/input-8, 419] [/input-8, 425] [/input-8, 212] [/input-8, 1692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02110809087753296

all verified at 3th iter
Time: prepare 0.0100    bound 0.0273    transfer 0.0010    finalize 0.1447    func 0.1864    
Accumulated time: func 2.7993    prepare 0.2160    bound 2.3232    transfer 0.0261    finalize 0.1870    
all_split False
======================Cut inference begins======================
max lb tensor(0.13554518) min lb tensor(0.06442110)
Number of Verified Splits: 512 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.015405416488647461 
BICCOS Cumulative time: 1.2126719951629639
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0056    decision 0.0257    set_bounds 0.0215    solve 0.1865    add 0.0008    
Accumulated time: pickout 0.0632    decision 0.8870    set_bounds 0.5325    solve 2.6163    add 0.5570    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3449 domains visited
Cumulative time: 6.1133551597595215


Properties batch 4, size 1
Remaining timeout: 189.02620315551758
Verifying property 4 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26672733]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26672733]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010204315185546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2667274475097656
10 lb beta sum: 0.0, worst -0.26673078536987305
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 34] 
split level 4: [/input-12, 83] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 97] 
split level 7: [/input-12, 31] 
split level 8: [/input-12, 7] 
split level 9: [/input-8, 1683] 
split level 10: [/input-12, 2] 
split level 11: [/input-12, 72] 
split level 12: [/input-12, 24] 
split level 13: [/input-12, 92] 
split level 14: [/input-8, 219] 
split level 15: [/input-8, 1249] 
split level 16: [/input-12, 71] 
split level 17: [/input-8, 164] 
split level 18: [/input-8, 227] 
split level 19: [/input-8, 218] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 211] 
split level 23: [/input-8, 349] 
split level 24: [/input-8, 1378] 
split level 25: [/input-8, 1576] 
split level 26: [/input-8, 41] 
split level 27: [/input-8, 172] 
split level 28: [/input-8, 48] 
split level 29: [/input-8, 204] 
split level 30: [/input-8, 1692] 
split level 31: [/input-8, 1666] 
split level 32: [/input-8, 1579] 
split level 33: [/input, 3099] 
split level 34: [/input-8, 246] 
split level 35: [/input-8, 201] 
split level 36: [/input-8, 1370] 
split level 37: [/input-8, 180] 
split level 38: [/input-8, 205] 
split level 39: [/input-8, 343] 
split level 40: [/input-8, 342] 
split level 41: [/input-8, 1250] 
split level 42: [/input-8, 1673] 
split level 43: [/input-8, 194] 
split level 44: [/input-8, 417] 
split level 45: [/input-8, 1369] 
split level 46: [/input-8, 238] 
split level 47: [/input-8, 2038] 
split level 48: [/input-8, 222] 
split level 49: [/input-8, 188] 
split level 50: [/input-8, 171] 
split level 51: [/input, 1942] 
split level 52: [/input, 2636] 
split level 53: [/input-8, 132] 
split level 54: [/input, 2871] 
split level 55: [/input-8, 1665] 
split level 56: [/input-8, 395] 
split level 57: [/input-12, 53] 
split level 58: [/input-8, 254] 
split level 59: [/input-8, 1363] 
split level 60: [/input-8, 1946] 
split level 61: [/input-8, 51] 
split level 62: [/input-8, 416] 
split level 63: [/input-8, 57] 
split level 64: [/input, 2985] 
split level 65: [/input, 1374] 
split level 66: [/input-8, 1323] 
split level 67: [/input-8, 723] 
split level 68: [/input-8, 206] 
split level 69: [/input-8, 2034] 
split level 70: [/input-8, 207] 
split level 71: [/input-8, 255] 
split level 72: [/input-8, 1387] 
split level 73: [/input, 2670] 
split level 74: [/input-8, 223] 
split level 75: [/input, 3149] 
split level 76: [/input, 2986] 
split level 77: [/input, 829] 
split level 78: [/input-8, 39] 
split level 79: [/input, 130] 
split level 80: [/input, 3267] 
split level 81: [/input-8, 214] 
split level 82: [/input-8, 200] 
split level 83: [/input, 1926] 
split level 84: [/input, 954] 
split level 85: [/input-8, 253] 
split level 86: [/input-8, 1362] 
split level 87: [/input, 2739] 
split level 88: [/input, 1410] 
split level 89: [/input-8, 196] 
split level 90: [/input, 2653] 
split level 91: [/input-8, 2014] 
split level 92: [/input, 947] 
split level 93: [/input-8, 195] 
split level 94: [/input-8, 209] 
split level 95: [/input, 987] 
split level 96: [/input-8, 216] 
split level 97: [/input, 1910] 
split level 98: [/input, 812] 
split level 99: [/input-8, 245] 
split level 100: [/input-8, 198] 
split level 101: [/input-8, 1273] 
split level 102: [/input-8, 1736] 
split level 103: [/input, 1864] 
split level 104: [/input, 619] 
split level 105: [/input, 1064] 
split level 106: [/input, 2906] 
split level 107: [/input-8, 1996] 
split level 108: [/input, 1879] 
split level 109: [/input, 2638] 
split level 110: [/input, 1878] 
split level 111: [/input, 179] 
split level 112: [/input-8, 186] 
split level 113: [/input, 1438] 
split level 114: [/input, 2587] 
split level 115: [/input-8, 1635] 
split level 116: [/input, 177] 
split level 117: [/input, 786] 
split level 118: [/input, 1845] 
split level 119: [/input-8, 199] 
split level 120: [/input, 2622] 
split level 121: [/input, 1894] 
split level 122: [/input-8, 1383] 
split level 123: [/input, 1150] 
split level 124: [/input, 138] 
split level 125: [/input, 2750] 
split level 126: [/input, 813] 
split level 127: [/input-8, 129] 
split level 128: [/input, 1400] 
split level 129: [/input, 305] 
split level 130: [/input, 180] 
split level 131: [/input, 1416] 
split level 132: [/input, 973] 
split level 133: [/input-8, 419] 
split level 134: [/input, 3019] 
split level 135: [/input, 193] 
split level 136: [/input, 3230] 
split level 137: [/input-8, 1157] 
split level 138: [/input-8, 187] 
split level 139: [/input, 1898] 
split level 140: [/input, 3265] 
split level 141: [/input, 1925] 
split level 142: [/input-8, 229] 
split level 143: [/input, 2755] 
split level 144: [/input, 1080] 
split level 145: [/input, 953] 
split level 146: [/input, 651] 
split level 147: [/input, 885] 
split level 148: [/input, 2651] 
split level 149: [/input, 2685] 
split level 150: [/input-8, 61] 
split level 151: [/input, 204] 
split level 152: [/input, 2698] 
split level 153: [/input, 49] 
split level 154: [/input, 225] 
split level 155: [/input, 74] 
split level 156: [/input, 3220] 
split level 157: [/input-8, 161] 
split level 158: [/input, 790] 
split level 159: [/input, 2810] 
split level 160: [/input, 1618] 
split level 161: [/input, 937] 
split level 162: [/input, 2397] 
split level 163: [/input, 667] 
split level 164: [/input, 635] 
split level 165: [/input-8, 1343] 
split level 166: [/input, 2753] 
split level 167: [/input, 2754] 
split level 168: [/input, 2953] 
split level 169: [/input, 194] 
split level 170: [/input, 1899] 
split level 171: [/input-8, 1987] 
split level 172: [/input, 2069] 
split level 173: [/input, 2732] 
split level 174: [/input-8, 1159] 
split level 175: [/input, 1470] 
split level 176: [/input, 71] 
split level 177: [/input, 1359] 
split level 178: [/input, 1134] 
split level 179: [/input, 84] 
split level 180: [/input, 1166] 
split level 181: [/input, 1882] 
split level 182: [/input, 1862] 
split level 183: [/input, 2156] 
split level 184: [/input-8, 185] 
split level 185: [/input, 203] 
split level 186: [/input, 2747] 
split level 187: [/input, 1472] 
split level 188: [/input, 2752] 
split level 189: [/input, 37] 
split level 190: [/input, 3978] 
split level 191: [/input, 220] 
split level 192: [/input, 238] 
split level 193: [/input, 1490] 
split level 194: [/input, 2120] 
split level 195: [/input, 2980] 
split level 196: [/input, 683] 
split level 197: [/input, 2794] 
split level 198: [/input, 142] 
split level 199: [/input, 3018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26662981510162354
10 lb beta sum: 0.0, worst -0.26662707328796387
Time: prepare 0.0112    bound 0.0972    transfer 0.0010    finalize 0.0028    func 0.1147    
Accumulated time: func 0.1689    prepare 0.0213    bound 0.1509    transfer 0.0011    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.15770561) min lb tensor(-0.26662302)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010407209396362305 
BICCOS Cumulative time: 0.010407209396362305
Preprocessing time: 0.010027170181274414 Inference time: 0.0001125335693359375 Add cuts time: 4.982948303222656e-05 Cut analysis time: 0.00021767616271972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25661 (1), -0.25648 (1), -0.25646 (1), -0.25497 (1), -0.25492 (1), -0.25414 (1), -0.25395 (1), -0.25368 (1), -0.25362 (1), -0.25359 (1), -0.25283 (1), -0.25203 (1), -0.24867 (1), -0.24860 (1), -0.24857 (1), -0.24797 (1), -0.24705 (1), -0.24699 (1), -0.24614 (1), -0.24515 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5184    set_bounds 0.0092    solve 0.1148    add 0.0675    
Accumulated time: pickout 0.0003    decision 0.5184    set_bounds 0.0092    solve 0.1148    add 0.0675    
Current (lb-rhs): -0.25661420822143555
50 domains visited
Cumulative time: 0.779505729675293

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] 
split level 1: [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 17] [/input-12, 34] [/input-12, 17] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 34] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22131502628326416
10 lb beta sum: 0.41930288076400757, worst -0.21862462162971497
Time: prepare 0.0066    bound 0.1142    transfer 0.0007    finalize 0.0021    func 0.1262    
Accumulated time: func 0.2951    prepare 0.0282    bound 0.2652    transfer 0.0018    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.14384031) min lb tensor(-0.21851580)
Number of Verified Splits: 87 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.01693415641784668 
BICCOS Cumulative time: 0.027341365814208984
Preprocessing time: 0.011534452438354492 Inference time: 0.00323486328125 Add cuts time: 0.0018339157104492188 Cut analysis time: 0.00033092498779296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05050 (2), -0.05034 (2), -0.04962 (2), -0.04958 (2), -0.04838 (2), -0.04782 (2), -0.04780 (2), -0.04752 (2), -0.04715 (2), -0.04714 (2), -0.04369 (2), -0.04333 (2), -0.04307 (2), -0.04195 (2), -0.04179 (2), -0.04035 (2), -0.04031 (2), -0.04017 (2), -0.03954 (2), -0.03752 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0130    solve 0.1263    add 0.0822    
Accumulated time: pickout 0.0013    decision 0.5379    set_bounds 0.0222    solve 0.2411    add 0.1498    
Current (lb-rhs): -0.05050015449523926
100 domains visited
Cumulative time: 1.0386996269226074

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 83] [/input-12, 83] [/input-12, 34] [/input-12, 83] [/input-12, 83] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 97] [/input-12, 97] [/input-12, 34] [/input-12, 34] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05771350860595703

all verified at 1th iter
Time: prepare 0.0067    bound 0.0131    transfer 0.0007    finalize 0.0025    func 0.0255    
Accumulated time: func 0.3207    prepare 0.0351    bound 0.2783    transfer 0.0026    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.18793005) min lb tensor(0.00105381)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03745746612548828 
BICCOS Cumulative time: 0.06479883193969727
Preprocessing time: 0.011351823806762695 Inference time: 0.016579151153564453 Add cuts time: 0.009342670440673828 Cut analysis time: 0.0001838207244873047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0152    solve 0.0256    add 0.0197    
Accumulated time: pickout 0.0023    decision 0.5575    set_bounds 0.0374    solve 0.2667    add 0.1694    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34,  4]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([9.86100582e-32, 9.56863016e-02, 1.23916909e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34,  4]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([9.86100582e-32, 9.56863016e-02, 7.15946406e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([9.86100582e-32, 1.61935255e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17,  4]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.66796434e-24, 6.88440055e-02, 1.30832359e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17,  4]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.66796434e-24, 6.88440055e-02, 9.54135060e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17]), tensor([1., 1.]), tensor([0, 0]), tensor([1.66796434e-24, 1.27080008e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03857165575027466

all verified at 1th iter
Time: prepare 0.0004    bound 0.0102    transfer 0.0002    finalize 0.0002    func 0.0110    
Accumulated time: func 0.3316    prepare 0.0355    bound 0.2885    transfer 0.0027    finalize 0.0076    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 187.69060587882996
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 187.69051814079285
Verifying property 6 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.59470588]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.59470588]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010919570922851562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5947020649909973
10 lb beta sum: 0.0, worst -0.5947019457817078
Time: prepare 0.0002    bound 0.0894    transfer 0.0001    finalize 0.0001    func 0.0899    
Accumulated time: func 0.0899    prepare 0.0002    bound 0.0894    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 89] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 85] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 24] 
split level 9: [/input-12, 31] 
split level 10: [/input-8, 416] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1249] 
split level 13: [/input-8, 164] 
split level 14: [/input-8, 172] 
split level 15: [/input-8, 180] 
split level 16: [/input-8, 48] 
split level 17: [/input-8, 39] 
split level 18: [/input-8, 1576] 
split level 19: [/input-8, 1996] 
split level 20: [/input-8, 23] 
split level 21: [/input-8, 41] 
split level 22: [/input-8, 1579] 
split level 23: [/input-8, 188] 
split level 24: [/input-8, 844] 
split level 25: [/input-8, 51] 
split level 26: [/input-8, 349] 
split level 27: [/input-8, 227] 
split level 28: [/input-8, 417] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 361] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 370] 
split level 33: [/input-8, 425] 
split level 34: [/input-8, 1691] 
split level 35: [/input-8, 1987] 
split level 36: [/input-8, 57] 
split level 37: [/input, 460] 
split level 38: [/input-8, 267] 
split level 39: [/input, 908] 
split level 40: [/input-8, 1692] 
split level 41: [/input-8, 1946] 
split level 42: [/input-8, 1369] 
split level 43: [/input-8, 1708] 
split level 44: [/input-8, 205] 
split level 45: [/input-8, 171] 
split level 46: [/input-8, 1566] 
split level 47: [/input-8, 201] 
split level 48: [/input, 2985] 
split level 49: [/input, 130] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 207] 
split level 52: [/input, 1942] 
split level 53: [/input, 2739] 
split level 54: [/input-8, 723] 
split level 55: [/input-8, 2014] 
split level 56: [/input, 2986] 
split level 57: [/input-8, 1273] 
split level 58: [/input-8, 1367] 
split level 59: [/input, 954] 
split level 60: [/input-8, 218] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input, 89] 
split level 64: [/input, 3267] 
split level 65: [/input-8, 1378] 
split level 66: [/input-8, 1370] 
split level 67: [/input-8, 1627] 
split level 68: [/input, 1374] 
split level 69: [/input-8, 253] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1666] 
split level 72: [/input, 2723] 
split level 73: [/input-8, 352] 
split level 74: [/input-8, 343] 
split level 75: [/input, 1410] 
split level 76: [/input-8, 1716] 
split level 77: [/input-8, 714] 
split level 78: [/input-8, 2038] 
split level 79: [/input-8, 185] 
split level 80: [/input-8, 268] 
split level 81: [/input, 885] 
split level 82: [/input-8, 194] 
split level 83: [/input-8, 369] 
split level 84: [/input, 2906] 
split level 85: [/input, 2689] 
split level 86: [/input-8, 254] 
split level 87: [/input, 126] 
split level 88: [/input-8, 342] 
split level 89: [/input, 987] 
split level 90: [/input-8, 161] 
split level 91: [/input, 179] 
split level 92: [/input-8, 204] 
split level 93: [/input-8, 1374] 
split level 94: [/input-8, 214] 
split level 95: [/input, 177] 
split level 96: [/input-8, 456] 
split level 97: [/input, 883] 
split level 98: [/input-8, 238] 
split level 99: [/input, 2871] 
split level 100: [/input, 428] 
split level 101: [/input, 973] 
split level 102: [/input-8, 129] 
split level 103: [/input, 165] 
split level 104: [/input, 947] 
split level 105: [/input, 3467] 
split level 106: [/input-8, 200] 
split level 107: [/input-8, 503] 
split level 108: [/input-8, 1387] 
split level 109: [/input-8, 255] 
split level 110: [/input-8, 223] 
split level 111: [/input-8, 61] 
split level 112: [/input, 41] 
split level 113: [/input-8, 407] 
split level 114: [/input, 2674] 
split level 115: [/input, 2622] 
split level 116: [/input, 3099] 
split level 117: [/input-8, 1159] 
split level 118: [/input-8, 198] 
split level 119: [/input, 786] 
split level 120: [/input, 22] 
split level 121: [/input, 180] 
split level 122: [/input, 103] 
split level 123: [/input, 1448] 
split level 124: [/input, 3187] 
split level 125: [/input-8, 1619] 
split level 126: [/input-8, 209] 
split level 127: [/input-8, 1368] 
split level 128: [/input, 45] 
split level 129: [/input-8, 419] 
split level 130: [/input, 71] 
split level 131: [/input, 104] 
split level 132: [/input, 2926] 
split level 133: [/input-8, 195] 
split level 134: [/input, 195] 
split level 135: [/input-8, 1362] 
split level 136: [/input, 193] 
split level 137: [/input, 1416] 
split level 138: [/input, 37] 
split level 139: [/input-8, 1635] 
split level 140: [/input-8, 186] 
split level 141: [/input-8, 845] 
split level 142: [/input, 2072] 
split level 143: [/input-8, 187] 
split level 144: [/input, 1400] 
split level 145: [/input-8, 1250] 
split level 146: [/input-8, 1736] 
split level 147: [/input-8, 216] 
split level 148: [/input, 3018] 
split level 149: [/input-8, 246] 
split level 150: [/input, 183] 
split level 151: [/input-8, 295] 
split level 152: [/input, 3230] 
split level 153: [/input, 667] 
split level 154: [/input, 2587] 
split level 155: [/input-8, 1248] 
split level 156: [/input, 843] 
split level 157: [/input, 2705] 
split level 158: [/input, 3019] 
split level 159: [/input, 144] 
split level 160: [/input-8, 1344] 
split level 161: [/input, 74] 
split level 162: [/input-8, 199] 
split level 163: [/input-8, 196] 
split level 164: [/input, 199] 
split level 165: [/input, 1299] 
split level 166: [/input-8, 1759] 
split level 167: [/input, 900] 
split level 168: [/input-8, 245] 
split level 169: [/input-8, 1323] 
split level 170: [/input, 194] 
split level 171: [/input, 2584] 
split level 172: [/input, 216] 
split level 173: [/input, 1287] 
split level 174: [/input, 953] 
split level 175: [/input, 2755] 
split level 176: [/input, 3220] 
split level 177: [/input, 635] 
split level 178: [/input-8, 1730] 
split level 179: [/input, 1064] 
split level 180: [/input, 142] 
split level 181: [/input, 683] 
split level 182: [/input, 2980] 
split level 183: [/input, 152] 
split level 184: [/input, 2380] 
split level 185: [/input, 203] 
split level 186: [/input, 651] 
split level 187: [/input, 619] 
split level 188: [/input, 3149] 
split level 189: [/input, 1305] 
split level 190: [/input, 3523] 
split level 191: [/input, 3265] 
split level 192: [/input, 204] 
split level 193: [/input, 169] 
split level 194: [/input, 1166] 
split level 195: [/input, 1182] 
split level 196: [/input, 2397] 
split level 197: [/input, 937] 
split level 198: [/input-8, 1383] 
split level 199: [/input, 1359] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5946369767189026
10 lb beta sum: 0.0, worst -0.5946431756019592
Time: prepare 0.0112    bound 0.0968    transfer 0.0007    finalize 0.0025    func 0.1139    
Accumulated time: func 0.2038    prepare 0.0211    bound 0.1862    transfer 0.0008    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01198149) min lb tensor(-0.59463698)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010014533996582031 
BICCOS Cumulative time: 0.010014533996582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58241 (1), -0.58194 (1), -0.58127 (1), -0.58082 (1), -0.58079 (1), -0.58076 (1), -0.58022 (1), -0.57980 (1), -0.57952 (1), -0.57945 (1), -0.57901 (1), -0.57885 (1), -0.57820 (1), -0.57734 (1), -0.57701 (1), -0.57680 (1), -0.57642 (1), -0.57504 (1), -0.57374 (1), -0.57345 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5130    set_bounds 0.0090    solve 0.1140    add 0.0658    
Accumulated time: pickout 0.0004    decision 0.5130    set_bounds 0.0090    solve 0.1140    add 0.0658    
Current (lb-rhs): -0.5824121832847595
50 domains visited
Cumulative time: 0.8080992698669434

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 97] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 2] 
split level 2: [/input-12, 2] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 34] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5514715909957886
10 lb beta sum: 0.0, worst -0.5509370565414429
Time: prepare 0.0123    bound 0.1009    transfer 0.0007    finalize 0.0024    func 0.1189    
Accumulated time: func 0.3227    prepare 0.0337    bound 0.2871    transfer 0.0016    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.37215257) min lb tensor(-0.55071199)
Number of Verified Splits: 21 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.012913227081298828 
BICCOS Cumulative time: 0.02292776107788086
Preprocessing time: 0.011456727981567383 Inference time: 0.0008981227874755859 Add cuts time: 0.00031256675720214844 Cut analysis time: 0.00024580955505371094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35435 (2), -0.35273 (2), -0.35114 (2), -0.35065 (2), -0.35048 (2), -0.34917 (2), -0.34906 (2), -0.34857 (2), -0.34576 (2), -0.34434 (2), -0.34188 (2), -0.34060 (2), -0.33729 (2), -0.33696 (2), -0.33655 (2), -0.33640 (2), -0.32991 (2), -0.32985 (2), -0.32864 (2), -0.32827 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0124    solve 0.1190    add 0.0771    
Accumulated time: pickout 0.0015    decision 0.5326    set_bounds 0.0214    solve 0.2330    add 0.1430    
Current (lb-rhs): -0.35435181856155396
100 domains visited
Cumulative time: 1.051123857498169

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 2] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 34] [/input-12, 34] [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 34] 
split level 3: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3312642574310303
10 lb beta sum: 0.6411822438240051, worst -0.30822765827178955
Time: prepare 0.0075    bound 0.1166    transfer 0.0008    finalize 0.0020    func 0.1301    
Accumulated time: func 0.4529    prepare 0.0415    bound 0.4037    transfer 0.0024    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.53749073) min lb tensor(-0.30798596)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 5
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.018327713012695312 
BICCOS Cumulative time: 0.04125547409057617
Preprocessing time: 0.011341094970703125 Inference time: 0.004540681838989258 Add cuts time: 0.0021088123321533203 Cut analysis time: 0.0003371238708496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09276 (3), -0.09272 (3), -0.09217 (3), -0.09210 (3), -0.09058 (3), -0.08979 (3), -0.08808 (3), -0.08589 (3), -0.08345 (3), -0.07705 (3), -0.07657 (3), -0.07620 (3), -0.07584 (3), -0.07549 (3), -0.07517 (3), -0.07454 (3), -0.06824 (3), -0.06735 (3), -0.06686 (3), -0.06666 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0152    solve 0.1302    add 0.0903    
Accumulated time: pickout 0.0024    decision 0.5518    set_bounds 0.0366    solve 0.3632    add 0.2333    
Current (lb-rhs): -0.0927618145942688
150 domains visited
Cumulative time: 1.325542688369751

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 85] [/input-12, 85] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16461670398712158
10 lb beta sum: 0.7054464817047119, worst -0.060424745082855225
Time: prepare 0.0065    bound 0.1149    transfer 0.0009    finalize 0.0022    func 0.1272    
Accumulated time: func 0.5801    prepare 0.0483    bound 0.5187    transfer 0.0033    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.68233168) min lb tensor(-0.05898511)
Number of Verified Splits: 327 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.03419351577758789 
BICCOS Cumulative time: 0.07544898986816406
Preprocessing time: 0.011262655258178711 Inference time: 0.015167474746704102 Add cuts time: 0.007261753082275391 Cut analysis time: 0.0005016326904296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05899 (4), -0.05896 (4), -0.05895 (4), -0.05894 (4), -0.05891 (4), -0.05887 (4), -0.05801 (4), -0.05801 (4), -0.05799 (4), -0.05758 (4), -0.05758 (4), -0.05755 (4), -0.05085 (4), -0.05083 (4), -0.05081 (4), -0.05043 (4), -0.05043 (4), -0.05041 (4), -0.03074 (4), -0.03066 (4), 
Length of domains: 28
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0154    solve 0.1273    add 0.2556    
Accumulated time: pickout 0.0035    decision 0.5710    set_bounds 0.0520    solve 0.4905    add 0.4888    
Current (lb-rhs): -0.058985114097595215
178 domains visited
Cumulative time: 1.7784972190856934

Shallow-BaB round 5
batch: 28
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 4: [/input-12, 7] [/input-12, 24] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 5: [/input-8, 417] [/input-8, 425] [/input-12, 24] [/input-8, 425] [/input-8, 425] [/input-8, 425] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 417] 
split level 6: [/input-8, 171] [/input-8, 417] [/input-8, 171] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14892536401748657
10 lb beta sum: 2.0023019313812256, worst -0.06472605466842651
Time: prepare 0.0063    bound 0.1370    transfer 0.0007    finalize 0.0025    func 0.1502    
Accumulated time: func 0.7303    prepare 0.0550    bound 0.6557    transfer 0.0040    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.43184376) min lb tensor(-0.02970898)
Number of Verified Splits: 258 of 392
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 6
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.033086299896240234 
BICCOS Cumulative time: 0.1085352897644043
Preprocessing time: 0.011752605438232422 Inference time: 0.014470815658569336 Add cuts time: 0.006287097930908203 Cut analysis time: 0.0005757808685302734
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0306    set_bounds 0.0137    solve 0.1503    add 0.0282    
Accumulated time: pickout 0.0043    decision 0.6015    set_bounds 0.0657    solve 0.6408    add 0.5170    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
178 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.09807894e-01,  1.19300231e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34, 56]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.09807894e-01,  2.94172347e-01,  2.90473700e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34, 56]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.09807894e-01,  2.94172347e-01,  1.18624736e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.51700541e-01,  4.11806405e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.51700541e-01,  8.58815908e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.31084485e-09, 1.04196474e-01, 3.95490408e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.31084485e-09, 1.04196474e-01, 8.57223868e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.31084485e-09, 1.61860451e-01, 1.24302313e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.31084485e-09, 1.61860451e-01, 1.39447674e-01, 6.10233098e-02,
        3.07567567e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.31084485e-09, 1.61860451e-01, 1.39447674e-01, 6.10233098e-02,
        2.96885539e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.31084485e-09, 1.61860451e-01, 1.39447674e-01, 7.84912258e-02,
        2.85091102e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([2.31084485e-09, 1.61860451e-01, 1.39447674e-01, 7.84912258e-02,
        2.61092354e-02]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2806912660598755
10 lb beta sum: 0.9275964498519897, worst -0.19262778759002686
Time: prepare 0.0005    bound 0.1238    transfer 0.0002    finalize 0.0002    func 0.1248    
Accumulated time: func 0.8550    prepare 0.0555    bound 0.7795    transfer 0.0042    finalize 0.0120    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 89] [/input-12, 89] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 34] [/input-12, 34] [/input-12, 89] 
split level 2: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 5: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7142257690429688, worst -0.09737759828567505
10 lb beta sum: 1.7142257690429688, worst -0.09674698114395142
Time: prepare 0.0095    bound 0.1255    transfer 0.0013    finalize 0.0013    func 0.1393    
Accumulated time: func 0.9943    prepare 0.0653    bound 0.9050    transfer 0.0055    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(1.29539990) min lb tensor(-0.09644479)
Number of Verified Splits: 234 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.7569881677627563, worst -3.443624496459961
10 lb beta sum: 1.4314916133880615, worst -0.48143160343170166
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 6
#cuts 4-6: 10
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.26582884788513184 
BICCOS Cumulative time: 0.37436413764953613
Preprocessing time: 0.006458759307861328 Inference time: 0.2547593116760254 Add cuts time: 0.00395655632019043 Cut analysis time: 0.0006542205810546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09644 (6), -0.09144 (6), -0.08323 (6), -0.07825 (6), -0.07643 (6), -0.06706 (6), -0.06134 (6), -0.06102 (6), -0.05656 (6), -0.05387 (6), -0.04929 (6), -0.04778 (6), -0.04730 (6), -0.04673 (6), -0.04252 (6), -0.03544 (6), -0.03193 (6), -0.02784 (6), -0.02237 (6), -0.01707 (6), 
Length of domains: 22
Time: pickout 0.0006    decision 0.0174    set_bounds 0.0174    solve 0.1393    add 0.0011    
Accumulated time: pickout 0.0049    decision 0.6189    set_bounds 0.0832    solve 0.7801    add 0.5181    
Current (lb-rhs): -0.09644478559494019
200 domains visited
Cumulative time: 2.629673719406128

BaB round 2
batch: 22
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 180] [/input-8, 180] [/input-8, 180] 
split level 1: [/input-8, 41] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 349] [/input-8, 1579] [/input-8, 349] [/input-8, 1579] [/input-8, 41] 
split level 2: [/input-8, 417] [/input-8, 171] [/input-8, 41] [/input-8, 171] [/input-8, 41] [/input-8, 1579] [/input-8, 41] [/input-8, 1579] [/input-8, 349] [/input-8, 417] 
split level 3: [/input-8, 1579] [/input-8, 723] [/input-8, 1250] [/input-8, 723] [/input-8, 1250] [/input-8, 723] [/input-8, 349] [/input-8, 723] [/input-8, 41] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07867670059204102
10 lb beta sum: 0.16255462169647217, worst -0.07784289121627808
Time: prepare 0.0065    bound 0.1274    transfer 0.0020    finalize 0.0018    func 0.1400    
Accumulated time: func 1.1343    prepare 0.0721    bound 1.0324    transfer 0.0075    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.04340076) min lb tensor(-0.07757278)
Number of Verified Splits: 173 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37688130140304565
10 lb beta sum: 0.5654275417327881, worst -0.31943362951278687
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 6
#cuts 4-6: 10
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.25467896461486816 
BICCOS Cumulative time: 0.6290431022644043
Preprocessing time: 0.010058879852294922 Inference time: 0.2430129051208496 Add cuts time: 0.0008549690246582031 Cut analysis time: 0.0007522106170654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07757 (10), -0.07616 (10), -0.07184 (10), -0.07105 (10), -0.07042 (10), -0.06936 (10), -0.06876 (10), -0.06798 (10), -0.06718 (10), -0.06659 (10), -0.06630 (10), -0.06497 (10), -0.06272 (10), -0.06241 (10), -0.06095 (10), -0.06080 (10), -0.05890 (10), -0.05889 (10), -0.05745 (10), -0.05687 (10), 
Length of domains: 179
Time: pickout 0.0013    decision 0.0174    set_bounds 0.0162    solve 0.1401    add 0.0043    
Accumulated time: pickout 0.0062    decision 0.6363    set_bounds 0.0994    solve 0.9203    add 0.5224    
Current (lb-rhs): -0.0775727778673172
379 domains visited
Cumulative time: 3.0651750564575195

BaB round 3
batch: 179
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 172] [/input-8, 1576] [/input-8, 349] [/input-8, 1576] [/input-8, 1576] [/input-8, 1576] [/input-8, 172] [/input-8, 417] [/input-8, 425] [/input-8, 349] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07489681243896484
10 lb beta sum: 0.1934496909379959, worst -0.07425275444984436
Time: prepare 0.0082    bound 0.1337    transfer 0.0008    finalize 0.0016    func 0.1466    
Accumulated time: func 1.2809    prepare 0.0805    bound 1.1662    transfer 0.0083    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.02628663) min lb tensor(-0.07411711)
Number of Verified Splits: 122 of 358
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.025727510452270508 
BICCOS Cumulative time: 0.6547706127166748
Preprocessing time: 0.010247468948364258 Inference time: 0.012735366821289062 Add cuts time: 0.0021021366119384766 Cut analysis time: 0.0006425380706787109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07412 (11), -0.07271 (11), -0.07091 (11), -0.06954 (11), -0.06904 (11), -0.06834 (11), -0.06758 (11), -0.06654 (11), -0.06608 (11), -0.06513 (11), -0.06442 (11), -0.06378 (11), -0.06345 (11), -0.06269 (11), -0.06223 (11), -0.06118 (11), -0.06008 (11), -0.05908 (11), -0.05813 (11), -0.05767 (11), 
Length of domains: 236
Time: pickout 0.0033    decision 0.0211    set_bounds 0.0159    solve 0.1472    add 0.0031    
Accumulated time: pickout 0.0095    decision 0.6574    set_bounds 0.1153    solve 1.0675    add 0.5256    
Current (lb-rhs): -0.07411710917949677
615 domains visited
Cumulative time: 3.282433032989502

BaB round 4
batch: 236
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 417] [/input-8, 1576] [/input-8, 369] [/input-8, 1946] [/input-8, 425] [/input-8, 39] [/input-8, 349] [/input-8, 180] [/input-8, 349] [/input-8, 41] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07325124740600586
10 lb beta sum: 0.6274639368057251, worst -0.07045462727546692
Time: prepare 0.0090    bound 0.1351    transfer 0.0011    finalize 0.0027    func 0.1510    
Accumulated time: func 1.4319    prepare 0.0898    bound 1.3013    transfer 0.0094    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.48455557) min lb tensor(-0.07036559)
Number of Verified Splits: 238 of 472
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.04277396202087402 
BICCOS Cumulative time: 0.6975445747375488
Preprocessing time: 0.013264656066894531 Inference time: 0.025728702545166016 Add cuts time: 0.003208160400390625 Cut analysis time: 0.0005724430084228516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07037 (12), -0.06909 (12), -0.06708 (12), -0.06584 (12), -0.06371 (12), -0.06237 (12), -0.06213 (12), -0.06048 (12), -0.05993 (12), -0.05890 (12), -0.05841 (12), -0.05765 (12), -0.05723 (12), -0.05710 (12), -0.05605 (12), -0.05569 (12), -0.05535 (12), -0.05493 (12), -0.05460 (12), -0.05407 (12), 
Length of domains: 234
Time: pickout 0.0033    decision 0.0236    set_bounds 0.0198    solve 0.1511    add 0.0038    
Accumulated time: pickout 0.0128    decision 0.6811    set_bounds 0.1351    solve 1.2186    add 0.5293    
Current (lb-rhs): -0.07036559283733368
849 domains visited
Cumulative time: 3.5283846855163574

BaB round 5
batch: 234
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 349] [/input-8, 417] [/input-8, 1946] [/input-8, 171] [/input-8, 1691] [/input-8, 185] [/input-8, 39] [/input-8, 349] [/input-8, 417] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06921982765197754
10 lb beta sum: 1.5798048973083496, worst -0.07863831520080566
Time: prepare 0.0094    bound 0.1358    transfer 0.0008    finalize 0.0021    func 0.1512    
Accumulated time: func 1.5831    prepare 0.0994    bound 1.4371    transfer 0.0102    finalize 0.0214    
all_split False
======================Cut inference begins======================
max lb tensor(0.58387643) min lb tensor(-0.05461705)
Number of Verified Splits: 335 of 468
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 25
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.05589699745178223 
BICCOS Cumulative time: 0.753441572189331
Preprocessing time: 0.013351202011108398 Inference time: 0.03757500648498535 Add cuts time: 0.004374027252197266 Cut analysis time: 0.0005967617034912109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05462 (13), -0.05333 (13), -0.05256 (13), -0.05125 (13), -0.05119 (13), -0.05112 (13), -0.04994 (13), -0.04965 (13), -0.04919 (13), -0.04911 (13), -0.04837 (13), -0.04773 (13), -0.04761 (13), -0.04698 (13), -0.04667 (13), -0.04540 (13), -0.03962 (13), -0.03757 (13), -0.03564 (13), -0.03435 (13), 
Length of domains: 133
Time: pickout 0.0035    decision 0.0233    set_bounds 0.0217    solve 0.1513    add 0.0029    
Accumulated time: pickout 0.0163    decision 0.7043    set_bounds 0.1568    solve 1.3699    add 0.5322    
Current (lb-rhs): -0.05461704730987549
982 domains visited
Cumulative time: 3.7888357639312744

BaB round 6
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 164] [/input-8, 349] [/input-8, 39] [/input-8, 349] [/input-8, 2014] [/input-8, 349] [/input-8, 349] [/input-8, 164] [/input-8, 164] [/input-8, 2014] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06639981269836426
10 lb beta sum: 2.5815420150756836, worst -0.045047879219055176
Time: prepare 0.0052    bound 0.1285    transfer 0.0013    finalize 0.0013    func 0.1380    
Accumulated time: func 1.7211    prepare 0.1048    bound 1.5657    transfer 0.0115    finalize 0.0227    
all_split False
======================Cut inference begins======================
max lb tensor(0.47561383) min lb tensor(-0.04501951)
Number of Verified Splits: 171 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 27
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0304868221282959 
BICCOS Cumulative time: 0.783928394317627
Preprocessing time: 0.007702827453613281 Inference time: 0.01994013786315918 Add cuts time: 0.002235889434814453 Cut analysis time: 0.0006079673767089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04502 (14), -0.04401 (14), -0.04292 (14), -0.04184 (14), -0.04141 (14), -0.04036 (14), -0.03928 (14), -0.03801 (14), -0.03776 (14), -0.03681 (14), -0.03540 (14), -0.03436 (14), -0.03415 (14), -0.03315 (14), -0.03177 (14), -0.03057 (14), -0.02982 (14), -0.02886 (14), -0.02772 (14), -0.02670 (14), 
Length of domains: 95
Time: pickout 0.0026    decision 0.0159    set_bounds 0.0115    solve 0.1381    add 0.0028    
Accumulated time: pickout 0.0189    decision 0.7202    set_bounds 0.1683    solve 1.5080    add 0.5350    
Current (lb-rhs): -0.04501950740814209
1077 domains visited
Cumulative time: 3.9913151264190674

BaB round 7
batch: 95
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 185] [/input-8, 164] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] 
split level 1: [/input-8, 1692] [/input-8, 369] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06019306182861328
10 lb beta sum: 2.575744390487671, worst -0.03999811410903931
Time: prepare 0.0072    bound 0.1317    transfer 0.0021    finalize 0.0019    func 0.1454    
Accumulated time: func 1.8665    prepare 0.1121    bound 1.6974    transfer 0.0136    finalize 0.0246    
all_split False
======================Cut inference begins======================
max lb tensor(0.32108808) min lb tensor(-0.03997207)
Number of Verified Splits: 249 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 29
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.045685529708862305 
BICCOS Cumulative time: 0.8296139240264893
Preprocessing time: 0.010744333267211914 Inference time: 0.0314793586730957 Add cuts time: 0.0028357505798339844 Cut analysis time: 0.0006260871887207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03997 (16), -0.03925 (16), -0.03778 (16), -0.03768 (16), -0.03659 (16), -0.03629 (16), -0.03587 (16), -0.03558 (16), -0.03440 (16), -0.03430 (16), -0.03397 (16), -0.03311 (16), -0.03291 (16), -0.03220 (16), -0.03213 (16), -0.03066 (16), -0.03059 (16), -0.02975 (16), -0.02944 (16), -0.02879 (16), 
Length of domains: 131
Time: pickout 0.0022    decision 0.0191    set_bounds 0.0175    solve 0.1455    add 0.0020    
Accumulated time: pickout 0.0211    decision 0.7393    set_bounds 0.1858    solve 1.6535    add 0.5370    
Current (lb-rhs): -0.03997206687927246
1208 domains visited
Cumulative time: 4.2246551513671875

BaB round 8
batch: 131
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 369] [/input-8, 369] [/input-8, 369] [/input-8, 369] [/input-8, 369] [/input-8, 369] [/input-8, 361] [/input-8, 369] [/input-8, 361] [/input-8, 361] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0556788444519043
10 lb beta sum: 2.7148630619049072, worst -0.03307020664215088
Time: prepare 0.0052    bound 0.1328    transfer 0.0013    finalize 0.0013    func 0.1427    
Accumulated time: func 2.0092    prepare 0.1175    bound 1.8301    transfer 0.0149    finalize 0.0259    
all_split False
======================Cut inference begins======================
max lb tensor(0.25377178) min lb tensor(-0.03305793)
Number of Verified Splits: 93 of 262
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 30
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02197718620300293 
BICCOS Cumulative time: 0.8515911102294922
Preprocessing time: 0.00764918327331543 Inference time: 0.011631488800048828 Add cuts time: 0.0019788742065429688 Cut analysis time: 0.0007176399230957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03306 (17), -0.03232 (17), -0.03091 (17), -0.03086 (17), -0.03074 (17), -0.03021 (17), -0.03017 (17), -0.02974 (17), -0.02952 (17), -0.02900 (17), -0.02878 (17), -0.02875 (17), -0.02862 (17), -0.02753 (17), -0.02749 (17), -0.02743 (17), -0.02697 (17), -0.02665 (17), -0.02623 (17), -0.02620 (17), 
Length of domains: 169
Time: pickout 0.0026    decision 0.0179    set_bounds 0.0109    solve 0.1428    add 0.0026    
Accumulated time: pickout 0.0237    decision 0.7572    set_bounds 0.1967    solve 1.7963    add 0.5396    
Current (lb-rhs): -0.03305792808532715
1377 domains visited
Cumulative time: 4.424201488494873

BaB round 9
batch: 169
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2014] [/input-8, 2014] [/input-8, 1370] [/input-8, 1370] [/input-8, 1370] [/input-8, 1987] [/input-8, 1370] [/input-8, 1987] [/input-8, 1370] [/input-8, 1370] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05163168907165527
10 lb beta sum: 2.789743661880493, worst -0.03118884563446045
Time: prepare 0.0066    bound 0.1332    transfer 0.0007    finalize 0.0016    func 0.1443    
Accumulated time: func 2.1535    prepare 0.1243    bound 1.9633    transfer 0.0156    finalize 0.0275    
all_split False
======================Cut inference begins======================
max lb tensor(0.23312497) min lb tensor(-0.03117883)
Number of Verified Splits: 102 of 338
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 31
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02653336524963379 
BICCOS Cumulative time: 0.878124475479126
Preprocessing time: 0.009698867797851562 Inference time: 0.013669967651367188 Add cuts time: 0.0025124549865722656 Cut analysis time: 0.0006520748138427734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03118 (18), -0.03041 (18), -0.02895 (18), -0.02895 (18), -0.02883 (18), -0.02818 (18), -0.02786 (18), -0.02769 (18), -0.02709 (18), -0.02693 (18), -0.02672 (18), -0.02661 (18), -0.02632 (18), -0.02624 (18), -0.02600 (18), -0.02564 (18), -0.02552 (18), -0.02522 (18), -0.02521 (18), -0.02519 (18), 
Length of domains: 236
Time: pickout 0.0030    decision 0.0199    set_bounds 0.0140    solve 0.1444    add 0.0018    
Accumulated time: pickout 0.0267    decision 0.7770    set_bounds 0.2107    solve 1.9407    add 0.5414    
Current (lb-rhs): -0.031178832054138184
1613 domains visited
Cumulative time: 4.634689569473267

BaB round 10
batch: 236
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2014] [/input-8, 2014] [/input-8, 2014] [/input-8, 1996] [/input-8, 2014] [/input-8, 1996] [/input-8, 2014] [/input-8, 2014] [/input-8, 1946] [/input-8, 1692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04925346374511719
10 lb beta sum: 2.8417320251464844, worst -0.030282020568847656
Time: prepare 0.0090    bound 0.1311    transfer 0.0016    finalize 0.0027    func 0.1474    
Accumulated time: func 2.3008    prepare 0.1335    bound 2.0944    transfer 0.0172    finalize 0.0302    
all_split False
======================Cut inference begins======================
max lb tensor(0.23215818) min lb tensor(-0.03027022)
Number of Verified Splits: 186 of 472
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 33
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0425875186920166 
BICCOS Cumulative time: 0.9207119941711426
Preprocessing time: 0.013221502304077148 Inference time: 0.026369333267211914 Add cuts time: 0.002315044403076172 Cut analysis time: 0.0006816387176513672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03027 (19), -0.02947 (19), -0.02804 (19), -0.02802 (19), -0.02792 (19), -0.02741 (19), -0.02722 (19), -0.02693 (19), -0.02678 (19), -0.02659 (19), -0.02614 (19), -0.02600 (19), -0.02579 (19), -0.02569 (19), -0.02539 (19), -0.02527 (19), -0.02504 (19), -0.02470 (19), -0.02460 (19), -0.02430 (19), 
Length of domains: 286
Time: pickout 0.0037    decision 0.0214    set_bounds 0.0197    solve 0.1475    add 0.0024    
Accumulated time: pickout 0.0304    decision 0.7984    set_bounds 0.2304    solve 2.0882    add 0.5438    
Current (lb-rhs): -0.03027021884918213
1899 domains visited
Cumulative time: 4.873373746871948

BaB round 11
batch: 286
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1576] [/input-8, 1576] [/input-8, 2014] [/input-8, 1946] [/input-8, 1576] [/input-8, 2014] [/input-8, 1576] [/input-8, 1946] [/input-8, 1946] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04635047912597656
10 lb beta sum: 2.9616847038269043, worst -0.02872788906097412
Time: prepare 0.0115    bound 0.1378    transfer 0.0011    finalize 0.0026    func 0.1580    
Accumulated time: func 2.4589    prepare 0.1452    bound 2.2322    transfer 0.0183    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.23245978) min lb tensor(-0.02872181)
Number of Verified Splits: 212 of 572
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 33
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.052770376205444336 
BICCOS Cumulative time: 0.9734823703765869
Preprocessing time: 0.016564369201660156 Inference time: 0.032297611236572266 Add cuts time: 0.0031592845916748047 Cut analysis time: 0.0007491111755371094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02872 (20), -0.02788 (20), -0.02649 (20), -0.02646 (20), -0.02644 (20), -0.02630 (20), -0.02582 (20), -0.02564 (20), -0.02539 (20), -0.02524 (20), -0.02497 (20), -0.02456 (20), -0.02456 (20), -0.02442 (20), -0.02419 (20), -0.02404 (20), -0.02380 (20), -0.02365 (20), -0.02346 (20), -0.02324 (20), 
Length of domains: 360
Time: pickout 0.0052    decision 0.0262    set_bounds 0.1776    solve 0.1583    add 0.0018    
Accumulated time: pickout 0.0356    decision 0.8246    set_bounds 0.4080    solve 2.2465    add 0.5456    
Current (lb-rhs): -0.02872180938720703
2259 domains visited
Cumulative time: 5.2969255447387695

BaB round 12
batch: 360
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 417] [/input-8, 417] [/input-8, 188] [/input-8, 417] [/input-8, 417] [/input-8, 188] [/input-8, 188] [/input-8, 188] [/input-8, 417] [/input-8, 417] 
cut re-enabled after branching node selection
0 lb beta sum: 3.4076051712036133, worst -0.027451515197753906
10 lb beta sum: 3.4076051712036133, worst -0.02744472026824951
Time: prepare 0.0300    bound 0.1358    transfer 0.0012    finalize 0.0030    func 0.1746    
Accumulated time: func 2.6335    prepare 0.1754    bound 2.3679    transfer 0.0195    finalize 0.0358    
all_split False
======================Cut inference begins======================
max lb tensor(0.01259375) min lb tensor(-0.02744102)
Number of Verified Splits: 385 of 720
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 34
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.08700752258300781 
BICCOS Cumulative time: 1.0604898929595947
Preprocessing time: 0.020456790924072266 Inference time: 0.06050920486450195 Add cuts time: 0.005228757858276367 Cut analysis time: 0.0008127689361572266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02744 (21), -0.02660 (21), -0.02518 (21), -0.02516 (21), -0.02502 (21), -0.02488 (21), -0.02451 (21), -0.02436 (21), -0.02411 (21), -0.02396 (21), -0.02368 (21), -0.02327 (21), -0.02314 (21), -0.02314 (21), -0.02289 (21), -0.02277 (21), -0.02251 (21), -0.02236 (21), -0.02217 (21), -0.02184 (21), 
Length of domains: 335
Time: pickout 0.0068    decision 0.0318    set_bounds 0.0305    solve 0.1748    add 0.0017    
Accumulated time: pickout 0.0424    decision 0.8564    set_bounds 0.4385    solve 2.4214    add 0.5473    
Current (lb-rhs): -0.027441024780273438
2594 domains visited
Cumulative time: 5.631876707077026

BaB round 13
batch: 335
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 161] [/input-8, 161] [/input-8, 1369] [/input-8, 1369] [/input-8, 161] [/input-8, 161] [/input-8, 1369] [/input-8, 1369] [/input-8, 161] [/input-8, 161] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042279958724975586
10 lb beta sum: 2.780271291732788, worst -0.027443528175354004
Time: prepare 0.0127    bound 0.1355    transfer 0.0011    finalize 0.0029    func 0.1565    
Accumulated time: func 2.7900    prepare 0.1883    bound 2.5034    transfer 0.0206    finalize 0.0386    
all_split False
======================Cut inference begins======================
max lb tensor(0.23257589) min lb tensor(-0.02743983)
Number of Verified Splits: 247 of 670
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 34
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.06197404861450195 
BICCOS Cumulative time: 1.1224639415740967
Preprocessing time: 0.01894664764404297 Inference time: 0.03903603553771973 Add cuts time: 0.0033075809478759766 Cut analysis time: 0.0006837844848632812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02744 (22), -0.02660 (22), -0.02518 (22), -0.02515 (22), -0.02501 (22), -0.02471 (22), -0.02455 (22), -0.02451 (22), -0.02435 (22), -0.02411 (22), -0.02396 (22), -0.02365 (22), -0.02326 (22), -0.02313 (22), -0.02310 (22), -0.02302 (22), -0.02288 (22), -0.02275 (22), -0.02251 (22), -0.02236 (22), 
Length of domains: 423
Time: pickout 0.0060    decision 0.0289    set_bounds 0.0284    solve 0.1567    add 0.0031    
Accumulated time: pickout 0.0484    decision 0.8853    set_bounds 0.4668    solve 2.5780    add 0.5504    
Current (lb-rhs): -0.02743983268737793
3017 domains visited
Cumulative time: 5.918906211853027

BaB round 14
batch: 423
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 161] [/input-8, 161] [/input-8, 1627] [/input-8, 1369] [/input-8, 1369] [/input-8, 161] [/input-8, 161] 
cut re-enabled after branching node selection
0 lb beta sum: 3.197479486465454, worst -0.027439594268798828
10 lb beta sum: 3.197479486465454, worst -0.027439594268798828
Time: prepare 0.0350    bound 0.1369    transfer 0.0034    finalize 0.0044    func 0.1852    
Accumulated time: func 2.9752    prepare 0.2236    bound 2.6403    transfer 0.0240    finalize 0.0431    
all_split False
======================Cut inference begins======================
max lb tensor(0.23478675) min lb tensor(-0.02743375)
Number of Verified Splits: 411 of 846
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 35
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.09823751449584961 
BICCOS Cumulative time: 1.2207014560699463
Preprocessing time: 0.023797035217285156 Inference time: 0.06868815422058105 Add cuts time: 0.0049970149993896484 Cut analysis time: 0.00075531005859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02743 (23), -0.02660 (23), -0.02517 (23), -0.02515 (23), -0.02501 (23), -0.02470 (23), -0.02449 (23), -0.02434 (23), -0.02424 (23), -0.02410 (23), -0.02395 (23), -0.02364 (23), -0.02326 (23), -0.02313 (23), -0.02308 (23), -0.02288 (23), -0.02273 (23), -0.02271 (23), -0.02251 (23), -0.02235 (23), 
Length of domains: 435
Time: pickout 0.0067    decision 0.0345    set_bounds 0.0354    solve 0.1854    add 0.0047    
Accumulated time: pickout 0.0550    decision 0.9198    set_bounds 0.5022    solve 2.7635    add 0.5551    
Current (lb-rhs): -0.02743375301361084
3452 domains visited
Cumulative time: 6.287072658538818

BaB round 15
batch: 435
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 41] [/input-8, 342] [/input-8, 342] [/input-8, 342] [/input-8, 41] [/input-8, 342] [/input-8, 41] [/input-8, 342] [/input-8, 206] [/input-8, 206] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03772091865539551
10 lb beta sum: 2.7126402854919434, worst -0.02154707908630371
Time: prepare 0.0164    bound 0.1364    transfer 0.0015    finalize 0.0037    func 0.1635    
Accumulated time: func 3.1387    prepare 0.2402    bound 2.7767    transfer 0.0255    finalize 0.0468    
all_split False
======================Cut inference begins======================
max lb tensor(0.24233007) min lb tensor(-0.02153409)
Number of Verified Splits: 330 of 870
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 37
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.08803772926330566 
BICCOS Cumulative time: 1.308739185333252
Preprocessing time: 0.024389982223510742 Inference time: 0.05776262283325195 Add cuts time: 0.0051364898681640625 Cut analysis time: 0.0007486343383789062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02153 (24), -0.02069 (24), -0.02060 (24), -0.01976 (24), -0.01928 (24), -0.01920 (24), -0.01914 (24), -0.01888 (24), -0.01872 (24), -0.01837 (24), -0.01835 (24), -0.01827 (24), -0.01823 (24), -0.01821 (24), -0.01820 (24), -0.01814 (24), -0.01795 (24), -0.01786 (24), -0.01779 (24), -0.01744 (24), 
Length of domains: 540
Time: pickout 0.0088    decision 0.0355    set_bounds 0.0368    solve 0.1638    add 0.0044    
Accumulated time: pickout 0.0638    decision 0.9554    set_bounds 0.5390    solve 2.9272    add 0.5595    
Current (lb-rhs): -0.021534085273742676
3992 domains visited
Cumulative time: 6.626698017120361

BaB round 16
batch: 540
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1708] [/input-8, 1708] [/input-8, 48] [/input-8, 48] [/input-8, 48] [/input-8, 48] [/input-8, 48] [/input-8, 48] [/input-8, 48] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0365753173828125
10 lb beta sum: 3.1030285358428955, worst -0.017938971519470215
Time: prepare 0.0201    bound 0.1414    transfer 0.0044    finalize 0.0046    func 0.1775    
Accumulated time: func 3.3162    prepare 0.2606    bound 2.9181    transfer 0.0299    finalize 0.0514    
all_split False
======================Cut inference begins======================
max lb tensor(0.02172685) min lb tensor(-0.01791406)
Number of Verified Splits: 658 of 1080
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 39
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.15463829040527344 
BICCOS Cumulative time: 1.4633774757385254
Preprocessing time: 0.03218698501586914 Inference time: 0.1138007640838623 Add cuts time: 0.007877349853515625 Cut analysis time: 0.0007731914520263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01791 (25), -0.01707 (25), -0.01701 (25), -0.01617 (25), -0.01570 (25), -0.01567 (25), -0.01555 (25), -0.01539 (25), -0.01489 (25), -0.01483 (25), -0.01480 (25), -0.01477 (25), -0.01466 (25), -0.01461 (25), -0.01449 (25), -0.01449 (25), -0.01448 (25), -0.01404 (25), -0.01399 (25), -0.01393 (25), 
Length of domains: 422
Time: pickout 0.0091    decision 0.0397    set_bounds 0.0458    solve 0.1785    add 0.0019    
Accumulated time: pickout 0.0729    decision 0.9950    set_bounds 0.5848    solve 3.1057    add 0.5614    
Current (lb-rhs): -0.0179140567779541
4414 domains visited
Cumulative time: 7.06063175201416

BaB round 17
batch: 422
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2986] [/input, 2986] [/input, 2986] [/input, 2986] [/input, 2986] [/input-8, 1369] [/input-8, 1369] [/input, 2986] [/input, 2986] [/input-8, 1369] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03533291816711426
10 lb beta sum: 3.250199794769287, worst -0.014067649841308594
Time: prepare 0.0197    bound 0.1371    transfer 0.0015    finalize 0.1584    func 0.3222    
Accumulated time: func 3.6384    prepare 0.2805    bound 3.0552    transfer 0.0314    finalize 0.2098    
all_split False
======================Cut inference begins======================
max lb tensor(0.00834131) min lb tensor(-0.01403093)
Number of Verified Splits: 375 of 844
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 39
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.1005094051361084 
BICCOS Cumulative time: 1.5638868808746338
Preprocessing time: 0.024619340896606445 Inference time: 0.06751871109008789 Add cuts time: 0.007534980773925781 Cut analysis time: 0.0008363723754882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01403 (26), -0.01329 (26), -0.01313 (26), -0.01239 (26), -0.01180 (26), -0.01178 (26), -0.01176 (26), -0.01147 (26), -0.01106 (26), -0.01100 (26), -0.01090 (26), -0.01090 (26), -0.01085 (26), -0.01071 (26), -0.01069 (26), -0.01059 (26), -0.01058 (26), -0.01037 (26), -0.01025 (26), -0.01016 (26), 
Length of domains: 469
Time: pickout 0.0093    decision 0.0352    set_bounds 0.0247    solve 0.3224    add 0.0049    
Accumulated time: pickout 0.0822    decision 1.0302    set_bounds 0.6094    solve 3.4281    add 0.5663    
Current (lb-rhs): -0.014030933380126953
4883 domains visited
Cumulative time: 7.560315847396851

BaB round 18
batch: 469
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1369] [/input-8, 1369] [/input-8, 164] [/input-8, 1369] [/input-8, 204] [/input-8, 164] [/input-8, 164] [/input-8, 1369] [/input-8, 1369] [/input-8, 204] 
cut re-enabled after branching node selection
0 lb beta sum: 3.6830942630767822, worst -0.014030933380126953
10 lb beta sum: 3.6830942630767822, worst -0.013997554779052734
Time: prepare 0.0432    bound 0.1371    transfer 0.0021    finalize 0.0046    func 0.1931    
Accumulated time: func 3.8314    prepare 0.3239    bound 3.1923    transfer 0.0335    finalize 0.2144    
all_split False
======================Cut inference begins======================
max lb tensor(0.24720144) min lb tensor(-0.01398230)
Number of Verified Splits: 367 of 938
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 39
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.09980201721191406 
BICCOS Cumulative time: 1.6636888980865479
Preprocessing time: 0.028034687042236328 Inference time: 0.06447124481201172 Add cuts time: 0.006529808044433594 Cut analysis time: 0.0007662773132324219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01398 (27), -0.01324 (27), -0.01308 (27), -0.01234 (27), -0.01174 (27), -0.01173 (27), -0.01170 (27), -0.01143 (27), -0.01101 (27), -0.01093 (27), -0.01085 (27), -0.01082 (27), -0.01081 (27), -0.01067 (27), -0.01065 (27), -0.01054 (27), -0.01053 (27), -0.01033 (27), -0.01022 (27), -0.01010 (27), 
Length of domains: 571
Time: pickout 0.0107    decision 0.0359    set_bounds 0.0390    solve 0.1941    add 0.0045    
Accumulated time: pickout 0.0929    decision 1.0661    set_bounds 0.6484    solve 3.6222    add 0.5708    
Current (lb-rhs): -0.013982295989990234
5454 domains visited
Cumulative time: 7.946937322616577

BaB round 19
batch: 571
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 204] [/input-8, 164] [/input-8, 164] [/input-8, 164] 
cut re-enabled after branching node selection
0 lb beta sum: 3.6285760402679443, worst -0.013982295989990234
10 lb beta sum: 3.6285760402679443, worst -0.013962507247924805
Time: prepare 0.0526    bound 0.1420    transfer 0.0047    finalize 0.0066    func 0.2132    
Accumulated time: func 4.0446    prepare 0.3767    bound 3.3344    transfer 0.0382    finalize 0.2210    
all_split False
======================Cut inference begins======================
max lb tensor(0.24726915) min lb tensor(-0.01394963)
Number of Verified Splits: 595 of 1142
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 41
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.15156078338623047 
BICCOS Cumulative time: 1.8152496814727783
Preprocessing time: 0.03422904014587402 Inference time: 0.10793352127075195 Add cuts time: 0.008562326431274414 Cut analysis time: 0.0008358955383300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01395 (28), -0.01321 (28), -0.01305 (28), -0.01232 (28), -0.01169 (28), -0.01168 (28), -0.01139 (28), -0.01091 (28), -0.01079 (28), -0.01078 (28), -0.01064 (28), -0.01061 (28), -0.01051 (28), -0.01050 (28), -0.01031 (28), -0.01017 (28), -0.01008 (28), -0.01001 (28), -0.00991 (28), -0.00977 (28), 
Length of domains: 547
Time: pickout 0.0146    decision 0.0419    set_bounds 0.0486    solve 0.2135    add 0.0040    
Accumulated time: pickout 0.1075    decision 1.1080    set_bounds 0.6970    solve 3.8358    add 0.5748    
Current (lb-rhs): -0.01394963264465332
6001 domains visited
Cumulative time: 8.424898147583008

BaB round 20
batch: 547
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02985668182373047
10 lb beta sum: 2.9134445190429688, worst -0.011477231979370117
Time: prepare 0.0261    bound 0.1646    transfer 0.0081    finalize 0.0066    func 0.2126    
Accumulated time: func 4.2573    prepare 0.4031    bound 3.4990    transfer 0.0463    finalize 0.2276    
all_split False
======================Cut inference begins======================
max lb tensor(0.72863781) min lb tensor(-0.01146173)
Number of Verified Splits: 902 of 1094
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 43
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.2066669464111328 
BICCOS Cumulative time: 2.021916627883911
Preprocessing time: 0.033078670501708984 Inference time: 0.16176652908325195 Add cuts time: 0.010995626449584961 Cut analysis time: 0.0008261203765869141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01146 (29), -0.01074 (29), -0.00921 (29), -0.00920 (29), -0.00890 (29), -0.00875 (29), -0.00843 (29), -0.00815 (29), -0.00815 (29), -0.00804 (29), -0.00804 (29), -0.00803 (29), -0.00770 (29), -0.00743 (29), -0.00730 (29), -0.00726 (29), -0.00715 (29), -0.00688 (29), -0.00648 (29), -0.00648 (29), 
Length of domains: 192
Time: pickout 0.0115    decision 0.0402    set_bounds 0.0452    solve 0.2129    add 0.0025    
Accumulated time: pickout 0.1190    decision 1.1483    set_bounds 0.7421    solve 4.0487    add 0.5773    
Current (lb-rhs): -0.011461734771728516
6193 domains visited
Cumulative time: 8.949216365814209

BaB round 21
batch: 192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] [/input-8, 361] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0278165340423584
10 lb beta sum: 2.8702101707458496, worst -0.008525729179382324
Time: prepare 0.0094    bound 0.1432    transfer 0.0017    finalize 0.0019    func 0.1587    
Accumulated time: func 4.4160    prepare 0.4127    bound 3.6422    transfer 0.0480    finalize 0.2295    
all_split False
======================Cut inference begins======================
max lb tensor(0.25057697) min lb tensor(-0.00849938)
Number of Verified Splits: 300 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 43
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.07217931747436523 
BICCOS Cumulative time: 2.0940959453582764
Preprocessing time: 0.011234760284423828 Inference time: 0.05540919303894043 Add cuts time: 0.004746198654174805 Cut analysis time: 0.0007891654968261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00850 (30), -0.00781 (30), -0.00628 (30), -0.00625 (30), -0.00625 (30), -0.00594 (30), -0.00557 (30), -0.00554 (30), -0.00547 (30), -0.00522 (30), -0.00520 (30), -0.00506 (30), -0.00480 (30), -0.00477 (30), -0.00451 (30), -0.00437 (30), -0.00421 (30), -0.00401 (30), -0.00400 (30), -0.00373 (30), 
Length of domains: 84
Time: pickout 0.0059    decision 0.0221    set_bounds 0.0165    solve 0.1595    add 0.0010    
Accumulated time: pickout 0.1249    decision 1.1703    set_bounds 0.7586    solve 4.2082    add 0.5783    
Current (lb-rhs): -0.008499383926391602
6277 domains visited
Cumulative time: 9.227934837341309

BaB round 22
batch: 84
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1410] [/input, 1410] [/input, 1410] [/input, 1410] [/input-8, 214] [/input-8, 214] [/input-8, 214] [/input-8, 214] [/input, 1410] [/input, 1410] 
split level 1: [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] 
cut re-enabled after branching node selection
0 lb beta sum: 3.170619487762451, worst -0.006530165672302246
10 lb beta sum: 3.170619487762451, worst -0.006481766700744629
Time: prepare 0.0159    bound 0.1474    transfer 0.0007    finalize 0.0019    func 0.1681    
Accumulated time: func 4.5841    prepare 0.4288    bound 3.7896    transfer 0.0487    finalize 0.2314    
all_split False
======================Cut inference begins======================
max lb tensor(0.01009178) min lb tensor(-0.00646818)
Number of Verified Splits: 249 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 43
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.06142902374267578 
BICCOS Cumulative time: 2.155524969100952
Preprocessing time: 0.009776830673217773 Inference time: 0.0476682186126709 Add cuts time: 0.003147125244140625 Cut analysis time: 0.0008368492126464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00647 (32), -0.00577 (32), -0.00577 (32), -0.00501 (32), -0.00430 (32), -0.00421 (32), -0.00421 (32), -0.00417 (32), -0.00401 (32), -0.00361 (32), -0.00359 (32), -0.00352 (32), -0.00352 (32), -0.00347 (32), -0.00345 (32), -0.00337 (32), -0.00331 (32), -0.00328 (32), -0.00316 (32), -0.00308 (32), 
Length of domains: 87
Time: pickout 0.0025    decision 0.0184    set_bounds 0.0239    solve 0.1682    add 0.0011    
Accumulated time: pickout 0.1274    decision 1.1888    set_bounds 0.7825    solve 4.3764    add 0.5794    
Current (lb-rhs): -0.00646817684173584
6364 domains visited
Cumulative time: 9.504881620407104

BaB round 23
batch: 87
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] [/input-8, 51] 
split level 1: [/input-8, 214] [/input-8, 214] [/input, 987] [/input, 987] [/input-8, 214] [/input-8, 214] [/input-8, 214] [/input-8, 214] [/input-8, 214] [/input-8, 214] 
cut re-enabled after branching node selection
0 lb beta sum: 2.995342493057251, worst -0.0036112070083618164
10 lb beta sum: 2.995342493057251, worst -0.0035718679428100586
Time: prepare 0.0165    bound 0.1469    transfer 0.0007    finalize 0.0018    func 0.1682    
Accumulated time: func 4.7523    prepare 0.4455    bound 3.9365    transfer 0.0494    finalize 0.2332    
all_split False
======================Cut inference begins======================
max lb tensor(0.01697350) min lb tensor(-0.00355256)
Number of Verified Splits: 331 of 348
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 45
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.07892680168151855 
BICCOS Cumulative time: 2.2344517707824707
Preprocessing time: 0.010041952133178711 Inference time: 0.0643460750579834 Add cuts time: 0.003730297088623047 Cut analysis time: 0.0008084774017333984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00355 (34), -0.00285 (34), -0.00284 (34), -0.00209 (34), -0.00129 (34), -0.00127 (34), -0.00126 (34), -0.00108 (34), -0.00057 (34), -0.00056 (34), -0.00053 (34), -0.00053 (34), -0.00042 (34), -0.00040 (34), -0.00039 (34), -0.00035 (34), -0.00024 (34), 
Length of domains: 17
Time: pickout 0.0024    decision 0.0186    set_bounds 0.0199    solve 0.1683    add 0.0008    
Accumulated time: pickout 0.1298    decision 1.2074    set_bounds 0.8024    solve 4.5446    add 0.5802    
Current (lb-rhs): -0.003552556037902832
6381 domains visited
Cumulative time: 9.795284748077393

BaB round 24
batch: 17
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input, 987] [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] 
split level 1: [/input, 987] [/input, 987] [/input, 987] [/input, 987] [/input, 987] [/input-8, 171] [/input, 987] [/input, 987] [/input, 987] [/input, 987] 
split level 2: [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] [/input-8, 407] 
split level 3: [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] [/input-8, 268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008973121643066406

all verified at 1th iter
Time: prepare 0.0067    bound 0.0191    transfer 0.0007    finalize 0.0015    func 0.0297    
Accumulated time: func 4.7820    prepare 0.4524    bound 3.9556    transfer 0.0501    finalize 0.2347    
all_split False
======================Cut inference begins======================
max lb tensor(0.01041305) min lb tensor(0.00478640)
Number of Verified Splits: 272 of 272
No cut inferred: All or none verified.
Total number of valid cuts: 49.
#cuts 1-3: 45
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.008010149002075195 
BICCOS Cumulative time: 2.242461919784546
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0166    set_bounds 0.0243    solve 0.0298    add 0.0004    
Accumulated time: pickout 0.1312    decision 1.2240    set_bounds 0.8267    solve 4.5745    add 0.5806    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6381 domains visited
Cumulative time: 9.877015590667725


Properties batch 7, size 1
Remaining timeout: 177.64844393730164
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 177.6482274532318
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 22.3518 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 482] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 482] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 215] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04004741, -1.07115650,  0.35848117,  1.95242739,  0.74911088,
          0.26205671,  2.80084324, -0.02647489, -0.53875542]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.02569389, -21.82901001, -23.36814117, -22.22129059, -25.05405426,
          -23.25062561, -22.97693062, -25.95488548, -23.13699722, -22.30997849],
         [-23.02569389, -21.82901001, -23.36814117, -22.22129059, -25.05405426,
          -23.25062561, -22.97693062, -25.95488548, -23.13699722, -22.30997849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80440331, -0.39228058,  0.91570663,  0.08868790]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1050]; unstable size 1050; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 1050] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 1050] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1050] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 329] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.91365588,  2.97547579, -0.38596082, -0.14092672, -0.68310428,
          0.74673349,  1.63518667,  1.76536250,  3.08691525]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.73095417, -15.17011356, -10.95801258, -11.12242126, -10.36753273,
          -12.15822506, -10.36675453, -13.20997334, -13.88632774, -15.23771191],
         [-13.73095417, -15.17011356, -10.95801258, -11.12242126, -10.36753273,
          -12.15822506, -10.36675453, -13.20997334, -13.88632774, -15.23771191]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59125805, 0.75566673, 0.00077820]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1124 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.672630310058594
alpha/beta optimization time: 1.1905715465545654
initial alpha-crown bounds: tensor([[ 2.17554283,  3.15855956, -0.19436073,  0.02832627, -0.55011046,
          0.92495221,  1.83316290,  2.01714516,  3.27941370]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5501104593276978
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6548297405243
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.654789686203
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6547646522522
Verifying property 2 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19436073]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19436073]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.775161743164062e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19435811042785645
10 lb beta sum: 0.0, worst -0.1943678855895996
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 72] 
split level 9: [/input-12, 14] 
split level 10: [/input-12, 6] 
split level 11: [/input-8, 1955] 
split level 12: [/input-12, 12] 
split level 13: [/input-12, 68] 
split level 14: [/input-12, 92] 
split level 15: [/input-8, 738] 
split level 16: [/input-8, 347] 
split level 17: [/input-12, 79] 
split level 18: [/input-8, 804] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 466] 
split level 22: [/input-8, 788] 
split level 23: [/input-8, 490] 
split level 24: [/input-12, 97] 
split level 25: [/input-8, 577] 
split level 26: [/input-8, 154] 
split level 27: [/input-8, 475] 
split level 28: [/input-8, 1372] 
split level 29: [/input-8, 1257] 
split level 30: [/input-8, 162] 
split level 31: [/input-12, 71] 
split level 32: [/input-8, 755] 
split level 33: [/input-8, 357] 
split level 34: [/input-8, 1379] 
split level 35: [/input-8, 434] 
split level 36: [/input-8, 158] 
split level 37: [/input-12, 20] 
split level 38: [/input-8, 148] 
split level 39: [/input-8, 915] 
split level 40: [/input-8, 165] 
split level 41: [/input-8, 91] 
split level 42: [/input-8, 1693] 
split level 43: [/input-8, 1643] 
split level 44: [/input-8, 436] 
split level 45: [/input-8, 779] 
split level 46: [/input-8, 294] 
split level 47: [/input-8, 829] 
split level 48: [/input-8, 460] 
split level 49: [/input-8, 427] 
split level 50: [/input-8, 1388] 
split level 51: [/input-8, 37] 
split level 52: [/input-8, 1254] 
split level 53: [/input-8, 1748] 
split level 54: [/input-8, 1261] 
split level 55: [/input-8, 163] 
split level 56: [/input-8, 156] 
split level 57: [/input-8, 1509] 
split level 58: [/input-8, 1574] 
split level 59: [/input-8, 1556] 
split level 60: [/input-8, 785] 
split level 61: [/input-8, 149] 
split level 62: [/input-8, 1363] 
split level 63: [/input-8, 30] 
split level 64: [/input-8, 26] 
split level 65: [/input-8, 492] 
split level 66: [/input-8, 159] 
split level 67: [/input-8, 777] 
split level 68: [/input-8, 958] 
split level 69: [/input-8, 1659] 
split level 70: [/input-8, 1634] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 411] 
split level 73: [/input-8, 1972] 
split level 74: [/input-8, 1292] 
split level 75: [/input-8, 1214] 
split level 76: [/input-8, 507] 
split level 77: [/input-8, 454] 
split level 78: [/input-8, 1029] 
split level 79: [/input-8, 1028] 
split level 80: [/input-8, 412] 
split level 81: [/input-8, 1340] 
split level 82: [/input-8, 151] 
split level 83: [/input-8, 1229] 
split level 84: [/input-8, 1652] 
split level 85: [/input-8, 1626] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 1301] 
split level 88: [/input-8, 1241] 
split level 89: [/input-8, 1700] 
split level 90: [/input-8, 225] 
split level 91: [/input-8, 92] 
split level 92: [/input-8, 1945] 
split level 93: [/input-8, 782] 
split level 94: [/input-8, 223] 
split level 95: [/input-8, 166] 
split level 96: [/input-8, 1757] 
split level 97: [/input-8, 183] 
split level 98: [/input-8, 1238] 
split level 99: [/input-8, 231] 
split level 100: [/input-8, 1181] 
split level 101: [/input, 2789] 
split level 102: [/input-8, 1246] 
split level 103: [/input-8, 226] 
split level 104: [/input-8, 449] 
split level 105: [/input-8, 1265] 
split level 106: [/input-8, 582] 
split level 107: [/input-8, 1294] 
split level 108: [/input-8, 90] 
split level 109: [/input, 3035] 
split level 110: [/input-8, 217] 
split level 111: [/input-8, 233] 
split level 112: [/input-8, 1329] 
split level 113: [/input-8, 1364] 
split level 114: [/input-8, 178] 
split level 115: [/input-8, 481] 
split level 116: [/input-8, 241] 
split level 117: [/input, 70] 
split level 118: [/input-8, 1228] 
split level 119: [/input-8, 450] 
split level 120: [/input-8, 944] 
split level 121: [/input-8, 1341] 
split level 122: [/input-8, 773] 
split level 123: [/input-8, 170] 
split level 124: [/input-8, 1707] 
split level 125: [/input, 227] 
split level 126: [/input-8, 141] 
split level 127: [/input-8, 624] 
split level 128: [/input-8, 452] 
split level 129: [/input-8, 312] 
split level 130: [/input-8, 182] 
split level 131: [/input, 3433] 
split level 132: [/input-8, 147] 
split level 133: [/input-8, 146] 
split level 134: [/input-8, 1598] 
split level 135: [/input-8, 1337] 
split level 136: [/input-8, 143] 
split level 137: [/input-8, 364] 
split level 138: [/input, 873] 
split level 139: [/input, 2787] 
split level 140: [/input-8, 242] 
split level 141: [/input, 2887] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 169] 
split level 144: [/input-8, 215] 
split level 145: [/input-8, 205] 
split level 146: [/input, 1516] 
split level 147: [/input-8, 209] 
split level 148: [/input-8, 207] 
split level 149: [/input-8, 239] 
split level 150: [/input-8, 253] 
split level 151: [/input-8, 1297] 
split level 152: [/input, 3288] 
split level 153: [/input-8, 234] 
split level 154: [/input, 1205] 
split level 155: [/input, 1891] 
split level 156: [/input, 71] 
split level 157: [/input, 1207] 
split level 158: [/input, 72] 
split level 159: [/input, 942] 
split level 160: [/input-8, 1227] 
split level 161: [/input-8, 230] 
split level 162: [/input-8, 255] 
split level 163: [/input, 2790] 
split level 164: [/input, 137] 
split level 165: [/input-8, 1786] 
split level 166: [/input, 226] 
split level 167: [/input, 3717] 
split level 168: [/input, 1999] 
split level 169: [/input-8, 1302] 
split level 170: [/input-8, 1741] 
split level 171: [/input, 1490] 
split level 172: [/input, 1843] 
split level 173: [/input-8, 1799] 
split level 174: [/input-8, 1279] 
split level 175: [/input, 2649] 
split level 176: [/input-8, 206] 
split level 177: [/input, 3497] 
split level 178: [/input, 2724] 
split level 179: [/input-8, 1233] 
split level 180: [/input, 906] 
split level 181: [/input, 2786] 
split level 182: [/input, 833] 
split level 183: [/input-8, 103] 
split level 184: [/input, 1320] 
split level 185: [/input, 2792] 
split level 186: [/input, 1180] 
split level 187: [/input, 1829] 
split level 188: [/input, 2870] 
split level 189: [/input, 1158] 
split level 190: [/input-8, 179] 
split level 191: [/input, 1918] 
split level 192: [/input, 1937] 
split level 193: [/input, 2632] 
split level 194: [/input, 1886] 
split level 195: [/input, 533] 
split level 196: [/input, 1812] 
split level 197: [/input, 329] 
split level 198: [/input, 2014] 
split level 199: [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19431710243225098
10 lb beta sum: 0.0, worst -0.19430899620056152
Time: prepare 0.0112    bound 0.0947    transfer 0.0010    finalize 0.0031    func 0.1125    
Accumulated time: func 0.1649    prepare 0.0211    bound 0.1467    transfer 0.0011    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.25900924) min lb tensor(-0.19429493)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.010700702667236328 
BICCOS Cumulative time: 0.010700702667236328
Preprocessing time: 0.009914636611938477 Inference time: 0.0003724098205566406 Add cuts time: 0.00013899803161621094 Cut analysis time: 0.000274658203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18179 (1), -0.18149 (1), -0.18013 (1), -0.17981 (1), -0.17886 (1), -0.17876 (1), -0.17840 (1), -0.17834 (1), -0.17800 (1), -0.17737 (1), -0.17729 (1), -0.17621 (1), -0.17578 (1), -0.17548 (1), -0.17532 (1), -0.17460 (1), -0.17446 (1), -0.17431 (1), -0.17361 (1), -0.17353 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5088    set_bounds 0.0087    solve 0.1126    add 0.0708    
Accumulated time: pickout 0.0003    decision 0.5088    set_bounds 0.0087    solve 0.1126    add 0.0708    
Current (lb-rhs): -0.18178558349609375
50 domains visited
Cumulative time: 0.769350528717041

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 31] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1723041534423828

all verified at 8th iter
Time: prepare 0.0068    bound 0.0516    transfer 0.0007    finalize 0.0022    func 0.0638    
Accumulated time: func 0.2287    prepare 0.0281    bound 0.1983    transfer 0.0018    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.15608168) min lb tensor(0.00397283)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03462529182434082 
BICCOS Cumulative time: 0.04532599449157715
Preprocessing time: 0.011575460433959961 Inference time: 0.015180587768554688 Add cuts time: 0.007691144943237305 Cut analysis time: 0.0001780986785888672
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0126    solve 0.0638    add 0.0148    
Accumulated time: pickout 0.0013    decision 0.5284    set_bounds 0.0212    solve 0.1764    add 0.0856    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.93141326e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.36114547e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.62723467e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.43318602e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1502089500427246

all verified at 4th iter
Time: prepare 0.0003    bound 0.0241    transfer 0.0001    finalize 0.0001    func 0.0247    
Accumulated time: func 0.2533    prepare 0.0284    bound 0.2223    transfer 0.0019    finalize 0.0055    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.54696583747864
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.5468943119049
Verifying property 4 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55011046]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55011046]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.608268737792969e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.550107479095459
10 lb beta sum: 0.0, worst -0.5501179695129395
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    func 0.0518    
Accumulated time: func 0.0518    prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 14] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 4] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 79] 
split level 11: [/input-8, 1380] 
split level 12: [/input-12, 92] 
split level 13: [/input-8, 141] 
split level 14: [/input-8, 163] 
split level 15: [/input-8, 1261] 
split level 16: [/input-8, 165] 
split level 17: [/input-8, 1257] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1388] 
split level 20: [/input-8, 738] 
split level 21: [/input-8, 1262] 
split level 22: [/input-8, 1241] 
split level 23: [/input-8, 1574] 
split level 24: [/input-8, 1389] 
split level 25: [/input-8, 30] 
split level 26: [/input-8, 37] 
split level 27: [/input-12, 71] 
split level 28: [/input-8, 1246] 
split level 29: [/input-8, 1254] 
split level 30: [/input-8, 148] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 156] 
split level 33: [/input-8, 1748] 
split level 34: [/input-8, 173] 
split level 35: [/input-8, 1757] 
split level 36: [/input-8, 1181] 
split level 37: [/input-8, 1643] 
split level 38: [/input-8, 1379] 
split level 39: [/input-12, 8] 
split level 40: [/input-8, 1372] 
split level 41: [/input-8, 91] 
split level 42: [/input, 3207] 
split level 43: [/input-8, 1214] 
split level 44: [/input-8, 147] 
split level 45: [/input-8, 149] 
split level 46: [/input-8, 252] 
split level 47: [/input-8, 162] 
split level 48: [/input-8, 294] 
split level 49: [/input-8, 182] 
split level 50: [/input-8, 788] 
split level 51: [/input-8, 154] 
split level 52: [/input-8, 92] 
split level 53: [/input-8, 166] 
split level 54: [/input-8, 755] 
split level 55: [/input-8, 941] 
split level 56: [/input-8, 779] 
split level 57: [/input-8, 1950] 
split level 58: [/input-8, 1738] 
split level 59: [/input-8, 139] 
split level 60: [/input-8, 312] 
split level 61: [/input-8, 2017] 
split level 62: [/input-8, 1265] 
split level 63: [/input-8, 1635] 
split level 64: [/input-8, 944] 
split level 65: [/input-8, 1238] 
split level 66: [/input, 3035] 
split level 67: [/input-8, 1741] 
split level 68: [/input-8, 225] 
split level 69: [/input-8, 492] 
split level 70: [/input-8, 1666] 
split level 71: [/input-8, 1266] 
split level 72: [/input-8, 1390] 
split level 73: [/input-8, 2031] 
split level 74: [/input-8, 1652] 
split level 75: [/input-8, 146] 
split level 76: [/input-8, 223] 
split level 77: [/input-8, 151] 
split level 78: [/input-8, 26] 
split level 79: [/input-8, 218] 
split level 80: [/input-8, 217] 
split level 81: [/input-8, 183] 
split level 82: [/input-8, 253] 
split level 83: [/input-8, 1739] 
split level 84: [/input-8, 221] 
split level 85: [/input-8, 782] 
split level 86: [/input-8, 159] 
split level 87: [/input-12, 72] 
split level 88: [/input-8, 1173] 
split level 89: [/input, 2881] 
split level 90: [/input-8, 181] 
split level 91: [/input-8, 2029] 
split level 92: [/input, 3257] 
split level 93: [/input-8, 25] 
split level 94: [/input-8, 507] 
split level 95: [/input-8, 179] 
split level 96: [/input-8, 231] 
split level 97: [/input-8, 233] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 958] 
split level 100: [/input-8, 582] 
split level 101: [/input, 474] 
split level 102: [/input, 873] 
split level 103: [/input-8, 460] 
split level 104: [/input-8, 357] 
split level 105: [/input-8, 1758] 
split level 106: [/input-8, 170] 
split level 107: [/input, 3190] 
split level 108: [/input-8, 1382] 
split level 109: [/input-8, 213] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 1229] 
split level 112: [/input, 3208] 
split level 113: [/input-8, 1233] 
split level 114: [/input-8, 241] 
split level 115: [/input, 918] 
split level 116: [/input-8, 1029] 
split level 117: [/input, 98] 
split level 118: [/input, 2887] 
split level 119: [/input, 809] 
split level 120: [/input-8, 230] 
split level 121: [/input-8, 454] 
split level 122: [/input-8, 466] 
split level 123: [/input, 3497] 
split level 124: [/input, 3252] 
split level 125: [/input-8, 777] 
split level 126: [/input, 934] 
split level 127: [/input-8, 205] 
split level 128: [/input, 156] 
split level 129: [/input, 2724] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 1786] 
split level 132: [/input-8, 1765] 
split level 133: [/input-8, 364] 
split level 134: [/input, 838] 
split level 135: [/input, 137] 
split level 136: [/input-8, 239] 
split level 137: [/input, 1426] 
split level 138: [/input-8, 242] 
split level 139: [/input-8, 215] 
split level 140: [/input, 854] 
split level 141: [/input, 888] 
split level 142: [/input-8, 624] 
split level 143: [/input, 970] 
split level 144: [/input-8, 207] 
split level 145: [/input-8, 226] 
split level 146: [/input-8, 255] 
split level 147: [/input-8, 1730] 
split level 148: [/input-8, 1030] 
split level 149: [/input, 1180] 
split level 150: [/input-8, 1028] 
split level 151: [/input-8, 138] 
split level 152: [/input-8, 1279] 
split level 153: [/input, 2040] 
split level 154: [/input, 942] 
split level 155: [/input, 2871] 
split level 156: [/input, 2328] 
split level 157: [/input-8, 1378] 
split level 158: [/input-8, 206] 
split level 159: [/input, 1207] 
split level 160: [/input, 793] 
split level 161: [/input, 2971] 
split level 162: [/input, 1516] 
split level 163: [/input, 3433] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 794] 
split level 166: [/input, 457] 
split level 167: [/input, 2664] 
split level 168: [/input, 60] 
split level 169: [/input, 2870] 
split level 170: [/input, 329] 
split level 171: [/input, 1891] 
split level 172: [/input-8, 1799] 
split level 173: [/input, 684] 
split level 174: [/input, 2859] 
split level 175: [/input, 2876] 
split level 176: [/input, 1129] 
split level 177: [/input, 3143] 
split level 178: [/input, 407] 
split level 179: [/input-8, 1244] 
split level 180: [/input-8, 103] 
split level 181: [/input, 162] 
split level 182: [/input, 833] 
split level 183: [/input, 3127] 
split level 184: [/input, 313] 
split level 185: [/input, 97] 
split level 186: [/input, 2883] 
split level 187: [/input, 2330] 
split level 188: [/input, 50] 
split level 189: [/input, 2700] 
split level 190: [/input, 2039] 
split level 191: [/input, 2055] 
split level 192: [/input, 2596] 
split level 193: [/input, 51] 
split level 194: [/input-8, 1602] 
split level 195: [/input, 172] 
split level 196: [/input, 827] 
split level 197: [/input, 2877] 
split level 198: [/input, 3828] 
split level 199: [/input, 3352] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5500569343566895
10 lb beta sum: 0.0, worst -0.5500533580780029
Time: prepare 0.0112    bound 0.0951    transfer 0.0007    finalize 0.0025    func 0.1121    
Accumulated time: func 0.1639    prepare 0.0211    bound 0.1464    transfer 0.0008    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(-0.16415167) min lb tensor(-0.55004525)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.00991964340209961 
BICCOS Cumulative time: 0.00991964340209961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53656 (1), -0.53652 (1), -0.53635 (1), -0.53550 (1), -0.53542 (1), -0.53466 (1), -0.53455 (1), -0.53438 (1), -0.53437 (1), -0.53425 (1), -0.53371 (1), -0.53362 (1), -0.53342 (1), -0.53300 (1), -0.53289 (1), -0.53160 (1), -0.53143 (1), -0.53110 (1), -0.53058 (1), -0.52921 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5085    set_bounds 0.0085    solve 0.1121    add 0.0720    
Accumulated time: pickout 0.0003    decision 0.5085    set_bounds 0.0085    solve 0.1121    add 0.0720    
Current (lb-rhs): -0.5365614891052246
50 domains visited
Cumulative time: 0.7686877250671387

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 90] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5109810829162598
10 lb beta sum: 0.0, worst -0.5103408098220825
Time: prepare 0.0118    bound 0.0939    transfer 0.0008    finalize 0.0021    func 0.1111    
Accumulated time: func 0.2750    prepare 0.0332    bound 0.2404    transfer 0.0016    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.05273628) min lb tensor(-0.51020944)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012548446655273438 
BICCOS Cumulative time: 0.022468090057373047
Preprocessing time: 0.01154470443725586 Inference time: 0.0001735687255859375 Add cuts time: 8.988380432128906e-05 Cut analysis time: 0.0007402896881103516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30637 (2), -0.30529 (2), -0.30373 (2), -0.30332 (2), -0.30317 (2), -0.30291 (2), -0.30003 (2), -0.29927 (2), -0.29747 (2), -0.29461 (2), -0.29327 (2), -0.28569 (2), -0.28229 (2), -0.28135 (2), -0.27804 (2), -0.27728 (2), -0.27563 (2), -0.27371 (2), -0.27271 (2), -0.27093 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0130    solve 0.1112    add 0.0762    
Accumulated time: pickout 0.0014    decision 0.5283    set_bounds 0.0215    solve 0.2234    add 0.1482    
Current (lb-rhs): -0.30637454986572266
100 domains visited
Cumulative time: 1.0028038024902344

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2981431484222412
10 lb beta sum: 0.17166954278945923, worst -0.29816389083862305
Time: prepare 0.0057    bound 0.1144    transfer 0.0008    finalize 0.0021    func 0.1261    
Accumulated time: func 0.4011    prepare 0.0392    bound 0.3548    transfer 0.0024    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.47021657) min lb tensor(-0.29543352)
Number of Verified Splits: 91 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.018183469772338867 
BICCOS Cumulative time: 0.040651559829711914
Preprocessing time: 0.011313676834106445 Inference time: 0.004015207290649414 Add cuts time: 0.0025124549865722656 Cut analysis time: 0.0003421306610107422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10063 (3), -0.10043 (3), -0.09878 (3), -0.09786 (3), -0.09490 (3), -0.09423 (3), -0.09133 (3), -0.09097 (3), -0.08949 (3), -0.08705 (3), -0.08558 (3), -0.08453 (3), -0.08446 (3), -0.08437 (3), -0.08412 (3), -0.08403 (3), -0.08303 (3), -0.08258 (3), -0.08255 (3), -0.08247 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0152    solve 0.1261    add 0.0887    
Accumulated time: pickout 0.0023    decision 0.5475    set_bounds 0.0367    solve 0.3495    add 0.2369    
Current (lb-rhs): -0.10062910616397858
150 domains visited
Cumulative time: 1.271327018737793

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1010892391204834
10 lb beta sum: 0.433500736951828, worst -0.10174417495727539
Time: prepare 0.0054    bound 0.1138    transfer 0.0008    finalize 0.0017    func 0.1242    
Accumulated time: func 0.5253    prepare 0.0448    bound 0.4686    transfer 0.0031    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.30911699) min lb tensor(-0.09445572)
Number of Verified Splits: 197 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 5
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.026767492294311523 
BICCOS Cumulative time: 0.06741905212402344
Preprocessing time: 0.011302947998046875 Inference time: 0.010260343551635742 Add cuts time: 0.004530906677246094 Cut analysis time: 0.0006732940673828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02986 (4), -0.02964 (4), -0.02909 (4), -0.02882 (4), -0.02881 (4), -0.02769 (4), -0.02748 (4), -0.02748 (4), -0.02739 (4), -0.02738 (4), -0.02736 (4), -0.02731 (4), -0.02720 (4), -0.02717 (4), -0.02636 (4), -0.02524 (4), -0.02518 (4), -0.02486 (4), -0.02480 (4), -0.02171 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0153    solve 0.1243    add 0.2521    
Accumulated time: pickout 0.0032    decision 0.5671    set_bounds 0.0519    solve 0.4738    add 0.4891    
Current (lb-rhs): -0.02986311912536621
200 domains visited
Cumulative time: 1.7106177806854248

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 97] [/input-12, 61] [/input-12, 97] [/input-12, 97] 
split level 2: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 14] [/input-12, 14] [/input-12, 68] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 68] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 68] [/input-12, 68] [/input-12, 79] [/input-12, 31] [/input-8, 1266] [/input-12, 31] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04678702354431152
10 lb beta sum: 0.5796747207641602, worst -0.09159505367279053
Time: prepare 0.0058    bound 0.1179    transfer 0.0008    finalize 0.0022    func 0.1299    
Accumulated time: func 0.6552    prepare 0.0509    bound 0.5865    transfer 0.0039    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.11816707) min lb tensor(-0.00234479)
Number of Verified Splits: 396 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.04213094711303711 
BICCOS Cumulative time: 0.10954999923706055
Preprocessing time: 0.011293172836303711 Inference time: 0.021741390228271484 Add cuts time: 0.008405447006225586 Cut analysis time: 0.0006909370422363281
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0195    set_bounds 0.0155    solve 0.1300    add 0.0265    
Accumulated time: pickout 0.0042    decision 0.5865    set_bounds 0.0674    solve 0.6038    add 0.5156    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.89459029e-11, 8.36149901e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.89459029e-11, 2.07253382e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.11779699e-16, 9.31786746e-02, 1.42323244e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.11779699e-16, 9.31786746e-02, 3.75930965e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 6.83509856e-02, 5.88841885e-02,
        6.71090037e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 6.83509856e-02, 5.88841885e-02,
        1.01423159e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 6.83509856e-02, 6.51682317e-02,
        6.50738180e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 6.83509856e-02, 6.51682317e-02,
        1.03617281e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 5.35713136e-02, 6.21563643e-02,
        6.23869896e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 5.35713136e-02, 6.21563643e-02,
        1.01033568e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 5.35713136e-02, 6.34909272e-02,
        7.19676465e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([3.11779699e-16, 2.11438462e-01, 5.35713136e-02, 6.34909272e-02,
        1.01823792e-01]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44938695430755615
10 lb beta sum: 1.1663439273834229, worst -0.4401571750640869
Time: prepare 0.0005    bound 0.1107    transfer 0.0002    finalize 0.0002    func 0.1117    
Accumulated time: func 0.7669    prepare 0.0513    bound 0.6972    transfer 0.0041    finalize 0.0110    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 97] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 4: [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 5: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 6: [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4803200960159302, worst -0.30056655406951904
10 lb beta sum: 0.5190479755401611, worst -0.29944300651550293
Time: prepare 0.0140    bound 0.1113    transfer 0.0019    finalize 0.0022    func 0.1319    
Accumulated time: func 0.8988    prepare 0.0657    bound 0.8085    transfer 0.0061    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.75817120) min lb tensor(-0.29920983)
Number of Verified Splits: 309 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5045976638793945, worst -0.7307052612304688
10 lb beta sum: 0.7567229866981506, worst -0.317001074552536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 6
#cuts 4-6: 26
#cuts 7-9: 24
#cuts >= 20: 0
BICCOS time: 0.3034372329711914 
BICCOS Cumulative time: 0.41298723220825195
Preprocessing time: 0.00938558578491211 Inference time: 0.27731990814208984 Add cuts time: 0.014321088790893555 Cut analysis time: 0.0024106502532958984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29921 (7), -0.29584 (7), -0.26282 (7), -0.25457 (7), -0.23690 (7), -0.23500 (7), -0.22072 (7), -0.21955 (7), -0.21653 (7), -0.21212 (7), -0.18184 (7), -0.17933 (7), -0.17477 (7), -0.16692 (7), -0.15678 (7), -0.15522 (7), -0.15027 (7), -0.14751 (7), -0.12223 (7), -0.11247 (7), 
Length of domains: 75
Time: pickout 0.0006    decision 0.0200    set_bounds 0.0281    solve 0.1320    add 0.0010    
Accumulated time: pickout 0.0047    decision 0.6065    set_bounds 0.0955    solve 0.7358    add 0.5166    
Current (lb-rhs): -0.2992098331451416
275 domains visited
Cumulative time: 2.571155548095703

BaB round 2
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27382707595825195
10 lb beta sum: 0.0473102405667305, worst -0.2734938859939575
Time: prepare 0.0047    bound 0.1172    transfer 0.0010    finalize 0.0021    func 0.1275    
Accumulated time: func 1.0263    prepare 0.0706    bound 0.9257    transfer 0.0070    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.54560494) min lb tensor(-0.27339554)
Number of Verified Splits: 216 of 300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.034503936767578125 
BICCOS Cumulative time: 0.4474911689758301
Preprocessing time: 0.008597373962402344 Inference time: 0.02107405662536621 Add cuts time: 0.004385232925415039 Cut analysis time: 0.00044727325439453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27340 (9), -0.26974 (9), -0.23785 (9), -0.23012 (9), -0.21183 (9), -0.20973 (9), -0.19725 (9), -0.19320 (9), -0.19039 (9), -0.18329 (9), -0.15415 (9), -0.15396 (9), -0.14867 (9), -0.14382 (9), -0.13830 (9), -0.13809 (9), -0.13004 (9), -0.12084 (9), -0.10129 (9), -0.09877 (9), 
Length of domains: 84
Time: pickout 0.0025    decision 0.0177    set_bounds 0.0147    solve 0.1276    add 0.0010    
Accumulated time: pickout 0.0072    decision 0.6242    set_bounds 0.1101    solve 0.8633    add 0.5176    
Current (lb-rhs): -0.2733955383300781
359 domains visited
Cumulative time: 2.77023983001709

BaB round 3
batch: 84
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-8, 1254] [/input-12, 92] [/input-12, 92] [/input-8, 1241] [/input-8, 1246] [/input-12, 92] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-8, 1261] [/input-8, 1241] [/input-8, 37] [/input-8, 37] [/input-8, 1261] [/input-12, 92] [/input-8, 1254] [/input-8, 37] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25248730182647705
10 lb beta sum: 0.1453925371170044, worst -0.25230085849761963
Time: prepare 0.0064    bound 0.1130    transfer 0.0014    finalize 0.0021    func 0.1252    
Accumulated time: func 1.1515    prepare 0.0772    bound 1.0387    transfer 0.0085    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.73691297) min lb tensor(-0.25224268)
Number of Verified Splits: 249 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.037137746810913086 
BICCOS Cumulative time: 0.48462891578674316
Preprocessing time: 0.009578704833984375 Inference time: 0.02469635009765625 Add cuts time: 0.0025606155395507812 Cut analysis time: 0.0003020763397216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25224 (11), -0.25061 (11), -0.24908 (11), -0.24729 (11), -0.24068 (11), -0.23920 (11), -0.23786 (11), -0.23613 (11), -0.21775 (11), -0.21119 (11), -0.20911 (11), -0.20788 (11), -0.20419 (11), -0.19854 (11), -0.19672 (11), -0.19178 (11), -0.19003 (11), -0.18927 (11), -0.18466 (11), -0.18394 (11), 
Length of domains: 87
Time: pickout 0.0018    decision 0.0157    set_bounds 0.0180    solve 0.1253    add 0.0016    
Accumulated time: pickout 0.0090    decision 0.6399    set_bounds 0.1281    solve 0.9887    add 0.5192    
Current (lb-rhs): -0.25224268436431885
446 domains visited
Cumulative time: 2.9712564945220947

BaB round 4
batch: 87
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 37] [/input-8, 1257] [/input-8, 1261] [/input-8, 37] [/input-8, 1257] [/input-8, 1233] [/input-8, 37] [/input-8, 1261] [/input-8, 1261] [/input-8, 37] 
split level 1: [/input-8, 1254] [/input-8, 156] [/input-8, 156] [/input-8, 1254] [/input-8, 1254] [/input-8, 357] [/input-8, 1246] [/input-8, 1254] [/input-8, 156] [/input-8, 1254] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24432802200317383
10 lb beta sum: 0.3176482319831848, worst -0.24415040016174316
Time: prepare 0.0067    bound 0.1282    transfer 0.0007    finalize 0.0029    func 0.1408    
Accumulated time: func 1.2923    prepare 0.0841    bound 1.1669    transfer 0.0092    finalize 0.0203    
all_split False
======================Cut inference begins======================
max lb tensor(0.55605030) min lb tensor(-0.24409938)
Number of Verified Splits: 284 of 348
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.04333019256591797 
BICCOS Cumulative time: 0.5279591083526611
Preprocessing time: 0.0099334716796875 Inference time: 0.02982354164123535 Add cuts time: 0.0031626224517822266 Cut analysis time: 0.0004105567932128906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24410 (13), -0.24316 (13), -0.24190 (13), -0.24097 (13), -0.23930 (13), -0.23909 (13), -0.23814 (13), -0.23607 (13), -0.22626 (13), -0.22595 (13), -0.22407 (13), -0.22222 (13), -0.22219 (13), -0.22040 (13), -0.21978 (13), -0.21774 (13), -0.20835 (13), -0.20553 (13), -0.20220 (13), -0.20002 (13), 
Length of domains: 64
Time: pickout 0.0017    decision 0.0160    set_bounds 0.0158    solve 0.1409    add 0.0023    
Accumulated time: pickout 0.0107    decision 0.6559    set_bounds 0.1440    solve 1.1296    add 0.5215    
Current (lb-rhs): -0.24409937858581543
510 domains visited
Cumulative time: 3.192681074142456

BaB round 5
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 37] [/input-8, 1574] [/input-8, 1262] [/input-8, 1257] [/input-8, 37] [/input-8, 1257] [/input-8, 1262] [/input-8, 37] [/input-8, 37] 
split level 1: [/input-8, 156] [/input-8, 1254] [/input-12, 71] [/input-8, 156] [/input-12, 71] [/input-8, 1254] [/input-8, 1574] [/input-12, 71] [/input-8, 1574] [/input-8, 1254] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2375890016555786
10 lb beta sum: 1.6367884874343872, worst -0.22585594654083252
Time: prepare 0.0050    bound 0.1266    transfer 0.0024    finalize 0.0017    func 0.1374    
Accumulated time: func 1.4297    prepare 0.0894    bound 1.2935    transfer 0.0116    finalize 0.0220    
all_split False
======================Cut inference begins======================
max lb tensor(1.13851023) min lb tensor(-0.22572631)
Number of Verified Splits: 214 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.03349924087524414 
BICCOS Cumulative time: 0.5614583492279053
Preprocessing time: 0.007353544235229492 Inference time: 0.02392721176147461 Add cuts time: 0.0017914772033691406 Cut analysis time: 0.00042700767517089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22573 (15), -0.22443 (15), -0.22370 (15), -0.21770 (15), -0.19424 (15), -0.19419 (15), -0.19278 (15), -0.18893 (15), -0.17323 (15), -0.17244 (15), -0.17078 (15), -0.17012 (15), -0.15301 (15), -0.15226 (15), -0.14757 (15), -0.14614 (15), -0.06398 (15), -0.05841 (15), -0.05762 (15), -0.05750 (15), 
Length of domains: 42
Time: pickout 0.0023    decision 0.0144    set_bounds 0.0132    solve 0.1375    add 0.0012    
Accumulated time: pickout 0.0130    decision 0.6702    set_bounds 0.1572    solve 1.2671    add 0.5228    
Current (lb-rhs): -0.22572630643844604
552 domains visited
Cumulative time: 3.3957955837249756

BaB round 6
batch: 42
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-8, 1246] [/input-8, 165] [/input-8, 37] [/input-8, 1574] [/input-8, 1262] [/input-12, 71] [/input-8, 37] [/input-8, 1246] [/input-8, 165] 
split level 1: [/input-8, 944] [/input-12, 71] [/input-8, 788] [/input-8, 1246] [/input-8, 156] [/input-8, 1246] [/input-8, 788] [/input-8, 156] [/input-8, 156] [/input-8, 788] 
split level 2: [/input-8, 149] [/input-8, 149] [/input-8, 149] [/input-12, 71] [/input-8, 149] [/input-8, 149] [/input-8, 1652] [/input-8, 1246] [/input-8, 149] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21984052658081055
10 lb beta sum: 1.8763424158096313, worst -0.20697951316833496
Time: prepare 0.0064    bound 0.1274    transfer 0.0007    finalize 0.0018    func 0.1386    
Accumulated time: func 1.5683    prepare 0.0960    bound 1.4209    transfer 0.0123    finalize 0.0238    
all_split False
======================Cut inference begins======================
max lb tensor(0.49437213) min lb tensor(-0.20687556)
Number of Verified Splits: 98 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.02371954917907715 
BICCOS Cumulative time: 0.5851778984069824
Preprocessing time: 0.009599685668945312 Inference time: 0.011885404586791992 Add cuts time: 0.0017638206481933594 Cut analysis time: 0.0004706382751464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20688 (18), -0.20568 (18), -0.20537 (18), -0.20531 (18), -0.20471 (18), -0.20420 (18), -0.20409 (18), -0.20366 (18), -0.20331 (18), -0.20269 (18), -0.20235 (18), -0.20141 (18), -0.20098 (18), -0.20062 (18), -0.19986 (18), -0.19936 (18), -0.18838 (18), -0.18810 (18), -0.18700 (18), -0.18668 (18), 
Length of domains: 238
Time: pickout 0.0014    decision 0.0173    set_bounds 0.0210    solve 0.1387    add 0.0015    
Accumulated time: pickout 0.0144    decision 0.6875    set_bounds 0.1782    solve 1.4058    add 0.5243    
Current (lb-rhs): -0.20687556266784668
790 domains visited
Cumulative time: 3.600135564804077

BaB round 7
batch: 238
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 141] [/input-8, 1262] [/input-8, 165] [/input-8, 141] [/input-12, 71] [/input-8, 165] [/input-8, 165] [/input-8, 141] [/input-8, 1262] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21573150157928467
10 lb beta sum: 2.029132127761841, worst -0.20678842067718506
Time: prepare 0.0091    bound 0.1359    transfer 0.0011    finalize 0.0024    func 0.1517    
Accumulated time: func 1.7200    prepare 0.1053    bound 1.5568    transfer 0.0134    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.46209025) min lb tensor(-0.20674706)
Number of Verified Splits: 257 of 476
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.051863670349121094 
BICCOS Cumulative time: 0.6370415687561035
Preprocessing time: 0.013550758361816406 Inference time: 0.03493094444274902 Add cuts time: 0.0028998851776123047 Cut analysis time: 0.0004820823669433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20675 (19), -0.20528 (19), -0.20524 (19), -0.20466 (19), -0.20350 (19), -0.20251 (19), -0.20091 (19), -0.20059 (19), -0.19665 (19), -0.19593 (19), -0.18854 (19), -0.18800 (19), -0.18697 (19), -0.18666 (19), -0.18654 (19), -0.18566 (19), -0.18490 (19), -0.18382 (19), -0.18345 (19), -0.18240 (19), 
Length of domains: 219
Time: pickout 0.0039    decision 0.0243    set_bounds 0.0208    solve 0.1518    add 0.0028    
Accumulated time: pickout 0.0183    decision 0.7119    set_bounds 0.1990    solve 1.5576    add 0.5271    
Current (lb-rhs): -0.20674705505371094
1009 domains visited
Cumulative time: 3.857323169708252

BaB round 8
batch: 219
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 165] [/input-8, 165] [/input-8, 1181] [/input-8, 165] [/input-8, 165] [/input-8, 1262] [/input-8, 173] [/input-8, 165] [/input-8, 1574] [/input-8, 165] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21309280395507812
10 lb beta sum: 2.001915216445923, worst -0.20562541484832764
Time: prepare 0.0085    bound 0.1363    transfer 0.0010    finalize 0.0024    func 0.1511    
Accumulated time: func 1.8710    prepare 0.1140    bound 1.6932    transfer 0.0144    finalize 0.0287    
all_split False
======================Cut inference begins======================
max lb tensor(0.29901218) min lb tensor(-0.20559835)
Number of Verified Splits: 128 of 438
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.034154415130615234 
BICCOS Cumulative time: 0.6711959838867188
Preprocessing time: 0.012768268585205078 Inference time: 0.01880502700805664 Add cuts time: 0.001783132553100586 Cut analysis time: 0.0007979869842529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20560 (20), -0.20414 (20), -0.20388 (20), -0.20327 (20), -0.19955 (20), -0.19915 (20), -0.19823 (20), -0.19722 (20), -0.19612 (20), -0.19507 (20), -0.19458 (20), -0.19441 (20), -0.19265 (20), -0.19246 (20), -0.19033 (20), -0.19011 (20), -0.18675 (20), -0.18647 (20), -0.18536 (20), -0.18533 (20), 
Length of domains: 310
Time: pickout 0.0043    decision 0.0228    set_bounds 0.0192    solve 0.1512    add 0.0023    
Accumulated time: pickout 0.0226    decision 0.7347    set_bounds 0.2182    solve 1.7088    add 0.5294    
Current (lb-rhs): -0.2055983543395996
1319 domains visited
Cumulative time: 4.092492341995239

BaB round 9
batch: 310
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1262] [/input-8, 1262] [/input-8, 173] [/input-8, 1262] [/input-8, 141] [/input-8, 1181] [/input-8, 788] [/input-8, 165] [/input-8, 1246] [/input-8, 1262] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2526745796203613, worst -0.20217561721801758
10 lb beta sum: 2.2526745796203613, worst -0.2021188735961914
Time: prepare 0.0260    bound 0.1372    transfer 0.0013    finalize 0.0040    func 0.1727    
Accumulated time: func 2.0437    prepare 0.1402    bound 1.8304    transfer 0.0157    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.15031409) min lb tensor(-0.20209646)
Number of Verified Splits: 162 of 620
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.04495644569396973 
BICCOS Cumulative time: 0.7161524295806885
Preprocessing time: 0.017645835876464844 Inference time: 0.025002002716064453 Add cuts time: 0.0017960071563720703 Cut analysis time: 0.0005125999450683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20210 (21), -0.20052 (21), -0.20044 (21), -0.19983 (21), -0.19806 (21), -0.19705 (21), -0.19659 (21), -0.19557 (21), -0.19547 (21), -0.19533 (21), -0.19523 (21), -0.19449 (21), -0.19258 (21), -0.19239 (21), -0.19201 (21), -0.19171 (21), -0.19102 (21), -0.19098 (21), -0.19020 (21), -0.19007 (21), 
Length of domains: 458
Time: pickout 0.0056    decision 0.0283    set_bounds 0.0260    solve 0.1728    add 0.0026    
Accumulated time: pickout 0.0282    decision 0.7630    set_bounds 0.2442    solve 1.8817    add 0.5320    
Current (lb-rhs): -0.20209646224975586
1777 domains visited
Cumulative time: 4.374213218688965

BaB round 10
batch: 458
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 779] [/input-8, 1574] [/input-8, 779] [/input-8, 1262] [/input-8, 1246] [/input-8, 1262] [/input-8, 779] [/input-8, 779] [/input-12, 55] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 2.197855234146118, worst -0.2020961046218872
10 lb beta sum: 2.1978771686553955, worst -0.20209228992462158
Time: prepare 0.0388    bound 0.1380    transfer 0.0018    finalize 0.0044    func 0.1898    
Accumulated time: func 2.2335    prepare 0.1792    bound 1.9684    transfer 0.0175    finalize 0.0372    
all_split False
======================Cut inference begins======================
max lb tensor(0.16266680) min lb tensor(-0.20207262)
Number of Verified Splits: 124 of 916
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.04927539825439453 
BICCOS Cumulative time: 0.765427827835083
Preprocessing time: 0.027237653732299805 Inference time: 0.019077301025390625 Add cuts time: 0.0024781227111816406 Cut analysis time: 0.00048232078552246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20207 (22), -0.20051 (22), -0.20039 (22), -0.19977 (22), -0.19621 (22), -0.19533 (22), -0.19503 (22), -0.19501 (22), -0.19497 (22), -0.19434 (22), -0.19406 (22), -0.19395 (22), -0.19365 (22), -0.19348 (22), -0.19312 (22), -0.19278 (22), -0.19245 (22), -0.19162 (22), -0.19094 (22), -0.19092 (22), 
Length of domains: 792
Time: pickout 0.0072    decision 0.0371    set_bounds 0.1934    solve 0.1900    add 0.0059    
Accumulated time: pickout 0.0354    decision 0.8001    set_bounds 0.4376    solve 2.0717    add 0.5379    
Current (lb-rhs): -0.2020726203918457
2569 domains visited
Cumulative time: 4.858635425567627

BaB round 11
batch: 792
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 941] [/input-8, 141] [/input-8, 141] [/input-8, 141] [/input-8, 1241] [/input-8, 1241] [/input-8, 779] [/input-8, 941] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 2.159818649291992, worst -0.2003856897354126
10 lb beta sum: 2.159818649291992, worst -0.20037317276000977
Time: prepare 0.0685    bound 0.1531    transfer 0.0067    finalize 0.0100    func 0.2486    
Accumulated time: func 2.4820    prepare 0.2480    bound 2.1215    transfer 0.0242    finalize 0.0471    
all_split False
======================Cut inference begins======================
max lb tensor(0.24313855) min lb tensor(-0.20035541)
Number of Verified Splits: 91 of 1584
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.06600594520568848 
BICCOS Cumulative time: 0.8314337730407715
Preprocessing time: 0.04869413375854492 Inference time: 0.014624357223510742 Add cuts time: 0.0021657943725585938 Cut analysis time: 0.0005216598510742188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20036 (23), -0.19974 (23), -0.19947 (23), -0.19789 (23), -0.19530 (23), -0.19480 (23), -0.19432 (23), -0.19417 (23), -0.19382 (23), -0.19381 (23), -0.19355 (23), -0.19335 (23), -0.19333 (23), -0.19312 (23), -0.19278 (23), -0.19226 (23), -0.19218 (23), -0.19216 (23), -0.19135 (23), -0.19052 (23), 
Length of domains: 1493
Time: pickout 0.0148    decision 0.0555    set_bounds 0.0659    solve 0.2496    add 0.0116    
Accumulated time: pickout 0.0502    decision 0.8556    set_bounds 0.5035    solve 2.3212    add 0.5494    
Current (lb-rhs): -0.2003554105758667
4062 domains visited
Cumulative time: 5.324578762054443

BaB round 12
batch: 1493
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1238] [/input-8, 147] [/input-8, 1241] [/input-8, 1238] [/input-8, 788] [/input-8, 1262] [/input-8, 1262] [/input-8, 1241] [/input-8, 147] [/input-8, 1241] 
cut re-enabled after branching node selection
0 lb beta sum: 2.140148162841797, worst -0.19947004318237305
10 lb beta sum: 2.140180826187134, worst -0.19948160648345947
Time: prepare 0.1288    bound 0.2293    transfer 0.0231    finalize 0.1520    func 0.5529    
Accumulated time: func 3.0349    prepare 0.3770    bound 2.3508    transfer 0.0474    finalize 0.1992    
all_split False
======================Cut inference begins======================
max lb tensor(0.23232949) min lb tensor(-0.19946241)
Number of Verified Splits: 333 of 2986
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.15819239616394043 
BICCOS Cumulative time: 0.9896261692047119
Preprocessing time: 0.09057259559631348 Inference time: 0.06052398681640625 Add cuts time: 0.006520271301269531 Cut analysis time: 0.0005755424499511719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19946 (24), -0.19805 (24), -0.19788 (24), -0.19738 (24), -0.19401 (24), -0.19355 (24), -0.19319 (24), -0.19259 (24), -0.19234 (24), -0.19224 (24), -0.19217 (24), -0.19209 (24), -0.19201 (24), -0.19140 (24), -0.19139 (24), -0.19135 (24), -0.19113 (24), -0.19092 (24), -0.19088 (24), -0.18935 (24), 
Length of domains: 2653
Time: pickout 0.0237    decision 0.0927    set_bounds 0.1240    solve 0.5534    add 0.0186    
Accumulated time: pickout 0.0739    decision 0.9483    set_bounds 0.6275    solve 2.8747    add 0.5681    
Current (lb-rhs): -0.1994624137878418
6715 domains visited
Cumulative time: 6.30280065536499

BaB round 13
batch: 2653
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1241] [/input-12, 55] [/input-8, 788] [/input-8, 1241] [/input-8, 1241] [/input-8, 141] [/input-12, 55] [/input-8, 141] [/input-8, 1262] [/input-8, 1262] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1091842651367188, worst -0.1994631290435791
10 lb beta sum: 2.1099634170532227, worst -0.19945645332336426
Time: prepare 0.2331    bound 0.3564    transfer 0.0202    finalize 0.0333    func 0.8571    
Accumulated time: func 3.8920    prepare 0.6103    bound 2.7072    transfer 0.0675    finalize 0.2324    
all_split False
======================Cut inference begins======================
max lb tensor(0.22970426) min lb tensor(-0.19944739)
Number of Verified Splits: 815 of 5306
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.3454599380493164 
BICCOS Cumulative time: 1.3350861072540283
Preprocessing time: 0.1655902862548828 Inference time: 0.15778708457946777 Add cuts time: 0.02144908905029297 Cut analysis time: 0.0006334781646728516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19945 (25), -0.19787 (25), -0.19404 (25), -0.19397 (25), -0.19352 (25), -0.19330 (25), -0.19309 (25), -0.19262 (25), -0.19254 (25), -0.19205 (25), -0.19191 (25), -0.19189 (25), -0.19085 (25), -0.19032 (25), -0.18855 (25), -0.18849 (25), -0.18838 (25), -0.18833 (25), -0.18779 (25), -0.18766 (25), 
Length of domains: 4491
Time: pickout 0.0427    decision 0.1511    set_bounds 0.2260    solve 0.8580    add 0.0168    
Accumulated time: pickout 0.1166    decision 1.0994    set_bounds 0.8535    solve 3.7327    add 0.5849    
Current (lb-rhs): -0.1994473934173584
11206 domains visited
Cumulative time: 7.956408262252808

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 1241] [/input-8, 347] [/input-8, 1574] [/input-8, 347] [/input-8, 788] [/input-8, 1241] [/input-8, 788] [/input-8, 1748] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0628015995025635, worst -0.19757699966430664
10 lb beta sum: 2.063152551651001, worst -0.1975613832473755
Time: prepare 0.3666    bound 0.5095    transfer 0.0400    finalize 0.0509    func 1.0201    
Accumulated time: func 4.9121    prepare 0.9772    bound 3.2167    transfer 0.1076    finalize 0.2833    
all_split False
======================Cut inference begins======================
max lb tensor(0.24629498) min lb tensor(-0.19755077)
Number of Verified Splits: 940 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.4822514057159424 
BICCOS Cumulative time: 1.8173375129699707
Preprocessing time: 0.2604212760925293 Inference time: 0.19943761825561523 Add cuts time: 0.02155780792236328 Cut analysis time: 0.0008347034454345703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19755 (26), -0.19588 (26), -0.19352 (26), -0.19215 (26), -0.19140 (26), -0.19078 (26), -0.19058 (26), -0.19001 (26), -0.18964 (26), -0.18884 (26), -0.18766 (26), -0.18766 (26), -0.18760 (26), -0.18758 (26), -0.18749 (26), -0.18731 (26), -0.18680 (26), -0.18660 (26), -0.18654 (26), -0.18647 (26), 
Length of domains: 7647
Time: pickout 0.0676    decision 0.2256    set_bounds 0.5176    solve 1.0222    add 0.0256    
Accumulated time: pickout 0.1842    decision 1.3250    set_bounds 1.3711    solve 4.7549    add 0.6105    
Current (lb-rhs): -0.19755077362060547
18458 domains visited
current_vram/total_varm: 10.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.318379878997803

BaB round 15
batch: 7647
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 147] [/input-8, 1265] [/input-8, 147] [/input-8, 779] [/input-8, 147] [/input-8, 1748] [/input-12, 55] [/input-8, 1265] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0548534393310547, worst -0.193215012550354
10 lb beta sum: 2.0550482273101807, worst -0.19316256046295166
Time: prepare 0.6761    bound 0.8908    transfer 0.0770    finalize 0.1029    func 1.8457    
Accumulated time: func 6.7578    prepare 1.6537    bound 4.1075    transfer 0.1845    finalize 0.3862    
all_split False
======================Cut inference begins======================
max lb tensor(0.24516702) min lb tensor(-0.19314551)
Number of Verified Splits: 1236 of 15294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 25
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.8000173568725586 
BICCOS Cumulative time: 2.6173548698425293
Preprocessing time: 0.48537421226501465 Inference time: 0.28479576110839844 Add cuts time: 0.02921009063720703 Cut analysis time: 0.0006372928619384766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19315 (27), -0.19173 (27), -0.19146 (27), -0.19058 (27), -0.19000 (27), -0.18944 (27), -0.18891 (27), -0.18874 (27), -0.18809 (27), -0.18804 (27), -0.18774 (27), -0.18733 (27), -0.18694 (27), -0.18665 (27), -0.18646 (27), -0.18618 (27), -0.18587 (27), -0.18571 (27), -0.18570 (27), -0.18553 (27), 
Length of domains: 14058
Time: pickout 0.1518    decision 0.6174    set_bounds 0.8654    solve 2.0693    add 0.0490    
Accumulated time: pickout 0.3360    decision 1.9424    set_bounds 2.2365    solve 6.8242    add 0.6595    
Current (lb-rhs): -0.1931455135345459
32516 domains visited
Cumulative time: 14.900951385498047

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 147] [/input-8, 941] [/input-8, 147] [/input-8, 1372] [/input-8, 162] [/input-8, 147] [/input-8, 147] [/input-8, 147] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1919243335723877
10 lb beta sum: 1.3564183712005615, worst -0.19010710716247559
Time: prepare 0.3583    bound 0.9456    transfer 0.0746    finalize 0.3741    func 1.8608    
Accumulated time: func 8.6186    prepare 2.0123    bound 5.0531    transfer 0.2591    finalize 0.7604    
all_split False
======================Cut inference begins======================
max lb tensor(0.31535828) min lb tensor(-0.19008198)
Number of Verified Splits: 8571 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 27
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 2.8164353370666504 
BICCOS Cumulative time: 5.43379020690918
Preprocessing time: 0.5270593166351318 Inference time: 2.1429426670074463 Add cuts time: 0.14568805694580078 Cut analysis time: 0.0007452964782714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19008 (28), -0.18944 (28), -0.18849 (28), -0.18832 (28), -0.18816 (28), -0.18804 (27), -0.18764 (28), -0.18733 (27), -0.18667 (28), -0.18666 (28), -0.18656 (28), -0.18645 (28), -0.18602 (28), -0.18593 (28), -0.18579 (28), -0.18488 (28), -0.18484 (27), -0.18481 (28), -0.18479 (27), -0.18403 (28), 
Length of domains: 13679
Time: pickout 0.1424    decision 0.4511    set_bounds 0.9715    solve 1.8644    add 0.0324    
Accumulated time: pickout 0.4784    decision 2.3935    set_bounds 3.2080    solve 8.6885    add 0.6919    
Current (lb-rhs): -0.19008198380470276
40329 domains visited
current_vram/total_varm: 24.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.29572820663452

BaB round 17
batch: 13679
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 941] [/input-8, 2029] [/input-12, 55] [/input-8, 1241] [/input-8, 149] [/input-8, 1241] [/input-8, 149] [/input-8, 147] [/input-8, 788] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18937575817108154
10 lb beta sum: 1.2935779094696045, worst -0.18759870529174805
Time: prepare 0.6087    bound 1.5376    transfer 0.1363    finalize 0.1872    func 2.6470    
Accumulated time: func 11.2656    prepare 2.6213    bound 6.5906    transfer 0.3955    finalize 0.9476    
all_split False
======================Cut inference begins======================
max lb tensor(0.34862477) min lb tensor(-0.18757677)
Number of Verified Splits: 8390 of 27358
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 3.2163467407226562 
BICCOS Cumulative time: 8.650136947631836
Preprocessing time: 1.2444734573364258 Inference time: 1.810936689376831 Add cuts time: 0.1601264476776123 Cut analysis time: 0.0008101463317871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18758 (29), -0.18697 (29), -0.18599 (29), -0.18582 (29), -0.18578 (29), -0.18559 (28), -0.18509 (29), -0.18442 (29), -0.18420 (29), -0.18412 (29), -0.18353 (29), -0.18353 (29), -0.18340 (29), -0.18340 (29), -0.18290 (28), -0.18271 (29), -0.18238 (29), -0.18228 (29), -0.18225 (28), -0.18195 (28), 
Length of domains: 18968
Time: pickout 0.2953    decision 0.7634    set_bounds 1.8392    solve 2.6526    add 0.0688    
Accumulated time: pickout 0.7737    decision 3.1569    set_bounds 5.0472    solve 11.3412    add 0.7607    
Current (lb-rhs): -0.1875767707824707
59297 domains visited
Cumulative time: 30.258233308792114

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1238] [/input-8, 941] [/input-8, 347] [/input-12, 55] [/input-8, 149] [/input-8, 941] [/input-8, 1748] [/input-8, 1738] [/input-8, 788] [/input-8, 1238] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4217702150344849, worst -0.351665735244751
10 lb beta sum: 1.4826834201812744, worst -0.18593013286590576
Time: prepare 1.4957    bound 1.8222    transfer 0.1494    finalize 0.2375    func 3.9217    
Accumulated time: func 15.1873    prepare 4.1174    bound 8.4129    transfer 0.5448    finalize 1.1851    
all_split False
======================Cut inference begins======================
max lb tensor(0.33970344) min lb tensor(-0.18588972)
Number of Verified Splits: 3750 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 31
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 2.5310111045837402 
BICCOS Cumulative time: 11.181148052215576
Preprocessing time: 1.0675840377807617 Inference time: 1.3739547729492188 Add cuts time: 0.08850407600402832 Cut analysis time: 0.0009682178497314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18599 (29), -0.18589 (30), -0.18558 (29), -0.18420 (29), -0.18405 (30), -0.18334 (30), -0.18320 (30), -0.18271 (29), -0.18264 (30), -0.18237 (30), -0.18194 (29), -0.18168 (30), -0.18166 (30), -0.18165 (30), -0.18137 (30), -0.18134 (29), -0.18113 (29), -0.18106 (30), -0.18093 (30), -0.18067 (30), 
Length of domains: 31602
Time: pickout 0.3033    decision 1.9995    set_bounds 2.3461    solve 3.9285    add 0.1021    
Accumulated time: pickout 1.0769    decision 5.1564    set_bounds 7.3933    solve 15.2697    add 0.8628    
Current (lb-rhs): -0.18599125742912292
88315 domains visited
current_vram/total_varm: 33.6GB/99.9GB, batch_size increase to 32768
Cumulative time: 41.55861258506775

BaB round 19
batch: 31602
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 149] [/input-8, 141] [/input-8, 941] [/input-8, 944] [/input-8, 779] [/input-8, 1757] [/input-8, 146] [/input-8, 1748] [/input-8, 1238] [/input-8, 1372] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18515527248382568
10 lb beta sum: 1.295318365097046, worst -0.1833348274230957
Time: prepare 1.4776    bound 3.4773    transfer 0.3106    finalize 0.4780    func 6.7473    
Accumulated time: func 21.9345    prepare 5.5956    bound 11.8902    transfer 0.8555    finalize 1.6631    
all_split False
======================Cut inference begins======================
max lb tensor(0.65308559) min lb tensor(-0.18331110)
Number of Verified Splits: 13957 of 63204
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 37
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 6.493359565734863 
BICCOS Cumulative time: 17.67450761795044
Preprocessing time: 2.064098596572876 Inference time: 3.8248190879821777 Add cuts time: 0.6032612323760986 Cut analysis time: 0.0011806488037109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18331 (30), -0.18331 (31), -0.18259 (30), -0.18162 (31), -0.18153 (30), -0.18118 (31), -0.18076 (30), -0.18075 (31), -0.18059 (30), -0.18042 (31), -0.18039 (30), -0.18025 (31), -0.18008 (31), -0.17961 (31), -0.17917 (31), -0.17912 (30), -0.17909 (31), -0.17909 (31), -0.17904 (31), -0.17886 (30), 
Length of domains: 49247
Time: pickout 0.6622    decision 3.3171    set_bounds 4.0940    solve 6.7592    add 0.1803    
Accumulated time: pickout 1.7391    decision 8.4735    set_bounds 11.4873    solve 22.0288    add 1.0431    
Current (lb-rhs): -0.1833111047744751
137562 domains visited
Cumulative time: 63.315414905548096

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1181] [/input-8, 147] [/input-8, 779] [/input-8, 788] [/input-8, 1738] [/input-8, 294] [/input-8, 1748] [/input-8, 1748] [/input-8, 294] [/input-8, 941] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18328416347503662
10 lb beta sum: 1.8557558059692383, worst -0.17893356084823608
Time: prepare 1.5682    bound 8.8037    transfer 0.3026    finalize 1.3671    func 12.4698    
Accumulated time: func 34.4043    prepare 7.1643    bound 20.6939    transfer 1.1581    finalize 3.0302    
all_split False
======================Cut inference begins======================
max lb tensor(0.98394972) min lb tensor(-0.17889965)
Number of Verified Splits: 36162 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 38
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 12.801478385925293 
BICCOS Cumulative time: 30.475986003875732
Preprocessing time: 2.177175283432007 Inference time: 9.613783597946167 Add cuts time: 1.008995532989502 Cut analysis time: 0.0015239715576171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18331 (31), -0.18118 (31), -0.18042 (31), -0.18008 (31), -0.17961 (31), -0.17904 (31), -0.17890 (31), -0.17886 (30), -0.17879 (31), -0.17820 (31), -0.17797 (31), -0.17792 (31), -0.17723 (31), -0.17701 (31), -0.17676 (31), -0.17665 (31), -0.17650 (31), -0.17642 (30), -0.17634 (32), -0.17632 (31), 
Length of domains: 45853
Time: pickout 0.6330    decision 3.6460    set_bounds 3.9807    solve 12.4836    add 0.1506    
Accumulated time: pickout 2.3721    decision 12.1194    set_bounds 15.4680    solve 34.5125    add 1.1938    
Current (lb-rhs): -0.18330872058868408
166936 domains visited
Cumulative time: 97.57641506195068

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1241] [/input-8, 1372] [/input-8, 149] [/input-8, 1652] [/input-8, 1372] [/input-8, 146] [/input-8, 1652] [/input-8, 1652] [/input-8, 1372] [/input-8, 1372] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9014383554458618, worst -1.082679271697998
10 lb beta sum: 2.6311769485473633, worst -0.17437326908111572
Time: prepare 2.3725    bound 8.8051    transfer 0.3093    finalize 0.5947    func 12.5238    
Accumulated time: func 46.9281    prepare 9.5373    bound 29.4990    transfer 1.4673    finalize 3.6249    
all_split False
======================Cut inference begins======================
max lb tensor(1.33116245) min lb tensor(-0.17359728)
Number of Verified Splits: 54258 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 47
#cuts >= 20: 0
BICCOS time: 19.311945915222168 
BICCOS Cumulative time: 49.7879319190979
Preprocessing time: 3.310129404067993 Inference time: 14.692781925201416 Add cuts time: 1.3074123859405518 Cut analysis time: 0.0016222000122070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17890 (31), -0.17701 (31), -0.17650 (31), -0.17634 (32), -0.17577 (31), -0.17555 (31), -0.17453 (32), -0.17443 (32), -0.17360 (32), -0.17348 (32), -0.17328 (32), -0.17304 (32), -0.17270 (32), -0.17253 (32), -0.17236 (33), -0.17234 (32), -0.17219 (31), -0.17191 (32), -0.17187 (32), -0.17139 (32), 
Length of domains: 24363
Time: pickout 0.6939    decision 4.2049    set_bounds 5.0359    solve 12.5398    add 0.0668    
Accumulated time: pickout 3.0660    decision 16.3244    set_bounds 20.5039    solve 47.0523    add 1.2606    
Current (lb-rhs): -0.1788996458053589
178214 domains visited
Cumulative time: 140.258727312088

BaB round 22
batch: 24363
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1741] [/input-8, 294] [/input-8, 1388] [/input-8, 146] [/input-8, 941] [/input, 2150] [/input-8, 1388] [/input-8, 1388] [/input-8, 788] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18183326721191406
10 lb beta sum: 4.071112155914307, worst -0.15685021877288818
Time: prepare 1.2002    bound 2.7176    transfer 0.2404    finalize 0.3873    func 5.5945    
Accumulated time: func 52.5226    prepare 10.7380    bound 32.2166    transfer 1.7077    finalize 4.0122    
all_split False
======================Cut inference begins======================
max lb tensor(1.37777686) min lb tensor(-0.15680504)
Number of Verified Splits: 43849 of 48726
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 15.113038063049316 
BICCOS Cumulative time: 64.90096998214722
Preprocessing time: 1.7126240730285645 Inference time: 12.443282127380371 Add cuts time: 0.9564979076385498 Cut analysis time: 0.0006339550018310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15681 (34), -0.15678 (33), -0.15636 (32), -0.15540 (32), -0.15238 (33), -0.15227 (33), -0.15100 (33), -0.15097 (33), -0.15096 (33), -0.15089 (34), -0.15080 (33), -0.15044 (34), -0.14977 (33), -0.14977 (33), -0.14977 (33), -0.14967 (32), -0.14933 (33), -0.14933 (33), -0.14926 (33), -0.14905 (33), 
Length of domains: 4877
Time: pickout 0.5365    decision 2.8319    set_bounds 3.1353    solve 5.6054    add 0.0452    
Accumulated time: pickout 3.6025    decision 19.1563    set_bounds 23.6392    solve 52.6577    add 1.3058    
Current (lb-rhs): -0.15680503845214844
183091 domains visited
Cumulative time: 168.12277913093567

BaB round 23
batch: 4877
splitting decisions: 
split level 0: [/input, 873] [/input, 346] [/input, 858] [/input-8, 182] [/input-8, 941] [/input-8, 1372] [/input-8, 1372] [/input-8, 146] [/input, 873] [/input, 858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17658674716949463
10 lb beta sum: 0.29854825139045715, worst -0.0018034279346466064
Time: prepare 0.2405    bound 0.4646    transfer 0.0481    finalize 0.0659    func 0.8823    
Accumulated time: func 53.4049    prepare 10.9788    bound 32.6813    transfer 1.7559    finalize 4.0781    
all_split False
======================Cut inference begins======================
max lb tensor(0.32024273) min lb tensor(0.03105906)
Number of Verified Splits: 9754 of 9754
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.32768917083740234 
BICCOS Cumulative time: 65.22865915298462
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1187    decision 0.2830    set_bounds 0.4480    solve 0.8856    add 0.0006    
Accumulated time: pickout 3.7212    decision 19.4393    set_bounds 24.0872    solve 53.5432    add 1.3064    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
183091 domains visited
Cumulative time: 170.27398443222046


Properties batch 5, size 1
Remaining timeout: 27.11961555480957
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 27.11948251724243
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 27.119454383850098
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 27.119434595108032
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 172.8806 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.67420197, -25.24380302, -28.67889023, -28.16714287, -31.08404350,
         -29.38106728, -30.15142441, -31.47988510, -26.39269066, -27.12945747]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 576] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 576] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 130] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58424473, 2.27789783, 1.83070779, 4.66640186, 2.88375139, 3.73132420,
         4.99384785, 0.22025633, 1.28892267]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0679 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [969]; unstable size 969; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 342, 1, 969] with unstable size 341 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 969] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 969] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [341]; unstable size 341; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 341] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 341] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74619865,  0.19975424,  1.29172349, -0.31224060,  1.47659242,
          0.91263318,  0.33260149, -2.13532138, -1.77720308]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092],
         [-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07573318,  1.16929817, -0.93408966, -0.28487396]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0549 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.59115791, -34.97940826, -33.80213165, -37.62691879, -34.83726883,
         -38.96181488, -38.03176880, -36.83436584, -27.23085785, -35.44748306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 675] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 675] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 186] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53111196,  6.68231106,  5.40997362,  9.09447861,  6.24458981,
         10.17940712,  9.45173359,  8.14738560,  7.13950729]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0433 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 591] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 591] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 126] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.02588916,  2.80756664, -2.69469118, -0.18732262, -1.80930626,
         -1.25439477,  0.15932631,  1.76952982,  3.03217888]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113],
         [-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.90383148,  0.50087929, -1.11176300, -0.44750977]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0739 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1119]; unstable size 1119; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 1119] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1119] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1119] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 286] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.60318446,  7.55680656,  1.79625523, -0.18556580,  1.88933921,
          1.24666572,  2.70503998,  5.15829563,  6.78245783]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81661415, -22.46876526, -13.03005505, -15.94738007, -13.62407589,
          -16.17176628, -15.44046783, -17.37049484, -19.77799225, -21.58205223]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59402084]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1148 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 31.233135223388672
alpha/beta optimization time: 1.1890833377838135
initial alpha-crown bounds: tensor([[ 3.65190935,  7.65019274,  1.84882736, -0.11801714,  1.94617391,
          1.30992043,  2.79970646,  5.27360296,  6.87082005]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11801713705062866
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6553361415863
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.65529918670654
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65527725219727
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6552574634552
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11801714]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
        -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11801714]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1119
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 284
Node /15 input 0: size torch.Size([100]) unstable 28
-----------------
# of unstable neurons: 1431
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010466575622558594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11801788210868835
10 lb beta sum: 0.0, worst -0.11801809072494507
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 67] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 10] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 55] 
split level 10: [/input-12, 83] 
split level 11: [/input-12, 42] 
split level 12: [/input-8, 2013] 
split level 13: [/input-12, 86] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 181] 
split level 17: [/input-8, 182] 
split level 18: [/input-8, 156] 
split level 19: [/input-8, 2009] 
split level 20: [/input-8, 1076] 
split level 21: [/input-8, 1389] 
split level 22: [/input-8, 1186] 
split level 23: [/input-8, 1372] 
split level 24: [/input-8, 1244] 
split level 25: [/input-8, 2005] 
split level 26: [/input-8, 1181] 
split level 27: [/input-8, 1390] 
split level 28: [/input-8, 171] 
split level 29: [/input-8, 1366] 
split level 30: [/input-12, 35] 
split level 31: [/input-8, 1373] 
split level 32: [/input, 3258] 
split level 33: [/input-8, 1365] 
split level 34: [/input-8, 2012] 
split level 35: [/input-8, 2010] 
split level 36: [/input-8, 101] 
split level 37: [/input, 3206] 
split level 38: [/input-8, 93] 
split level 39: [/input, 968] 
split level 40: [/input-8, 1356] 
split level 41: [/input-8, 354] 
split level 42: [/input, 3273] 
split level 43: [/input-8, 251] 
split level 44: [/input-8, 1367] 
split level 45: [/input, 920] 
split level 46: [/input, 3241] 
split level 47: [/input-8, 252] 
split level 48: [/input-8, 1358] 
split level 49: [/input, 629] 
split level 50: [/input-8, 907] 
split level 51: [/input, 819] 
split level 52: [/input-8, 1369] 
split level 53: [/input-8, 1378] 
split level 54: [/input-8, 102] 
split level 55: [/input-8, 1359] 
split level 56: [/input, 3188] 
split level 57: [/input, 2762] 
split level 58: [/input-8, 1174] 
split level 59: [/input-8, 2008] 
split level 60: [/input-8, 2031] 
split level 61: [/input-8, 1211] 
split level 62: [/input-8, 817] 
split level 63: [/input-8, 203] 
split level 64: [/input-8, 250] 
split level 65: [/input-8, 1385] 
split level 66: [/input-8, 16] 
split level 67: [/input-8, 1377] 
split level 68: [/input-8, 189] 
split level 69: [/input, 804] 
split level 70: [/input-8, 1361] 
split level 71: [/input, 3226] 
split level 72: [/input-8, 1147] 
split level 73: [/input, 2694] 
split level 74: [/input-8, 147] 
split level 75: [/input, 820] 
split level 76: [/input, 3222] 
split level 77: [/input-8, 188] 
split level 78: [/input, 3221] 
split level 79: [/input-8, 1146] 
split level 80: [/input-8, 1185] 
split level 81: [/input, 2867] 
split level 82: [/input, 3171] 
split level 83: [/input-8, 2003] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 24] 
split level 86: [/input-8, 774] 
split level 87: [/input, 2835] 
split level 88: [/input, 3532] 
split level 89: [/input-8, 337] 
split level 90: [/input, 836] 
split level 91: [/input-8, 1061] 
split level 92: [/input, 3209] 
split level 93: [/input, 835] 
split level 94: [/input, 2678] 
split level 95: [/input-8, 479] 
split level 96: [/input-8, 190] 
split level 97: [/input, 803] 
split level 98: [/input-8, 17] 
split level 99: [/input-8, 1386] 
split level 100: [/input, 81] 
split level 101: [/input, 936] 
split level 102: [/input, 3464] 
split level 103: [/input, 2883] 
split level 104: [/input, 825] 
split level 105: [/input, 2865] 
split level 106: [/input, 2697] 
split level 107: [/input, 2851] 
split level 108: [/input, 2866] 
split level 109: [/input-8, 1398] 
split level 110: [/input, 3238] 
split level 111: [/input, 940] 
split level 112: [/input-8, 249] 
split level 113: [/input, 2696] 
split level 114: [/input, 3187] 
split level 115: [/input-8, 1399] 
split level 116: [/input-8, 32] 
split level 117: [/input-8, 607] 
split level 118: [/input, 2882] 
split level 119: [/input-8, 809] 
split level 120: [/input-8, 336] 
split level 121: [/input, 3146] 
split level 122: [/input, 2881] 
split level 123: [/input, 2849] 
split level 124: [/input, 2748] 
split level 125: [/input, 3155] 
split level 126: [/input, 2764] 
split level 127: [/input, 3500] 
split level 128: [/input, 3484] 
split level 129: [/input-8, 773] 
split level 130: [/input, 909] 
split level 131: [/input-8, 992] 
split level 132: [/input, 49] 
split level 133: [/input, 50] 
split level 134: [/input, 808] 
split level 135: [/input, 78] 
split level 136: [/input, 1401] 
split level 137: [/input, 2852] 
split level 138: [/input, 841] 
split level 139: [/input, 97] 
split level 140: [/input, 2913] 
split level 141: [/input, 115] 
split level 142: [/input, 3303] 
split level 143: [/input, 293] 
split level 144: [/input, 3562] 
split level 145: [/input, 98] 
split level 146: [/input, 110] 
split level 147: [/input, 82] 
split level 148: [/input, 65] 
split level 149: [/input, 3530] 
split level 150: [/input, 142] 
split level 151: [/input, 910] 
split level 152: [/input, 934] 
split level 153: [/input-8, 323] 
split level 154: [/input, 957] 
split level 155: [/input-8, 1199] 
split level 156: [/input-8, 1603] 
split level 157: [/input-8, 1387] 
split level 158: [/input, 62] 
split level 159: [/input, 93] 
split level 160: [/input, 2897] 
split level 161: [/input, 2731] 
split level 162: [/input, 2510] 
split level 163: [/input, 126] 
split level 164: [/input-8, 97] 
split level 165: [/input-8, 255] 
split level 166: [/input, 3028] 
split level 167: [/input, 51] 
split level 168: [/input, 33] 
split level 169: [/input, 113] 
split level 170: [/input, 3006] 
split level 171: [/input, 990] 
split level 172: [/input-8, 85] 
split level 173: [/input, 77] 
split level 174: [/input, 3147] 
split level 175: [/input, 888] 
split level 176: [/input, 2158] 
split level 177: [/input, 2359] 
split level 178: [/input, 99] 
split level 179: [/input-8, 1198] 
split level 180: [/input, 66] 
split level 181: [/input, 2142] 
split level 182: [/input-8, 1355] 
split level 183: [/input, 114] 
split level 184: [/input-8, 771] 
split level 185: [/input, 61] 
split level 186: [/input, 2914] 
split level 187: [/input, 124] 
split level 188: [/input, 2869] 
split level 189: [/input, 2750] 
split level 190: [/input, 2686] 
split level 191: [/input, 3483] 
split level 192: [/input, 3469] 
split level 193: [/input, 3113] 
split level 194: [/input, 3517] 
split level 195: [/input, 3132] 
split level 196: [/input, 3114] 
split level 197: [/input, 60] 
split level 198: [/input, 3130] 
split level 199: [/input, 2858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11799067258834839
10 lb beta sum: 0.0, worst -0.11799216270446777
Time: prepare 0.0113    bound 0.0963    transfer 0.0009    finalize 0.0027    func 0.1138    
Accumulated time: func 0.1661    prepare 0.0212    bound 0.1482    transfer 0.0010    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.26626384) min lb tensor(-0.11798903)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01075291633605957 
BICCOS Cumulative time: 0.01075291633605957
Preprocessing time: 0.010097503662109375 Inference time: 0.00026535987854003906 Add cuts time: 0.00011348724365234375 Cut analysis time: 0.0002765655517578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10951 (1), -0.10950 (1), -0.10938 (1), -0.10927 (1), -0.10901 (1), -0.10894 (1), -0.10859 (1), -0.10842 (1), -0.10824 (1), -0.10817 (1), -0.10783 (1), -0.10661 (1), -0.10605 (1), -0.10541 (1), -0.10505 (1), -0.10492 (1), -0.10476 (1), -0.10476 (1), -0.10374 (1), -0.10358 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5123    set_bounds 0.0086    solve 0.1139    add 0.0733    
Accumulated time: pickout 0.0003    decision 0.5123    set_bounds 0.0086    solve 0.1139    add 0.0733    
Current (lb-rhs): -0.10950511693954468
50 domains visited
Cumulative time: 0.7828323841094971

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 2: [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 97] [/input-12, 10] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07104873657226562

all verified at 9th iter
Time: prepare 0.0071    bound 0.0572    transfer 0.0007    finalize 0.0023    func 0.0699    
Accumulated time: func 0.2360    prepare 0.0286    bound 0.2054    transfer 0.0018    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.15373284) min lb tensor(0.00017342)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.034403085708618164 
BICCOS Cumulative time: 0.045156002044677734
Preprocessing time: 0.011499643325805664 Inference time: 0.01534271240234375 Add cuts time: 0.007376670837402344 Cut analysis time: 0.00018405914306640625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0213    set_bounds 0.0127    solve 0.0700    add 0.0149    
Accumulated time: pickout 0.0015    decision 0.5336    set_bounds 0.0213    solve 0.1839    add 0.0882    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.45125732e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  9.77160186e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.44815907e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.02074429e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03324359655380249

all verified at 0th iter
Time: prepare 0.0004    bound 0.0048    transfer 0.0001    finalize 0.0002    func 0.0055    
Accumulated time: func 0.2416    prepare 0.0290    bound 0.2102    transfer 0.0019    finalize 0.0053    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.4126377105713
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.41256022453308
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.41253471374512
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.41251373291016
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.4122953414917
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5878 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 578] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 578] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 152] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.58451438,  2.26354074,  0.51416564, -1.32598007,  0.81975007,
         -0.53718352,  0.88996971, -0.70218873,  0.60620236]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320],
         [-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.49207020,  0.43012428,  0.74332428]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0586 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 550] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 550] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 295] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.52899981,  3.35346985, -0.60972607,  1.57596016,  1.06331682,
         -0.42583418,  1.62264967,  1.54576683,  3.27385855]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.16it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.79688454, -20.48247719, -15.16759300, -17.41525078, -15.03807354,
          -17.04138947, -15.56449890, -17.84644318, -18.37698746, -20.11083412],
         [-16.79688454, -20.48247719, -15.16759300, -17.41525078, -15.03807354,
          -17.04138947, -15.56449890, -17.84644318, -18.37698746, -20.11083412]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12951946, 0.52642536]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1121 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.636504173278809
alpha/beta optimization time: 1.1868553161621094
initial alpha-crown bounds: tensor([[ 0.60815430,  3.47484493, -0.55310154,  1.62192667,  1.11317444,
         -0.37937427,  1.72037292,  1.66001701,  3.37049007]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5531015396118164
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.65153169631958
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.65149402618408
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65147185325623
Verifying property 2 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55310154]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55310154]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.441375732421875e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5530999898910522
10 lb beta sum: 0.0, worst -0.5531032085418701
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 8] 
split level 3: [/input-12, 6] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 46] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 49] 
split level 9: [/input-12, 18] 
split level 10: [/input-8, 1726] 
split level 11: [/input-8, 1626] 
split level 12: [/input-12, 7] 
split level 13: [/input-8, 1692] 
split level 14: [/input-8, 1964] 
split level 15: [/input-8, 1693] 
split level 16: [/input-8, 1635] 
split level 17: [/input-12, 20] 
split level 18: [/input-8, 1708] 
split level 19: [/input-8, 420] 
split level 20: [/input-8, 1700] 
split level 21: [/input-8, 1044] 
split level 22: [/input-8, 1630] 
split level 23: [/input-8, 1636] 
split level 24: [/input-8, 1969] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 1658] 
split level 27: [/input-8, 468] 
split level 28: [/input-8, 459] 
split level 29: [/input-8, 490] 
split level 30: [/input-8, 1716] 
split level 31: [/input-8, 633] 
split level 32: [/input-8, 1717] 
split level 33: [/input-8, 1650] 
split level 34: [/input-8, 473] 
split level 35: [/input-8, 593] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 1403] 
split level 38: [/input-8, 425] 
split level 39: [/input-8, 795] 
split level 40: [/input-8, 466] 
split level 41: [/input-8, 1298] 
split level 42: [/input-8, 1686] 
split level 43: [/input-8, 497] 
split level 44: [/input-8, 458] 
split level 45: [/input-8, 505] 
split level 46: [/input-8, 1703] 
split level 47: [/input-8, 1633] 
split level 48: [/input-8, 1695] 
split level 49: [/input-8, 462] 
split level 50: [/input-8, 1659] 
split level 51: [/input-8, 1268] 
split level 52: [/input-8, 1660] 
split level 53: [/input-8, 1651] 
split level 54: [/input-8, 1972] 
split level 55: [/input-8, 1714] 
split level 56: [/input-8, 1929] 
split level 57: [/input-8, 498] 
split level 58: [/input-8, 433] 
split level 59: [/input-8, 1612] 
split level 60: [/input-8, 92] 
split level 61: [/input-8, 1339] 
split level 62: [/input-8, 1294] 
split level 63: [/input-8, 635] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 1226] 
split level 66: [/input-8, 939] 
split level 67: [/input, 394] 
split level 68: [/input-8, 1572] 
split level 69: [/input-8, 432] 
split level 70: [/input-8, 438] 
split level 71: [/input-8, 1310] 
split level 72: [/input-8, 1522] 
split level 73: [/input-8, 434] 
split level 74: [/input-8, 1713] 
split level 75: [/input, 2953] 
split level 76: [/input-8, 1252] 
split level 77: [/input-8, 626] 
split level 78: [/input-8, 1789] 
split level 79: [/input-8, 1683] 
split level 80: [/input-8, 1588] 
split level 81: [/input-8, 1306] 
split level 82: [/input, 2938] 
split level 83: [/input, 616] 
split level 84: [/input-8, 900] 
split level 85: [/input-8, 1244] 
split level 86: [/input-8, 1657] 
split level 87: [/input-8, 1314] 
split level 88: [/input-8, 1320] 
split level 89: [/input, 1418] 
split level 90: [/input-8, 439] 
split level 91: [/input-8, 931] 
split level 92: [/input-8, 636] 
split level 93: [/input, 385] 
split level 94: [/input, 2982] 
split level 95: [/input-8, 392] 
split level 96: [/input-8, 413] 
split level 97: [/input, 2931] 
split level 98: [/input-8, 1580] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1978] 
split level 101: [/input-8, 1973] 
split level 102: [/input-8, 76] 
split level 103: [/input-8, 1967] 
split level 104: [/input-8, 1704] 
split level 105: [/input-8, 1790] 
split level 106: [/input-8, 1267] 
split level 107: [/input-8, 329] 
split level 108: [/input, 2906] 
split level 109: [/input-8, 1563] 
split level 110: [/input-8, 918] 
split level 111: [/input-8, 803] 
split level 112: [/input, 1649] 
split level 113: [/input-8, 1649] 
split level 114: [/input-8, 75] 
split level 115: [/input, 1500] 
split level 116: [/input-8, 1531] 
split level 117: [/input, 151] 
split level 118: [/input-8, 1337] 
split level 119: [/input-8, 1331] 
split level 120: [/input-8, 486] 
split level 121: [/input-8, 1604] 
split level 122: [/input-8, 410] 
split level 123: [/input-8, 453] 
split level 124: [/input-8, 629] 
split level 125: [/input-8, 442] 
split level 126: [/input-8, 83] 
split level 127: [/input-8, 416] 
split level 128: [/input-8, 53] 
split level 129: [/input, 2173] 
split level 130: [/input-8, 229] 
split level 131: [/input, 2547] 
split level 132: [/input-8, 445] 
split level 133: [/input-8, 785] 
split level 134: [/input, 4005] 
split level 135: [/input-8, 407] 
split level 136: [/input-8, 74] 
split level 137: [/input-8, 1668] 
split level 138: [/input, 4035] 
split level 139: [/input-8, 73] 
split level 140: [/input, 2186] 
split level 141: [/input, 342] 
split level 142: [/input, 2454] 
split level 143: [/input, 1126] 
split level 144: [/input, 2555] 
split level 145: [/input-8, 15] 
split level 146: [/input, 328] 
split level 147: [/input-8, 319] 
split level 148: [/input-8, 400] 
split level 149: [/input, 2263] 
split level 150: [/input-8, 153] 
split level 151: [/input-8, 1269] 
split level 152: [/input, 169] 
split level 153: [/input, 2538] 
split level 154: [/input, 2961] 
split level 155: [/input-8, 805] 
split level 156: [/input, 2189] 
split level 157: [/input, 2157] 
split level 158: [/input-8, 1775] 
split level 159: [/input-8, 1517] 
split level 160: [/input-8, 1336] 
split level 161: [/input, 2460] 
split level 162: [/input-8, 899] 
split level 163: [/input-8, 311] 
split level 164: [/input-8, 1653] 
split level 165: [/input-8, 1773] 
split level 166: [/input, 3070] 
split level 167: [/input-8, 1289] 
split level 168: [/input-8, 1259] 
split level 169: [/input-8, 78] 
split level 170: [/input, 1512] 
split level 171: [/input, 311] 
split level 172: [/input-8, 1765] 
split level 173: [/input, 344] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 2181] 
split level 176: [/input-8, 1921] 
split level 177: [/input, 2838] 
split level 178: [/input, 3922] 
split level 179: [/input, 3573] 
split level 180: [/input-8, 1776] 
split level 181: [/input, 3557] 
split level 182: [/input, 2165] 
split level 183: [/input, 2519] 
split level 184: [/input-8, 1770] 
split level 185: [/input, 2789] 
split level 186: [/input, 1788] 
split level 187: [/input, 2550] 
split level 188: [/input, 4078] 
split level 189: [/input, 1478] 
split level 190: [/input, 2252] 
split level 191: [/input, 1961] 
split level 192: [/input, 2506] 
split level 193: [/input, 3427] 
split level 194: [/input, 4021] 
split level 195: [/input, 2412] 
split level 196: [/input, 2261] 
split level 197: [/input, 2754] 
split level 198: [/input, 2977] 
split level 199: [/input, 2927] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.55303955078125
10 lb beta sum: 0.0, worst -0.553036630153656
Time: prepare 0.0112    bound 0.0969    transfer 0.0022    finalize 0.0025    func 0.1155    
Accumulated time: func 0.1679    prepare 0.0212    bound 0.1489    transfer 0.0023    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02364206) min lb tensor(-0.55303609)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010211944580078125 
BICCOS Cumulative time: 0.010211944580078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53740 (1), -0.53731 (1), -0.53722 (1), -0.53664 (1), -0.53656 (1), -0.53620 (1), -0.53602 (1), -0.53593 (1), -0.53592 (1), -0.53563 (1), -0.53561 (1), -0.53534 (1), -0.53448 (1), -0.53391 (1), -0.53284 (1), -0.53260 (1), -0.53131 (1), -0.53113 (1), -0.53052 (1), -0.53031 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5125    set_bounds 0.0085    solve 0.1156    add 0.0659    
Accumulated time: pickout 0.0003    decision 0.5125    set_bounds 0.0085    solve 0.1156    add 0.0659    
Current (lb-rhs): -0.5374041199684143
50 domains visited
Cumulative time: 0.7726280689239502

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 69] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 69] 
split level 3: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5079300403594971
10 lb beta sum: 0.0, worst -0.5074087381362915
Time: prepare 0.0121    bound 0.0945    transfer 0.0007    finalize 0.0021    func 0.1120    
Accumulated time: func 0.2800    prepare 0.0335    bound 0.2434    transfer 0.0031    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.18786633) min lb tensor(-0.50735533)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012450218200683594 
BICCOS Cumulative time: 0.02266216278076172
Preprocessing time: 0.011588573455810547 Inference time: 0.0004260540008544922 Add cuts time: 0.00019431114196777344 Cut analysis time: 0.00024127960205078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26148 (2), -0.26059 (2), -0.25961 (2), -0.25957 (2), -0.25947 (2), -0.25940 (2), -0.25897 (2), -0.25845 (2), -0.25821 (2), -0.25724 (2), -0.25682 (2), -0.25669 (2), -0.25668 (2), -0.25579 (2), -0.25551 (2), -0.25463 (2), -0.25428 (2), -0.25319 (2), -0.24828 (2), -0.24447 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0126    solve 0.1121    add 0.0774    
Accumulated time: pickout 0.0014    decision 0.5320    set_bounds 0.0211    solve 0.2277    add 0.1433    
Current (lb-rhs): -0.2614772915840149
100 domains visited
Cumulative time: 1.008615493774414

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 8] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] 
split level 2: [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23587137460708618
10 lb beta sum: 0.233213871717453, worst -0.238846093416214
Time: prepare 0.0062    bound 0.1155    transfer 0.0008    finalize 0.0021    func 0.1276    
Accumulated time: func 0.4076    prepare 0.0399    bound 0.3589    transfer 0.0039    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.42348337) min lb tensor(-0.23285259)
Number of Verified Splits: 60 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.015441417694091797 
BICCOS Cumulative time: 0.038103580474853516
Preprocessing time: 0.011388778686523438 Inference time: 0.002708911895751953 Add cuts time: 0.0008914470672607422 Cut analysis time: 0.00045228004455566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06648 (3), -0.06645 (3), -0.06585 (3), -0.06578 (3), -0.06577 (3), -0.06481 (3), -0.06412 (3), -0.06218 (3), -0.05906 (3), -0.05663 (3), -0.05654 (3), -0.05622 (3), -0.05617 (3), -0.05568 (3), -0.05556 (3), -0.05457 (3), -0.05207 (3), -0.05170 (3), -0.05156 (3), -0.05067 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0153    solve 0.1277    add 0.0876    
Accumulated time: pickout 0.0023    decision 0.5514    set_bounds 0.0364    solve 0.3554    add 0.2309    
Current (lb-rhs): -0.06647731363773346
150 domains visited
Cumulative time: 1.27530837059021

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1972] [/input-8, 1716] [/input-12, 12] [/input-12, 12] [/input-8, 1692] [/input-8, 1692] [/input-12, 12] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06905734539031982
10 lb beta sum: 0.21530446410179138, worst -0.06374822556972504
Time: prepare 0.0058    bound 0.1151    transfer 0.0013    finalize 0.0019    func 0.1268    
Accumulated time: func 0.5344    prepare 0.0460    bound 0.4740    transfer 0.0052    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.23131430) min lb tensor(-0.02562743)
Number of Verified Splits: 375 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.03764653205871582 
BICCOS Cumulative time: 0.07575011253356934
Preprocessing time: 0.011318206787109375 Inference time: 0.019881725311279297 Add cuts time: 0.006028175354003906 Cut analysis time: 0.0004184246063232422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0153    solve 0.1269    add 0.0240    
Accumulated time: pickout 0.0033    decision 0.5706    set_bounds 0.0517    solve 0.4823    add 0.2549    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([7.65733033e-11, 1.38340011e-01, 1.48934975e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.65733033e-11, 1.38340011e-01, 9.97977108e-02, 4.32802439e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.65733033e-11, 1.38340011e-01, 9.97977108e-02, 1.09021947e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.65733033e-11, 7.75273889e-02, 1.39867947e-01, 4.06320393e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.65733033e-11, 7.75273889e-02, 1.39867947e-01, 1.02004886e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([7.65733033e-11, 7.75273889e-02, 1.07671201e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.65733033e-11, 1.40990958e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([7.65733033e-11, 7.94036239e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39929330348968506
10 lb beta sum: 0.4127468466758728, worst -0.38899368047714233
Time: prepare 0.0004    bound 0.1105    transfer 0.0001    finalize 0.0002    func 0.1114    
Accumulated time: func 0.6457    prepare 0.0464    bound 0.5846    transfer 0.0054    finalize 0.0090    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 72] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 18] [/input-12, 49] [/input-12, 18] 
split level 5: [/input-12, 49] [/input-12, 18] [/input-12, 49] 
split level 6: [/input-8, 1969] [/input-8, 1626] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5447229146957397, worst -0.15157127380371094
10 lb beta sum: 0.5897290110588074, worst -0.1507628858089447
Time: prepare 0.0161    bound 0.1129    transfer 0.0013    finalize 0.1489    func 0.2816    
Accumulated time: func 0.9273    prepare 0.0628    bound 0.6975    transfer 0.0066    finalize 0.1579    
all_split False
======================Cut inference begins======================
max lb tensor(0.66887432) min lb tensor(-0.15040439)
Number of Verified Splits: 330 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5563274621963501, worst -0.2949807345867157
10 lb beta sum: 0.7747915387153625, worst -0.35927513241767883
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 104.
#cuts 1-3: 9
#cuts 4-6: 29
#cuts 7-9: 65
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3502058982849121 
BICCOS Cumulative time: 0.42595601081848145
Preprocessing time: 0.010898828506469727 Inference time: 0.30785083770751953 Add cuts time: 0.02651524543762207 Cut analysis time: 0.004940986633300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15040 (7), -0.14099 (7), -0.14012 (7), -0.12993 (7), -0.12028 (7), -0.11570 (7), -0.11368 (7), -0.11198 (7), -0.10527 (7), -0.10037 (7), -0.09965 (7), -0.09281 (7), -0.09037 (7), -0.08130 (7), -0.07651 (7), -0.07502 (7), -0.06870 (7), -0.06859 (7), -0.06761 (7), -0.06586 (7), 
Length of domains: 54
Time: pickout 0.0005    decision 0.0198    set_bounds 0.0339    solve 0.2817    add 0.0011    
Accumulated time: pickout 0.0038    decision 0.5904    set_bounds 0.0855    solve 0.7640    add 0.2561    
Current (lb-rhs): -0.15040439367294312
204 domains visited
Cumulative time: 2.3204240798950195

BaB round 2
batch: 54
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1700] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14691388607025146
10 lb beta sum: 0.14669767022132874, worst -0.1448124200105667
Time: prepare 0.0044    bound 0.1284    transfer 0.0014    finalize 0.0011    func 0.1374    
Accumulated time: func 1.0647    prepare 0.0675    bound 0.8259    transfer 0.0080    finalize 0.1590    
all_split False
======================Cut inference begins======================
max lb tensor(0.56180471) min lb tensor(-0.14464635)
Number of Verified Splits: 130 of 216
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.0224149227142334 
BICCOS Cumulative time: 0.44837093353271484
Preprocessing time: 0.006391286849975586 Inference time: 0.011319398880004883 Add cuts time: 0.004265546798706055 Cut analysis time: 0.000438690185546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14465 (9), -0.13477 (9), -0.13414 (9), -0.12364 (9), -0.12303 (9), -0.11311 (9), -0.11276 (9), -0.10869 (9), -0.10793 (9), -0.10625 (9), -0.10437 (9), -0.09754 (9), -0.09690 (9), -0.09295 (9), -0.09207 (9), -0.09112 (9), -0.08824 (9), -0.08555 (9), -0.08448 (9), -0.08234 (9), 
Length of domains: 86
Time: pickout 0.0020    decision 0.0135    set_bounds 0.0164    solve 0.1375    add 0.0010    
Accumulated time: pickout 0.0059    decision 0.6040    set_bounds 0.1019    solve 0.9015    add 0.2571    
Current (lb-rhs): -0.14464634656906128
290 domains visited
Cumulative time: 2.5141959190368652

BaB round 3
batch: 86
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-8, 1700] [/input-8, 1964] [/input-8, 1964] [/input-8, 1700] [/input-8, 1692] [/input-12, 7] [/input-8, 1700] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-8, 1716] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] [/input-8, 1630] [/input-12, 7] [/input-8, 1716] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1335146725177765
10 lb beta sum: 0.2736911475658417, worst -0.16345328092575073
Time: prepare 0.0067    bound 0.1192    transfer 0.0022    finalize 0.0018    func 0.1323    
Accumulated time: func 1.1970    prepare 0.0744    bound 0.9451    transfer 0.0102    finalize 0.1608    
all_split False
======================Cut inference begins======================
max lb tensor(0.32197228) min lb tensor(-0.13121636)
Number of Verified Splits: 276 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04065513610839844 
BICCOS Cumulative time: 0.4890260696411133
Preprocessing time: 0.009978055953979492 Inference time: 0.02741861343383789 Add cuts time: 0.0027947425842285156 Cut analysis time: 0.00046372413635253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13122 (11), -0.12110 (11), -0.11870 (11), -0.11801 (11), -0.11257 (11), -0.11054 (11), -0.10831 (11), -0.10781 (11), -0.10583 (11), -0.10413 (11), -0.10167 (11), -0.10089 (11), -0.10016 (11), -0.09978 (11), -0.09570 (11), -0.09430 (11), -0.09333 (11), -0.09023 (11), -0.08975 (11), -0.08824 (11), 
Length of domains: 68
Time: pickout 0.0018    decision 0.0185    set_bounds 0.0228    solve 0.1324    add 0.0014    
Accumulated time: pickout 0.0076    decision 0.6224    set_bounds 0.1247    solve 1.0339    add 0.2585    
Current (lb-rhs): -0.131216362118721
358 domains visited
Cumulative time: 2.733358144760132

BaB round 4
batch: 68
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-8, 1716] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-8, 468] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-8, 1969] [/input-8, 1716] [/input-8, 468] [/input-8, 468] [/input-8, 1969] [/input-8, 1716] [/input-8, 468] [/input-8, 1716] [/input-8, 1969] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11631003022193909
10 lb beta sum: 0.6075945496559143, worst -0.11433319747447968
Time: prepare 0.0053    bound 0.1298    transfer 0.0020    finalize 0.0014    func 0.1403    
Accumulated time: func 1.3374    prepare 0.0799    bound 1.0749    transfer 0.0123    finalize 0.1623    
all_split False
======================Cut inference begins======================
max lb tensor(0.29135609) min lb tensor(-0.11425310)
Number of Verified Splits: 160 of 272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.028139352798461914 
BICCOS Cumulative time: 0.5171654224395752
Preprocessing time: 0.008052587509155273 Inference time: 0.01767873764038086 Add cuts time: 0.0019097328186035156 Cut analysis time: 0.0004982948303222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11425 (13), -0.11348 (13), -0.11293 (13), -0.11216 (13), -0.10112 (13), -0.10091 (13), -0.10019 (13), -0.09990 (13), -0.09954 (13), -0.09864 (13), -0.09510 (13), -0.09409 (13), -0.09293 (13), -0.09183 (13), -0.08934 (13), -0.08830 (13), -0.08800 (13), -0.08696 (13), -0.08680 (13), -0.08570 (13), 
Length of domains: 112
Time: pickout 0.0019    decision 0.0145    set_bounds 0.0178    solve 0.1404    add 0.0014    
Accumulated time: pickout 0.0095    decision 0.6369    set_bounds 0.1426    solve 1.1743    add 0.2599    
Current (lb-rhs): -0.11425310373306274
470 domains visited
Cumulative time: 2.938610792160034

BaB round 5
batch: 112
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 468] [/input-8, 1717] [/input-8, 1726] [/input-8, 1964] [/input-8, 468] [/input-8, 1708] [/input-8, 1726] [/input-8, 1964] [/input-8, 468] [/input-8, 1717] 
cut re-enabled after branching node selection
0 lb beta sum: 0.546930730342865, worst -0.11119472980499268
10 lb beta sum: 0.546930730342865, worst -0.11110806465148926
Time: prepare 0.0095    bound 0.1286    transfer 0.0011    finalize 0.0011    func 0.1418    
Accumulated time: func 1.4792    prepare 0.0896    bound 1.2035    transfer 0.0134    finalize 0.1634    
all_split False
======================Cut inference begins======================
max lb tensor(0.02841419) min lb tensor(-0.11104864)
Number of Verified Splits: 30 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.01176309585571289 
BICCOS Cumulative time: 0.5289285182952881
Preprocessing time: 0.0067865848541259766 Inference time: 0.003481149673461914 Add cuts time: 0.0006701946258544922 Cut analysis time: 0.0008251667022705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11105 (14), -0.11027 (14), -0.10943 (14), -0.10865 (14), -0.09968 (14), -0.09866 (14), -0.09759 (14), -0.09665 (14), -0.09573 (14), -0.09480 (14), -0.09392 (14), -0.09289 (14), -0.09156 (14), -0.09046 (14), -0.08610 (14), -0.08551 (14), -0.08537 (14), -0.08515 (14), -0.08460 (14), -0.08445 (14), 
Length of domains: 194
Time: pickout 0.0020    decision 0.0180    set_bounds 0.0095    solve 0.1419    add 0.0028    
Accumulated time: pickout 0.0115    decision 0.6549    set_bounds 0.1521    solve 1.3162    add 0.2627    
Current (lb-rhs): -0.1110486388206482
664 domains visited
Cumulative time: 3.1253445148468018

BaB round 6
batch: 194
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 468] [/input-8, 1708] [/input-8, 1708] [/input-8, 1964] [/input-8, 1717] [/input-8, 1708] [/input-8, 1708] [/input-8, 1964] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5368092656135559, worst -0.10826784372329712
10 lb beta sum: 0.5368092656135559, worst -0.10822784900665283
Time: prepare 0.0163    bound 0.1300    transfer 0.0008    finalize 0.0018    func 0.1514    
Accumulated time: func 1.6306    prepare 0.1061    bound 1.3336    transfer 0.0141    finalize 0.1652    
all_split False
======================Cut inference begins======================
max lb tensor(0.02432907) min lb tensor(-0.10821626)
Number of Verified Splits: 59 of 388
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02019810676574707 
BICCOS Cumulative time: 0.5491266250610352
Preprocessing time: 0.01111292839050293 Inference time: 0.006911516189575195 Add cuts time: 0.0009846687316894531 Cut analysis time: 0.0011889934539794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10822 (15), -0.10741 (15), -0.10657 (15), -0.10576 (15), -0.09542 (15), -0.09451 (15), -0.09430 (15), -0.09353 (15), -0.09329 (15), -0.09264 (15), -0.08879 (15), -0.08777 (15), -0.08667 (15), -0.08620 (15), -0.08555 (15), -0.08519 (15), -0.08322 (15), -0.08228 (15), -0.08157 (15), -0.08099 (15), 
Length of domains: 329
Time: pickout 0.0028    decision 0.0220    set_bounds 0.0172    solve 0.1515    add 0.0040    
Accumulated time: pickout 0.0144    decision 0.6769    set_bounds 0.1693    solve 1.4678    add 0.2667    
Current (lb-rhs): -0.10821625590324402
993 domains visited
Cumulative time: 3.34391450881958

BaB round 7
batch: 329
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1630] [/input-8, 1717] [/input-8, 1969] [/input-8, 1630] [/input-8, 1726] [/input-8, 1708] [/input-8, 1630] [/input-8, 1717] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10898777842521667
10 lb beta sum: 0.3868190050125122, worst -0.10712423920631409
Time: prepare 0.0125    bound 0.1372    transfer 0.0011    finalize 0.0027    func 0.1577    
Accumulated time: func 1.7884    prepare 0.1188    bound 1.4708    transfer 0.0152    finalize 0.1679    
all_split False
======================Cut inference begins======================
max lb tensor(0.02504247) min lb tensor(-0.10710551)
Number of Verified Splits: 109 of 658
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 15
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.035210609436035156 
BICCOS Cumulative time: 0.5843372344970703
Preprocessing time: 0.0186007022857666 Inference time: 0.014600515365600586 Add cuts time: 0.0014929771423339844 Cut analysis time: 0.0005164146423339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10711 (16), -0.10629 (16), -0.10541 (16), -0.10460 (16), -0.09432 (16), -0.09340 (16), -0.09239 (16), -0.09148 (16), -0.09138 (16), -0.09036 (16), -0.08588 (16), -0.08487 (16), -0.08376 (16), -0.08277 (16), -0.08265 (16), -0.08211 (16), -0.08175 (16), -0.08126 (16), -0.08116 (16), -0.08038 (16), 
Length of domains: 549
Time: pickout 0.0046    decision 0.0292    set_bounds 0.0282    solve 0.1587    add 0.0194    
Accumulated time: pickout 0.0190    decision 0.7061    set_bounds 0.1974    solve 1.6264    add 0.2861    
Current (lb-rhs): -0.10710550844669342
1542 domains visited
Cumulative time: 3.6206512451171875

BaB round 8
batch: 549
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1726] [/input-8, 1969] [/input-8, 1630] [/input-8, 1726] [/input-8, 1969] [/input-8, 1969] [/input-8, 1630] [/input-8, 1969] [/input-8, 1726] [/input-8, 1969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5109593868255615, worst -0.10068650543689728
10 lb beta sum: 0.5569143295288086, worst -0.10061092674732208
Time: prepare 0.0458    bound 0.1406    transfer 0.0022    finalize 0.0044    func 0.2009    
Accumulated time: func 1.9893    prepare 0.1648    bound 1.6114    transfer 0.0175    finalize 0.1723    
all_split False
======================Cut inference begins======================
max lb tensor(0.29503170) min lb tensor(-0.10057499)
Number of Verified Splits: 237 of 1098
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 16
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.06728005409240723 
BICCOS Cumulative time: 0.6516172885894775
Preprocessing time: 0.03285074234008789 Inference time: 0.031122922897338867 Add cuts time: 0.002747058868408203 Cut analysis time: 0.0005593299865722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10057 (17), -0.09976 (17), -0.09933 (17), -0.09851 (17), -0.09368 (17), -0.09287 (17), -0.08878 (17), -0.08784 (17), -0.08739 (17), -0.08645 (17), -0.08618 (17), -0.08550 (17), -0.08536 (17), -0.08448 (17), -0.08074 (17), -0.08000 (17), -0.07972 (17), -0.07898 (17), -0.07787 (17), -0.07675 (17), 
Length of domains: 861
Time: pickout 0.0103    decision 0.0423    set_bounds 0.0471    solve 0.2012    add 0.0070    
Accumulated time: pickout 0.0293    decision 0.7484    set_bounds 0.2445    solve 1.8276    add 0.2931    
Current (lb-rhs): -0.10057498514652252
2403 domains visited
Cumulative time: 3.9982666969299316

BaB round 9
batch: 861
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 420] [/input-8, 468] [/input-8, 420] [/input-8, 420] [/input-8, 420] [/input-8, 1969] [/input-8, 420] [/input-8, 1969] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09548574686050415
10 lb beta sum: 0.4048672318458557, worst -0.09350457787513733
Time: prepare 0.0345    bound 0.1593    transfer 0.0072    finalize 0.0080    func 0.2213    
Accumulated time: func 2.2106    prepare 0.1996    bound 1.7707    transfer 0.0246    finalize 0.1803    
all_split False
======================Cut inference begins======================
max lb tensor(0.02488744) min lb tensor(-0.09344761)
Number of Verified Splits: 467 of 1722
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 17
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.12281060218811035 
BICCOS Cumulative time: 0.7744278907775879
Preprocessing time: 0.05284881591796875 Inference time: 0.06404519081115723 Add cuts time: 0.0051250457763671875 Cut analysis time: 0.0007915496826171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09345 (18), -0.09263 (18), -0.09219 (18), -0.09137 (18), -0.09117 (18), -0.09035 (18), -0.08991 (18), -0.08909 (18), -0.08617 (18), -0.08534 (18), -0.08388 (18), -0.08306 (18), -0.08193 (18), -0.08163 (18), -0.08095 (18), -0.08070 (18), -0.08027 (18), -0.07936 (18), -0.07935 (18), -0.07865 (18), 
Length of domains: 1255
Time: pickout 0.0148    decision 0.0591    set_bounds 0.2252    solve 0.2217    add 0.0066    
Accumulated time: pickout 0.0441    decision 0.8074    set_bounds 0.4698    solve 2.0493    add 0.2998    
Current (lb-rhs): -0.09344761073589325
3658 domains visited
Cumulative time: 4.655471086502075

BaB round 10
batch: 1255
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 466] [/input-8, 1717] [/input-8, 466] [/input-8, 1717] [/input-8, 1717] [/input-8, 1717] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09069731831550598
10 lb beta sum: 0.40033507347106934, worst -0.08868509531021118
Time: prepare 0.0505    bound 0.2007    transfer 0.0130    finalize 0.0123    func 0.2934    
Accumulated time: func 2.5040    prepare 0.2503    bound 1.9714    transfer 0.0376    finalize 0.1926    
all_split False
======================Cut inference begins======================
max lb tensor(0.02259165) min lb tensor(-0.08864389)
Number of Verified Splits: 540 of 2510
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.16274046897888184 
BICCOS Cumulative time: 0.9371683597564697
Preprocessing time: 0.07801389694213867 Inference time: 0.07879114151000977 Add cuts time: 0.005031108856201172 Cut analysis time: 0.0009043216705322266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08864 (19), -0.08806 (19), -0.08782 (19), -0.08724 (19), -0.08636 (19), -0.08578 (19), -0.08555 (19), -0.08496 (19), -0.08336 (19), -0.08255 (19), -0.08109 (19), -0.08038 (19), -0.08027 (19), -0.07929 (19), -0.07810 (19), -0.07712 (19), -0.07701 (19), -0.07691 (19), -0.07688 (19), -0.07686 (19), 
Length of domains: 1970
Time: pickout 0.0198    decision 0.0807    set_bounds 0.1080    solve 0.2940    add 0.0132    
Accumulated time: pickout 0.0639    decision 0.8881    set_bounds 0.5777    solve 2.3433    add 0.3130    
Current (lb-rhs): -0.08864389359951019
5628 domains visited
Cumulative time: 5.342932462692261

BaB round 11
batch: 1970
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 459] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 459] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08517646789550781
10 lb beta sum: 0.3906409442424774, worst -0.08316707611083984
Time: prepare 0.0775    bound 0.2777    transfer 0.0151    finalize 0.0187    func 0.4148    
Accumulated time: func 2.9188    prepare 0.3281    bound 2.2491    transfer 0.0527    finalize 0.2113    
all_split False
======================Cut inference begins======================
max lb tensor(0.01466399) min lb tensor(-0.08310573)
Number of Verified Splits: 852 of 3940
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 18
#cuts 4-6: 16
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.26101064682006836 
BICCOS Cumulative time: 1.198179006576538
Preprocessing time: 0.12157630920410156 Inference time: 0.12830376625061035 Add cuts time: 0.009918212890625 Cut analysis time: 0.0012123584747314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08311 (20), -0.08252 (20), -0.08202 (20), -0.08144 (20), -0.08085 (20), -0.08027 (20), -0.07977 (20), -0.07960 (20), -0.07959 (20), -0.07919 (20), -0.07902 (20), -0.07901 (20), -0.07779 (20), -0.07735 (20), -0.07734 (20), -0.07677 (20), -0.07675 (20), -0.07671 (20), -0.07554 (20), -0.07446 (20), 
Length of domains: 3088
Time: pickout 0.0346    decision 0.1200    set_bounds 0.3009    solve 0.4156    add 0.0100    
Accumulated time: pickout 0.0985    decision 1.0082    set_bounds 0.8786    solve 2.7589    add 0.3230    
Current (lb-rhs): -0.08310572803020477
8716 domains visited
Cumulative time: 6.497998952865601

BaB round 12
batch: 3088
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07883334159851074
10 lb beta sum: 0.349341481924057, worst -0.07688374817371368
Time: prepare 0.1230    bound 0.3960    transfer 0.0304    finalize 0.0274    func 0.6174    
Accumulated time: func 3.5362    prepare 0.4514    bound 2.6451    transfer 0.0831    finalize 0.2388    
all_split False
======================Cut inference begins======================
max lb tensor(0.02476361) min lb tensor(-0.07684588)
Number of Verified Splits: 2304 of 6176
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 22
#cuts 4-6: 18
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.7578747272491455 
BICCOS Cumulative time: 1.9560537338256836
Preprocessing time: 0.19003582000732422 Inference time: 0.5435001850128174 Add cuts time: 0.023084163665771484 Cut analysis time: 0.0012545585632324219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07685 (21), -0.07626 (21), -0.07576 (21), -0.07570 (21), -0.07518 (21), -0.07510 (21), -0.07461 (21), -0.07401 (21), -0.07393 (21), -0.07369 (21), -0.07335 (21), -0.07325 (21), -0.07324 (21), -0.07309 (21), -0.07285 (21), -0.07267 (21), -0.07266 (21), -0.07260 (21), -0.07227 (21), -0.07210 (21), 
Length of domains: 3872
Time: pickout 0.0448    decision 0.1777    set_bounds 0.4298    solve 0.6191    add 0.0117    
Accumulated time: pickout 0.1433    decision 1.1858    set_bounds 1.3083    solve 3.3781    add 0.3347    
Current (lb-rhs): -0.07684588432312012
12588 domains visited
Cumulative time: 8.568845748901367

BaB round 13
batch: 3872
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 466] [/input-8, 1630] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 1695] [/input-8, 1630] [/input-8, 1695] [/input-8, 1695] [/input-8, 1695] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07611571252346039
10 lb beta sum: 0.460761696100235, worst -0.07264566421508789
Time: prepare 0.1583    bound 0.4788    transfer 0.0370    finalize 0.1924    func 0.9176    
Accumulated time: func 4.4538    prepare 0.6100    bound 3.1239    transfer 0.1201    finalize 0.4312    
all_split False
======================Cut inference begins======================
max lb tensor(0.02779296) min lb tensor(-0.07262558)
Number of Verified Splits: 2324 of 7744
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 18
#cuts 4-6: 20
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.6603991985321045 
BICCOS Cumulative time: 2.616452932357788
Preprocessing time: 0.2406160831451416 Inference time: 0.39337158203125 Add cuts time: 0.02508997917175293 Cut analysis time: 0.001321554183959961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07263 (22), -0.07205 (22), -0.07156 (22), -0.07149 (22), -0.07098 (22), -0.07088 (22), -0.07042 (22), -0.06981 (22), -0.06971 (22), -0.06946 (22), -0.06913 (22), -0.06897 (22), -0.06893 (22), -0.06885 (22), -0.06864 (22), -0.06839 (22), -0.06839 (22), -0.06835 (22), -0.06806 (22), -0.06783 (22), 
Length of domains: 5420
Time: pickout 0.0702    decision 0.2171    set_bounds 0.3409    solve 0.9194    add 0.0151    
Accumulated time: pickout 0.2135    decision 1.4030    set_bounds 1.6492    solve 4.2975    add 0.3499    
Current (lb-rhs): -0.07262557744979858
18008 domains visited
Cumulative time: 10.825130939483643

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1635] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 459] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07301384210586548
10 lb beta sum: 0.45981118083000183, worst -0.06950539350509644
Time: prepare 0.1667    bound 0.4997    transfer 0.0381    finalize 0.0401    func 0.7992    
Accumulated time: func 5.2530    prepare 0.7770    bound 3.6236    transfer 0.1583    finalize 0.4713    
all_split False
======================Cut inference begins======================
max lb tensor(0.32180089) min lb tensor(-0.06947416)
Number of Verified Splits: 3141 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 31
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.0374233722686768 
BICCOS Cumulative time: 3.653876304626465
Preprocessing time: 0.45106935501098633 Inference time: 0.5400400161743164 Add cuts time: 0.04537391662597656 Cut analysis time: 0.0009400844573974609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06947 (23), -0.06898 (23), -0.06845 (23), -0.06835 (23), -0.06795 (23), -0.06782 (23), -0.06732 (23), -0.06680 (23), -0.06655 (23), -0.06630 (23), -0.06605 (23), -0.06583 (23), -0.06578 (23), -0.06573 (23), -0.06552 (23), -0.06542 (22), -0.06531 (23), -0.06528 (23), -0.06523 (23), -0.06502 (23), 
Length of domains: 6375
Time: pickout 0.0621    decision 0.2253    set_bounds 0.5485    solve 0.8015    add 0.0133    
Accumulated time: pickout 0.2756    decision 1.6283    set_bounds 2.1978    solve 5.0990    add 0.3632    
Current (lb-rhs): -0.06947416067123413
23059 domains visited
current_vram/total_varm: 12.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.55690312385559

BaB round 15
batch: 6375
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 420] [/input-8, 420] [/input-8, 420] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06890437006950378
10 lb beta sum: 1.6565260887145996, worst -0.05247068405151367
Time: prepare 0.2638    bound 0.7458    transfer 0.0622    finalize 0.2526    func 1.4084    
Accumulated time: func 6.6614    prepare 1.0410    bound 4.3695    transfer 0.2205    finalize 0.7239    
all_split False
======================Cut inference begins======================
max lb tensor(0.94599056) min lb tensor(-0.05238676)
Number of Verified Splits: 11818 of 12750
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.745994806289673 
BICCOS Cumulative time: 6.399871110916138
Preprocessing time: 0.40436816215515137 Inference time: 2.2403030395507812 Add cuts time: 0.10098934173583984 Cut analysis time: 0.0003342628479003906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05239 (24), -0.05227 (24), -0.05179 (24), -0.05163 (24), -0.05131 (24), -0.05120 (24), -0.05072 (24), -0.05056 (24), -0.05054 (24), -0.05038 (24), -0.04947 (24), -0.04938 (23), -0.04931 (24), -0.04923 (23), -0.04875 (23), -0.04864 (23), -0.04841 (23), -0.04826 (23), -0.04812 (24), -0.04800 (24), 
Length of domains: 932
Time: pickout 0.1178    decision 0.3518    set_bounds 0.7523    solve 1.4115    add 0.0131    
Accumulated time: pickout 0.3934    decision 1.9801    set_bounds 2.9500    solve 6.5104    add 0.3763    
Current (lb-rhs): -0.05238676071166992
23991 domains visited
Cumulative time: 19.07963466644287

BaB round 16
batch: 932
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061210304498672485

all verified at 2th iter
Time: prepare 0.0358    bound 0.0243    transfer 0.0081    finalize 0.0088    func 0.0888    
Accumulated time: func 6.7502    prepare 1.0771    bound 4.3938    transfer 0.2286    finalize 0.7327    
all_split False
======================Cut inference begins======================
max lb tensor(0.07846306) min lb tensor(0.02044270)
Number of Verified Splits: 1864 of 1864
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.05743670463562012 
BICCOS Cumulative time: 6.457307815551758
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0176    decision 0.0605    set_bounds 0.0807    solve 0.0891    add 0.0005    
Accumulated time: pickout 0.4110    decision 2.0406    set_bounds 3.0308    solve 6.5995    add 0.3768    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
23991 domains visited
Cumulative time: 19.395326375961304


Properties batch 3, size 1
Remaining timeout: 178.88210892677307
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 178.88200068473816
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 178.88197588920593
Verifying property 5 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37937427]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37937427]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.632110595703125e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37937331199645996
10 lb beta sum: 0.0, worst -0.3793787956237793
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0522    
Accumulated time: func 0.0522    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] 
split level 1: [/input-12, 49] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 43] 
split level 4: [/input-12, 18] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 6] 
split level 7: [/input-12, 57] 
split level 8: [/input-8, 1693] 
split level 9: [/input-8, 927] 
split level 10: [/input-12, 24] 
split level 11: [/input-8, 1044] 
split level 12: [/input-8, 1692] 
split level 13: [/input-12, 12] 
split level 14: [/input-8, 1057] 
split level 15: [/input-8, 619] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 1068] 
split level 18: [/input-8, 1695] 
split level 19: [/input-12, 86] 
split level 20: [/input-8, 382] 
split level 21: [/input-8, 1622] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 498] 
split level 24: [/input-8, 1972] 
split level 25: [/input-8, 1967] 
split level 26: [/input-8, 1069] 
split level 27: [/input-8, 626] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1268] 
split level 30: [/input-8, 1974] 
split level 31: [/input-8, 1686] 
split level 32: [/input-8, 593] 
split level 33: [/input-8, 227] 
split level 34: [/input-8, 629] 
split level 35: [/input-8, 1973] 
split level 36: [/input, 1649] 
split level 37: [/input-8, 1683] 
split level 38: [/input-8, 1314] 
split level 39: [/input-8, 635] 
split level 40: [/input-8, 490] 
split level 41: [/input, 2923] 
split level 42: [/input-8, 371] 
split level 43: [/input-8, 1306] 
split level 44: [/input-8, 1762] 
split level 45: [/input-8, 1765] 
split level 46: [/input-8, 1267] 
split level 47: [/input-8, 1403] 
split level 48: [/input-8, 367] 
split level 49: [/input-8, 505] 
split level 50: [/input-8, 633] 
split level 51: [/input-8, 506] 
split level 52: [/input-8, 1773] 
split level 53: [/input-8, 1035] 
split level 54: [/input-8, 934] 
split level 55: [/input-8, 1703] 
split level 56: [/input-8, 468] 
split level 57: [/input-8, 618] 
split level 58: [/input, 385] 
split level 59: [/input-8, 1076] 
split level 60: [/input-8, 1789] 
split level 61: [/input-8, 459] 
split level 62: [/input-8, 1714] 
split level 63: [/input-8, 1650] 
split level 64: [/input-8, 1626] 
split level 65: [/input-8, 462] 
split level 66: [/input-8, 1929] 
split level 67: [/input, 2906] 
split level 68: [/input-8, 636] 
split level 69: [/input-8, 918] 
split level 70: [/input, 1512] 
split level 71: [/input-8, 1659] 
split level 72: [/input-8, 1790] 
split level 73: [/input-8, 1298] 
split level 74: [/input-8, 1294] 
split level 75: [/input-12, 20] 
split level 76: [/input-8, 497] 
split level 77: [/input-8, 466] 
split level 78: [/input-8, 1726] 
split level 79: [/input-8, 380] 
split level 80: [/input-8, 1651] 
split level 81: [/input-8, 1713] 
split level 82: [/input, 2157] 
split level 83: [/input-8, 1997] 
split level 84: [/input-8, 1244] 
split level 85: [/input-8, 1704] 
split level 86: [/input, 1418] 
split level 87: [/input, 2506] 
split level 88: [/input-8, 1681] 
split level 89: [/input-8, 1252] 
split level 90: [/input-8, 1649] 
split level 91: [/input-8, 900] 
split level 92: [/input-8, 1633] 
split level 93: [/input, 2181] 
split level 94: [/input, 2953] 
split level 95: [/input-8, 1708] 
split level 96: [/input-8, 1653] 
split level 97: [/input-8, 1660] 
split level 98: [/input-8, 1746] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1310] 
split level 101: [/input, 110] 
split level 102: [/input-8, 1750] 
split level 103: [/input-8, 1716] 
split level 104: [/input-8, 1064] 
split level 105: [/input-8, 1522] 
split level 106: [/input-8, 1969] 
split level 107: [/input-8, 1612] 
split level 108: [/input-8, 1774] 
split level 109: [/input, 2460] 
split level 110: [/input-8, 898] 
split level 111: [/input, 4005] 
split level 112: [/input, 2412] 
split level 113: [/input-8, 329] 
split level 114: [/input, 2470] 
split level 115: [/input, 867] 
split level 116: [/input-8, 1766] 
split level 117: [/input, 2186] 
split level 118: [/input-8, 473] 
split level 119: [/input, 4023] 
split level 120: [/input-8, 1978] 
split level 121: [/input, 1500] 
split level 122: [/input-8, 1668] 
split level 123: [/input, 2931] 
split level 124: [/input, 2173] 
split level 125: [/input, 151] 
split level 126: [/input, 4021] 
split level 127: [/input, 2555] 
split level 128: [/input, 2440] 
split level 129: [/input, 3517] 
split level 130: [/input-8, 1320] 
split level 131: [/input, 2454] 
split level 132: [/input-8, 1331] 
split level 133: [/input-8, 1770] 
split level 134: [/input, 2982] 
split level 135: [/input, 1365] 
split level 136: [/input-8, 75] 
split level 137: [/input-8, 2028] 
split level 138: [/input, 169] 
split level 139: [/input-8, 1269] 
split level 140: [/input, 1526] 
split level 141: [/input, 881] 
split level 142: [/input-8, 420] 
split level 143: [/input, 89] 
split level 144: [/input, 2538] 
split level 145: [/input-8, 486] 
split level 146: [/input, 2165] 
split level 147: [/input, 2189] 
split level 148: [/input, 3427] 
split level 149: [/input, 2774] 
split level 150: [/input, 2263] 
split level 151: [/input, 3549] 
split level 152: [/input-8, 899] 
split level 153: [/input-8, 1161] 
split level 154: [/input, 2927] 
split level 155: [/input-8, 2029] 
split level 156: [/input, 1478] 
split level 157: [/input, 328] 
split level 158: [/input, 2776] 
split level 159: [/input-8, 1337] 
split level 160: [/input-8, 73] 
split level 161: [/input, 2252] 
split level 162: [/input, 3526] 
split level 163: [/input, 2231] 
split level 164: [/input-8, 410] 
split level 165: [/input-8, 1531] 
split level 166: [/input, 667] 
split level 167: [/input-8, 805] 
split level 168: [/input-8, 74] 
split level 169: [/input, 2519] 
split level 170: [/input-8, 908] 
split level 171: [/input, 2761] 
split level 172: [/input, 408] 
split level 173: [/input, 2374] 
split level 174: [/input, 2404] 
split level 175: [/input, 954] 
split level 176: [/input-8, 1761] 
split level 177: [/input, 1392] 
split level 178: [/input, 2550] 
split level 179: [/input, 1493] 
split level 180: [/input, 3279] 
split level 181: [/input, 3546] 
split level 182: [/input, 2838] 
split level 183: [/input, 2133] 
split level 184: [/input, 344] 
split level 185: [/input, 852] 
split level 186: [/input, 2961] 
split level 187: [/input, 4009] 
split level 188: [/input, 1391] 
split level 189: [/input, 278] 
split level 190: [/input, 3271] 
split level 191: [/input-8, 78] 
split level 192: [/input-8, 1743] 
split level 193: [/input, 141] 
split level 194: [/input, 215] 
split level 195: [/input, 2118] 
split level 196: [/input, 94] 
split level 197: [/input, 2542] 
split level 198: [/input, 2484] 
split level 199: [/input, 3579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3792426586151123
10 lb beta sum: 0.0, worst -0.37924790382385254
Time: prepare 0.0111    bound 0.0966    transfer 0.0009    finalize 0.0026    func 0.1138    
Accumulated time: func 0.1660    prepare 0.0209    bound 0.1484    transfer 0.0010    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.24518442) min lb tensor(-0.37924266)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010312318801879883 
BICCOS Cumulative time: 0.010312318801879883
Preprocessing time: 0.009893178939819336 Inference time: 0.00015020370483398438 Add cuts time: 5.435943603515625e-05 Cut analysis time: 0.00021457672119140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36536 (1), -0.36534 (1), -0.36514 (1), -0.36460 (1), -0.36438 (1), -0.36371 (1), -0.36366 (1), -0.36343 (1), -0.36308 (1), -0.36247 (1), -0.36222 (1), -0.36154 (1), -0.36136 (1), -0.36056 (1), -0.35983 (1), -0.35897 (1), -0.35870 (1), -0.35734 (1), -0.35660 (1), -0.35591 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5043    set_bounds 0.0085    solve 0.1139    add 0.0681    
Accumulated time: pickout 0.0003    decision 0.5043    set_bounds 0.0085    solve 0.1139    add 0.0681    
Current (lb-rhs): -0.3653564453125
50 domains visited
Cumulative time: 0.7626042366027832

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 49] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 83] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32822084426879883
10 lb beta sum: 0.5766316652297974, worst -0.3254566788673401
Time: prepare 0.0071    bound 0.1139    transfer 0.0007    finalize 0.0022    func 0.1266    
Accumulated time: func 0.2926    prepare 0.0283    bound 0.2623    transfer 0.0017    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.27090347) min lb tensor(-0.32541379)
Number of Verified Splits: 14 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013281822204589844 
BICCOS Cumulative time: 0.023594141006469727
Preprocessing time: 0.011514425277709961 Inference time: 0.0006237030029296875 Add cuts time: 0.00030422210693359375 Cut analysis time: 0.0008394718170166016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10103 (2), -0.10096 (2), -0.10023 (2), -0.10005 (2), -0.09792 (2), -0.09732 (2), -0.09688 (2), -0.09667 (2), -0.09573 (2), -0.09552 (2), -0.09515 (2), -0.09497 (2), -0.09456 (2), -0.09159 (2), -0.09032 (2), -0.08948 (2), -0.08910 (2), -0.08859 (2), -0.08516 (2), -0.08476 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0124    solve 0.1267    add 0.0777    
Accumulated time: pickout 0.0014    decision 0.5236    set_bounds 0.0209    solve 0.2406    add 0.1458    
Current (lb-rhs): -0.10102689266204834
100 domains visited
Cumulative time: 1.0133330821990967

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 43] [/input-12, 43] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] 
split level 3: [/input-12, 53] [/input-12, 18] [/input-12, 18] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10227583348751068
10 lb beta sum: 0.9057183861732483, worst -0.0285884290933609
Time: prepare 0.0070    bound 0.1141    transfer 0.0007    finalize 0.0025    func 0.1275    
Accumulated time: func 0.4201    prepare 0.0356    bound 0.3765    transfer 0.0024    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.25396371) min lb tensor(-0.02376947)
Number of Verified Splits: 366 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.03489112854003906 
BICCOS Cumulative time: 0.05848526954650879
Preprocessing time: 0.011467456817626953 Inference time: 0.014964818954467773 Add cuts time: 0.008160829544067383 Cut analysis time: 0.0002980232238769531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0154    solve 0.1276    add 0.0193    
Accumulated time: pickout 0.0024    decision 0.5428    set_bounds 0.0362    solve 0.3682    add 0.1651    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49,  3]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.42783355e-13, 5.69440484e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49,  3]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.42783355e-13, 1.60693396e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.42783355e-13, 6.28513247e-02, 2.77626455e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.42783355e-13, 6.28513247e-02, 8.80783349e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.42783355e-13, 9.00524408e-02, 2.80450463e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.42783355e-13, 9.00524408e-02, 7.95320123e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.313737154006958
10 lb beta sum: 0.5503321886062622, worst -0.3114355206489563
Time: prepare 0.0004    bound 0.1084    transfer 0.0001    finalize 0.0002    func 0.1092    
Accumulated time: func 0.5293    prepare 0.0359    bound 0.4849    transfer 0.0026    finalize 0.0075    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 43] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 24] 
split level 5: [/input-8, 1692] 
split level 6: [/input-12, 12] 
split level 7: [/input-8, 1695] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst -0.10818731784820557
10 lb beta sum: 0.732018768787384, worst -0.10746371746063232
Time: prepare 0.0107    bound 0.1136    transfer 0.0005    finalize 0.0013    func 0.1278    
Accumulated time: func 0.6571    prepare 0.0470    bound 0.5985    transfer 0.0031    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.26083887) min lb tensor(-0.10730636)
Number of Verified Splits: 215 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796276092529, worst -0.2031935453414917
10 lb beta sum: 1.3050293922424316, worst -0.09487122297286987
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 79.
#cuts 1-3: 7
#cuts 4-6: 16
#cuts 7-9: 56
#cuts >= 20: 0
BICCOS time: 0.2749776840209961 
BICCOS Cumulative time: 0.3334629535675049
Preprocessing time: 0.007098197937011719 Inference time: 0.24451851844787598 Add cuts time: 0.019401073455810547 Cut analysis time: 0.0039598941802978516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10731 (8), -0.09904 (8), -0.09220 (8), -0.09118 (8), -0.08302 (8), -0.08294 (8), -0.07752 (8), -0.06833 (8), -0.06462 (8), -0.05878 (8), -0.05773 (8), -0.05765 (8), -0.05036 (8), -0.05030 (8), -0.04897 (8), -0.04718 (8), -0.04640 (8), -0.04517 (8), -0.04352 (8), -0.04342 (8), 
Length of domains: 41
Time: pickout 0.0005    decision 0.0214    set_bounds 0.0245    solve 0.1278    add 0.0011    
Accumulated time: pickout 0.0029    decision 0.5642    set_bounds 0.0607    solve 0.4960    add 0.1661    
Current (lb-rhs): -0.10730636119842529
141 domains visited
Cumulative time: 1.806485652923584

BaB round 2
batch: 41
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1630] [/input-8, 1630] [/input-8, 1972] [/input-8, 1630] [/input-8, 1630] 
split level 1: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1967] [/input-8, 1972] [/input-8, 1973] [/input-8, 1314] [/input-8, 1972] 
split level 2: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1967] [/input-8, 1651] [/input-8, 1973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09147024154663086
10 lb beta sum: 0.39521685242652893, worst -0.08945471048355103
Time: prepare 0.0062    bound 0.1330    transfer 0.0019    finalize 0.0017    func 0.1449    
Accumulated time: func 0.8020    prepare 0.0534    bound 0.7314    transfer 0.0050    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.05261922) min lb tensor(-0.08937320)
Number of Verified Splits: 132 of 328
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 11
#cuts 4-6: 6
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.027454853057861328 
BICCOS Cumulative time: 0.3609178066253662
Preprocessing time: 0.009523391723632812 Inference time: 0.013251066207885742 Add cuts time: 0.003925800323486328 Cut analysis time: 0.0007545948028564453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08937 (11), -0.08744 (11), -0.08177 (11), -0.07984 (11), -0.07974 (11), -0.07781 (11), -0.07519 (11), -0.07455 (11), -0.07394 (11), -0.07336 (11), -0.07254 (11), -0.07142 (11), -0.07136 (11), -0.06942 (11), -0.06758 (11), -0.06641 (11), -0.06583 (11), -0.06567 (11), -0.06560 (11), -0.06497 (11), 
Length of domains: 196
Time: pickout 0.0014    decision 0.0162    set_bounds 0.0171    solve 0.1450    add 0.0017    
Accumulated time: pickout 0.0043    decision 0.5804    set_bounds 0.0778    solve 0.6410    add 0.1679    
Current (lb-rhs): -0.08937320113182068
337 domains visited
Cumulative time: 2.0162930488586426

BaB round 3
batch: 196
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1967] [/input-8, 1967] [/input-8, 1068] [/input-8, 1967] [/input-8, 1068] [/input-8, 1967] [/input-8, 1967] [/input-8, 1068] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0874483585357666
10 lb beta sum: 0.5051541328430176, worst -0.08667260408401489
Time: prepare 0.0075    bound 0.1286    transfer 0.0008    finalize 0.0017    func 0.1410    
Accumulated time: func 0.9430    prepare 0.0610    bound 0.8601    transfer 0.0058    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.02980185) min lb tensor(-0.08546954)
Number of Verified Splits: 115 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 15
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.027684926986694336 
BICCOS Cumulative time: 0.38860273361206055
Preprocessing time: 0.011105060577392578 Inference time: 0.012728691101074219 Add cuts time: 0.0026743412017822266 Cut analysis time: 0.0011768341064453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08547 (12), -0.08369 (12), -0.07810 (12), -0.07779 (12), -0.07600 (12), -0.07596 (12), -0.07574 (12), -0.07395 (12), -0.07140 (12), -0.07032 (12), -0.07016 (12), -0.06987 (12), -0.06944 (12), -0.06844 (12), -0.06834 (12), -0.06801 (12), -0.06766 (12), -0.06728 (12), -0.06631 (12), -0.06549 (12), 
Length of domains: 277
Time: pickout 0.0029    decision 0.0221    set_bounds 0.0165    solve 0.1411    add 0.0020    
Accumulated time: pickout 0.0072    decision 0.6025    set_bounds 0.0943    solve 0.7821    add 0.1699    
Current (lb-rhs): -0.08546954393386841
614 domains visited
Cumulative time: 2.2294936180114746

BaB round 4
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 1314] [/input-8, 1700] [/input-8, 629] [/input-8, 1314] [/input-8, 629] [/input-8, 1700] [/input-8, 1268] [/input-8, 629] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08278083801269531
10 lb beta sum: 0.5164451003074646, worst -0.08081233501434326
Time: prepare 0.0104    bound 0.1291    transfer 0.0010    finalize 0.0023    func 0.1464    
Accumulated time: func 1.0894    prepare 0.0716    bound 0.9892    transfer 0.0068    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.02192688) min lb tensor(-0.08075511)
Number of Verified Splits: 140 of 554
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 15
#cuts 4-6: 25
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.03758549690246582 
BICCOS Cumulative time: 0.42618823051452637
Preprocessing time: 0.015650510787963867 Inference time: 0.01678466796875 Add cuts time: 0.0036118030548095703 Cut analysis time: 0.0015385150909423828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08076 (13), -0.07899 (13), -0.07415 (13), -0.07335 (13), -0.07304 (13), -0.07237 (13), -0.07127 (13), -0.07124 (13), -0.07090 (13), -0.06913 (13), -0.06676 (13), -0.06675 (13), -0.06641 (13), -0.06541 (13), -0.06521 (13), -0.06468 (13), -0.06463 (13), -0.06439 (13), -0.06426 (13), -0.06354 (13), 
Length of domains: 414
Time: pickout 0.0038    decision 0.0239    set_bounds 0.0230    solve 0.1466    add 0.0026    
Accumulated time: pickout 0.0110    decision 0.6265    set_bounds 0.1172    solve 0.9287    add 0.1725    
Current (lb-rhs): -0.08075511455535889
1028 domains visited
Cumulative time: 2.4681472778320312

BaB round 5
batch: 414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1314] [/input-8, 1964] [/input-8, 1314] [/input-8, 1314] [/input-8, 1314] [/input-8, 1314] [/input-8, 1967] [/input-8, 1964] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07593369483947754
10 lb beta sum: 0.520636796951294, worst -0.07399547100067139
Time: prepare 0.0166    bound 0.1400    transfer 0.0013    finalize 0.0036    func 0.1668    
Accumulated time: func 1.2562    prepare 0.0884    bound 1.1292    transfer 0.0081    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.01459271) min lb tensor(-0.07395402)
Number of Verified Splits: 186 of 828
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 17
#cuts 4-6: 32
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.05688333511352539 
BICCOS Cumulative time: 0.48307156562805176
Preprocessing time: 0.023823261260986328 Inference time: 0.02400994300842285 Add cuts time: 0.007104158401489258 Cut analysis time: 0.0019459724426269531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07395 (14), -0.07297 (14), -0.07220 (14), -0.07121 (14), -0.06750 (14), -0.06654 (14), -0.06620 (14), -0.06617 (14), -0.06573 (14), -0.06555 (14), -0.06522 (14), -0.06444 (14), -0.06444 (14), -0.06441 (14), -0.06416 (14), -0.06346 (14), -0.06346 (14), -0.06318 (14), -0.06240 (14), -0.06142 (14), 
Length of domains: 642
Time: pickout 0.0064    decision 0.0345    set_bounds 0.2022    solve 0.1670    add 0.0028    
Accumulated time: pickout 0.0174    decision 0.6610    set_bounds 0.3194    solve 1.0957    add 0.1753    
Current (lb-rhs): -0.0739540159702301
1670 domains visited
Cumulative time: 2.939850330352783

BaB round 6
batch: 642
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1700] [/input-8, 1964] [/input-8, 1964] [/input-8, 506] [/input-8, 1700] [/input-8, 1964] [/input-8, 1789] [/input-8, 1700] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07149267196655273
10 lb beta sum: 0.5318052768707275, worst -0.06961184740066528
Time: prepare 0.0241    bound 0.1439    transfer 0.0030    finalize 0.0058    func 0.1849    
Accumulated time: func 1.4411    prepare 0.1128    bound 1.2731    transfer 0.0111    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.01907882) min lb tensor(-0.06960493)
Number of Verified Splits: 292 of 1284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 75.
#cuts 1-3: 20
#cuts 4-6: 41
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.08669281005859375 
BICCOS Cumulative time: 0.5697643756866455
Preprocessing time: 0.038268089294433594 Inference time: 0.03636002540588379 Add cuts time: 0.009578943252563477 Cut analysis time: 0.0024857521057128906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06960 (15), -0.06867 (15), -0.06776 (15), -0.06683 (15), -0.06300 (15), -0.06216 (15), -0.06182 (15), -0.06168 (15), -0.06123 (15), -0.06114 (15), -0.06089 (15), -0.05997 (15), -0.05997 (15), -0.05983 (15), -0.05983 (15), -0.05904 (15), -0.05904 (15), -0.05890 (15), -0.05798 (15), -0.05705 (15), 
Length of domains: 992
Time: pickout 0.0088    decision 0.0451    set_bounds 0.0554    solve 0.1852    add 0.0054    
Accumulated time: pickout 0.0262    decision 0.7061    set_bounds 0.3748    solve 1.2808    add 0.1807    
Current (lb-rhs): -0.06960493326187134
2662 domains visited
Cumulative time: 3.3295185565948486

BaB round 7
batch: 992
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1306] [/input-8, 1306] [/input-8, 1268] [/input-8, 1306] [/input-8, 1967] [/input-8, 1306] [/input-8, 1714] [/input-8, 1306] [/input-8, 1973] [/input-8, 1306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06561660766601562
10 lb beta sum: 0.5403057336807251, worst -0.0634840726852417
Time: prepare 0.0367    bound 0.1702    transfer 0.0165    finalize 0.0090    func 0.2457    
Accumulated time: func 1.6869    prepare 0.1497    bound 1.4432    transfer 0.0276    finalize 0.0328    
all_split False
======================Cut inference begins======================
max lb tensor(0.01359725) min lb tensor(-0.06338680)
Number of Verified Splits: 343 of 1984
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 93.
#cuts 1-3: 25
#cuts 4-6: 46
#cuts 7-9: 22
#cuts >= 20: 0
BICCOS time: 0.12265872955322266 
BICCOS Cumulative time: 0.6924231052398682
Preprocessing time: 0.05975842475891113 Inference time: 0.04662442207336426 Add cuts time: 0.012883901596069336 Cut analysis time: 0.0033919811248779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06339 (16), -0.06228 (16), -0.06175 (16), -0.06154 (16), -0.06106 (16), -0.06043 (16), -0.05990 (16), -0.05922 (16), -0.05677 (16), -0.05594 (16), -0.05560 (16), -0.05528 (16), -0.05505 (16), -0.05489 (16), -0.05483 (16), -0.05448 (16), -0.05430 (16), -0.05402 (16), -0.05397 (16), -0.05376 (16), 
Length of domains: 1641
Time: pickout 0.0164    decision 0.0652    set_bounds 0.0826    solve 0.2460    add 0.0068    
Accumulated time: pickout 0.0426    decision 0.7713    set_bounds 0.4575    solve 1.5268    add 0.1874    
Current (lb-rhs): -0.06338679790496826
4303 domains visited
Cumulative time: 3.873793363571167

BaB round 8
batch: 1641
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 1057] [/input-8, 1268] [/input-8, 1057] [/input-8, 1789] [/input-8, 1314] [/input-8, 1057] [/input-8, 1268] [/input-8, 1057] [/input-8, 1789] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061806440353393555
10 lb beta sum: 0.5172882080078125, worst -0.05991300940513611
Time: prepare 0.0639    bound 0.2485    transfer 0.0128    finalize 0.0147    func 0.3617    
Accumulated time: func 2.0486    prepare 0.2139    bound 1.6917    transfer 0.0404    finalize 0.0475    
all_split False
======================Cut inference begins======================
max lb tensor(0.03769812) min lb tensor(-0.05990326)
Number of Verified Splits: 769 of 3282
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 105.
#cuts 1-3: 21
#cuts 4-6: 69
#cuts 7-9: 15
#cuts >= 20: 0
BICCOS time: 0.24010992050170898 
BICCOS Cumulative time: 0.9325330257415771
Preprocessing time: 0.10021805763244629 Inference time: 0.10884761810302734 Add cuts time: 0.02727675437927246 Cut analysis time: 0.0037674903869628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05990 (17), -0.05890 (17), -0.05823 (17), -0.05806 (17), -0.05766 (17), -0.05705 (17), -0.05639 (17), -0.05582 (17), -0.05326 (17), -0.05244 (17), -0.05210 (17), -0.05188 (17), -0.05146 (17), -0.05142 (17), -0.05139 (17), -0.05109 (17), -0.05077 (17), -0.05056 (17), -0.05043 (17), -0.05026 (17), 
Length of domains: 2513
Time: pickout 0.0222    decision 0.1007    set_bounds 0.2601    solve 0.3624    add 0.0105    
Accumulated time: pickout 0.0649    decision 0.8721    set_bounds 0.7175    solve 1.8893    add 0.1980    
Current (lb-rhs): -0.05990326404571533
6816 domains visited
Cumulative time: 4.884077310562134

BaB round 9
batch: 2513
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 506] [/input-8, 1268] [/input-8, 506] [/input-8, 1306] [/input-8, 506] [/input-8, 1306] [/input-8, 506] [/input-8, 1268] [/input-8, 1714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057443857192993164
10 lb beta sum: 0.5113356709480286, worst -0.06310194730758667
Time: prepare 0.0994    bound 0.3465    transfer 0.0245    finalize 0.0245    func 0.5282    
Accumulated time: func 2.5768    prepare 0.3136    bound 2.0382    transfer 0.0649    finalize 0.0721    
all_split False
======================Cut inference begins======================
max lb tensor(0.01657027) min lb tensor(-0.05549109)
Number of Verified Splits: 1342 of 5026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 136.
#cuts 1-3: 26
#cuts 4-6: 83
#cuts 7-9: 27
#cuts >= 20: 0
BICCOS time: 0.4012870788574219 
BICCOS Cumulative time: 1.333820104598999
Preprocessing time: 0.15636825561523438 Inference time: 0.20241546630859375 Add cuts time: 0.03731656074523926 Cut analysis time: 0.005186796188354492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05549 (18), -0.05448 (18), -0.05379 (18), -0.05364 (18), -0.05325 (18), -0.05277 (18), -0.05263 (18), -0.05195 (18), -0.05177 (18), -0.05140 (18), -0.05107 (18), -0.05092 (18), -0.05053 (18), -0.04992 (18), -0.04923 (18), -0.04883 (18), -0.04869 (18), -0.04801 (18), -0.04771 (18), -0.04741 (18), 
Length of domains: 3684
Time: pickout 0.0334    decision 0.1441    set_bounds 0.3672    solve 0.5293    add 0.0114    
Accumulated time: pickout 0.0983    decision 1.0162    set_bounds 1.0847    solve 2.4186    add 0.2094    
Current (lb-rhs): -0.055491089820861816
10500 domains visited
Cumulative time: 6.388716697692871

BaB round 10
batch: 3684
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 1068] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.055040597915649414
10 lb beta sum: 0.5017443299293518, worst -0.05317932367324829
Time: prepare 0.1472    bound 0.4809    transfer 0.0355    finalize 0.0361    func 0.7490    
Accumulated time: func 3.3258    prepare 0.4611    bound 2.5191    transfer 0.1004    finalize 0.1082    
all_split False
======================Cut inference begins======================
max lb tensor(0.02009284) min lb tensor(-0.05316794)
Number of Verified Splits: 3065 of 7368
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 197.
#cuts 1-3: 27
#cuts 4-6: 143
#cuts 7-9: 27
#cuts >= 20: 0
BICCOS time: 0.9737608432769775 
BICCOS Cumulative time: 2.3075809478759766
Preprocessing time: 0.38622474670410156 Inference time: 0.4872558116912842 Add cuts time: 0.09262633323669434 Cut analysis time: 0.007653951644897461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05317 (19), -0.05214 (19), -0.05147 (19), -0.05138 (19), -0.05091 (19), -0.05045 (19), -0.05035 (19), -0.04968 (19), -0.04944 (19), -0.04912 (19), -0.04875 (19), -0.04866 (19), -0.04821 (19), -0.04765 (19), -0.04697 (19), -0.04653 (19), -0.04642 (19), -0.04568 (19), -0.04537 (19), -0.04505 (19), 
Length of domains: 4303
Time: pickout 0.0653    decision 0.3593    set_bounds 0.3246    solve 0.7507    add 0.0155    
Accumulated time: pickout 0.1636    decision 1.3755    set_bounds 1.4093    solve 3.1693    add 0.2248    
Current (lb-rhs): -0.05316793918609619
14803 domains visited
Cumulative time: 8.915273666381836

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052579402923583984
10 lb beta sum: 0.49622446298599243, worst -0.05071151256561279
Time: prepare 0.1697    bound 0.5410    transfer 0.0368    finalize 0.0445    func 0.8457    
Accumulated time: func 4.1715    prepare 0.6311    bound 3.0601    transfer 0.1373    finalize 0.1527    
all_split False
======================Cut inference begins======================
max lb tensor(0.31080976) min lb tensor(-0.05069387)
Number of Verified Splits: 4216 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 180.
#cuts 1-3: 21
#cuts 4-6: 151
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 1.2426352500915527 
BICCOS Cumulative time: 3.5502161979675293
Preprocessing time: 0.25800466537475586 Inference time: 0.8655829429626465 Add cuts time: 0.11288928985595703 Cut analysis time: 0.006158351898193359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05069 (20), -0.04967 (20), -0.04899 (20), -0.04890 (20), -0.04844 (20), -0.04798 (20), -0.04788 (20), -0.04720 (20), -0.04697 (20), -0.04665 (20), -0.04627 (20), -0.04619 (20), -0.04573 (20), -0.04518 (20), -0.04448 (20), -0.04405 (20), -0.04394 (20), -0.04321 (20), -0.04300 (20), -0.04254 (20), 
Length of domains: 4183
Time: pickout 0.0581    decision 0.2247    set_bounds 0.5387    solve 0.8481    add 0.0121    
Accumulated time: pickout 0.2217    decision 1.6003    set_bounds 1.9480    solve 4.0174    add 0.2369    
Current (lb-rhs): -0.05069386959075928
18779 domains visited
current_vram/total_varm: 11.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.894308805465698

BaB round 12
batch: 4183
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051102638244628906
10 lb beta sum: 0.45205309987068176, worst -0.05924445390701294
Time: prepare 0.1787    bound 0.5478    transfer 0.0409    finalize 0.0468    func 0.8696    
Accumulated time: func 5.0411    prepare 0.8100    bound 3.6079    transfer 0.1782    finalize 0.1995    
all_split False
======================Cut inference begins======================
max lb tensor(0.21152321) min lb tensor(-0.04923069)
Number of Verified Splits: 4981 of 8366
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 184.
#cuts 1-3: 32
#cuts 4-6: 136
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 1.4067320823669434 
BICCOS Cumulative time: 4.956948280334473
Preprocessing time: 0.2671480178833008 Inference time: 1.006016731262207 Add cuts time: 0.12743163108825684 Cut analysis time: 0.006135702133178711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04923 (21), -0.04820 (21), -0.04754 (21), -0.04744 (21), -0.04698 (21), -0.04651 (21), -0.04641 (21), -0.04575 (21), -0.04550 (21), -0.04519 (21), -0.04482 (21), -0.04472 (21), -0.04427 (21), -0.04371 (21), -0.04303 (21), -0.04268 (21), -0.04248 (21), -0.04175 (21), -0.04158 (21), -0.04116 (21), 
Length of domains: 3385
Time: pickout 0.0752    decision 0.2353    set_bounds 0.5429    solve 0.8726    add 0.0214    
Accumulated time: pickout 0.2968    decision 1.8355    set_bounds 2.4909    solve 4.8900    add 0.2583    
Current (lb-rhs): -0.04923069477081299
22164 domains visited
Cumulative time: 15.108842372894287

BaB round 13
batch: 3385
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04803133010864258
10 lb beta sum: 0.5913591384887695, worst -0.09735095500946045
Time: prepare 0.1428    bound 0.4565    transfer 0.0343    finalize 0.0373    func 0.8909    
Accumulated time: func 5.9320    prepare 0.9531    bound 4.0644    transfer 0.2125    finalize 0.2368    
all_split False
======================Cut inference begins======================
max lb tensor(0.33745193) min lb tensor(-0.04616112)
Number of Verified Splits: 4646 of 6770
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 160.
#cuts 1-3: 42
#cuts 4-6: 117
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.1212456226348877 
BICCOS Cumulative time: 6.07819390296936
Preprocessing time: 0.2175610065460205 Inference time: 0.777529239654541 Add cuts time: 0.12129831314086914 Cut analysis time: 0.004857063293457031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04616 (22), -0.04512 (22), -0.04446 (22), -0.04436 (22), -0.04388 (22), -0.04340 (22), -0.04332 (22), -0.04266 (22), -0.04239 (22), -0.04207 (22), -0.04169 (22), -0.04160 (22), -0.04114 (22), -0.04059 (22), -0.03989 (22), -0.03959 (22), -0.03933 (22), -0.03864 (22), -0.03851 (22), -0.03806 (22), 
Length of domains: 2124
Time: pickout 0.0528    decision 0.1910    set_bounds 0.2965    solve 0.8928    add 0.0106    
Accumulated time: pickout 0.3496    decision 2.0265    set_bounds 2.7874    solve 5.7829    add 0.2689    
Current (lb-rhs): -0.046161115169525146
24288 domains visited
Cumulative time: 17.73012399673462

BaB round 14
batch: 2124
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 1057] [/input-12, 86] [/input-12, 86] [/input-8, 1057] [/input-8, 1057] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04458761215209961
10 lb beta sum: 0.7161540389060974, worst -0.052973806858062744
Time: prepare 0.0882    bound 0.3104    transfer 0.0158    finalize 0.0233    func 0.4652    
Accumulated time: func 6.3971    prepare 1.0416    bound 4.3747    transfer 0.2283    finalize 0.2601    
all_split False
======================Cut inference begins======================
max lb tensor(0.32437780) min lb tensor(-0.04273185)
Number of Verified Splits: 2258 of 4248
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 100.
#cuts 1-3: 39
#cuts 4-6: 61
#cuts >= 20: 0
BICCOS time: 0.5683798789978027 
BICCOS Cumulative time: 6.646573781967163
Preprocessing time: 0.1365528106689453 Inference time: 0.3807196617126465 Add cuts time: 0.048390865325927734 Cut analysis time: 0.002716541290283203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04273 (23), -0.04169 (23), -0.04102 (23), -0.04091 (23), -0.04045 (23), -0.03987 (23), -0.03920 (23), -0.03863 (23), -0.03838 (23), -0.03737 (23), -0.03667 (23), -0.03658 (23), -0.03655 (23), -0.03651 (23), -0.03613 (23), -0.03597 (23), -0.03556 (23), -0.03551 (23), -0.03551 (23), -0.03528 (23), 
Length of domains: 1990
Time: pickout 0.0340    decision 0.1237    set_bounds 0.3399    solve 0.4660    add 0.0096    
Accumulated time: pickout 0.3837    decision 2.1502    set_bounds 3.1273    solve 6.2489    add 0.2785    
Current (lb-rhs): -0.04273185133934021
26278 domains visited
Cumulative time: 19.300251007080078

BaB round 15
batch: 1990
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 1626] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 629] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04192686080932617
10 lb beta sum: 0.7404211163520813, worst -0.09753099083900452
Time: prepare 0.0814    bound 0.2868    transfer 0.0147    finalize 0.0206    func 0.4301    
Accumulated time: func 6.8272    prepare 1.1232    bound 4.6615    transfer 0.2430    finalize 0.2808    
all_split False
======================Cut inference begins======================
max lb tensor(0.42605793) min lb tensor(-0.04007062)
Number of Verified Splits: 2272 of 3980
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 77.
#cuts 1-3: 43
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.5561118125915527 
BICCOS Cumulative time: 7.202685594558716
Preprocessing time: 0.12665367126464844 Inference time: 0.3913455009460449 Add cuts time: 0.036119699478149414 Cut analysis time: 0.001992940902709961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04007 (24), -0.03903 (24), -0.03836 (24), -0.03806 (24), -0.03778 (24), -0.03702 (24), -0.03635 (24), -0.03577 (24), -0.03570 (24), -0.03470 (24), -0.03400 (24), -0.03389 (24), -0.03385 (24), -0.03368 (24), -0.03346 (24), -0.03331 (24), -0.03285 (24), -0.03284 (24), -0.03273 (24), -0.03268 (24), 
Length of domains: 1708
Time: pickout 0.0322    decision 0.1150    set_bounds 0.3264    solve 0.4314    add 0.0066    
Accumulated time: pickout 0.4159    decision 2.2652    set_bounds 3.4537    solve 6.6803    add 0.2851    
Current (lb-rhs): -0.04007062315940857
27986 domains visited
Cumulative time: 20.795981645584106

BaB round 16
batch: 1708
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03865242004394531
10 lb beta sum: 0.6860623359680176, worst -0.09433948993682861
Time: prepare 0.0679    bound 0.2550    transfer 0.0130    finalize 0.0178    func 0.3763    
Accumulated time: func 7.2035    prepare 1.1913    bound 4.9166    transfer 0.2559    finalize 0.2986    
all_split False
======================Cut inference begins======================
max lb tensor(0.41864991) min lb tensor(-0.03678256)
Number of Verified Splits: 1493 of 3416
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 91.
#cuts 1-3: 46
#cuts 4-6: 45
#cuts >= 20: 0
BICCOS time: 0.4040665626525879 
BICCOS Cumulative time: 7.606752157211304
Preprocessing time: 0.10835504531860352 Inference time: 0.2644672393798828 Add cuts time: 0.028876543045043945 Cut analysis time: 0.002367734909057617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03678 (25), -0.03575 (25), -0.03508 (25), -0.03491 (25), -0.03450 (25), -0.03387 (25), -0.03320 (25), -0.03263 (25), -0.03253 (25), -0.03153 (25), -0.03083 (25), -0.03071 (25), -0.03068 (25), -0.03068 (25), -0.03030 (25), -0.03029 (25), -0.03004 (25), -0.02967 (25), -0.02967 (25), -0.02967 (25), 
Length of domains: 1923
Time: pickout 0.0345    decision 0.1014    set_bounds 0.2847    solve 0.3771    add 0.0126    
Accumulated time: pickout 0.4504    decision 2.3666    set_bounds 3.7384    solve 7.0575    add 0.2978    
Current (lb-rhs): -0.03678256273269653
29909 domains visited
Cumulative time: 22.030354022979736

BaB round 17
batch: 1923
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] [/input-8, 1714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03338432312011719
10 lb beta sum: 0.5792819261550903, worst -0.0891687273979187
Time: prepare 0.2084    bound 0.2788    transfer 0.0169    finalize 0.0198    func 0.5498    
Accumulated time: func 7.7533    prepare 1.4000    bound 5.1954    transfer 0.2728    finalize 0.3184    
all_split False
======================Cut inference begins======================
max lb tensor(0.34298044) min lb tensor(-0.03146872)
Number of Verified Splits: 1742 of 3846
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 37
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.45625853538513184 
BICCOS Cumulative time: 8.063010692596436
Preprocessing time: 0.11795711517333984 Inference time: 0.31502461433410645 Add cuts time: 0.022107601165771484 Cut analysis time: 0.0011692047119140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03147 (26), -0.03048 (26), -0.03046 (26), -0.02976 (26), -0.02959 (26), -0.02949 (26), -0.02921 (26), -0.02910 (26), -0.02877 (26), -0.02861 (26), -0.02859 (26), -0.02825 (26), -0.02810 (26), -0.02789 (26), -0.02762 (26), -0.02740 (26), -0.02734 (26), -0.02725 (26), -0.02722 (26), -0.02690 (26), 
Length of domains: 2104
Time: pickout 0.0320    decision 0.1130    set_bounds 0.1671    solve 0.5514    add 0.0109    
Accumulated time: pickout 0.4824    decision 2.4796    set_bounds 3.9054    solve 7.6088    add 0.3087    
Current (lb-rhs): -0.031468719244003296
32013 domains visited
Cumulative time: 23.385701417922974

BaB round 18
batch: 2104
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] [/input-8, 505] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03119826316833496
10 lb beta sum: 0.6377737522125244, worst -0.038623541593551636
Time: prepare 0.0836    bound 0.2939    transfer 0.0164    finalize 0.0202    func 0.4420    
Accumulated time: func 8.1954    prepare 1.4838    bound 5.4893    transfer 0.2892    finalize 0.3386    
all_split False
======================Cut inference begins======================
max lb tensor(0.04791376) min lb tensor(-0.02933323)
Number of Verified Splits: 1963 of 4208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 44
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.5169141292572021 
BICCOS Cumulative time: 8.579924821853638
Preprocessing time: 0.13078951835632324 Inference time: 0.3645296096801758 Add cuts time: 0.020163297653198242 Cut analysis time: 0.0014317035675048828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02933 (27), -0.02832 (27), -0.02801 (27), -0.02762 (27), -0.02746 (27), -0.02708 (27), -0.02705 (27), -0.02699 (27), -0.02645 (27), -0.02630 (27), -0.02613 (27), -0.02604 (27), -0.02575 (27), -0.02574 (27), -0.02534 (27), -0.02521 (27), -0.02518 (27), -0.02511 (27), -0.02501 (27), -0.02480 (27), 
Length of domains: 2245
Time: pickout 0.0345    decision 0.1226    set_bounds 0.3236    solve 0.4431    add 0.0097    
Accumulated time: pickout 0.5168    decision 2.6022    set_bounds 4.2291    solve 8.0519    add 0.3183    
Current (lb-rhs): -0.02933323383331299
34258 domains visited
Cumulative time: 24.860900402069092

BaB round 19
batch: 2245
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] [/input-8, 468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025968551635742188
10 lb beta sum: 0.5611260533332825, worst -0.02397090196609497
Time: prepare 0.0905    bound 0.3095    transfer 0.0169    finalize 0.0210    func 0.4685    
Accumulated time: func 8.6639    prepare 1.5745    bound 5.7988    transfer 0.3061    finalize 0.3596    
all_split False
======================Cut inference begins======================
max lb tensor(0.01289541) min lb tensor(-0.02389944)
Number of Verified Splits: 2246 of 4490
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 43
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.5956745147705078 
BICCOS Cumulative time: 9.175599336624146
Preprocessing time: 0.13975214958190918 Inference time: 0.43008923530578613 Add cuts time: 0.024553298950195312 Cut analysis time: 0.0012798309326171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02390 (28), -0.02318 (28), -0.02294 (28), -0.02257 (28), -0.02216 (28), -0.02210 (28), -0.02203 (28), -0.02185 (28), -0.02162 (28), -0.02160 (28), -0.02153 (28), -0.02148 (28), -0.02131 (28), -0.02107 (28), -0.02101 (28), -0.02090 (28), -0.02082 (28), -0.02077 (28), -0.02070 (28), -0.02066 (28), 
Length of domains: 2244
Time: pickout 0.0389    decision 0.1287    set_bounds 0.3617    solve 0.4701    add 0.0067    
Accumulated time: pickout 0.5557    decision 2.7309    set_bounds 4.5908    solve 8.5220    add 0.3250    
Current (lb-rhs): -0.023899435997009277
36502 domains visited
Cumulative time: 26.494608640670776

BaB round 20
batch: 2244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] [/input-8, 593] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023207902908325195
10 lb beta sum: 0.48675012588500977, worst -0.022257834672927856
Time: prepare 0.0918    bound 0.3125    transfer 0.0178    finalize 0.0224    func 0.4753    
Accumulated time: func 9.1392    prepare 1.6666    bound 6.1112    transfer 0.3239    finalize 0.3820    
all_split False
======================Cut inference begins======================
max lb tensor(0.00854337) min lb tensor(-0.02127892)
Number of Verified Splits: 2955 of 4488
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 34
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.7578058242797852 
BICCOS Cumulative time: 9.93340516090393
Preprocessing time: 0.14326977729797363 Inference time: 0.5892126560211182 Add cuts time: 0.024283409118652344 Cut analysis time: 0.0010399818420410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02128 (29), -0.02062 (29), -0.02031 (29), -0.01995 (29), -0.01960 (29), -0.01953 (29), -0.01941 (29), -0.01929 (29), -0.01900 (29), -0.01899 (29), -0.01896 (29), -0.01890 (29), -0.01874 (29), -0.01845 (29), -0.01843 (29), -0.01833 (29), -0.01826 (29), -0.01820 (29), -0.01807 (29), -0.01803 (29), 
Length of domains: 1533
Time: pickout 0.0609    decision 0.1345    set_bounds 0.3998    solve 0.4765    add 0.0489    
Accumulated time: pickout 0.6166    decision 2.8655    set_bounds 4.9906    solve 8.9985    add 0.3740    
Current (lb-rhs): -0.02127891778945923
38035 domains visited
Cumulative time: 28.4155375957489

BaB round 21
batch: 1533
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] [/input-8, 1773] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021297454833984375
10 lb beta sum: 0.5862128734588623, worst -0.03790590167045593
Time: prepare 0.0600    bound 0.2334    transfer 0.0129    finalize 0.0154    func 0.3416    
Accumulated time: func 9.4808    prepare 1.7269    bound 6.3447    transfer 0.3367    finalize 0.3974    
all_split False
======================Cut inference begins======================
max lb tensor(0.23623359) min lb tensor(-0.01942408)
Number of Verified Splits: 1957 of 3066
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 36
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.49388718605041504 
BICCOS Cumulative time: 10.427292346954346
Preprocessing time: 0.09624838829040527 Inference time: 0.38137221336364746 Add cuts time: 0.015414714813232422 Cut analysis time: 0.0008518695831298828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01942 (30), -0.01877 (30), -0.01844 (30), -0.01809 (30), -0.01776 (30), -0.01768 (30), -0.01748 (30), -0.01744 (30), -0.01716 (30), -0.01714 (30), -0.01709 (30), -0.01705 (30), -0.01683 (30), -0.01661 (30), -0.01650 (30), -0.01649 (30), -0.01641 (30), -0.01634 (30), -0.01616 (30), -0.01615 (30), 
Length of domains: 1109
Time: pickout 0.0308    decision 0.0950    set_bounds 0.2797    solve 0.3430    add 0.0038    
Accumulated time: pickout 0.6475    decision 2.9604    set_bounds 5.2703    solve 9.3415    add 0.3778    
Current (lb-rhs): -0.019424080848693848
39144 domains visited
Cumulative time: 29.686439037322998

BaB round 22
batch: 1109
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] [/input-8, 626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01825714111328125
10 lb beta sum: 0.4275546371936798, worst -0.016356557607650757
Time: prepare 0.0446    bound 0.1831    transfer 0.0068    finalize 0.0111    func 0.2611    
Accumulated time: func 9.7418    prepare 1.7718    bound 6.5277    transfer 0.3436    finalize 0.4086    
all_split False
======================Cut inference begins======================
max lb tensor(0.01106477) min lb tensor(-0.01634371)
Number of Verified Splits: 1514 of 2218
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.3765299320220947 
BICCOS Cumulative time: 10.80382227897644
Preprocessing time: 0.0673363208770752 Inference time: 0.2967381477355957 Add cuts time: 0.011876106262207031 Cut analysis time: 0.0005793571472167969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01634 (31), -0.01569 (31), -0.01564 (31), -0.01532 (31), -0.01499 (31), -0.01464 (31), -0.01464 (31), -0.01460 (31), -0.01440 (31), -0.01408 (31), -0.01397 (31), -0.01394 (31), -0.01393 (31), -0.01389 (31), -0.01375 (31), -0.01370 (31), -0.01350 (31), -0.01338 (31), -0.01337 (31), -0.01329 (31), 
Length of domains: 704
Time: pickout 0.0433    decision 0.0709    set_bounds 0.0990    solve 0.2615    add 0.0076    
Accumulated time: pickout 0.6908    decision 3.0313    set_bounds 5.3693    solve 9.6030    add 0.3854    
Current (lb-rhs): -0.01634371280670166
39848 domains visited
Cumulative time: 30.557952880859375

BaB round 23
batch: 704
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] [/input-8, 618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014645814895629883
10 lb beta sum: 0.5323867797851562, worst -0.012765467166900635
Time: prepare 0.0281    bound 0.1511    transfer 0.0111    finalize 0.0059    func 0.2060    
Accumulated time: func 9.9478    prepare 1.8002    bound 6.6789    transfer 0.3547    finalize 0.4144    
all_split False
======================Cut inference begins======================
max lb tensor(0.23863637) min lb tensor(-0.01275522)
Number of Verified Splits: 939 of 1408
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.2355337142944336 
BICCOS Cumulative time: 11.039355993270874
Preprocessing time: 0.04256439208984375 Inference time: 0.18546009063720703 Add cuts time: 0.0068912506103515625 Cut analysis time: 0.00061798095703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01276 (32), -0.01210 (32), -0.01201 (32), -0.01185 (32), -0.01137 (32), -0.01120 (32), -0.01108 (32), -0.01098 (32), -0.01081 (32), -0.01066 (32), -0.01062 (32), -0.01046 (32), -0.01043 (32), -0.01036 (32), -0.01018 (32), -0.01018 (32), -0.01016 (32), -0.01008 (32), -0.01007 (32), -0.00999 (32), 
Length of domains: 469
Time: pickout 0.0152    decision 0.1856    set_bounds 0.0614    solve 0.2063    add 0.0027    
Accumulated time: pickout 0.7059    decision 3.2169    set_bounds 5.4306    solve 9.8093    add 0.3881    
Current (lb-rhs): -0.012755215167999268
40317 domains visited
Cumulative time: 31.270898580551147

BaB round 24
batch: 469
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010898828506469727
10 lb beta sum: 0.5075729489326477, worst -0.009019196033477783
Time: prepare 0.0181    bound 0.1338    transfer 0.0019    finalize 0.0045    func 0.1641    
Accumulated time: func 10.1120    prepare 1.8184    bound 6.8127    transfer 0.3566    finalize 0.4189    
all_split False
======================Cut inference begins======================
max lb tensor(0.00360918) min lb tensor(-0.00901109)
Number of Verified Splits: 657 of 938
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.1658918857574463 
BICCOS Cumulative time: 11.20524787902832
Preprocessing time: 0.027387619018554688 Inference time: 0.13316655158996582 Add cuts time: 0.004673480987548828 Cut analysis time: 0.0006642341613769531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00901 (33), -0.00843 (33), -0.00836 (33), -0.00831 (33), -0.00778 (33), -0.00776 (33), -0.00766 (33), -0.00764 (33), -0.00725 (33), -0.00723 (33), -0.00711 (33), -0.00707 (33), -0.00697 (33), -0.00692 (33), -0.00687 (33), -0.00682 (33), -0.00672 (33), -0.00669 (33), -0.00667 (33), -0.00664 (33), 
Length of domains: 281
Time: pickout 0.0113    decision 0.0341    set_bounds 0.0389    solve 0.1643    add 0.0027    
Accumulated time: pickout 0.7173    decision 3.2510    set_bounds 5.4695    solve 9.9736    add 0.3908    
Current (lb-rhs): -0.00901108980178833
40598 domains visited
Cumulative time: 31.69269633293152

BaB round 25
batch: 281
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1651] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0906028747558594, worst -0.006449282169342041
10 lb beta sum: 1.0906028747558594, worst -0.006385385990142822
Time: prepare 0.0253    bound 0.1437    transfer 0.0011    finalize 0.0023    func 0.1765    
Accumulated time: func 10.2885    prepare 1.8440    bound 6.9563    transfer 0.3577    finalize 0.4213    
all_split False
======================Cut inference begins======================
max lb tensor(0.00577629) min lb tensor(-0.00637180)
Number of Verified Splits: 385 of 562
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.09826421737670898 
BICCOS Cumulative time: 11.30351209640503
Preprocessing time: 0.015781641006469727 Inference time: 0.07921218872070312 Add cuts time: 0.0026776790618896484 Cut analysis time: 0.0005927085876464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00637 (34), -0.00572 (34), -0.00571 (34), -0.00507 (34), -0.00502 (34), -0.00460 (34), -0.00443 (34), -0.00437 (34), -0.00433 (34), -0.00429 (34), -0.00426 (34), -0.00408 (34), -0.00396 (34), -0.00388 (34), -0.00385 (34), -0.00383 (34), -0.00378 (34), -0.00377 (34), -0.00363 (34), -0.00362 (34), 
Length of domains: 177
Time: pickout 0.0066    decision 0.0261    set_bounds 0.0237    solve 0.1767    add 0.0026    
Accumulated time: pickout 0.7238    decision 3.2771    set_bounds 5.4932    solve 10.1502    add 0.3934    
Current (lb-rhs): -0.006371796131134033
40775 domains visited
Cumulative time: 32.02888560295105

BaB round 26
batch: 177
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-8, 1713] [/input-8, 1626] [/input-8, 1626] [/input-8, 1713] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004878997802734375
10 lb beta sum: 0.31045302748680115, worst -0.002320587635040283
Time: prepare 0.0069    bound 0.1350    transfer 0.0008    finalize 0.0021    func 0.1470    
Accumulated time: func 10.4355    prepare 1.8512    bound 7.0913    transfer 0.3585    finalize 0.4233    
all_split False
======================Cut inference begins======================
max lb tensor(0.00513884) min lb tensor(-0.00230110)
Number of Verified Splits: 337 of 354
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 36
#cuts >= 20: 0
BICCOS time: 0.08236193656921387 
BICCOS Cumulative time: 11.385874032974243
Preprocessing time: 0.010131359100341797 Inference time: 0.0695958137512207 Add cuts time: 0.002043008804321289 Cut analysis time: 0.0005917549133300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00230 (35), -0.00227 (35), -0.00163 (35), -0.00117 (35), -0.00115 (35), -0.00111 (35), -0.00091 (35), -0.00088 (35), -0.00081 (35), -0.00067 (35), -0.00061 (35), -0.00051 (35), -0.00044 (35), -0.00043 (35), -0.00041 (35), -0.00026 (35), -0.00017 (35), 
Length of domains: 17
Time: pickout 0.0053    decision 0.0219    set_bounds 0.0146    solve 0.1471    add 0.0055    
Accumulated time: pickout 0.7291    decision 3.2991    set_bounds 5.5079    solve 10.2974    add 0.3989    
Current (lb-rhs): -0.0023010969161987305
40792 domains visited
Cumulative time: 32.30754804611206

BaB round 27
batch: 17
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] [/input, 1649] 
split level 1: [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1064] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] 
split level 2: [/input-8, 1676] [/input-8, 1676] [/input-8, 1676] [/input-8, 1676] [/input-8, 1676] [/input-8, 1969] [/input-8, 1676] [/input-8, 1676] [/input-8, 1676] [/input-8, 1676] 
split level 3: [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1676] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] [/input-8, 1064] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0057260990142822266

all verified at 0th iter
Time: prepare 0.0067    bound 0.0049    transfer 0.0018    finalize 0.0015    func 0.0166    
Accumulated time: func 10.4521    prepare 1.8581    bound 7.0962    transfer 0.3603    finalize 0.4249    
all_split False
======================Cut inference begins======================
max lb tensor(0.01695824) min lb tensor(0.00572610)
Number of Verified Splits: 272 of 272
No cut inferred: All or none verified.
Total number of valid cuts: 36.
#cuts 1-3: 36
#cuts >= 20: 0
BICCOS time: 0.007788658142089844 
BICCOS Cumulative time: 11.393662691116333
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0142    set_bounds 0.0203    solve 0.0167    add 0.0004    
Accumulated time: pickout 0.7306    decision 3.3133    set_bounds 5.5281    solve 10.3140    add 0.3992    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
40792 domains visited
Cumulative time: 32.369261741638184


Properties batch 6, size 1
Remaining timeout: 146.34298157691956
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 146.34283232688904
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 146.34280443191528
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 53.6573 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1165]; unstable size 1165; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 1165] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 1165] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1165] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 250] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62490320,  8.33701801,  2.59462070, -0.24409154,  2.26730227,
          1.36074913,  2.49958372,  5.18873644,  7.07310247]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.16810417, -25.43053436, -15.60754871, -19.06594658, -15.93624115,
          -18.74472427, -17.98241234, -19.17751884, -22.21742058, -24.08210182]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.32869244]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1127 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.29866027832031
alpha/beta optimization time: 1.2096304893493652
initial alpha-crown bounds: tensor([[ 3.68976140,  8.44124126,  2.63029647, -0.18903545,  2.30742645,
          1.40437746,  2.56473899,  5.28525162,  7.16459990]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.18903544545173645
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62547063827515
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6254231929779
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62539672851562
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6253764629364
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18903545]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
        -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18903545]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1165
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 1435
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011134147644042969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18903174996376038
10 lb beta sum: 0.0, worst -0.18903017044067383
Time: prepare 0.0002    bound 0.0960    transfer 0.0001    finalize 0.0001    func 0.0965    
Accumulated time: func 0.0965    prepare 0.0002    bound 0.0960    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 90] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 83] 
split level 9: [/input-12, 55] 
split level 10: [/input-8, 165] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 907] 
split level 13: [/input-8, 2010] 
split level 14: [/input-8, 877] 
split level 15: [/input-8, 182] 
split level 16: [/input-8, 1186] 
split level 17: [/input-12, 35] 
split level 18: [/input-8, 2017] 
split level 19: [/input-8, 173] 
split level 20: [/input-8, 2018] 
split level 21: [/input-8, 1178] 
split level 22: [/input-8, 1363] 
split level 23: [/input-8, 1193] 
split level 24: [/input-8, 2003] 
split level 25: [/input-8, 1354] 
split level 26: [/input-8, 1185] 
split level 27: [/input-8, 2026] 
split level 28: [/input-8, 140] 
split level 29: [/input-8, 2000] 
split level 30: [/input-8, 2002] 
split level 31: [/input-8, 1993] 
split level 32: [/input-8, 817] 
split level 33: [/input-8, 801] 
split level 34: [/input-8, 2014] 
split level 35: [/input-8, 1203] 
split level 36: [/input-8, 809] 
split level 37: [/input-8, 1356] 
split level 38: [/input-8, 1992] 
split level 39: [/input-8, 2027] 
split level 40: [/input-8, 175] 
split level 41: [/input-8, 1078] 
split level 42: [/input-8, 2033] 
split level 43: [/input-8, 149] 
split level 44: [/input-8, 810] 
split level 45: [/input, 3147] 
split level 46: [/input-8, 1372] 
split level 47: [/input, 955] 
split level 48: [/input-8, 1382] 
split level 49: [/input, 939] 
split level 50: [/input-8, 39] 
split level 51: [/input, 3131] 
split level 52: [/input-8, 1201] 
split level 53: [/input-8, 1204] 
split level 54: [/input-8, 2008] 
split level 55: [/input, 3548] 
split level 56: [/input, 891] 
split level 57: [/input, 3026] 
split level 58: [/input-8, 150] 
split level 59: [/input-8, 30] 
split level 60: [/input-8, 793] 
split level 61: [/input-8, 1172] 
split level 62: [/input, 947] 
split level 63: [/input, 963] 
split level 64: [/input, 923] 
split level 65: [/input-8, 47] 
split level 66: [/input-8, 591] 
split level 67: [/input-8, 1383] 
split level 68: [/input, 793] 
split level 69: [/input, 3515] 
split level 70: [/input-8, 19] 
split level 71: [/input, 901] 
split level 72: [/input-8, 1081] 
split level 73: [/input, 3522] 
split level 74: [/input, 3507] 
split level 75: [/input, 3097] 
split level 76: [/input, 1592] 
split level 77: [/input-8, 811] 
split level 78: [/input-8, 1177] 
split level 79: [/input, 917] 
split level 80: [/input, 3221] 
split level 81: [/input-8, 1567] 
split level 82: [/input-8, 167] 
split level 83: [/input, 3538] 
split level 84: [/input, 468] 
split level 85: [/input, 2584] 
split level 86: [/input, 907] 
split level 87: [/input, 3141] 
split level 88: [/input, 481] 
split level 89: [/input, 809] 
split level 90: [/input, 922] 
split level 91: [/input-8, 1357] 
split level 92: [/input, 3190] 
split level 93: [/input, 3491] 
split level 94: [/input-8, 2023] 
split level 95: [/input, 938] 
split level 96: [/input, 3523] 
split level 97: [/input, 3206] 
split level 98: [/input, 3539] 
split level 99: [/input, 3238] 
split level 100: [/input-8, 1381] 
split level 101: [/input, 3158] 
split level 102: [/input, 1340] 
split level 103: [/input, 3499] 
split level 104: [/input, 906] 
split level 105: [/input-8, 802] 
split level 106: [/input, 1357] 
split level 107: [/input, 1358] 
split level 108: [/input, 2637] 
split level 109: [/input, 937] 
split level 110: [/input-8, 623] 
split level 111: [/input, 2850] 
split level 112: [/input-8, 24] 
split level 113: [/input-8, 583] 
split level 114: [/input, 3386] 
split level 115: [/input, 948] 
split level 116: [/input, 846] 
split level 117: [/input, 54] 
split level 118: [/input, 3252] 
split level 119: [/input, 670] 
split level 120: [/input, 465] 
split level 121: [/input, 142] 
split level 122: [/input, 2638] 
split level 123: [/input, 2914] 
split level 124: [/input-8, 1347] 
split level 125: [/input, 158] 
split level 126: [/input, 3506] 
split level 127: [/input, 2913] 
split level 128: [/input, 885] 
split level 129: [/input, 3174] 
split level 130: [/input, 2853] 
split level 131: [/input, 1341] 
split level 132: [/input, 97] 
split level 133: [/input, 3483] 
split level 134: [/input, 2583] 
split level 135: [/input, 2427] 
split level 136: [/input, 2846] 
split level 137: [/input, 3157] 
split level 138: [/input, 65] 
split level 139: [/input, 979] 
split level 140: [/input, 2654] 
split level 141: [/input, 869] 
split level 142: [/input, 3058] 
split level 143: [/input, 3459] 
split level 144: [/input, 876] 
split level 145: [/input, 2851] 
split level 146: [/input, 2087] 
split level 147: [/input, 964] 
split level 148: [/input, 2670] 
split level 149: [/input, 2837] 
split level 150: [/input, 334] 
split level 151: [/input, 78] 
split level 152: [/input, 33] 
split level 153: [/input, 3948] 
split level 154: [/input, 21] 
split level 155: [/input, 3259] 
split level 156: [/input, 791] 
split level 157: [/input-8, 1197] 
split level 158: [/input, 3027] 
split level 159: [/input, 2577] 
split level 160: [/input, 46] 
split level 161: [/input-8, 324] 
split level 162: [/input, 341] 
split level 163: [/input-8, 1268] 
split level 164: [/input, 2881] 
split level 165: [/input, 2882] 
split level 166: [/input, 38] 
split level 167: [/input, 34] 
split level 168: [/input, 53] 
split level 169: [/input, 62] 
split level 170: [/input, 2606] 
split level 171: [/input, 980] 
split level 172: [/input, 836] 
split level 173: [/input, 20] 
split level 174: [/input, 3124] 
split level 175: [/input, 2836] 
split level 176: [/input, 113] 
split level 177: [/input, 3269] 
split level 178: [/input, 2897] 
split level 179: [/input, 87] 
split level 180: [/input, 3140] 
split level 181: [/input, 342] 
split level 182: [/input, 3243] 
split level 183: [/input, 114] 
split level 184: [/input, 36] 
split level 185: [/input, 2578] 
split level 186: [/input, 2661] 
split level 187: [/input, 2110] 
split level 188: [/input, 2898] 
split level 189: [/input, 1486] 
split level 190: [/input, 3475] 
split level 191: [/input, 17] 
split level 192: [/input, 3125] 
split level 193: [/input, 2845] 
split level 194: [/input, 30] 
split level 195: [/input, 1470] 
split level 196: [/input, 951] 
split level 197: [/input, 29] 
split level 198: [/input, 2134] 
split level 199: [/input, 2835] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18894296884536743
10 lb beta sum: 0.0, worst -0.18894314765930176
Time: prepare 0.0115    bound 0.0995    transfer 0.0015    finalize 0.0029    func 0.1181    
Accumulated time: func 0.2146    prepare 0.0216    bound 0.1955    transfer 0.0016    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.23746914) min lb tensor(-0.18894258)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.010916709899902344 
BICCOS Cumulative time: 0.010916709899902344
Preprocessing time: 0.009929895401000977 Inference time: 0.00026798248291015625 Add cuts time: 0.00010514259338378906 Cut analysis time: 0.0006136894226074219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18312 (1), -0.18308 (1), -0.18300 (1), -0.18289 (1), -0.18271 (1), -0.18260 (1), -0.18215 (1), -0.18210 (1), -0.18173 (1), -0.18166 (1), -0.18164 (1), -0.18145 (1), -0.18105 (1), -0.18100 (1), -0.18095 (1), -0.18090 (1), -0.18089 (1), -0.18062 (1), -0.18051 (1), -0.18028 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5144    set_bounds 0.0090    solve 0.1182    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5144    set_bounds 0.0090    solve 0.1182    add 0.0702    
Current (lb-rhs): -0.1831238865852356
50 domains visited
Cumulative time: 0.8244411945343018

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16106751561164856
10 lb beta sum: 1.0347520112991333, worst -0.111663818359375
Time: prepare 0.0069    bound 0.1164    transfer 0.0008    finalize 0.0021    func 0.1287    
Accumulated time: func 0.3433    prepare 0.0287    bound 0.3119    transfer 0.0024    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.39295390) min lb tensor(-0.11152375)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.019782304763793945 
BICCOS Cumulative time: 0.03069901466369629
Preprocessing time: 0.011641979217529297 Inference time: 0.005692481994628906 Add cuts time: 0.0021147727966308594 Cut analysis time: 0.0003330707550048828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05646 (2), -0.05447 (2), -0.05428 (2), -0.05422 (2), -0.05421 (2), -0.05405 (2), -0.05404 (2), -0.05105 (2), -0.05027 (2), -0.04870 (2), -0.04842 (2), -0.04812 (2), -0.04793 (2), -0.04779 (2), -0.04762 (2), -0.04739 (2), -0.04719 (2), -0.04648 (2), -0.04641 (2), -0.04612 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0123    solve 0.1288    add 0.0929    
Accumulated time: pickout 0.0014    decision 0.5342    set_bounds 0.0214    solve 0.2470    add 0.1631    
Current (lb-rhs): -0.05645817518234253
100 domains visited
Cumulative time: 1.0993719100952148

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 10] [/input-12, 10] [/input-12, 90] 
split level 2: [/input-12, 90] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 10] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12349402904510498

all verified at 2th iter
Time: prepare 0.0071    bound 0.0173    transfer 0.0007    finalize 0.0020    func 0.0296    
Accumulated time: func 0.3729    prepare 0.0360    bound 0.3292    transfer 0.0031    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.35966200) min lb tensor(0.01185113)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 56
#cuts >= 20: 0
BICCOS time: 0.03797173500061035 
BICCOS Cumulative time: 0.06867074966430664
Preprocessing time: 0.011270284652709961 Inference time: 0.015686511993408203 Add cuts time: 0.009905099868774414 Cut analysis time: 0.0011098384857177734
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0167    solve 0.0296    add 0.0222    
Accumulated time: pickout 0.0024    decision 0.5536    set_bounds 0.0380    solve 0.2766    add 0.1852    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  7.82875568e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.09926262e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  7.87748843e-02,  1.19703338e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  7.87748843e-02,  6.61084801e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.22904876e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0807233452796936

all verified at 1th iter
Time: prepare 0.0003    bound 0.0192    transfer 0.0001    finalize 0.0002    func 0.0199    
Accumulated time: func 0.3928    prepare 0.0364    bound 0.3484    transfer 0.0033    finalize 0.0072    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.20277762413025
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.20270466804504
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.20268154144287
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.20266151428223
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.20220732688904
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.7979 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.55639648, -33.09785080, -28.00553131, -27.40239906, -25.07222748,
         -27.10820198, -28.42906952, -22.25778961, -33.87366104, -32.03707886]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 701] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 701] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 288] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.60428238, 8.63137341, 4.23884392, 3.83983850, 1.92058945, 3.60424948,
         4.34731674, 9.57411480, 7.57268620]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0557 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.15664101, -31.39657593, -29.82341003, -30.75438118, -29.41454315,
         -31.94305992, -31.96259689, -30.53670311, -26.03734589, -29.66164589]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 659] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 659] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 197] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.00890577, 3.93032002, 2.37446547, 3.40709305, 1.97647119, 4.41568375,
         4.39016867, 2.74542379, 2.46872425]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0510 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.57001877, -21.33278465, -16.48242188, -17.88305855, -15.84688187,
         -18.45724487, -14.43099213, -19.91347122, -21.41075134, -23.09995651]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [825]; unstable size 825; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 238, 1, 825] with unstable size 237 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 825] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 825] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [237]; unstable size 237; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 237] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.65802526, 4.90856361, 1.05104494, 2.50940776, 0.27425599, 2.85676765,
         3.60879087, 4.98580980, 6.49914980]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0329 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.83767509, -29.44007301, -28.61532784, -29.34156609, -28.70956039,
         -30.31670189, -29.03779984, -30.47285080, -29.20039749, -29.62815285]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 642] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 206] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.54947019, 1.96131420, 2.40498400, 1.83005691, 3.13335991, 2.10148072,
         3.19824505, 2.43338394, 2.73391485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0490 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 654] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 215] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30025935,  2.79075527, -0.64696014, -0.28283519, -0.00568270,
          0.09187210,  0.48905283,  0.94048774,  1.32147741]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.16070747, -18.60272026, -14.32037830, -14.41568756, -14.80318546,
          -14.87370014, -15.22083282, -16.08508301, -16.55334473, -17.22670746],
         [-15.16070747, -18.60272026, -14.32037830, -14.41568756, -14.80318546,
          -14.87370014, -15.22083282, -16.08508301, -16.55334473, -17.22670746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74501991, -0.09530926,  0.38749790,  0.45801258]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0070 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0748 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.66821480, -25.16157913, -20.16737556, -19.99334526, -19.84637260,
         -20.53302574, -17.62543488, -22.75561523, -24.62155914, -24.01429939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [562]; unstable size 562; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 562] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 562] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 562] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 328] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44212151, 5.09512997, 1.39435494, 1.28885603, 0.93852150, 1.63264382,
         3.03026295, 4.88076591, 3.91813231]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0321 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.91881180, -32.59530640, -30.29003906, -30.00774956, -29.24390221,
         -30.22264290, -30.82009125, -25.47676849, -32.91277695, -30.89614296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [668]; unstable size 668; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 668] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 668] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 668] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 226] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83449817, 5.22893524, 3.33997321, 3.20848751, 2.84958315, 3.43617392,
         3.74271822, 5.64434671, 3.49463987]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0428 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.62759590, -34.41730499, -33.84094238, -35.56791306, -34.24832153,
         -36.28593826, -34.87154770, -35.38038635, -33.02691269, -33.01538467]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 642] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 208] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.30125916, 1.11236954, 2.63641548, 1.30713105, 3.22894740, 1.90847683,
         2.05579615, 0.40490302, 0.05632377]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0502 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 579] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 579] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 231] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71136594,  4.01701736, -0.51415730,  0.11190543,  0.39652133,
          0.75778311,  1.25336599,  4.93491936,  2.87650251]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.62it/s]100%|██████████| 1/1 [00:00<00:00,  8.61it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.90902328, -21.90532684, -16.25102234, -16.58778763, -17.33627510,
          -16.20533562, -17.73783112, -18.40386963, -22.94217110, -20.61736488]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04568672]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1187 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.178878784179688
alpha/beta optimization time: 1.233393907546997
initial alpha-crown bounds: tensor([[ 2.79542255,  4.10366726, -0.45930839,  0.13562950,  0.45598078,
          0.80009270,  1.31134069,  5.06682491,  2.96922898]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.459308385848999
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6185622215271
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61852073669434
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61848998069763
Verifying property 2 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.45930839]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
        -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.45930839]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 579
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 226
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 825
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00015974044799804688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4593048095703125
10 lb beta sum: 0.0, worst -0.45931410789489746
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0002    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 72] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 7] 
split level 5: [/input-12, 17] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 64] 
split level 8: [/input-8, 1699] 
split level 9: [/input-8, 1949] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 226] 
split level 12: [/input-8, 1684] 
split level 13: [/input-8, 217] 
split level 14: [/input-8, 1946] 
split level 15: [/input-8, 437] 
split level 16: [/input-8, 1579] 
split level 17: [/input-8, 219] 
split level 18: [/input-8, 1637] 
split level 19: [/input-8, 254] 
split level 20: [/input-8, 427] 
split level 21: [/input-8, 428] 
split level 22: [/input-8, 253] 
split level 23: [/input-8, 209] 
split level 24: [/input-8, 212] 
split level 25: [/input-8, 434] 
split level 26: [/input-8, 410] 
split level 27: [/input-8, 733] 
split level 28: [/input-8, 47] 
split level 29: [/input-8, 249] 
split level 30: [/input-8, 250] 
split level 31: [/input-8, 55] 
split level 32: [/input-8, 1711] 
split level 33: [/input, 3543] 
split level 34: [/input-8, 423] 
split level 35: [/input-8, 435] 
split level 36: [/input-8, 1107] 
split level 37: [/input-8, 415] 
split level 38: [/input-8, 1686] 
split level 39: [/input-8, 1583] 
split level 40: [/input-8, 438] 
split level 41: [/input-8, 366] 
split level 42: [/input-8, 1316] 
split level 43: [/input-8, 227] 
split level 44: [/input, 985] 
split level 45: [/input, 3285] 
split level 46: [/input-8, 237] 
split level 47: [/input-8, 224] 
split level 48: [/input-8, 402] 
split level 49: [/input-8, 218] 
split level 50: [/input-8, 213] 
split level 51: [/input-8, 216] 
split level 52: [/input-8, 929] 
split level 53: [/input-8, 1338] 
split level 54: [/input-8, 281] 
split level 55: [/input-8, 229] 
split level 56: [/input, 1691] 
split level 57: [/input-8, 204] 
split level 58: [/input-8, 222] 
split level 59: [/input, 2789] 
split level 60: [/input, 473] 
split level 61: [/input-8, 198] 
split level 62: [/input-8, 1938] 
split level 63: [/input-8, 407] 
split level 64: [/input-8, 228] 
split level 65: [/input, 3130] 
split level 66: [/input-8, 195] 
split level 67: [/input, 1001] 
split level 68: [/input-8, 412] 
split level 69: [/input-8, 44] 
split level 70: [/input-8, 1389] 
split level 71: [/input-8, 248] 
split level 72: [/input, 2794] 
split level 73: [/input-8, 232] 
split level 74: [/input, 3305] 
split level 75: [/input-8, 578] 
split level 76: [/input, 2865] 
split level 77: [/input, 3233] 
split level 78: [/input-8, 1669] 
split level 79: [/input, 2793] 
split level 80: [/input, 2755] 
split level 81: [/input-8, 923] 
split level 82: [/input-8, 371] 
split level 83: [/input-8, 61] 
split level 84: [/input, 2713] 
split level 85: [/input, 2714] 
split level 86: [/input-8, 252] 
split level 87: [/input-8, 146] 
split level 88: [/input-8, 262] 
split level 89: [/input, 1996] 
split level 90: [/input-8, 240] 
split level 91: [/input-8, 255] 
split level 92: [/input, 2762] 
split level 93: [/input-8, 295] 
split level 94: [/input-8, 251] 
split level 95: [/input, 3302] 
split level 96: [/input-8, 401] 
split level 97: [/input, 2792] 
split level 98: [/input, 3198] 
split level 99: [/input-8, 1743] 
split level 100: [/input, 984] 
split level 101: [/input, 1948] 
split level 102: [/input-8, 1759] 
split level 103: [/input-8, 1517] 
split level 104: [/input, 987] 
split level 105: [/input-8, 1337] 
split level 106: [/input, 2759] 
split level 107: [/input, 3544] 
split level 108: [/input, 2739] 
split level 109: [/input, 167] 
split level 110: [/input, 2805] 
split level 111: [/input, 3268] 
split level 112: [/input, 2265] 
split level 113: [/input, 2722] 
split level 114: [/input, 471] 
split level 115: [/input, 2760] 
split level 116: [/input, 1507] 
split level 117: [/input, 2738] 
split level 118: [/input-8, 193] 
split level 119: [/input, 2249] 
split level 120: [/input-8, 239] 
split level 121: [/input, 3269] 
split level 122: [/input, 1964] 
split level 123: [/input, 3218] 
split level 124: [/input, 3235] 
split level 125: [/input, 2867] 
split level 126: [/input, 1411] 
split level 127: [/input-8, 207] 
split level 128: [/input, 2779] 
split level 129: [/input-8, 0] 
split level 130: [/input, 3306] 
split level 131: [/input, 2774] 
split level 132: [/input, 2806] 
split level 133: [/input, 1675] 
split level 134: [/input, 3307] 
split level 135: [/input, 2741] 
split level 136: [/input, 1978] 
split level 137: [/input, 824] 
split level 138: [/input, 974] 
split level 139: [/input, 147] 
split level 140: [/input-8, 1762] 
split level 141: [/input-8, 142] 
split level 142: [/input-8, 981] 
split level 143: [/input, 3989] 
split level 144: [/input, 2537] 
split level 145: [/input-8, 1272] 
split level 146: [/input, 2233] 
split level 147: [/input, 2723] 
split level 148: [/input, 2522] 
split level 149: [/input-8, 1786] 
split level 150: [/input, 1003] 
split level 151: [/input, 1398] 
split level 152: [/input, 18] 
split level 153: [/input, 1382] 
split level 154: [/input, 2490] 
split level 155: [/input, 3131] 
split level 156: [/input, 684] 
split level 157: [/input, 1997] 
split level 158: [/input, 152] 
split level 159: [/input, 1474] 
split level 160: [/input, 1316] 
split level 161: [/input, 235] 
split level 162: [/input, 3103] 
split level 163: [/input, 811] 
split level 164: [/input, 2473] 
split level 165: [/input, 291] 
split level 166: [/input, 2436] 
split level 167: [/input, 2179] 
split level 168: [/input, 97] 
split level 169: [/input, 277] 
split level 170: [/input, 17] 
split level 171: [/input, 3371] 
split level 172: [/input, 2780] 
split level 173: [/input, 2488] 
split level 174: [/input, 2692] 
split level 175: [/input, 1177] 
split level 176: [/input, 1162] 
split level 177: [/input, 278] 
split level 178: [/input, 2733] 
split level 179: [/input, 215] 
split level 180: [/input, 2781] 
split level 181: [/input, 1980] 
split level 182: [/input, 2217] 
split level 183: [/input, 478] 
split level 184: [/input, 236] 
split level 185: [/input, 2854] 
split level 186: [/input-8, 335] 
split level 187: [/input, 2523] 
split level 188: [/input, 4050] 
split level 189: [/input, 2770] 
split level 190: [/input, 1178] 
split level 191: [/input, 1194] 
split level 192: [/input, 2195] 
split level 193: [/input, 2539] 
split level 194: [/input, 3368] 
split level 195: [/input, 210] 
split level 196: [/input, 3549] 
split level 197: [/input, 2450] 
split level 198: [/input, 2635] 
split level 199: [/input, 793] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4592759609222412
10 lb beta sum: 0.0, worst -0.4592709541320801
Time: prepare 0.0115    bound 0.0986    transfer 0.0030    finalize 0.0031    func 0.1188    
Accumulated time: func 0.1717    prepare 0.0216    bound 0.1511    transfer 0.0031    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.08568954) min lb tensor(-0.45926929)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010973930358886719 
BICCOS Cumulative time: 0.010973930358886719
Preprocessing time: 0.010269403457641602 Inference time: 7.462501525878906e-05 Add cuts time: 4.100799560546875e-05 Cut analysis time: 0.0005888938903808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.44584 (1), -0.44482 (1), -0.44479 (1), -0.44427 (1), -0.44414 (1), -0.44397 (1), -0.44395 (1), -0.44355 (1), -0.44226 (1), -0.44224 (1), -0.44213 (1), -0.44194 (1), -0.44129 (1), -0.44062 (1), -0.43977 (1), -0.43804 (1), -0.43702 (1), -0.43640 (1), -0.43586 (1), -0.43536 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5382    set_bounds 0.0111    solve 0.1188    add 0.0809    
Accumulated time: pickout 0.0003    decision 0.5382    set_bounds 0.0111    solve 0.1188    add 0.0809    
Current (lb-rhs): -0.4458432197570801
50 domains visited
Cumulative time: 0.827582597732544

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-8, 929] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43095874786376953
10 lb beta sum: 0.16623170673847198, worst -0.4308443069458008
Time: prepare 0.0090    bound 0.1159    transfer 0.0007    finalize 0.0025    func 0.1308    
Accumulated time: func 0.3026    prepare 0.0309    bound 0.2670    transfer 0.0038    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.20923209) min lb tensor(-0.43080688)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015566587448120117 
BICCOS Cumulative time: 0.026540517807006836
Preprocessing time: 0.011792421340942383 Inference time: 0.002143383026123047 Add cuts time: 0.0013432502746582031 Cut analysis time: 0.0002875328063964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17822 (2), -0.17755 (2), -0.17655 (2), -0.17640 (2), -0.17576 (2), -0.17473 (2), -0.17471 (2), -0.17470 (2), -0.17371 (2), -0.17168 (2), -0.17104 (2), -0.17068 (2), -0.16905 (2), -0.16892 (2), -0.16855 (2), -0.16706 (2), -0.16687 (2), -0.16657 (2), -0.16366 (2), -0.16282 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0121    solve 0.1309    add 0.0817    
Accumulated time: pickout 0.0015    decision 0.5578    set_bounds 0.0232    solve 0.2498    add 0.1626    
Current (lb-rhs): -0.17821699380874634
100 domains visited
Cumulative time: 1.0888381004333496

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 7] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1810007095336914
10 lb beta sum: 0.5780531167984009, worst -0.14108656346797943
Time: prepare 0.0074    bound 0.1165    transfer 0.0008    finalize 0.0025    func 0.1303    
Accumulated time: func 0.4328    prepare 0.0385    bound 0.3835    transfer 0.0046    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.38402897) min lb tensor(-0.13903725)
Number of Verified Splits: 280 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.02927255630493164 
BICCOS Cumulative time: 0.05581307411193848
Preprocessing time: 0.01167607307434082 Inference time: 0.011656522750854492 Add cuts time: 0.005648374557495117 Cut analysis time: 0.00029158592224121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11754 (3), -0.11740 (3), -0.11676 (3), -0.11402 (3), -0.11397 (3), -0.10944 (3), -0.10941 (3), -0.10869 (3), -0.10776 (3), -0.10684 (3), -0.10636 (3), -0.10585 (3), -0.10466 (3), -0.10408 (3), -0.10360 (3), -0.10356 (3), -0.09835 (3), -0.09827 (3), -0.09812 (3), -0.09809 (3), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0200    set_bounds 0.0151    solve 0.1303    add 0.1038    
Accumulated time: pickout 0.0029    decision 0.5778    set_bounds 0.0383    solve 0.3801    add 0.2664    
Current (lb-rhs): -0.1175440102815628
150 domains visited
Cumulative time: 1.3889951705932617

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15088462829589844
10 lb beta sum: 0.5791546106338501, worst -0.11268605291843414
Time: prepare 0.0066    bound 0.1161    transfer 0.0008    finalize 0.0021    func 0.1287    
Accumulated time: func 0.5615    prepare 0.0454    bound 0.4996    transfer 0.0053    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.40095180) min lb tensor(-0.11159997)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.02149820327758789 
BICCOS Cumulative time: 0.07731127738952637
Preprocessing time: 0.011281251907348633 Inference time: 0.006949663162231445 Add cuts time: 0.002771615982055664 Cut analysis time: 0.0004956722259521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04091 (4), -0.04066 (4), -0.04061 (4), -0.03920 (4), -0.03751 (4), -0.03743 (4), -0.03667 (4), -0.03517 (4), -0.03490 (4), -0.03472 (4), -0.03260 (4), -0.03259 (4), -0.03240 (4), -0.03217 (4), -0.03149 (4), -0.03143 (4), -0.03036 (4), -0.02791 (4), -0.02763 (4), -0.02762 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0147    solve 0.1288    add 0.3062    
Accumulated time: pickout 0.0039    decision 0.5975    set_bounds 0.0529    solve 0.5089    add 0.5727    
Current (lb-rhs): -0.04091097414493561
200 domains visited
Cumulative time: 1.8811967372894287

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-12, 7] [/input-12, 17] [/input-12, 7] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 64] [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08553409576416016
10 lb beta sum: 0.7026253938674927, worst -0.048118025064468384
Time: prepare 0.0073    bound 0.1381    transfer 0.0029    finalize 0.0027    func 0.1536    
Accumulated time: func 0.7151    prepare 0.0530    bound 0.6377    transfer 0.0082    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.28789485) min lb tensor(-0.04014753)
Number of Verified Splits: 287 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.034453392028808594 
BICCOS Cumulative time: 0.11176466941833496
Preprocessing time: 0.011699676513671875 Inference time: 0.014434576034545898 Add cuts time: 0.007466793060302734 Cut analysis time: 0.0008523464202880859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02277 (5), -0.02277 (5), -0.02260 (5), -0.02257 (5), -0.02257 (5), -0.02256 (5), -0.02255 (5), -0.02254 (5), -0.02249 (5), -0.02099 (5), -0.02075 (5), -0.02056 (5), -0.01985 (5), -0.01922 (5), -0.01846 (5), -0.01770 (5), -0.01765 (5), -0.01701 (5), -0.01618 (5), -0.01592 (5), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0198    set_bounds 0.0157    solve 0.1538    add 0.1102    
Accumulated time: pickout 0.0052    decision 0.6173    set_bounds 0.0687    solve 0.6626    add 0.6828    
Current (lb-rhs): -0.022772550582885742
250 domains visited
Cumulative time: 2.216805934906006

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  4.23909873e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  2.63911963e-01,  4.06023622e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  2.63911963e-01,  1.51980028e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26117907e-33,  1.79869890e-01,  6.71082139e-02,  6.75861835e-02,
         2.74608135e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26117907e-33,  1.79869890e-01,  6.71082139e-02,  6.75861835e-02,
         3.46051296e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26117907e-33,  1.79869890e-01,  6.71082139e-02,  6.18581921e-02,
         2.74837494e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26117907e-33,  1.79869890e-01,  6.71082139e-02,  6.18581921e-02,
         5.31689962e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.79869890e-01,  2.26797778e-02,  2.91953087e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.79869890e-01,  2.26797778e-02,  3.20047587e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.87043861e-01,  7.55179375e-02,  6.73149079e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26117907e-33,  1.87043861e-01,  7.55179375e-02,  2.20266748e-02,
         2.47411951e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26117907e-33,  1.87043861e-01,  7.55179375e-02,  2.20266748e-02,
         1.21521819e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [9.898892816551097e-11], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.87043861e-01,  6.10141009e-02,  2.39373177e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [9.898892816551097e-11], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.87043861e-01,  6.10141009e-02,  2.83322055e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1699]), tensor([1.]), tensor([0]), tensor([-1.26119230e-33]), tensor([3])), '/input-12': ([7, 24, 17], [1.0, 1.0, 1.0], [0, 0, 0], [-1.2611790727896011e-33, 0.18704386055469513, 0.06101410090923309], [0, 1, 2])}
Shallow branching resets to n domains:  15
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41503167152404785
10 lb beta sum: 0.6853752732276917, worst -0.3909764885902405
Time: prepare 0.0007    bound 0.1346    transfer 0.0002    finalize 0.0003    func 0.1359    
Accumulated time: func 0.8510    prepare 0.0536    bound 0.7723    transfer 0.0084    finalize 0.0133    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 29] 
split level 1: [/input-12, 24] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] 
split level 2: [/input-12, 17] [/input-12, 64] [/input-12, 17] [/input-8, 1699] [/input-12, 59] 
split level 3: [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-12, 64] [/input-12, 4] 
split level 4: [/input-12, 64] [/input-8, 438] [/input-8, 1699] [/input-8, 1686] [/input-12, 64] 
split level 5: [/input-8, 1699] [/input-8, 1686] [/input-8, 1316] [/input-8, 1724] [/input-8, 1686] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1736806631088257, worst -0.20630228519439697
10 lb beta sum: 1.1768587827682495, worst -0.20585954189300537
Time: prepare 0.0137    bound 0.1308    transfer 0.0047    finalize 0.0018    func 0.1531    
Accumulated time: func 1.0041    prepare 0.0676    bound 0.9032    transfer 0.0131    finalize 0.0151    
all_split False
======================Cut inference begins======================
max lb tensor(0.87604141) min lb tensor(-0.20565808)
Number of Verified Splits: 282 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.2119393348693848, worst -1.3234375715255737
10 lb beta sum: 1.2893754243850708, worst -0.25112438201904297
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.3301513195037842 
BICCOS Cumulative time: 0.44191598892211914
Preprocessing time: 0.008774757385253906 Inference time: 0.31064438819885254 Add cuts time: 0.009470939636230469 Cut analysis time: 0.0012612342834472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20566 (6), -0.19991 (6), -0.19510 (6), -0.18650 (6), -0.18255 (6), -0.17749 (6), -0.17466 (6), -0.16690 (6), -0.10568 (6), -0.10433 (6), -0.10169 (6), -0.09655 (6), -0.09070 (6), -0.07916 (6), -0.07650 (6), -0.07328 (6), -0.06853 (6), -0.06821 (6), -0.06369 (6), -0.06043 (6), 
Length of domains: 38
Time: pickout 0.0009    decision 0.0196    set_bounds 0.0278    solve 0.1532    add 0.0089    
Accumulated time: pickout 0.0060    decision 0.6369    set_bounds 0.0965    solve 0.8158    add 0.6917    
Current (lb-rhs): -0.20565807819366455
288 domains visited
Cumulative time: 2.929187297821045

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 71] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-8, 227] [/input-12, 59] 
split level 1: [/input-8, 1949] [/input-8, 435] [/input-8, 1949] [/input-8, 929] [/input-8, 410] [/input-8, 1949] [/input-8, 410] [/input-8, 410] [/input-8, 929] [/input-8, 410] 
split level 2: [/input-8, 435] [/input-8, 1686] [/input-8, 435] [/input-8, 923] [/input-8, 435] [/input-8, 410] [/input-8, 435] [/input-8, 1316] [/input-8, 1316] [/input-8, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1987161636352539
10 lb beta sum: 0.23285308480262756, worst -0.19460177421569824
Time: prepare 0.0060    bound 0.1341    transfer 0.0007    finalize 0.0017    func 0.1445    
Accumulated time: func 1.1486    prepare 0.0739    bound 1.0372    transfer 0.0138    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.31318635) min lb tensor(-0.19454980)
Number of Verified Splits: 172 of 304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 7
#cuts 4-6: 8
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.02834486961364746 
BICCOS Cumulative time: 0.4702608585357666
Preprocessing time: 0.008765220642089844 Inference time: 0.016239166259765625 Add cuts time: 0.0026178359985351562 Cut analysis time: 0.0007226467132568359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19455 (9), -0.19188 (9), -0.18861 (9), -0.18544 (9), -0.18377 (9), -0.18105 (9), -0.17607 (9), -0.17389 (9), -0.17340 (9), -0.17111 (9), -0.17034 (9), -0.16977 (9), -0.16892 (9), -0.16665 (9), -0.16643 (9), -0.16631 (9), -0.16600 (9), -0.16534 (9), -0.16350 (9), -0.16327 (9), 
Length of domains: 132
Time: pickout 0.0017    decision 0.0158    set_bounds 0.0235    solve 0.1445    add 0.0024    
Accumulated time: pickout 0.0078    decision 0.6527    set_bounds 0.1200    solve 0.9603    add 0.6941    
Current (lb-rhs): -0.1945497989654541
420 domains visited
Cumulative time: 3.146693468093872

BaB round 3
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1945502758026123
10 lb beta sum: 0.2163216471672058, worst -0.1944882869720459
Time: prepare 0.0053    bound 0.1341    transfer 0.0024    finalize 0.0019    func 0.1454    
Accumulated time: func 1.2940    prepare 0.0794    bound 1.1713    transfer 0.0162    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.60936546) min lb tensor(-0.19446397)
Number of Verified Splits: 160 of 264
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.025746822357177734 
BICCOS Cumulative time: 0.49600768089294434
Preprocessing time: 0.007585048675537109 Inference time: 0.01549386978149414 Add cuts time: 0.002333402633666992 Cut analysis time: 0.0003345012664794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19446 (10), -0.19177 (10), -0.18851 (10), -0.18523 (10), -0.18366 (10), -0.18090 (10), -0.17539 (10), -0.17269 (10), -0.17084 (10), -0.16906 (10), -0.16880 (10), -0.16597 (10), -0.16597 (10), -0.16545 (10), -0.16537 (10), -0.16505 (10), -0.16428 (10), -0.16326 (10), -0.16227 (10), -0.16094 (10), 
Length of domains: 104
Time: pickout 0.0029    decision 0.0185    set_bounds 0.0112    solve 0.1455    add 0.0018    
Accumulated time: pickout 0.0107    decision 0.6713    set_bounds 0.1312    solve 1.1058    add 0.6960    
Current (lb-rhs): -0.19446396827697754
524 domains visited
Cumulative time: 3.3534042835235596

BaB round 4
batch: 104
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 410] [/input-8, 410] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19096875190734863
10 lb beta sum: 0.44278213381767273, worst -0.17952147126197815
Time: prepare 0.0042    bound 0.1282    transfer 0.0011    finalize 0.0011    func 0.1359    
Accumulated time: func 1.4299    prepare 0.0838    bound 1.2995    transfer 0.0173    finalize 0.0197    
all_split False
======================Cut inference begins======================
max lb tensor(0.53997505) min lb tensor(-0.17949276)
Number of Verified Splits: 89 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 11
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.016891956329345703 
BICCOS Cumulative time: 0.51289963722229
Preprocessing time: 0.006014823913574219 Inference time: 0.00878000259399414 Add cuts time: 0.0017082691192626953 Cut analysis time: 0.00038886070251464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17949 (11), -0.17676 (11), -0.17255 (11), -0.16917 (11), -0.16745 (11), -0.16471 (11), -0.16182 (11), -0.16020 (11), -0.15939 (11), -0.15879 (11), -0.15709 (11), -0.15689 (11), -0.15667 (11), -0.15573 (11), -0.15514 (11), -0.15509 (11), -0.15412 (11), -0.15250 (11), -0.15236 (11), -0.15119 (11), 
Length of domains: 119
Time: pickout 0.0022    decision 0.0164    set_bounds 0.0089    solve 0.1360    add 0.0022    
Accumulated time: pickout 0.0129    decision 0.6877    set_bounds 0.1401    solve 1.2418    add 0.6982    
Current (lb-rhs): -0.1794927567243576
643 domains visited
Cumulative time: 3.53971529006958

BaB round 5
batch: 119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1579] [/input-8, 1107] [/input-8, 435] [/input-8, 1107] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18512487411499023
10 lb beta sum: 0.7738311886787415, worst -0.1719616949558258
Time: prepare 0.0047    bound 0.1465    transfer 0.0007    finalize 0.0021    func 0.1556    
Accumulated time: func 1.5855    prepare 0.0886    bound 1.4461    transfer 0.0180    finalize 0.0218    
all_split False
======================Cut inference begins======================
max lb tensor(0.50732481) min lb tensor(-0.17191723)
Number of Verified Splits: 54 of 238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.014910697937011719 
BICCOS Cumulative time: 0.5278103351593018
Preprocessing time: 0.0072667598724365234 Inference time: 0.005758047103881836 Add cuts time: 0.0010232925415039062 Cut analysis time: 0.0008625984191894531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17192 (12), -0.17148 (12), -0.16916 (12), -0.16872 (12), -0.16482 (12), -0.16141 (12), -0.15940 (12), -0.15879 (12), -0.15658 (12), -0.15594 (12), -0.15167 (12), -0.15122 (12), -0.15021 (12), -0.14891 (12), -0.14854 (12), -0.14846 (12), -0.14758 (12), -0.14745 (12), -0.14741 (12), -0.14609 (12), 
Length of domains: 184
Time: pickout 0.0024    decision 0.0157    set_bounds 0.0107    solve 0.1557    add 0.0025    
Accumulated time: pickout 0.0153    decision 0.7033    set_bounds 0.1508    solve 1.3975    add 0.7006    
Current (lb-rhs): -0.17191722989082336
827 domains visited
Cumulative time: 3.7423126697540283

BaB round 6
batch: 184
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1107] [/input-8, 1316] [/input-8, 1316] [/input-8, 438] [/input-8, 438] [/input-8, 218] [/input-8, 1107] [/input-8, 1316] [/input-8, 438] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18071603775024414
10 lb beta sum: 1.0309600830078125, worst -0.16740311682224274
Time: prepare 0.0073    bound 0.1345    transfer 0.0015    finalize 0.0023    func 0.1480    
Accumulated time: func 1.7335    prepare 0.0962    bound 1.5806    transfer 0.0195    finalize 0.0241    
all_split False
======================Cut inference begins======================
max lb tensor(0.54061109) min lb tensor(-0.16738464)
Number of Verified Splits: 206 of 368
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 15
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.03689146041870117 
BICCOS Cumulative time: 0.5647017955780029
Preprocessing time: 0.010433197021484375 Inference time: 0.023041725158691406 Add cuts time: 0.002974271774291992 Cut analysis time: 0.00044226646423339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16738 (13), -0.16695 (13), -0.16553 (13), -0.16510 (13), -0.16479 (13), -0.16462 (13), -0.16418 (13), -0.16388 (13), -0.16294 (13), -0.16250 (13), -0.16134 (13), -0.16036 (13), -0.15866 (13), -0.15807 (13), -0.15586 (13), -0.15527 (13), -0.14935 (13), -0.14772 (13), -0.14728 (13), -0.14608 (13), 
Length of domains: 162
Time: pickout 0.0028    decision 0.0212    set_bounds 0.0155    solve 0.1481    add 0.0021    
Accumulated time: pickout 0.0182    decision 0.7245    set_bounds 0.1662    solve 1.5456    add 0.7028    
Current (lb-rhs): -0.16738463938236237
989 domains visited
Cumulative time: 3.9702000617980957

BaB round 7
batch: 162
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1686] [/input-8, 227] [/input-8, 227] [/input-8, 237] [/input-8, 1686] [/input-8, 227] [/input-8, 227] [/input-8, 237] [/input-8, 1686] [/input-8, 929] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17761731147766113
10 lb beta sum: 0.903490424156189, worst -0.1673750877380371
Time: prepare 0.0064    bound 0.1354    transfer 0.0016    finalize 0.0018    func 0.1472    
Accumulated time: func 1.8807    prepare 0.1027    bound 1.7160    transfer 0.0211    finalize 0.0259    
all_split False
======================Cut inference begins======================
max lb tensor(0.55143297) min lb tensor(-0.16736698)
Number of Verified Splits: 179 of 324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03338456153869629 
BICCOS Cumulative time: 0.5980863571166992
Preprocessing time: 0.009478569030761719 Inference time: 0.021528005599975586 Add cuts time: 0.002188444137573242 Cut analysis time: 0.0001895427703857422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16737 (14), -0.16693 (14), -0.16550 (14), -0.16507 (14), -0.16457 (14), -0.16414 (14), -0.16291 (14), -0.16248 (14), -0.16241 (14), -0.16196 (14), -0.16056 (14), -0.16011 (14), -0.15964 (14), -0.15919 (14), -0.15854 (14), -0.15799 (14), -0.15794 (14), -0.15754 (14), -0.15572 (14), -0.15512 (14), 
Length of domains: 145
Time: pickout 0.0028    decision 0.0193    set_bounds 0.0135    solve 0.1473    add 0.0021    
Accumulated time: pickout 0.0210    decision 0.7439    set_bounds 0.1798    solve 1.6928    add 0.7048    
Current (lb-rhs): -0.16736698150634766
1134 domains visited
Cumulative time: 4.190070867538452

BaB round 8
batch: 145
splitting decisions: 
split level 0: [/input-8, 438] [/input-8, 209] [/input-8, 438] [/input-8, 209] [/input-8, 438] [/input-8, 227] [/input-8, 437] [/input-8, 237] [/input-8, 227] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17609548568725586

all verified at 7th iter
Time: prepare 0.0057    bound 0.0460    transfer 0.0013    finalize 0.0013    func 0.0566    
Accumulated time: func 1.9373    prepare 0.1086    bound 1.7619    transfer 0.0224    finalize 0.0272    
all_split False
======================Cut inference begins======================
max lb tensor(0.20391031) min lb tensor(0.02006296)
Number of Verified Splits: 290 of 290
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.008741617202758789 
BICCOS Cumulative time: 0.606827974319458
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0028    decision 0.0187    set_bounds 0.0122    solve 0.0568    add 0.0001    
Accumulated time: pickout 0.0238    decision 0.7626    set_bounds 0.1920    solve 1.7496    add 0.7049    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1134 domains visited
Cumulative time: 4.291003942489624


Properties batch 3, size 1
Remaining timeout: 194.06674218177795
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 194.06665635108948
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 194.06663179397583
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.06660962104797
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.0659794807434
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.0659577846527
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.9341 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [679]; unstable size 679; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 679] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 679] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 679] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 185] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.08787680,  0.95483589,  4.05660439,  3.03147173,  3.64727926,
          3.09590125,  4.17433357,  4.76398993, -0.51713562]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.81932449, -25.24547768, -28.96639633, -27.77052689, -28.75254059,
          -27.98299408, -28.93449783, -30.10167694, -23.77865982, -23.70247650]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07618332]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1129 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.717321395874023
alpha/beta optimization time: 1.1882543563842773
initial alpha-crown bounds: tensor([[ 2.13841915,  0.97674799,  4.10324097,  3.07848096,  3.70226955,
          3.14509654,  4.22430420,  4.82284594, -0.47408342]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.47408342361450195
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62722158432007
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62718272209167
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62715697288513
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62713718414307
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.62711882591248
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.62710070610046
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.6270821094513
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.62706398963928
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.6270456314087
Verifying property 8 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47408342]], device='cuda:0') need to verify.
Model prediction is: tensor([-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
        -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47408342]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 679
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 875
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.72747802734375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47408151626586914
10 lb beta sum: 0.0, worst -0.474090576171875
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    func 0.0520    
Accumulated time: func 0.0520    prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 24] 
split level 3: [/input-8, 1973] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 46] 
split level 8: [/input-8, 1971] 
split level 9: [/input-12, 34] 
split level 10: [/input-8, 940] 
split level 11: [/input-8, 1706] 
split level 12: [/input-8, 1965] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1967] 
split level 15: [/input-8, 1950] 
split level 16: [/input-8, 1379] 
split level 17: [/input-8, 1647] 
split level 18: [/input-12, 90] 
split level 19: [/input-8, 766] 
split level 20: [/input-8, 1655] 
split level 21: [/input-8, 354] 
split level 22: [/input, 4071] 
split level 23: [/input-8, 891] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 1391] 
split level 26: [/input-8, 1399] 
split level 27: [/input-8, 253] 
split level 28: [/input, 3315] 
split level 29: [/input-8, 1502] 
split level 30: [/input-8, 363] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 255] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3571] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 733] 
split level 37: [/input-8, 1595] 
split level 38: [/input-8, 1510] 
split level 39: [/input-8, 510] 
split level 40: [/input-8, 1812] 
split level 41: [/input-8, 1981] 
split level 42: [/input, 2744] 
split level 43: [/input-8, 243] 
split level 44: [/input, 1012] 
split level 45: [/input-8, 1704] 
split level 46: [/input-8, 254] 
split level 47: [/input, 1250] 
split level 48: [/input, 646] 
split level 49: [/input, 1251] 
split level 50: [/input-8, 752] 
split level 51: [/input, 1445] 
split level 52: [/input-8, 1955] 
split level 53: [/input-8, 764] 
split level 54: [/input-8, 285] 
split level 55: [/input, 1491] 
split level 56: [/input-8, 246] 
split level 57: [/input, 1252] 
split level 58: [/input, 2637] 
split level 59: [/input-8, 149] 
split level 60: [/input-8, 429] 
split level 61: [/input, 3165] 
split level 62: [/input, 1271] 
split level 63: [/input-8, 598] 
split level 64: [/input, 2195] 
split level 65: [/input-8, 142] 
split level 66: [/input, 2467] 
split level 67: [/input-8, 313] 
split level 68: [/input, 1234] 
split level 69: [/input, 2708] 
split level 70: [/input, 2005] 
split level 71: [/input-8, 1551] 
split level 72: [/input, 3272] 
split level 73: [/input, 1021] 
split level 74: [/input-8, 1527] 
split level 75: [/input, 1490] 
split level 76: [/input, 166] 
split level 77: [/input-8, 1633] 
split level 78: [/input, 4089] 
split level 79: [/input, 2451] 
split level 80: [/input, 2787] 
split level 81: [/input, 386] 
split level 82: [/input, 2026] 
split level 83: [/input-8, 1662] 
split level 84: [/input, 2021] 
split level 85: [/input, 1480] 
split level 86: [/input, 2006] 
split level 87: [/input, 3416] 
split level 88: [/input-8, 1598] 
split level 89: [/input-8, 1154] 
split level 90: [/input, 2020] 
split level 91: [/input, 385] 
split level 92: [/input, 2470] 
split level 93: [/input, 195] 
split level 94: [/input, 2785] 
split level 95: [/input, 2214] 
split level 96: [/input, 645] 
split level 97: [/input, 1398] 
split level 98: [/input, 1272] 
split level 99: [/input, 152] 
split level 100: [/input, 2022] 
split level 101: [/input, 2458] 
split level 102: [/input, 387] 
split level 103: [/input-8, 605] 
split level 104: [/input, 356] 
split level 105: [/input-12, 79] 
split level 106: [/input, 2212] 
split level 107: [/input, 1233] 
split level 108: [/input-8, 591] 
split level 109: [/input, 168] 
split level 110: [/input, 2422] 
split level 111: [/input, 1263] 
split level 112: [/input, 2004] 
split level 113: [/input, 193] 
split level 114: [/input, 2670] 
split level 115: [/input, 843] 
split level 116: [/input, 2452] 
split level 117: [/input, 1691] 
split level 118: [/input, 2211] 
split level 119: [/input, 3256] 
split level 120: [/input, 723] 
split level 121: [/input-8, 240] 
split level 122: [/input, 194] 
split level 123: [/input, 2438] 
split level 124: [/input, 2023] 
split level 125: [/input, 2024] 
split level 126: [/input, 3151] 
split level 127: [/input, 2216] 
split level 128: [/input, 2760] 
split level 129: [/input, 2450] 
split level 130: [/input, 185] 
split level 131: [/input, 899] 
split level 132: [/input-8, 379] 
split level 133: [/input-8, 1155] 
split level 134: [/input, 1275] 
split level 135: [/input, 401] 
split level 136: [/input, 2025] 
split level 137: [/input, 2724] 
split level 138: [/input, 897] 
split level 139: [/input-8, 1529] 
split level 140: [/input, 884] 
split level 141: [/input, 2392] 
split level 142: [/input, 2484] 
split level 143: [/input, 148] 
split level 144: [/input-8, 1631] 
split level 145: [/input, 915] 
split level 146: [/input-8, 248] 
split level 147: [/input, 2930] 
split level 148: [/input, 827] 
split level 149: [/input, 1274] 
split level 150: [/input, 2639] 
split level 151: [/input, 2455] 
split level 152: [/input, 828] 
split level 153: [/input, 388] 
split level 154: [/input-8, 1211] 
split level 155: [/input, 436] 
split level 156: [/input, 1789] 
split level 157: [/input, 2437] 
split level 158: [/input-8, 1770] 
split level 159: [/input-8, 1156] 
split level 160: [/input, 2914] 
split level 161: [/input, 1986] 
split level 162: [/input-8, 893] 
split level 163: [/input, 3491] 
split level 164: [/input-8, 1934] 
split level 165: [/input, 1273] 
split level 166: [/input-8, 1530] 
split level 167: [/input, 857] 
split level 168: [/input, 1023] 
split level 169: [/input, 165] 
split level 170: [/input, 3417] 
split level 171: [/input, 3441] 
split level 172: [/input, 3220] 
split level 173: [/input, 2029] 
split level 174: [/input-8, 1172] 
split level 175: [/input-8, 1702] 
split level 176: [/input, 420] 
split level 177: [/input, 694] 
split level 178: [/input, 2393] 
split level 179: [/input, 856] 
split level 180: [/input, 913] 
split level 181: [/input-8, 263] 
split level 182: [/input, 1900] 
split level 183: [/input, 2742] 
split level 184: [/input, 2408] 
split level 185: [/input, 435] 
split level 186: [/input, 1990] 
split level 187: [/input, 1989] 
split level 188: [/input, 662] 
split level 189: [/input, 3028] 
split level 190: [/input, 2846] 
split level 191: [/input-8, 1158] 
split level 192: [/input, 1020] 
split level 193: [/input, 3402] 
split level 194: [/input, 3135] 
split level 195: [/input, 2913] 
split level 196: [/input, 2232] 
split level 197: [/input, 2465] 
split level 198: [/input, 2420] 
split level 199: [/input, 2623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47403669357299805
10 lb beta sum: 0.0, worst -0.47403621673583984
Time: prepare 0.0114    bound 0.0948    transfer 0.0047    finalize 0.0028    func 0.1163    
Accumulated time: func 0.1683    prepare 0.0214    bound 0.1464    transfer 0.0047    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11546087) min lb tensor(-0.47403002)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009952545166015625 
BICCOS Cumulative time: 0.009952545166015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46135 (1), -0.46118 (1), -0.46104 (1), -0.46091 (1), -0.46057 (1), -0.46044 (1), -0.46034 (1), -0.46029 (1), -0.46026 (1), -0.45984 (1), -0.45949 (1), -0.45946 (1), -0.45903 (1), -0.45902 (1), -0.45819 (1), -0.45792 (1), -0.45764 (1), -0.45639 (1), -0.45627 (1), -0.45387 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5072    set_bounds 0.0089    solve 0.1163    add 0.0698    
Accumulated time: pickout 0.0003    decision 0.5072    set_bounds 0.0089    solve 0.1163    add 0.0698    
Current (lb-rhs): -0.4613523483276367
50 domains visited
Cumulative time: 0.7692952156066895

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 46] [/input-12, 92] [/input-12, 92] [/input-8, 1973] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43883419036865234
10 lb beta sum: 0.0, worst -0.4382791519165039
Time: prepare 0.0124    bound 0.0949    transfer 0.0008    finalize 0.0023    func 0.1130    
Accumulated time: func 0.2813    prepare 0.0340    bound 0.2413    transfer 0.0055    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.17791510) min lb tensor(-0.43820333)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012340545654296875 
BICCOS Cumulative time: 0.0222930908203125
Preprocessing time: 0.011735200881958008 Inference time: 0.00025272369384765625 Add cuts time: 0.00013446807861328125 Cut analysis time: 0.0002181529998779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24607 (2), -0.24073 (2), -0.24063 (2), -0.23994 (2), -0.23973 (2), -0.23747 (2), -0.23514 (2), -0.23449 (2), -0.22776 (2), -0.22638 (2), -0.22429 (2), -0.22262 (2), -0.21653 (2), -0.20659 (2), -0.20591 (2), -0.20347 (2), -0.20304 (2), -0.20269 (2), -0.20179 (2), -0.20130 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0124    solve 0.1130    add 0.0778    
Accumulated time: pickout 0.0014    decision 0.5267    set_bounds 0.0213    solve 0.2294    add 0.1476    
Current (lb-rhs): -0.24606800079345703
100 domains visited
Cumulative time: 1.0056805610656738

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 92] [/input-12, 92] [/input-12, 85] [/input-12, 24] 
split level 2: [/input-12, 92] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-8, 1706] [/input-8, 1706] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2273421287536621
10 lb beta sum: 0.2894097864627838, worst -0.22358417510986328
Time: prepare 0.0065    bound 0.1147    transfer 0.0008    finalize 0.0021    func 0.1268    
Accumulated time: func 0.4080    prepare 0.0408    bound 0.3560    transfer 0.0063    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.20239252) min lb tensor(-0.22195911)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.019954204559326172 
BICCOS Cumulative time: 0.04224729537963867
Preprocessing time: 0.011540889739990234 Inference time: 0.00469207763671875 Add cuts time: 0.0032241344451904297 Cut analysis time: 0.0004971027374267578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06650 (3), -0.06628 (3), -0.06619 (3), -0.06568 (3), -0.06546 (3), -0.06466 (3), -0.06374 (3), -0.06302 (3), -0.06120 (3), -0.06057 (3), -0.06021 (3), -0.06014 (3), -0.05993 (3), -0.05713 (3), -0.05643 (3), -0.05547 (3), -0.05541 (3), -0.05389 (3), -0.05353 (3), -0.05294 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0191    set_bounds 0.0150    solve 0.1269    add 0.0929    
Accumulated time: pickout 0.0023    decision 0.5459    set_bounds 0.0363    solve 0.3562    add 0.2405    
Current (lb-rhs): -0.06649583578109741
150 domains visited
Cumulative time: 1.2806925773620605

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 6] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 24] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 38] [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1965] [/input-8, 1971] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06521177291870117
10 lb beta sum: 0.7315430045127869, worst -0.05067727714776993
Time: prepare 0.0069    bound 0.1322    transfer 0.0008    finalize 0.0024    func 0.1450    
Accumulated time: func 0.5530    prepare 0.0480    bound 0.4883    transfer 0.0071    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.47147608) min lb tensor(-0.04471053)
Number of Verified Splits: 370 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 13
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.03827357292175293 
BICCOS Cumulative time: 0.0805208683013916
Preprocessing time: 0.011662006378173828 Inference time: 0.017005205154418945 Add cuts time: 0.008874893188476562 Cut analysis time: 0.0007314682006835938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02456 (4), -0.01060 (4), -0.00437 (4), -0.00206 (4), 
Length of domains: 4
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0146    solve 0.1451    add 0.3041    
Accumulated time: pickout 0.0033    decision 0.5649    set_bounds 0.0509    solve 0.5013    add 0.5446    
Current (lb-rhs): -0.02455615997314453
154 domains visited
Cumulative time: 1.8031668663024902

Shallow-BaB round 5
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-8, 1973] 
split level 1: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-12, 92] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 56] [/input-12, 56] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 46] [/input-8, 1971] 
split level 4: [/input-8, 1971] [/input-12, 46] [/input-8, 1971] [/input-12, 46] 
split level 5: [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
split level 6: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 7: [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] 
split level 8: [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] 
split level 9: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] 
split level 10: [/input-8, 766] [/input-8, 766] [/input-8, 766] [/input-8, 766] 
split level 11: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 12: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 13: [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] 
split level 14: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
split level 15: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
split level 16: [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] 
split level 17: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
split level 18: [/input-8, 764] [/input-8, 764] [/input-8, 764] [/input-8, 764] 
split level 19: [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 20: [/input-8, 752] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] 
split level 21: [/input-8, 1981] [/input-8, 752] [/input-8, 752] [/input-8, 1981] 
split level 22: [/input-8, 1388] [/input-8, 1981] [/input-8, 1981] [/input-8, 752] 
split level 23: [/input-8, 1510] [/input-8, 1510] [/input-8, 1399] [/input-8, 1510] 
split level 24: [/input-8, 1399] [/input-8, 1399] [/input-8, 1510] [/input-8, 1399] 
split level 25: [/input-8, 1502] [/input-8, 1704] [/input-8, 1704] [/input-8, 1502] 
split level 26: [/input-8, 1704] [/input-8, 1502] [/input-8, 1502] [/input, 3571] 
split level 27: [/input, 3571] [/input, 3571] [/input, 3571] [/input-8, 1704] 
split level 28: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
split level 29: [/input-8, 1633] [/input-8, 1633] [/input-8, 149] [/input-8, 510] 
split level 30: [/input-8, 1700] [/input-8, 1700] [/input-8, 1700] [/input-8, 149] 
split level 31: [/input-8, 285] [/input-8, 1691] [/input-8, 1633] [/input-8, 1633] 
split level 32: [/input-8, 510] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
split level 33: [/input-8, 149] [/input-8, 149] [/input-8, 1691] [/input-8, 1691] 
split level 34: [/input-8, 1691] [/input-8, 510] [/input-8, 510] [/input-8, 1700] 
split level 35: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
split level 36: [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3417] 
split level 37: [/input-8, 1527] [/input-8, 1527] [/input, 3417] [/input, 3165] 
split level 38: [/input, 3417] [/input, 3417] [/input-8, 1527] [/input-8, 341] 
split level 39: [/input-8, 313] [/input-8, 341] [/input-8, 313] [/input-8, 1527] 
split level 40: [/input, 359] [/input-8, 313] [/input, 2438] [/input-8, 313] 
split level 41: [/input-8, 341] [/input, 2438] [/input-8, 341] [/input, 2438] 
split level 42: [/input-8, 1631] [/input, 359] [/input, 359] [/input-8, 1629] 
split level 43: [/input-8, 1629] [/input-8, 1631] [/input-8, 1631] [/input-8, 1631] 
split level 44: [/input-8, 1211] [/input-8, 1629] [/input-8, 1629] [/input, 359] 
split level 45: [/input, 4066] [/input-8, 1211] [/input-8, 1211] [/input-8, 1211] 
split level 46: [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] 
split level 47: [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] 
split level 48: [/input-8, 605] [/input-8, 605] [/input-8, 379] [/input-8, 605] 
split level 49: [/input-8, 379] [/input-8, 379] [/input-8, 605] [/input-8, 379] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05692863464355469

all verified at 1th iter
Time: prepare 0.0078    bound 0.0139    transfer 0.0008    finalize 0.0024    func 0.0279    
Accumulated time: func 0.5810    prepare 0.0584    bound 0.5022    transfer 0.0079    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.21477833) min lb tensor(0.00326985)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.044219255447387695 
BICCOS Cumulative time: 0.1247401237487793
Preprocessing time: 0.011411428451538086 Inference time: 0.0186922550201416 Add cuts time: 0.013422489166259766 Cut analysis time: 0.0006930828094482422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.1380    set_bounds 0.0122    solve 0.0281    add 0.0299    
Accumulated time: pickout 0.0041    decision 0.7030    set_bounds 0.0631    solve 0.5294    add 0.5745    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38]), tensor([-1.]), tensor([0]), tensor([-1.26117907e-33]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.41758010e-01,  2.05404803e-01,  4.27116007e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  1.41758010e-01,  2.05404803e-01,  1.08483359e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.41758010e-01,  6.84862584e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  2.40681693e-01,  1.56238124e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([-1.]), tensor([0]), tensor([0.00035583]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [-1.2611790727896011e-33, 0.2406816929578781, 0.07531319558620453, 0.04194067418575287], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([1.]), tensor([0]), tensor([1.43425202e-13]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [-1.2611790727896011e-33, 0.2406816929578781, 0.07531319558620453, 0.04194067418575287], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  2.40681693e-01,  7.53131956e-02,  9.92536396e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4625115394592285
10 lb beta sum: 1.0369322299957275, worst -0.45383837819099426
Time: prepare 0.0005    bound 0.1254    transfer 0.0002    finalize 0.0002    func 0.1263    
Accumulated time: func 0.7072    prepare 0.0588    bound 0.6276    transfer 0.0081    finalize 0.0123    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 24] 
split level 1: [/input-12, 85] [/input-8, 1973] 
split level 2: [/input-12, 24] [/input-12, 46] 
split level 3: [/input-8, 1973] [/input-8, 1971] 
split level 4: [/input-12, 46] [/input-8, 1965] 
split level 5: [/input-8, 1971] [/input-12, 2] 
split level 6: [/input-8, 1965] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5044405460357666, worst -0.24105986952781677
10 lb beta sum: 0.5735697746276855, worst -0.1468353271484375
Time: prepare 0.0108    bound 0.1260    transfer 0.0006    finalize 0.0015    func 0.1405    
Accumulated time: func 0.8477    prepare 0.0700    bound 0.7535    transfer 0.0086    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.25615793) min lb tensor(-0.14645672)
Number of Verified Splits: 185 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5020342469215393, worst -0.3294353485107422
10 lb beta sum: 1.2168868780136108, worst -0.17548196017742157
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 13
#cuts 4-6: 24
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.25823116302490234 
BICCOS Cumulative time: 0.38297128677368164
Preprocessing time: 0.0070552825927734375 Inference time: 0.24049997329711914 Add cuts time: 0.008752107620239258 Cut analysis time: 0.0019237995147705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14646 (7), -0.14345 (7), -0.13694 (7), -0.13475 (7), -0.13370 (7), -0.13001 (7), -0.12778 (7), -0.12320 (7), -0.07313 (7), -0.07266 (7), -0.07036 (7), -0.07010 (7), -0.06374 (7), -0.06341 (7), -0.06320 (7), -0.06277 (7), -0.06190 (7), -0.06183 (7), -0.06118 (7), -0.06014 (7), 
Length of domains: 71
Time: pickout 0.0005    decision 0.0195    set_bounds 0.0227    solve 0.1406    add 0.0011    
Accumulated time: pickout 0.0045    decision 0.7224    set_bounds 0.0858    solve 0.6700    add 0.5756    
Current (lb-rhs): -0.14645671844482422
225 domains visited
Cumulative time: 2.64577317237854

BaB round 2
batch: 71
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 2] [/input-8, 1950] [/input-8, 1655] [/input-12, 2] [/input-12, 2] [/input-8, 1950] [/input-8, 1706] [/input-8, 1706] [/input-8, 1655] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12909364700317383
10 lb beta sum: 0.3391742408275604, worst -0.1221318244934082
Time: prepare 0.0057    bound 0.1307    transfer 0.0024    finalize 0.0016    func 0.1422    
Accumulated time: func 0.9899    prepare 0.0758    bound 0.8842    transfer 0.0111    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.31641254) min lb tensor(-0.12186623)
Number of Verified Splits: 162 of 284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 11
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.027022123336791992 
BICCOS Cumulative time: 0.40999341011047363
Preprocessing time: 0.008406877517700195 Inference time: 0.014663457870483398 Add cuts time: 0.003385305404663086 Cut analysis time: 0.0005664825439453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12187 (9), -0.11828 (9), -0.11249 (9), -0.11226 (9), -0.11045 (9), -0.11027 (9), -0.10848 (9), -0.10540 (9), -0.10430 (9), -0.10329 (9), -0.10178 (9), -0.10131 (9), -0.09839 (9), -0.09751 (9), -0.09514 (9), -0.09152 (9), -0.06412 (9), -0.06365 (9), -0.06136 (9), -0.06097 (9), 
Length of domains: 122
Time: pickout 0.0020    decision 0.0172    set_bounds 0.0187    solve 0.1423    add 0.0012    
Accumulated time: pickout 0.0066    decision 0.7396    set_bounds 0.1045    solve 0.8123    add 0.5769    
Current (lb-rhs): -0.12186622619628906
347 domains visited
Cumulative time: 2.855316162109375

BaB round 3
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1655] [/input-8, 1950] [/input-12, 56] [/input-8, 1706] [/input-8, 1655] [/input-8, 1950] [/input-8, 1950] [/input-8, 1655] [/input-12, 56] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12185382843017578
10 lb beta sum: 0.46072810888290405, worst -0.11507987976074219
Time: prepare 0.0049    bound 0.1280    transfer 0.0006    finalize 0.0017    func 0.1369    
Accumulated time: func 1.1268    prepare 0.0810    bound 1.0122    transfer 0.0117    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.41485739) min lb tensor(-0.11493874)
Number of Verified Splits: 116 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 13
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.020908832550048828 
BICCOS Cumulative time: 0.43090224266052246
Preprocessing time: 0.0074329376220703125 Inference time: 0.010548830032348633 Add cuts time: 0.002417325973510742 Cut analysis time: 0.0005097389221191406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11494 (10), -0.11138 (10), -0.11027 (10), -0.10674 (10), -0.10620 (10), -0.10523 (10), -0.10441 (10), -0.10376 (10), -0.10152 (10), -0.10019 (10), -0.09939 (10), -0.09925 (10), -0.09870 (10), -0.09785 (10), -0.09704 (10), -0.09651 (10), -0.09630 (10), -0.09536 (10), -0.09535 (10), -0.09428 (10), 
Length of domains: 128
Time: pickout 0.0022    decision 0.0161    set_bounds 0.0103    solve 0.1369    add 0.0011    
Accumulated time: pickout 0.0088    decision 0.7557    set_bounds 0.1148    solve 0.9492    add 0.5780    
Current (lb-rhs): -0.11493873596191406
475 domains visited
Cumulative time: 3.0437960624694824

BaB round 4
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 2] [/input-8, 1399] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5241552591323853, worst -0.1566896289587021
10 lb beta sum: 1.3316547870635986, worst -0.10442733764648438
Time: prepare 0.0110    bound 0.1278    transfer 0.0006    finalize 0.0014    func 0.1425    
Accumulated time: func 1.2693    prepare 0.0921    bound 1.1400    transfer 0.0123    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.66784286) min lb tensor(-0.10409188)
Number of Verified Splits: 220 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 15
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.031003952026367188 
BICCOS Cumulative time: 0.46190619468688965
Preprocessing time: 0.0074596405029296875 Inference time: 0.02121114730834961 Add cuts time: 0.0018239021301269531 Cut analysis time: 0.0005092620849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10409 (11), -0.10107 (11), -0.10046 (11), -0.09936 (11), -0.09859 (11), -0.09578 (11), -0.09440 (11), -0.09355 (11), -0.09290 (11), -0.09102 (11), -0.09062 (11), -0.09034 (11), -0.08929 (11), -0.08552 (11), -0.08537 (11), -0.08274 (11), -0.04974 (11), -0.04918 (11), -0.03965 (11), -0.03929 (11), 
Length of domains: 36
Time: pickout 0.0022    decision 0.0161    set_bounds 0.0109    solve 0.1426    add 0.0009    
Accumulated time: pickout 0.0109    decision 0.7718    set_bounds 0.1257    solve 1.0918    add 0.5789    
Current (lb-rhs): -0.10409188270568848
511 domains visited
Cumulative time: 3.248732566833496

BaB round 5
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] 
split level 1: [/input-8, 1399] [/input-8, 1399] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] 
split level 2: [/input-8, 1704] [/input-8, 1704] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10178947448730469
10 lb beta sum: 0.9083737134933472, worst -0.09877490997314453
Time: prepare 0.0057    bound 0.1330    transfer 0.0011    finalize 0.0016    func 0.1432    
Accumulated time: func 1.4125    prepare 0.0980    bound 1.2730    transfer 0.0134    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.26488096) min lb tensor(-0.09869432)
Number of Verified Splits: 176 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.03002166748046875 
BICCOS Cumulative time: 0.4919278621673584
Preprocessing time: 0.00839853286743164 Inference time: 0.019409894943237305 Add cuts time: 0.0018329620361328125 Cut analysis time: 0.0003802776336669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09869 (14), -0.09722 (14), -0.09512 (14), -0.09397 (14), -0.09359 (14), -0.09250 (14), -0.09248 (14), -0.09229 (14), -0.09091 (14), -0.09081 (14), -0.09043 (14), -0.08917 (14), -0.08900 (14), -0.08889 (14), -0.08859 (14), -0.08773 (14), -0.08761 (14), -0.08758 (14), -0.08751 (14), -0.08703 (14), 
Length of domains: 112
Time: pickout 0.0012    decision 0.0154    set_bounds 0.0190    solve 0.1433    add 0.0011    
Accumulated time: pickout 0.0121    decision 0.7872    set_bounds 0.1447    solve 1.2351    add 0.5800    
Current (lb-rhs): -0.0986943244934082
623 domains visited
Cumulative time: 3.459834098815918

BaB round 6
batch: 112
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-8, 1967] [/input-12, 34] [/input-12, 34] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0986948013305664
10 lb beta sum: 0.7407845854759216, worst -0.09479236602783203
Time: prepare 0.0045    bound 0.1270    transfer 0.0011    finalize 0.0013    func 0.1354    
Accumulated time: func 1.5480    prepare 0.1027    bound 1.4000    transfer 0.0145    finalize 0.0215    
all_split False
======================Cut inference begins======================
max lb tensor(0.40423989) min lb tensor(-0.09470272)
Number of Verified Splits: 128 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.022437334060668945 
BICCOS Cumulative time: 0.5143651962280273
Preprocessing time: 0.006532192230224609 Inference time: 0.014259576797485352 Add cuts time: 0.0012447834014892578 Cut analysis time: 0.00040078163146972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09470 (15), -0.09325 (15), -0.09165 (15), -0.09011 (15), -0.08997 (15), -0.08850 (15), -0.08843 (15), -0.08823 (15), -0.08693 (15), -0.08692 (15), -0.08677 (15), -0.08562 (15), -0.08541 (15), -0.08499 (15), -0.08479 (15), -0.08404 (15), -0.08365 (15), -0.08346 (15), -0.08342 (15), -0.08332 (15), 
Length of domains: 96
Time: pickout 0.0022    decision 0.0148    set_bounds 0.0098    solve 0.1355    add 0.0012    
Accumulated time: pickout 0.0143    decision 0.8020    set_bounds 0.1545    solve 1.3706    add 0.5812    
Current (lb-rhs): -0.09470272064208984
719 domains visited
Cumulative time: 3.6465635299682617

BaB round 7
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
split level 1: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0913248062133789
10 lb beta sum: 1.0438439846038818, worst -0.08830052614212036
Time: prepare 0.0075    bound 0.1270    transfer 0.0013    finalize 0.0021    func 0.1404    
Accumulated time: func 1.6883    prepare 0.1103    bound 1.5270    transfer 0.0159    finalize 0.0235    
all_split False
======================Cut inference begins======================
max lb tensor(0.27435184) min lb tensor(-0.08827505)
Number of Verified Splits: 275 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.04844307899475098 
BICCOS Cumulative time: 0.5628082752227783
Preprocessing time: 0.01092219352722168 Inference time: 0.03417515754699707 Add cuts time: 0.0029375553131103516 Cut analysis time: 0.000408172607421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08828 (17), -0.08692 (17), -0.08527 (17), -0.08379 (17), -0.08354 (17), -0.08254 (17), -0.08218 (17), -0.08175 (17), -0.08097 (17), -0.08056 (17), -0.08037 (17), -0.07967 (17), -0.07911 (17), -0.07856 (17), -0.07829 (17), -0.07807 (17), -0.07780 (17), -0.07704 (17), -0.07700 (17), -0.07691 (17), 
Length of domains: 109
Time: pickout 0.0019    decision 0.0164    set_bounds 0.0251    solve 0.1405    add 0.0012    
Accumulated time: pickout 0.0161    decision 0.8184    set_bounds 0.1796    solve 1.5110    add 0.5824    
Current (lb-rhs): -0.08827504515647888
828 domains visited
Cumulative time: 3.881699800491333

BaB round 8
batch: 109
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09009933471679688
10 lb beta sum: 0.8534913659095764, worst -0.08633685111999512
Time: prepare 0.0043    bound 0.1327    transfer 0.0010    finalize 0.0012    func 0.1412    
Accumulated time: func 1.8295    prepare 0.1148    bound 1.6597    transfer 0.0169    finalize 0.0248    
all_split False
======================Cut inference begins======================
max lb tensor(0.47488773) min lb tensor(-0.08632338)
Number of Verified Splits: 45 of 218
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.013114690780639648 
BICCOS Cumulative time: 0.575922966003418
Preprocessing time: 0.0064885616302490234 Inference time: 0.005354642868041992 Add cuts time: 0.0004374980926513672 Cut analysis time: 0.0008339881896972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08632 (18), -0.08502 (18), -0.08290 (18), -0.08159 (18), -0.08149 (18), -0.08029 (18), -0.07982 (18), -0.07975 (18), -0.07844 (18), -0.07823 (18), -0.07807 (18), -0.07684 (18), -0.07673 (18), -0.07628 (18), -0.07616 (18), -0.07507 (18), -0.07501 (18), -0.07493 (18), -0.07488 (18), -0.07470 (18), 
Length of domains: 173
Time: pickout 0.0025    decision 0.0170    set_bounds 0.0092    solve 0.1413    add 0.0013    
Accumulated time: pickout 0.0186    decision 0.8354    set_bounds 0.1888    solve 1.6524    add 0.5837    
Current (lb-rhs): -0.08632338047027588
1001 domains visited
Cumulative time: 4.066599607467651

BaB round 9
batch: 173
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1704062223434448, worst -0.08403074741363525
10 lb beta sum: 1.1704062223434448, worst -0.08400309085845947
Time: prepare 0.0146    bound 0.1339    transfer 0.0019    finalize 0.0019    func 0.1547    
Accumulated time: func 1.9842    prepare 0.1297    bound 1.7936    transfer 0.0188    finalize 0.0267    
all_split False
======================Cut inference begins======================
max lb tensor(0.24031818) min lb tensor(-0.08399785)
Number of Verified Splits: 45 of 346
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.016915559768676758 
BICCOS Cumulative time: 0.5928385257720947
Preprocessing time: 0.010117292404174805 Inference time: 0.005392551422119141 Add cuts time: 0.0004253387451171875 Cut analysis time: 0.000980377197265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08400 (19), -0.08269 (19), -0.08059 (19), -0.07925 (19), -0.07920 (19), -0.07796 (19), -0.07762 (19), -0.07748 (19), -0.07630 (19), -0.07593 (19), -0.07574 (19), -0.07454 (19), -0.07442 (19), -0.07402 (19), -0.07396 (19), -0.07289 (19), -0.07276 (19), -0.07262 (19), -0.07258 (19), -0.07257 (19), 
Length of domains: 301
Time: pickout 0.0028    decision 0.0202    set_bounds 0.0148    solve 0.1548    add 0.0019    
Accumulated time: pickout 0.0214    decision 0.8557    set_bounds 0.2035    solve 1.8072    add 0.5855    
Current (lb-rhs): -0.08399784564971924
1302 domains visited
Cumulative time: 4.278687953948975

BaB round 10
batch: 301
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] [/input-8, 1502] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1956185102462769, worst -0.07982933521270752
10 lb beta sum: 1.1956185102462769, worst -0.07979691028594971
Time: prepare 0.0252    bound 0.1359    transfer 0.0026    finalize 0.0026    func 0.1702    
Accumulated time: func 2.1544    prepare 0.1551    bound 1.9295    transfer 0.0214    finalize 0.0293    
all_split False
======================Cut inference begins======================
max lb tensor(0.24470747) min lb tensor(-0.07978308)
Number of Verified Splits: 47 of 602
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.025160789489746094 
BICCOS Cumulative time: 0.6179993152618408
Preprocessing time: 0.01729893684387207 Inference time: 0.005990505218505859 Add cuts time: 0.00045752525329589844 Cut analysis time: 0.0014138221740722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07978 (20), -0.07849 (20), -0.07662 (20), -0.07646 (20), -0.07531 (20), -0.07507 (20), -0.07504 (20), -0.07374 (20), -0.07328 (20), -0.07327 (20), -0.07306 (20), -0.07195 (20), -0.07188 (20), -0.07179 (20), -0.07164 (20), -0.07156 (20), -0.07057 (20), -0.07041 (20), -0.07029 (20), -0.07015 (20), 
Length of domains: 555
Time: pickout 0.0057    decision 0.0281    set_bounds 0.0254    solve 0.1704    add 0.0022    
Accumulated time: pickout 0.0272    decision 0.8838    set_bounds 0.2289    solve 1.9776    add 0.5877    
Current (lb-rhs): -0.07978308200836182
1857 domains visited
Cumulative time: 4.536594390869141

BaB round 11
batch: 555
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] [/input-8, 313] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2104288339614868, worst -0.07596075534820557
10 lb beta sum: 1.2104288339614868, worst -0.07594072818756104
Time: prepare 0.0489    bound 0.1412    transfer 0.0034    finalize 0.0062    func 0.2069    
Accumulated time: func 2.3613    prepare 0.2043    bound 2.0706    transfer 0.0248    finalize 0.0355    
all_split False
======================Cut inference begins======================
max lb tensor(0.00714296) min lb tensor(-0.07592309)
Number of Verified Splits: 62 of 1110
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.042901039123535156 
BICCOS Cumulative time: 0.660900354385376
Preprocessing time: 0.03336620330810547 Inference time: 0.008148431777954102 Add cuts time: 0.0007307529449462891 Cut analysis time: 0.0006556510925292969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07592 (21), -0.07462 (21), -0.07455 (21), -0.07322 (21), -0.07267 (21), -0.07255 (21), -0.07135 (21), -0.07129 (21), -0.07118 (21), -0.07114 (21), -0.07110 (21), -0.06995 (21), -0.06988 (21), -0.06983 (21), -0.06968 (21), -0.06942 (21), -0.06937 (21), -0.06903 (21), -0.06852 (21), -0.06804 (21), 
Length of domains: 1048
Time: pickout 0.0088    decision 0.0424    set_bounds 0.0451    solve 0.2072    add 0.0051    
Accumulated time: pickout 0.0360    decision 0.9262    set_bounds 0.2740    solve 2.1848    add 0.5928    
Current (lb-rhs): -0.07592308521270752
2905 domains visited
Cumulative time: 4.889481782913208

BaB round 12
batch: 1048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07860898971557617
10 lb beta sum: 1.2182995080947876, worst -0.07404685020446777
Time: prepare 0.0497    bound 0.2285    transfer 0.0160    finalize 0.0104    func 0.3186    
Accumulated time: func 2.6799    prepare 0.2542    bound 2.2991    transfer 0.0408    finalize 0.0459    
all_split False
======================Cut inference begins======================
max lb tensor(0.24235338) min lb tensor(-0.07401389)
Number of Verified Splits: 227 of 2096
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 21
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.10168719291687012 
BICCOS Cumulative time: 0.7625875473022461
Preprocessing time: 0.06334424018859863 Inference time: 0.03458070755004883 Add cuts time: 0.0031592845916748047 Cut analysis time: 0.0006029605865478516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07401 (22), -0.07271 (22), -0.07208 (22), -0.07076 (22), -0.07073 (22), -0.07070 (22), -0.06941 (22), -0.06930 (22), -0.06927 (22), -0.06881 (22), -0.06870 (22), -0.06799 (22), -0.06751 (22), -0.06747 (22), -0.06746 (22), -0.06735 (22), -0.06728 (22), -0.06715 (22), -0.06614 (22), -0.06605 (22), 
Length of domains: 1869
Time: pickout 0.0157    decision 0.2363    set_bounds 0.0540    solve 0.3190    add 0.0070    
Accumulated time: pickout 0.0517    decision 1.1624    set_bounds 0.3280    solve 2.5038    add 0.5998    
Current (lb-rhs): -0.07401388883590698
4774 domains visited
Cumulative time: 5.626494407653809

BaB round 13
batch: 1869
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07554960250854492
10 lb beta sum: 1.4320999383926392, worst -0.07001996040344238
Time: prepare 0.0924    bound 0.3514    transfer 0.0141    finalize 0.0184    func 0.5007    
Accumulated time: func 3.1806    prepare 0.3469    bound 2.6505    transfer 0.0549    finalize 0.0644    
all_split False
======================Cut inference begins======================
max lb tensor(0.00876644) min lb tensor(-0.07000089)
Number of Verified Splits: 441 of 3738
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 21
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.34754109382629395 
BICCOS Cumulative time: 1.11012864112854
Preprocessing time: 0.11364603042602539 Inference time: 0.22475242614746094 Add cuts time: 0.008379220962524414 Cut analysis time: 0.0007634162902832031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07000 (23), -0.06868 (23), -0.06865 (23), -0.06862 (23), -0.06734 (23), -0.06731 (23), -0.06668 (23), -0.06664 (23), -0.06538 (23), -0.06536 (23), -0.06535 (23), -0.06529 (23), -0.06528 (23), -0.06523 (23), -0.06520 (23), -0.06406 (23), -0.06398 (23), -0.06396 (23), -0.06390 (23), -0.06389 (23), 
Length of domains: 3297
Time: pickout 0.0393    decision 0.1092    set_bounds 0.1593    solve 0.5016    add 0.0085    
Accumulated time: pickout 0.0910    decision 1.2716    set_bounds 0.4872    solve 3.0054    add 0.6083    
Current (lb-rhs): -0.07000088691711426
8071 domains visited
Cumulative time: 6.799061298370361

BaB round 14
batch: 3297
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0727996826171875
10 lb beta sum: 1.4376276731491089, worst -0.06725180149078369
Time: prepare 0.1706    bound 0.5657    transfer 0.0327    finalize 0.0386    func 0.8499    
Accumulated time: func 4.0305    prepare 0.5177    bound 3.2162    transfer 0.0876    finalize 0.1030    
all_split False
======================Cut inference begins======================
max lb tensor(0.01383157) min lb tensor(-0.06724000)
Number of Verified Splits: 950 of 6594
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 22
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.5469570159912109 
BICCOS Cumulative time: 1.657085657119751
Preprocessing time: 0.2057199478149414 Inference time: 0.16143107414245605 Add cuts time: 0.1790485382080078 Cut analysis time: 0.0007574558258056641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06724 (24), -0.06724 (24), -0.06594 (24), -0.06591 (24), -0.06552 (24), -0.06548 (24), -0.06420 (24), -0.06414 (24), -0.06396 (24), -0.06395 (24), -0.06389 (24), -0.06354 (24), -0.06354 (24), -0.06263 (24), -0.06254 (24), -0.06251 (24), -0.06249 (24), -0.06248 (24), -0.06245 (24), -0.06224 (24), 
Length of domains: 5644
Time: pickout 0.0534    decision 0.1865    set_bounds 0.2834    solve 0.8510    add 0.0186    
Accumulated time: pickout 0.1443    decision 1.4580    set_bounds 0.7706    solve 3.8564    add 0.6269    
Current (lb-rhs): -0.06723999977111816
13715 domains visited
Cumulative time: 8.752281665802002

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input, 1012] [/input-8, 1704] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06919574737548828
10 lb beta sum: 1.4975898265838623, worst -0.06394410133361816
Time: prepare 0.2123    bound 0.6799    transfer 0.0390    finalize 0.0450    func 1.0300    
Accumulated time: func 5.0605    prepare 0.7303    bound 3.8960    transfer 0.1267    finalize 0.1480    
all_split False
======================Cut inference begins======================
max lb tensor(0.00938106) min lb tensor(-0.06392145)
Number of Verified Splits: 1080 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 22
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.6859745979309082 
BICCOS Cumulative time: 2.343060255050659
Preprocessing time: 0.2551560401916504 Inference time: 0.4118318557739258 Add cuts time: 0.018207311630249023 Cut analysis time: 0.0007793903350830078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06392 (25), -0.06354 (24), -0.06349 (25), -0.06348 (25), -0.06284 (25), -0.06284 (25), -0.06224 (24), -0.06220 (25), -0.06218 (25), -0.06177 (25), -0.06175 (25), -0.06153 (25), -0.06150 (25), -0.06139 (24), -0.06110 (25), -0.06107 (25), -0.06046 (25), -0.06046 (25), -0.06027 (24), -0.06024 (25), 
Length of domains: 8660
Time: pickout 0.0697    decision 0.2237    set_bounds 0.3587    solve 1.0316    add 0.0240    
Accumulated time: pickout 0.2140    decision 1.6818    set_bounds 1.1293    solve 4.8880    add 0.6509    
Current (lb-rhs): -0.06392145156860352
20827 domains visited
current_vram/total_varm: 12.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.164592266082764

BaB round 16
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1704] [/input-8, 1967] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 1967] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06737709045410156
10 lb beta sum: 1.434679388999939, worst -0.06344008445739746
Time: prepare 0.4338    bound 1.2851    transfer 0.0757    finalize 0.0998    func 2.0002    
Accumulated time: func 7.0606    prepare 1.1644    bound 5.1811    transfer 0.2024    finalize 0.2478    
all_split False
======================Cut inference begins======================
max lb tensor(0.01237762) min lb tensor(-0.06342572)
Number of Verified Splits: 2853 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 23
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 1.312239408493042 
BICCOS Cumulative time: 3.655299663543701
Preprocessing time: 0.751899003982544 Inference time: 0.5126047134399414 Add cuts time: 0.046932220458984375 Cut analysis time: 0.0008034706115722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06343 (26), -0.06342 (26), -0.06279 (26), -0.06279 (26), -0.06213 (26), -0.06212 (26), -0.06169 (26), -0.06169 (26), -0.06149 (26), -0.06105 (26), -0.06102 (26), -0.06039 (26), -0.06038 (26), -0.06017 (26), -0.05994 (25), -0.05979 (25), -0.05976 (25), -0.05973 (26), -0.05951 (26), -0.05925 (26), 
Length of domains: 13999
Time: pickout 0.1347    decision 0.4396    set_bounds 0.9347    solve 2.0034    add 0.0391    
Accumulated time: pickout 0.3488    decision 2.1213    set_bounds 2.0640    solve 6.8914    add 0.6900    
Current (lb-rhs): -0.06342571973800659
34358 domains visited
current_vram/total_varm: 22.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.069277048110962

BaB round 17
batch: 13999
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1704] [/input-8, 1967] [/input-8, 1967] [/input-8, 1704] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06502103805541992
10 lb beta sum: 1.4500945806503296, worst -0.06111454963684082
Time: prepare 0.7430    bound 2.1500    transfer 0.1378    finalize 0.1710    func 3.3832    
Accumulated time: func 10.4438    prepare 1.9078    bound 7.3311    transfer 0.3402    finalize 0.4188    
all_split False
======================Cut inference begins======================
max lb tensor(0.46787512) min lb tensor(-0.06111002)
Number of Verified Splits: 15572 of 27998
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 4.1918487548828125 
BICCOS Cumulative time: 7.847148418426514
Preprocessing time: 1.227123498916626 Inference time: 2.8086049556732178 Add cuts time: 0.15540146827697754 Cut analysis time: 0.0007188320159912109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06111 (27), -0.06111 (27), -0.06044 (27), -0.06043 (27), -0.05973 (27), -0.05973 (27), -0.05971 (26), -0.05971 (26), -0.05938 (27), -0.05937 (27), -0.05909 (26), -0.05905 (27), -0.05899 (27), -0.05870 (27), -0.05867 (27), -0.05842 (26), -0.05841 (26), -0.05799 (27), -0.05798 (27), -0.05784 (27), 
Length of domains: 12426
Time: pickout 0.2865    decision 1.0289    set_bounds 1.6095    solve 3.3884    add 0.0358    
Accumulated time: pickout 0.6353    decision 3.1502    set_bounds 3.6735    solve 10.2798    add 0.7257    
Current (lb-rhs): -0.06111001968383789
46784 domains visited
Cumulative time: 26.770546197891235

BaB round 18
batch: 12426
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1704] [/input-8, 1704] [/input-8, 1967] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 1704] [/input-8, 1967] [/input-8, 510] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06422996520996094
10 lb beta sum: 1.6458373069763184, worst -0.06111788749694824
Time: prepare 0.6558    bound 1.9177    transfer 0.1228    finalize 0.1614    func 3.0192    
Accumulated time: func 13.4630    prepare 2.5641    bound 9.2488    transfer 0.4629    finalize 0.5802    
all_split False
======================Cut inference begins======================
max lb tensor(0.70811200) min lb tensor(-0.06110585)
Number of Verified Splits: 19314 of 24852
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 4.9564454555511475 
BICCOS Cumulative time: 12.803593873977661
Preprocessing time: 1.15582275390625 Inference time: 3.6209733486175537 Add cuts time: 0.17857050895690918 Cut analysis time: 0.0010788440704345703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06111 (28), -0.06110 (28), -0.06043 (28), -0.05971 (28), -0.05971 (28), -0.05842 (28), -0.05741 (27), -0.05739 (27), -0.05695 (28), -0.05695 (28), -0.05674 (27), -0.05672 (28), -0.05621 (28), -0.05603 (27), -0.05603 (27), -0.05580 (28), -0.05577 (28), -0.05574 (28), -0.05573 (28), -0.05543 (28), 
Length of domains: 5538
Time: pickout 0.2652    decision 0.9601    set_bounds 1.4405    solve 3.0238    add 0.0463    
Accumulated time: pickout 0.9005    decision 4.1104    set_bounds 5.1140    solve 13.3036    add 0.7721    
Current (lb-rhs): -0.06110584735870361
52322 domains visited
Cumulative time: 37.653661012649536

BaB round 19
batch: 5538
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input, 1463] [/input-8, 1812] [/input-8, 1812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062247276306152344
10 lb beta sum: 1.578415036201477, worst -0.05913901329040527
Time: prepare 0.3023    bound 0.8974    transfer 0.0558    finalize 0.0651    func 1.3931    
Accumulated time: func 14.8561    prepare 2.8667    bound 10.1462    transfer 0.5188    finalize 0.6453    
all_split False
======================Cut inference begins======================
max lb tensor(0.47696126) min lb tensor(-0.05912733)
Number of Verified Splits: 6790 of 11076
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 1.9005510807037354 
BICCOS Cumulative time: 14.704144954681396
Preprocessing time: 0.6167523860931396 Inference time: 1.2270896434783936 Add cuts time: 0.05599570274353027 Cut analysis time: 0.000713348388671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05913 (29), -0.05905 (29), -0.05842 (29), -0.05837 (29), -0.05772 (29), -0.05766 (29), -0.05695 (29), -0.05694 (29), -0.05578 (29), -0.05577 (29), -0.05542 (28), -0.05534 (28), -0.05498 (29), -0.05493 (29), -0.05473 (29), -0.05467 (28), -0.05426 (29), -0.05424 (29), -0.05423 (29), -0.05415 (29), 
Length of domains: 4286
Time: pickout 0.1134    decision 0.5486    set_bounds 0.5043    solve 1.3952    add 0.0178    
Accumulated time: pickout 1.0140    decision 4.6590    set_bounds 5.6183    solve 14.6988    add 0.7898    
Current (lb-rhs): -0.0591273307800293
56608 domains visited
Cumulative time: 42.20367622375488

BaB round 20
batch: 4286
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0602421760559082
10 lb beta sum: 1.7408051490783691, worst -0.05471062660217285
Time: prepare 0.2319    bound 0.7155    transfer 0.0429    finalize 0.2630    func 1.3087    
Accumulated time: func 16.1648    prepare 3.0988    bound 10.8617    transfer 0.5617    finalize 0.9082    
all_split False
======================Cut inference begins======================
max lb tensor(0.47757971) min lb tensor(-0.05466956)
Number of Verified Splits: 3772 of 8572
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 1.034600019454956 
BICCOS Cumulative time: 15.738744974136353
Preprocessing time: 0.2868058681488037 Inference time: 0.7116377353668213 Add cuts time: 0.03543281555175781 Cut analysis time: 0.0007236003875732422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05467 (30), -0.05455 (30), -0.05394 (30), -0.05385 (30), -0.05331 (30), -0.05321 (30), -0.05254 (30), -0.05249 (30), -0.05130 (30), -0.05126 (30), -0.05096 (29), -0.05087 (29), -0.05045 (30), -0.05043 (30), -0.05025 (30), -0.05016 (29), -0.04985 (30), -0.04981 (30), -0.04977 (30), -0.04965 (30), 
Length of domains: 4800
Time: pickout 0.0849    decision 0.2424    set_bounds 0.3873    solve 1.3109    add 0.1687    
Accumulated time: pickout 1.0989    decision 4.9014    set_bounds 6.0057    solve 16.0097    add 0.9585    
Current (lb-rhs): -0.05466955900192261
61408 domains visited
Cumulative time: 45.480467557907104

BaB round 21
batch: 4800
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input, 1463] [/input, 1463] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9759209156036377, worst -0.053552329540252686
10 lb beta sum: 1.9759209156036377, worst -0.053506553173065186
Time: prepare 0.4914    bound 0.7888    transfer 0.0440    finalize 0.0635    func 1.4500    
Accumulated time: func 17.6148    prepare 3.5905    bound 11.6505    transfer 0.6057    finalize 0.9718    
all_split False
======================Cut inference begins======================
max lb tensor(0.24078000) min lb tensor(-0.05348033)
Number of Verified Splits: 1965 of 9600
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.9554612636566162 
BICCOS Cumulative time: 16.69420623779297
Preprocessing time: 0.319105863571167 Inference time: 0.6155402660369873 Add cuts time: 0.019985675811767578 Cut analysis time: 0.0008294582366943359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05348 (31), -0.05336 (31), -0.05275 (31), -0.05267 (31), -0.05213 (31), -0.05203 (31), -0.05135 (31), -0.05130 (31), -0.05089 (30), -0.05080 (30), -0.05011 (30), -0.05011 (31), -0.05007 (31), -0.04955 (30), -0.04944 (30), -0.04927 (31), -0.04925 (31), -0.04873 (30), -0.04864 (31), -0.04863 (31), 
Length of domains: 7635
Time: pickout 0.1735    decision 0.4515    set_bounds 0.4359    solve 1.4532    add 0.0278    
Accumulated time: pickout 1.2724    decision 5.3529    set_bounds 6.4416    solve 17.4629    add 0.9863    
Current (lb-rhs): -0.053480327129364014
69043 domains visited
Cumulative time: 49.0068883895874

BaB round 22
batch: 7635
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 857] [/input, 857] [/input-8, 149] [/input, 857] [/input-8, 149] [/input-8, 149] [/input, 4089] [/input-8, 149] [/input, 4089] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9295390844345093, worst -0.05274695158004761
10 lb beta sum: 1.9295390844345093, worst -0.05272883176803589
Time: prepare 0.7694    bound 1.2114    transfer 0.0751    finalize 0.0962    func 2.2507    
Accumulated time: func 19.8655    prepare 4.3602    bound 12.8619    transfer 0.6808    finalize 1.0680    
all_split False
======================Cut inference begins======================
max lb tensor(0.23837805) min lb tensor(-0.05271357)
Number of Verified Splits: 3686 of 15270
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 1.5986969470977783 
BICCOS Cumulative time: 18.292903184890747
Preprocessing time: 0.5087437629699707 Inference time: 1.0503718852996826 Add cuts time: 0.03885293006896973 Cut analysis time: 0.0007283687591552734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05271 (32), -0.05210 (32), -0.05193 (32), -0.05180 (32), -0.05109 (32), -0.05047 (32), -0.04936 (32), -0.04935 (32), -0.04920 (32), -0.04908 (31), -0.04898 (31), -0.04862 (32), -0.04837 (32), -0.04829 (31), -0.04812 (32), -0.04811 (32), -0.04775 (31), -0.04771 (32), -0.04765 (31), -0.04755 (32), 
Length of domains: 11584
Time: pickout 0.1470    decision 0.4221    set_bounds 0.9344    solve 2.2538    add 0.0392    
Accumulated time: pickout 1.4194    decision 5.7750    set_bounds 7.3760    solve 19.7168    add 1.0255    
Current (lb-rhs): -0.05271357297897339
80627 domains visited
Cumulative time: 54.45219445228577

BaB round 23
batch: 11584
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3402] [/input, 3402] [/input, 3417] [/input, 857] [/input, 857] [/input, 4089] [/input, 4089] [/input, 857] [/input, 4089] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05572319030761719
10 lb beta sum: 1.6018729209899902, worst -0.05117201805114746
Time: prepare 0.6264    bound 1.7961    transfer 0.1060    finalize 0.1494    func 3.1230    
Accumulated time: func 22.9885    prepare 4.9870    bound 14.6580    transfer 0.7868    finalize 1.2174    
all_split False
======================Cut inference begins======================
max lb tensor(0.47222161) min lb tensor(-0.05115926)
Number of Verified Splits: 13888 of 23168
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 4.073314189910889 
BICCOS Cumulative time: 22.366217374801636
Preprocessing time: 0.7547566890716553 Inference time: 3.180983304977417 Add cuts time: 0.1365361213684082 Cut analysis time: 0.0010380744934082031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05116 (33), -0.05055 (33), -0.04994 (33), -0.04985 (33), -0.04915 (33), -0.04854 (33), -0.04800 (33), -0.04781 (33), -0.04778 (33), -0.04765 (33), -0.04765 (33), -0.04756 (32), -0.04742 (32), -0.04707 (33), -0.04694 (33), -0.04682 (33), -0.04673 (32), -0.04657 (33), -0.04653 (33), -0.04633 (33), 
Length of domains: 9280
Time: pickout 0.2725    decision 0.6413    set_bounds 1.3188    solve 3.1287    add 0.0419    
Accumulated time: pickout 1.6919    decision 6.4163    set_bounds 8.6947    solve 22.8455    add 1.0673    
Current (lb-rhs): -0.05115926265716553
89907 domains visited
Cumulative time: 64.07160949707031

BaB round 24
batch: 9280
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3417] [/input, 857] [/input, 857] [/input, 857] [/input, 3402] [/input, 857] [/input, 857] [/input, 857] [/input, 3402] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05372476577758789
10 lb beta sum: 2.065309762954712, worst -0.047135114669799805
Time: prepare 0.5008    bound 1.4697    transfer 0.0861    finalize 0.1262    func 2.3024    
Accumulated time: func 25.2909    prepare 5.4881    bound 16.1277    transfer 0.8728    finalize 1.3436    
all_split False
======================Cut inference begins======================
max lb tensor(0.48819613) min lb tensor(-0.04712266)
Number of Verified Splits: 14706 of 18560
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 4.2219953536987305 
BICCOS Cumulative time: 26.588212728500366
Preprocessing time: 0.6311666965484619 Inference time: 3.432736396789551 Add cuts time: 0.15712642669677734 Cut analysis time: 0.0009658336639404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04712 (34), -0.04703 (34), -0.04640 (34), -0.04633 (34), -0.04578 (34), -0.04571 (34), -0.04499 (34), -0.04497 (34), -0.04379 (34), -0.04375 (34), -0.04297 (34), -0.04294 (34), -0.04276 (33), -0.04265 (33), -0.04238 (34), -0.04232 (34), -0.04224 (34), -0.04214 (34), -0.04204 (34), -0.04196 (33), 
Length of domains: 3854
Time: pickout 0.1936    decision 0.5093    set_bounds 1.1444    solve 2.3069    add 0.0291    
Accumulated time: pickout 1.8855    decision 6.9256    set_bounds 9.8392    solve 25.1524    add 1.0964    
Current (lb-rhs): -0.04712265729904175
93761 domains visited
Cumulative time: 72.6211097240448

BaB round 25
batch: 3854
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input-8, 142] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 2.240906238555908, worst -0.047122180461883545
10 lb beta sum: 2.240906238555908, worst -0.04712265729904175
Time: prepare 0.3798    bound 0.6539    transfer 0.0384    finalize 0.0435    func 1.1658    
Accumulated time: func 26.4567    prepare 5.8682    bound 16.7816    transfer 0.9113    finalize 1.3871    
all_split False
======================Cut inference begins======================
max lb tensor(0.24738932) min lb tensor(-0.04711360)
Number of Verified Splits: 3355 of 7708
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 0.9949522018432617 
BICCOS Cumulative time: 27.583164930343628
Preprocessing time: 0.2597050666809082 Inference time: 0.7050051689147949 Add cuts time: 0.02943873405456543 Cut analysis time: 0.0008032321929931641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04711 (35), -0.04702 (35), -0.04638 (35), -0.04632 (35), -0.04577 (35), -0.04571 (35), -0.04499 (35), -0.04496 (35), -0.04379 (35), -0.04375 (35), -0.04296 (35), -0.04294 (35), -0.04275 (34), -0.04264 (34), -0.04237 (35), -0.04232 (35), -0.04223 (35), -0.04213 (35), -0.04202 (35), -0.04196 (34), 
Length of domains: 4353
Time: pickout 0.0861    decision 0.2162    set_bounds 0.3500    solve 1.3935    add 0.0183    
Accumulated time: pickout 1.9716    decision 7.1418    set_bounds 10.1892    solve 26.5459    add 1.1147    
Current (lb-rhs): -0.04711359739303589
98114 domains visited
Cumulative time: 75.71779441833496

BaB round 26
batch: 4353
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] [/input-8, 1981] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2128725051879883, worst -0.04550808668136597
10 lb beta sum: 2.2128725051879883, worst -0.04552048444747925
Time: prepare 0.4318    bound 0.7284    transfer 0.0406    finalize 0.2412    func 1.5003    
Accumulated time: func 27.9570    prepare 6.3002    bound 17.5100    transfer 0.9519    finalize 1.6282    
all_split False
======================Cut inference begins======================
max lb tensor(0.24747372) min lb tensor(-0.04550475)
Number of Verified Splits: 3280 of 8706
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 37
#cuts >= 20: 0
BICCOS time: 1.045140266418457 
BICCOS Cumulative time: 28.628305196762085
Preprocessing time: 0.28978848457336426 Inference time: 0.7212502956390381 Add cuts time: 0.03314375877380371 Cut analysis time: 0.0009577274322509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04550 (36), -0.04508 (36), -0.04476 (36), -0.04469 (36), -0.04415 (36), -0.04379 (36), -0.04337 (36), -0.04334 (36), -0.04275 (35), -0.04264 (35), -0.04219 (36), -0.04212 (36), -0.04195 (35), -0.04141 (35), -0.04136 (36), -0.04133 (35), -0.04130 (36), -0.04078 (36), -0.04071 (36), -0.04062 (35), 
Length of domains: 5426
Time: pickout 0.1066    decision 0.2436    set_bounds 0.4015    solve 1.5024    add 0.0151    
Accumulated time: pickout 2.0782    decision 7.3854    set_bounds 10.5907    solve 28.0484    add 1.1298    
Current (lb-rhs): -0.045504748821258545
103540 domains visited
Cumulative time: 79.06944584846497

BaB round 27
batch: 5426
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] [/input-8, 255] 
cut re-enabled after branching node selection
0 lb beta sum: 2.16210675239563, worst -0.043609797954559326
10 lb beta sum: 2.16210675239563, worst -0.04358404874801636
Time: prepare 0.5382    bound 0.8857    transfer 0.0539    finalize 0.0740    func 1.6242    
Accumulated time: func 29.5812    prepare 6.8387    bound 18.3957    transfer 1.0058    finalize 1.7023    
all_split False
======================Cut inference begins======================
max lb tensor(0.24338698) min lb tensor(-0.04357594)
Number of Verified Splits: 4197 of 10852
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 1.3498454093933105 
BICCOS Cumulative time: 29.978150606155396
Preprocessing time: 0.36168980598449707 Inference time: 0.9417417049407959 Add cuts time: 0.04530596733093262 Cut analysis time: 0.001107931137084961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04358 (37), -0.04346 (37), -0.04284 (37), -0.04277 (37), -0.04225 (37), -0.04217 (37), -0.04147 (37), -0.04144 (37), -0.04114 (36), -0.04070 (36), -0.04033 (36), -0.04031 (37), -0.04023 (37), -0.03979 (36), -0.03949 (37), -0.03943 (37), -0.03941 (36), -0.03900 (36), -0.03892 (37), -0.03884 (37), 
Length of domains: 6655
Time: pickout 0.1121    decision 0.5057    set_bounds 0.5056    solve 1.8298    add 0.0187    
Accumulated time: pickout 2.1903    decision 7.8911    set_bounds 11.0963    solve 29.8781    add 1.1485    
Current (lb-rhs): -0.043575942516326904
110195 domains visited
Cumulative time: 83.43888306617737

BaB round 28
batch: 6655
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] [/input-8, 247] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04803800582885742
10 lb beta sum: 1.6571916341781616, worst -0.04231095314025879
Time: prepare 0.3535    bound 1.0793    transfer 0.0675    finalize 0.0799    func 1.6663    
Accumulated time: func 31.2475    prepare 7.1926    bound 19.4750    transfer 1.0733    finalize 1.7821    
all_split False
======================Cut inference begins======================
max lb tensor(0.47881722) min lb tensor(-0.04230309)
Number of Verified Splits: 7165 of 13310
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 2.1751255989074707 
BICCOS Cumulative time: 32.153276205062866
Preprocessing time: 0.4492321014404297 Inference time: 1.6364052295684814 Add cuts time: 0.08854937553405762 Cut analysis time: 0.0009388923645019531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04230 (38), -0.04219 (38), -0.04157 (38), -0.04149 (38), -0.04112 (38), -0.04104 (38), -0.04035 (38), -0.04032 (38), -0.03921 (37), -0.03909 (37), -0.03905 (38), -0.03897 (38), -0.03839 (37), -0.03824 (38), -0.03817 (38), -0.03789 (37), -0.03780 (38), -0.03780 (37), -0.03772 (38), -0.03742 (38), 
Length of domains: 6145
Time: pickout 0.1410    decision 0.3667    set_bounds 0.8367    solve 1.8892    add 0.0278    
Accumulated time: pickout 2.3313    decision 8.2579    set_bounds 11.9330    solve 31.7674    add 1.1763    
Current (lb-rhs): -0.04230308532714844
116340 domains visited
Cumulative time: 88.9513909816742

BaB round 29
batch: 6145
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04676485061645508
10 lb beta sum: 1.7983736991882324, worst -0.03988909721374512
Time: prepare 0.3280    bound 1.0078    transfer 0.0571    finalize 0.0689    func 1.5420    
Accumulated time: func 32.7895    prepare 7.5209    bound 20.4829    transfer 1.1304    finalize 1.8510    
all_split False
======================Cut inference begins======================
max lb tensor(0.25038338) min lb tensor(-0.03985232)
Number of Verified Splits: 5885 of 12290
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 1.866095781326294 
BICCOS Cumulative time: 34.01937198638916
Preprocessing time: 0.4226655960083008 Inference time: 1.367006540298462 Add cuts time: 0.0755159854888916 Cut analysis time: 0.0009076595306396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03985 (39), -0.03973 (39), -0.03912 (39), -0.03903 (39), -0.03887 (39), -0.03877 (39), -0.03809 (39), -0.03806 (39), -0.03671 (38), -0.03663 (39), -0.03658 (38), -0.03654 (39), -0.03589 (38), -0.03582 (39), -0.03575 (39), -0.03555 (39), -0.03553 (38), -0.03547 (39), -0.03544 (38), -0.03496 (39), 
Length of domains: 6405
Time: pickout 0.1549    decision 0.5342    set_bounds 0.5744    solve 1.7956    add 0.0191    
Accumulated time: pickout 2.4862    decision 8.7921    set_bounds 12.5075    solve 33.5630    add 1.1955    
Current (lb-rhs): -0.0398523211479187
122745 domains visited
Cumulative time: 93.96117734909058

BaB round 30
batch: 6405
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0009608268737793, worst -0.03985327482223511
10 lb beta sum: 2.0009608268737793, worst -0.039849936962127686
Time: prepare 0.6339    bound 1.0424    transfer 0.0611    finalize 0.0832    func 1.9040    
Accumulated time: func 34.6936    prepare 8.1551    bound 21.5253    transfer 1.1915    finalize 1.9342    
all_split False
======================Cut inference begins======================
max lb tensor(0.24328923) min lb tensor(-0.03983277)
Number of Verified Splits: 6032 of 12810
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 2.1626622676849365 
BICCOS Cumulative time: 36.1820342540741
Preprocessing time: 0.6820614337921143 Inference time: 1.4230337142944336 Add cuts time: 0.056604623794555664 Cut analysis time: 0.0009624958038330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03983 (40), -0.03971 (40), -0.03911 (40), -0.03902 (40), -0.03886 (40), -0.03877 (40), -0.03809 (40), -0.03806 (40), -0.03660 (40), -0.03652 (40), -0.03580 (40), -0.03573 (40), -0.03554 (40), -0.03547 (39), -0.03547 (40), -0.03534 (39), -0.03494 (40), -0.03482 (40), -0.03475 (40), -0.03467 (40), 
Length of domains: 6778
Time: pickout 0.1385    decision 0.5525    set_bounds 0.6023    solve 1.9075    add 0.0177    
Accumulated time: pickout 2.6247    decision 9.3446    set_bounds 13.1098    solve 35.4705    add 1.2132    
Current (lb-rhs): -0.03983277082443237
129523 domains visited
Cumulative time: 99.41017270088196

BaB round 31
batch: 6778
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] [/input-8, 1595] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04294395446777344
10 lb beta sum: 1.5968151092529297, worst -0.03983044624328613
Time: prepare 0.3653    bound 1.1032    transfer 0.0681    finalize 0.0955    func 1.7225    
Accumulated time: func 36.4161    prepare 8.5208    bound 22.6285    transfer 1.2596    finalize 2.0297    
all_split False
======================Cut inference begins======================
max lb tensor(0.48608136) min lb tensor(-0.03982508)
Number of Verified Splits: 8271 of 13556
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 2.8235394954681396 
BICCOS Cumulative time: 39.005573749542236
Preprocessing time: 0.6863491535186768 Inference time: 2.03402042388916 Add cuts time: 0.10201692581176758 Cut analysis time: 0.0011529922485351562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03983 (41), -0.03971 (41), -0.03910 (41), -0.03902 (41), -0.03885 (41), -0.03877 (41), -0.03809 (41), -0.03805 (41), -0.03660 (41), -0.03652 (41), -0.03579 (41), -0.03572 (41), -0.03554 (41), -0.03547 (41), -0.03546 (40), -0.03533 (40), -0.03494 (41), -0.03482 (41), -0.03474 (41), -0.03467 (41), 
Length of domains: 5285
Time: pickout 0.1746    decision 0.3770    set_bounds 0.8314    solve 1.7262    add 0.0159    
Accumulated time: pickout 2.7992    decision 9.7216    set_bounds 13.9411    solve 37.1967    add 1.2291    
Current (lb-rhs): -0.03982508182525635
134808 domains visited
Cumulative time: 105.44253349304199

BaB round 32
batch: 5285
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7549114227294922, worst -0.03785717487335205
10 lb beta sum: 1.7549114227294922, worst -0.037840962409973145
Time: prepare 0.5274    bound 0.8697    transfer 0.0517    finalize 0.0639    func 1.5824    
Accumulated time: func 37.9985    prepare 9.0485    bound 23.4981    transfer 1.3113    finalize 2.0935    
all_split False
======================Cut inference begins======================
max lb tensor(0.24256575) min lb tensor(-0.03783906)
Number of Verified Splits: 2999 of 10570
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 1.3655967712402344 
BICCOS Cumulative time: 40.37117052078247
Preprocessing time: 0.3600592613220215 Inference time: 0.972764253616333 Add cuts time: 0.03191947937011719 Cut analysis time: 0.0008537769317626953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03784 (42), -0.03773 (42), -0.03711 (42), -0.03703 (42), -0.03686 (42), -0.03683 (42), -0.03679 (42), -0.03673 (42), -0.03610 (42), -0.03610 (42), -0.03607 (42), -0.03603 (42), -0.03585 (42), -0.03578 (42), -0.03578 (42), -0.03545 (41), -0.03533 (41), -0.03509 (42), -0.03505 (42), -0.03469 (42), 
Length of domains: 7571
Time: pickout 0.1225    decision 0.2948    set_bounds 0.7020    solve 1.5850    add 0.0272    
Accumulated time: pickout 2.9217    decision 10.0163    set_bounds 14.6431    solve 38.7817    add 1.2562    
Current (lb-rhs): -0.03783905506134033
142379 domains visited
Cumulative time: 109.57923531532288

BaB round 33
batch: 7571
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3165] [/input, 386] [/input, 386] [/input, 3165] [/input, 385] [/input, 385] [/input, 386] [/input-8, 1527] [/input, 386] [/input, 386] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7046107053756714, worst -0.03618013858795166
10 lb beta sum: 1.7046107053756714, worst -0.03618013858795166
Time: prepare 0.7631    bound 1.2180    transfer 0.0749    finalize 0.0940    func 2.2488    
Accumulated time: func 40.2473    prepare 9.8119    bound 24.7162    transfer 1.3862    finalize 2.1875    
all_split False
======================Cut inference begins======================
max lb tensor(0.23841333) min lb tensor(-0.03617537)
Number of Verified Splits: 3540 of 15142
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 1.7655444145202637 
BICCOS Cumulative time: 42.136714935302734
Preprocessing time: 0.5045304298400879 Inference time: 1.2140581607818604 Add cuts time: 0.04604959487915039 Cut analysis time: 0.0009062290191650391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03618 (43), -0.03610 (43), -0.03607 (43), -0.03546 (43), -0.03509 (43), -0.03508 (43), -0.03500 (43), -0.03500 (43), -0.03498 (43), -0.03497 (43), -0.03491 (43), -0.03475 (43), -0.03469 (43), -0.03468 (43), -0.03459 (43), -0.03439 (43), -0.03415 (43), -0.03413 (43), -0.03404 (43), -0.03402 (43), 
Length of domains: 11602
Time: pickout 0.1773    decision 0.4234    set_bounds 0.9313    solve 2.2528    add 0.0319    
Accumulated time: pickout 3.0990    decision 10.4398    set_bounds 15.5745    solve 41.0344    add 1.2881    
Current (lb-rhs): -0.03617537021636963
153981 domains visited
Cumulative time: 115.21227741241455

BaB round 34
batch: 11602
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3165] [/input, 386] [/input, 3165] [/input, 1480] [/input, 3165] [/input, 385] [/input, 385] [/input, 386] [/input, 385] [/input, 3165] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6633281707763672, worst -0.03399240970611572
10 lb beta sum: 1.6633281707763672, worst -0.033994317054748535
Time: prepare 1.1669    bound 1.8253    transfer 0.1126    finalize 0.4507    func 3.7087    
Accumulated time: func 43.9559    prepare 10.9791    bound 26.5415    transfer 1.4988    finalize 2.6382    
all_split False
======================Cut inference begins======================
max lb tensor(0.23838532) min lb tensor(-0.03398573)
Number of Verified Splits: 5325 of 23204
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 2.7467572689056396 
BICCOS Cumulative time: 44.883472204208374
Preprocessing time: 0.7911248207092285 Inference time: 1.881319522857666 Add cuts time: 0.07341313362121582 Cut analysis time: 0.0008997917175292969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03399 (44), -0.03399 (44), -0.03389 (44), -0.03364 (44), -0.03353 (44), -0.03337 (44), -0.03335 (44), -0.03327 (44), -0.03308 (44), -0.03302 (44), -0.03302 (44), -0.03301 (44), -0.03294 (44), -0.03292 (44), -0.03290 (44), -0.03287 (44), -0.03285 (44), -0.03284 (44), -0.03281 (44), -0.03280 (44), 
Length of domains: 17879
Time: pickout 0.3031    decision 0.6462    set_bounds 1.3379    solve 3.7137    add 0.0568    
Accumulated time: pickout 3.4021    decision 11.0860    set_bounds 16.9124    solve 44.7482    add 1.3449    
Current (lb-rhs): -0.03398573398590088
171860 domains visited
Cumulative time: 124.09035730361938

BaB round 35
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 385] [/input, 3165] [/input-8, 1955] [/input, 3165] [/input, 1012] [/input, 3165] [/input-8, 1955] [/input, 3165] [/input-8, 1527] [/input, 386] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6204829216003418, worst -0.03398621082305908
10 lb beta sum: 1.6204829216003418, worst -0.0339890718460083
Time: prepare 1.6394    bound 2.5231    transfer 0.1498    finalize 0.5804    func 5.1049    
Accumulated time: func 49.0609    prepare 12.6189    bound 29.0646    transfer 1.6485    finalize 3.2186    
all_split False
======================Cut inference begins======================
max lb tensor(0.23841918) min lb tensor(-0.03398430)
Number of Verified Splits: 8467 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 3.98518705368042 
BICCOS Cumulative time: 48.868659257888794
Preprocessing time: 1.0859827995300293 Inference time: 2.780698776245117 Add cuts time: 0.11750674247741699 Cut analysis time: 0.0009987354278564453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03398 (45), -0.03389 (45), -0.03364 (45), -0.03352 (45), -0.03334 (45), -0.03327 (45), -0.03308 (45), -0.03302 (45), -0.03301 (45), -0.03292 (45), -0.03290 (45), -0.03287 (45), -0.03285 (44), -0.03280 (45), -0.03276 (44), -0.03255 (45), -0.03246 (45), -0.03245 (45), -0.03243 (45), -0.03242 (45), 
Length of domains: 25796
Time: pickout 0.3872    decision 1.6450    set_bounds 1.8670    solve 5.1114    add 0.0812    
Accumulated time: pickout 3.7893    decision 12.7310    set_bounds 18.7794    solve 49.8596    add 1.4261    
Current (lb-rhs): -0.03398430347442627
196161 domains visited
Cumulative time: 137.28127694129944

BaB round 36
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5858627557754517, worst -0.03285038471221924
10 lb beta sum: 1.5858627557754517, worst -0.03284001350402832
Time: prepare 1.6465    bound 2.5240    transfer 0.1491    finalize 0.7256    func 5.2623    
Accumulated time: func 54.3232    prepare 14.2658    bound 31.5886    transfer 1.7976    finalize 3.9442    
all_split False
======================Cut inference begins======================
max lb tensor(0.23848784) min lb tensor(-0.03279603)
Number of Verified Splits: 9834 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 42
#cuts >= 20: 0
BICCOS time: 4.639616250991821 
BICCOS Cumulative time: 53.508275508880615
Preprocessing time: 1.1309938430786133 Inference time: 3.34801983833313 Add cuts time: 0.1594862937927246 Cut analysis time: 0.0011162757873535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03280 (45), -0.03273 (45), -0.03260 (46), -0.03250 (46), -0.03243 (45), -0.03225 (46), -0.03214 (46), -0.03196 (46), -0.03190 (45), -0.03189 (46), -0.03185 (45), -0.03170 (46), -0.03163 (46), -0.03163 (46), -0.03153 (46), -0.03152 (46), -0.03148 (46), -0.03141 (46), -0.03125 (45), -0.03122 (45), 
Length of domains: 32346
Time: pickout 0.3917    decision 1.6434    set_bounds 2.0224    solve 5.2701    add 0.0818    
Accumulated time: pickout 4.1809    decision 14.3744    set_bounds 20.8017    solve 55.1297    add 1.5079    
Current (lb-rhs): -0.03279602527618408
219095 domains visited
Cumulative time: 151.4678990840912

BaB round 37
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1012] [/input, 1012] [/input, 1012] [/input-8, 1631] [/input, 1012] [/input, 386] [/input, 3165] [/input-8, 1955] [/input-8, 1955] [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 1.567867636680603, worst -0.03141367435455322
10 lb beta sum: 1.567867636680603, worst -0.03149235248565674
Time: prepare 1.6487    bound 2.5231    transfer 0.1505    finalize 0.2446    func 4.7824    
Accumulated time: func 59.1056    prepare 15.9149    bound 34.1117    transfer 1.9481    finalize 4.1889    
all_split False
======================Cut inference begins======================
max lb tensor(0.23838007) min lb tensor(-0.03139222)
Number of Verified Splits: 11210 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 44
#cuts >= 20: 0
BICCOS time: 5.181748390197754 
BICCOS Cumulative time: 58.69002389907837
Preprocessing time: 1.7214324474334717 Inference time: 3.2779550552368164 Add cuts time: 0.18124651908874512 Cut analysis time: 0.0011143684387207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03260 (46), -0.03250 (46), -0.03225 (46), -0.03214 (46), -0.03196 (46), -0.03189 (46), -0.03170 (46), -0.03163 (46), -0.03163 (46), -0.03153 (46), -0.03152 (46), -0.03148 (46), -0.03141 (46), -0.03139 (46), -0.03132 (46), -0.03116 (46), -0.03107 (46), -0.03106 (46), -0.03105 (46), -0.03103 (46), 
Length of domains: 37520
Time: pickout 0.3979    decision 1.6536    set_bounds 2.1870    solve 4.7901    add 0.0884    
Accumulated time: pickout 4.5788    decision 16.0279    set_bounds 22.9888    solve 59.9198    add 1.5964    
Current (lb-rhs): -0.032600998878479004
240653 domains visited
Cumulative time: 165.91722106933594

BaB round 38
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1391] [/input-8, 1391] [/input-8, 1391] [/input-8, 1391] [/input, 3165] [/input-8, 1391] [/input, 1012] [/input-8, 1391] [/input, 3165] [/input, 1012] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033280372619628906
10 lb beta sum: 1.0695503950119019, worst -0.03147682547569275
Time: prepare 0.9272    bound 2.5259    transfer 0.1518    finalize 0.8526    func 4.6736    
Accumulated time: func 63.7792    prepare 16.8425    bound 36.6376    transfer 2.0999    finalize 5.0414    
all_split False
======================Cut inference begins======================
max lb tensor(0.48008567) min lb tensor(-0.03147376)
Number of Verified Splits: 14483 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 6.368130683898926 
BICCOS Cumulative time: 65.0581545829773
Preprocessing time: 1.1371386051177979 Inference time: 4.973856449127197 Add cuts time: 0.2559340000152588 Cut analysis time: 0.001201629638671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03147 (47), -0.03139 (46), -0.03137 (47), -0.03132 (46), -0.03110 (47), -0.03105 (46), -0.03099 (47), -0.03083 (47), -0.03076 (47), -0.03057 (47), -0.03049 (47), -0.03049 (46), -0.03048 (47), -0.03043 (46), -0.03039 (47), -0.03039 (47), -0.03035 (47), -0.03028 (47), -0.03001 (47), -0.02994 (47), 
Length of domains: 39421
Time: pickout 0.4046    decision 2.0107    set_bounds 1.7150    solve 4.6816    add 0.0608    
Accumulated time: pickout 4.9834    decision 18.0386    set_bounds 24.7037    solve 64.6014    add 1.6572    
Current (lb-rhs): -0.031473755836486816
258938 domains visited
Cumulative time: 181.3842694759369

BaB round 39
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1391] [/input-8, 1391] [/input-8, 1631] [/input, 1012] [/input, 1012] [/input, 1012] [/input-8, 1631] [/input, 1012] [/input, 1012] [/input-8, 1391] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03206968307495117
10 lb beta sum: 1.1156419515609741, worst -0.030404388904571533
Time: prepare 0.9314    bound 2.5273    transfer 0.1468    finalize 0.2295    func 4.0582    
Accumulated time: func 67.8373    prepare 17.7745    bound 39.1649    transfer 2.2468    finalize 5.2709    
all_split False
======================Cut inference begins======================
max lb tensor(0.24505359) min lb tensor(-0.03026065)
Number of Verified Splits: 15797 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 6.924801826477051 
BICCOS Cumulative time: 71.98295640945435
Preprocessing time: 1.193420648574829 Inference time: 5.479534149169922 Add cuts time: 0.2505457401275635 Cut analysis time: 0.0013012886047363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03147 (47), -0.03137 (47), -0.03110 (47), -0.03099 (47), -0.03083 (47), -0.03076 (47), -0.03057 (47), -0.03049 (47), -0.03048 (47), -0.03039 (47), -0.03039 (47), -0.03035 (47), -0.03028 (47), -0.03026 (47), -0.03017 (47), -0.03001 (47), -0.02994 (47), -0.02991 (47), -0.02989 (47), -0.02988 (47), 
Length of domains: 40008
Time: pickout 0.4435    decision 1.6730    set_bounds 2.3656    solve 4.0659    add 0.0509    
Accumulated time: pickout 5.4269    decision 19.7116    set_bounds 27.0693    solve 68.6672    add 1.7081    
Current (lb-rhs): -0.031473755836486816
275909 domains visited
Cumulative time: 197.1339704990387

BaB round 40
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 385] [/input, 385] [/input-8, 1391] [/input, 385] [/input, 385] [/input, 385] [/input, 385] [/input-8, 1391] [/input, 385] [/input, 385] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0318903923034668
10 lb beta sum: 0.9952090978622437, worst -0.030139803886413574
Time: prepare 0.9230    bound 2.5262    transfer 0.1497    finalize 0.2633    func 4.0759    
Accumulated time: func 71.9132    prepare 18.6979    bound 41.6911    transfer 2.3964    finalize 5.5342    
all_split False
======================Cut inference begins======================
max lb tensor(0.24522620) min lb tensor(-0.03013325)
Number of Verified Splits: 14799 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 43
#cuts >= 20: 0
BICCOS time: 6.825216293334961 
BICCOS Cumulative time: 78.8081727027893
Preprocessing time: 1.9583487510681152 Inference time: 4.573281288146973 Add cuts time: 0.2922978401184082 Cut analysis time: 0.0012884140014648438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03147 (47), -0.03137 (47), -0.03083 (47), -0.03076 (47), -0.03057 (47), -0.03049 (47), -0.03048 (47), -0.03039 (47), -0.03035 (47), -0.03028 (47), -0.03026 (47), -0.03017 (47), -0.03013 (48), -0.03002 (48), -0.02994 (47), -0.02991 (47), -0.02988 (47), -0.02987 (47), -0.02985 (47), -0.02977 (47), 
Length of domains: 41593
Time: pickout 0.4360    decision 1.6638    set_bounds 2.3900    solve 4.0844    add 0.0778    
Accumulated time: pickout 5.8629    decision 21.3755    set_bounds 29.4593    solve 72.7516    add 1.7859    
Current (lb-rhs): -0.031473755836486816
293878 domains visited
Time out!!!!!!!!
Result: unknown in 214.8762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 632] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 632] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 328] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.01773703,  1.41905165, -0.42905188, -0.71989632,  0.09239095,
         -1.24160266,  0.88482064,  2.33326960,  1.89770031]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930],
         [-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78212738,  0.42775631, -0.05907917]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0589 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.35046577, -23.71506119, -23.35945511, -21.45649910, -20.70935822,
         -20.53724480, -22.38616753, -16.30188179, -26.53351212, -22.39307404]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [460]; unstable size 460; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 460] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 460] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 460] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 247] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23471165, 4.94442558, 5.38546705, 3.64118934, 3.33296204, 2.72332478,
         4.26009846, 8.15480995, 3.82787848]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0629 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [899]; unstable size 899; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 899] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 899] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 899] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 310] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97617197, -1.48784208,  0.95436382, -1.87956309,  0.93106556,
         -1.03131652, -0.85329711, -0.83899236,  0.88107014]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912],
         [-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00417519, -0.26066971,  0.96854210,  1.27352333,  0.57133484]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0607 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.78340530, -27.09945488, -17.72372437, -21.88307762, -18.28152275,
         -20.99545860, -20.59827042, -22.34070778, -24.70541382, -26.47000694]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [950]; unstable size 950; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 950] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 950] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 950] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 208] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.15953612, 7.92398405, 3.57421231, 0.07925250, 2.58815289, 1.97291231,
         3.73509598, 5.73443413, 7.39504910]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0501 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 306, 1, 743] with unstable size 305 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 743] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [305]; unstable size 305; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 305] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 305] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.55621195,  2.72794247, -0.34306383, -0.31645536, -0.10541534,
         -0.28819239,  1.26013124,  2.92124963,  1.60254765]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.17584038, -27.13981628, -23.11540031, -22.38797569, -23.44976807,
          -22.53939438, -23.10030365, -25.11281586, -26.95533371, -25.84247017],
         [-25.17584038, -27.13981628, -23.11540031, -22.38797569, -23.44976807,
          -22.53939438, -23.10030365, -25.11281586, -26.95533371, -25.84247017]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.57600594, -0.15141869,  0.91037369,  0.56090927]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0068 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 573] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 573] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 256] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.53955317,  0.16099817,  2.22247696,  1.41359806,  1.53142929,
          1.82894993,  2.34312296,  1.67316532, -0.55014038]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.28it/s]100%|██████████| 1/1 [00:00<00:00,  9.27it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.72954750, -25.00329971, -27.98002243, -26.96814156, -27.40962029,
          -27.52673721, -28.15061378, -27.60468102, -24.36431122, -24.20353508]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.16077614]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1103 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.869606971740723
alpha/beta optimization time: 1.1975650787353516
initial alpha-crown bounds: tensor([[ 0.62231827,  0.20233947,  2.31166697,  1.48120880,  1.62452984,
          1.90319920,  2.41159010,  1.76273060, -0.44997644]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.44997644424438477
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64576840400696
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64572858810425
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64568996429443
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6456699371338
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.64565014839172
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.64563131332397
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.64561319351196
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.64559388160706
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.64557576179504
Verifying property 8 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44997644]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
        -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44997644]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 573
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 251
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 843
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.989738464355469e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4499797821044922
10 lb beta sum: 0.0, worst -0.449984073638916
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    func 0.0521    
Accumulated time: func 0.0521    prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 49] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 34] 
split level 8: [/input-12, 56] 
split level 9: [/input-8, 715] 
split level 10: [/input-8, 883] 
split level 11: [/input-8, 1392] 
split level 12: [/input-8, 885] 
split level 13: [/input-8, 884] 
split level 14: [/input-8, 1649] 
split level 15: [/input-12, 50] 
split level 16: [/input-8, 117] 
split level 17: [/input-8, 1240] 
split level 18: [/input-8, 493] 
split level 19: [/input-8, 1402] 
split level 20: [/input-8, 1389] 
split level 21: [/input-8, 500] 
split level 22: [/input-8, 1395] 
split level 23: [/input-8, 1388] 
split level 24: [/input-8, 886] 
split level 25: [/input-8, 1965] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 116] 
split level 28: [/input-8, 819] 
split level 29: [/input-8, 424] 
split level 30: [/input-8, 1396] 
split level 31: [/input-12, 42] 
split level 32: [/input-8, 881] 
split level 33: [/input-8, 1393] 
split level 34: [/input-8, 1398] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 1397] 
split level 37: [/input-8, 742] 
split level 38: [/input-8, 1185] 
split level 39: [/input-8, 433] 
split level 40: [/input-8, 1955] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 417] 
split level 43: [/input-8, 1958] 
split level 44: [/input-8, 246] 
split level 45: [/input-8, 638] 
split level 46: [/input, 2422] 
split level 47: [/input-8, 1097] 
split level 48: [/input, 509] 
split level 49: [/input-8, 1390] 
split level 50: [/input-8, 931] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 1430] 
split level 53: [/input-8, 1403] 
split level 54: [/input-8, 891] 
split level 55: [/input-8, 139] 
split level 56: [/input-8, 1654] 
split level 57: [/input-8, 1376] 
split level 58: [/input-8, 1325] 
split level 59: [/input, 1006] 
split level 60: [/input-8, 420] 
split level 61: [/input-8, 1713] 
split level 62: [/input-8, 1650] 
split level 63: [/input-8, 1698] 
split level 64: [/input, 1018] 
split level 65: [/input-8, 1383] 
split level 66: [/input-8, 893] 
split level 67: [/input-8, 401] 
split level 68: [/input, 167] 
split level 69: [/input, 697] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1380] 
split level 72: [/input-8, 1168] 
split level 73: [/input, 699] 
split level 74: [/input, 1021] 
split level 75: [/input-8, 1385] 
split level 76: [/input, 505] 
split level 77: [/input, 491] 
split level 78: [/input, 1005] 
split level 79: [/input-8, 1697] 
split level 80: [/input-8, 1372] 
split level 81: [/input, 990] 
split level 82: [/input, 1004] 
split level 83: [/input-8, 1641] 
split level 84: [/input, 1384] 
split level 85: [/input-8, 1938] 
split level 86: [/input, 1015] 
split level 87: [/input-8, 251] 
split level 88: [/input-8, 1663] 
split level 89: [/input, 1013] 
split level 90: [/input, 507] 
split level 91: [/input, 1020] 
split level 92: [/input-8, 488] 
split level 93: [/input, 494] 
split level 94: [/input-8, 1377] 
split level 95: [/input, 1768] 
split level 96: [/input-8, 241] 
split level 97: [/input-8, 242] 
split level 98: [/input-8, 485] 
split level 99: [/input, 493] 
split level 100: [/input-8, 1597] 
split level 101: [/input-8, 1940] 
split level 102: [/input, 1707] 
split level 103: [/input, 1476] 
split level 104: [/input, 3194] 
split level 105: [/input-8, 1583] 
split level 106: [/input, 1003] 
split level 107: [/input-8, 823] 
split level 108: [/input-8, 815] 
split level 109: [/input, 1016] 
split level 110: [/input-8, 1379] 
split level 111: [/input-8, 409] 
split level 112: [/input, 120] 
split level 113: [/input, 1366] 
split level 114: [/input-8, 361] 
split level 115: [/input, 1466] 
split level 116: [/input, 2678] 
split level 117: [/input, 1002] 
split level 118: [/input-8, 1184] 
split level 119: [/input, 3571] 
split level 120: [/input-8, 890] 
split level 121: [/input-8, 1528] 
split level 122: [/input, 1478] 
split level 123: [/input, 681] 
split level 124: [/input, 103] 
split level 125: [/input, 183] 
split level 126: [/input-8, 1378] 
split level 127: [/input-8, 250] 
split level 128: [/input-8, 364] 
split level 129: [/input-8, 1760] 
split level 130: [/input-8, 1925] 
split level 131: [/input-8, 876] 
split level 132: [/input-8, 191] 
split level 133: [/input, 806] 
split level 134: [/input, 682] 
split level 135: [/input, 2181] 
split level 136: [/input, 121] 
split level 137: [/input-8, 295] 
split level 138: [/input, 989] 
split level 139: [/input-8, 1368] 
split level 140: [/input, 3366] 
split level 141: [/input, 2426] 
split level 142: [/input, 3113] 
split level 143: [/input-8, 399] 
split level 144: [/input-8, 1505] 
split level 145: [/input, 822] 
split level 146: [/input, 2442] 
split level 147: [/input, 135] 
split level 148: [/input, 2728] 
split level 149: [/input-8, 1783] 
split level 150: [/input, 988] 
split level 151: [/input, 1755] 
split level 152: [/input-8, 431] 
split level 153: [/input, 3129] 
split level 154: [/input, 185] 
split level 155: [/input, 891] 
split level 156: [/input-8, 2044] 
split level 157: [/input, 3521] 
split level 158: [/input, 2438] 
split level 159: [/input, 700] 
split level 160: [/input, 2557] 
split level 161: [/input, 117] 
split level 162: [/input-8, 2033] 
split level 163: [/input-8, 1371] 
split level 164: [/input, 3552] 
split level 165: [/input, 890] 
split level 166: [/input-8, 504] 
split level 167: [/input, 3054] 
split level 168: [/input, 489] 
split level 169: [/input, 1367] 
split level 170: [/input, 3053] 
split level 171: [/input, 1477] 
split level 172: [/input-8, 877] 
split level 173: [/input, 2865] 
split level 174: [/input, 995] 
split level 175: [/input-8, 238] 
split level 176: [/input, 2428] 
split level 177: [/input, 2027] 
split level 178: [/input, 892] 
split level 179: [/input, 236] 
split level 180: [/input-8, 38] 
split level 181: [/input-8, 402] 
split level 182: [/input, 2545] 
split level 183: [/input, 2554] 
split level 184: [/input, 213] 
split level 185: [/input-8, 1369] 
split level 186: [/input, 196] 
split level 187: [/input, 663] 
split level 188: [/input, 3195] 
split level 189: [/input, 3446] 
split level 190: [/input, 809] 
split level 191: [/input, 2435] 
split level 192: [/input, 2300] 
split level 193: [/input, 2555] 
split level 194: [/input, 1183] 
split level 195: [/input, 3299] 
split level 196: [/input, 2179] 
split level 197: [/input, 2797] 
split level 198: [/input, 2635] 
split level 199: [/input, 2782] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44990062713623047
10 lb beta sum: 0.0, worst -0.44991445541381836
Time: prepare 0.0112    bound 0.0957    transfer 0.0017    finalize 0.0028    func 0.1141    
Accumulated time: func 0.1662    prepare 0.0212    bound 0.1473    transfer 0.0018    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.26759338) min lb tensor(-0.44989538)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010763406753540039 
BICCOS Cumulative time: 0.010763406753540039
Preprocessing time: 0.009940147399902344 Inference time: 0.00016164779663085938 Add cuts time: 7.724761962890625e-05 Cut analysis time: 0.0005843639373779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.43546 (1), -0.43522 (1), -0.43457 (1), -0.43382 (1), -0.43299 (1), -0.43273 (1), -0.43244 (1), -0.43082 (1), -0.42962 (1), -0.42943 (1), -0.42920 (1), -0.42846 (1), -0.42767 (1), -0.42724 (1), -0.42715 (1), -0.42673 (1), -0.42620 (1), -0.42587 (1), -0.42536 (1), -0.42437 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5118    set_bounds 0.0089    solve 0.1142    add 0.0697    
Accumulated time: pickout 0.0003    decision 0.5118    set_bounds 0.0089    solve 0.1142    add 0.0697    
Current (lb-rhs): -0.43546009063720703
50 domains visited
Cumulative time: 0.7727792263031006

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 49] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 29] [/input-12, 4] [/input-12, 29] [/input-12, 29] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40697813034057617
10 lb beta sum: 0.6506433486938477, worst -0.3830994665622711
Time: prepare 0.0072    bound 0.1152    transfer 0.0008    finalize 0.0024    func 0.1282    
Accumulated time: func 0.2944    prepare 0.0286    bound 0.2625    transfer 0.0026    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.39270774) min lb tensor(-0.38295466)
Number of Verified Splits: 109 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.01793217658996582 
BICCOS Cumulative time: 0.02869558334350586
Preprocessing time: 0.011657953262329102 Inference time: 0.004587411880493164 Add cuts time: 0.0013735294342041016 Cut analysis time: 0.0003132820129394531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08634 (2), -0.08626 (2), -0.08361 (2), -0.08350 (2), -0.07784 (2), -0.07510 (2), -0.07143 (2), -0.06906 (2), -0.06894 (2), -0.06718 (2), -0.06687 (2), -0.06517 (2), -0.06469 (2), -0.06141 (2), -0.06092 (2), -0.06043 (2), -0.06037 (2), -0.06016 (2), -0.05990 (2), -0.05894 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0225    set_bounds 0.0121    solve 0.1282    add 0.0843    
Accumulated time: pickout 0.0015    decision 0.5343    set_bounds 0.0210    solve 0.2424    add 0.1540    
Current (lb-rhs): -0.08633708953857422
100 domains visited
Cumulative time: 1.0392811298370361

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 49] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12290334701538086
10 lb beta sum: 0.7748346328735352, worst -0.02046293020248413
Time: prepare 0.0072    bound 0.1149    transfer 0.0008    finalize 0.0024    func 0.1285    
Accumulated time: func 0.4229    prepare 0.0361    bound 0.3775    transfer 0.0034    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.37289721) min lb tensor(-0.00628942)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.03737521171569824 
BICCOS Cumulative time: 0.0660707950592041
Preprocessing time: 0.012984037399291992 Inference time: 0.01645064353942871 Add cuts time: 0.007642030715942383 Cut analysis time: 0.00029850006103515625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0193    set_bounds 0.0153    solve 0.1286    add 0.0194    
Accumulated time: pickout 0.0026    decision 0.5537    set_bounds 0.0363    solve 0.3710    add 0.1734    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([6.62155886e-11, 1.46460578e-01, 2.81086028e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.62155886e-11, 1.46460578e-01, 7.72592276e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.62155886e-11, 1.09962031e-01, 2.56554663e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([6.62155886e-11, 1.09962031e-01, 8.18673819e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  3.44397128e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  6.59488291e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30565834045410156
10 lb beta sum: 0.6098569631576538, worst -0.23230159282684326
Time: prepare 0.0004    bound 0.1098    transfer 0.0002    finalize 0.0002    func 0.1106    
Accumulated time: func 0.5335    prepare 0.0365    bound 0.4873    transfer 0.0036    finalize 0.0079    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 56] 
split level 6: [/input-8, 1392] 
split level 7: [/input-8, 1397] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.1269383430480957
10 lb beta sum: 1.4001860618591309, worst -0.12613439559936523
Time: prepare 0.0110    bound 0.1120    transfer 0.0009    finalize 0.0012    func 0.1269    
Accumulated time: func 0.6604    prepare 0.0479    bound 0.5993    transfer 0.0045    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.57592487) min lb tensor(-0.12584448)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4001860618591309, worst -0.30652952194213867
10 lb beta sum: 1.627424716949463, worst -0.1861858367919922
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 7
#cuts 4-6: 2
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.27808475494384766 
BICCOS Cumulative time: 0.34415555000305176
Preprocessing time: 0.0070934295654296875 Inference time: 0.2634851932525635 Add cuts time: 0.006932735443115234 Cut analysis time: 0.0005733966827392578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12584 (8), -0.12468 (8), -0.11732 (8), -0.11679 (8), -0.11319 (8), -0.11203 (8), -0.10507 (8), -0.10454 (8), -0.00353 (8), -0.00138 (8), 
Length of domains: 10
Time: pickout 0.0005    decision 0.0217    set_bounds 0.0249    solve 0.1269    add 0.0008    
Accumulated time: pickout 0.0030    decision 0.5754    set_bounds 0.0613    solve 0.4980    add 0.1742    
Current (lb-rhs): -0.12584447860717773
110 domains visited
Cumulative time: 1.8411235809326172

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] 
split level 1: [/input-8, 1389] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] [/input-8, 1384] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] 
split level 2: [/input-8, 1396] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] 
split level 3: [/input-8, 1384] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] 
split level 4: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0941781997680664
10 lb beta sum: 0.157846137881279, worst -0.09271521866321564
Time: prepare 0.0060    bound 0.1267    transfer 0.0020    finalize 0.0021    func 0.1389    
Accumulated time: func 0.7992    prepare 0.0542    bound 0.7260    transfer 0.0065    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.05354595) min lb tensor(-0.09246835)
Number of Verified Splits: 64 of 320
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.016473770141601562 
BICCOS Cumulative time: 0.3606293201446533
Preprocessing time: 0.009170293807983398 Inference time: 0.00648045539855957 Add cuts time: 0.0005533695220947266 Cut analysis time: 0.0002696514129638672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09247 (13), -0.09085 (13), -0.08670 (13), -0.08563 (13), -0.08361 (13), -0.08187 (13), -0.08163 (13), -0.08081 (13), -0.07964 (13), -0.07944 (13), -0.07883 (13), -0.07840 (13), -0.07838 (13), -0.07834 (13), -0.07820 (13), -0.07806 (13), -0.07805 (13), -0.07802 (13), -0.07752 (13), -0.07749 (13), 
Length of domains: 256
Time: pickout 0.0013    decision 0.0160    set_bounds 0.0207    solve 0.1389    add 0.0017    
Accumulated time: pickout 0.0044    decision 0.5913    set_bounds 0.0819    solve 0.6369    add 0.1759    
Current (lb-rhs): -0.09246835112571716
366 domains visited
Cumulative time: 2.037228584289551

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input-12, 50] [/input-8, 1395] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-8, 1395] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08740615844726562
10 lb beta sum: 0.19730767607688904, worst -0.08666986227035522
Time: prepare 0.0099    bound 0.1154    transfer 0.0013    finalize 0.0026    func 0.1326    
Accumulated time: func 0.9319    prepare 0.0644    bound 0.8414    transfer 0.0079    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.05910392) min lb tensor(-0.08659083)
Number of Verified Splits: 154 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03737330436706543 
BICCOS Cumulative time: 0.39800262451171875
Preprocessing time: 0.014737606048583984 Inference time: 0.019328832626342773 Add cuts time: 0.003009796142578125 Cut analysis time: 0.0002970695495605469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08659 (14), -0.08496 (14), -0.08066 (14), -0.07931 (14), -0.07876 (14), -0.07673 (14), -0.07597 (14), -0.07455 (14), -0.07374 (14), -0.07368 (14), -0.07315 (14), -0.07262 (14), -0.07235 (14), -0.07210 (14), -0.07206 (14), -0.07195 (14), -0.07193 (14), -0.07180 (14), -0.07171 (14), -0.07149 (14), 
Length of domains: 358
Time: pickout 0.0038    decision 0.0221    set_bounds 0.0220    solve 0.1328    add 0.0029    
Accumulated time: pickout 0.0081    decision 0.6134    set_bounds 0.1039    solve 0.7697    add 0.1788    
Current (lb-rhs): -0.08659082651138306
724 domains visited
Cumulative time: 2.259561061859131

BaB round 4
batch: 358
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08179855346679688
10 lb beta sum: 0.2535237967967987, worst -0.08108702301979065
Time: prepare 0.0135    bound 0.1203    transfer 0.0022    finalize 0.0031    func 0.1437    
Accumulated time: func 1.0756    prepare 0.0781    bound 0.9618    transfer 0.0100    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.28979009) min lb tensor(-0.08103280)
Number of Verified Splits: 204 of 716
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.05137443542480469 
BICCOS Cumulative time: 0.44937705993652344
Preprocessing time: 0.020624399185180664 Inference time: 0.026935338973999023 Add cuts time: 0.003503561019897461 Cut analysis time: 0.00031113624572753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08103 (15), -0.07940 (15), -0.07508 (15), -0.07378 (15), -0.07293 (15), -0.07089 (15), -0.07036 (15), -0.06983 (15), -0.06897 (15), -0.06838 (15), -0.06820 (15), -0.06775 (15), -0.06755 (15), -0.06682 (15), -0.06674 (15), -0.06661 (15), -0.06640 (15), -0.06636 (15), -0.06606 (15), -0.06604 (15), 
Length of domains: 512
Time: pickout 0.0056    decision 0.0312    set_bounds 0.0302    solve 0.1439    add 0.0036    
Accumulated time: pickout 0.0137    decision 0.6446    set_bounds 0.1341    solve 0.9136    add 0.1824    
Current (lb-rhs): -0.08103279769420624
1236 domains visited
Cumulative time: 2.527195692062378

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2355891615152359, worst -0.07407574355602264
10 lb beta sum: 0.2355891615152359, worst -0.0739622563123703
Time: prepare 0.0435    bound 0.1231    transfer 0.0021    finalize 0.0055    func 0.1807    
Accumulated time: func 1.2563    prepare 0.1219    bound 1.0849    transfer 0.0121    finalize 0.0224    
all_split False
======================Cut inference begins======================
max lb tensor(0.00070757) min lb tensor(-0.07390217)
Number of Verified Splits: 1 of 1024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.031972408294677734 
BICCOS Cumulative time: 0.48134946823120117
Preprocessing time: 0.030887603759765625 Inference time: 0.0004680156707763672 Add cuts time: 0.00019598007202148438 Cut analysis time: 0.0004208087921142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07390 (16), -0.07228 (16), -0.06940 (16), -0.06797 (16), -0.06778 (16), -0.06729 (16), -0.06660 (16), -0.06515 (16), -0.06348 (16), -0.06326 (16), -0.06284 (16), -0.06209 (16), -0.06196 (16), -0.06185 (16), -0.06124 (16), -0.06121 (16), -0.06111 (16), -0.06036 (16), -0.06033 (16), -0.05996 (16), 
Length of domains: 1023
Time: pickout 0.0095    decision 0.0384    set_bounds 0.2404    solve 0.1810    add 0.0050    
Accumulated time: pickout 0.0232    decision 0.6831    set_bounds 0.3745    solve 1.0946    add 0.1874    
Current (lb-rhs): -0.0739021748304367
2259 domains visited
Cumulative time: 3.0347177982330322

BaB round 6
batch: 1023
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06979179382324219
10 lb beta sum: 0.19441460072994232, worst -0.06915464997291565
Time: prepare 0.0394    bound 0.1702    transfer 0.0114    finalize 0.0089    func 0.2429    
Accumulated time: func 1.4992    prepare 0.1615    bound 1.2551    transfer 0.0235    finalize 0.0313    
all_split False
======================Cut inference begins======================
max lb tensor(0.00855064) min lb tensor(-0.06911092)
Number of Verified Splits: 47 of 2046
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 9
#cuts 7-9: 12
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 0.07572698593139648 
BICCOS Cumulative time: 0.5570764541625977
Preprocessing time: 0.06199502944946289 Inference time: 0.00944828987121582 Add cuts time: 0.0026407241821289062 Cut analysis time: 0.0016429424285888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06911 (17), -0.06575 (17), -0.06440 (17), -0.06382 (17), -0.06221 (17), -0.06191 (17), -0.06172 (17), -0.06105 (17), -0.06015 (17), -0.05910 (17), -0.05871 (17), -0.05828 (17), -0.05758 (17), -0.05751 (17), -0.05747 (17), -0.05720 (17), -0.05702 (17), -0.05700 (17), -0.05662 (17), -0.05644 (17), 
Length of domains: 1999
Time: pickout 0.0174    decision 0.0676    set_bounds 0.0847    solve 0.2433    add 0.0071    
Accumulated time: pickout 0.0406    decision 0.7507    set_bounds 0.4592    solve 1.3379    add 0.1945    
Current (lb-rhs): -0.0691109150648117
4258 domains visited
Cumulative time: 3.533376693725586

BaB round 7
batch: 1999
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1398] [/input-8, 1398] [/input-12, 42] [/input-8, 742] [/input-12, 42] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06249523162841797
10 lb beta sum: 0.18501070141792297, worst -0.061880022287368774
Time: prepare 0.0806    bound 0.2796    transfer 0.0148    finalize 0.0197    func 0.4216    
Accumulated time: func 1.9208    prepare 0.2424    bound 1.5347    transfer 0.0383    finalize 0.0510    
all_split False
======================Cut inference begins======================
max lb tensor(0.01016057) min lb tensor(-0.06184962)
Number of Verified Splits: 457 of 3998
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 135.
#cuts 1-3: 9
#cuts 4-6: 5
#cuts 7-9: 110
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 0.24152088165283203 
BICCOS Cumulative time: 0.7985973358154297
Preprocessing time: 0.12321138381958008 Inference time: 0.07802438735961914 Add cuts time: 0.03267359733581543 Cut analysis time: 0.007611513137817383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06185 (18), -0.06094 (18), -0.06016 (18), -0.05742 (18), -0.05699 (18), -0.05689 (18), -0.05641 (18), -0.05607 (18), -0.05580 (18), -0.05530 (18), -0.05484 (18), -0.05459 (18), -0.05358 (18), -0.05270 (18), -0.05270 (18), -0.05269 (18), -0.05256 (18), -0.05217 (18), -0.05213 (18), -0.05205 (18), 
Length of domains: 3541
Time: pickout 0.0273    decision 0.1167    set_bounds 0.3216    solve 0.4228    add 0.0143    
Accumulated time: pickout 0.0680    decision 0.8673    set_bounds 0.7808    solve 1.7607    add 0.2088    
Current (lb-rhs): -0.061849623918533325
7799 domains visited
Cumulative time: 4.687566518783569

BaB round 8
batch: 3541
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1394] [/input-12, 42] [/input-8, 1394] [/input-8, 819] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1394] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.055877685546875
10 lb beta sum: 0.15500855445861816, worst -0.05527584254741669
Time: prepare 0.1492    bound 0.4656    transfer 0.0349    finalize 0.0380    func 0.7340    
Accumulated time: func 2.6549    prepare 0.3918    bound 2.0003    transfer 0.0732    finalize 0.0890    
all_split False
======================Cut inference begins======================
max lb tensor(0.02658112) min lb tensor(-0.05524544)
Number of Verified Splits: 2545 of 7082
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 332.
#cuts 1-3: 11
#cuts 4-6: 92
#cuts 7-9: 227
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 1.047713041305542 
BICCOS Cumulative time: 1.8463103771209717
Preprocessing time: 0.22022294998168945 Inference time: 0.6212217807769775 Add cuts time: 0.1901392936706543 Cut analysis time: 0.016129016876220703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05525 (19), -0.05434 (19), -0.05355 (19), -0.05083 (19), -0.05054 (19), -0.05027 (19), -0.05021 (19), -0.04980 (19), -0.04936 (19), -0.04898 (19), -0.04882 (19), -0.04857 (19), -0.04848 (19), -0.04839 (19), -0.04795 (19), -0.04757 (19), -0.04628 (19), -0.04627 (19), -0.04587 (19), -0.04572 (19), 
Length of domains: 4537
Time: pickout 0.0511    decision 0.1974    set_bounds 0.4431    solve 0.7359    add 0.0198    
Accumulated time: pickout 0.1191    decision 1.0647    set_bounds 1.2239    solve 2.4965    add 0.2286    
Current (lb-rhs): -0.05524544417858124
12336 domains visited
Cumulative time: 7.217713832855225

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04999065399169922
10 lb beta sum: 0.17585065960884094, worst -0.0762433409690857
Time: prepare 0.1788    bound 0.5839    transfer 0.0384    finalize 0.0445    func 0.9000    
Accumulated time: func 3.5548    prepare 0.5709    bound 2.5842    transfer 0.1116    finalize 0.1335    
all_split False
======================Cut inference begins======================
max lb tensor(0.04241642) min lb tensor(-0.04931960)
Number of Verified Splits: 4324 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 431.
#cuts 1-3: 12
#cuts 4-6: 193
#cuts 7-9: 226
#cuts >= 20: 0
BICCOS time: 1.570176124572754 
BICCOS Cumulative time: 3.4164865016937256
Preprocessing time: 0.2597169876098633 Inference time: 0.7282743453979492 Add cuts time: 0.5621097087860107 Cut analysis time: 0.020075082778930664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04932 (20), -0.04839 (20), -0.04795 (19), -0.04763 (20), -0.04522 (19), -0.04486 (20), -0.04449 (20), -0.04440 (20), -0.04429 (20), -0.04387 (20), -0.04336 (20), -0.04302 (20), -0.04299 (20), -0.04297 (19), -0.04260 (20), -0.04255 (20), -0.04240 (20), -0.04194 (20), -0.04173 (20), -0.04107 (20), 
Length of domains: 4309
Time: pickout 0.0618    decision 0.2253    set_bounds 0.5459    solve 0.9028    add 0.0183    
Accumulated time: pickout 0.1809    decision 1.2901    set_bounds 1.7697    solve 3.3993    add 0.2469    
Current (lb-rhs): -0.04931959509849548
16204 domains visited
current_vram/total_varm: 21.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.598508834838867

BaB round 10
batch: 4309
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 883] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.046654701232910156
10 lb beta sum: 0.16288109123706818, worst -0.06468084454536438
Time: prepare 0.1858    bound 0.6525    transfer 0.0418    finalize 0.2276    func 1.1642    
Accumulated time: func 4.7190    prepare 0.7570    bound 3.2367    transfer 0.1535    finalize 0.3611    
all_split False
======================Cut inference begins======================
max lb tensor(0.22031075) min lb tensor(-0.04601578)
Number of Verified Splits: 4811 of 8618
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 317.
#cuts 1-3: 19
#cuts 4-6: 246
#cuts 7-9: 52
#cuts >= 20: 0
BICCOS time: 1.426455020904541 
BICCOS Cumulative time: 4.842941522598267
Preprocessing time: 0.2779967784881592 Inference time: 0.8257555961608887 Add cuts time: 0.3098742961883545 Cut analysis time: 0.012828350067138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04602 (21), -0.04509 (21), -0.04431 (21), -0.04204 (20), -0.04157 (21), -0.04119 (21), -0.04092 (21), -0.04058 (21), -0.03999 (21), -0.03992 (21), -0.03967 (21), -0.03923 (21), -0.03916 (20), -0.03909 (21), -0.03851 (21), -0.03831 (21), -0.03808 (21), -0.03798 (21), -0.03720 (21), -0.03701 (20), 
Length of domains: 3807
Time: pickout 0.0837    decision 0.2411    set_bounds 0.3918    solve 1.1661    add 0.0257    
Accumulated time: pickout 0.2646    decision 1.5312    set_bounds 2.1615    solve 4.5654    add 0.2726    
Current (lb-rhs): -0.04601578414440155
20011 domains visited
Cumulative time: 13.996171951293945

BaB round 11
batch: 3807
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04262256622314453
10 lb beta sum: 0.17342247068881989, worst -0.09817005693912506
Time: prepare 0.1618    bound 0.5454    transfer 0.0378    finalize 0.0452    func 0.8451    
Accumulated time: func 5.5641    prepare 0.9191    bound 3.7821    transfer 0.1913    finalize 0.4063    
all_split False
======================Cut inference begins======================
max lb tensor(0.38837600) min lb tensor(-0.04202229)
Number of Verified Splits: 5284 of 7614
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 357.
#cuts 1-3: 25
#cuts 4-6: 294
#cuts 7-9: 38
#cuts >= 20: 0
BICCOS time: 1.4646809101104736 
BICCOS Cumulative time: 6.30762243270874
Preprocessing time: 0.24556875228881836 Inference time: 0.8995296955108643 Add cuts time: 0.3058755397796631 Cut analysis time: 0.01370692253112793
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04202 (22), -0.04111 (22), -0.04034 (22), -0.03875 (21), -0.03756 (22), -0.03690 (22), -0.03683 (22), -0.03657 (22), -0.03625 (22), -0.03601 (22), -0.03585 (21), -0.03571 (22), -0.03521 (22), -0.03467 (22), -0.03439 (22), -0.03397 (22), -0.03387 (22), -0.03364 (21), -0.03313 (22), -0.03260 (22), 
Length of domains: 2330
Time: pickout 0.0596    decision 0.3733    set_bounds 0.3545    solve 1.0532    add 0.0113    
Accumulated time: pickout 0.3243    decision 1.9045    set_bounds 2.5160    solve 5.6187    add 0.2838    
Current (lb-rhs): -0.04202228784561157
22341 domains visited
Cumulative time: 17.382123231887817

BaB round 12
batch: 2330
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03879547119140625
10 lb beta sum: 0.15849263966083527, worst -0.07462874054908752
Time: prepare 0.0983    bound 0.3620    transfer 0.0175    finalize 0.0249    func 0.5339    
Accumulated time: func 6.0981    prepare 1.0177    bound 4.1441    transfer 0.2088    finalize 0.4313    
all_split False
======================Cut inference begins======================
max lb tensor(0.30916268) min lb tensor(-0.03815465)
Number of Verified Splits: 2768 of 4660
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 264.
#cuts 1-3: 19
#cuts 4-6: 232
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.7736525535583496 
BICCOS Cumulative time: 7.08127498626709
Preprocessing time: 0.15214872360229492 Inference time: 0.47112584114074707 Add cuts time: 0.1411898136138916 Cut analysis time: 0.009188175201416016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03815 (23), -0.03734 (23), -0.03640 (23), -0.03474 (22), -0.03365 (23), -0.03309 (23), -0.03304 (23), -0.03268 (23), -0.03225 (23), -0.03186 (23), -0.03184 (22), -0.03131 (23), -0.03076 (23), -0.03022 (23), -0.02980 (23), -0.02969 (23), -0.02964 (22), -0.02916 (23), -0.02874 (23), -0.02863 (23), 
Length of domains: 1892
Time: pickout 0.0389    decision 0.1351    set_bounds 0.3666    solve 0.5349    add 0.0078    
Accumulated time: pickout 0.3632    decision 2.0396    set_bounds 2.8826    solve 6.1535    add 0.2916    
Current (lb-rhs): -0.03815464675426483
24233 domains visited
Cumulative time: 19.274539470672607

BaB round 13
batch: 1892
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] [/input-8, 493] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03573894500732422
10 lb beta sum: 0.16860245168209076, worst -0.047082990407943726
Time: prepare 0.0791    bound 0.2970    transfer 0.0199    finalize 0.0228    func 0.4432    
Accumulated time: func 6.5413    prepare 1.0970    bound 4.4412    transfer 0.2287    finalize 0.4540    
all_split False
======================Cut inference begins======================
max lb tensor(0.12272540) min lb tensor(-0.03510146)
Number of Verified Splits: 2742 of 3784
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 124.
#cuts 1-3: 31
#cuts 4-6: 91
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.6855278015136719 
BICCOS Cumulative time: 7.766802787780762
Preprocessing time: 0.11832690238952637 Inference time: 0.4747791290283203 Add cuts time: 0.08873939514160156 Cut analysis time: 0.003682374954223633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03510 (24), -0.03402 (24), -0.03353 (24), -0.03087 (24), -0.03079 (23), -0.03065 (24), -0.02999 (24), -0.02964 (24), -0.02891 (24), -0.02861 (24), -0.02856 (24), -0.02847 (24), -0.02799 (24), -0.02790 (23), -0.02659 (24), -0.02656 (24), -0.02648 (24), -0.02636 (24), -0.02624 (24), -0.02587 (24), 
Length of domains: 1042
Time: pickout 0.0376    decision 0.1116    set_bounds 0.3018    solve 0.4446    add 0.0055    
Accumulated time: pickout 0.4008    decision 2.1513    set_bounds 3.1844    solve 6.5981    add 0.2971    
Current (lb-rhs): -0.03510145843029022
25275 domains visited
Cumulative time: 20.892704963684082

BaB round 14
batch: 1042
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 1240] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03373146057128906
10 lb beta sum: 0.35218942165374756, worst -0.05602900683879852
Time: prepare 0.0422    bound 0.1810    transfer 0.0031    finalize 0.0115    func 0.2510    
Accumulated time: func 6.7923    prepare 1.1394    bound 4.6222    transfer 0.2318    finalize 0.4655    
all_split False
======================Cut inference begins======================
max lb tensor(0.45291048) min lb tensor(-0.03291705)
Number of Verified Splits: 1800 of 2084
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.39871740341186523 
BICCOS Cumulative time: 8.165520191192627
Preprocessing time: 0.06536006927490234 Inference time: 0.30468201637268066 Add cuts time: 0.028413772583007812 Cut analysis time: 0.00026154518127441406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03292 (25), -0.03182 (25), -0.03134 (25), -0.02848 (25), -0.02776 (25), -0.02744 (25), -0.02667 (25), -0.02637 (25), -0.02620 (25), -0.02575 (24), -0.02435 (25), -0.02344 (25), -0.02330 (25), -0.02280 (25), -0.02277 (24), -0.02230 (25), -0.02225 (25), -0.02121 (25), -0.02063 (24), -0.02052 (25), 
Length of domains: 284
Time: pickout 0.0207    decision 0.0661    set_bounds 0.2171    solve 0.2521    add 0.0043    
Accumulated time: pickout 0.4215    decision 2.2174    set_bounds 3.4015    solve 6.8502    add 0.3014    
Current (lb-rhs): -0.03291705250740051
25559 domains visited
Cumulative time: 21.86751651763916

BaB round 15
batch: 284
splitting decisions: 
split level 0: [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 885] [/input-8, 1097] [/input-8, 1097] [/input-8, 493] [/input-8, 493] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027240753173828125

all verified at 1th iter
Time: prepare 0.0114    bound 0.0163    transfer 0.0020    finalize 0.0027    func 0.0359    
Accumulated time: func 6.8282    prepare 1.1510    bound 4.6384    transfer 0.2337    finalize 0.4682    
all_split False
======================Cut inference begins======================
max lb tensor(0.05457954) min lb tensor(2.86102295e-06)
Number of Verified Splits: 568 of 568
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.017416954040527344 
BICCOS Cumulative time: 8.182937145233154
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0094    decision 0.0268    set_bounds 0.0244    solve 0.0367    add 0.0001    
Accumulated time: pickout 0.4310    decision 2.2442    set_bounds 3.4259    solve 6.8870    add 0.3015    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
25559 domains visited
Cumulative time: 21.985469341278076

Result: safe in 23.5648 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 230, 1, 686] with unstable size 229 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 686] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [229]; unstable size 229; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 229] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 229] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.50022173,  8.58374882,  0.05487365,  2.84900141,  1.87417746,
         -0.72468829,  3.40504503,  7.17037439,  7.46117973]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.62763786, -27.96693420, -18.82089806, -21.58105659, -18.18916893,
          -20.65969467, -17.92498779, -22.51766396, -26.59140778, -26.94355965]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26418114]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.05389786, -20.54568100, -25.38948441, -26.07571030, -24.92573357,
         -26.81814766, -25.31372643, -25.39832497, -22.18379402, -23.40080070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 595] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 232] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74438763, 2.89176798, 3.72229576, 2.51304674, 4.30712366, 2.80102062,
         3.10480404, 0.20504284, 1.77497363]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.32361412, -25.52174950, -20.63148117, -22.61431122, -22.40266609,
         -22.09627724, -23.98217392, -22.95088196, -26.26723480, -25.69747353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [912]; unstable size 912; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 912] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 912] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 912] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 239] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.74784970, 3.37162161, 1.17322946, 0.89480454, 0.68540329, 2.25614381,
         1.51441813, 4.23806047, 3.34960604]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0631 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 484] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 484] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 222] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.12594318,  2.36834145,  0.02151132, -0.42955136, -0.99394417,
         -0.44192934, -1.36477089,  4.78464127,  1.58999276]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.89224243, -20.05119324, -17.43051529, -16.67961121, -15.76606178,
          -16.74633598, -15.92820740, -16.27584839, -22.73025513, -19.33327484],
         [-21.89224243, -20.05119324, -17.43051529, -16.67961121, -15.76606178,
          -16.74633598, -15.92820740, -16.27584839, -22.73025513, -19.33327484]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.40376282, -0.50978661,  0.47048759, -0.34764099]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0430 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 399] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 399] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 175] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71335769,  3.37155771, -1.61985373, -0.57951546, -1.65425408,
         -0.81910729, -2.40787220,  3.42854548, -0.36425447]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766],
         [-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.88908386,  0.10182571, -0.86884308,  0.19662666, -1.55251503,
           0.98686600]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.06668091, -12.17250633, -18.19817734, -17.74991226, -18.22573662,
         -18.83922386, -18.43832207, -18.79791641, -13.75891685, -14.38429832]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 591] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 591] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.43584156, 4.09200811, 4.03862000, 4.51079702, 5.00953007, 4.46496391,
         5.03483009, 0.23301840, 1.42504883]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [859]; unstable size 859; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 859] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 859] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 859] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 247] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.60208189, -0.84271812, -2.06193995, -2.20308495, -2.22541571,
         -1.86848950, -1.36994243, -0.36857510, -1.56844473]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370],
         [-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.93114471,  1.52332878, -0.98018551, -1.20881271, -1.02444744,
          -0.72316647,  0.41845608,  1.75259781,  0.46578598]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0811 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 740] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 244] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.38111258,  5.21995258,  5.14613533,  3.91153622,  5.43957043,
          6.09781647,  3.61251211,  3.57682610, -0.52638078]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.39106178, -23.67284584, -30.69213867, -30.40574837, -29.33213806,
          -30.76441956, -31.73852158, -29.12598610, -28.38734436, -23.48725510]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18559074]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0473 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 669] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 669] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 240] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.66332340,  4.03361511,  0.93628335, -0.12254727,  0.23944283,
          1.05922604,  0.79270166,  7.63720131,  2.90536737]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.51282120, -22.28214264, -18.49987793, -16.76547241, -17.89261055,
          -16.77055550, -18.66166306, -18.61735344, -25.76009750, -20.99545097]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00508308]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 740] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 265] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.72773504,  3.26004648,  3.78023982,  3.84159470,  3.89679289,
          4.82130051,  3.72940302, -0.13638735,  0.71589267]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.32it/s]100%|██████████| 1/1 [00:00<00:00,  9.31it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.77746010, -17.05466080, -21.88848305, -22.15901375, -22.44706535,
          -22.50233269, -23.34392357, -22.66395569, -17.36938095, -18.43949699]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31472015]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1098 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.383888244628906
alpha/beta optimization time: 1.1824390888214111
initial alpha-crown bounds: tensor([[ 1.80881047,  3.35405684,  3.86240530,  3.93695259,  3.99371910,
          4.90125418,  3.85100222, -0.08674812,  0.76243514]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08674812316894531
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6674199104309
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.66737842559814
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.66735196113586
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6673321723938
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.66731357574463
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6672945022583
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.6672763824463
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.66725659370422
Verifying property 7 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08674812]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
        -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08674812]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 740
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 1015
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010323524475097656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08674860000610352
10 lb beta sum: 0.0, worst -0.08675003051757812
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 64] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 42] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 69] 
split level 9: [/input-12, 12] 
split level 10: [/input-8, 1973] 
split level 11: [/input-12, 61] 
split level 12: [/input-8, 1392] 
split level 13: [/input-8, 940] 
split level 14: [/input-8, 1971] 
split level 15: [/input-8, 717] 
split level 16: [/input-8, 1490] 
split level 17: [/input-8, 1641] 
split level 18: [/input-8, 821] 
split level 19: [/input-8, 746] 
split level 20: [/input, 887] 
split level 21: [/input-8, 1704] 
split level 22: [/input-8, 1697] 
split level 23: [/input-8, 1974] 
split level 24: [/input-8, 923] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 757] 
split level 27: [/input, 2698] 
split level 28: [/input-8, 916] 
split level 29: [/input-8, 337] 
split level 30: [/input-8, 758] 
split level 31: [/input-8, 1333] 
split level 32: [/input-8, 1649] 
split level 33: [/input-8, 1505] 
split level 34: [/input-8, 825] 
split level 35: [/input, 3578] 
split level 36: [/input-8, 827] 
split level 37: [/input-8, 1593] 
split level 38: [/input, 1218] 
split level 39: [/input-8, 355] 
split level 40: [/input-8, 755] 
split level 41: [/input-8, 934] 
split level 42: [/input-8, 742] 
split level 43: [/input-8, 1677] 
split level 44: [/input-8, 1390] 
split level 45: [/input, 4035] 
split level 46: [/input-8, 1184] 
split level 47: [/input, 3449] 
split level 48: [/input-8, 715] 
split level 49: [/input, 2762] 
split level 50: [/input, 661] 
split level 51: [/input, 3448] 
split level 52: [/input-8, 330] 
split level 53: [/input-8, 1975] 
split level 54: [/input, 886] 
split level 55: [/input-8, 415] 
split level 56: [/input-8, 331] 
split level 57: [/input, 2758] 
split level 58: [/input-8, 1594] 
split level 59: [/input-8, 589] 
split level 60: [/input-8, 250] 
split level 61: [/input-8, 1686] 
split level 62: [/input, 1015] 
split level 63: [/input-8, 580] 
split level 64: [/input-8, 1678] 
split level 65: [/input, 326] 
split level 66: [/input, 949] 
split level 67: [/input, 1016] 
split level 68: [/input-8, 251] 
split level 69: [/input, 1014] 
split level 70: [/input-8, 1655] 
split level 71: [/input-8, 1176] 
split level 72: [/input, 1217] 
split level 73: [/input-8, 1027] 
split level 74: [/input, 2408] 
split level 75: [/input-8, 1688] 
split level 76: [/input-8, 753] 
split level 77: [/input, 2389] 
split level 78: [/input-8, 413] 
split level 79: [/input-8, 1987] 
split level 80: [/input, 2151] 
split level 81: [/input-8, 732] 
split level 82: [/input, 2152] 
split level 83: [/input, 1019] 
split level 84: [/input, 3572] 
split level 85: [/input, 679] 
split level 86: [/input, 1012] 
split level 87: [/input, 2136] 
split level 88: [/input, 4012] 
split level 89: [/input, 667] 
split level 90: [/input, 2425] 
split level 91: [/input-8, 1707] 
split level 92: [/input-8, 241] 
split level 93: [/input-8, 756] 
split level 94: [/input-8, 1647] 
split level 95: [/input, 1085] 
split level 96: [/input-8, 1034] 
split level 97: [/input, 885] 
split level 98: [/input, 856] 
split level 99: [/input, 666] 
split level 100: [/input, 2153] 
split level 101: [/input, 2150] 
split level 102: [/input-8, 838] 
split level 103: [/input-8, 254] 
split level 104: [/input, 2407] 
split level 105: [/input, 681] 
split level 106: [/input, 1228] 
split level 107: [/input, 1278] 
split level 108: [/input, 1469] 
split level 109: [/input-8, 819] 
split level 110: [/input, 346] 
split level 111: [/input, 730] 
split level 112: [/input, 3194] 
split level 113: [/input, 2555] 
split level 114: [/input, 874] 
split level 115: [/input, 869] 
split level 116: [/input, 1260] 
split level 117: [/input, 677] 
split level 118: [/input-8, 246] 
split level 119: [/input, 4039] 
split level 120: [/input, 2137] 
split level 121: [/input-8, 24] 
split level 122: [/input, 1102] 
split level 123: [/input, 2405] 
split level 124: [/input, 682] 
split level 125: [/input-8, 1381] 
split level 126: [/input, 1453] 
split level 127: [/input, 2749] 
split level 128: [/input, 2406] 
split level 129: [/input-8, 1663] 
split level 130: [/input, 2553] 
split level 131: [/input, 193] 
split level 132: [/input, 2409] 
split level 133: [/input-8, 406] 
split level 134: [/input, 2149] 
split level 135: [/input, 1250] 
split level 136: [/input-8, 6] 
split level 137: [/input, 3195] 
split level 138: [/input, 2549] 
split level 139: [/input, 116] 
split level 140: [/input, 2931] 
split level 141: [/input, 2550] 
split level 142: [/input-8, 1098] 
split level 143: [/input, 2102] 
split level 144: [/input, 1266] 
split level 145: [/input, 2133] 
split level 146: [/input, 1006] 
split level 147: [/input, 3445] 
split level 148: [/input, 854] 
split level 149: [/input, 2932] 
split level 150: [/input, 1045] 
split level 151: [/input, 372] 
split level 152: [/input-8, 752] 
split level 153: [/input, 2118] 
split level 154: [/input, 2376] 
split level 155: [/input, 2404] 
split level 156: [/input-8, 958] 
split level 157: [/input, 2884] 
split level 158: [/input, 1245] 
split level 159: [/input, 2552] 
split level 160: [/input, 2551] 
split level 161: [/input-8, 1986] 
split level 162: [/input, 728] 
split level 163: [/input, 678] 
split level 164: [/input, 1244] 
split level 165: [/input, 2216] 
split level 166: [/input, 2419] 
split level 167: [/input-8, 399] 
split level 168: [/input, 2296] 
split level 169: [/input-8, 1613] 
split level 170: [/input, 2295] 
split level 171: [/input, 2867] 
split level 172: [/input, 727] 
split level 173: [/input, 329] 
split level 174: [/input, 857] 
split level 175: [/input, 1058] 
split level 176: [/input, 2784] 
split level 177: [/input, 1676] 
split level 178: [/input, 209] 
split level 179: [/input, 2010] 
split level 180: [/input, 1277] 
split level 181: [/input, 1457] 
split level 182: [/input, 115] 
split level 183: [/input, 3495] 
split level 184: [/input, 2768] 
split level 185: [/input, 900] 
split level 186: [/input-8, 1158] 
split level 187: [/input, 852] 
split level 188: [/input, 1105] 
split level 189: [/input, 2171] 
split level 190: [/input, 67] 
split level 191: [/input, 1133] 
split level 192: [/input, 2012] 
split level 193: [/input, 2132] 
split level 194: [/input-8, 7] 
split level 195: [/input, 2298] 
split level 196: [/input, 1134] 
split level 197: [/input, 3869] 
split level 198: [/input, 2545] 
split level 199: [/input, 1216] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0867152214050293
10 lb beta sum: 0.0, worst -0.08671236038208008
Time: prepare 0.0115    bound 0.0954    transfer 0.0027    finalize 0.0032    func 0.1154    
Accumulated time: func 0.1676    prepare 0.0215    bound 0.1472    transfer 0.0028    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.35328722) min lb tensor(-0.08670855)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.010866880416870117 
BICCOS Cumulative time: 0.010866880416870117
Preprocessing time: 0.010021209716796875 Inference time: 0.0003783702850341797 Add cuts time: 0.00016307830810546875 Cut analysis time: 0.00030422210693359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07826 (1), -0.07810 (1), -0.07780 (1), -0.07775 (1), -0.07746 (1), -0.07703 (1), -0.07690 (1), -0.07689 (1), -0.07678 (1), -0.07633 (1), -0.07632 (1), -0.07620 (1), -0.07588 (1), -0.07571 (1), -0.07553 (1), -0.07548 (1), -0.07547 (1), -0.07512 (1), -0.07476 (1), -0.07432 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5109    set_bounds 0.0089    solve 0.1155    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5109    set_bounds 0.0089    solve 0.1155    add 0.0702    
Current (lb-rhs): -0.0782618522644043
50 domains visited
Cumulative time: 0.7739882469177246

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 64] [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 42] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06420040130615234

all verified at 1th iter
Time: prepare 0.0074    bound 0.0117    transfer 0.0007    finalize 0.0025    func 0.0248    
Accumulated time: func 0.1924    prepare 0.0291    bound 0.1589    transfer 0.0035    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.16282099) min lb tensor(0.00339031)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03449416160583496 
BICCOS Cumulative time: 0.04536104202270508
Preprocessing time: 0.011723518371582031 Inference time: 0.014028072357177734 Add cuts time: 0.008558273315429688 Cut analysis time: 0.0001842975616455078
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0222    set_bounds 0.0117    solve 0.0249    add 0.0150    
Accumulated time: pickout 0.0015    decision 0.5331    set_bounds 0.0205    solve 0.1403    add 0.0852    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.29314646e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.34304091e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.08587965e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.34301230e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017581939697265625

all verified at 1th iter
Time: prepare 0.0003    bound 0.0098    transfer 0.0001    finalize 0.0001    func 0.0104    
Accumulated time: func 0.2028    prepare 0.0294    bound 0.1687    transfer 0.0036    finalize 0.0059    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.578378200531
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4217 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 511] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 511] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 148] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.11264563,  7.84995270,  2.51627040,  2.42221284,  2.71285629,
          2.42410803,  5.54274893,  0.54273689,  7.53125095]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
          -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66014290]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0570 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 545] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 545] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.09797287,  0.63166380,  0.38092279,  0.26649189,  0.20289612,
          0.00656414,  2.20104122,  2.04292059,  2.05919981]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.34124565, -27.52548599, -29.41050339, -29.07751274, -29.21006012,
          -29.12439346, -28.47667313, -31.67535019, -30.41997719, -30.50797653]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18424034]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0425 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 473] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 473] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 261] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13220143,  5.32813597, -1.68543768,  0.95246232, -1.03167820,
         -0.07594633,  0.28766227,  5.26238585,  4.65756130]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825],
         [-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36754799,  0.32431984,  1.10809326]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0434 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1135]; unstable size 1135; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 418, 1, 1135] with unstable size 417 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1135] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1135] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [417]; unstable size 417; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 417] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.41564417,  4.65418434,  0.18066597, -0.18956995,  0.62921119,
         -0.03981146,  1.17113948,  2.01148963,  3.41381025]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.83646393, -22.39689064, -14.86150932, -16.11657333, -15.43437386,
          -16.66946793, -16.04981232, -17.15288162, -19.10764885, -20.77401161],
         [-17.83646393, -22.39689064, -14.86150932, -16.11657333, -15.43437386,
          -16.66946793, -16.04981232, -17.15288162, -19.10764885, -20.77401161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.57286453, 1.18830299]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1158 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.51242733001709
alpha/beta optimization time: 1.1941571235656738
initial alpha-crown bounds: tensor([[ 1.54290438,  4.87704659,  0.28550068, -0.07817411,  0.74323392,
          0.05855012,  1.29010940,  2.20426631,  3.58898973]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07817411422729492
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64681124687195
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6467707157135
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64674472808838
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.64672470092773
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07817411]], device='cuda:0') need to verify.
Model prediction is: tensor([-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
        -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07817411]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1135
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 400
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1562
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010156631469726562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07817316055297852
10 lb beta sum: 0.0, worst -0.07818275690078735
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 14] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 55] 
split level 9: [/input-8, 173] 
split level 10: [/input-8, 1186] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 2018] 
split level 13: [/input-8, 163] 
split level 14: [/input-8, 1187] 
split level 15: [/input-8, 1069] 
split level 16: [/input-8, 164] 
split level 17: [/input-8, 2010] 
split level 18: [/input-8, 1178] 
split level 19: [/input-8, 1070] 
split level 20: [/input-8, 1378] 
split level 21: [/input-8, 2025] 
split level 22: [/input-8, 2009] 
split level 23: [/input-8, 132] 
split level 24: [/input-8, 141] 
split level 25: [/input-8, 874] 
split level 26: [/input-8, 877] 
split level 27: [/input-8, 130] 
split level 28: [/input-8, 1185] 
split level 29: [/input-8, 156] 
split level 30: [/input, 631] 
split level 31: [/input-8, 1361] 
split level 32: [/input-8, 869] 
split level 33: [/input, 2798] 
split level 34: [/input-12, 35] 
split level 35: [/input-8, 1370] 
split level 36: [/input, 2781] 
split level 37: [/input-8, 1386] 
split level 38: [/input-8, 1268] 
split level 39: [/input-8, 878] 
split level 40: [/input-8, 2019] 
split level 41: [/input-8, 1382] 
split level 42: [/input-8, 906] 
split level 43: [/input-8, 876] 
split level 44: [/input-8, 33] 
split level 45: [/input, 823] 
split level 46: [/input-8, 866] 
split level 47: [/input-8, 1379] 
split level 48: [/input, 3913] 
split level 49: [/input-8, 865] 
split level 50: [/input-8, 1383] 
split level 51: [/input, 3164] 
split level 52: [/input-8, 1390] 
split level 53: [/input-8, 189] 
split level 54: [/input-8, 1179] 
split level 55: [/input-8, 291] 
split level 56: [/input, 3147] 
split level 57: [/input-8, 857] 
split level 58: [/input-8, 1385] 
split level 59: [/input-8, 1251] 
split level 60: [/input-8, 884] 
split level 61: [/input, 3197] 
split level 62: [/input, 825] 
split level 63: [/input-8, 1253] 
split level 64: [/input, 1345] 
split level 65: [/input-8, 2011] 
split level 66: [/input-8, 868] 
split level 67: [/input-8, 1763] 
split level 68: [/input-8, 362] 
split level 69: [/input-8, 1391] 
split level 70: [/input-8, 219] 
split level 71: [/input-8, 2020] 
split level 72: [/input-8, 34] 
split level 73: [/input-8, 881] 
split level 74: [/input-8, 851] 
split level 75: [/input-8, 32] 
split level 76: [/input-8, 290] 
split level 77: [/input-8, 1375] 
split level 78: [/input, 824] 
split level 79: [/input, 826] 
split level 80: [/input, 2834] 
split level 81: [/input, 2763] 
split level 82: [/input, 954] 
split level 83: [/input-8, 1561] 
split level 84: [/input-8, 1269] 
split level 85: [/input, 3277] 
split level 86: [/input-8, 1078] 
split level 87: [/input-8, 1748] 
split level 88: [/input-8, 1396] 
split level 89: [/input, 2669] 
split level 90: [/input, 3279] 
split level 91: [/input, 2765] 
split level 92: [/input, 3097] 
split level 93: [/input-8, 867] 
split level 94: [/input-8, 216] 
split level 95: [/input-8, 210] 
split level 96: [/input-8, 323] 
split level 97: [/input-8, 1358] 
split level 98: [/input-8, 217] 
split level 99: [/input, 2779] 
split level 100: [/input-8, 220] 
split level 101: [/input-8, 862] 
split level 102: [/input, 2634] 
split level 103: [/input, 2635] 
split level 104: [/input-8, 218] 
split level 105: [/input, 807] 
split level 106: [/input, 3295] 
split level 107: [/input, 2780] 
split level 108: [/input-8, 1177] 
split level 109: [/input, 3366] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 883] 
split level 112: [/input, 3323] 
split level 113: [/input, 3269] 
split level 114: [/input, 2818] 
split level 115: [/input, 839] 
split level 116: [/input-8, 1233] 
split level 117: [/input, 2652] 
split level 118: [/input, 2585] 
split level 119: [/input-12, 43] 
split level 120: [/input-8, 820] 
split level 121: [/input-8, 1347] 
split level 122: [/input, 2685] 
split level 123: [/input-8, 1562] 
split level 124: [/input-8, 886] 
split level 125: [/input, 2686] 
split level 126: [/input, 842] 
split level 127: [/input-8, 201] 
split level 128: [/input, 1927] 
split level 129: [/input, 1911] 
split level 130: [/input, 923] 
split level 131: [/input-8, 1181] 
split level 132: [/input-8, 1373] 
split level 133: [/input, 956] 
split level 134: [/input-8, 599] 
split level 135: [/input, 775] 
split level 136: [/input, 907] 
split level 137: [/input, 2921] 
split level 138: [/input-8, 1514] 
split level 139: [/input, 3270] 
split level 140: [/input, 679] 
split level 141: [/input-8, 1765] 
split level 142: [/input, 792] 
split level 143: [/input, 67] 
split level 144: [/input-8, 604] 
split level 145: [/input, 2087] 
split level 146: [/input, 2653] 
split level 147: [/input, 105] 
split level 148: [/input-8, 1189] 
split level 149: [/input, 581] 
split level 150: [/input, 805] 
split level 151: [/input, 3381] 
split level 152: [/input, 2839] 
split level 153: [/input-8, 1995] 
split level 154: [/input-8, 843] 
split level 155: [/input, 3383] 
split level 156: [/input, 937] 
split level 157: [/input, 840] 
split level 158: [/input-8, 1252] 
split level 159: [/input-8, 1750] 
split level 160: [/input, 2748] 
split level 161: [/input, 986] 
split level 162: [/input, 2870] 
split level 163: [/input, 972] 
split level 164: [/input-8, 863] 
split level 165: [/input, 3081] 
split level 166: [/input, 939] 
split level 167: [/input, 1405] 
split level 168: [/input, 3384] 
split level 169: [/input-8, 208] 
split level 170: [/input, 791] 
split level 171: [/input-8, 238] 
split level 172: [/input, 315] 
split level 173: [/input, 2665] 
split level 174: [/input, 1356] 
split level 175: [/input-8, 1384] 
split level 176: [/input-8, 887] 
split level 177: [/input, 113] 
split level 178: [/input, 3043] 
split level 179: [/input, 659] 
split level 180: [/input-8, 810] 
split level 181: [/input, 77] 
split level 182: [/input, 3096] 
split level 183: [/input, 87] 
split level 184: [/input-8, 792] 
split level 185: [/input, 3468] 
split level 186: [/input-8, 242] 
split level 187: [/input-8, 1495] 
split level 188: [/input, 801] 
split level 189: [/input, 116] 
split level 190: [/input, 178] 
split level 191: [/input-8, 1349] 
split level 192: [/input, 820] 
split level 193: [/input-8, 1773] 
split level 194: [/input-8, 895] 
split level 195: [/input-8, 858] 
split level 196: [/input, 2126] 
split level 197: [/input, 450] 
split level 198: [/input-8, 364] 
split level 199: [/input, 177] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07807791233062744
10 lb beta sum: 0.0, worst -0.07808899879455566
Time: prepare 0.0114    bound 0.0963    transfer 0.0018    finalize 0.0029    func 0.1151    
Accumulated time: func 0.1678    prepare 0.0213    bound 0.1485    transfer 0.0019    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.16974843) min lb tensor(-0.07807463)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.010763406753540039 
BICCOS Cumulative time: 0.010763406753540039
Preprocessing time: 0.010027408599853516 Inference time: 0.0003478527069091797 Add cuts time: 0.00011944770812988281 Cut analysis time: 0.00026869773864746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06938 (1), -0.06922 (1), -0.06872 (1), -0.06862 (1), -0.06856 (1), -0.06854 (1), -0.06785 (1), -0.06722 (1), -0.06717 (1), -0.06715 (1), -0.06694 (1), -0.06679 (1), -0.06658 (1), -0.06618 (1), -0.06564 (1), -0.06564 (1), -0.06563 (1), -0.06492 (1), -0.06462 (1), -0.06376 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5086    set_bounds 0.0092    solve 0.1152    add 0.0717    
Accumulated time: pickout 0.0003    decision 0.5086    set_bounds 0.0092    solve 0.1152    add 0.0717    
Current (lb-rhs): -0.06938165426254272
50 domains visited
Cumulative time: 0.7742791175842285

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 59] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] 
split level 2: [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 67] [/input-12, 4] 
split level 3: [/input-12, 67] [/input-12, 97] [/input-12, 67] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03169769048690796

all verified at 1th iter
Time: prepare 0.0072    bound 0.0118    transfer 0.0007    finalize 0.0025    func 0.0247    
Accumulated time: func 0.1925    prepare 0.0287    bound 0.1603    transfer 0.0027    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.24257207) min lb tensor(0.00017685)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03511691093444824 
BICCOS Cumulative time: 0.04588031768798828
Preprocessing time: 0.011847972869873047 Inference time: 0.014173269271850586 Add cuts time: 0.008907556533813477 Cut analysis time: 0.0001881122589111328
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0122    solve 0.0248    add 0.0149    
Accumulated time: pickout 0.0014    decision 0.5280    set_bounds 0.0214    solve 0.1400    add 0.0866    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.50047266e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  5.85424751e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.44831190e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  5.94203323e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03265535831451416

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.1974    prepare 0.0291    bound 0.1645    transfer 0.0028    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.57571029663086
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.57563972473145
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.57561659812927
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.57559633255005
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.57557725906372
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4245 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [821]; unstable size 821; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 821] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 821] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 821] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 267] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.66440070,  3.63743877,  1.26127326,  0.04986423, -0.05376536,
          0.98363960,  0.99622244,  2.72314191,  4.88065434]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.19it/s]100%|██████████| 1/1 [00:00<00:00,  9.18it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.14386940, -22.24015808, -19.51546097, -17.41148949, -17.76541138,
          -17.10868263, -19.04941940, -19.17812157, -21.50530815, -23.38755035]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.65672874]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1115 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 3th iter
best_l after optimization: 16.604549407958984
alpha/beta optimization time: 0.0431058406829834
initial alpha-crown bounds: tensor([[1.72636867e+00, 3.70138025e+00, 1.30631161e+00, 6.20777011e-02,
         6.06656075e-04, 1.02092099e+00, 1.04711556e+00, 2.80543828e+00,
         4.93432808e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.0006066560745239258
verified with init bound!
Result: safe-incomplete in 0.2235 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1104]; unstable size 1104; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 1104] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1104] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1104] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 265] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.64230919,  2.91880083, -0.80557775,  0.38735637, -0.40144229,
          1.09796870,  1.71821165,  2.96996212,  2.98997855]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.88836288, -15.24282074,  -9.95007992, -11.49615860, -10.75760651,
          -12.33977604, -10.26209450, -13.06920719, -14.77008438, -15.26176357],
         [-13.88836288, -15.24282074,  -9.95007992, -11.49615860, -10.75760651,
          -12.33977604, -10.26209450, -13.06920719, -14.77008438, -15.26176357]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31201458,  0.49551201]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0489 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 775] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 775] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 275] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.33888245,  3.17009950, -0.78345788, -1.16919303, -0.99560732,
          1.16705453, -0.86630476,  3.00003290,  1.93420291]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940],
         [-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36905575,  0.01217651, -0.58288097,  1.00409698]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0415 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1007]; unstable size 1007; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 1007] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 1007] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1007] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 260] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62466067,  2.95583367,  3.49480081,  5.00074434,  3.80081701,
          5.96756935,  6.38276482,  5.76929712,  2.46701241]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-31.95611572, -35.97737122, -36.92116928, -38.44849014, -37.25425720,
          -39.54434204, -39.96480942, -39.30963898, -32.26206589, -35.37592697]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.30595016]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0053 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0497 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 744] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 744] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 272] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79987323,  5.21834898, -1.55336499, -0.28184438, -0.22590351,
          0.73269224,  0.47210920,  3.03185964,  3.45756841]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571],
         [-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44354248,  0.93865776,  1.13033295]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0377 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.22183990, -23.66624069, -16.29309082, -19.27029610, -15.39398766,
         -19.13426781, -17.66785431, -19.55938721, -21.54466057, -23.50271797]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1067]; unstable size 1067; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 1067] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1067] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1067] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 266] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72265244, 6.91143274, 0.00909677, 2.97993946, 2.78059340, 0.93534529,
         3.08999944, 4.73980522, 6.88012981]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0281 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [905]; unstable size 905; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 307, 1, 905] with unstable size 306 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 905] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 905] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [306]; unstable size 306; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 306] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 306] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86118603,  2.95259452, -0.24725604,  1.06830430,  0.89491725,
          1.90242493,  0.80980384,  3.26966023,  2.34717965]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.16it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.15029907, -24.19763947, -19.80143929, -20.63853264, -21.10856056,
          -19.26048470, -22.10736084, -21.32276344, -24.41694641, -23.30249786]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.54095459]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1117 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.521695137023926
alpha/beta optimization time: 1.1927587985992432
initial alpha-crown bounds: tensor([[ 1.94473195,  3.04443884, -0.17711711,  1.08993304,  0.95973802,
          1.94066226,  0.88277930,  3.39136600,  2.44516373]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.17711710929870605
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.65816164016724
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6581220626831
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65809059143066
Verifying property 2 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17711711]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
        -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17711711]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 905
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 297
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1224
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17711687088012695
10 lb beta sum: 0.0, worst -0.1771221160888672
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 7] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 50] 
split level 8: [/input-8, 421] 
split level 9: [/input-8, 403] 
split level 10: [/input-8, 218] 
split level 11: [/input-8, 1709] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 1651] 
split level 14: [/input-8, 414] 
split level 15: [/input-8, 1636] 
split level 16: [/input-8, 220] 
split level 17: [/input-8, 1659] 
split level 18: [/input-8, 400] 
split level 19: [/input-8, 1684] 
split level 20: [/input-8, 410] 
split level 21: [/input-8, 725] 
split level 22: [/input-8, 1644] 
split level 23: [/input-8, 1971] 
split level 24: [/input-8, 232] 
split level 25: [/input-8, 1661] 
split level 26: [/input-8, 747] 
split level 27: [/input-8, 406] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1716] 
split level 30: [/input-8, 1949] 
split level 31: [/input-8, 217] 
split level 32: [/input-8, 233] 
split level 33: [/input, 1401] 
split level 34: [/input-8, 1972] 
split level 35: [/input-8, 930] 
split level 36: [/input-8, 415] 
split level 37: [/input-8, 430] 
split level 38: [/input-8, 210] 
split level 39: [/input-8, 1206] 
split level 40: [/input-12, 6] 
split level 41: [/input-8, 240] 
split level 42: [/input-8, 1365] 
split level 43: [/input-8, 225] 
split level 44: [/input-8, 408] 
split level 45: [/input-8, 1332] 
split level 46: [/input-8, 431] 
split level 47: [/input-8, 1388] 
split level 48: [/input-8, 423] 
split level 49: [/input-8, 980] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 241] 
split level 52: [/input-8, 202] 
split level 53: [/input-8, 1957] 
split level 54: [/input-8, 224] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 1198] 
split level 58: [/input-8, 1396] 
split level 59: [/input-8, 1650] 
split level 60: [/input-8, 248] 
split level 61: [/input-8, 1707] 
split level 62: [/input, 1385] 
split level 63: [/input-8, 1404] 
split level 64: [/input-8, 292] 
split level 65: [/input-8, 416] 
split level 66: [/input-8, 1395] 
split level 67: [/input-8, 1669] 
split level 68: [/input-8, 230] 
split level 69: [/input-8, 1973] 
split level 70: [/input-8, 309] 
split level 71: [/input-8, 216] 
split level 72: [/input-8, 1525] 
split level 73: [/input, 3557] 
split level 74: [/input-8, 1325] 
split level 75: [/input-8, 227] 
split level 76: [/input-8, 1658] 
split level 77: [/input-8, 212] 
split level 78: [/input-8, 236] 
split level 79: [/input-8, 271] 
split level 80: [/input-8, 1519] 
split level 81: [/input-8, 1978] 
split level 82: [/input-8, 16] 
split level 83: [/input-8, 249] 
split level 84: [/input-8, 214] 
split level 85: [/input-8, 1782] 
split level 86: [/input-8, 1961] 
split level 87: [/input-8, 811] 
split level 88: [/input-8, 963] 
split level 89: [/input-8, 209] 
split level 90: [/input-8, 1648] 
split level 91: [/input-8, 285] 
split level 92: [/input-8, 290] 
split level 93: [/input-8, 203] 
split level 94: [/input, 1406] 
split level 95: [/input-8, 244] 
split level 96: [/input, 2983] 
split level 97: [/input-8, 1100] 
split level 98: [/input-8, 1386] 
split level 99: [/input-8, 439] 
split level 100: [/input-8, 828] 
split level 101: [/input-8, 1497] 
split level 102: [/input-8, 912] 
split level 103: [/input-12, 56] 
split level 104: [/input, 2014] 
split level 105: [/input-8, 1621] 
split level 106: [/input-8, 286] 
split level 107: [/input, 1997] 
split level 108: [/input-8, 829] 
split level 109: [/input, 2013] 
split level 110: [/input, 2622] 
split level 111: [/input, 1998] 
split level 112: [/input, 1965] 
split level 113: [/input, 507] 
split level 114: [/input, 1332] 
split level 115: [/input, 2030] 
split level 116: [/input, 1421] 
split level 117: [/input-8, 1230] 
split level 118: [/input, 2684] 
split level 119: [/input-8, 1335] 
split level 120: [/input, 153] 
split level 121: [/input, 2869] 
split level 122: [/input, 1022] 
split level 123: [/input-8, 197] 
split level 124: [/input, 1980] 
split level 125: [/input, 1966] 
split level 126: [/input-8, 1690] 
split level 127: [/input-8, 196] 
split level 128: [/input-8, 397] 
split level 129: [/input-8, 946] 
split level 130: [/input, 509] 
split level 131: [/input, 68] 
split level 132: [/input, 124] 
split level 133: [/input, 2029] 
split level 134: [/input-8, 964] 
split level 135: [/input, 1996] 
split level 136: [/input, 2046] 
split level 137: [/input, 1434] 
split level 138: [/input, 1964] 
split level 139: [/input, 1316] 
split level 140: [/input-8, 1656] 
split level 141: [/input, 141] 
split level 142: [/input-8, 208] 
split level 143: [/input-8, 962] 
split level 144: [/input, 2666] 
split level 145: [/input, 1982] 
split level 146: [/input, 3150] 
split level 147: [/input, 117] 
split level 148: [/input, 1981] 
split level 149: [/input, 2028] 
split level 150: [/input, 2034] 
split level 151: [/input, 109] 
split level 152: [/input, 81] 
split level 153: [/input, 3406] 
split level 154: [/input, 65] 
split level 155: [/input, 2897] 
split level 156: [/input, 1732] 
split level 157: [/input, 1373] 
split level 158: [/input-8, 394] 
split level 159: [/input, 1006] 
split level 160: [/input, 142] 
split level 161: [/input, 1812] 
split level 162: [/input-8, 1262] 
split level 163: [/input, 2649] 
split level 164: [/input-8, 586] 
split level 165: [/input, 2673] 
split level 166: [/input, 98] 
split level 167: [/input, 122] 
split level 168: [/input, 113] 
split level 169: [/input, 2913] 
split level 170: [/input, 21] 
split level 171: [/input, 2012] 
split level 172: [/input, 731] 
split level 173: [/input, 2278] 
split level 174: [/input, 2008] 
split level 175: [/input, 123] 
split level 176: [/input, 1017] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 37] 
split level 179: [/input, 2644] 
split level 180: [/input-8, 636] 
split level 181: [/input, 790] 
split level 182: [/input-8, 1518] 
split level 183: [/input-8, 1552] 
split level 184: [/input, 2589] 
split level 185: [/input-8, 1640] 
split level 186: [/input, 84] 
split level 187: [/input, 3578] 
split level 188: [/input, 635] 
split level 189: [/input, 2045] 
split level 190: [/input, 23] 
split level 191: [/input, 36] 
split level 192: [/input, 2945] 
split level 193: [/input, 1979] 
split level 194: [/input, 2898] 
split level 195: [/input, 2753] 
split level 196: [/input, 2946] 
split level 197: [/input, 1723] 
split level 198: [/input, 2926] 
split level 199: [/input, 1328] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1770343780517578
10 lb beta sum: 0.0, worst -0.17703580856323242
Time: prepare 0.0115    bound 0.0964    transfer 0.0019    finalize 0.0033    func 0.1156    
Accumulated time: func 0.1682    prepare 0.0215    bound 0.1486    transfer 0.0020    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.24898648) min lb tensor(-0.17703032)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010829925537109375 
BICCOS Cumulative time: 0.010829925537109375
Preprocessing time: 0.009983062744140625 Inference time: 0.00018906593322753906 Add cuts time: 7.724761962890625e-05 Cut analysis time: 0.0005805492401123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16366 (1), -0.16340 (1), -0.16283 (1), -0.16248 (1), -0.16180 (1), -0.16066 (1), -0.16018 (1), -0.16015 (1), -0.15940 (1), -0.15937 (1), -0.15912 (1), -0.15893 (1), -0.15881 (1), -0.15875 (1), -0.15875 (1), -0.15862 (1), -0.15845 (1), -0.15827 (1), -0.15796 (1), -0.15775 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5079    set_bounds 0.0090    solve 0.1157    add 0.0935    
Accumulated time: pickout 0.0004    decision 0.5079    set_bounds 0.0090    solve 0.1157    add 0.0935    
Current (lb-rhs): -0.16365718841552734
50 domains visited
Cumulative time: 0.805492639541626

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13065481185913086

all verified at 6th iter
Time: prepare 0.0072    bound 0.0403    transfer 0.0007    finalize 0.0024    func 0.0532    
Accumulated time: func 0.2214    prepare 0.0289    bound 0.1889    transfer 0.0027    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.38207322) min lb tensor(0.00023198)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03441667556762695 
BICCOS Cumulative time: 0.04524660110473633
Preprocessing time: 0.01171565055847168 Inference time: 0.014198064804077148 Add cuts time: 0.008312702178955078 Cut analysis time: 0.00019025802612304688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0122    solve 0.0532    add 0.0150    
Accumulated time: pickout 0.0015    decision 0.5274    set_bounds 0.0212    solve 0.1690    add 0.1084    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.32576749e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.02130601e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.29802987e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.03495786e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03467535972595215

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.2263    prepare 0.0293    bound 0.1931    transfer 0.0028    finalize 0.0060    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.52731204032898
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.52724266052246
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.52722024917603
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.52720093727112
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.52718114852905
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.52716279029846
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4732 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [811]; unstable size 811; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 309, 1, 811] with unstable size 308 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 811] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 811] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [308]; unstable size 308; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 308] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 308] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.88940167,  0.17124343, -2.58539438, -1.63983178, -1.31377959,
         -1.55795705, -0.86024141, -1.02569306, -0.27762103]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509],
         [-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14750862, -1.15558243, -0.48525810,  0.03646278, -0.40989113,
           0.63431549,  1.22633553,  1.84070015]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [794]; unstable size 794; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 794] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 794] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 794] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 220] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78699064,  3.17528486,  2.83466101,  2.43643284,  3.92167902,
          3.64071131,  3.01096869, -1.71908140,  0.30822122]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
          -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21599770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0511 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.65453911, -28.29750824, -25.45104980, -28.11194038, -25.15310860,
         -28.19610023, -28.02035522, -26.93565750, -23.93723679, -27.98169518]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 701] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 701] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 240] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.39394474, 1.70091999, 3.99040103, 1.13504910, 3.87649202, 3.90128398,
         2.66181898, 0.08498126, 3.97777319]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0424 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 364, 1, 800] with unstable size 363 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 800] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [363]; unstable size 363; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 363] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 363] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.67310345,  1.51413107, -0.13763905, -0.79897380,  0.29746610,
         -1.22556412,  0.01225764,  2.61003304,  1.46175075]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174],
         [-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.02457714,  0.47579861, -0.03202343]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0556 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.79030228, -30.41434669, -27.64798355, -28.61847115, -28.48152161,
         -29.57408333, -29.43395233, -30.51341820, -29.47771645, -30.12065697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 497] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 497] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 139] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.35675907, 3.17424965, 3.96514463, 3.89233875, 4.75903225, 4.93405867,
         5.60336399, 4.77322054, 5.42915201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0305 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93199348, -23.69929504, -17.71457291, -17.07846260, -17.30852318,
         -18.18094444, -14.50052071, -20.42077255, -23.73473549, -24.23317528]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 358, 1, 523] with unstable size 357 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [357]; unstable size 357; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 357] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 357] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54994059, 6.75454807, 1.88174129, 1.26384258, 1.37097168, 2.10497570,
         3.85746717, 6.81311607, 7.42777681]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0293 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [707]; unstable size 707; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 707] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 707] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 707] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 285] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.54880238,  4.78813839, -0.27670145,  2.23500395,  2.02165794,
          1.09089088,  1.08386564,  4.23047495,  4.55613422]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.62423515, -22.64641190, -16.24180603, -18.99898338, -15.90926933,
          -18.73514366, -18.09658813, -18.31100082, -22.13391876, -22.22410011]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33253670]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1127 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.334936141967773
alpha/beta optimization time: 1.1890158653259277
initial alpha-crown bounds: tensor([[ 2.69250345,  4.96834707, -0.15371323,  2.31067300,  2.06917930,
          1.21068347,  1.12954426,  4.43741608,  4.67030334]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.15371322631835938
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.65787768363953
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.65783953666687
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65781354904175
Verifying property 2 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.15371323]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
        -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15371323]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 707
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 281
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1014
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011301040649414062
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.153711199760437
10 lb beta sum: 0.0, worst -0.15372157096862793
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    func 0.0520    
Accumulated time: func 0.0520    prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 24] 
split level 4: [/input-12, 6] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 32] 
split level 9: [/input-8, 1700] 
split level 10: [/input-12, 38] 
split level 11: [/input-8, 1701] 
split level 12: [/input-12, 49] 
split level 13: [/input-8, 1628] 
split level 14: [/input-8, 929] 
split level 15: [/input-8, 1627] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 476] 
split level 18: [/input-12, 7] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 930] 
split level 21: [/input-8, 939] 
split level 22: [/input-8, 1637] 
split level 23: [/input-8, 474] 
split level 24: [/input-12, 57] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 468] 
split level 27: [/input-8, 1261] 
split level 28: [/input-8, 795] 
split level 29: [/input-8, 1638] 
split level 30: [/input-8, 484] 
split level 31: [/input-8, 285] 
split level 32: [/input-8, 490] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 1614] 
split level 35: [/input-8, 1710] 
split level 36: [/input-8, 1708] 
split level 37: [/input-8, 1678] 
split level 38: [/input-8, 1970] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 1957] 
split level 41: [/input-8, 794] 
split level 42: [/input-8, 1053] 
split level 43: [/input-8, 788] 
split level 44: [/input-8, 596] 
split level 45: [/input-8, 1260] 
split level 46: [/input-8, 1684] 
split level 47: [/input-8, 1958] 
split level 48: [/input-8, 1716] 
split level 49: [/input-8, 1717] 
split level 50: [/input-8, 274] 
split level 51: [/input-8, 1949] 
split level 52: [/input-8, 1922] 
split level 53: [/input-8, 1035] 
split level 54: [/input-8, 90] 
split level 55: [/input-8, 492] 
split level 56: [/input-8, 1259] 
split level 57: [/input-8, 1052] 
split level 58: [/input-8, 1250] 
split level 59: [/input-8, 949] 
split level 60: [/input-8, 1713] 
split level 61: [/input-8, 1338] 
split level 62: [/input-8, 1262] 
split level 63: [/input-8, 1337] 
split level 64: [/input-8, 604] 
split level 65: [/input-8, 1313] 
split level 66: [/input-8, 460] 
split level 67: [/input-8, 401] 
split level 68: [/input-8, 1978] 
split level 69: [/input-8, 1643] 
split level 70: [/input-8, 422] 
split level 71: [/input-8, 1633] 
split level 72: [/input-8, 1617] 
split level 73: [/input-8, 1578] 
split level 74: [/input-8, 798] 
split level 75: [/input-8, 423] 
split level 76: [/input-8, 1659] 
split level 77: [/input-8, 307] 
split level 78: [/input-8, 108] 
split level 79: [/input-8, 1030] 
split level 80: [/input-8, 1951] 
split level 81: [/input-8, 493] 
split level 82: [/input-8, 1292] 
split level 83: [/input-8, 51] 
split level 84: [/input-8, 828] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 1305] 
split level 87: [/input-8, 1623] 
split level 88: [/input-8, 811] 
split level 89: [/input-8, 98] 
split level 90: [/input-8, 829] 
split level 91: [/input-8, 1721] 
split level 92: [/input, 1163] 
split level 93: [/input-8, 413] 
split level 94: [/input-8, 45] 
split level 95: [/input-8, 330] 
split level 96: [/input, 183] 
split level 97: [/input-8, 50] 
split level 98: [/input-8, 505] 
split level 99: [/input-8, 82] 
split level 100: [/input-8, 1932] 
split level 101: [/input-8, 441] 
split level 102: [/input-8, 106] 
split level 103: [/input-8, 365] 
split level 104: [/input-8, 905] 
split level 105: [/input-8, 402] 
split level 106: [/input-8, 1615] 
split level 107: [/input-8, 830] 
split level 108: [/input-8, 1754] 
split level 109: [/input-8, 1595] 
split level 110: [/input-8, 1606] 
split level 111: [/input-8, 1712] 
split level 112: [/input-8, 627] 
split level 113: [/input, 1416] 
split level 114: [/input-8, 812] 
split level 115: [/input, 185] 
split level 116: [/input-8, 1646] 
split level 117: [/input-8, 498] 
split level 118: [/input-8, 1334] 
split level 119: [/input-8, 793] 
split level 120: [/input-8, 941] 
split level 121: [/input, 184] 
split level 122: [/input-8, 372] 
split level 123: [/input, 2949] 
split level 124: [/input, 2951] 
split level 125: [/input-8, 116] 
split level 126: [/input, 152] 
split level 127: [/input, 186] 
split level 128: [/input-8, 1609] 
split level 129: [/input, 3005] 
split level 130: [/input, 2504] 
split level 131: [/input-8, 446] 
split level 132: [/input, 3021] 
split level 133: [/input-8, 137] 
split level 134: [/input, 1435] 
split level 135: [/input-8, 958] 
split level 136: [/input-8, 1654] 
split level 137: [/input, 2475] 
split level 138: [/input-8, 777] 
split level 139: [/input-8, 1736] 
split level 140: [/input-8, 306] 
split level 141: [/input, 138] 
split level 142: [/input-8, 1762] 
split level 143: [/input, 1180] 
split level 144: [/input-8, 104] 
split level 145: [/input, 1607] 
split level 146: [/input-8, 1607] 
split level 147: [/input-8, 1297] 
split level 148: [/input, 1514] 
split level 149: [/input, 2440] 
split level 150: [/input, 151] 
split level 151: [/input-8, 1265] 
split level 152: [/input, 2489] 
split level 153: [/input, 2474] 
split level 154: [/input-8, 115] 
split level 155: [/input, 2491] 
split level 156: [/input-8, 117] 
split level 157: [/input, 3019] 
split level 158: [/input-8, 21] 
split level 159: [/input-8, 1251] 
split level 160: [/input, 3541] 
split level 161: [/input, 2522] 
split level 162: [/input-8, 1603] 
split level 163: [/input-8, 1108] 
split level 164: [/input-8, 447] 
split level 165: [/input-12, 36] 
split level 166: [/input, 2217] 
split level 167: [/input-8, 97] 
split level 168: [/input, 494] 
split level 169: [/input-8, 22] 
split level 170: [/input, 88] 
split level 171: [/input-8, 1746] 
split level 172: [/input-8, 1624] 
split level 173: [/input-8, 500] 
split level 174: [/input, 1015] 
split level 175: [/input, 217] 
split level 176: [/input, 199] 
split level 177: [/input, 2487] 
split level 178: [/input, 3301] 
split level 179: [/input, 2248] 
split level 180: [/input, 2408] 
split level 181: [/input, 1317] 
split level 182: [/input-8, 1027] 
split level 183: [/input-8, 956] 
split level 184: [/input, 2183] 
split level 185: [/input, 2455] 
split level 186: [/input, 3052] 
split level 187: [/input, 232] 
split level 188: [/input-8, 452] 
split level 189: [/input-8, 126] 
split level 190: [/input, 2792] 
split level 191: [/input, 1014] 
split level 192: [/input, 3038] 
split level 193: [/input, 1195] 
split level 194: [/input, 2791] 
split level 195: [/input, 1515] 
split level 196: [/input, 2250] 
split level 197: [/input-12, 92] 
split level 198: [/input, 2153] 
split level 199: [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15361332893371582
10 lb beta sum: 0.0, worst -0.15361523628234863
Time: prepare 0.0115    bound 0.0982    transfer 0.0018    finalize 0.0036    func 0.1177    
Accumulated time: func 0.1698    prepare 0.0215    bound 0.1498    transfer 0.0019    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(0.17703804) min lb tensor(-0.15360141)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.011254310607910156 
BICCOS Cumulative time: 0.011254310607910156
Preprocessing time: 0.010234832763671875 Inference time: 0.0002803802490234375 Add cuts time: 9.679794311523438e-05 Cut analysis time: 0.0006422996520996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13946 (1), -0.13899 (1), -0.13871 (1), -0.13871 (1), -0.13858 (1), -0.13771 (1), -0.13699 (1), -0.13661 (1), -0.13640 (1), -0.13609 (1), -0.13552 (1), -0.13469 (1), -0.13451 (1), -0.13432 (1), -0.13412 (1), -0.13407 (1), -0.13332 (1), -0.13254 (1), -0.13219 (1), -0.13146 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5091    set_bounds 0.0089    solve 0.1178    add 0.0728    
Accumulated time: pickout 0.0003    decision 0.5091    set_bounds 0.0089    solve 0.1178    add 0.0728    
Current (lb-rhs): -0.13945627212524414
50 domains visited
Cumulative time: 0.7773938179016113

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13810324668884277
10 lb beta sum: 0.7302243113517761, worst -0.060819387435913086
Time: prepare 0.0070    bound 0.1159    transfer 0.0017    finalize 0.0023    func 0.1295    
Accumulated time: func 0.2993    prepare 0.0287    bound 0.2657    transfer 0.0036    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.29600102) min lb tensor(-0.06070623)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.0232541561126709 
BICCOS Cumulative time: 0.034508466720581055
Preprocessing time: 0.011806488037109375 Inference time: 0.0076732635498046875 Add cuts time: 0.0033235549926757812 Cut analysis time: 0.0004508495330810547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01176 (2), -0.01157 (2), -0.01129 (2), -0.01123 (2), -0.01109 (2), -0.01104 (2), -0.01089 (2), -0.01070 (2), -0.01060 (2), -0.01046 (2), -0.00997 (2), -0.00978 (2), -0.00953 (2), -0.00942 (2), -0.00933 (2), -0.00930 (2), -0.00913 (2), -0.00885 (2), -0.00847 (2), -0.00829 (2), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0195    set_bounds 0.0122    solve 0.1296    add 0.0951    
Accumulated time: pickout 0.0017    decision 0.5286    set_bounds 0.0212    solve 0.2474    add 0.1679    
Current (lb-rhs): -0.011755585670471191
100 domains visited
Cumulative time: 1.0586938858032227

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 49] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10868167877197266

all verified at 6th iter
Time: prepare 0.0071    bound 0.0458    transfer 0.0008    finalize 0.0023    func 0.0586    
Accumulated time: func 0.3579    prepare 0.0361    bound 0.3115    transfer 0.0044    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.24588984) min lb tensor(0.04230961)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04061007499694824 
BICCOS Cumulative time: 0.0751185417175293
Preprocessing time: 0.011473655700683594 Inference time: 0.015813112258911133 Add cuts time: 0.013136148452758789 Cut analysis time: 0.00018715858459472656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0160    solve 0.0587    add 0.0197    
Accumulated time: pickout 0.0028    decision 0.5476    set_bounds 0.0371    solve 0.3060    add 0.1876    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.13360982e-10, 1.22077867e-01, 2.36569837e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.13360982e-10, 1.22077867e-01, 6.10362738e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.13360982e-10, 1.25406310e-01, 2.34755486e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.13360982e-10, 1.25406310e-01, 6.15420789e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.22244284e-01,  2.38445863e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.22244284e-01,  6.19626492e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.25942752e-01,  2.36674890e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.25942752e-01,  6.14448041e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09815049171447754

all verified at 2th iter
Time: prepare 0.0004    bound 0.0149    transfer 0.0001    finalize 0.0002    func 0.0156    
Accumulated time: func 0.3735    prepare 0.0364    bound 0.3264    transfer 0.0046    finalize 0.0085    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.2236578464508
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.2235827445984
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.22281122207642
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.22278904914856
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.22276902198792
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.22275018692017
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.7773 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 654] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.94611073,  1.33183813,  1.31211567,  0.27194166,  2.35654259,
          1.27423668,  2.06728745,  0.98784947, -0.88770485]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.50359154, -27.88374138, -28.51186180, -27.05513573, -29.40580559,
          -28.19179726, -29.20458603, -28.14871597, -25.54721451, -25.68577957]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13856506]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0514 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [904]; unstable size 904; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 904] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 904] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 904] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 246] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46684694,  3.44482827,  0.77367616,  1.71358109, -0.53734124,
          2.20122433,  1.18286538,  4.27326059,  2.94509697]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
          -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23146915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0577 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.03265953, -29.80158615, -28.01462746, -29.49231339, -27.82477570,
         -29.74157143, -29.00487137, -29.65236473, -26.56688309, -30.04109955]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 952] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 952] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.56631374, 3.00716281, 4.34157467, 2.61966324, 4.48081446, 3.68361449,
         4.35380077, 1.53697228, 5.00381327]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0465 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.37767220, -22.63599205, -16.68470383, -17.56246567, -14.84348488,
         -17.98977852, -17.40301132, -16.78604507, -20.68542862, -22.37132454]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [762]; unstable size 762; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 332, 1, 762] with unstable size 331 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 762] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 762] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [331]; unstable size 331; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 331] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 331] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03614450, 5.42467785, 1.01491499, 1.54336727, 1.87700105, 1.22836077,
         1.06106281, 4.09441185, 4.97289753]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0499 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.56104851, -25.43757248, -22.30799866, -20.47185135, -22.67837715,
         -19.94359779, -23.14790916, -21.03846169, -23.14024353, -23.94003487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 756] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 756] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 261] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01937962, 3.41801047, 1.25207305, 0.18682480, 1.56868863, 2.03725863,
         0.10003209, 1.46886027, 2.03972721]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0438 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.62328815, -18.18186188, -18.71482468, -19.00971794, -17.99854279,
         -20.46262550, -20.13095474, -20.09570503, -10.99292850, -16.95243645]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [626]; unstable size 626; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 626] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 626] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 626] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 200] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72617197, 5.95293665, 6.50314236, 6.90349865, 5.91612148, 8.26207638,
         7.94433498, 7.78404713, 4.84170866]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0509 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57911682, -18.01341438, -21.32861328, -22.58253288, -23.55420685,
         -22.23183250, -24.82959557, -22.38050079, -21.57038307, -21.39789391]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 445] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 445] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 172] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.14326143, 1.50191069, 2.99028349, 3.75916886, 2.42487907, 5.00068092,
         2.60955715, 1.96376276, 2.50974631]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0283 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [875]; unstable size 875; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 356, 1, 875] with unstable size 355 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 875] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 875] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [355]; unstable size 355; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 355] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 355] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.85499263,  3.47037888, -0.90604162, -0.95058966, -0.23341925,
         -0.53099990, -0.42522955,  1.47124863,  1.91838360]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.94274139, -25.66132355, -19.52083969, -19.54301643, -19.51924324,
          -19.72516251, -19.77233505, -20.36951065, -23.25295830, -23.81954956],
         [-21.94274139, -25.66132355, -19.52083969, -19.54301643, -19.51924324,
          -19.72516251, -19.77233505, -20.36951065, -23.25295830, -23.81954956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02217674, -0.02377319,  0.18214607,  0.22931862,  0.82649422]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0121 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0436 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [867]; unstable size 867; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 867] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 867] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 867] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 165] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.32719994, -0.10789108,  0.04068589,  2.53268099,  0.74327826,
          2.51675272,  1.46775675,  8.13148308,  8.55004883]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.27it/s]100%|██████████| 1/1 [00:00<00:00,  9.26it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-35.14986801, -45.41040802, -35.38068390, -35.74518204, -38.33306503,
          -36.46290207, -38.23206711, -37.45825958, -43.79046249, -44.53758621]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23081589]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1104 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.40303039550781
alpha/beta optimization time: 1.1876766681671143
initial alpha-crown bounds: tensor([[ 9.34874249, -0.09103465,  0.06384492,  2.55859995,  0.76943374,
          2.53152752,  1.50653481,  8.14646626,  8.56891441]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0910346508026123
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.66556525230408
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.66552829742432
Verifying property 1 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09103465]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
        -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09103465]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 867
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 10
-----------------
# of unstable neurons: 1036
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.942054748535156e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.091033935546875
10 lb beta sum: 0.0, worst -0.09103751182556152
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    func 0.0528    
Accumulated time: func 0.0528    prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 5] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 90] 
split level 7: [/input-8, 217] 
split level 8: [/input-8, 225] 
split level 9: [/input-8, 226] 
split level 10: [/input-8, 1835] 
split level 11: [/input-8, 209] 
split level 12: [/input-8, 1188] 
split level 13: [/input-8, 233] 
split level 14: [/input-8, 1815] 
split level 15: [/input-8, 1029] 
split level 16: [/input-8, 234] 
split level 17: [/input-8, 1817] 
split level 18: [/input-8, 241] 
split level 19: [/input-8, 201] 
split level 20: [/input-8, 239] 
split level 21: [/input-8, 803] 
split level 22: [/input-8, 250] 
split level 23: [/input-8, 1371] 
split level 24: [/input, 3124] 
split level 25: [/input, 648] 
split level 26: [/input, 477] 
split level 27: [/input-8, 249] 
split level 28: [/input, 631] 
split level 29: [/input-8, 1834] 
split level 30: [/input-8, 428] 
split level 31: [/input-8, 1816] 
split level 32: [/input-8, 1826] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3242] 
split level 35: [/input, 953] 
split level 36: [/input, 969] 
split level 37: [/input-8, 253] 
split level 38: [/input-8, 1847] 
split level 39: [/input-8, 902] 
split level 40: [/input-8, 635] 
split level 41: [/input-8, 508] 
split level 42: [/input, 3256] 
split level 43: [/input, 1002] 
split level 44: [/input, 917] 
split level 45: [/input-8, 901] 
split level 46: [/input-8, 634] 
split level 47: [/input, 933] 
split level 48: [/input-8, 60] 
split level 49: [/input, 3272] 
split level 50: [/input-8, 1808] 
split level 51: [/input-8, 1844] 
split level 52: [/input-8, 181] 
split level 53: [/input, 2907] 
split level 54: [/input-8, 202] 
split level 55: [/input, 3257] 
split level 56: [/input-8, 507] 
split level 57: [/input, 1004] 
split level 58: [/input-8, 586] 
split level 59: [/input-8, 576] 
split level 60: [/input, 3016] 
split level 61: [/input, 3052] 
split level 62: [/input-8, 246] 
split level 63: [/input, 3105] 
split level 64: [/input-8, 1622] 
split level 65: [/input-8, 192] 
split level 66: [/input-8, 235] 
split level 67: [/input, 3022] 
split level 68: [/input, 3676] 
split level 69: [/input, 2215] 
split level 70: [/input-8, 1379] 
split level 71: [/input, 919] 
split level 72: [/input, 3692] 
split level 73: [/input-8, 821] 
split level 74: [/input, 2600] 
split level 75: [/input, 3691] 
split level 76: [/input, 2263] 
split level 77: [/input, 2248] 
split level 78: [/input, 230] 
split level 79: [/input, 3006] 
split level 80: [/input-8, 1800] 
split level 81: [/input-8, 2004] 
split level 82: [/input, 2520] 
split level 83: [/input, 3496] 
split level 84: [/input-8, 911] 
split level 85: [/input-8, 452] 
split level 86: [/input-8, 193] 
split level 87: [/input, 2247] 
split level 88: [/input, 3379] 
split level 89: [/input, 3273] 
split level 90: [/input, 2199] 
split level 91: [/input, 2231] 
split level 92: [/input, 2844] 
split level 93: [/input, 3051] 
split level 94: [/input, 3287] 
split level 95: [/input, 229] 
split level 96: [/input, 2615] 
split level 97: [/input, 216] 
split level 98: [/input, 2519] 
split level 99: [/input, 3122] 
split level 100: [/input, 228] 
split level 101: [/input-8, 943] 
split level 102: [/input-8, 1833] 
split level 103: [/input, 2631] 
split level 104: [/input-8, 1843] 
split level 105: [/input, 2517] 
split level 106: [/input, 3268] 
split level 107: [/input, 614] 
split level 108: [/input, 2261] 
split level 109: [/input, 1336] 
split level 110: [/input, 2535] 
split level 111: [/input, 301] 
split level 112: [/input-8, 1596] 
split level 113: [/input, 199] 
split level 114: [/input, 222] 
split level 115: [/input, 699] 
split level 116: [/input-8, 205] 
split level 117: [/input, 227] 
split level 118: [/input, 2486] 
split level 119: [/input, 200] 
split level 120: [/input, 231] 
split level 121: [/input, 2616] 
split level 122: [/input, 214] 
split level 123: [/input-8, 1825] 
split level 124: [/input, 212] 
split level 125: [/input-8, 190] 
split level 126: [/input, 2471] 
split level 127: [/input, 3300] 
split level 128: [/input, 2244] 
split level 129: [/input-8, 506] 
split level 130: [/input, 213] 
split level 131: [/input, 2198] 
split level 132: [/input, 2265] 
split level 133: [/input, 232] 
split level 134: [/input, 215] 
split level 135: [/input, 2230] 
split level 136: [/input, 2502] 
split level 137: [/input, 1963] 
split level 138: [/input, 653] 
split level 139: [/input, 2213] 
split level 140: [/input, 2246] 
split level 141: [/input, 206] 
split level 142: [/input, 2232] 
split level 143: [/input, 2843] 
split level 144: [/input, 3121] 
split level 145: [/input, 3579] 
split level 146: [/input, 2534] 
split level 147: [/input, 715] 
split level 148: [/input, 2277] 
split level 149: [/input, 2280] 
split level 150: [/input, 2846] 
split level 151: [/input-8, 951] 
split level 152: [/input, 177] 
split level 153: [/input, 1964] 
split level 154: [/input-8, 1848] 
split level 155: [/input, 3301] 
split level 156: [/input, 2542] 
split level 157: [/input, 843] 
split level 158: [/input, 331] 
split level 159: [/input, 2845] 
split level 160: [/input, 217] 
split level 161: [/input, 3580] 
split level 162: [/input, 1979] 
split level 163: [/input, 198] 
split level 164: [/input, 2228] 
split level 165: [/input, 193] 
split level 166: [/input, 3675] 
split level 167: [/input, 3578] 
split level 168: [/input, 226] 
split level 169: [/input, 1833] 
split level 170: [/input, 196] 
split level 171: [/input, 2501] 
split level 172: [/input, 3380] 
split level 173: [/input, 238] 
split level 174: [/input, 210] 
split level 175: [/input, 2485] 
split level 176: [/input, 184] 
split level 177: [/input, 183] 
split level 178: [/input, 1948] 
split level 179: [/input, 46] 
split level 180: [/input, 1811] 
split level 181: [/input, 197] 
split level 182: [/input, 3708] 
split level 183: [/input, 2521] 
split level 184: [/input, 1862] 
split level 185: [/input, 3383] 
split level 186: [/input, 683] 
split level 187: [/input, 195] 
split level 188: [/input, 2455] 
split level 189: [/input, 27] 
split level 190: [/input, 3299] 
split level 191: [/input, 537] 
split level 192: [/input, 194] 
split level 193: [/input, 598] 
split level 194: [/input, 3581] 
split level 195: [/input, 28] 
split level 196: [/input, 29] 
split level 197: [/input, 2059] 
split level 198: [/input, 3577] 
split level 199: [/input, 536] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09093761444091797
10 lb beta sum: 0.0, worst -0.0909419059753418
Time: prepare 0.0114    bound 0.0961    transfer 0.0018    finalize 0.0029    func 0.1148    
Accumulated time: func 0.1676    prepare 0.0213    bound 0.1484    transfer 0.0019    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.13613868) min lb tensor(-0.09093761)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010417938232421875 
BICCOS Cumulative time: 0.010417938232421875
Preprocessing time: 0.009934425354003906 Inference time: 0.00017976760864257812 Add cuts time: 7.43865966796875e-05 Cut analysis time: 0.00022935867309570312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08741 (1), -0.08730 (1), -0.08716 (1), -0.08697 (1), -0.08685 (1), -0.08680 (1), -0.08671 (1), -0.08632 (1), -0.08619 (1), -0.08608 (1), -0.08578 (1), -0.08554 (1), -0.08544 (1), -0.08542 (1), -0.08529 (1), -0.08498 (1), -0.08465 (1), -0.08457 (1), -0.08454 (1), -0.08446 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5065    set_bounds 0.0091    solve 0.1149    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5065    set_bounds 0.0091    solve 0.1149    add 0.0702    
Current (lb-rhs): -0.08740592002868652
50 domains visited
Cumulative time: 0.7695355415344238

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 1: [/input-12, 42] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07099556922912598
10 lb beta sum: 0.4433644115924835, worst -0.0038779377937316895

all verified at 13th iter
Time: prepare 0.0073    bound 0.0802    transfer 0.0007    finalize 0.0024    func 0.0932    
Accumulated time: func 0.2609    prepare 0.0289    bound 0.2287    transfer 0.0026    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.28337896) min lb tensor(0.00103259)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03388690948486328 
BICCOS Cumulative time: 0.044304847717285156
Preprocessing time: 0.011756420135498047 Inference time: 0.013806819915771484 Add cuts time: 0.008142709732055664 Cut analysis time: 0.00018095970153808594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0117    solve 0.0933    add 0.0149    
Accumulated time: pickout 0.0014    decision 0.5262    set_bounds 0.0208    solve 0.2082    add 0.0851    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.69484435e-10, 2.36473367e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.69484435e-10, 5.22282571e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.22711131e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.13023028e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0033721923828125

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0004    func 0.0106    
Accumulated time: func 0.2714    prepare 0.0292    bound 0.2383    transfer 0.0027    finalize 0.0059    
After pruning, left:  0

Back to Regular BaB


Properties batch 2, size 1
Remaining timeout: 197.5123689174652
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 197.51229763031006
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.5122742652893
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.51225447654724
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.5122354030609
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.51221704483032
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.51219749450684
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4879 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40458870, -23.24298668, -27.73333549, -27.90799141, -27.40376663,
         -28.05864906, -28.91640854, -27.54826736, -27.30009651, -25.52873611]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [684]; unstable size 684; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 684] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 684] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 684] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 285] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.35218525, 2.28642750, 2.51820183, 1.68908215, 2.53085232, 3.30504608,
         2.17191458, 2.28330231, 1.35116148]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 206, 1, 595] with unstable size 205 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 595] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [205]; unstable size 205; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 205] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 205] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.96349621,  1.88203287,  2.57148647,  2.24077988,  2.77335310,
          4.53415442,  2.59828901, -0.94698894,  1.90783072]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.84978294, -20.93986130, -24.20811844, -24.78613472, -24.63944435,
          -25.15346718, -27.01600456, -25.25593185, -20.52700806, -23.77411842]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.41285324]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 448] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 448] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 263] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72115159,  3.32613206,  0.34109974,  2.45504856,  2.08227634,
          2.35139227,  1.41229212,  3.91198707,  5.09997797]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
          -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47766113]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-3.53968143e-01, -6.82538673e-02, -3.65078375e-02,  ...,
             1.11112073e-02, -2.11111009e-01, -5.23808524e-02],
           [-1.15872920e-01, -1.47618949e-01, -1.63491964e-01,  ...,
            -5.23808524e-02, -3.69841158e-01, -1.63491964e-01],
           [-2.42857039e-01, -1.15872920e-01, -2.26984024e-01,  ...,
             1.22222304e-01,  2.49206424e-01, -2.42857039e-01],
           ...,
           [ 1.22222304e-01,  4.28572372e-02,  2.65079439e-01,  ...,
            -7.03174591e-01, -2.11111009e-01, -2.26984024e-01],
           [ 1.53968334e-01,  3.76190543e-01, -2.26984024e-01,  ...,
            -4.17460203e-01, -4.80952382e-01, -2.26984024e-01],
           [ 3.44444513e-01,  5.19047678e-01,  3.92063558e-01,  ...,
            -3.65078375e-02, -2.74603069e-01, -2.11111009e-01]],

          [[ 1.61031820e-02,  2.25442946e-01,  2.73752123e-01,  ...,
             4.02576596e-01,  8.05154145e-02,  2.89855182e-01],
           [ 2.41546005e-01,  1.77133769e-01,  1.93236828e-01,  ...,
             3.86473536e-01, -3.22059989e-02,  1.44927651e-01],
           [ 1.12721533e-01,  2.57649064e-01,  1.61030710e-01,  ...,
             4.99194920e-01,  8.21256101e-01,  1.77133769e-01],
           ...,
           [ 7.56843865e-01,  5.79710245e-01,  6.92431629e-01,  ...,
            -3.86473298e-01,  1.61030710e-01,  2.25442946e-01],
           [ 5.95813274e-01,  7.72946954e-01,  2.09339887e-01,  ...,
             8.05154145e-02, -1.77133530e-01,  1.44927651e-01],
           [ 6.28019392e-01,  8.21256101e-01,  8.37359190e-01,  ...,
             5.31401038e-01,  1.22934580e-07,  9.66184735e-02]],

          [[ 4.51274544e-01,  7.36132085e-01,  7.36132085e-01,  ...,
             8.56072128e-01,  5.56222081e-01,  7.51124620e-01],
           [ 7.21139610e-01,  7.21139610e-01,  6.31184578e-01,  ...,
             7.96102107e-01,  3.46327007e-01,  6.01199567e-01],
           [ 5.26237071e-01,  6.76162124e-01,  6.61169589e-01,  ...,
             9.16042149e-01,  9.76012170e-01,  5.71214557e-01],
           ...,
           [ 1.05097473e+00,  8.86057138e-01,  1.09595215e+00,  ...,
             1.66416958e-01,  5.86207092e-01,  6.16192102e-01],
           [ 1.03598225e+00,  1.08095968e+00,  5.86207092e-01,  ...,
             4.96252000e-01,  3.46327007e-01,  6.31184578e-01],
           [ 1.08095968e+00,  1.15592217e+00,  1.09595215e+00,  ...,
             8.26087117e-01,  5.26237071e-01,  6.61169589e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0364 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 326, 1, 799] with unstable size 325 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 799] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [325]; unstable size 325; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 325] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 325] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.38908482, -1.18870056, -2.95449877, -2.60739756, -3.34873295,
         -1.96987033, -3.07361507, -3.06156230, -1.16480827]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520],
         [-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07114410, -0.06553459, -0.91603661, -0.88260841, -1.38260460,
          -0.20631981, -1.09107208, -1.13768578,  0.45047760]]],
       device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0460 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 703] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 703] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 221] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.52273846, -0.96111429, -0.21341276, -0.24194908,  0.79662275,
         -0.12264013,  1.94755030,  1.67940426, -2.02313375]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676],
         [-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74944305, -0.24925041,  1.31189346,  1.01360703,  1.23579597,
          -0.55371666]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 640] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 640] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29259706,  3.78634930, -0.83907115,  0.12916976, -0.20247698,
         -0.06445086, -0.28860736,  3.43385983,  1.86539793]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.97348404, -25.25050926, -19.38525391, -20.47401237, -19.55496788,
          -20.18207741, -20.31973648, -20.18347740, -24.64109039, -23.26975060],
         [-22.97348404, -25.25050926, -19.38525391, -20.47401237, -19.55496788,
          -20.18207741, -20.31973648, -20.18347740, -24.64109039, -23.26975060]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16971397,  0.62710953,  0.76476860,  0.62850952]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0372 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [953]; unstable size 953; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 953] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 953] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 953] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 255] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.24769062,  1.62967801, -0.30106163, -0.63823336, -0.46131349,
          0.13329804,  1.71760297,  0.29797357,  0.64501786]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]100%|██████████| 1/1 [00:00<00:00,  9.05it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.69080544, -28.02049828, -25.76778221, -25.07657433, -25.68251801,
          -26.00996780, -27.59398842, -26.61277580, -24.82239151, -26.61855125],
         [-25.69080544, -28.02049828, -25.76778221, -25.07657433, -25.68251801,
          -26.00996780, -27.59398842, -26.61277580, -24.82239151, -26.61855125]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.86841393, 0.94539070, 0.25418282, 0.86012650]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1134 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.3044424057006836
alpha/beta optimization time: 1.1856372356414795
initial alpha-crown bounds: tensor([[-0.19642901,  1.68688881, -0.24070239, -0.57431960, -0.39791703,
          0.20313406,  1.77232850,  0.36443245,  0.68702650]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.57431960105896
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64699530601501
Verifying property 0 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19642901]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19642901]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010013580322265625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19642609357833862
10 lb beta sum: 0.0, worst -0.19642865657806396
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    func 0.0522    
Accumulated time: func 0.0522    prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 79] 
split level 5: [/input-12, 4] 
split level 6: [/input-8, 913] 
split level 7: [/input-12, 2] 
split level 8: [/input-8, 1697] 
split level 9: [/input-8, 1764] 
split level 10: [/input-12, 29] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 1724] 
split level 13: [/input-12, 71] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 1715] 
split level 16: [/input-8, 1690] 
split level 17: [/input-8, 1943] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1707] 
split level 20: [/input-8, 1762] 
split level 21: [/input-8, 1935] 
split level 22: [/input-8, 1716] 
split level 23: [/input-8, 1765] 
split level 24: [/input-8, 371] 
split level 25: [/input, 2679] 
split level 26: [/input-8, 1953] 
split level 27: [/input-12, 35] 
split level 28: [/input-8, 932] 
split level 29: [/input-8, 1626] 
split level 30: [/input-8, 179] 
split level 31: [/input-12, 58] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 625] 
split level 34: [/input, 2455] 
split level 35: [/input-8, 1053] 
split level 36: [/input-8, 439] 
split level 37: [/input-8, 1756] 
split level 38: [/input-8, 1980] 
split level 39: [/input-8, 1634] 
split level 40: [/input-8, 1947] 
split level 41: [/input, 920] 
split level 42: [/input, 921] 
split level 43: [/input-8, 1034] 
split level 44: [/input, 2388] 
split level 45: [/input, 936] 
split level 46: [/input-8, 1310] 
split level 47: [/input-8, 933] 
split level 48: [/input, 2456] 
split level 49: [/input, 3016] 
split level 50: [/input-8, 2034] 
split level 51: [/input-8, 610] 
split level 52: [/input, 904] 
split level 53: [/input-8, 302] 
split level 54: [/input-8, 939] 
split level 55: [/input, 938] 
split level 56: [/input, 2439] 
split level 57: [/input, 2457] 
split level 58: [/input, 2474] 
split level 59: [/input, 2485] 
split level 60: [/input-8, 1084] 
split level 61: [/input, 2195] 
split level 62: [/input-8, 1618] 
split level 63: [/input, 2167] 
split level 64: [/input, 923] 
split level 65: [/input-8, 1520] 
split level 66: [/input, 3433] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2440] 
split level 70: [/input, 2473] 
split level 71: [/input, 2371] 
split level 72: [/input, 2180] 
split level 73: [/input, 393] 
split level 74: [/input, 2230] 
split level 75: [/input, 135] 
split level 76: [/input, 2535] 
split level 77: [/input, 907] 
split level 78: [/input-8, 377] 
split level 79: [/input-8, 1757] 
split level 80: [/input, 2203] 
split level 81: [/input, 905] 
split level 82: [/input, 2406] 
split level 83: [/input, 1941] 
split level 84: [/input, 903] 
split level 85: [/input, 919] 
split level 86: [/input, 889] 
split level 87: [/input-8, 361] 
split level 88: [/input, 2148] 
split level 89: [/input, 3193] 
split level 90: [/input, 2471] 
split level 91: [/input, 2217] 
split level 92: [/input-8, 180] 
split level 93: [/input-8, 186] 
split level 94: [/input, 1350] 
split level 95: [/input, 2201] 
split level 96: [/input-8, 416] 
split level 97: [/input, 2231] 
split level 98: [/input, 3179] 
split level 99: [/input, 2168] 
split level 100: [/input, 3420] 
split level 101: [/input-8, 241] 
split level 102: [/input, 2441] 
split level 103: [/input-8, 1598] 
split level 104: [/input, 2472] 
split level 105: [/input, 2883] 
split level 106: [/input, 2475] 
split level 107: [/input, 3390] 
split level 108: [/input-8, 1523] 
split level 109: [/input-8, 604] 
split level 110: [/input, 3018] 
split level 111: [/input, 2185] 
split level 112: [/input, 2218] 
split level 113: [/input, 117] 
split level 114: [/input, 2897] 
split level 115: [/input, 2141] 
split level 116: [/input, 3466] 
split level 117: [/input, 1470] 
split level 118: [/input, 2419] 
split level 119: [/input, 2125] 
split level 120: [/input, 2170] 
split level 121: [/input, 2232] 
split level 122: [/input-8, 1227] 
split level 123: [/input, 3000] 
split level 124: [/input-8, 1780] 
split level 125: [/input-8, 446] 
split level 126: [/input, 404] 
split level 127: [/input, 2680] 
split level 128: [/input, 2169] 
split level 129: [/input, 2196] 
split level 130: [/input, 952] 
split level 131: [/input, 2697] 
split level 132: [/input-8, 934] 
split level 133: [/input, 2220] 
split level 134: [/input, 3180] 
split level 135: [/input, 85] 
split level 136: [/input-8, 1369] 
split level 137: [/input-8, 422] 
split level 138: [/input, 2154] 
split level 139: [/input, 420] 
split level 140: [/input, 2184] 
split level 141: [/input, 3017] 
split level 142: [/input, 2153] 
split level 143: [/input, 759] 
split level 144: [/input-8, 1377] 
split level 145: [/input, 435] 
split level 146: [/input-8, 1149] 
split level 147: [/input, 891] 
split level 148: [/input-8, 409] 
split level 149: [/input, 2468] 
split level 150: [/input, 2476] 
split level 151: [/input, 2205] 
split level 152: [/input, 2186] 
split level 153: [/input, 925] 
split level 154: [/input, 3192] 
split level 155: [/input-8, 1265] 
split level 156: [/input, 3181] 
split level 157: [/input, 2204] 
split level 158: [/input, 2426] 
split level 159: [/input, 3207] 
split level 160: [/input, 1349] 
split level 161: [/input, 712] 
split level 162: [/input, 474] 
split level 163: [/input, 2489] 
split level 164: [/input, 69] 
split level 165: [/input, 2219] 
split level 166: [/input, 2694] 
split level 167: [/input, 2390] 
split level 168: [/input, 2156] 
split level 169: [/input, 506] 
split level 170: [/input, 2155] 
split level 171: [/input, 3422] 
split level 172: [/input, 2433] 
split level 173: [/input, 3191] 
split level 174: [/input, 2393] 
split level 175: [/input, 2682] 
split level 176: [/input, 2442] 
split level 177: [/input, 2467] 
split level 178: [/input, 2488] 
split level 179: [/input, 2412] 
split level 180: [/input, 3468] 
split level 181: [/input-8, 212] 
split level 182: [/input, 2937] 
split level 183: [/input-8, 235] 
split level 184: [/input, 2461] 
split level 185: [/input-8, 959] 
split level 186: [/input, 714] 
split level 187: [/input, 2696] 
split level 188: [/input, 138] 
split level 189: [/input, 758] 
split level 190: [/input, 2211] 
split level 191: [/input, 713] 
split level 192: [/input, 3389] 
split level 193: [/input-8, 1317] 
split level 194: [/input, 2206] 
split level 195: [/input, 730] 
split level 196: [/input, 165] 
split level 197: [/input, 909] 
split level 198: [/input, 2416] 
split level 199: [/input, 3209] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19640380144119263
10 lb beta sum: 0.0, worst -0.1964060664176941
Time: prepare 0.0114    bound 0.0970    transfer 0.0019    finalize 0.0031    func 0.1160    
Accumulated time: func 0.1682    prepare 0.0214    bound 0.1487    transfer 0.0020    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.14749050) min lb tensor(-0.19640380)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010727167129516602 
BICCOS Cumulative time: 0.010727167129516602
Preprocessing time: 0.00989222526550293 Inference time: 0.00018739700317382812 Add cuts time: 7.343292236328125e-05 Cut analysis time: 0.0005741119384765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18764 (1), -0.18735 (1), -0.18734 (1), -0.18725 (1), -0.18632 (1), -0.18625 (1), -0.18619 (1), -0.18599 (1), -0.18594 (1), -0.18585 (1), -0.18516 (1), -0.18475 (1), -0.18458 (1), -0.18408 (1), -0.18330 (1), -0.18134 (1), -0.18113 (1), -0.18051 (1), -0.18039 (1), -0.17943 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5082    set_bounds 0.0089    solve 0.1161    add 0.0775    
Accumulated time: pickout 0.0003    decision 0.5082    set_bounds 0.0089    solve 0.1161    add 0.0775    
Current (lb-rhs): -0.18763577938079834
50 domains visited
Cumulative time: 0.7787632942199707

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15661096572875977
10 lb beta sum: 0.5408634543418884, worst -0.10000592470169067
Time: prepare 0.0070    bound 0.1153    transfer 0.0007    finalize 0.0023    func 0.1280    
Accumulated time: func 0.2962    prepare 0.0287    bound 0.2640    transfer 0.0027    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.31405461) min lb tensor(-0.09976530)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.027188539505004883 
BICCOS Cumulative time: 0.037915706634521484
Preprocessing time: 0.01169443130493164 Inference time: 0.009996414184570312 Add cuts time: 0.00531458854675293 Cut analysis time: 0.00018310546875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0126    solve 0.1281    add 0.0145    
Accumulated time: pickout 0.0014    decision 0.5276    set_bounds 0.0215    solve 0.2442    add 0.0920    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.00888317e-05, 3.59128296e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.00888317e-05, 9.46084112e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.00888317e-05, 3.35261226e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([1., 1.]), tensor([0, 0]), tensor([2.00888317e-05, 9.94946361e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06354475021362305

all verified at 2th iter
Time: prepare 0.0003    bound 0.0145    transfer 0.0001    finalize 0.0002    func 0.0152    
Accumulated time: func 0.3113    prepare 0.0290    bound 0.2785    transfer 0.0028    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.46506690979004
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.46499490737915
Verifying property 2 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24070239]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24070239]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010061264038085938
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24070048332214355
10 lb beta sum: 0.0, worst -0.24071431159973145
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    func 0.0520    
Accumulated time: func 0.0520    prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 34] 
split level 10: [/input-12, 90] 
split level 11: [/input-8, 932] 
split level 12: [/input-8, 1697] 
split level 13: [/input-12, 58] 
split level 14: [/input-8, 939] 
split level 15: [/input-8, 913] 
split level 16: [/input-8, 1953] 
split level 17: [/input-8, 1716] 
split level 18: [/input-8, 354] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1052] 
split level 22: [/input-8, 1707] 
split level 23: [/input-8, 1764] 
split level 24: [/input-8, 1053] 
split level 25: [/input-8, 933] 
split level 26: [/input-8, 1939] 
split level 27: [/input-8, 937] 
split level 28: [/input-8, 1948] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 1626] 
split level 32: [/input-8, 1947] 
split level 33: [/input-8, 946] 
split level 34: [/input-8, 1762] 
split level 35: [/input, 952] 
split level 36: [/input, 2231] 
split level 37: [/input, 2485] 
split level 38: [/input-8, 1690] 
split level 39: [/input, 936] 
split level 40: [/input, 938] 
split level 41: [/input, 2474] 
split level 42: [/input, 954] 
split level 43: [/input-8, 1206] 
split level 44: [/input-8, 934] 
split level 45: [/input, 966] 
split level 46: [/input, 2455] 
split level 47: [/input, 3016] 
split level 48: [/input, 2248] 
split level 49: [/input, 2230] 
split level 50: [/input, 921] 
split level 51: [/input, 506] 
split level 52: [/input-8, 49] 
split level 53: [/input-8, 232] 
split level 54: [/input-8, 241] 
split level 55: [/input, 2473] 
split level 56: [/input, 2488] 
split level 57: [/input-8, 1310] 
split level 58: [/input, 2202] 
split level 59: [/input, 2459] 
split level 60: [/input, 2232] 
split level 61: [/input, 923] 
split level 62: [/input-8, 186] 
split level 63: [/input, 2456] 
split level 64: [/input, 2535] 
split level 65: [/input, 2471] 
split level 66: [/input, 2472] 
split level 67: [/input, 2490] 
split level 68: [/input, 920] 
split level 69: [/input-8, 1523] 
split level 70: [/input, 2489] 
split level 71: [/input, 1941] 
split level 72: [/input, 2180] 
split level 73: [/input-8, 1765] 
split level 74: [/input, 3509] 
split level 75: [/input-8, 179] 
split level 76: [/input, 2218] 
split level 77: [/input-8, 1598] 
split level 78: [/input-8, 1780] 
split level 79: [/input, 393] 
split level 80: [/input, 2201] 
split level 81: [/input, 905] 
split level 82: [/input, 3516] 
split level 83: [/input, 904] 
split level 84: [/input, 2217] 
split level 85: [/input, 2203] 
split level 86: [/input-8, 610] 
split level 87: [/input, 2457] 
split level 88: [/input, 2219] 
split level 89: [/input, 2167] 
split level 90: [/input, 2439] 
split level 91: [/input, 955] 
split level 92: [/input, 2475] 
split level 93: [/input-8, 57] 
split level 94: [/input, 907] 
split level 95: [/input, 2388] 
split level 96: [/input, 2440] 
split level 97: [/input-8, 1920] 
split level 98: [/input, 2184] 
split level 99: [/input, 2220] 
split level 100: [/input, 2371] 
split level 101: [/input, 3533] 
split level 102: [/input-8, 897] 
split level 103: [/input, 2186] 
split level 104: [/input-8, 1807] 
split level 105: [/input-8, 625] 
split level 106: [/input, 2185] 
split level 107: [/input, 2406] 
split level 108: [/input, 2188] 
split level 109: [/input-8, 439] 
split level 110: [/input-8, 2001] 
split level 111: [/input, 2249] 
split level 112: [/input, 949] 
split level 113: [/input, 2115] 
split level 114: [/input, 971] 
split level 115: [/input, 2476] 
split level 116: [/input, 3000] 
split level 117: [/input-8, 959] 
split level 118: [/input, 404] 
split level 119: [/input, 2491] 
split level 120: [/input, 2169] 
split level 121: [/input-8, 56] 
split level 122: [/input, 2441] 
split level 123: [/input-8, 240] 
split level 124: [/input, 474] 
split level 125: [/input, 797] 
split level 126: [/input, 2505] 
split level 127: [/input, 1978] 
split level 128: [/input, 2236] 
split level 129: [/input, 946] 
split level 130: [/input, 2168] 
split level 131: [/input, 2204] 
split level 132: [/input-8, 209] 
split level 133: [/input-8, 337] 
split level 134: [/input, 1979] 
split level 135: [/input, 3466] 
split level 136: [/input-8, 1084] 
split level 137: [/input, 2254] 
split level 138: [/input, 889] 
split level 139: [/input-8, 1943] 
split level 140: [/input, 2542] 
split level 141: [/input, 1980] 
split level 142: [/input, 2762] 
split level 143: [/input, 3017] 
split level 144: [/input, 3518] 
split level 145: [/input-8, 217] 
split level 146: [/input, 2253] 
split level 147: [/input, 2148] 
split level 148: [/input-8, 940] 
split level 149: [/input, 1015] 
split level 150: [/input, 963] 
split level 151: [/input-8, 1980] 
split level 152: [/input, 2484] 
split level 153: [/input, 420] 
split level 154: [/input, 435] 
split level 155: [/input, 501] 
split level 156: [/input, 1954] 
split level 157: [/input, 1981] 
split level 158: [/input, 3517] 
split level 159: [/input, 2419] 
split level 160: [/input, 2273] 
split level 161: [/input, 730] 
split level 162: [/input, 2250] 
split level 163: [/input, 2509] 
split level 164: [/input, 1013] 
split level 165: [/input, 2251] 
split level 166: [/input, 2196] 
split level 167: [/input-8, 196] 
split level 168: [/input, 2764] 
split level 169: [/input, 2499] 
split level 170: [/input, 2078] 
split level 171: [/input-8, 41] 
split level 172: [/input-8, 242] 
split level 173: [/input, 3411] 
split level 174: [/input, 2284] 
split level 175: [/input, 1965] 
split level 176: [/input, 2468] 
split level 177: [/input, 714] 
split level 178: [/input, 2412] 
split level 179: [/input, 2189] 
split level 180: [/input, 2156] 
split level 181: [/input, 925] 
split level 182: [/input, 713] 
split level 183: [/input, 2332] 
split level 184: [/input, 2170] 
split level 185: [/input, 2270] 
split level 186: [/input, 2524] 
split level 187: [/input, 2461] 
split level 188: [/input, 3582] 
split level 189: [/input, 2442] 
split level 190: [/input, 2444] 
split level 191: [/input, 3468] 
split level 192: [/input, 2157] 
split level 193: [/input-8, 204] 
split level 194: [/input, 891] 
split level 195: [/input, 2349] 
split level 196: [/input, 699] 
split level 197: [/input, 2269] 
split level 198: [/input, 2268] 
split level 199: [/input, 2390] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24052822589874268
10 lb beta sum: 0.0, worst -0.24045312404632568
Time: prepare 0.0114    bound 0.0969    transfer 0.0008    finalize 0.0026    func 0.1143    
Accumulated time: func 0.1663    prepare 0.0214    bound 0.1485    transfer 0.0009    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.28614902) min lb tensor(-0.24044764)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010941028594970703 
BICCOS Cumulative time: 0.010941028594970703
Preprocessing time: 0.010015010833740234 Inference time: 0.00022673606872558594 Add cuts time: 0.00010538101196289062 Cut analysis time: 0.0005939006805419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23033 (1), -0.23025 (1), -0.22942 (1), -0.22934 (1), -0.22913 (1), -0.22873 (1), -0.22870 (1), -0.22858 (1), -0.22843 (1), -0.22782 (1), -0.22775 (1), -0.22767 (1), -0.22657 (1), -0.22509 (1), -0.22455 (1), -0.22430 (1), -0.22407 (1), -0.22402 (1), -0.22296 (1), -0.22043 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5098    set_bounds 0.0088    solve 0.1144    add 0.0681    
Accumulated time: pickout 0.0003    decision 0.5098    set_bounds 0.0088    solve 0.1144    add 0.0681    
Current (lb-rhs): -0.23033356666564941
50 domains visited
Cumulative time: 0.7693641185760498

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 8] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 46] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1717005968093872
10 lb beta sum: 0.8103328347206116, worst -0.04875841736793518
Time: prepare 0.0071    bound 0.1153    transfer 0.0007    finalize 0.0023    func 0.1280    
Accumulated time: func 0.2943    prepare 0.0287    bound 0.2638    transfer 0.0016    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.30053371) min lb tensor(-0.04845051)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.030484914779663086 
BICCOS Cumulative time: 0.04142594337463379
Preprocessing time: 0.011534452438354492 Inference time: 0.01197195053100586 Add cuts time: 0.006795644760131836 Cut analysis time: 0.00018286705017089844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0126    solve 0.1281    add 0.0146    
Accumulated time: pickout 0.0015    decision 0.5294    set_bounds 0.0214    solve 0.2424    add 0.0827    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.00044236e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.65678227e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.92216083e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.83923686e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04300105571746826

all verified at 1th iter
Time: prepare 0.0003    bound 0.0095    transfer 0.0001    finalize 0.0002    func 0.0101    
Accumulated time: func 0.3044    prepare 0.0290    bound 0.2732    transfer 0.0017    finalize 0.0052    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.31195306777954
Verifying property 3 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.57431960]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.57431960]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.703636169433594e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5743150115013123
10 lb beta sum: 0.0, worst -0.5743206739425659
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    func 0.0521    
Accumulated time: func 0.0521    prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 79] 
split level 7: [/input-12, 58] 
split level 8: [/input-8, 1697] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 1618] 
split level 11: [/input-8, 1610] 
split level 12: [/input-8, 1973] 
split level 13: [/input-8, 1953] 
split level 14: [/input-8, 1660] 
split level 15: [/input-12, 29] 
split level 16: [/input-8, 1707] 
split level 17: [/input-8, 913] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1642] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1626] 
split level 22: [/input-8, 946] 
split level 23: [/input-8, 1716] 
split level 24: [/input-8, 1052] 
split level 25: [/input-8, 1713] 
split level 26: [/input-8, 509] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 490] 
split level 29: [/input-8, 461] 
split level 30: [/input, 346] 
split level 31: [/input-8, 1053] 
split level 32: [/input, 3433] 
split level 33: [/input, 3016] 
split level 34: [/input-8, 1634] 
split level 35: [/input-8, 1943] 
split level 36: [/input-8, 934] 
split level 37: [/input, 2248] 
split level 38: [/input-8, 959] 
split level 39: [/input-8, 1611] 
split level 40: [/input, 936] 
split level 41: [/input, 2535] 
split level 42: [/input-8, 1641] 
split level 43: [/input-8, 1149] 
split level 44: [/input, 2485] 
split level 45: [/input-8, 933] 
split level 46: [/input-8, 932] 
split level 47: [/input-8, 1980] 
split level 48: [/input-8, 956] 
split level 49: [/input-8, 510] 
split level 50: [/input-8, 822] 
split level 51: [/input-8, 338] 
split level 52: [/input-8, 337] 
split level 53: [/input, 2456] 
split level 54: [/input-8, 897] 
split level 55: [/input, 938] 
split level 56: [/input-8, 1935] 
split level 57: [/input, 393] 
split level 58: [/input, 2231] 
split level 59: [/input-8, 467] 
split level 60: [/input, 952] 
split level 61: [/input-8, 1084] 
split level 62: [/input-8, 798] 
split level 63: [/input, 923] 
split level 64: [/input, 2455] 
split level 65: [/input, 905] 
split level 66: [/input, 907] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 595] 
split level 69: [/input-8, 1649] 
split level 70: [/input, 889] 
split level 71: [/input, 2169] 
split level 72: [/input-8, 625] 
split level 73: [/input, 3533] 
split level 74: [/input, 2440] 
split level 75: [/input, 904] 
split level 76: [/input, 2471] 
split level 77: [/input, 2230] 
split level 78: [/input-8, 942] 
split level 79: [/input, 2472] 
split level 80: [/input, 2488] 
split level 81: [/input-8, 460] 
split level 82: [/input, 3466] 
split level 83: [/input, 2388] 
split level 84: [/input, 506] 
split level 85: [/input, 2186] 
split level 86: [/input, 2474] 
split level 87: [/input-8, 1780] 
split level 88: [/input, 3509] 
split level 89: [/input-8, 1310] 
split level 90: [/input, 2201] 
split level 91: [/input-8, 939] 
split level 92: [/input, 2167] 
split level 93: [/input, 2473] 
split level 94: [/input-8, 377] 
split level 95: [/input, 2441] 
split level 96: [/input, 920] 
split level 97: [/input, 2185] 
split level 98: [/input, 2168] 
split level 99: [/input-8, 604] 
split level 100: [/input, 2217] 
split level 101: [/input, 2188] 
split level 102: [/input, 2232] 
split level 103: [/input, 3000] 
split level 104: [/input, 2203] 
split level 105: [/input-8, 1523] 
split level 106: [/input, 3518] 
split level 107: [/input, 2153] 
split level 108: [/input-8, 1034] 
split level 109: [/input, 2457] 
split level 110: [/input, 2195] 
split level 111: [/input, 2184] 
split level 112: [/input, 2489] 
split level 113: [/input-8, 951] 
split level 114: [/input, 2180] 
split level 115: [/input, 949] 
split level 116: [/input, 404] 
split level 117: [/input, 2406] 
split level 118: [/input, 946] 
split level 119: [/input, 3468] 
split level 120: [/input, 2476] 
split level 121: [/input, 3017] 
split level 122: [/input-8, 179] 
split level 123: [/input-8, 330] 
split level 124: [/input, 420] 
split level 125: [/input, 2439] 
split level 126: [/input, 344] 
split level 127: [/input-8, 1043] 
split level 128: [/input, 2426] 
split level 129: [/input, 2155] 
split level 130: [/input, 2220] 
split level 131: [/input, 3516] 
split level 132: [/input-8, 345] 
split level 133: [/input, 435] 
split level 134: [/input, 2475] 
split level 135: [/input, 1350] 
split level 136: [/input, 2170] 
split level 137: [/input, 3517] 
split level 138: [/input-8, 1920] 
split level 139: [/input, 2154] 
split level 140: [/input, 3452] 
split level 141: [/input, 2218] 
split level 142: [/input, 375] 
split level 143: [/input, 2156] 
split level 144: [/input, 474] 
split level 145: [/input, 871] 
split level 146: [/input, 2490] 
split level 147: [/input, 2762] 
split level 148: [/input, 2204] 
split level 149: [/input, 891] 
split level 150: [/input, 2427] 
split level 151: [/input, 2172] 
split level 152: [/input, 2219] 
split level 153: [/input, 1331] 
split level 154: [/input-12, 32] 
split level 155: [/input, 797] 
split level 156: [/input, 2371] 
split level 157: [/input, 2442] 
split level 158: [/input, 875] 
split level 159: [/input, 955] 
split level 160: [/input, 2390] 
split level 161: [/input-8, 361] 
split level 162: [/input, 421] 
split level 163: [/input, 725] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 2419] 
split level 166: [/input, 2238] 
split level 167: [/input, 2225] 
split level 168: [/input, 2505] 
split level 169: [/input, 2254] 
split level 170: [/input, 2509] 
split level 171: [/input, 971] 
split level 172: [/input, 2206] 
split level 173: [/input, 2130] 
split level 174: [/input, 2412] 
split level 175: [/input, 501] 
split level 176: [/input, 3411] 
split level 177: [/input, 2173] 
split level 178: [/input, 1317] 
split level 179: [/input-8, 459] 
split level 180: [/input, 2189] 
split level 181: [/input, 713] 
split level 182: [/input, 2468] 
split level 183: [/input, 2428] 
split level 184: [/input, 2444] 
split level 185: [/input, 2253] 
split level 186: [/input, 2250] 
split level 187: [/input, 2196] 
split level 188: [/input, 2764] 
split level 189: [/input, 925] 
split level 190: [/input, 2484] 
split level 191: [/input, 2493] 
split level 192: [/input, 3582] 
split level 193: [/input, 963] 
split level 194: [/input, 2157] 
split level 195: [/input, 3443] 
split level 196: [/input, 2236] 
split level 197: [/input, 2467] 
split level 198: [/input, 2255] 
split level 199: [/input, 2251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5740724205970764
10 lb beta sum: 0.0, worst -0.5740773677825928
Time: prepare 0.0114    bound 0.0956    transfer 0.0019    finalize 0.0029    func 0.1144    
Accumulated time: func 0.1665    prepare 0.0213    bound 0.1473    transfer 0.0019    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.22041559) min lb tensor(-0.57407242)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010833263397216797 
BICCOS Cumulative time: 0.010833263397216797
Preprocessing time: 0.01009368896484375 Inference time: 0.00012493133544921875 Add cuts time: 5.6743621826171875e-05 Cut analysis time: 0.0005578994750976562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.56485 (1), -0.56425 (1), -0.56396 (1), -0.56343 (1), -0.56291 (1), -0.56263 (1), -0.56260 (1), -0.56250 (1), -0.56241 (1), -0.56209 (1), -0.56182 (1), -0.56142 (1), -0.56140 (1), -0.56131 (1), -0.56109 (1), -0.56050 (1), -0.56041 (1), -0.56019 (1), -0.55935 (1), -0.55920 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5052    set_bounds 0.0090    solve 0.1145    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5052    set_bounds 0.0090    solve 0.1145    add 0.0702    
Current (lb-rhs): -0.5648454427719116
50 domains visited
Cumulative time: 0.7670109272003174

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 2: [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5382407903671265
10 lb beta sum: 0.42580825090408325, worst -0.5346454977989197
Time: prepare 0.0071    bound 0.1151    transfer 0.0007    finalize 0.0024    func 0.1279    
Accumulated time: func 0.2944    prepare 0.0286    bound 0.2624    transfer 0.0027    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.32642394) min lb tensor(-0.53447473)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014934778213500977 
BICCOS Cumulative time: 0.025768041610717773
Preprocessing time: 0.011784076690673828 Inference time: 0.0017294883728027344 Add cuts time: 0.001192331314086914 Cut analysis time: 0.0002288818359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30146 (2), -0.30141 (2), -0.30125 (2), -0.30106 (2), -0.30074 (2), -0.29957 (2), -0.29836 (2), -0.29754 (2), -0.29735 (2), -0.29699 (2), -0.29550 (2), -0.29415 (2), -0.29314 (2), -0.29302 (2), -0.29098 (2), -0.28964 (2), -0.28949 (2), -0.28700 (2), -0.28547 (2), -0.27915 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0124    solve 0.1280    add 0.0814    
Accumulated time: pickout 0.0014    decision 0.5248    set_bounds 0.0214    solve 0.2425    add 0.1517    
Current (lb-rhs): -0.301457941532135
100 domains visited
Cumulative time: 1.024756908416748

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 90] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 58] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5579450130462646, worst -0.30145853757858276
10 lb beta sum: 0.5579450130462646, worst -0.30225205421447754
Time: prepare 0.0160    bound 0.1168    transfer 0.0008    finalize 0.0024    func 0.1391    
Accumulated time: func 0.4336    prepare 0.0449    bound 0.3793    transfer 0.0034    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.25812486) min lb tensor(-0.29965687)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01568150520324707 
BICCOS Cumulative time: 0.041449546813964844
Preprocessing time: 0.011564493179321289 Inference time: 0.0025153160095214844 Add cuts time: 0.0013222694396972656 Cut analysis time: 0.00027942657470703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13395 (3), -0.13366 (3), -0.13339 (3), -0.13299 (3), -0.13293 (3), -0.13230 (3), -0.12640 (3), -0.12623 (3), -0.12623 (3), -0.12470 (3), -0.12406 (3), -0.12318 (3), -0.12305 (3), -0.12285 (3), -0.12278 (3), -0.11954 (3), -0.11952 (3), -0.11563 (3), -0.11503 (3), -0.11400 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0189    set_bounds 0.0154    solve 0.1392    add 0.0853    
Accumulated time: pickout 0.0025    decision 0.5437    set_bounds 0.0368    solve 0.3817    add 0.2369    
Current (lb-rhs): -0.13395023345947266
150 domains visited
Cumulative time: 1.300560474395752

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 2] 
split level 3: [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 58] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14554959535598755
10 lb beta sum: 0.5328759551048279, worst -0.12745332717895508
Time: prepare 0.0063    bound 0.1159    transfer 0.0007    finalize 0.0021    func 0.1276    
Accumulated time: func 0.5612    prepare 0.0515    bound 0.4952    transfer 0.0042    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.27733171) min lb tensor(-0.12104267)
Number of Verified Splits: 165 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02245807647705078 
BICCOS Cumulative time: 0.06390762329101562
Preprocessing time: 0.011527538299560547 Inference time: 0.008681535720825195 Add cuts time: 0.001833200454711914 Cut analysis time: 0.000415802001953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03300 (4), -0.03208 (4), -0.03201 (4), -0.03173 (4), -0.03168 (4), -0.03136 (4), -0.03044 (4), -0.02474 (4), -0.02266 (4), -0.02255 (4), -0.02217 (4), -0.02204 (4), -0.02186 (4), -0.02184 (4), -0.02182 (4), -0.02123 (4), -0.02086 (4), -0.02068 (4), -0.01996 (4), -0.01977 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0156    solve 0.1277    add 0.2447    
Accumulated time: pickout 0.0035    decision 0.5628    set_bounds 0.0524    solve 0.5095    add 0.4817    
Current (lb-rhs): -0.03299903869628906
200 domains visited
Cumulative time: 1.7314112186431885

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 58] [/input-12, 2] [/input-12, 46] [/input-12, 46] [/input-12, 58] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 46] [/input-12, 46] [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06480306386947632
10 lb beta sum: 0.4834756851196289, worst -0.36167335510253906
Time: prepare 0.0066    bound 0.1292    transfer 0.0007    finalize 0.0022    func 0.1414    
Accumulated time: func 0.7026    prepare 0.0583    bound 0.6244    transfer 0.0049    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.49457067) min lb tensor(-0.00992113)
Number of Verified Splits: 371 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.03857302665710449 
BICCOS Cumulative time: 0.10248064994812012
Preprocessing time: 0.012436151504516602 Inference time: 0.01923370361328125 Add cuts time: 0.005888700485229492 Cut analysis time: 0.0010144710540771484
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0193    set_bounds 0.0153    solve 0.1415    add 0.0278    
Accumulated time: pickout 0.0045    decision 0.5821    set_bounds 0.0677    solve 0.6509    add 0.5094    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([2.66000111e-10, 1.66293874e-01, 8.28478187e-02, 3.39260846e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.66000111e-10, 1.66293874e-01, 8.28478187e-02, 9.06960517e-02,
        2.99729049e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.66000111e-10, 1.66293874e-01, 8.28478187e-02, 9.06960517e-02,
        1.70572344e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.66000111e-10, 1.66293874e-01, 5.50305694e-02, 3.34289223e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.66000111e-10, 1.66293874e-01, 5.50305694e-02, 1.03610381e-01,
        2.98136383e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.66000111e-10, 1.66293874e-01, 5.50305694e-02, 1.03610381e-01,
        2.12981384e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.66000111e-10, 5.35255224e-02, 3.18673670e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.66000111e-10, 5.35255224e-02, 8.20265850e-04]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.66000111e-10, 1.96856603e-01, 3.21854651e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.66000111e-10, 1.96856603e-01, 2.56185397e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([2.66000111e-10, 5.11567444e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44652366638183594
10 lb beta sum: 0.35648879408836365, worst -0.41555795073509216
Time: prepare 0.0005    bound 0.1319    transfer 0.0002    finalize 0.0002    func 0.1328    
Accumulated time: func 0.8354    prepare 0.0588    bound 0.7563    transfer 0.0051    finalize 0.0123    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1698] [/input-12, 79] [/input-12, 58] [/input-12, 2] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1690] [/input-12, 58] [/input-12, 46] [/input-12, 79] 
split level 4: [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 58] 
split level 5: [/input-8, 1611] [/input-8, 1611] [/input-8, 1943] [/input-8, 337] [/input-8, 1611] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5198925733566284, worst -0.28809595108032227
10 lb beta sum: 0.5158847570419312, worst -0.2671511769294739
Time: prepare 0.0160    bound 0.1269    transfer 0.0012    finalize 0.0020    func 0.1492    
Accumulated time: func 0.9847    prepare 0.0751    bound 0.8832    transfer 0.0063    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.58029568) min lb tensor(-0.26701909)
Number of Verified Splits: 314 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.53786301612854, worst -0.3884611129760742
10 lb beta sum: 0.644610583782196, worst -0.2662355899810791
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 5
#cuts 4-6: 20
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.33456993103027344 
BICCOS Cumulative time: 0.43705058097839355
Preprocessing time: 0.01015615463256836 Inference time: 0.31282782554626465 Add cuts time: 0.010186433792114258 Cut analysis time: 0.0013995170593261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26702 (6), -0.25414 (6), -0.24629 (6), -0.23347 (6), -0.22579 (6), -0.21932 (6), -0.21374 (6), -0.20568 (6), -0.19180 (6), -0.17875 (6), -0.15378 (6), -0.14883 (6), -0.14790 (6), -0.14110 (6), -0.14021 (6), -0.13489 (6), -0.12462 (6), -0.12280 (6), -0.11992 (6), -0.11974 (6), 
Length of domains: 70
Time: pickout 0.0006    decision 0.0181    set_bounds 0.0303    solve 0.1493    add 0.0020    
Accumulated time: pickout 0.0051    decision 0.6002    set_bounds 0.0980    solve 0.8003    add 0.5115    
Current (lb-rhs): -0.2670190930366516
270 domains visited
Cumulative time: 2.670750379562378

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 29] [/input-8, 1698] [/input-12, 79] 
split level 1: [/input-8, 338] [/input-8, 1618] [/input-8, 1052] [/input-8, 338] [/input-8, 1618] [/input-8, 1053] [/input-8, 1698] [/input-8, 1698] [/input-8, 338] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2569769024848938
10 lb beta sum: 0.1566627472639084, worst -0.25316646695137024
Time: prepare 0.0056    bound 0.1324    transfer 0.0017    finalize 0.0019    func 0.1434    
Accumulated time: func 1.1281    prepare 0.0809    bound 1.0156    transfer 0.0080    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.25871873) min lb tensor(-0.25310588)
Number of Verified Splits: 124 of 280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.021871566772460938 
BICCOS Cumulative time: 0.4589221477508545
Preprocessing time: 0.008241653442382812 Inference time: 0.011196374893188477 Add cuts time: 0.0017895698547363281 Cut analysis time: 0.0006439685821533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25311 (8), -0.23314 (8), -0.22959 (8), -0.22423 (8), -0.22222 (8), -0.22105 (8), -0.20942 (8), -0.20695 (8), -0.20579 (8), -0.20519 (8), -0.20309 (8), -0.20040 (8), -0.19593 (8), -0.19553 (8), -0.19133 (8), -0.19022 (8), -0.18910 (8), -0.18803 (8), -0.18687 (8), -0.18552 (8), 
Length of domains: 156
Time: pickout 0.0022    decision 0.0174    set_bounds 0.0171    solve 0.1435    add 0.0022    
Accumulated time: pickout 0.0073    decision 0.6176    set_bounds 0.1150    solve 0.9438    add 0.5137    
Current (lb-rhs): -0.25310587882995605
426 domains visited
Cumulative time: 2.8761157989501953

BaB round 3
batch: 156
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-8, 934] [/input-12, 29] [/input-8, 1626] [/input-8, 1690] [/input-12, 29] [/input-12, 29] [/input-8, 1713] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24481827020645142
10 lb beta sum: 0.19604286551475525, worst -0.24096226692199707
Time: prepare 0.0061    bound 0.1266    transfer 0.0010    finalize 0.0019    func 0.1377    
Accumulated time: func 1.2658    prepare 0.0871    bound 1.1422    transfer 0.0090    finalize 0.0182    
all_split False
======================Cut inference begins======================
max lb tensor(0.06092060) min lb tensor(-0.24088150)
Number of Verified Splits: 90 of 312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 9
#cuts 4-6: 14
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.020071983337402344 
BICCOS Cumulative time: 0.47899413108825684
Preprocessing time: 0.008933305740356445 Inference time: 0.008294820785522461 Add cuts time: 0.0014514923095703125 Cut analysis time: 0.001392364501953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24088 (9), -0.24016 (9), -0.22760 (9), -0.22512 (9), -0.21539 (9), -0.21311 (9), -0.21311 (9), -0.21019 (9), -0.20834 (9), -0.20205 (9), -0.19982 (9), -0.19909 (9), -0.19625 (9), -0.19589 (9), -0.19546 (9), -0.19458 (9), -0.19250 (9), -0.19004 (9), -0.18970 (9), -0.18648 (9), 
Length of domains: 222
Time: pickout 0.0025    decision 0.0198    set_bounds 0.0137    solve 0.1378    add 0.0038    
Accumulated time: pickout 0.0098    decision 0.6374    set_bounds 0.1287    solve 1.0815    add 0.5175    
Current (lb-rhs): -0.24088150262832642
648 domains visited
Cumulative time: 3.074601888656616

BaB round 4
batch: 222
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1698] [/input-8, 1690] [/input-8, 1052] [/input-8, 1053] [/input-8, 338] [/input-8, 1618] [/input-8, 1698] [/input-8, 934] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2401791214942932
10 lb beta sum: 0.20862410962581635, worst -0.2363995611667633
Time: prepare 0.0086    bound 0.1343    transfer 0.0025    finalize 0.0024    func 0.1507    
Accumulated time: func 1.4165    prepare 0.0960    bound 1.2765    transfer 0.0115    finalize 0.0206    
all_split False
======================Cut inference begins======================
max lb tensor(0.05524826) min lb tensor(-0.23636970)
Number of Verified Splits: 69 of 444
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 11
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.022213220596313477 
BICCOS Cumulative time: 0.5012073516845703
Preprocessing time: 0.01273202896118164 Inference time: 0.006709098815917969 Add cuts time: 0.002117156982421875 Cut analysis time: 0.0006549358367919922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23637 (10), -0.23537 (10), -0.22333 (10), -0.22139 (10), -0.22053 (10), -0.21796 (10), -0.21044 (10), -0.20797 (10), -0.20509 (10), -0.20509 (10), -0.20500 (10), -0.20437 (10), -0.20274 (10), -0.20269 (10), -0.20206 (10), -0.19974 (10), -0.19754 (10), -0.19691 (10), -0.18947 (10), -0.18863 (10), 
Length of domains: 375
Time: pickout 0.0031    decision 0.0229    set_bounds 0.0194    solve 0.1508    add 0.0039    
Accumulated time: pickout 0.0129    decision 0.6603    set_bounds 0.1482    solve 1.2324    add 0.5215    
Current (lb-rhs): -0.23636969923973083
1023 domains visited
Cumulative time: 3.297969341278076

BaB round 5
batch: 375
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 1034] [/input-8, 1611] [/input-8, 1618] [/input-8, 933] [/input-8, 1943] [/input-8, 1034] [/input-8, 1618] [/input-8, 1611] [/input-8, 338] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23295685648918152
10 lb beta sum: 0.21901986002922058, worst -0.2290978729724884
Time: prepare 0.0142    bound 0.1354    transfer 0.0011    finalize 0.0037    func 0.1592    
Accumulated time: func 1.5756    prepare 0.1103    bound 1.4119    transfer 0.0126    finalize 0.0243    
all_split False
======================Cut inference begins======================
max lb tensor(0.08279157) min lb tensor(-0.22906625)
Number of Verified Splits: 89 of 750
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 16
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.034601449966430664 
BICCOS Cumulative time: 0.535808801651001
Preprocessing time: 0.021270751953125 Inference time: 0.00935983657836914 Add cuts time: 0.003118753433227539 Cut analysis time: 0.0008521080017089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22907 (11), -0.22787 (11), -0.22708 (11), -0.22248 (11), -0.21594 (11), -0.21541 (11), -0.21351 (11), -0.21344 (11), -0.21273 (11), -0.21109 (11), -0.20576 (11), -0.20481 (11), -0.20311 (11), -0.20023 (11), -0.19770 (11), -0.19568 (11), -0.19422 (11), -0.19422 (11), -0.19397 (11), -0.19393 (11), 
Length of domains: 661
Time: pickout 0.0074    decision 0.0329    set_bounds 0.0324    solve 0.1593    add 0.0042    
Accumulated time: pickout 0.0203    decision 0.6931    set_bounds 0.1806    solve 1.3917    add 0.5256    
Current (lb-rhs): -0.22906625270843506
1684 domains visited
Cumulative time: 3.570070505142212

BaB round 6
batch: 661
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-8, 933] [/input-8, 1690] [/input-8, 1052] [/input-8, 913] [/input-8, 1713] [/input-8, 1943] [/input-8, 1953] [/input-8, 1716] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2302440106868744
10 lb beta sum: 0.20042335987091064, worst -0.22653135657310486
Time: prepare 0.0257    bound 0.1462    transfer 0.0130    finalize 0.0076    func 0.2018    
Accumulated time: func 1.7775    prepare 0.1363    bound 1.5581    transfer 0.0256    finalize 0.0319    
all_split False
======================Cut inference begins======================
max lb tensor(0.57682610) min lb tensor(-0.22651488)
Number of Verified Splits: 262 of 1322
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 6
#cuts 4-6: 28
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.07550835609436035 
BICCOS Cumulative time: 0.6113171577453613
Preprocessing time: 0.040195465087890625 Inference time: 0.030037641525268555 Add cuts time: 0.003949880599975586 Cut analysis time: 0.001325368881225586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22651 (12), -0.22526 (12), -0.22116 (12), -0.22019 (12), -0.21321 (12), -0.21259 (12), -0.21083 (12), -0.21080 (12), -0.21041 (12), -0.20995 (12), -0.20880 (12), -0.20828 (12), -0.20736 (12), -0.20301 (12), -0.20049 (12), -0.19981 (12), -0.19718 (12), -0.19574 (12), -0.19496 (12), -0.19372 (12), 
Length of domains: 1060
Time: pickout 0.0084    decision 0.0485    set_bounds 0.0558    solve 0.2022    add 0.0041    
Accumulated time: pickout 0.0287    decision 0.7416    set_bounds 0.2364    solve 1.5939    add 0.5297    
Current (lb-rhs): -0.22651487588882446
2744 domains visited
Cumulative time: 3.967376947402954

BaB round 7
batch: 1060
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1618] [/input-8, 1053] [/input-8, 1713] [/input-12, 61] [/input-8, 1626] [/input-8, 1953] [/input-8, 1943] [/input-8, 956] [/input-8, 1034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22845017910003662
10 lb beta sum: 0.18145865201950073, worst -0.22474604845046997
Time: prepare 0.0420    bound 0.1785    transfer 0.0177    finalize 0.0123    func 0.2648    
Accumulated time: func 2.0423    prepare 0.1785    bound 1.7366    transfer 0.0433    finalize 0.0442    
all_split False
======================Cut inference begins======================
max lb tensor(0.77997589) min lb tensor(-0.22473413)
Number of Verified Splits: 449 of 2120
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.1267402172088623 
BICCOS Cumulative time: 0.7380573749542236
Preprocessing time: 0.06601190567016602 Inference time: 0.05340385437011719 Add cuts time: 0.0060956478118896484 Cut analysis time: 0.0012288093566894531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22473 (13), -0.22341 (13), -0.21938 (13), -0.21764 (13), -0.21136 (13), -0.20971 (13), -0.20892 (13), -0.20889 (13), -0.20774 (13), -0.20707 (13), -0.20674 (13), -0.20563 (13), -0.20523 (13), -0.20114 (13), -0.19978 (13), -0.19855 (13), -0.19682 (13), -0.19398 (13), -0.19309 (13), -0.19168 (13), 
Length of domains: 1671
Time: pickout 0.0155    decision 0.2104    set_bounds 0.0895    solve 0.2654    add 0.0073    
Accumulated time: pickout 0.0442    decision 0.9520    set_bounds 0.3259    solve 1.8592    add 0.5371    
Current (lb-rhs): -0.2247341275215149
4415 domains visited
Cumulative time: 4.688015699386597

BaB round 8
batch: 1671
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1149] [/input-8, 1953] [/input-8, 1713] [/input-8, 1953] [/input-12, 61] [/input-8, 1611] [/input-8, 1713] [/input-12, 61] [/input-12, 61] [/input-8, 1149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2223874032497406
10 lb beta sum: 0.2202654778957367, worst -0.21866825222969055
Time: prepare 0.0675    bound 0.2466    transfer 0.0125    finalize 0.0182    func 0.3668    
Accumulated time: func 2.4091    prepare 0.2462    bound 1.9832    transfer 0.0558    finalize 0.0624    
all_split False
======================Cut inference begins======================
max lb tensor(0.76463079) min lb tensor(-0.21866506)
Number of Verified Splits: 1227 of 3342
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 7
#cuts 4-6: 15
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.4442622661590576 
BICCOS Cumulative time: 1.1823196411132812
Preprocessing time: 0.2772092819213867 Inference time: 0.14896416664123535 Add cuts time: 0.016641855239868164 Cut analysis time: 0.0014469623565673828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21867 (14), -0.21729 (14), -0.21684 (14), -0.21153 (14), -0.21033 (14), -0.20785 (14), -0.20634 (14), -0.20371 (14), -0.20246 (14), -0.20189 (14), -0.20175 (14), -0.20098 (14), -0.20081 (14), -0.20064 (14), -0.20001 (14), -0.19959 (14), -0.19912 (14), -0.19906 (14), -0.19584 (14), -0.19492 (14), 
Length of domains: 2115
Time: pickout 0.0281    decision 0.1028    set_bounds 0.1410    solve 0.3676    add 0.0067    
Accumulated time: pickout 0.0723    decision 1.0548    set_bounds 0.4669    solve 2.2268    add 0.5438    
Current (lb-rhs): -0.21866506338119507
6530 domains visited
Cumulative time: 5.795828580856323

BaB round 9
batch: 2115
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 345] [/input-8, 934] [/input-8, 934] [/input-8, 345] [/input-8, 1053] [/input-8, 1707] [/input-8, 1716] [/input, 3016] [/input-8, 939] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21658307313919067
10 lb beta sum: 0.2793160080909729, worst -0.2128542959690094
Time: prepare 0.0904    bound 0.2959    transfer 0.0214    finalize 0.0279    func 0.4640    
Accumulated time: func 2.8731    prepare 0.3369    bound 2.2791    transfer 0.0772    finalize 0.0903    
all_split False
======================Cut inference begins======================
max lb tensor(0.52746767) min lb tensor(-0.21284938)
Number of Verified Splits: 655 of 4230
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 7
#cuts 4-6: 23
#cuts 7-9: 27
#cuts >= 20: 0
BICCOS time: 0.39164161682128906 
BICCOS Cumulative time: 1.5739612579345703
Preprocessing time: 0.13201427459716797 Inference time: 0.24096941947937012 Add cuts time: 0.0160367488861084 Cut analysis time: 0.002621173858642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21285 (15), -0.21102 (15), -0.20984 (15), -0.20806 (15), -0.20571 (15), -0.20535 (15), -0.20442 (15), -0.20352 (15), -0.20121 (15), -0.20046 (15), -0.19838 (15), -0.19781 (15), -0.19718 (15), -0.19696 (15), -0.19657 (15), -0.19598 (15), -0.19582 (15), -0.19403 (15), -0.19371 (15), -0.19349 (15), 
Length of domains: 3575
Time: pickout 0.0298    decision 0.1250    set_bounds 0.1825    solve 0.4653    add 0.0167    
Accumulated time: pickout 0.1021    decision 1.1798    set_bounds 0.6495    solve 2.6922    add 0.5605    
Current (lb-rhs): -0.21284937858581543
10105 domains visited
Cumulative time: 7.018934965133667

BaB round 10
batch: 3575
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1707] [/input-8, 932] [/input-8, 1716] [/input-8, 1713] [/input-8, 1690] [/input, 2231] [/input, 2231] [/input-8, 1690] [/input-8, 1707] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20838695764541626
10 lb beta sum: 0.26954153180122375, worst -0.3047495484352112
Time: prepare 0.1560    bound 0.6238    transfer 0.0355    finalize 0.2347    func 1.0963    
Accumulated time: func 3.9694    prepare 0.4931    bound 2.9029    transfer 0.1127    finalize 0.3250    
all_split False
======================Cut inference begins======================
max lb tensor(0.54938406) min lb tensor(-0.20453778)
Number of Verified Splits: 1181 of 7150
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 89.
#cuts 1-3: 8
#cuts 4-6: 54
#cuts 7-9: 27
#cuts >= 20: 0
BICCOS time: 0.42958641052246094 
BICCOS Cumulative time: 2.0035476684570312
Preprocessing time: 0.22289562225341797 Inference time: 0.17588210105895996 Add cuts time: 0.026906251907348633 Cut analysis time: 0.003902435302734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20402 (16), -0.20346 (16), -0.20275 (16), -0.20226 (16), -0.20163 (16), -0.19834 (16), -0.19698 (16), -0.19653 (16), -0.19649 (16), -0.19599 (16), -0.19595 (16), -0.19532 (16), -0.19523 (16), -0.19499 (16), -0.19477 (16), -0.19419 (16), -0.19198 (16), -0.19130 (16), -0.19107 (16), 
Length of domains: 5969
Time: pickout 0.0624    decision 0.2004    set_bounds 0.3100    solve 1.0985    add 0.0206    
Accumulated time: pickout 0.1645    decision 1.3802    set_bounds 0.9595    solve 3.7906    add 0.5811    
Current (lb-rhs): -0.2045377790927887
16074 domains visited
Cumulative time: 9.15961480140686

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1953] [/input-8, 1943] [/input-8, 1943] [/input, 3016] [/input-12, 61] [/input, 2471] [/input-12, 61] [/input-8, 1610] [/input, 393] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20402094721794128
10 lb beta sum: 0.25723761320114136, worst -0.30712178349494934
Time: prepare 0.1899    bound 0.7144    transfer 0.0388    finalize 0.0574    func 1.0547    
Accumulated time: func 5.0242    prepare 0.6833    bound 3.6174    transfer 0.1515    finalize 0.3824    
all_split False
======================Cut inference begins======================
max lb tensor(0.62546223) min lb tensor(-0.20398521)
Number of Verified Splits: 1686 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 100.
#cuts 1-3: 8
#cuts 4-6: 52
#cuts 7-9: 39
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.7861151695251465 
BICCOS Cumulative time: 2.7896628379821777
Preprocessing time: 0.26247668266296387 Inference time: 0.25403308868408203 Add cuts time: 0.2650141716003418 Cut analysis time: 0.004591226577758789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20399 (17), -0.20334 (17), -0.20275 (16), -0.20226 (16), -0.20154 (17), -0.19830 (17), -0.19695 (17), -0.19653 (16), -0.19642 (17), -0.19595 (16), -0.19590 (17), -0.19524 (17), -0.19519 (17), -0.19492 (17), -0.19470 (17), -0.19409 (17), -0.19198 (16), -0.19130 (16), -0.19096 (17), 
Length of domains: 8379
Time: pickout 0.0596    decision 0.2286    set_bounds 0.5201    solve 1.0571    add 0.0318    
Accumulated time: pickout 0.2241    decision 1.6088    set_bounds 1.4796    solve 4.8477    add 0.6128    
Current (lb-rhs): -0.2045377790927887
22580 domains visited
current_vram/total_varm: 12.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.871496200561523

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3000] [/input, 3017] [/input-8, 1716] [/input-8, 1707] [/input, 2231] [/input-8, 604] [/input-8, 1943] [/input-8, 1943] [/input-8, 1707] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2045384645462036
10 lb beta sum: 0.2666124701499939, worst -0.30110689997673035
Time: prepare 0.3862    bound 1.3569    transfer 0.0737    finalize 0.1096    func 2.0345    
Accumulated time: func 7.0587    prepare 1.0698    bound 4.9743    transfer 0.2252    finalize 0.4920    
all_split False
======================Cut inference begins======================
max lb tensor(0.63792461) min lb tensor(-0.20452732)
Number of Verified Splits: 3087 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 178.
#cuts 1-3: 8
#cuts 4-6: 78
#cuts 7-9: 86
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 1.142188310623169 
BICCOS Cumulative time: 3.9318511486053467
Preprocessing time: 0.5360534191131592 Inference time: 0.4964592456817627 Add cuts time: 0.1010885238647461 Cut analysis time: 0.008587121963500977
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20453 (17), -0.20273 (17), -0.20222 (17), -0.19969 (18), -0.19755 (18), -0.19653 (17), -0.19593 (17), -0.19575 (18), -0.19539 (18), -0.19401 (18), -0.19359 (18), -0.19270 (18), -0.19259 (18), -0.19207 (18), -0.19194 (17), -0.19123 (17), -0.19093 (18), -0.19084 (18), -0.19033 (18), -0.19012 (18), 
Length of domains: 13484
Time: pickout 0.1182    decision 0.4456    set_bounds 0.9382    solve 2.2930    add 0.0399    
Accumulated time: pickout 0.3422    decision 2.0544    set_bounds 2.4178    solve 7.1407    add 0.6528    
Current (lb-rhs): -0.20452731847763062
35877 domains visited
current_vram/total_varm: 22.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.90186381340027

BaB round 13
batch: 13484
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-8, 1641] [/input, 3017] [/input-8, 1724] [/input, 2457] [/input-8, 1943] [/input-12, 61] [/input-8, 1610] [/input-8, 1943] [/input, 3000] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20027869939804077
10 lb beta sum: 0.24533961713314056, worst -0.20023322105407715
Time: prepare 0.6607    bound 2.3530    transfer 0.1301    finalize 0.5112    func 3.8301    
Accumulated time: func 10.8888    prepare 1.7308    bound 7.3273    transfer 0.3553    finalize 1.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.79862392) min lb tensor(-0.20022604)
Number of Verified Splits: 5283 of 26968
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 272.
#cuts 1-3: 8
#cuts 4-6: 126
#cuts 7-9: 126
#cuts 10-12: 12
#cuts >= 20: 0
BICCOS time: 2.3512332439422607 
BICCOS Cumulative time: 6.283084392547607
Preprocessing time: 0.8752892017364502 Inference time: 1.2629647254943848 Add cuts time: 0.19965362548828125 Cut analysis time: 0.013325691223144531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20023 (18), -0.19844 (18), -0.19792 (18), -0.19356 (19), -0.19322 (19), -0.19313 (18), -0.19200 (19), -0.19164 (18), -0.19142 (19), -0.19133 (18), -0.19116 (19), -0.19091 (18), -0.19059 (18), -0.18935 (19), -0.18877 (18), -0.18804 (19), -0.18767 (18), -0.18696 (18), -0.18676 (19), -0.18637 (19), 
Length of domains: 21685
Time: pickout 0.2477    decision 1.0051    set_bounds 1.4863    solve 3.8356    add 0.0635    
Accumulated time: pickout 0.5899    decision 3.0595    set_bounds 3.9041    solve 10.9764    add 0.7163    
Current (lb-rhs): -0.2002260386943817
57562 domains visited
Cumulative time: 25.980706453323364

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 345] [/input-8, 625] [/input-8, 1618] [/input-8, 1713] [/input-8, 625] [/input, 2231] [/input-8, 1707] [/input-8, 934] [/input-8, 1943] [/input, 2232] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1879589557647705
10 lb beta sum: 0.22736328840255737, worst -0.2852557301521301
Time: prepare 0.8307    bound 3.0266    transfer 0.1468    finalize 0.2399    func 4.4597    
Accumulated time: func 15.3485    prepare 2.5619    bound 10.3539    transfer 0.5021    finalize 1.2432    
all_split False
======================Cut inference begins======================
max lb tensor(0.82217491) min lb tensor(-0.18788698)
Number of Verified Splits: 7323 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 303.
#cuts 1-3: 9
#cuts 4-6: 135
#cuts 7-9: 138
#cuts 10-12: 20
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 3.155836820602417 
BICCOS Cumulative time: 9.438921213150024
Preprocessing time: 1.567122459411621 Inference time: 1.2722833156585693 Add cuts time: 0.30144762992858887 Cut analysis time: 0.014983415603637695
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20023 (18), -0.19844 (18), -0.19792 (18), -0.19356 (19), -0.19322 (19), -0.19164 (18), -0.19142 (19), -0.19059 (18), -0.18804 (19), -0.18789 (20), -0.18767 (18), -0.18732 (19), -0.18701 (20), -0.18696 (18), -0.18676 (19), -0.18594 (19), -0.18577 (19), -0.18552 (19), -0.18520 (20), -0.18519 (19), 
Length of domains: 30746
Time: pickout 0.2661    decision 1.6622    set_bounds 2.2759    solve 4.4674    add 0.0878    
Accumulated time: pickout 0.8561    decision 4.7217    set_bounds 6.1800    solve 15.4438    add 0.8041    
Current (lb-rhs): -0.2002260386943817
83007 domains visited
Cumulative time: 38.014164209365845

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1641] [/input-8, 1618] [/input-8, 1618] [/input-8, 913] [/input, 3016] [/input-12, 61] [/input-8, 956] [/input-8, 1618] [/input-8, 1053] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19449788331985474
10 lb beta sum: 0.22119829058647156, worst -0.19442960619926453
Time: prepare 0.8485    bound 3.0848    transfer 0.1472    finalize 0.2487    func 4.5444    
Accumulated time: func 19.8930    prepare 3.4107    bound 13.4388    transfer 0.6493    finalize 1.4918    
all_split False
======================Cut inference begins======================
max lb tensor(0.85272312) min lb tensor(-0.19440335)
Number of Verified Splits: 7808 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 316.
#cuts 1-3: 9
#cuts 4-6: 143
#cuts 7-9: 143
#cuts 10-12: 20
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 3.477962017059326 
BICCOS Cumulative time: 12.91688323020935
Preprocessing time: 1.7215428352355957 Inference time: 1.3728728294372559 Add cuts time: 0.3682215213775635 Cut analysis time: 0.015324831008911133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19440 (19), -0.19262 (19), -0.19247 (19), -0.19179 (19), -0.19068 (19), -0.19021 (19), -0.18951 (20), -0.18906 (20), -0.18789 (20), -0.18732 (19), -0.18726 (20), -0.18701 (20), -0.18629 (19), -0.18573 (19), -0.18552 (19), -0.18520 (20), -0.18460 (19), -0.18442 (19), -0.18396 (20), -0.18391 (19), 
Length of domains: 39322
Time: pickout 0.2770    decision 1.9163    set_bounds 2.1152    solve 4.5521    add 0.1146    
Accumulated time: pickout 1.1331    decision 6.6380    set_bounds 8.2952    solve 19.9959    add 0.9186    
Current (lb-rhs): -0.19440335035324097
107967 domains visited
Cumulative time: 50.599266052246094

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 913] [/input-8, 1149] [/input-12, 61] [/input, 2248] [/input-8, 956] [/input-8, 956] [/input, 2231] [/input-8, 956] [/input-8, 1641] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18834316730499268
10 lb beta sum: 0.20814093947410583, worst -0.18832629919052124
Time: prepare 0.8543    bound 3.1075    transfer 0.1473    finalize 0.9327    func 5.2521    
Accumulated time: func 25.1451    prepare 4.2655    bound 16.5463    transfer 0.7966    finalize 2.4245    
all_split False
======================Cut inference begins======================
max lb tensor(0.81968617) min lb tensor(-0.18831602)
Number of Verified Splits: 8462 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 383.
#cuts 1-3: 9
#cuts 4-6: 165
#cuts 7-9: 185
#cuts 10-12: 24
#cuts >= 20: 0
BICCOS time: 3.854395866394043 
BICCOS Cumulative time: 16.771279096603394
Preprocessing time: 1.1285653114318848 Inference time: 2.2336881160736084 Add cuts time: 0.47334742546081543 Cut analysis time: 0.018795013427734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19440 (19), -0.19262 (19), -0.19179 (19), -0.18951 (20), -0.18906 (20), -0.18832 (20), -0.18726 (20), -0.18653 (20), -0.18629 (19), -0.18610 (20), -0.18573 (19), -0.18396 (20), -0.18304 (20), -0.18235 (20), -0.18174 (19), -0.18163 (20), -0.18134 (20), -0.18125 (20), -0.18097 (21), -0.18097 (20), 
Length of domains: 47244
Time: pickout 0.2835    decision 1.6621    set_bounds 2.2037    solve 5.2605    add 0.0877    
Accumulated time: pickout 1.4165    decision 8.3002    set_bounds 10.4989    solve 25.2563    add 1.0064    
Current (lb-rhs): -0.19440335035324097
132273 domains visited
Cumulative time: 64.09380006790161

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-8, 932] [/input-8, 1943] [/input, 3000] [/input-8, 933] [/input-8, 1618] [/input, 2201] [/input-8, 956] [/input, 2201] [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1902775764465332
10 lb beta sum: 0.20626381039619446, worst -0.190257728099823
Time: prepare 0.8734    bound 3.2290    transfer 0.1483    finalize 0.2871    func 4.7594    
Accumulated time: func 29.9045    prepare 5.1394    bound 19.7753    transfer 0.9449    finalize 2.7116    
all_split False
======================Cut inference begins======================
max lb tensor(0.88442802) min lb tensor(-0.19023740)
Number of Verified Splits: 7583 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 425.
#cuts 1-3: 11
#cuts 4-6: 140
#cuts 7-9: 231
#cuts 10-12: 43
#cuts >= 20: 0
BICCOS time: 3.8814542293548584 
BICCOS Cumulative time: 20.652733325958252
Preprocessing time: 1.155341625213623 Inference time: 2.214824914932251 Add cuts time: 0.48908567428588867 Cut analysis time: 0.022202014923095703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19024 (20), -0.18846 (20), -0.18832 (20), -0.18772 (20), -0.18653 (20), -0.18610 (20), -0.18304 (20), -0.18266 (21), -0.18247 (21), -0.18219 (20), -0.18198 (21), -0.18177 (21), -0.18159 (20), -0.18125 (20), -0.18097 (21), -0.18097 (20), -0.18082 (21), -0.18043 (20), -0.18039 (20), -0.18011 (21), 
Length of domains: 56045
Time: pickout 0.2941    decision 1.6632    set_bounds 2.3859    solve 4.7693    add 0.0871    
Accumulated time: pickout 1.7106    decision 9.9634    set_bounds 12.8847    solve 30.0257    add 1.0935    
Current (lb-rhs): -0.1902374029159546
157458 domains visited
Cumulative time: 77.31177592277527

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2231] [/input, 3000] [/input-8, 625] [/input, 3000] [/input, 2184] [/input, 3016] [/input-8, 625] [/input, 2232] [/input, 2471] [/input, 3016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17835748195648193
10 lb beta sum: 0.2862551510334015, worst -0.25818777084350586
Time: prepare 0.8862    bound 3.3470    transfer 0.1477    finalize 0.2845    func 4.8827    
Accumulated time: func 34.7872    prepare 6.0260    bound 23.1224    transfer 1.0926    finalize 2.9961    
all_split False
======================Cut inference begins======================
max lb tensor(1.16576982) min lb tensor(-0.17830259)
Number of Verified Splits: 10453 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 94.
#cuts 1-3: 21
#cuts 4-6: 33
#cuts 7-9: 33
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 4.427241802215576 
BICCOS Cumulative time: 25.079975128173828
Preprocessing time: 1.1684823036193848 Inference time: 2.837754726409912 Add cuts time: 0.41652369499206543 Cut analysis time: 0.004481077194213867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19024 (20), -0.18846 (20), -0.18832 (20), -0.18772 (20), -0.18653 (20), -0.18610 (20), -0.18304 (20), -0.18266 (21), -0.18247 (21), -0.18219 (20), -0.18198 (21), -0.18177 (21), -0.18159 (20), -0.18125 (20), -0.18082 (21), -0.18043 (20), -0.18039 (20), -0.18011 (21), -0.18003 (21), -0.17996 (21), 
Length of domains: 61976
Time: pickout 0.2975    decision 1.6839    set_bounds 2.5011    solve 4.8927    add 0.0859    
Accumulated time: pickout 2.0081    decision 11.6472    set_bounds 15.3859    solve 34.9183    add 1.1794    
Current (lb-rhs): -0.1902374029159546
179773 domains visited
Cumulative time: 91.37590050697327

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3466] [/input, 3016] [/input, 2249] [/input-8, 1943] [/input-8, 932] [/input-8, 1149] [/input, 3016] [/input-8, 934] [/input, 3000] [/input, 3017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18147307634353638
10 lb beta sum: 0.70499587059021, worst -0.2490457147359848
Time: prepare 0.8758    bound 2.6584    transfer 0.1468    finalize 0.2851    func 4.1860    
Accumulated time: func 38.9732    prepare 6.9022    bound 25.7808    transfer 1.2394    finalize 3.2812    
all_split False
======================Cut inference begins======================
max lb tensor(1.13960958) min lb tensor(-0.18133292)
Number of Verified Splits: 19419 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 21
#cuts 7-9: 12
#cuts 10-12: 8
#cuts >= 20: 0
BICCOS time: 6.012543439865112 
BICCOS Cumulative time: 31.09251856803894
Preprocessing time: 1.154456377029419 Inference time: 4.4680891036987305 Add cuts time: 0.3878169059753418 Cut analysis time: 0.0021810531616210938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19024 (20), -0.18846 (20), -0.18772 (20), -0.18266 (21), -0.18247 (21), -0.18219 (20), -0.18198 (21), -0.18177 (21), -0.18159 (20), -0.18133 (21), -0.18116 (21), -0.18011 (21), -0.18003 (21), -0.17946 (21), -0.17943 (21), -0.17915 (21), -0.17907 (21), -0.17830 (22), -0.17814 (22), -0.17760 (20), 
Length of domains: 58941
Time: pickout 0.3065    decision 1.6758    set_bounds 2.6012    solve 4.1990    add 0.0614    
Accumulated time: pickout 2.3146    decision 13.3230    set_bounds 17.9871    solve 39.1173    add 1.2408    
Current (lb-rhs): -0.1902374029159546
193122 domains visited
Cumulative time: 106.50444960594177

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1649] [/input-8, 1149] [/input-8, 1052] [/input-8, 1943] [/input-8, 1149] [/input-8, 1149] [/input-8, 1641] [/input-8, 946] [/input-8, 913] [/input-8, 1697] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1800331175327301
10 lb beta sum: 1.372478723526001, worst -0.20933640003204346
Time: prepare 0.9412    bound 2.5476    transfer 0.1470    finalize 0.2542    func 4.1071    
Accumulated time: func 43.0803    prepare 7.8438    bound 28.3284    transfer 1.3863    finalize 3.5354    
all_split False
======================Cut inference begins======================
max lb tensor(1.33681631) min lb tensor(-0.17652166)
Number of Verified Splits: 30369 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 8.28263545036316 
BICCOS Cumulative time: 39.3751540184021
Preprocessing time: 1.1704564094543457 Inference time: 6.550472974777222 Add cuts time: 0.5609662532806396 Cut analysis time: 0.0007398128509521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19024 (20), -0.18846 (20), -0.18772 (20), -0.18247 (21), -0.18219 (20), -0.18177 (21), -0.18159 (20), -0.18133 (21), -0.18116 (21), -0.18003 (21), -0.17946 (21), -0.17943 (21), -0.17915 (21), -0.17907 (21), -0.17830 (22), -0.17814 (22), -0.17760 (20), -0.17732 (22), -0.17677 (21), -0.17668 (20), 
Length of domains: 44956
Time: pickout 0.3478    decision 1.6656    set_bounds 2.5712    solve 4.1167    add 0.0278    
Accumulated time: pickout 2.6624    decision 14.9886    set_bounds 20.5583    solve 43.2340    add 1.2686    
Current (lb-rhs): -0.1902374029159546
195521 domains visited
Cumulative time: 123.90732741355896

BaB round 21
batch: 16384
splitting decisions: 
split level 0: [/input-8, 1707] [/input-8, 933] [/input, 2168] [/input-8, 1707] [/input-8, 933] [/input, 3016] [/input, 2456] [/input, 2232] [/input-12, 61] [/input-8, 1953] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18341434001922607
10 lb beta sum: 0.2267313003540039, worst -0.007261425256729126
Time: prepare 0.8918    bound 1.4120    transfer 0.1469    finalize 0.2819    func 3.7759    
Accumulated time: func 46.8562    prepare 8.7361    bound 29.7405    transfer 1.5332    finalize 3.8173    
all_split False
======================Cut inference begins======================
max lb tensor(0.67620128) min lb tensor(5.96046448e-06)
Number of Verified Splits: 32768 of 32768
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.1763873100280762 
BICCOS Cumulative time: 40.551541328430176
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18133 (21), -0.18116 (21), -0.17946 (21), -0.17943 (21), -0.17915 (21), -0.17907 (21), -0.17830 (22), -0.17814 (22), -0.17732 (22), -0.17652 (22), -0.17590 (22), -0.17450 (22), -0.17434 (22), -0.17373 (22), -0.17365 (21), -0.17347 (22), -0.17335 (21), -0.17321 (21), -0.17319 (22), -0.17278 (21), 
Length of domains: 28572
Time: pickout 0.3616    decision 1.6876    set_bounds 2.4141    solve 3.7842    add 0.0165    
Accumulated time: pickout 3.0240    decision 16.6762    set_bounds 22.9724    solve 47.0182    add 1.2851    
Current (lb-rhs): -0.18133291602134705
195521 domains visited
Cumulative time: 133.74795365333557

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 604] [/input, 3000] [/input, 2471] [/input-8, 933] [/input-8, 1610] [/input, 2201] [/input-8, 1610] [/input-8, 956] [/input-8, 1610] [/input, 2232] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1752602756023407
10 lb beta sum: 0.2273762971162796, worst -0.006707102060317993
Time: prepare 0.8888    bound 1.4090    transfer 0.1485    finalize 0.2427    func 2.9076    
Accumulated time: func 49.7638    prepare 9.6253    bound 31.1495    transfer 1.6817    finalize 4.0600    
all_split False
======================Cut inference begins======================
max lb tensor(0.67160159) min lb tensor(7.45058060e-06)
Number of Verified Splits: 32768 of 32768
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.8597426414489746 
BICCOS Cumulative time: 42.41128396987915
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18133 (21), -0.18116 (21), -0.17946 (21), -0.17943 (21), -0.17915 (21), -0.17907 (21), -0.17814 (22), -0.17732 (22), -0.17652 (22), -0.17590 (22), -0.17373 (22), -0.17321 (21), -0.17319 (22), -0.17278 (21), -0.17273 (22), -0.17255 (21), -0.17220 (22), -0.17205 (22), -0.17142 (22), -0.17128 (22), 
Length of domains: 12188
Time: pickout 0.3597    decision 1.6639    set_bounds 2.2810    solve 2.9165    add 0.0138    
Accumulated time: pickout 3.3836    decision 18.3401    set_bounds 25.2534    solve 49.9347    add 1.2989    
Current (lb-rhs): -0.18133291602134705
195521 domains visited
Cumulative time: 143.21182990074158

BaB round 23
batch: 12188
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 959] [/input-8, 1610] [/input-8, 933] [/input-8, 1634] [/input-8, 1610] [/input-8, 1634] [/input-8, 933] [/input, 393] [/input-8, 913] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17871719598770142
10 lb beta sum: 0.2417617291212082, worst -0.006833463907241821
Time: prepare 0.6345    bound 1.0652    transfer 0.1173    finalize 0.1773    func 2.1565    
Accumulated time: func 51.9203    prepare 10.2601    bound 32.2147    transfer 1.7990    finalize 4.2374    
all_split False
======================Cut inference begins======================
max lb tensor(0.61275619) min lb tensor(5.42402267e-06)
Number of Verified Splits: 24376 of 24376
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.8631789684295654 
BICCOS Cumulative time: 43.274462938308716
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.2465    decision 0.6818    set_bounds 1.6462    solve 2.1629    add 0.0033    
Accumulated time: pickout 3.6301    decision 19.0219    set_bounds 26.8995    solve 52.0976    add 1.3022    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
195521 domains visited
Cumulative time: 149.06165742874146


Properties batch 4, size 1
Remaining timeout: 47.07604765892029
Verifying property 4 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39791703]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39791703]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011014938354492188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39791321754455566
10 lb beta sum: 0.0, worst -0.397921085357666
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 32] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 913] 
split level 13: [/input-12, 29] 
split level 14: [/input-8, 1697] 
split level 15: [/input-8, 171] 
split level 16: [/input-8, 1953] 
split level 17: [/input, 966] 
split level 18: [/input-8, 933] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1716] 
split level 21: [/input-8, 942] 
split level 22: [/input-8, 934] 
split level 23: [/input, 949] 
split level 24: [/input, 3509] 
split level 25: [/input-8, 180] 
split level 26: [/input-8, 1707] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 1642] 
split level 29: [/input, 2485] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 179] 
split level 32: [/input-8, 1724] 
split level 33: [/input, 952] 
split level 34: [/input-8, 1626] 
split level 35: [/input-8, 939] 
split level 36: [/input-8, 241] 
split level 37: [/input-8, 1206] 
split level 38: [/input, 938] 
split level 39: [/input-8, 1053] 
split level 40: [/input-8, 181] 
split level 41: [/input, 2474] 
split level 42: [/input, 936] 
split level 43: [/input-8, 1052] 
split level 44: [/input-8, 1947] 
split level 45: [/input, 2459] 
split level 46: [/input, 2231] 
split level 47: [/input-8, 1780] 
split level 48: [/input-8, 337] 
split level 49: [/input, 923] 
split level 50: [/input-8, 361] 
split level 51: [/input, 2455] 
split level 52: [/input-8, 2001] 
split level 53: [/input, 3533] 
split level 54: [/input, 3518] 
split level 55: [/input-8, 345] 
split level 56: [/input-8, 338] 
split level 57: [/input, 1941] 
split level 58: [/input, 506] 
split level 59: [/input, 2488] 
split level 60: [/input, 3016] 
split level 61: [/input, 2456] 
split level 62: [/input-8, 1765] 
split level 63: [/input-8, 1084] 
split level 64: [/input, 2230] 
split level 65: [/input, 2202] 
split level 66: [/input, 2473] 
split level 67: [/input, 2471] 
split level 68: [/input, 3516] 
split level 69: [/input-8, 1939] 
split level 70: [/input, 957] 
split level 71: [/input, 2490] 
split level 72: [/input, 2232] 
split level 73: [/input, 2388] 
split level 74: [/input-8, 186] 
split level 75: [/input-8, 232] 
split level 76: [/input, 2535] 
split level 77: [/input, 2472] 
split level 78: [/input, 2476] 
split level 79: [/input, 2220] 
split level 80: [/input, 2489] 
split level 81: [/input, 958] 
split level 82: [/input, 2475] 
split level 83: [/input, 420] 
split level 84: [/input-8, 959] 
split level 85: [/input, 2203] 
split level 86: [/input, 2218] 
split level 87: [/input, 941] 
split level 88: [/input, 2494] 
split level 89: [/input, 404] 
split level 90: [/input, 904] 
split level 91: [/input, 2406] 
split level 92: [/input-8, 330] 
split level 93: [/input-8, 299] 
split level 94: [/input-8, 1943] 
split level 95: [/input-8, 951] 
split level 96: [/input, 907] 
split level 97: [/input, 2219] 
split level 98: [/input, 3517] 
split level 99: [/input, 2180] 
split level 100: [/input, 2201] 
split level 101: [/input, 393] 
split level 102: [/input-8, 950] 
split level 103: [/input, 2217] 
split level 104: [/input, 963] 
split level 105: [/input, 2371] 
split level 106: [/input-8, 1598] 
split level 107: [/input, 946] 
split level 108: [/input, 2167] 
split level 109: [/input-8, 1523] 
split level 110: [/input, 2148] 
split level 111: [/input, 955] 
split level 112: [/input, 2254] 
split level 113: [/input, 971] 
split level 114: [/input, 920] 
split level 115: [/input, 2184] 
split level 116: [/input-8, 1980] 
split level 117: [/input, 2491] 
split level 118: [/input, 2457] 
split level 119: [/input, 1316] 
split level 120: [/input, 2238] 
split level 121: [/input, 2188] 
split level 122: [/input-8, 897] 
split level 123: [/input, 905] 
split level 124: [/input, 435] 
split level 125: [/input, 2835] 
split level 126: [/input, 2439] 
split level 127: [/input, 2186] 
split level 128: [/input, 2204] 
split level 129: [/input-8, 1807] 
split level 130: [/input-8, 240] 
split level 131: [/input, 1333] 
split level 132: [/input, 2253] 
split level 133: [/input, 474] 
split level 134: [/input, 2744] 
split level 135: [/input, 2542] 
split level 136: [/input, 2169] 
split level 137: [/input, 2509] 
split level 138: [/input, 2236] 
split level 139: [/input, 1978] 
split level 140: [/input, 2221] 
split level 141: [/input, 501] 
split level 142: [/input, 2185] 
split level 143: [/input, 2168] 
split level 144: [/input, 1013] 
split level 145: [/input-8, 242] 
split level 146: [/input, 3411] 
split level 147: [/input, 421] 
split level 148: [/input, 1349] 
split level 149: [/input, 925] 
split level 150: [/input, 3017] 
split level 151: [/input, 2484] 
split level 152: [/input, 2505] 
split level 153: [/input-8, 209] 
split level 154: [/input, 2493] 
split level 155: [/input, 2477] 
split level 156: [/input, 1015] 
split level 157: [/input, 730] 
split level 158: [/input-8, 217] 
split level 159: [/input, 1979] 
split level 160: [/input, 2205] 
split level 161: [/input, 2270] 
split level 162: [/input, 344] 
split level 163: [/input, 2239] 
split level 164: [/input, 2251] 
split level 165: [/input, 1350] 
split level 166: [/input, 2196] 
split level 167: [/input, 2206] 
split level 168: [/input, 2762] 
split level 169: [/input-8, 204] 
split level 170: [/input, 2255] 
split level 171: [/input-8, 213] 
split level 172: [/input, 2156] 
split level 173: [/input, 3468] 
split level 174: [/input, 3582] 
split level 175: [/input, 2390] 
split level 176: [/input, 2444] 
split level 177: [/input, 2883] 
split level 178: [/input, 2250] 
split level 179: [/input, 2468] 
split level 180: [/input, 2764] 
split level 181: [/input, 2189] 
split level 182: [/input, 2153] 
split level 183: [/input, 714] 
split level 184: [/input, 2170] 
split level 185: [/input, 2442] 
split level 186: [/input, 2412] 
split level 187: [/input-8, 212] 
split level 188: [/input-8, 941] 
split level 189: [/input, 2524] 
split level 190: [/input, 69] 
split level 191: [/input, 3466] 
split level 192: [/input, 985] 
split level 193: [/input-8, 196] 
split level 194: [/input, 2284] 
split level 195: [/input, 713] 
split level 196: [/input, 2269] 
split level 197: [/input, 2426] 
split level 198: [/input, 1317] 
split level 199: [/input, 2461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39780569076538086
10 lb beta sum: 0.0, worst -0.39780473709106445
Time: prepare 0.0115    bound 0.0994    transfer 0.0024    finalize 0.0026    func 0.1184    
Accumulated time: func 0.1716    prepare 0.0215    bound 0.1521    transfer 0.0025    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.31654692) min lb tensor(-0.39780140)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010315179824829102 
BICCOS Cumulative time: 0.010315179824829102
Preprocessing time: 0.00988626480102539 Inference time: 0.00015091896057128906 Add cuts time: 5.984306335449219e-05 Cut analysis time: 0.0002181529998779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38675 (1), -0.38674 (1), -0.38668 (1), -0.38634 (1), -0.38618 (1), -0.38611 (1), -0.38575 (1), -0.38533 (1), -0.38523 (1), -0.38440 (1), -0.38420 (1), -0.38388 (1), -0.38387 (1), -0.38365 (1), -0.38343 (1), -0.38311 (1), -0.38193 (1), -0.38097 (1), -0.38005 (1), -0.37949 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5064    set_bounds 0.0085    solve 0.1185    add 0.0699    
Accumulated time: pickout 0.0003    decision 0.5064    set_bounds 0.0085    solve 0.1185    add 0.0699    
Current (lb-rhs): -0.3867478370666504
50 domains visited
Cumulative time: 0.7722799777984619

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 90] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.33322596549987793
10 lb beta sum: 0.5662729740142822, worst -0.3074212670326233
Time: prepare 0.0070    bound 0.1156    transfer 0.0008    finalize 0.0023    func 0.1283    
Accumulated time: func 0.2999    prepare 0.0287    bound 0.2677    transfer 0.0032    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.15883493) min lb tensor(-0.30725318)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013572931289672852 
BICCOS Cumulative time: 0.023888111114501953
Preprocessing time: 0.011532783508300781 Inference time: 0.0008192062377929688 Add cuts time: 0.00033664703369140625 Cut analysis time: 0.0008842945098876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11358 (2), -0.11339 (2), -0.11336 (2), -0.11193 (2), -0.11011 (2), -0.11003 (2), -0.10958 (2), -0.10954 (2), -0.10898 (2), -0.10526 (2), -0.10119 (2), -0.09828 (2), -0.09652 (2), -0.09403 (2), -0.09350 (2), -0.09350 (2), -0.09187 (2), -0.09110 (2), -0.09104 (2), -0.08951 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0378    set_bounds 0.0128    solve 0.1284    add 0.0798    
Accumulated time: pickout 0.0015    decision 0.5443    set_bounds 0.0213    solve 0.2469    add 0.1497    
Current (lb-rhs): -0.11357936263084412
100 domains visited
Cumulative time: 1.0461344718933105

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 46] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11403274536132812
10 lb beta sum: 0.7810041904449463, worst -0.03163552284240723
Time: prepare 0.0061    bound 0.1144    transfer 0.0008    finalize 0.0020    func 0.1265    
Accumulated time: func 0.4264    prepare 0.0351    bound 0.3821    transfer 0.0040    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.19254750) min lb tensor(-0.02890414)
Number of Verified Splits: 390 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03474283218383789 
BICCOS Cumulative time: 0.058630943298339844
Preprocessing time: 0.011458396911621094 Inference time: 0.017399072647094727 Add cuts time: 0.005547285079956055 Cut analysis time: 0.0003380775451660156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0194    set_bounds 0.0153    solve 0.1266    add 0.0191    
Accumulated time: pickout 0.0025    decision 0.5636    set_bounds 0.0367    solve 0.3735    add 0.1688    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([8.89198937e-10, 2.14390919e-01, 1.12843201e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([8.89198937e-10, 2.14390919e-01, 8.70283097e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2]), tensor([-1.,  1.]), tensor([0, 0]), tensor([8.89198937e-10, 1.19284615e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.00123831e-11, 1.98599026e-01, 1.07568666e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.00123831e-11, 1.98599026e-01, 1.49745215e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.00123831e-11, 1.24920562e-01, 9.77414995e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.00123831e-11, 1.24920562e-01, 9.57853943e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20904254913330078
10 lb beta sum: 0.7455807328224182, worst -0.12239235639572144
Time: prepare 0.0004    bound 0.1254    transfer 0.0002    finalize 0.0002    func 0.1262    
Accumulated time: func 0.5526    prepare 0.0355    bound 0.5075    transfer 0.0042    finalize 0.0073    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 1.539811134338379, worst 0.061792612075805664

all verified at 0th iter
Time: prepare 0.0094    bound 0.0048    transfer 0.0006    finalize 0.0012    func 0.0177    
Accumulated time: func 0.5703    prepare 0.0453    bound 0.5124    transfer 0.0047    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(1.16297388) min lb tensor(0.06179261)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.006440401077270508 
BICCOS Cumulative time: 0.06507134437561035
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0218    set_bounds 0.0208    solve 0.0177    add 0.0001    
Accumulated time: pickout 0.0029    decision 0.5854    set_bounds 0.0575    solve 0.3912    add 0.1689    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.4737305641174316


Properties batch 5, size 1
Remaining timeout: 45.368141174316406
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 45.36806654930115
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 45.368043661117554
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 45.368024587631226
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 154.6327 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 566] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 566] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 276] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08655155,  2.27971554, -0.70720458,  0.21668959, -1.24121761,
          0.14262724, -0.35904831,  2.26373219,  0.64331293]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.99808788, -18.69559097, -14.74748039, -15.45328903, -14.09618664,
          -15.44491768, -14.31151581, -15.40262127, -18.31984901, -16.73563576],
         [-15.99808788, -18.69559097, -14.74748039, -15.45328903, -14.09618664,
          -15.44491768, -14.31151581, -15.40262127, -18.31984901, -16.73563576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43596458, -0.21532917,  1.09110546]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0557 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [589]; unstable size 589; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 589] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 589] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 589] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 278] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90512073,  2.61773014, -0.68264675, -0.29089296, -1.19851422,
          0.45634830,  0.37348235, -0.85104167,  1.92439890]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576],
         [-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76689339,  0.52877808,  0.06673813, -0.04459190,  0.84817886]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0506 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 482] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 482] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 209] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94138551,  2.94850779, -1.16203499,  0.27302694, -2.38051248,
         -0.17814422, -2.52197599,  5.83368587,  2.26016045]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358],
         [-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01959991, -1.54471207,  0.83966255, -1.47522926]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0453 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.38834953, -31.51884651, -29.35291672, -31.02542496, -30.66601372,
         -31.39447021, -32.53964615, -32.87446594, -24.85302734, -31.34247780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 590] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 590] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 207] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.28638101, 5.51830244, 2.94133306, 4.63216543, 3.96261096, 4.82937765,
         6.07474232, 5.84654713, 5.52136803]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0328 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 595] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 232] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.10743809,  5.94193125,  6.68529749,  5.16697359,  7.68069744,
          6.76294994,  6.25847960,  0.80630112, -0.04625988]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.31it/s]100%|██████████| 1/1 [00:00<00:00,  9.30it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-34.74093628, -32.63446808, -39.92547989, -40.66252518, -39.21731186,
          -41.79864883, -40.77612686, -40.37427521, -34.67422867, -33.05698013]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42251205]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1099 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 41.18775177001953
alpha/beta optimization time: 1.1824915409088135
initial alpha-crown bounds: tensor([[ 1.18385601,  6.04057693,  6.78337288,  5.29151678,  7.78996468,
          6.85149002,  6.37167549,  0.88482285, -0.00952518]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.009525179862976074
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6779384613037
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6779022216797
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.67787981033325
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.67786049842834
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.67784214019775
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.67782282829285
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.67780423164368
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.6777846813202
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.6777663230896
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00952518]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
        -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00952518]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 595
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 227
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 838
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.72747802734375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009523749351501465
10 lb beta sum: 0.0, worst -0.00953376293182373
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 59] 
split level 2: [/input-8, 156] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 15] 
split level 5: [/input-8, 1123] 
split level 6: [/input-8, 1122] 
split level 7: [/input-8, 157] 
split level 8: [/input-12, 89] 
split level 9: [/input-12, 36] 
split level 10: [/input-8, 1971] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 1763] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1627] 
split level 15: [/input-8, 164] 
split level 16: [/input-8, 1628] 
split level 17: [/input-8, 147] 
split level 18: [/input-8, 793] 
split level 19: [/input-8, 1626] 
split level 20: [/input-8, 1755] 
split level 21: [/input-8, 1050] 
split level 22: [/input-8, 1067] 
split level 23: [/input-8, 1762] 
split level 24: [/input, 3177] 
split level 25: [/input, 904] 
split level 26: [/input-8, 598] 
split level 27: [/input-8, 814] 
split level 28: [/input-8, 747] 
split level 29: [/input-8, 308] 
split level 30: [/input, 3467] 
split level 31: [/input, 3210] 
split level 32: [/input-8, 748] 
split level 33: [/input-12, 13] 
split level 34: [/input-8, 1756] 
split level 35: [/input, 3146] 
split level 36: [/input-12, 8] 
split level 37: [/input-8, 1386] 
split level 38: [/input-12, 24] 
split level 39: [/input-8, 806] 
split level 40: [/input, 876] 
split level 41: [/input-8, 1500] 
split level 42: [/input-8, 1963] 
split level 43: [/input-8, 1517] 
split level 44: [/input-8, 749] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1968] 
split level 47: [/input-8, 1387] 
split level 48: [/input, 3464] 
split level 49: [/input-8, 1683] 
split level 50: [/input-8, 1119] 
split level 51: [/input-8, 1498] 
split level 52: [/input, 150] 
split level 53: [/input-8, 1561] 
split level 54: [/input-8, 588] 
split level 55: [/input-8, 1085] 
split level 56: [/input, 980] 
split level 57: [/input-8, 1943] 
split level 58: [/input, 3211] 
split level 59: [/input-8, 628] 
split level 60: [/input, 4001] 
split level 61: [/input-8, 1395] 
split level 62: [/input, 923] 
split level 63: [/input, 1671] 
split level 64: [/input, 3181] 
split level 65: [/input, 3499] 
split level 66: [/input-8, 973] 
split level 67: [/input-8, 1086] 
split level 68: [/input, 3441] 
split level 69: [/input, 380] 
split level 70: [/input-8, 1388] 
split level 71: [/input-8, 478] 
split level 72: [/input-8, 949] 
split level 73: [/input, 3196] 
split level 74: [/input-8, 1314] 
split level 75: [/input, 3302] 
split level 76: [/input, 857] 
split level 77: [/input-8, 1333] 
split level 78: [/input-8, 1390] 
split level 79: [/input-8, 1620] 
split level 80: [/input, 369] 
split level 81: [/input-8, 213] 
split level 82: [/input, 454] 
split level 83: [/input, 2266] 
split level 84: [/input, 3539] 
split level 85: [/input, 1442] 
split level 86: [/input, 2267] 
split level 87: [/input-8, 482] 
split level 88: [/input-8, 828] 
split level 89: [/input-8, 1033] 
split level 90: [/input, 882] 
split level 91: [/input, 2489] 
split level 92: [/input-8, 1385] 
split level 93: [/input-8, 1389] 
split level 94: [/input, 387] 
split level 95: [/input, 2278] 
split level 96: [/input, 2788] 
split level 97: [/input, 874] 
split level 98: [/input-8, 1929] 
split level 99: [/input, 2261] 
split level 100: [/input-8, 1393] 
split level 101: [/input, 883] 
split level 102: [/input, 839] 
split level 103: [/input, 833] 
split level 104: [/input, 983] 
split level 105: [/input, 2538] 
split level 106: [/input, 3483] 
split level 107: [/input, 2277] 
split level 108: [/input-8, 902] 
split level 109: [/input, 899] 
split level 110: [/input-8, 214] 
split level 111: [/input, 2518] 
split level 112: [/input, 2724] 
split level 113: [/input, 151] 
split level 114: [/input, 996] 
split level 115: [/input-8, 975] 
split level 116: [/input-8, 1973] 
split level 117: [/input, 3545] 
split level 118: [/input, 840] 
split level 119: [/input-8, 901] 
split level 120: [/input, 866] 
split level 121: [/input-8, 1820] 
split level 122: [/input-8, 1397] 
split level 123: [/input, 2534] 
split level 124: [/input-8, 1952] 
split level 125: [/input-8, 1214] 
split level 126: [/input, 982] 
split level 127: [/input, 3044] 
split level 128: [/input-8, 1644] 
split level 129: [/input, 2523] 
split level 130: [/input, 2274] 
split level 131: [/input, 314] 
split level 132: [/input, 2264] 
split level 133: [/input, 999] 
split level 134: [/input-8, 1315] 
split level 135: [/input-8, 1641] 
split level 136: [/input, 4039] 
split level 137: [/input, 175] 
split level 138: [/input-8, 1621] 
split level 139: [/input, 2725] 
split level 140: [/input, 2275] 
split level 141: [/input, 2260] 
split level 142: [/input-8, 1115] 
split level 143: [/input, 421] 
split level 144: [/input, 2487] 
split level 145: [/input, 2262] 
split level 146: [/input, 2281] 
split level 147: [/input, 978] 
split level 148: [/input, 2259] 
split level 149: [/input-8, 1757] 
split level 150: [/input, 2537] 
split level 151: [/input, 313] 
split level 152: [/input, 2279] 
split level 153: [/input, 3041] 
split level 154: [/input-8, 141] 
split level 155: [/input, 2282] 
split level 156: [/input, 405] 
split level 157: [/input, 2471] 
split level 158: [/input-8, 153] 
split level 159: [/input, 422] 
split level 160: [/input, 2244] 
split level 161: [/input, 1004] 
split level 162: [/input, 2143] 
split level 163: [/input-8, 911] 
split level 164: [/input-8, 202] 
split level 165: [/input, 2127] 
split level 166: [/input, 893] 
split level 167: [/input, 2215] 
split level 168: [/input, 822] 
split level 169: [/input-8, 1049] 
split level 170: [/input, 2539] 
split level 171: [/input-8, 201] 
split level 172: [/input, 3299] 
split level 173: [/input, 2752] 
split level 174: [/input, 2257] 
split level 175: [/input, 933] 
split level 176: [/input-8, 359] 
split level 177: [/input, 2542] 
split level 178: [/input, 3303] 
split level 179: [/input, 886] 
split level 180: [/input, 2273] 
split level 181: [/input, 2541] 
split level 182: [/input, 2533] 
split level 183: [/input, 2284] 
split level 184: [/input, 817] 
split level 185: [/input, 323] 
split level 186: [/input, 28] 
split level 187: [/input, 3480] 
split level 188: [/input, 819] 
split level 189: [/input, 76] 
split level 190: [/input, 2470] 
split level 191: [/input, 2519] 
split level 192: [/input, 2545] 
split level 193: [/input, 2706] 
split level 194: [/input, 3421] 
split level 195: [/input, 2111] 
split level 196: [/input-8, 1579] 
split level 197: [/input, 901] 
split level 198: [/input, 2228] 
split level 199: [/input, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00944530963897705
10 lb beta sum: 0.0, worst -0.0094224214553833
Time: prepare 0.0115    bound 0.0952    transfer 0.0016    finalize 0.0026    func 0.1135    
Accumulated time: func 0.1659    prepare 0.0215    bound 0.1471    transfer 0.0017    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.24686587) min lb tensor(-0.00941110)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013098001480102539 
BICCOS Cumulative time: 0.013098001480102539
Preprocessing time: 0.009932279586791992 Inference time: 0.002077341079711914 Add cuts time: 0.0009167194366455078 Cut analysis time: 0.000171661376953125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5170    set_bounds 0.0087    solve 0.1135    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5170    set_bounds 0.0087    solve 0.1135    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([-1.]), tensor([0]), tensor([0.00035583]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([1.]), tensor([0]), tensor([1.31490088e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0808720588684082

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1704    prepare 0.0218    bound 0.1511    transfer 0.0018    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB

Result: safe in 2.2999 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-36.45841980, -44.35070419, -34.18724823, -36.62807846, -41.51102829,
         -36.81817245, -39.17654037, -38.88699341, -42.89539719, -42.96294785]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [414]; unstable size 414; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 414] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 414] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 414] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 107] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.80952740, 9.28115273, 1.87684739, 6.70495224, 2.04463553, 4.42981815,
         4.07691669, 7.95990896, 7.91283512]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0264 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 952] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 952] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 267] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86406422,  0.76336551,  2.41063452,  2.30971575,  3.50218749,
          1.55449736,  4.16273212, -1.88281834,  0.94847679]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
          -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.72462654]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0479 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 503] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 503] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 221] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.14191866,  3.64040184,  2.98625851,  2.87868166,  3.34063005,
          4.70360231,  3.04852581,  1.37090325, -0.29452491]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.78it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.27663136, -10.99063969, -16.15567589, -15.54304314, -15.45358086,
          -16.03116608, -17.35605240, -15.81715107, -13.23739529, -11.18209076]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19145107]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1166 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.241046905517578
alpha/beta optimization time: 1.2291984558105469
initial alpha-crown bounds: tensor([[ 3.18642378,  3.68983507,  3.03233480,  2.93258476,  3.39427662,
          4.75412750,  3.10958862,  1.40874863, -0.26687264]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2668726444244385
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62265014648438
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.62260341644287
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62257862091064
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.62255859375
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.62253975868225
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.62252140045166
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.62250328063965
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.62248349189758
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.62246537208557
Verifying property 8 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26687264]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
        -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26687264]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 503
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 219
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.965896606445312e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26687145233154297
10 lb beta sum: 0.0, worst -0.2668795585632324
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0525    
Accumulated time: func 0.0525    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 89] 
split level 5: [/input-8, 164] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 97] 
split level 8: [/input-8, 156] 
split level 9: [/input-12, 36] 
split level 10: [/input-12, 2] 
split level 11: [/input-8, 163] 
split level 12: [/input-12, 79] 
split level 13: [/input-12, 10] 
split level 14: [/input-8, 419] 
split level 15: [/input, 406] 
split level 16: [/input-12, 24] 
split level 17: [/input-8, 313] 
split level 18: [/input-8, 1626] 
split level 19: [/input-8, 1634] 
split level 20: [/input-8, 469] 
split level 21: [/input-8, 1321] 
split level 22: [/input, 3478] 
split level 23: [/input-8, 166] 
split level 24: [/input-8, 403] 
split level 25: [/input, 391] 
split level 26: [/input-8, 1618] 
split level 27: [/input, 936] 
split level 28: [/input, 407] 
split level 29: [/input-12, 13] 
split level 30: [/input-8, 477] 
split level 31: [/input-8, 915] 
split level 32: [/input-8, 1068] 
split level 33: [/input-8, 592] 
split level 34: [/input-8, 405] 
split level 35: [/input-8, 932] 
split level 36: [/input, 916] 
split level 37: [/input, 886] 
split level 38: [/input-8, 906] 
split level 39: [/input-8, 269] 
split level 40: [/input-8, 745] 
split level 41: [/input-8, 1610] 
split level 42: [/input-8, 942] 
split level 43: [/input-8, 844] 
split level 44: [/input-8, 1298] 
split level 45: [/input-8, 802] 
split level 46: [/input, 3496] 
split level 47: [/input-8, 1677] 
split level 48: [/input-8, 1069] 
split level 49: [/input, 3493] 
split level 50: [/input-8, 1651] 
split level 51: [/input-8, 1355] 
split level 52: [/input-8, 1625] 
split level 53: [/input, 887] 
split level 54: [/input-8, 1590] 
split level 55: [/input-8, 46] 
split level 56: [/input-8, 1614] 
split level 57: [/input-8, 1572] 
split level 58: [/input, 932] 
split level 59: [/input-8, 783] 
split level 60: [/input-8, 1554] 
split level 61: [/input-8, 474] 
split level 62: [/input, 3464] 
split level 63: [/input-8, 1658] 
split level 64: [/input-8, 951] 
split level 65: [/input, 3556] 
split level 66: [/input-8, 1040] 
split level 67: [/input-8, 1230] 
split level 68: [/input, 358] 
split level 69: [/input, 3494] 
split level 70: [/input-8, 843] 
split level 71: [/input-8, 1779] 
split level 72: [/input, 1942] 
split level 73: [/input-8, 406] 
split level 74: [/input, 996] 
split level 75: [/input-8, 1599] 
split level 76: [/input, 501] 
split level 77: [/input-8, 1393] 
split level 78: [/input, 931] 
split level 79: [/input-8, 286] 
split level 80: [/input-8, 777] 
split level 81: [/input, 1012] 
split level 82: [/input-8, 810] 
split level 83: [/input-8, 1678] 
split level 84: [/input-8, 910] 
split level 85: [/input, 1304] 
split level 86: [/input-8, 1356] 
split level 87: [/input-8, 489] 
split level 88: [/input, 504] 
split level 89: [/input-8, 846] 
split level 90: [/input, 2952] 
split level 91: [/input-8, 948] 
split level 92: [/input-8, 1497] 
split level 93: [/input-8, 1296] 
split level 94: [/input-8, 957] 
split level 95: [/input-8, 1666] 
split level 96: [/input-8, 909] 
split level 97: [/input, 87] 
split level 98: [/input-8, 1498] 
split level 99: [/input, 1303] 
split level 100: [/input-8, 1367] 
split level 101: [/input-8, 1315] 
split level 102: [/input, 506] 
split level 103: [/input, 3002] 
split level 104: [/input-8, 1780] 
split level 105: [/input, 510] 
split level 106: [/input, 2709] 
split level 107: [/input, 3221] 
split level 108: [/input-8, 395] 
split level 109: [/input, 3021] 
split level 110: [/input, 982] 
split level 111: [/input-8, 1360] 
split level 112: [/input, 2327] 
split level 113: [/input, 3570] 
split level 114: [/input, 3576] 
split level 115: [/input, 1926] 
split level 116: [/input, 3577] 
split level 117: [/input, 3572] 
split level 118: [/input-8, 1935] 
split level 119: [/input, 1013] 
split level 120: [/input, 1912] 
split level 121: [/input, 2278] 
split level 122: [/input-8, 1306] 
split level 123: [/input, 921] 
split level 124: [/input, 997] 
split level 125: [/input, 2916] 
split level 126: [/input-8, 1170] 
split level 127: [/input, 2885] 
split level 128: [/input, 4035] 
split level 129: [/input, 2887] 
split level 130: [/input, 1014] 
split level 131: [/input-8, 219] 
split level 132: [/input, 505] 
split level 133: [/input, 998] 
split level 134: [/input-8, 1696] 
split level 135: [/input, 2215] 
split level 136: [/input, 2715] 
split level 137: [/input, 2275] 
split level 138: [/input-8, 301] 
split level 139: [/input, 508] 
split level 140: [/input, 2214] 
split level 141: [/input, 1925] 
split level 142: [/input, 2072] 
split level 143: [/input-8, 371] 
split level 144: [/input, 2264] 
split level 145: [/input-8, 33] 
split level 146: [/input, 4034] 
split level 147: [/input-8, 1743] 
split level 148: [/input-8, 812] 
split level 149: [/input, 2707] 
split level 150: [/input-8, 913] 
split level 151: [/input, 509] 
split level 152: [/input, 1990] 
split level 153: [/input, 507] 
split level 154: [/input-8, 329] 
split level 155: [/input-8, 263] 
split level 156: [/input-8, 1091] 
split level 157: [/input, 23] 
split level 158: [/input, 2550] 
split level 159: [/input, 2549] 
split level 160: [/input-8, 39] 
split level 161: [/input, 2087] 
split level 162: [/input, 3020] 
split level 163: [/input, 1883] 
split level 164: [/input, 2535] 
split level 165: [/input-8, 1504] 
split level 166: [/input, 2263] 
split level 167: [/input, 3252] 
split level 168: [/input, 1334] 
split level 169: [/input, 206] 
split level 170: [/input, 3582] 
split level 171: [/input, 2231] 
split level 172: [/input, 1460] 
split level 173: [/input, 2519] 
split level 174: [/input-8, 835] 
split level 175: [/input, 2280] 
split level 176: [/input, 1867] 
split level 177: [/input, 3436] 
split level 178: [/input, 1989] 
split level 179: [/input, 873] 
split level 180: [/input, 281] 
split level 181: [/input-8, 1687] 
split level 182: [/input, 2959] 
split level 183: [/input, 1851] 
split level 184: [/input, 2233] 
split level 185: [/input, 1924] 
split level 186: [/input, 853] 
split level 187: [/input, 113] 
split level 188: [/input-8, 775] 
split level 189: [/input, 2281] 
split level 190: [/input-8, 496] 
split level 191: [/input, 2830] 
split level 192: [/input, 3578] 
split level 193: [/input, 648] 
split level 194: [/input, 2056] 
split level 195: [/input-8, 210] 
split level 196: [/input, 875] 
split level 197: [/input, 2893] 
split level 198: [/input, 2213] 
split level 199: [/input-8, 326] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2667872905731201
10 lb beta sum: 0.0, worst -0.26678526401519775
Time: prepare 0.0117    bound 0.0963    transfer 0.0033    finalize 0.0028    func 0.1166    
Accumulated time: func 0.1691    prepare 0.0217    bound 0.1483    transfer 0.0034    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07029063) min lb tensor(-0.26677990)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009949684143066406 
BICCOS Cumulative time: 0.009949684143066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25838 (1), -0.25774 (1), -0.25718 (1), -0.25708 (1), -0.25698 (1), -0.25651 (1), -0.25638 (1), -0.25605 (1), -0.25589 (1), -0.25549 (1), -0.25533 (1), -0.25421 (1), -0.25325 (1), -0.25261 (1), -0.25239 (1), -0.25140 (1), -0.25080 (1), -0.25010 (1), -0.25008 (1), -0.24904 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5079    set_bounds 0.0102    solve 0.1167    add 0.0680    
Accumulated time: pickout 0.0003    decision 0.5079    set_bounds 0.0102    solve 0.1167    add 0.0680    
Current (lb-rhs): -0.2583765983581543
50 domains visited
Cumulative time: 0.7836172580718994

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 20] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 68] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 1: [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 20] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2401583194732666
10 lb beta sum: 0.0, worst -0.24005377292633057
Time: prepare 0.0123    bound 0.0947    transfer 0.0008    finalize 0.0023    func 0.1126    
Accumulated time: func 0.2817    prepare 0.0342    bound 0.2430    transfer 0.0041    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.11847839) min lb tensor(-0.24003446)
Number of Verified Splits: 25 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013449907302856445 
BICCOS Cumulative time: 0.02339959144592285
Preprocessing time: 0.011670827865600586 Inference time: 0.001064300537109375 Add cuts time: 0.00039196014404296875 Cut analysis time: 0.0003228187561035156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07046 (2), -0.07039 (2), -0.07000 (2), -0.06966 (2), -0.06952 (2), -0.06902 (2), -0.06902 (2), -0.06894 (2), -0.06758 (2), -0.06705 (2), -0.06702 (2), -0.06641 (2), -0.06610 (2), -0.06562 (2), -0.06428 (2), -0.06404 (2), -0.06400 (2), -0.06115 (2), -0.06073 (2), -0.05999 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0131    solve 0.1127    add 0.0811    
Accumulated time: pickout 0.0014    decision 0.5274    set_bounds 0.0232    solve 0.2294    add 0.1492    
Current (lb-rhs): -0.07046020030975342
100 domains visited
Cumulative time: 1.024763584136963

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] 
split level 2: [/input-12, 89] [/input-12, 89] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05320942401885986
10 lb beta sum: 0.5455383062362671, worst -0.03321433067321777
Time: prepare 0.0068    bound 0.1152    transfer 0.0008    finalize 0.0023    func 0.1281    
Accumulated time: func 0.4099    prepare 0.0412    bound 0.3582    transfer 0.0049    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.29121801) min lb tensor(-0.02850509)
Number of Verified Splits: 389 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03669857978820801 
BICCOS Cumulative time: 0.06009817123413086
Preprocessing time: 0.011527776718139648 Inference time: 0.016678810119628906 Add cuts time: 0.008043527603149414 Cut analysis time: 0.00044846534729003906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02851 (3), -0.02805 (3), -0.01247 (3), -0.01216 (3), -0.00101 (3), -0.00060 (3), -0.00051 (3), -0.00042 (3), 
Length of domains: 8
Time: pickout 0.0012    decision 0.0212    set_bounds 0.0155    solve 0.1282    add 0.1113    
Accumulated time: pickout 0.0026    decision 0.5486    set_bounds 0.0387    solve 0.3576    add 0.2605    
Current (lb-rhs): -0.02850508689880371
108 domains visited
Cumulative time: 1.3390765190124512

Shallow-BaB round 4
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 32] [/input-12, 32] 
split level 1: [/input-12, 89] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-8, 164] [/input-12, 89] [/input-8, 164] [/input-12, 89] [/input-8, 164] [/input-8, 164] [/input-8, 164] [/input-8, 164] 
split level 3: [/input-12, 12] [/input-8, 164] [/input-12, 12] [/input-8, 164] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
split level 5: [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] [/input-8, 156] 
split level 6: [/input-12, 2] [/input-12, 36] [/input-12, 2] [/input-12, 36] [/input-12, 2] [/input-12, 2] [/input-12, 36] [/input-12, 2] 
split level 7: [/input-12, 36] [/input-12, 2] [/input-12, 36] [/input-12, 2] [/input-12, 36] [/input-12, 36] [/input-12, 2] [/input-12, 36] 
split level 8: [/input-8, 163] [/input-12, 79] [/input-8, 163] [/input-12, 79] [/input-8, 163] [/input-8, 163] [/input-8, 163] [/input-8, 163] 
split level 9: [/input-12, 79] [/input-8, 163] [/input-12, 79] [/input-8, 163] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 10: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 11: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 12: [/input-8, 1626] [/input-8, 166] [/input-8, 1626] [/input-8, 166] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] [/input-8, 1626] 
split level 13: [/input-8, 166] [/input-8, 1626] [/input-8, 166] [/input-8, 1626] [/input-8, 166] [/input-8, 166] [/input-8, 166] [/input-8, 166] 
split level 14: [/input-8, 1321] [/input-8, 915] [/input-8, 1321] [/input-8, 915] [/input-8, 1321] [/input-8, 1321] [/input-8, 1321] [/input-8, 1321] 
split level 15: [/input, 3478] [/input-8, 1321] [/input, 3478] [/input-8, 1321] [/input, 3478] [/input, 3478] [/input, 3478] [/input, 3478] 
split level 16: [/input-8, 915] [/input, 3478] [/input-8, 915] [/input, 3478] [/input-8, 915] [/input-8, 915] [/input-8, 915] [/input-8, 915] 
split level 17: [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] [/input, 391] 
split level 18: [/input-8, 477] [/input-8, 906] [/input-8, 477] [/input-8, 906] [/input-8, 477] [/input-8, 477] [/input-8, 477] [/input-8, 477] 
split level 19: [/input, 407] [/input, 407] [/input, 407] [/input, 407] [/input, 407] [/input, 407] [/input-8, 906] [/input-8, 906] 
split level 20: [/input-8, 906] [/input-8, 1677] [/input-8, 906] [/input-8, 1677] [/input-8, 1677] [/input-8, 906] [/input, 407] [/input, 407] 
split level 21: [/input-8, 942] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] [/input-8, 1554] 
split level 22: [/input-8, 1554] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] [/input-8, 942] 
split level 23: [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] [/input, 916] 
split level 24: [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] [/input-8, 1678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0359196662902832

all verified at 5th iter
Time: prepare 0.0071    bound 0.0392    transfer 0.0018    finalize 0.0023    func 0.0530    
Accumulated time: func 0.4629    prepare 0.0496    bound 0.3974    transfer 0.0067    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.28778261) min lb tensor(0.00172281)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03656649589538574 
BICCOS Cumulative time: 0.0966646671295166
Preprocessing time: 0.011408805847167969 Inference time: 0.01882314682006836 Add cuts time: 0.005903005599975586 Cut analysis time: 0.0004315376281738281
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0761    set_bounds 0.0126    solve 0.0531    add 0.1416    
Accumulated time: pickout 0.0032    decision 0.6247    set_bounds 0.0513    solve 0.4107    add 0.4021    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
108 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.86752305e-11, 4.44257706e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.86752305e-11, 1.21490046e-01, 1.13131210e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68, 32]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.86752305e-11, 1.21490046e-01, 2.61545647e-02, 5.12012690e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68, 32]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.86752305e-11, 1.21490046e-01, 2.61545647e-02, 7.91025609e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.86752305e-11, 4.10495251e-02, 9.89708751e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.86752305e-11, 4.10495251e-02, 1.16180107e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.86752305e-11, 2.54409779e-02, 1.02479428e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.86752305e-11, 2.54409779e-02, 1.19380996e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13282573223114014
10 lb beta sum: 0.4515116214752197, worst -0.08267897367477417
Time: prepare 0.0005    bound 0.1254    transfer 0.0001    finalize 0.0002    func 0.1263    
Accumulated time: func 0.5892    prepare 0.0501    bound 0.5228    transfer 0.0068    finalize 0.0101    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 32] 
split level 2: [/input-12, 89] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 36] 
split level 6: [/input-8, 163] 
split level 7: [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst 0.0011291801929473877

all verified at 0th iter
Time: prepare 0.0108    bound 0.0048    transfer 0.0015    finalize 0.0013    func 0.0201    
Accumulated time: func 0.6092    prepare 0.0613    bound 0.5276    transfer 0.0084    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.44130185) min lb tensor(0.00112918)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.0070953369140625 
BICCOS Cumulative time: 0.1037600040435791
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0216    set_bounds 0.0244    solve 0.0201    add 0.0001    
Accumulated time: pickout 0.0037    decision 0.6463    set_bounds 0.0757    solve 0.4308    add 0.4022    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
108 domains visited
Cumulative time: 1.8843107223510742

Result: safe in 3.4807 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.03878975, -27.34531403, -23.53932953, -24.00347710, -23.92297554,
         -24.22077560, -25.12296104, -25.69461441, -24.00042725, -27.72712517]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 585] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 585] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 195] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.34309149, 0.87681007, 1.16531003, 1.17494893, 1.34177232, 2.16514874,
         2.73782182, 1.01523054, 4.69900179]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0479 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [438]; unstable size 438; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 438] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 438] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 438] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 275] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22114420,  4.09420490, -0.54178756,  0.56779748, -0.32674563,
          0.62577605,  1.91951907,  3.76403689,  3.22747278]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.04311180, -21.13624954, -15.83210659, -16.94238091, -16.04538727,
          -17.10531425, -15.73818588, -18.64249992, -21.03587151, -20.26518440],
         [-20.04311180, -21.13624954, -15.83210659, -16.94238091, -16.04538727,
          -17.10531425, -15.73818588, -18.64249992, -21.03587151, -20.26518440]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.09392071, 0.30720139]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1148 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.21331024169922
alpha/beta optimization time: 1.1957292556762695
initial alpha-crown bounds: tensor([[ 3.30038714,  4.16773224, -0.48484606,  0.61480677, -0.26430154,
          0.68667459,  2.01555824,  3.85170317,  3.32559490]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4848460555076599
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6408176422119
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64077854156494
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64075255393982
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.48484606]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.48484606]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011491775512695312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.48484230041503906
10 lb beta sum: 0.0, worst -0.48484742641448975
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0521    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0521    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 56] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 34] 
split level 9: [/input-12, 6] 
split level 10: [/input-8, 1635] 
split level 11: [/input-12, 68] 
split level 12: [/input-8, 474] 
split level 13: [/input-8, 1619] 
split level 14: [/input-8, 811] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1636] 
split level 17: [/input-8, 91] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 804] 
split level 20: [/input-8, 1259] 
split level 21: [/input-8, 1939] 
split level 22: [/input-8, 476] 
split level 23: [/input-8, 1725] 
split level 24: [/input-8, 44] 
split level 25: [/input-8, 1580] 
split level 26: [/input-12, 20] 
split level 27: [/input-8, 99] 
split level 28: [/input-8, 1718] 
split level 29: [/input-8, 1963] 
split level 30: [/input-8, 803] 
split level 31: [/input-8, 418] 
split level 32: [/input-8, 161] 
split level 33: [/input-8, 92] 
split level 34: [/input-8, 269] 
split level 35: [/input-12, 97] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 757] 
split level 38: [/input-8, 1954] 
split level 39: [/input-8, 406] 
split level 40: [/input-8, 98] 
split level 41: [/input-8, 54] 
split level 42: [/input-8, 1644] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 428] 
split level 45: [/input-8, 146] 
split level 46: [/input-8, 481] 
split level 47: [/input-8, 1645] 
split level 48: [/input-8, 1581] 
split level 49: [/input-8, 1258] 
split level 50: [/input-8, 43] 
split level 51: [/input-8, 482] 
split level 52: [/input-8, 914] 
split level 53: [/input-8, 38] 
split level 54: [/input-8, 153] 
split level 55: [/input-8, 284] 
split level 56: [/input-8, 107] 
split level 57: [/input-8, 1241] 
split level 58: [/input-8, 426] 
split level 59: [/input-8, 755] 
split level 60: [/input-8, 28] 
split level 61: [/input-8, 1929] 
split level 62: [/input-8, 483] 
split level 63: [/input-8, 922] 
split level 64: [/input-8, 1568] 
split level 65: [/input, 2988] 
split level 66: [/input-8, 785] 
split level 67: [/input-8, 347] 
split level 68: [/input-8, 441] 
split level 69: [/input-8, 1650] 
split level 70: [/input-8, 491] 
split level 71: [/input-8, 1556] 
split level 72: [/input-8, 790] 
split level 73: [/input-8, 1579] 
split level 74: [/input, 3054] 
split level 75: [/input-8, 40] 
split level 76: [/input-8, 401] 
split level 77: [/input-8, 465] 
split level 78: [/input-8, 404] 
split level 79: [/input-8, 931] 
split level 80: [/input, 172] 
split level 81: [/input-8, 722] 
split level 82: [/input-8, 166] 
split level 83: [/input-8, 899] 
split level 84: [/input-8, 66] 
split level 85: [/input-8, 505] 
split level 86: [/input-8, 1614] 
split level 87: [/input-8, 588] 
split level 88: [/input-8, 1187] 
split level 89: [/input-8, 397] 
split level 90: [/input-8, 333] 
split level 91: [/input-8, 145] 
split level 92: [/input-8, 1027] 
split level 93: [/input-8, 1936] 
split level 94: [/input-8, 186] 
split level 95: [/input-8, 749] 
split level 96: [/input-8, 41] 
split level 97: [/input-8, 490] 
split level 98: [/input-8, 65] 
split level 99: [/input-8, 913] 
split level 100: [/input-8, 357] 
split level 101: [/input-8, 1248] 
split level 102: [/input-8, 612] 
split level 103: [/input-8, 1931] 
split level 104: [/input-8, 63] 
split level 105: [/input-8, 1283] 
split level 106: [/input, 378] 
split level 107: [/input-8, 1603] 
split level 108: [/input-8, 1242] 
split level 109: [/input-8, 25] 
split level 110: [/input-8, 312] 
split level 111: [/input-8, 1238] 
split level 112: [/input-8, 449] 
split level 113: [/input, 3383] 
split level 114: [/input, 3034] 
split level 115: [/input-8, 1193] 
split level 116: [/input-8, 342] 
split level 117: [/input-8, 1395] 
split level 118: [/input, 3038] 
split level 119: [/input-8, 1706] 
split level 120: [/input, 3167] 
split level 121: [/input-8, 1602] 
split level 122: [/input, 1124] 
split level 123: [/input-8, 177] 
split level 124: [/input-8, 1240] 
split level 125: [/input, 3300] 
split level 126: [/input, 1332] 
split level 127: [/input-8, 1596] 
split level 128: [/input-8, 1243] 
split level 129: [/input-8, 101] 
split level 130: [/input-8, 1224] 
split level 131: [/input-8, 1693] 
split level 132: [/input, 3161] 
split level 133: [/input-8, 1529] 
split level 134: [/input-8, 1642] 
split level 135: [/input-8, 1214] 
split level 136: [/input, 1196] 
split level 137: [/input-8, 236] 
split level 138: [/input-8, 326] 
split level 139: [/input-8, 169] 
split level 140: [/input-8, 2018] 
split level 141: [/input-8, 716] 
split level 142: [/input-8, 138] 
split level 143: [/input-8, 1167] 
split level 144: [/input-8, 587] 
split level 145: [/input-8, 1545] 
split level 146: [/input-8, 139] 
split level 147: [/input, 1450] 
split level 148: [/input-8, 175] 
split level 149: [/input-8, 1331] 
split level 150: [/input, 1080] 
split level 151: [/input, 669] 
split level 152: [/input, 476] 
split level 153: [/input-8, 248] 
split level 154: [/input, 501] 
split level 155: [/input-8, 1164] 
split level 156: [/input, 1400] 
split level 157: [/input-8, 2047] 
split level 158: [/input-8, 440] 
split level 159: [/input-8, 589] 
split level 160: [/input-8, 1694] 
split level 161: [/input, 1334] 
split level 162: [/input-8, 1175] 
split level 163: [/input, 1021] 
split level 164: [/input, 4068] 
split level 165: [/input, 1686] 
split level 166: [/input, 2613] 
split level 167: [/input-8, 204] 
split level 168: [/input-8, 238] 
split level 169: [/input, 3286] 
split level 170: [/input-8, 1699] 
split level 171: [/input, 377] 
split level 172: [/input, 974] 
split level 173: [/input-8, 395] 
split level 174: [/input-8, 1225] 
split level 175: [/input, 218] 
split level 176: [/input, 3926] 
split level 177: [/input, 3125] 
split level 178: [/input, 1599] 
split level 179: [/input, 1565] 
split level 180: [/input, 1652] 
split level 181: [/input, 1018] 
split level 182: [/input-8, 334] 
split level 183: [/input, 748] 
split level 184: [/input-8, 1705] 
split level 185: [/input, 1615] 
split level 186: [/input-8, 1775] 
split level 187: [/input-8, 1165] 
split level 188: [/input, 1180] 
split level 189: [/input-8, 865] 
split level 190: [/input-8, 1154] 
split level 191: [/input, 3541] 
split level 192: [/input-8, 1714] 
split level 193: [/input-8, 134] 
split level 194: [/input, 209] 
split level 195: [/input, 3166] 
split level 196: [/input-8, 227] 
split level 197: [/input, 3437] 
split level 198: [/input, 1490] 
split level 199: [/input, 2645] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4848378300666809
10 lb beta sum: 0.0, worst -0.4848344922065735
Time: prepare 0.0115    bound 0.0971    transfer 0.0025    finalize 0.0033    func 0.1170    
Accumulated time: func 0.1696    prepare 0.0214    bound 0.1492    transfer 0.0026    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05249578) min lb tensor(-0.48483163)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010175704956054688 
BICCOS Cumulative time: 0.010175704956054688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46542 (1), -0.46539 (1), -0.46526 (1), -0.46516 (1), -0.46444 (1), -0.46420 (1), -0.46408 (1), -0.46403 (1), -0.46205 (1), -0.46177 (1), -0.46133 (1), -0.46098 (1), -0.46044 (1), -0.45939 (1), -0.45896 (1), -0.45891 (1), -0.45799 (1), -0.45754 (1), -0.45753 (1), -0.45485 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5060    set_bounds 0.0087    solve 0.1171    add 0.0724    
Accumulated time: pickout 0.0003    decision 0.5060    set_bounds 0.0087    solve 0.1171    add 0.0724    
Current (lb-rhs): -0.46542054414749146
50 domains visited
Cumulative time: 0.7723021507263184

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 31] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 8] [/input-12, 59] [/input-12, 8] 
split level 2: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 72] [/input-12, 6] [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.445298433303833
10 lb beta sum: 0.0, worst -0.4451833963394165
Time: prepare 0.0121    bound 0.0938    transfer 0.0007    finalize 0.0021    func 0.1112    
Accumulated time: func 0.2808    prepare 0.0337    bound 0.2430    transfer 0.0033    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.24742842) min lb tensor(-0.44515103)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.014155387878417969 
BICCOS Cumulative time: 0.024331092834472656
Preprocessing time: 0.011678457260131836 Inference time: 0.0011703968048095703 Add cuts time: 0.0007176399230957031 Cut analysis time: 0.0005888938903808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19721 (2), -0.19663 (2), -0.19512 (2), -0.19194 (2), -0.18706 (2), -0.18079 (2), -0.18070 (2), -0.17756 (2), -0.17713 (2), -0.17694 (2), -0.17566 (2), -0.17544 (2), -0.16937 (2), -0.15780 (2), -0.15107 (2), -0.14526 (2), -0.14252 (2), -0.14146 (2), -0.13971 (2), -0.13862 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0126    solve 0.1112    add 0.0824    
Accumulated time: pickout 0.0013    decision 0.5256    set_bounds 0.0214    solve 0.2283    add 0.1548    
Current (lb-rhs): -0.1972132921218872
100 domains visited
Cumulative time: 1.0141522884368896

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 31] [/input-12, 72] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 6] [/input-12, 61] [/input-12, 72] [/input-12, 72] [/input-12, 6] 
split level 3: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1755075454711914
10 lb beta sum: 0.7714958190917969, worst -0.14859816431999207
Time: prepare 0.0060    bound 0.1159    transfer 0.0014    finalize 0.0027    func 0.1285    
Accumulated time: func 0.4093    prepare 0.0399    bound 0.3589    transfer 0.0047    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.73487437) min lb tensor(-0.14463894)
Number of Verified Splits: 250 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 15
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.029927730560302734 
BICCOS Cumulative time: 0.05425882339477539
Preprocessing time: 0.011562585830688477 Inference time: 0.011853456497192383 Add cuts time: 0.0058441162109375 Cut analysis time: 0.000667572021484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11632 (3), -0.11607 (3), -0.11481 (3), -0.11201 (3), -0.11144 (3), -0.11024 (3), -0.11016 (3), -0.10989 (3), -0.10925 (3), -0.10795 (3), -0.10681 (3), -0.10649 (3), -0.10524 (3), -0.10361 (3), -0.10191 (3), -0.10186 (3), -0.09926 (3), -0.09781 (3), -0.09188 (3), -0.09027 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0150    solve 0.1286    add 0.1037    
Accumulated time: pickout 0.0023    decision 0.5449    set_bounds 0.0364    solve 0.3570    add 0.2585    
Current (lb-rhs): -0.11632142961025238
150 domains visited
Cumulative time: 1.3119361400604248

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 6] 
split level 3: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-8, 1619] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16184741258621216
10 lb beta sum: 1.7259039878845215, worst -0.04894500970840454
Time: prepare 0.0066    bound 0.1314    transfer 0.0008    finalize 0.0021    func 0.1435    
Accumulated time: func 0.5528    prepare 0.0467    bound 0.4903    transfer 0.0055    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.50891769) min lb tensor(-0.04643607)
Number of Verified Splits: 312 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.035717010498046875 
BICCOS Cumulative time: 0.08997583389282227
Preprocessing time: 0.011664867401123047 Inference time: 0.014933109283447266 Add cuts time: 0.008426189422607422 Cut analysis time: 0.0006928443908691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04644 (4), -0.04642 (4), -0.04641 (4), -0.04640 (4), -0.04636 (4), -0.04634 (4), -0.04560 (4), -0.04550 (4), -0.04486 (4), -0.04486 (4), -0.04484 (4), -0.04479 (4), -0.03941 (4), -0.03940 (4), -0.03836 (4), -0.03815 (4), -0.03063 (4), -0.03062 (4), -0.03043 (4), -0.02889 (4), 
Length of domains: 48
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0148    solve 0.1436    add 0.2549    
Accumulated time: pickout 0.0032    decision 0.5646    set_bounds 0.0512    solve 0.5005    add 0.5134    
Current (lb-rhs): -0.04643607139587402
198 domains visited
Cumulative time: 1.7819454669952393

Shallow-BaB round 5
batch: 48
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8490288257598877, worst -0.5160455703735352
10 lb beta sum: 2.363406181335449, worst -0.014735937118530273
Time: prepare 0.0155    bound 0.1277    transfer 0.0012    finalize 0.0023    func 0.1492    
Accumulated time: func 0.7020    prepare 0.0625    bound 0.6179    transfer 0.0067    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.64480048) min lb tensor(-0.01285309)
Number of Verified Splits: 354 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.036783695220947266 
BICCOS Cumulative time: 0.12675952911376953
Preprocessing time: 0.011064529418945312 Inference time: 0.018970966339111328 Add cuts time: 0.006361246109008789 Cut analysis time: 0.00038695335388183594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0224    set_bounds 0.0142    solve 0.1493    add 0.0253    
Accumulated time: pickout 0.0043    decision 0.5870    set_bounds 0.0654    solve 0.6499    add 0.5386    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
198 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([-1., -1.]), tensor([0, 0]), tensor([9.03347619e-10, 7.51470774e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [4.865023495170817e-09], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([9.03347619e-10, 2.18504474e-01, 5.38517684e-02, 3.77173871e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [4.865023495170817e-09], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.03347619e-10, 2.18504474e-01, 5.38517684e-02, 5.56582659e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [2.1969963626133904e-09], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([9.03347619e-10, 2.18504474e-01, 5.38517684e-02, 1.09861359e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [2.1969963626133904e-09], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.03347619e-10, 2.18504474e-01, 5.38517684e-02, 5.49135655e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([9.03347619e-10, 2.18504474e-01, 2.20907524e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([9.03347619e-10, 7.29675740e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([9.03347619e-10, 2.58247256e-01, 2.93177832e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([9.03347619e-10, 2.58247256e-01, 1.05128095e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2843002676963806
10 lb beta sum: 1.5726220607757568, worst -0.19431990385055542
Time: prepare 0.0005    bound 0.1106    transfer 0.0002    finalize 0.0002    func 0.1115    
Accumulated time: func 0.8135    prepare 0.0630    bound 0.7286    transfer 0.0069    finalize 0.0128    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 6] [/input-12, 6] 
split level 5: [/input-8, 1619] [/input-8, 1619] 
split level 6: [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 2.2279796600341797, worst -0.15267974138259888
10 lb beta sum: 2.2279796600341797, worst -0.15221959352493286
Time: prepare 0.0118    bound 0.1114    transfer 0.0016    finalize 0.0014    func 0.1278    
Accumulated time: func 0.9413    prepare 0.0751    bound 0.8399    transfer 0.0084    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.99977869) min lb tensor(-0.15198725)
Number of Verified Splits: 241 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.227979898452759, worst -0.7397163510322571
10 lb beta sum: 2.3636879920959473, worst -0.3170170783996582
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 10
#cuts 4-6: 12
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.27165842056274414 
BICCOS Cumulative time: 0.39841794967651367
Preprocessing time: 0.00709986686706543 Inference time: 0.2572050094604492 Add cuts time: 0.006491661071777344 Cut analysis time: 0.0008618831634521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15199 (7), -0.14584 (7), -0.13118 (7), -0.12775 (7), -0.12466 (7), -0.12136 (7), -0.10488 (7), -0.09836 (7), -0.08382 (7), -0.07743 (7), -0.05883 (7), -0.05224 (7), -0.03015 (7), -0.02276 (7), -0.00555 (7), 
Length of domains: 15
Time: pickout 0.0005    decision 0.0195    set_bounds 0.0224    solve 0.1279    add 0.0012    
Accumulated time: pickout 0.0048    decision 0.6065    set_bounds 0.0878    solve 0.7777    add 0.5398    
Current (lb-rhs): -0.1519872546195984
213 domains visited
Cumulative time: 2.6084747314453125

BaB round 2
batch: 15
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 2: [/input-8, 1259] [/input-8, 99] [/input-8, 476] [/input-8, 99] [/input-8, 1259] [/input-8, 99] [/input-8, 476] [/input-8, 99] [/input-8, 1259] [/input-8, 1644] 
split level 3: [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 428] [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 428] [/input-8, 1718] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14457106590270996
10 lb beta sum: 0.5343749523162842, worst -0.13864478468894958
Time: prepare 0.0047    bound 0.1319    transfer 0.0009    finalize 0.0012    func 0.1404    
Accumulated time: func 1.0817    prepare 0.0801    bound 0.9719    transfer 0.0093    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.90700734) min lb tensor(-0.13852334)
Number of Verified Splits: 187 of 240
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3204971253871918
10 lb beta sum: 1.2171658277511597, worst -0.2634611129760742
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 10
#cuts 4-6: 12
#cuts 7-9: 4
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 0.2619588375091553 
BICCOS Cumulative time: 0.660376787185669
Preprocessing time: 0.007256984710693359 Inference time: 0.24187994003295898 Add cuts time: 0.011281251907348633 Cut analysis time: 0.0015406608581542969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13852 (11), -0.13705 (11), -0.13212 (11), -0.13065 (11), -0.12916 (11), -0.12768 (11), -0.12329 (11), -0.12181 (11), -0.11785 (11), -0.11637 (11), -0.11247 (11), -0.11161 (11), -0.11111 (11), -0.10963 (11), -0.10846 (11), -0.10699 (11), -0.10511 (11), -0.10492 (11), -0.10440 (11), -0.10436 (11), 
Length of domains: 53
Time: pickout 0.0015    decision 0.0140    set_bounds 0.0207    solve 0.1404    add 0.0023    
Accumulated time: pickout 0.0062    decision 0.6205    set_bounds 0.1085    solve 0.9182    add 0.5421    
Current (lb-rhs): -0.13852334022521973
266 domains visited
Cumulative time: 3.0510027408599854

BaB round 3
batch: 53
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] [/input-8, 1249] [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] [/input-8, 1249] [/input-8, 1249] [/input-8, 1259] 
split level 1: [/input-8, 476] [/input-8, 91] [/input-8, 428] [/input-8, 476] [/input-8, 476] [/input-8, 91] [/input-8, 428] [/input-8, 476] [/input-8, 91] [/input-8, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1351381540298462
10 lb beta sum: 0.5444574952125549, worst -0.1293002963066101
Time: prepare 0.0042    bound 0.1299    transfer 0.0011    finalize 0.0011    func 0.1376    
Accumulated time: func 1.2193    prepare 0.0845    bound 1.1018    transfer 0.0104    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.02077046) min lb tensor(-0.12921101)
Number of Verified Splits: 32 of 212
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 11
#cuts 4-6: 16
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.013040542602539062 
BICCOS Cumulative time: 0.673417329788208
Preprocessing time: 0.006356954574584961 Inference time: 0.003637075424194336 Add cuts time: 0.0021119117736816406 Cut analysis time: 0.000934600830078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12921 (13), -0.12771 (13), -0.12257 (13), -0.12243 (13), -0.12107 (13), -0.12092 (13), -0.11972 (13), -0.11822 (13), -0.11771 (13), -0.11621 (13), -0.11354 (13), -0.11306 (13), -0.11202 (13), -0.11155 (13), -0.11053 (13), -0.10937 (13), -0.10904 (13), -0.10869 (13), -0.10787 (13), -0.10717 (13), 
Length of domains: 180
Time: pickout 0.0014    decision 0.0161    set_bounds 0.0098    solve 0.1377    add 0.0020    
Accumulated time: pickout 0.0076    decision 0.6367    set_bounds 0.1183    solve 1.0559    add 0.5441    
Current (lb-rhs): -0.12921100854873657
446 domains visited
Cumulative time: 3.231964588165283

BaB round 4
batch: 180
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] [/input-8, 757] [/input-8, 99] [/input-8, 91] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13046187162399292
10 lb beta sum: 0.5913541913032532, worst -0.12462231516838074
Time: prepare 0.0070    bound 0.1329    transfer 0.0007    finalize 0.0016    func 0.1445    
Accumulated time: func 1.3638    prepare 0.0916    bound 1.2346    transfer 0.0111    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.00995940) min lb tensor(-0.12457311)
Number of Verified Splits: 34 of 360
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 19
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.01755547523498535 
BICCOS Cumulative time: 0.6909728050231934
Preprocessing time: 0.010473489761352539 Inference time: 0.0038657188415527344 Add cuts time: 0.0016002655029296875 Cut analysis time: 0.0016160011291503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12457 (14), -0.12305 (14), -0.11763 (14), -0.11754 (14), -0.11610 (14), -0.11601 (14), -0.11502 (14), -0.11350 (14), -0.11249 (14), -0.11095 (14), -0.10888 (14), -0.10861 (14), -0.10804 (14), -0.10737 (14), -0.10706 (14), -0.10651 (14), -0.10545 (14), -0.10482 (14), -0.10422 (14), -0.10393 (14), 
Length of domains: 326
Time: pickout 0.0027    decision 0.0189    set_bounds 0.0153    solve 0.1446    add 0.0044    
Accumulated time: pickout 0.0103    decision 0.6556    set_bounds 0.1337    solve 1.2005    add 0.5486    
Current (lb-rhs): -0.12457311153411865
772 domains visited
Cumulative time: 3.4361255168914795

BaB round 5
batch: 326
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] [/input-8, 1241] [/input-8, 1249] [/input-8, 99] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12302857637405396
10 lb beta sum: 0.6720901727676392, worst -0.11721649765968323
Time: prepare 0.0122    bound 0.1370    transfer 0.0014    finalize 0.0028    func 0.1577    
Accumulated time: func 1.5216    prepare 0.1040    bound 1.3716    transfer 0.0125    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.34538043) min lb tensor(-0.11715853)
Number of Verified Splits: 152 of 652
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 13
#cuts 4-6: 25
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.04455304145812988 
BICCOS Cumulative time: 0.7355258464813232
Preprocessing time: 0.018926620483398438 Inference time: 0.020306110382080078 Add cuts time: 0.003846883773803711 Cut analysis time: 0.0014734268188476562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11716 (15), -0.11588 (15), -0.11561 (15), -0.11433 (15), -0.11256 (15), -0.11098 (15), -0.10970 (15), -0.10923 (15), -0.10887 (15), -0.10827 (15), -0.10816 (15), -0.10768 (15), -0.10733 (15), -0.10673 (15), -0.10581 (15), -0.10489 (15), -0.10427 (15), -0.10371 (15), -0.10332 (15), -0.10216 (15), 
Length of domains: 500
Time: pickout 0.0047    decision 0.0297    set_bounds 0.0276    solve 0.1579    add 0.0037    
Accumulated time: pickout 0.0150    decision 0.6853    set_bounds 0.1613    solve 1.3584    add 0.5523    
Current (lb-rhs): -0.11715853214263916
1272 domains visited
Cumulative time: 3.7060389518737793

BaB round 6
batch: 500
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1580] [/input-8, 428] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 428] [/input-8, 1580] [/input-8, 1580] [/input-8, 428] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11818140745162964
10 lb beta sum: 0.6546970009803772, worst -0.11245733499526978
Time: prepare 0.0187    bound 0.1377    transfer 0.0021    finalize 0.0051    func 0.1700    
Accumulated time: func 1.6916    prepare 0.1229    bound 1.5093    transfer 0.0146    finalize 0.0260    
all_split False
======================Cut inference begins======================
max lb tensor(0.29776126) min lb tensor(-0.11245155)
Number of Verified Splits: 112 of 1000
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 13
#cuts 4-6: 25
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.05078554153442383 
BICCOS Cumulative time: 0.7863113880157471
Preprocessing time: 0.029989957809448242 Inference time: 0.015561819076538086 Add cuts time: 0.0038220882415771484 Cut analysis time: 0.0014116764068603516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11245 (16), -0.11112 (16), -0.11091 (16), -0.10958 (16), -0.10766 (16), -0.10610 (16), -0.10485 (16), -0.10449 (16), -0.10442 (16), -0.10435 (16), -0.10422 (16), -0.10389 (16), -0.10330 (16), -0.10293 (16), -0.10280 (16), -0.10277 (16), -0.10259 (16), -0.10234 (16), -0.10136 (16), -0.10044 (16), 
Length of domains: 888
Time: pickout 0.0084    decision 0.0397    set_bounds 0.0426    solve 0.1703    add 0.0063    
Accumulated time: pickout 0.0235    decision 0.7250    set_bounds 0.2038    solve 1.5287    add 0.5586    
Current (lb-rhs): -0.11245155334472656
2160 domains visited
Cumulative time: 4.025904178619385

BaB round 7
batch: 888
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 428] [/input-8, 28] [/input-8, 1954] [/input-8, 428] [/input-8, 28] [/input-8, 99] [/input-8, 1929] [/input-8, 1954] [/input-8, 99] [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11148479580879211
10 lb beta sum: 0.7073916792869568, worst -0.10579454898834229
Time: prepare 0.0342    bound 0.1585    transfer 0.0134    finalize 0.0085    func 0.2259    
Accumulated time: func 1.9175    prepare 0.1574    bound 1.6679    transfer 0.0280    finalize 0.0345    
all_split False
======================Cut inference begins======================
max lb tensor(0.30726361) min lb tensor(-0.10578662)
Number of Verified Splits: 577 of 1776
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 15
#cuts 4-6: 22
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.14485931396484375 
BICCOS Cumulative time: 0.9311707019805908
Preprocessing time: 0.05396080017089844 Inference time: 0.07869458198547363 Add cuts time: 0.01091766357421875 Cut analysis time: 0.0012862682342529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10579 (17), -0.10564 (17), -0.10430 (17), -0.10424 (17), -0.10409 (17), -0.10286 (17), -0.10275 (17), -0.10131 (17), -0.10024 (17), -0.10012 (17), -0.09999 (17), -0.09958 (17), -0.09958 (17), -0.09909 (17), -0.09863 (17), -0.09850 (17), -0.09844 (17), -0.09804 (17), -0.09800 (17), -0.09755 (17), 
Length of domains: 1199
Time: pickout 0.0153    decision 0.2176    set_bounds 0.0750    solve 0.2263    add 0.0080    
Accumulated time: pickout 0.0387    decision 0.9427    set_bounds 0.2788    solve 1.7550    add 0.5666    
Current (lb-rhs): -0.10578662157058716
3359 domains visited
Cumulative time: 4.719754219055176

BaB round 8
batch: 1199
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1929] [/input-8, 1929] [/input-8, 28] [/input-8, 1929] [/input-8, 1929] [/input-8, 28] [/input-8, 28] [/input-8, 28] [/input-8, 1929] [/input-8, 803] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10949695110321045
10 lb beta sum: 0.778740406036377, worst -0.10379034280776978
Time: prepare 0.0459    bound 0.1924    transfer 0.0100    finalize 0.0105    func 0.2749    
Accumulated time: func 2.1924    prepare 0.2036    bound 1.8602    transfer 0.0380    finalize 0.0450    
all_split False
======================Cut inference begins======================
max lb tensor(0.62765551) min lb tensor(-0.10376847)
Number of Verified Splits: 1431 of 2398
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.2954246997833252 
BICCOS Cumulative time: 1.226595401763916
Preprocessing time: 0.07227230072021484 Inference time: 0.20104455947875977 Add cuts time: 0.021823883056640625 Cut analysis time: 0.00028395652770996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10377 (18), -0.10351 (18), -0.10222 (18), -0.10208 (18), -0.10196 (18), -0.10074 (18), -0.10053 (18), -0.09921 (18), -0.09841 (18), -0.09833 (18), -0.09722 (18), -0.09680 (18), -0.09679 (18), -0.09672 (18), -0.09567 (18), -0.09536 (18), -0.09525 (18), -0.09437 (18), -0.09381 (18), -0.09353 (18), 
Length of domains: 967
Time: pickout 0.0197    decision 0.0745    set_bounds 0.1020    solve 0.2753    add 0.0080    
Accumulated time: pickout 0.0584    decision 1.0171    set_bounds 0.3808    solve 2.0304    add 0.5746    
Current (lb-rhs): -0.10376846790313721
4326 domains visited
Cumulative time: 5.508321285247803

BaB round 9
batch: 967
splitting decisions: 
split level 0: [/input-8, 803] [/input-8, 803] [/input-8, 755] [/input-8, 803] [/input-8, 803] [/input-8, 1963] [/input-8, 755] [/input-8, 476] [/input-8, 1963] [/input-8, 426] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10384434461593628

all verified at 7th iter
Time: prepare 0.0377    bound 0.0548    transfer 0.0045    finalize 0.0088    func 0.1180    
Accumulated time: func 2.3104    prepare 0.2415    bound 1.9151    transfer 0.0425    finalize 0.0538    
all_split False
======================Cut inference begins======================
max lb tensor(0.20246442) min lb tensor(3.68356705e-05)
Number of Verified Splits: 1934 of 1934
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.05872201919555664 
BICCOS Cumulative time: 1.2853174209594727
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0195    decision 0.2102    set_bounds 0.0830    solve 0.1184    add 0.0004    
Accumulated time: pickout 0.0780    decision 1.2273    set_bounds 0.4639    solve 2.1488    add 0.5750    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4326 domains visited
Cumulative time: 6.009159803390503


Properties batch 3, size 1
Remaining timeout: 192.43826937675476
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 192.43816089630127
Verifying property 4 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26430154]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26430154]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.679794311523438e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26430022716522217
10 lb beta sum: 0.0, worst -0.26429951190948486
Time: prepare 0.0002    bound 0.0867    transfer 0.0001    finalize 0.0001    func 0.0872    
Accumulated time: func 0.0872    prepare 0.0002    bound 0.0867    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 56] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 61] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 34] 
split level 7: [/input-8, 1249] 
split level 8: [/input-8, 1939] 
split level 9: [/input-12, 7] 
split level 10: [/input-8, 157] 
split level 11: [/input-8, 44] 
split level 12: [/input-8, 1259] 
split level 13: [/input-8, 612] 
split level 14: [/input-8, 804] 
split level 15: [/input-8, 811] 
split level 16: [/input-8, 1241] 
split level 17: [/input-8, 1258] 
split level 18: [/input-8, 38] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 790] 
split level 21: [/input-8, 347] 
split level 22: [/input-8, 1581] 
split level 23: [/input-8, 139] 
split level 24: [/input-8, 166] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 1580] 
split level 27: [/input-8, 146] 
split level 28: [/input-8, 42] 
split level 29: [/input-8, 43] 
split level 30: [/input-8, 757] 
split level 31: [/input-8, 1242] 
split level 32: [/input-8, 2030] 
split level 33: [/input-12, 8] 
split level 34: [/input-8, 54] 
split level 35: [/input-8, 803] 
split level 36: [/input-8, 25] 
split level 37: [/input, 3149] 
split level 38: [/input-8, 28] 
split level 39: [/input-8, 161] 
split level 40: [/input-8, 2017] 
split level 41: [/input-8, 1636] 
split level 42: [/input-8, 132] 
split level 43: [/input-8, 153] 
split level 44: [/input-8, 406] 
split level 45: [/input, 3054] 
split level 46: [/input-8, 1644] 
split level 47: [/input-8, 1193] 
split level 48: [/input-8, 755] 
split level 49: [/input-8, 588] 
split level 50: [/input, 3176] 
split level 51: [/input-8, 491] 
split level 52: [/input-8, 1187] 
split level 53: [/input, 3167] 
split level 54: [/input-8, 2018] 
split level 55: [/input-8, 1382] 
split level 56: [/input-8, 441] 
split level 57: [/input, 3165] 
split level 58: [/input-12, 72] 
split level 59: [/input, 3161] 
split level 60: [/input, 3382] 
split level 61: [/input-8, 40] 
split level 62: [/input, 2602] 
split level 63: [/input-8, 41] 
split level 64: [/input-8, 932] 
split level 65: [/input-8, 145] 
split level 66: [/input-8, 2016] 
split level 67: [/input-8, 404] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 1579] 
split level 70: [/input, 3113] 
split level 71: [/input-8, 1248] 
split level 72: [/input-8, 1931] 
split level 73: [/input-8, 204] 
split level 74: [/input-8, 134] 
split level 75: [/input-8, 1164] 
split level 76: [/input, 2603] 
split level 77: [/input, 3162] 
split level 78: [/input, 2601] 
split level 79: [/input-8, 785] 
split level 80: [/input, 873] 
split level 81: [/input-8, 138] 
split level 82: [/input-8, 1240] 
split level 83: [/input, 3146] 
split level 84: [/input, 2680] 
split level 85: [/input-8, 914] 
split level 86: [/input, 2652] 
split level 87: [/input, 476] 
split level 88: [/input-8, 1556] 
split level 89: [/input, 3166] 
split level 90: [/input-8, 1238] 
split level 91: [/input-8, 171] 
split level 92: [/input, 3125] 
split level 93: [/input-8, 342] 
split level 94: [/input-8, 922] 
split level 95: [/input-8, 1214] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 1224] 
split level 98: [/input-8, 1645] 
split level 99: [/input-8, 63] 
split level 100: [/input, 2586] 
split level 101: [/input-8, 175] 
split level 102: [/input, 3038] 
split level 103: [/input, 1124] 
split level 104: [/input-8, 397] 
split level 105: [/input-8, 357] 
split level 106: [/input-8, 248] 
split level 107: [/input, 2637] 
split level 108: [/input-8, 589] 
split level 109: [/input-8, 465] 
split level 110: [/input-8, 931] 
split level 111: [/input, 682] 
split level 112: [/input-8, 2009] 
split level 113: [/input-8, 1165] 
split level 114: [/input-8, 722] 
split level 115: [/input-8, 1376] 
split level 116: [/input, 669] 
split level 117: [/input, 3383] 
split level 118: [/input, 3222] 
split level 119: [/input-8, 326] 
split level 120: [/input, 2649] 
split level 121: [/input, 2988] 
split level 122: [/input-8, 1393] 
split level 123: [/input, 748] 
split level 124: [/input-8, 1399] 
split level 125: [/input, 1652] 
split level 126: [/input-8, 1383] 
split level 127: [/input-8, 2047] 
split level 128: [/input-8, 98] 
split level 129: [/input-8, 1529] 
split level 130: [/input-8, 91] 
split level 131: [/input, 2572] 
split level 132: [/input-8, 1665] 
split level 133: [/input, 2666] 
split level 134: [/input, 3034] 
split level 135: [/input-8, 312] 
split level 136: [/input-8, 333] 
split level 137: [/input, 3973] 
split level 138: [/input-8, 418] 
split level 139: [/input-8, 238] 
split level 140: [/input-8, 899] 
split level 141: [/input-8, 1993] 
split level 142: [/input, 3286] 
split level 143: [/input, 3419] 
split level 144: [/input, 2896] 
split level 145: [/input, 1565] 
split level 146: [/input, 1599] 
split level 147: [/input-8, 401] 
split level 148: [/input, 875] 
split level 149: [/input, 823] 
split level 150: [/input, 4068] 
split level 151: [/input, 3354] 
split level 152: [/input-8, 1375] 
split level 153: [/input, 839] 
split level 154: [/input, 3235] 
split level 155: [/input-8, 1619] 
split level 156: [/input, 2880] 
split level 157: [/input, 745] 
split level 158: [/input, 1021] 
split level 159: [/input, 788] 
split level 160: [/input-8, 1331] 
split level 161: [/input, 1748] 
split level 162: [/input, 276] 
split level 163: [/input, 1615] 
split level 164: [/input-8, 1545] 
split level 165: [/input-8, 177] 
split level 166: [/input-8, 1718] 
split level 167: [/input-8, 749] 
split level 168: [/input-8, 395] 
split level 169: [/input-8, 865] 
split level 170: [/input, 837] 
split level 171: [/input, 1400] 
split level 172: [/input, 2571] 
split level 173: [/input, 1581] 
split level 174: [/input-8, 169] 
split level 175: [/input, 1686] 
split level 176: [/input-8, 440] 
split level 177: [/input, 1490] 
split level 178: [/input, 2645] 
split level 179: [/input-8, 2008] 
split level 180: [/input, 986] 
split level 181: [/input-8, 490] 
split level 182: [/input-8, 1929] 
split level 183: [/input-8, 1963] 
split level 184: [/input, 974] 
split level 185: [/input, 3281] 
split level 186: [/input, 1018] 
split level 187: [/input, 2613] 
split level 188: [/input, 853] 
split level 189: [/input-8, 2001] 
split level 190: [/input-8, 334] 
split level 191: [/input-8, 107] 
split level 192: [/input, 2028] 
split level 193: [/input, 275] 
split level 194: [/input, 681] 
split level 195: [/input, 790] 
split level 196: [/input, 903] 
split level 197: [/input-8, 587] 
split level 198: [/input, 209] 
split level 199: [/input, 773] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26429522037506104
10 lb beta sum: 0.0, worst -0.264298677444458
Time: prepare 0.0115    bound 0.0942    transfer 0.0024    finalize 0.0025    func 0.1131    
Accumulated time: func 0.2003    prepare 0.0212    bound 0.1809    transfer 0.0025    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.11695123) min lb tensor(-0.26429486)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.010388851165771484 
BICCOS Cumulative time: 0.010388851165771484
Preprocessing time: 0.009799003601074219 Inference time: 0.0002491474151611328 Add cuts time: 9.465217590332031e-05 Cut analysis time: 0.0002460479736328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25035 (1), -0.25029 (1), -0.25001 (1), -0.24989 (1), -0.24984 (1), -0.24972 (1), -0.24953 (1), -0.24941 (1), -0.24936 (1), -0.24912 (1), -0.24890 (1), -0.24852 (1), -0.24845 (1), -0.24807 (1), -0.24656 (1), -0.24620 (1), -0.24565 (1), -0.24526 (1), -0.24488 (1), -0.24445 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5052    set_bounds 0.0084    solve 0.1132    add 0.0683    
Accumulated time: pickout 0.0003    decision 0.5052    set_bounds 0.0084    solve 0.1132    add 0.0683    
Current (lb-rhs): -0.250354528427124
50 domains visited
Cumulative time: 0.7980318069458008

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 56] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 56] [/input-12, 56] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 56] [/input-12, 97] [/input-12, 97] [/input-12, 56] [/input-12, 97] 
split level 2: [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2308909296989441
10 lb beta sum: 1.161550760269165, worst -0.16426289081573486
Time: prepare 0.0073    bound 0.1143    transfer 0.0007    finalize 0.0023    func 0.1272    
Accumulated time: func 0.3275    prepare 0.0288    bound 0.2952    transfer 0.0032    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.45590144) min lb tensor(-0.16405374)
Number of Verified Splits: 122 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.0189974308013916 
BICCOS Cumulative time: 0.029386281967163086
Preprocessing time: 0.011585712432861328 Inference time: 0.004868745803833008 Add cuts time: 0.0020706653594970703 Cut analysis time: 0.0004723072052001953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05229 (2), -0.04797 (2), -0.04223 (2), -0.04183 (2), -0.04128 (2), -0.04121 (2), -0.03833 (2), -0.03722 (2), -0.03566 (2), -0.03409 (2), -0.03236 (2), -0.03235 (2), -0.03210 (2), -0.03204 (2), -0.03143 (2), -0.02993 (2), -0.02851 (2), -0.02815 (2), -0.02772 (2), -0.02711 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0117    solve 0.1273    add 0.0847    
Accumulated time: pickout 0.0014    decision 0.5248    set_bounds 0.0200    solve 0.2405    add 0.1530    
Current (lb-rhs): -0.05229121446609497
100 domains visited
Cumulative time: 1.061556339263916

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 34] [/input-12, 31] [/input-12, 34] [/input-12, 31] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14159941673278809
10 lb beta sum: 2.5315027236938477, worst -0.025802671909332275
Time: prepare 0.0073    bound 0.1295    transfer 0.0007    finalize 0.0027    func 0.1429    
Accumulated time: func 0.4704    prepare 0.0364    bound 0.4247    transfer 0.0039    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.62370026) min lb tensor(-0.02521515)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.03764533996582031 
BICCOS Cumulative time: 0.0670316219329834
Preprocessing time: 0.011414766311645508 Inference time: 0.015596389770507812 Add cuts time: 0.010221242904663086 Cut analysis time: 0.00041294097900390625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0154    solve 0.1430    add 0.0201    
Accumulated time: pickout 0.0024    decision 0.5443    set_bounds 0.0354    solve 0.3834    add 0.1731    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.15134799e-10, 1.00311324e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.15134799e-10, 2.40901753e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59, 56]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.15134799e-10, 1.01569816e-01, 5.65080494e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59, 56]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.15134799e-10, 1.01569816e-01, 8.29767436e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([2.15134799e-10, 2.50103176e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1513034701347351
10 lb beta sum: 0.6458916068077087, worst -0.10090416669845581
Time: prepare 0.0004    bound 0.1231    transfer 0.0002    finalize 0.0002    func 0.1239    
Accumulated time: func 0.5943    prepare 0.0368    bound 0.5478    transfer 0.0041    finalize 0.0079    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 34] 
split level 4: [/input-8, 1249] 
split level 5: [/input-8, 1259] 
split level 6: [/input-8, 1241] 
split level 7: [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8986124992370605, worst -0.047614336013793945
10 lb beta sum: 1.933295488357544, worst -0.047131896018981934
Time: prepare 0.0108    bound 0.1260    transfer 0.0006    finalize 0.0013    func 0.1403    
Accumulated time: func 0.7346    prepare 0.0480    bound 0.6738    transfer 0.0047    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.67279458) min lb tensor(-0.04697120)
Number of Verified Splits: 232 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.8986127376556396, worst -0.19828057289123535
10 lb beta sum: 2.0183491706848145, worst -0.0933525562286377
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 13
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.28826427459716797 
BICCOS Cumulative time: 0.35529589653015137
Preprocessing time: 0.007147550582885742 Inference time: 0.2742159366607666 Add cuts time: 0.006231069564819336 Cut analysis time: 0.0006697177886962891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04697 (8), -0.04603 (8), -0.04327 (8), -0.04233 (8), -0.03957 (8), -0.03863 (8), -0.03587 (8), -0.03493 (8), -0.01933 (8), -0.01843 (8), -0.01663 (8), -0.01559 (8), -0.01512 (8), -0.01422 (8), -0.01404 (8), -0.01310 (8), -0.01208 (8), -0.01167 (8), -0.01105 (8), -0.01073 (8), 
Length of domains: 24
Time: pickout 0.0004    decision 0.0218    set_bounds 0.0247    solve 0.1404    add 0.0010    
Accumulated time: pickout 0.0028    decision 0.5661    set_bounds 0.0601    solve 0.5238    add 0.1741    
Current (lb-rhs): -0.04697120189666748
124 domains visited
Cumulative time: 1.914306640625

BaB round 2
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] 
split level 2: [/input-8, 166] [/input-8, 166] [/input-8, 1644] [/input-8, 166] [/input-8, 166] [/input-8, 803] [/input-8, 166] [/input-8, 166] [/input-8, 1644] [/input-8, 166] 
split level 3: [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 1644] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03813326358795166
10 lb beta sum: 0.24612078070640564, worst -0.03315684199333191
Time: prepare 0.0073    bound 0.1268    transfer 0.0008    finalize 0.0018    func 0.1392    
Accumulated time: func 0.8738    prepare 0.0555    bound 0.8006    transfer 0.0054    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.06718209) min lb tensor(-0.03303340)
Number of Verified Splits: 327 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.04631400108337402 
BICCOS Cumulative time: 0.4016098976135254
Preprocessing time: 0.011003732681274414 Inference time: 0.03284573554992676 Add cuts time: 0.0020864009857177734 Cut analysis time: 0.0003781318664550781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03303 (12), -0.03263 (12), -0.03197 (12), -0.03152 (12), -0.02931 (12), -0.02879 (12), -0.02861 (12), -0.02825 (12), -0.02820 (12), -0.02782 (12), -0.02769 (12), -0.02737 (12), -0.02518 (12), -0.02504 (12), -0.02489 (12), -0.02437 (12), -0.02410 (12), -0.02407 (12), -0.02398 (12), -0.02354 (12), 
Length of domains: 57
Time: pickout 0.0016    decision 0.0176    set_bounds 0.0334    solve 0.1393    add 0.0010    
Accumulated time: pickout 0.0044    decision 0.5837    set_bounds 0.0935    solve 0.6631    add 0.1750    
Current (lb-rhs): -0.033033400774002075
181 domains visited
Cumulative time: 2.155169725418091

BaB round 3
batch: 57
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] 
split level 1: [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029996633529663086
10 lb beta sum: 0.6845191717147827, worst -0.02509009838104248
Time: prepare 0.0045    bound 0.1306    transfer 0.0006    finalize 0.0011    func 0.1384    
Accumulated time: func 1.0122    prepare 0.0602    bound 0.9313    transfer 0.0060    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.01745880) min lb tensor(-0.02502966)
Number of Verified Splits: 129 of 228
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.0226442813873291 
BICCOS Cumulative time: 0.4242541790008545
Preprocessing time: 0.006829977035522461 Inference time: 0.014500141143798828 Add cuts time: 0.0009496212005615234 Cut analysis time: 0.00036454200744628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02503 (14), -0.02441 (14), -0.02395 (14), -0.02326 (14), -0.02130 (14), -0.02061 (14), -0.02060 (14), -0.02023 (14), -0.02001 (14), -0.01980 (14), -0.01946 (14), -0.01912 (14), -0.01888 (14), -0.01865 (14), -0.01850 (14), -0.01833 (14), -0.01820 (14), -0.01818 (14), -0.01778 (14), -0.01750 (14), 
Length of domains: 99
Time: pickout 0.0019    decision 0.0171    set_bounds 0.0114    solve 0.1384    add 0.0011    
Accumulated time: pickout 0.0063    decision 0.6008    set_bounds 0.1049    solve 0.8015    add 0.1761    
Current (lb-rhs): -0.025029659271240234
280 domains visited
Cumulative time: 2.348505973815918

BaB round 4
batch: 99
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] 
split level 1: [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1307485103607178, worst -0.02163827419281006
10 lb beta sum: 1.5258620977401733, worst -0.01868492364883423
Time: prepare 0.0166    bound 0.1322    transfer 0.0013    finalize 0.0018    func 0.1551    
Accumulated time: func 1.1672    prepare 0.0770    bound 1.0635    transfer 0.0073    finalize 0.0139    
all_split False
======================Cut inference begins======================
max lb tensor(0.00708008) min lb tensor(-0.01863503)
Number of Verified Splits: 155 of 396
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.03374481201171875 
BICCOS Cumulative time: 0.45799899101257324
Preprocessing time: 0.01136016845703125 Inference time: 0.02029871940612793 Add cuts time: 0.0016918182373046875 Cut analysis time: 0.0003941059112548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01864 (16), -0.01761 (16), -0.01754 (16), -0.01642 (16), -0.01621 (16), -0.01599 (16), -0.01500 (16), -0.01492 (16), -0.01489 (16), -0.01423 (16), -0.01419 (16), -0.01388 (16), -0.01384 (16), -0.01343 (16), -0.01337 (16), -0.01318 (16), -0.01310 (16), -0.01268 (16), -0.01247 (16), -0.01228 (16), 
Length of domains: 241
Time: pickout 0.0020    decision 0.0194    set_bounds 0.0180    solve 0.1552    add 0.0014    
Accumulated time: pickout 0.0083    decision 0.6202    set_bounds 0.1229    solve 0.9567    add 0.1776    
Current (lb-rhs): -0.018635034561157227
521 domains visited
Cumulative time: 2.5792925357818604

BaB round 5
batch: 241
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021862506866455078
10 lb beta sum: 0.567771315574646, worst -0.017084956169128418
Time: prepare 0.0094    bound 0.1350    transfer 0.0009    finalize 0.1195    func 0.2679    
Accumulated time: func 1.4352    prepare 0.0865    bound 1.1984    transfer 0.0082    finalize 0.1335    
all_split False
======================Cut inference begins======================
max lb tensor(0.25241983) min lb tensor(-0.01705176)
Number of Verified Splits: 335 of 482
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.0611262321472168 
BICCOS Cumulative time: 0.51912522315979
Preprocessing time: 0.014395475387573242 Inference time: 0.04315662384033203 Add cuts time: 0.0030846595764160156 Cut analysis time: 0.0004894733428955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01705 (17), -0.01605 (17), -0.01589 (17), -0.01478 (17), -0.01468 (17), -0.01449 (17), -0.01340 (17), -0.01335 (17), -0.01332 (17), -0.01254 (17), -0.01243 (17), -0.01232 (17), -0.01220 (17), -0.01171 (17), -0.01167 (17), -0.01152 (17), -0.01127 (17), -0.01106 (17), -0.01095 (17), -0.01078 (17), 
Length of domains: 147
Time: pickout 0.0038    decision 0.0246    set_bounds 0.0208    solve 0.2681    add 0.0013    
Accumulated time: pickout 0.0121    decision 0.6448    set_bounds 0.1437    solve 1.2248    add 0.1789    
Current (lb-rhs): -0.017051756381988525
668 domains visited
Cumulative time: 2.961240768432617

BaB round 6
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017433226108551025
10 lb beta sum: 1.0594958066940308, worst -0.012733936309814453
Time: prepare 0.0058    bound 0.1334    transfer 0.0015    finalize 0.0019    func 0.1446    
Accumulated time: func 1.5797    prepare 0.0926    bound 1.3319    transfer 0.0097    finalize 0.1354    
all_split False
======================Cut inference begins======================
max lb tensor(0.23937374) min lb tensor(-0.01271856)
Number of Verified Splits: 177 of 294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.03439950942993164 
BICCOS Cumulative time: 0.5535247325897217
Preprocessing time: 0.008636951446533203 Inference time: 0.023507356643676758 Add cuts time: 0.0017898082733154297 Cut analysis time: 0.00046539306640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01272 (18), -0.01211 (18), -0.01182 (18), -0.01170 (18), -0.01105 (18), -0.01084 (18), -0.01071 (18), -0.01054 (18), -0.01035 (18), -0.00981 (18), -0.00951 (18), -0.00942 (18), -0.00930 (18), -0.00918 (18), -0.00902 (18), -0.00900 (18), -0.00842 (18), -0.00822 (18), -0.00809 (18), -0.00801 (18), 
Length of domains: 117
Time: pickout 0.0031    decision 0.0197    set_bounds 0.0125    solve 0.1446    add 0.0014    
Accumulated time: pickout 0.0152    decision 0.6645    set_bounds 0.1562    solve 1.3694    add 0.1803    
Current (lb-rhs): -0.012718558311462402
785 domains visited
Cumulative time: 3.1780717372894287

BaB round 7
batch: 117
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 790] [/input-8, 790] [/input, 3161] [/input, 3161] [/input, 3161] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input, 3161] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014573097229003906
10 lb beta sum: 1.10542893409729, worst -0.009145557880401611
Time: prepare 0.0051    bound 0.1270    transfer 0.0012    finalize 0.0013    func 0.1360    
Accumulated time: func 1.7158    prepare 0.0978    bound 1.4589    transfer 0.0109    finalize 0.1367    
all_split False
======================Cut inference begins======================
max lb tensor(0.01435590) min lb tensor(-0.00912860)
Number of Verified Splits: 165 of 234
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.030758380889892578 
BICCOS Cumulative time: 0.5842831134796143
Preprocessing time: 0.006836652755737305 Inference time: 0.021764039993286133 Add cuts time: 0.0017096996307373047 Cut analysis time: 0.00044798851013183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00913 (19), -0.00875 (19), -0.00792 (19), -0.00762 (19), -0.00714 (19), -0.00647 (19), -0.00627 (19), -0.00581 (19), -0.00563 (19), -0.00553 (19), -0.00544 (19), -0.00533 (19), -0.00510 (19), -0.00506 (19), -0.00454 (19), -0.00453 (19), -0.00435 (19), -0.00435 (19), -0.00426 (19), -0.00423 (19), 
Length of domains: 69
Time: pickout 0.0023    decision 0.0151    set_bounds 0.0094    solve 0.1361    add 0.0012    
Accumulated time: pickout 0.0175    decision 0.6795    set_bounds 0.1655    solve 1.5055    add 0.1815    
Current (lb-rhs): -0.009128600358963013
854 domains visited
Cumulative time: 3.37378191947937

BaB round 8
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-8, 790] [/input-8, 790] [/input-12, 8] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input-12, 8] [/input-8, 790] [/input-8, 790] 
split level 1: [/input-8, 1644] [/input, 3161] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1644] [/input, 3161] [/input-8, 1644] [/input, 3161] [/input-8, 1242] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010033577680587769
10 lb beta sum: 0.6562624573707581, worst -0.004185587167739868
Time: prepare 0.0063    bound 0.1313    transfer 0.0010    finalize 0.0017    func 0.1421    
Accumulated time: func 1.8578    prepare 0.1043    bound 1.5902    transfer 0.0118    finalize 0.1384    
all_split False
======================Cut inference begins======================
max lb tensor(0.33073616) min lb tensor(-0.00413916)
Number of Verified Splits: 253 of 276
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.04523825645446777 
BICCOS Cumulative time: 0.629521369934082
Preprocessing time: 0.008041858673095703 Inference time: 0.03484797477722168 Add cuts time: 0.0018825531005859375 Cut analysis time: 0.0004658699035644531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00414 (21), -0.00346 (21), -0.00314 (21), -0.00292 (21), -0.00256 (21), -0.00244 (21), -0.00242 (21), -0.00231 (21), -0.00196 (21), -0.00182 (21), -0.00153 (21), -0.00137 (21), -0.00126 (21), -0.00124 (21), -0.00088 (21), -0.00072 (21), -0.00064 (21), -0.00063 (21), -0.00062 (21), -0.00032 (21), 
Length of domains: 23
Time: pickout 0.0019    decision 0.0173    set_bounds 0.0168    solve 0.1422    add 0.0009    
Accumulated time: pickout 0.0194    decision 0.6968    set_bounds 0.1824    solve 1.6476    add 0.1824    
Current (lb-rhs): -0.004139155149459839
877 domains visited
Cumulative time: 3.599490165710449

BaB round 9
batch: 23
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-8, 1644] 
split level 1: [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input-8, 1242] [/input-8, 1644] [/input-8, 1242] [/input, 3161] 
split level 2: [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] 
split level 3: [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0005577206611633301

all verified at 1th iter
Time: prepare 0.0090    bound 0.0127    transfer 0.0012    finalize 0.0018    func 0.0269    
Accumulated time: func 1.8848    prepare 0.1135    bound 1.6029    transfer 0.0130    finalize 0.1402    
all_split False
======================Cut inference begins======================
max lb tensor(0.05214342) min lb tensor(0.00015962)
Number of Verified Splits: 368 of 368
No cut inferred: All or none verified.
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.011031866073608398 
BICCOS Cumulative time: 0.6405532360076904
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0177    set_bounds 0.0328    solve 0.0270    add 0.0001    
Accumulated time: pickout 0.0209    decision 0.7145    set_bounds 0.2152    solve 1.6747    add 0.1825    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
877 domains visited
Cumulative time: 3.6911656856536865


Properties batch 5, size 1
Remaining timeout: 188.57683300971985
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 188.57675409317017
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 188.5767285823822
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 188.57670831680298
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 11.4233 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [598]; unstable size 598; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 598] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 598] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 598] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 212] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.89664268,  0.67908788,  0.19554496,  0.18955207,  0.73444796,
          0.71419168,  0.94188952,  0.96517789, -1.17427886]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
          -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05045319]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0517 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.98194313, -18.68232346, -13.41521168, -15.12617874, -13.36238766,
         -15.23961639, -11.65827942, -15.93192387, -18.96205139, -18.87558174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 486] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 486] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 298] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17124987, 4.88726807, 0.27177000, 2.09688020, 0.18416548, 2.01368856,
         2.31736898, 5.04107523, 4.79337215]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0376 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.01308823, -19.76593781, -25.22100067, -25.57647514, -25.42583656,
         -26.01211357, -25.51028061, -24.41519165, -23.07863426, -17.48029327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 532] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 532] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 203] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.27216291, 1.49679089, 6.10778618, 6.38268948, 6.18334389, 6.67019939,
         6.18721485, 4.92642689, 4.46745014]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0439 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 270, 1, 703] with unstable size 269 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 703] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [269]; unstable size 269; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 269] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 269] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32847285,  0.70178246,  0.40967393,  0.70709229,  1.10043979,
          0.47019577,  0.52032614, -0.85370159, -1.78019559]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775],
         [-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.34903812, -0.90196133]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0543 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.14345169, -26.23081017, -22.50061417, -23.41731834, -23.96586800,
         -24.21544456, -20.18602753, -25.76428032, -26.53347778, -25.24602318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 390] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 390] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 311] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16251469, 3.85129452, 1.07807159, 2.04974079, 2.45816231, 2.71345639,
         3.85838294, 4.14238644, 3.23237801]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 519] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 519] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 219] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02097774,  5.33160591, -0.73743296,  1.28090429,  0.87938404,
          0.03270662,  0.89394522,  6.65467310,  4.26477194]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.90825081, -26.12090302, -18.51591682, -20.78538132, -18.67061234,
          -20.35578346, -19.77608490, -20.64961624, -26.99978256, -24.73842430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15469551]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.72182465, -25.40373611, -21.20227242, -20.08390617, -21.28728104,
         -19.64896584, -22.07214165, -21.57941437, -23.54422569, -23.66501617]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 553] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 553] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 224] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.95499587, 4.21736145, 0.73983389, 0.09517530, 0.76654375, 1.38522863,
         0.98252308, 2.42742276, 2.46281290]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0320 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [771]; unstable size 771; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 771] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 771] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 771] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 252] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.21118438,  4.10176992, -1.16934431, -0.72179770,  0.25676203,
          0.67854643,  1.19206500,  4.31922293,  3.50376463]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822],
         [-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31667900, -0.48942757]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0552 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.38232803, -35.89345551, -38.77233124, -38.86247635, -39.62222672,
         -39.86164474, -39.87382126, -39.40642929, -30.93457031, -36.03558350]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 499] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 197] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.37971115, 3.87611699, 6.40737104, 6.38697481, 7.03273010, 7.19149971,
         7.20581532, 6.50212860, 4.14408016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0631 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.24032974, -37.65886307, -32.76491928, -35.87559128, -36.34276581,
         -36.02743912, -34.61969757, -36.23526382, -36.62348938, -40.18959427]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [734]; unstable size 734; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 734] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 734] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 734] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 228] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.42341971, 3.43717408, 2.28934193, 2.53784919, 2.29687023, 0.88678980,
         1.92648387, 2.44576740, 5.71752787]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0347 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.79258919, -17.99694252, -16.45632553, -15.40058136, -16.56349564,
         -14.87314796, -17.80143356, -13.41994190, -19.54096222, -16.64786148]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [937]; unstable size 937; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 937] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 937] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 937] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.73422432, 2.70791650, 1.68733311, 0.95580482, 2.14770627, 0.50132108,
         2.85892773, 3.87416196, 1.62221181]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0563 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [720]; unstable size 720; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 720] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 720] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 720] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 333] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.70876312,  4.66763592,  1.06026208, -0.11882263,  0.88787532,
         -0.96121311,  2.31396723,  4.62897205,  4.35728979]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.39785576, -22.92395973, -16.30167580, -18.20151138, -17.08473396,
          -18.17427635, -15.85140800, -20.40995026, -22.59860229, -22.46858406],
         [-20.39785576, -22.92395973, -16.30167580, -18.20151138, -17.08473396,
          -18.17427635, -15.85140800, -20.40995026, -22.59860229, -22.46858406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78305817, -0.45026779]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 788] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 788] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 259] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.16785002,  2.02646732,  3.53692198,  1.20165157,  4.52165031,
          3.78477144,  1.66250563, -2.21134377, -1.22387242]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952],
         [-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10931778, -0.37438583, -0.12633133]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0406 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 654] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 654] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 260] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.18142676,  4.33078861, -0.50891984, -0.65947914,  0.37091148,
          1.13457835, -0.94743365,  4.42701149,  2.60953641]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383],
         [-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36283302, -0.42330742, -0.13775826]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0372 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [494]; unstable size 494; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 494] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 494] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 494] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 270] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.14928651,  4.51440191,  1.64132571, -1.13099456,  1.91445684,
          0.33408660,  1.53952146,  3.79073191,  4.14098549]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
          -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05387688]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0422 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.82804489, -23.63042831, -29.23712158, -28.24177551, -29.14320946,
         -29.41248703, -29.22246933, -29.10352325, -24.23150253, -21.39186287]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [726]; unstable size 726; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 726] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 726] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 726] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 264] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.64157343, 1.36549675, 5.86060524, 5.40555239, 5.76025963, 6.48044825,
         6.13686466, 6.01794624, 1.13634682]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0279 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 942] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 942] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 241] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.41716480,  5.54713583,  0.52021515, -0.06935591, -0.04526925,
          0.63125217,  1.37135756,  2.56105781,  5.77544498]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.30881500, -30.56450272, -25.00361443, -23.76336479, -24.40058708,
          -23.71853256, -24.78523254, -26.12451744, -27.38202095, -30.68591499],
         [-29.30881500, -30.56450272, -25.00361443, -23.76336479, -24.40058708,
          -23.71853256, -24.78523254, -26.12451744, -27.38202095, -30.68591499]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04483223, 0.68205452]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1120 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.083852767944336
alpha/beta optimization time: 1.1945743560791016
initial alpha-crown bounds: tensor([[ 4.47513914,  5.59848595,  0.56283212, -0.05797207, -0.01270843,
          0.67102277,  1.41879368,  2.60586262,  5.82239771]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.057972073554992676
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.65295100212097
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.65291333198547
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65288758277893
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6528673171997
Verifying property 3 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05797207]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
        -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05797207]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 942
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 235
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001049041748046875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057971835136413574
10 lb beta sum: 0.0, worst -0.05797368288040161
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0525    
Accumulated time: func 0.0525    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 72] 
split level 3: [/input-8, 1699] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 403] 
split level 6: [/input-8, 770] 
split level 7: [/input-8, 1732] 
split level 8: [/input-8, 1722] 
split level 9: [/input-8, 140] 
split level 10: [/input-8, 1706] 
split level 11: [/input-8, 1731] 
split level 12: [/input-8, 1713] 
split level 13: [/input-8, 405] 
split level 14: [/input-8, 141] 
split level 15: [/input-8, 771] 
split level 16: [/input-8, 418] 
split level 17: [/input-8, 592] 
split level 18: [/input-8, 1301] 
split level 19: [/input-8, 1716] 
split level 20: [/input-8, 779] 
split level 21: [/input-8, 453] 
split level 22: [/input-8, 443] 
split level 23: [/input-8, 1325] 
split level 24: [/input-8, 138] 
split level 25: [/input-8, 1499] 
split level 26: [/input-8, 906] 
split level 27: [/input-8, 1834] 
split level 28: [/input-8, 1701] 
split level 29: [/input, 1510] 
split level 30: [/input-8, 1171] 
split level 31: [/input-8, 1028] 
split level 32: [/input-8, 588] 
split level 33: [/input-8, 580] 
split level 34: [/input, 1448] 
split level 35: [/input, 2968] 
split level 36: [/input-8, 731] 
split level 37: [/input-8, 1261] 
split level 38: [/input, 2662] 
split level 39: [/input-8, 772] 
split level 40: [/input-8, 87] 
split level 41: [/input-8, 56] 
split level 42: [/input-8, 1089] 
split level 43: [/input-8, 1029] 
split level 44: [/input-8, 582] 
split level 45: [/input-8, 994] 
split level 46: [/input-8, 1733] 
split level 47: [/input-8, 1782] 
split level 48: [/input-8, 1147] 
split level 49: [/input-8, 382] 
split level 50: [/input, 1499] 
split level 51: [/input-8, 406] 
split level 52: [/input-8, 579] 
split level 53: [/input-8, 397] 
split level 54: [/input-8, 1337] 
split level 55: [/input-8, 1662] 
split level 56: [/input-8, 97] 
split level 57: [/input-8, 595] 
split level 58: [/input-8, 75] 
split level 59: [/input-8, 1270] 
split level 60: [/input-8, 578] 
split level 61: [/input-8, 1265] 
split level 62: [/input-8, 454] 
split level 63: [/input-8, 1730] 
split level 64: [/input, 581] 
split level 65: [/input-8, 1302] 
split level 66: [/input-8, 1342] 
split level 67: [/input, 1913] 
split level 68: [/input-8, 105] 
split level 69: [/input, 1449] 
split level 70: [/input-8, 1953] 
split level 71: [/input-8, 993] 
split level 72: [/input-8, 95] 
split level 73: [/input-8, 235] 
split level 74: [/input-8, 1593] 
split level 75: [/input-8, 374] 
split level 76: [/input, 3262] 
split level 77: [/input-8, 142] 
split level 78: [/input-8, 91] 
split level 79: [/input, 3010] 
split level 80: [/input-8, 1576] 
split level 81: [/input-8, 1294] 
split level 82: [/input, 1912] 
split level 83: [/input-8, 218] 
split level 84: [/input-8, 945] 
split level 85: [/input-8, 57] 
split level 86: [/input-8, 1842] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 956] 
split level 89: [/input-8, 226] 
split level 90: [/input-8, 1752] 
split level 91: [/input, 1396] 
split level 92: [/input, 1491] 
split level 93: [/input, 2730] 
split level 94: [/input, 2742] 
split level 95: [/input, 131] 
split level 96: [/input, 3347] 
split level 97: [/input, 56] 
split level 98: [/input-8, 149] 
split level 99: [/input-8, 1293] 
split level 100: [/input-8, 379] 
split level 101: [/input, 2516] 
split level 102: [/input, 292] 
split level 103: [/input, 2660] 
split level 104: [/input, 1497] 
split level 105: [/input, 3345] 
split level 106: [/input, 1478] 
split level 107: [/input, 3637] 
split level 108: [/input-8, 103] 
split level 109: [/input-8, 1791] 
split level 110: [/input-8, 1965] 
split level 111: [/input, 803] 
split level 112: [/input-8, 424] 
split level 113: [/input-8, 584] 
split level 114: [/input, 3351] 
split level 115: [/input, 787] 
split level 116: [/input-8, 79] 
split level 117: [/input-8, 1959] 
split level 118: [/input, 2474] 
split level 119: [/input-8, 432] 
split level 120: [/input, 2765] 
split level 121: [/input-8, 1283] 
split level 122: [/input, 807] 
split level 123: [/input-8, 1310] 
split level 124: [/input-8, 423] 
split level 125: [/input, 2663] 
split level 126: [/input, 3228] 
split level 127: [/input-8, 150] 
split level 128: [/input-8, 1284] 
split level 129: [/input, 940] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 236] 
split level 132: [/input, 819] 
split level 133: [/input, 424] 
split level 134: [/input, 2498] 
split level 135: [/input, 2750] 
split level 136: [/input-8, 1591] 
split level 137: [/input, 168] 
split level 138: [/input-8, 1758] 
split level 139: [/input, 177] 
split level 140: [/input, 2897] 
split level 141: [/input, 55] 
split level 142: [/input, 141] 
split level 143: [/input-8, 1971] 
split level 144: [/input, 179] 
split level 145: [/input, 2502] 
split level 146: [/input, 3566] 
split level 147: [/input, 282] 
split level 148: [/input, 791] 
split level 149: [/input, 792] 
split level 150: [/input-8, 151] 
split level 151: [/input-8, 1729] 
split level 152: [/input, 1706] 
split level 153: [/input, 2851] 
split level 154: [/input-8, 442] 
split level 155: [/input-8, 1851] 
split level 156: [/input-8, 1774] 
split level 157: [/input, 293] 
split level 158: [/input, 3123] 
split level 159: [/input, 2282] 
split level 160: [/input, 2540] 
split level 161: [/input, 308] 
split level 162: [/input, 2749] 
split level 163: [/input, 3279] 
split level 164: [/input, 809] 
split level 165: [/input, 934] 
split level 166: [/input-8, 1735] 
split level 167: [/input, 1525] 
split level 168: [/input, 467] 
split level 169: [/input, 2547] 
split level 170: [/input, 1489] 
split level 171: [/input, 1714] 
split level 172: [/input, 2103] 
split level 173: [/input, 2686] 
split level 174: [/input, 283] 
split level 175: [/input, 3116] 
split level 176: [/input-8, 2038] 
split level 177: [/input, 3419] 
split level 178: [/input, 194] 
split level 179: [/input, 215] 
split level 180: [/input-12, 61] 
split level 181: [/input, 924] 
split level 182: [/input, 811] 
split level 183: [/input, 810] 
split level 184: [/input, 348] 
split level 185: [/input, 296] 
split level 186: [/input, 362] 
split level 187: [/input, 3361] 
split level 188: [/input-8, 1271] 
split level 189: [/input, 298] 
split level 190: [/input, 2269] 
split level 191: [/input, 785] 
split level 192: [/input, 346] 
split level 193: [/input, 2481] 
split level 194: [/input, 2852] 
split level 195: [/input, 3311] 
split level 196: [/input, 2246] 
split level 197: [/input, 3511] 
split level 198: [/input, 769] 
split level 199: [/input, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05793565511703491
10 lb beta sum: 0.0, worst -0.05793261528015137
Time: prepare 0.0115    bound 0.0957    transfer 0.0026    finalize 0.0030    func 0.1153    
Accumulated time: func 0.1677    prepare 0.0216    bound 0.1477    transfer 0.0027    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.09596983) min lb tensor(-0.05792987)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010700702667236328 
BICCOS Cumulative time: 0.010700702667236328
Preprocessing time: 0.010004520416259766 Inference time: 0.00011014938354492188 Add cuts time: 5.173683166503906e-05 Cut analysis time: 0.0005342960357666016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05414 (1), -0.05389 (1), -0.05389 (1), -0.05388 (1), -0.05380 (1), -0.05374 (1), -0.05374 (1), -0.05365 (1), -0.05364 (1), -0.05344 (1), -0.05333 (1), -0.05316 (1), -0.05313 (1), -0.05309 (1), -0.05308 (1), -0.05298 (1), -0.05287 (1), -0.05276 (1), -0.05267 (1), -0.05249 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5086    set_bounds 0.0094    solve 0.1154    add 0.0693    
Accumulated time: pickout 0.0003    decision 0.5086    set_bounds 0.0094    solve 0.1154    add 0.0693    
Current (lb-rhs): -0.05413806438446045
50 domains visited
Cumulative time: 0.7709529399871826

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052785634994506836
10 lb beta sum: 0.36995184421539307, worst -0.052003443241119385
Time: prepare 0.0073    bound 0.1151    transfer 0.0008    finalize 0.0029    func 0.1287    
Accumulated time: func 0.2965    prepare 0.0292    bound 0.2628    transfer 0.0035    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.06799788) min lb tensor(-0.05075604)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01482701301574707 
BICCOS Cumulative time: 0.0255277156829834
Preprocessing time: 0.011688232421875 Inference time: 0.0017049312591552734 Add cuts time: 0.0012049674987792969 Cut analysis time: 0.0002288818359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03597 (2), -0.03594 (2), -0.03589 (2), -0.03582 (2), -0.03578 (2), -0.03566 (2), -0.03545 (2), -0.03530 (2), -0.03526 (2), -0.03491 (2), -0.03488 (2), -0.03487 (2), -0.03479 (2), -0.03463 (2), -0.03448 (2), -0.03437 (2), -0.03434 (2), -0.03423 (2), -0.03415 (2), -0.03399 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0122    solve 0.1288    add 0.0810    
Accumulated time: pickout 0.0014    decision 0.5285    set_bounds 0.0216    solve 0.2442    add 0.1503    
Current (lb-rhs): -0.03597429394721985
100 domains visited
Cumulative time: 1.0289835929870605

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 72] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] 
split level 2: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-8, 403] 
split level 3: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4628570079803467, worst -0.035974353551864624
10 lb beta sum: 0.4628570079803467, worst -0.03606666624546051
Time: prepare 0.0170    bound 0.1148    transfer 0.0007    finalize 0.0025    func 0.1375    
Accumulated time: func 0.4340    prepare 0.0464    bound 0.3776    transfer 0.0042    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.07996430) min lb tensor(-0.03591540)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.015073060989379883 
BICCOS Cumulative time: 0.04060077667236328
Preprocessing time: 0.011657953262329102 Inference time: 0.0018007755279541016 Add cuts time: 0.0013859272003173828 Cut analysis time: 0.00022840499877929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01576 (3), -0.01568 (3), -0.01567 (3), -0.01543 (3), -0.01540 (3), -0.01539 (3), -0.01483 (3), -0.01435 (3), -0.01435 (3), -0.01357 (3), -0.01357 (3), -0.01348 (3), -0.01347 (3), -0.01302 (3), -0.01298 (3), -0.01253 (3), -0.01252 (3), -0.01245 (3), -0.01244 (3), -0.01239 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0193    set_bounds 0.0149    solve 0.1376    add 0.0852    
Accumulated time: pickout 0.0024    decision 0.5478    set_bounds 0.0365    solve 0.3818    add 0.2355    
Current (lb-rhs): -0.01576361060142517
150 domains visited
Cumulative time: 1.3024208545684814

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4651600420475006, worst -0.015762895345687866
10 lb beta sum: 0.4651600420475006, worst -0.015350982546806335
Time: prepare 0.0169    bound 0.1165    transfer 0.0007    finalize 0.0023    func 0.1398    
Accumulated time: func 0.5738    prepare 0.0635    bound 0.4941    transfer 0.0049    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.08409140) min lb tensor(-0.01530519)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.015668630599975586 
BICCOS Cumulative time: 0.05626940727233887
Preprocessing time: 0.011625289916992188 Inference time: 0.0023310184478759766 Add cuts time: 0.0008258819580078125 Cut analysis time: 0.0008864402770996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00273 (4), -0.00273 (4), -0.00271 (4), -0.00271 (4), -0.00270 (4), -0.00269 (4), -0.00268 (4), -0.00267 (4), -0.00259 (4), -0.00258 (4), -0.00241 (4), -0.00238 (4), -0.00218 (4), -0.00204 (4), -0.00200 (4), -0.00199 (4), -0.00189 (4), -0.00184 (4), -0.00179 (4), -0.00175 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0201    set_bounds 0.0154    solve 0.1399    add 0.2179    
Accumulated time: pickout 0.0035    decision 0.5679    set_bounds 0.0519    solve 0.5217    add 0.4533    
Current (lb-rhs): -0.002728402614593506
200 domains visited
Cumulative time: 1.712644100189209

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 140] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0053206682205200195
10 lb beta sum: 0.3617361783981323, worst -0.0061539411544799805
Time: prepare 0.0077    bound 0.1310    transfer 0.0007    finalize 0.0025    func 0.1445    
Accumulated time: func 0.7182    prepare 0.0715    bound 0.6251    transfer 0.0056    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.37565136) min lb tensor(-0.00249130)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.033025264739990234 
BICCOS Cumulative time: 0.0892946720123291
Preprocessing time: 0.012706518173217773 Inference time: 0.015352249145507812 Add cuts time: 0.004392862319946289 Cut analysis time: 0.0005736351013183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00249 (5), -0.00249 (5), -0.00120 (5), -0.00118 (5), -0.00102 (5), -0.00101 (5), -0.00085 (5), -0.00084 (5), 
Length of domains: 8
Time: pickout 0.0016    decision 0.0193    set_bounds 0.0157    solve 0.1445    add 0.1087    
Accumulated time: pickout 0.0051    decision 0.5872    set_bounds 0.0677    solve 0.6662    add 0.5621    
Current (lb-rhs): -0.002491295337677002
208 domains visited
Cumulative time: 2.035810947418213

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499]), tensor([-1.]), tensor([0]), tensor([-1.26118054e-33]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.86388358e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, -1.0], [0, 0], [2.4079324489810394e-36, 0.007433877792209387], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.005105243530124426], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.40793245e-36, 7.43387779e-03, 1.40887666e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.005105243530124426], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.40793245e-36, 7.43387779e-03, 5.30050529e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.99113949e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, 1.0], [0, 0], [2.4079324489810394e-36, 0.0076569183729588985], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.00481669744476676], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.40793245e-36, 7.65691837e-03, 1.40047837e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.00481669744476676], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.40793245e-36, 7.65691837e-03, 4.95479835e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.80374249e-03]), tensor([0, 3])), '/input-12': ([72, 31], [1.0, -1.0], [0, 0], [5.125527779981098e-11, 0.007065878715366125], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.005279944743961096], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.12552778e-11, 7.06587872e-03, 1.43154729e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.005279944743961096], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.12552778e-11, 7.06587872e-03, 9.99999997e-07]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [-1.2611805421575396e-33, 0.0022240744438022375], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.12552778e-11, 7.77797541e-03, 1.43707860e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [-1.2611805421575396e-33, 0.0022240744438022375], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.12552778e-11, 7.77797541e-03, 2.92150839e-03]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.002843366703018546], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.12552778e-11, 7.77797541e-03, 1.44305099e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [-1.2611805421575396e-33, 0.002843366703018546], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.12552778e-11, 7.77797541e-03, 2.65918835e-03]), tensor([1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057881832122802734
10 lb beta sum: 0.7825846076011658, worst -0.05462442338466644
Time: prepare 0.0006    bound 0.1263    transfer 0.0002    finalize 0.0002    func 0.1275    
Accumulated time: func 0.8457    prepare 0.0721    bound 0.7514    transfer 0.0059    finalize 0.0135    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 2: [/input-12, 31] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
split level 3: [/input-8, 403] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 4: [/input-8, 140] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
split level 5: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6942300796508789, worst -0.032401204109191895
10 lb beta sum: 0.7073464393615723, worst -0.03224879503250122
Time: prepare 0.0108    bound 0.1266    transfer 0.0016    finalize 0.0021    func 0.1428    
Accumulated time: func 0.9885    prepare 0.0833    bound 0.8779    transfer 0.0075    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.06787983) min lb tensor(-0.03220618)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7271999716758728, worst -0.2079048603773117
10 lb beta sum: 0.7341830134391785, worst -0.03135263919830322
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 3
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.2670786380767822 
BICCOS Cumulative time: 0.35637331008911133
Preprocessing time: 0.007104158401489258 Inference time: 0.2556326389312744 Add cuts time: 0.0037581920623779297 Cut analysis time: 0.000583648681640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03221 (6), -0.03193 (6), -0.03129 (6), -0.03046 (6), -0.03041 (6), -0.03018 (6), -0.02950 (6), -0.02855 (6), -0.02758 (6), -0.02715 (6), -0.02664 (6), -0.02654 (6), -0.02645 (6), -0.02635 (6), -0.02582 (6), -0.02546 (6), -0.02523 (6), -0.02489 (6), -0.02479 (6), -0.02461 (6), 
Length of domains: 32
Time: pickout 0.0006    decision 0.0190    set_bounds 0.0263    solve 0.1428    add 0.0012    
Accumulated time: pickout 0.0056    decision 0.6062    set_bounds 0.0940    solve 0.8091    add 0.5632    
Current (lb-rhs): -0.032206177711486816
240 domains visited
Cumulative time: 2.6518938541412354

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 1: [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03057163953781128
10 lb beta sum: 0.24675202369689941, worst -0.029673993587493896
Time: prepare 0.0049    bound 0.1290    transfer 0.0006    finalize 0.0013    func 0.1374    
Accumulated time: func 1.1259    prepare 0.0883    bound 1.0069    transfer 0.0081    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00393032) min lb tensor(-0.02965045)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 12.
#cuts 1-3: 3
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.007748126983642578 
BICCOS Cumulative time: 0.3641214370727539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02965 (9), -0.02942 (9), -0.02866 (9), -0.02786 (9), -0.02784 (9), -0.02761 (9), -0.02760 (9), -0.02733 (9), -0.02687 (9), -0.02669 (9), -0.02594 (9), -0.02584 (9), -0.02581 (9), -0.02552 (9), -0.02521 (9), -0.02492 (9), -0.02482 (9), -0.02464 (9), -0.02418 (9), -0.02415 (9), 
Length of domains: 256
Time: pickout 0.0015    decision 0.0154    set_bounds 0.0132    solve 0.1375    add 0.0020    
Accumulated time: pickout 0.0072    decision 0.6217    set_bounds 0.1072    solve 0.9466    add 0.5652    
Current (lb-rhs): -0.029650449752807617
496 domains visited
Cumulative time: 2.829829692840576

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.29436081647872925, worst -0.029650747776031494
10 lb beta sum: 0.29432886838912964, worst -0.02963036298751831
Time: prepare 0.0216    bound 0.1291    transfer 0.0024    finalize 0.0033    func 0.1605    
Accumulated time: func 1.2865    prepare 0.1101    bound 1.1360    transfer 0.0105    finalize 0.0202    
all_split False
======================Cut inference begins======================
max lb tensor(0.26334459) min lb tensor(-0.02961797)
Number of Verified Splits: 103 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.02677750587463379 
BICCOS Cumulative time: 0.3908989429473877
Preprocessing time: 0.014989137649536133 Inference time: 0.009143590927124023 Add cuts time: 0.002319812774658203 Cut analysis time: 0.0003249645233154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02962 (10), -0.02872 (10), -0.02865 (10), -0.02781 (10), -0.02757 (10), -0.02714 (10), -0.02689 (10), -0.02688 (10), -0.02666 (10), -0.02619 (10), -0.02580 (10), -0.02534 (10), -0.02505 (10), -0.02490 (10), -0.02480 (10), -0.02459 (10), -0.02444 (10), -0.02437 (10), -0.02412 (10), -0.02404 (10), 
Length of domains: 409
Time: pickout 0.0039    decision 0.0225    set_bounds 0.0225    solve 0.1607    add 0.0047    
Accumulated time: pickout 0.0111    decision 0.6442    set_bounds 0.1297    solve 1.1073    add 0.5698    
Current (lb-rhs): -0.02961796522140503
905 domains visited
Cumulative time: 3.0719456672668457

BaB round 4
batch: 409
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1701] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028964519500732422
10 lb beta sum: 0.4727165699005127, worst -0.028941631317138672
Time: prepare 0.0158    bound 0.1361    transfer 0.0012    finalize 0.0047    func 0.1635    
Accumulated time: func 1.4500    prepare 0.1262    bound 1.2721    transfer 0.0117    finalize 0.0249    
all_split False
======================Cut inference begins======================
max lb tensor(0.64088351) min lb tensor(-0.02892739)
Number of Verified Splits: 667 of 818
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.09626507759094238 
BICCOS Cumulative time: 0.4871640205383301
Preprocessing time: 0.023158788681030273 Inference time: 0.06352972984313965 Add cuts time: 0.009184837341308594 Cut analysis time: 0.0003917217254638672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02893 (11), -0.02870 (11), -0.02714 (11), -0.02709 (11), -0.02686 (11), -0.02570 (11), -0.02530 (11), -0.02502 (11), -0.02434 (11), -0.02412 (11), -0.02394 (11), -0.02388 (11), -0.02371 (11), -0.02370 (11), -0.02334 (11), -0.02319 (11), -0.02292 (11), -0.02213 (11), -0.02210 (11), -0.02209 (11), 
Length of domains: 151
Time: pickout 0.0058    decision 0.0342    set_bounds 0.0348    solve 0.1637    add 0.0024    
Accumulated time: pickout 0.0169    decision 0.6783    set_bounds 0.1644    solve 1.2710    add 0.5723    
Current (lb-rhs): -0.028927385807037354
1056 domains visited
Cumulative time: 3.4135775566101074

BaB round 5
batch: 151
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028099894523620605
10 lb beta sum: 0.8515108823776245, worst -0.02626579999923706
Time: prepare 0.0060    bound 0.1346    transfer 0.0015    finalize 0.0015    func 0.1455    
Accumulated time: func 1.5955    prepare 0.1323    bound 1.4067    transfer 0.0132    finalize 0.0264    
all_split False
======================Cut inference begins======================
max lb tensor(0.53414285) min lb tensor(-0.02622886)
Number of Verified Splits: 240 of 302
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.03512096405029297 
BICCOS Cumulative time: 0.522284984588623
Preprocessing time: 0.0089263916015625 Inference time: 0.02386331558227539 Add cuts time: 0.001984119415283203 Cut analysis time: 0.000347137451171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02623 (12), -0.02485 (12), -0.02436 (12), -0.02311 (12), -0.02117 (12), -0.02089 (12), -0.02067 (12), -0.02051 (12), -0.02040 (12), -0.02017 (12), -0.01984 (12), -0.01939 (12), -0.01932 (12), -0.01806 (12), -0.01804 (12), -0.01754 (12), -0.01735 (12), -0.01722 (12), -0.01720 (12), -0.01663 (12), 
Length of domains: 62
Time: pickout 0.0034    decision 0.0200    set_bounds 0.0128    solve 0.1456    add 0.0019    
Accumulated time: pickout 0.0203    decision 0.6984    set_bounds 0.1772    solve 1.4166    add 0.5742    
Current (lb-rhs): -0.026228860020637512
1118 domains visited
Cumulative time: 3.634058713912964

BaB round 6
batch: 62
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1028] [/input-8, 1028] [/input-8, 772] [/input-8, 772] [/input-8, 1028] [/input-8, 1028] [/input-8, 772] [/input-8, 772] [/input-8, 1028] [/input-8, 772] 
split level 1: [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0069003105163574, worst -0.02331782877445221
10 lb beta sum: 1.0069003105163574, worst -0.02327384054660797
Time: prepare 0.0104    bound 0.1296    transfer 0.0011    finalize 0.0014    func 0.1442    
Accumulated time: func 1.7397    prepare 0.1429    bound 1.5363    transfer 0.0143    finalize 0.0278    
all_split False
======================Cut inference begins======================
max lb tensor(0.00171268) min lb tensor(-0.02325471)
Number of Verified Splits: 10 of 248
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.009195804595947266 
BICCOS Cumulative time: 0.5314807891845703
Preprocessing time: 0.00732874870300293 Inference time: 0.0012471675872802734 Add cuts time: 0.0002884864807128906 Cut analysis time: 0.0003314018249511719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02325 (14), -0.02323 (14), -0.02288 (14), -0.02286 (14), -0.02204 (14), -0.02202 (14), -0.02170 (14), -0.02168 (14), -0.02136 (14), -0.02134 (14), -0.02064 (14), -0.02062 (14), -0.02046 (14), -0.02044 (14), -0.01905 (14), -0.01903 (14), -0.01816 (14), -0.01813 (14), -0.01792 (14), -0.01784 (14), 
Length of domains: 238
Time: pickout 0.0019    decision 0.0165    set_bounds 0.0117    solve 0.1442    add 0.0029    
Accumulated time: pickout 0.0221    decision 0.7148    set_bounds 0.1890    solve 1.5608    add 0.5771    
Current (lb-rhs): -0.02325470745563507
1356 domains visited
Cumulative time: 3.821153402328491

BaB round 7
batch: 238
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9893768429756165, worst -0.0223972350358963
10 lb beta sum: 0.9893768429756165, worst -0.022375240921974182
Time: prepare 0.0199    bound 0.1293    transfer 0.0038    finalize 0.0021    func 0.1582    
Accumulated time: func 1.8979    prepare 0.1630    bound 1.6657    transfer 0.0182    finalize 0.0299    
all_split False
======================Cut inference begins======================
max lb tensor(0.00126648) min lb tensor(-0.02236356)
Number of Verified Splits: 14 of 476
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.015839576721191406 
BICCOS Cumulative time: 0.5473203659057617
Preprocessing time: 0.01344752311706543 Inference time: 0.0017156600952148438 Add cuts time: 0.00033974647521972656 Cut analysis time: 0.00033664703369140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02236 (15), -0.02233 (15), -0.02199 (15), -0.02196 (15), -0.02143 (15), -0.02141 (15), -0.02114 (15), -0.02111 (15), -0.02106 (15), -0.02103 (15), -0.02080 (15), -0.02078 (15), -0.02047 (15), -0.02045 (15), -0.02021 (15), -0.02018 (15), -0.01988 (15), -0.01985 (15), -0.01974 (15), -0.01971 (15), 
Length of domains: 462
Time: pickout 0.0033    decision 0.0211    set_bounds 0.0216    solve 0.1584    add 0.0037    
Accumulated time: pickout 0.0255    decision 0.7360    set_bounds 0.2106    solve 1.7192    add 0.5808    
Current (lb-rhs): -0.022363558411598206
1818 domains visited
Cumulative time: 4.046307563781738

BaB round 8
batch: 462
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9776620268821716, worst -0.022363558411598206
10 lb beta sum: 0.9776620268821716, worst -0.022350266575813293
Time: prepare 0.0390    bound 0.1388    transfer 0.0016    finalize 0.0039    func 0.1901    
Accumulated time: func 2.0880    prepare 0.2022    bound 1.8044    transfer 0.0197    finalize 0.0339    
all_split False
======================Cut inference begins======================
max lb tensor(0.00066447) min lb tensor(-0.02234580)
Number of Verified Splits: 10 of 924
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.029574155807495117 
BICCOS Cumulative time: 0.5768945217132568
Preprocessing time: 0.02755427360534668 Inference time: 0.0013353824615478516 Add cuts time: 0.0003170967102050781 Cut analysis time: 0.0003674030303955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02235 (16), -0.02232 (16), -0.02197 (16), -0.02194 (16), -0.02142 (16), -0.02139 (16), -0.02126 (16), -0.02125 (16), -0.02110 (16), -0.02108 (16), -0.02104 (16), -0.02101 (16), -0.02089 (16), -0.02087 (16), -0.02078 (16), -0.02075 (16), -0.02044 (16), -0.02043 (16), -0.02029 (16), -0.02028 (16), 
Length of domains: 914
Time: pickout 0.0073    decision 0.0376    set_bounds 0.1906    solve 0.1903    add 0.0073    
Accumulated time: pickout 0.0327    decision 0.7736    set_bounds 0.4012    solve 1.9096    add 0.5881    
Current (lb-rhs): -0.02234579622745514
2732 domains visited
Cumulative time: 4.5102152824401855

BaB round 9
batch: 914
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9738668203353882, worst -0.022346094250679016
10 lb beta sum: 0.9738668203353882, worst -0.02234603464603424
Time: prepare 0.0771    bound 0.1597    transfer 0.0086    finalize 0.0102    func 0.2673    
Accumulated time: func 2.3554    prepare 0.2796    bound 1.9641    transfer 0.0283    finalize 0.0441    
all_split False
======================Cut inference begins======================
max lb tensor(0.23900610) min lb tensor(-0.02234359)
Number of Verified Splits: 915 of 1828
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.18116116523742676 
BICCOS Cumulative time: 0.7580556869506836
Preprocessing time: 0.0561671257019043 Inference time: 0.11750173568725586 Add cuts time: 0.006927490234375 Cut analysis time: 0.0005648136138916016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02234 (17), -0.02231 (17), -0.02196 (17), -0.02194 (17), -0.02141 (17), -0.02138 (17), -0.02122 (17), -0.02119 (17), -0.02109 (17), -0.02106 (17), -0.02103 (17), -0.02100 (17), -0.02083 (17), -0.02082 (17), -0.02078 (17), -0.02075 (17), -0.02043 (17), -0.02041 (17), -0.02024 (17), -0.02024 (17), 
Length of domains: 913
Time: pickout 0.0151    decision 0.0620    set_bounds 0.0784    solve 0.2677    add 0.0031    
Accumulated time: pickout 0.0479    decision 0.8356    set_bounds 0.4795    solve 2.1773    add 0.5912    
Current (lb-rhs): -0.02234359085559845
3645 domains visited
Cumulative time: 5.126203775405884

BaB round 10
batch: 913
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021685004234313965
10 lb beta sum: 0.7879341244697571, worst -0.021679401397705078
Time: prepare 0.0342    bound 0.1593    transfer 0.0023    finalize 0.0084    func 0.2158    
Accumulated time: func 2.5712    prepare 0.3140    bound 2.1235    transfer 0.0307    finalize 0.0525    
all_split False
======================Cut inference begins======================
max lb tensor(0.00190097) min lb tensor(-0.02167648)
Number of Verified Splits: 120 of 1826
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.07434201240539551 
BICCOS Cumulative time: 0.8323976993560791
Preprocessing time: 0.05498147010803223 Inference time: 0.017836332321166992 Add cuts time: 0.0011124610900878906 Cut analysis time: 0.00041174888610839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02168 (18), -0.02165 (18), -0.02130 (18), -0.02128 (18), -0.02074 (18), -0.02072 (18), -0.02051 (18), -0.02051 (18), -0.02041 (18), -0.02039 (18), -0.02037 (18), -0.02035 (18), -0.02014 (18), -0.02013 (18), -0.02009 (18), -0.02007 (18), -0.01977 (18), -0.01975 (18), -0.01954 (18), -0.01954 (18), 
Length of domains: 1706
Time: pickout 0.0175    decision 0.0608    set_bounds 0.0777    solve 0.2161    add 0.0132    
Accumulated time: pickout 0.0653    decision 0.8964    set_bounds 0.5572    solve 2.3934    add 0.6044    
Current (lb-rhs): -0.021676480770111084
5351 domains visited
Cumulative time: 5.588456869125366

BaB round 11
batch: 1706
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8690004348754883, worst -0.021108567714691162
10 lb beta sum: 0.9192525148391724, worst -0.021095693111419678
Time: prepare 0.1433    bound 0.2505    transfer 0.0133    finalize 0.0162    func 0.4457    
Accumulated time: func 3.0168    prepare 0.4576    bound 2.3740    transfer 0.0440    finalize 0.0687    
all_split False
======================Cut inference begins======================
max lb tensor(0.01031655) min lb tensor(-0.02109438)
Number of Verified Splits: 1746 of 3412
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.36971163749694824 
BICCOS Cumulative time: 1.2021093368530273
Preprocessing time: 0.10445308685302734 Inference time: 0.2494957447052002 Add cuts time: 0.0152435302734375 Cut analysis time: 0.0005192756652832031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02109 (19), -0.02106 (19), -0.02072 (19), -0.02069 (19), -0.02016 (19), -0.02013 (19), -0.01993 (19), -0.01990 (19), -0.01983 (19), -0.01980 (19), -0.01979 (19), -0.01976 (19), -0.01955 (19), -0.01953 (19), -0.01952 (19), -0.01949 (19), -0.01920 (19), -0.01916 (19), -0.01897 (19), -0.01893 (19), 
Length of domains: 1666
Time: pickout 0.0255    decision 0.2668    set_bounds 0.1482    solve 0.4463    add 0.0090    
Accumulated time: pickout 0.0908    decision 1.1632    set_bounds 0.7054    solve 2.8397    add 0.6134    
Current (lb-rhs): -0.02109438180923462
7017 domains visited
Cumulative time: 6.8730692863464355

BaB round 12
batch: 1666
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1733] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 1733] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 1733] [/input-8, 1730] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02020084857940674
10 lb beta sum: 0.7621103525161743, worst -0.020197778940200806
Time: prepare 0.0641    bound 0.2468    transfer 0.0129    finalize 0.0165    func 0.3623    
Accumulated time: func 3.3791    prepare 0.5219    bound 2.6208    transfer 0.0569    finalize 0.0852    
all_split False
======================Cut inference begins======================
max lb tensor(0.00149459) min lb tensor(-0.02019082)
Number of Verified Splits: 199 of 3332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.1380634307861328 
BICCOS Cumulative time: 1.3401727676391602
Preprocessing time: 0.10170531272888184 Inference time: 0.03369307518005371 Add cuts time: 0.0019838809967041016 Cut analysis time: 0.0006811618804931641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02019 (20), -0.02016 (20), -0.01999 (20), -0.01995 (20), -0.01955 (20), -0.01951 (20), -0.01926 (20), -0.01923 (20), -0.01916 (20), -0.01913 (20), -0.01912 (20), -0.01907 (20), -0.01906 (20), -0.01903 (20), -0.01898 (20), -0.01881 (20), -0.01878 (20), -0.01866 (20), -0.01863 (20), -0.01862 (20), 
Length of domains: 3133
Time: pickout 0.0314    decision 0.0993    set_bounds 0.2806    solve 0.3630    add 0.0173    
Accumulated time: pickout 0.1222    decision 1.2625    set_bounds 0.9860    solve 3.2027    add 0.6307    
Current (lb-rhs): -0.02019082009792328
10150 domains visited
Cumulative time: 7.809441566467285

BaB round 13
batch: 3133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 582] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 582] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 1730] [/input-8, 582] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7607550024986267, worst -0.019351541996002197
10 lb beta sum: 0.8812304735183716, worst -0.019347727298736572
Time: prepare 0.2663    bound 0.4009    transfer 0.0305    finalize 0.0283    func 0.7660    
Accumulated time: func 4.1452    prepare 0.7885    bound 3.0217    transfer 0.0874    finalize 0.1135    
all_split False
======================Cut inference begins======================
max lb tensor(0.00161302) min lb tensor(-0.01934105)
Number of Verified Splits: 507 of 6266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.287184476852417 
BICCOS Cumulative time: 1.6273572444915771
Preprocessing time: 0.19258403778076172 Inference time: 0.08829617500305176 Add cuts time: 0.0057599544525146484 Cut analysis time: 0.0005443096160888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01934 (21), -0.01931 (21), -0.01903 (21), -0.01900 (21), -0.01896 (21), -0.01893 (21), -0.01878 (21), -0.01875 (21), -0.01841 (21), -0.01839 (21), -0.01838 (21), -0.01836 (21), -0.01816 (21), -0.01814 (21), -0.01810 (21), -0.01807 (21), -0.01803 (21), -0.01803 (21), -0.01802 (21), -0.01800 (21), 
Length of domains: 5759
Time: pickout 0.0443    decision 0.1826    set_bounds 0.4365    solve 0.7677    add 0.0187    
Accumulated time: pickout 0.1666    decision 1.4451    set_bounds 1.4225    solve 3.9704    add 0.6494    
Current (lb-rhs): -0.01934105157852173
15909 domains visited
Cumulative time: 9.559620141983032

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8026430010795593, worst -0.018523871898651123
10 lb beta sum: 0.8669751286506653, worst -0.01851367950439453
Time: prepare 0.3519    bound 0.4994    transfer 0.0399    finalize 0.0442    func 0.9885    
Accumulated time: func 5.1336    prepare 1.1407    bound 3.5212    transfer 0.1273    finalize 0.1576    
all_split False
======================Cut inference begins======================
max lb tensor(0.00203037) min lb tensor(-0.01850855)
Number of Verified Splits: 969 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.44036269187927246 
BICCOS Cumulative time: 2.0677199363708496
Preprocessing time: 0.2549912929534912 Inference time: 0.17356443405151367 Add cuts time: 0.011294364929199219 Cut analysis time: 0.0005125999450683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01851 (22), -0.01848 (22), -0.01839 (21), -0.01836 (21), -0.01828 (22), -0.01825 (22), -0.01816 (22), -0.01813 (22), -0.01809 (22), -0.01806 (22), -0.01802 (21), -0.01799 (21), -0.01760 (22), -0.01758 (22), -0.01757 (22), -0.01755 (22), -0.01746 (21), -0.01743 (21), -0.01735 (22), -0.01732 (22), 
Length of domains: 8886
Time: pickout 0.0606    decision 0.4038    set_bounds 0.3663    solve 1.1669    add 0.0268    
Accumulated time: pickout 0.2272    decision 1.8489    set_bounds 1.7888    solve 5.1373    add 0.6762    
Current (lb-rhs): -0.018508553504943848
23132 domains visited
current_vram/total_varm: 10.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.047179222106934

BaB round 15
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.843475341796875, worst -0.017627835273742676
10 lb beta sum: 0.8579627871513367, worst -0.017612338066101074
Time: prepare 0.7050    bound 0.9296    transfer 0.0755    finalize 0.3193    func 2.1355    
Accumulated time: func 7.2691    prepare 1.8460    bound 4.4508    transfer 0.2029    finalize 0.4769    
all_split False
======================Cut inference begins======================
max lb tensor(0.00360382) min lb tensor(-0.01760590)
Number of Verified Splits: 2551 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 1.2516212463378906 
BICCOS Cumulative time: 3.3193411827087402
Preprocessing time: 0.5140938758850098 Inference time: 0.71109938621521 Add cuts time: 0.02588057518005371 Cut analysis time: 0.0005474090576171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01761 (22), -0.01757 (22), -0.01751 (23), -0.01748 (23), -0.01732 (23), -0.01729 (23), -0.01728 (23), -0.01727 (22), -0.01725 (23), -0.01723 (22), -0.01723 (23), -0.01719 (23), -0.01707 (22), -0.01693 (23), -0.01690 (23), -0.01687 (23), -0.01686 (23), -0.01684 (23), -0.01684 (23), -0.01668 (23), 
Length of domains: 14527
Time: pickout 0.1212    decision 0.4468    set_bounds 0.9184    solve 2.1385    add 0.0396    
Accumulated time: pickout 0.3484    decision 2.2957    set_bounds 2.7072    solve 7.2758    add 0.7157    
Current (lb-rhs): -0.017605900764465332
36965 domains visited
current_vram/total_varm: 19.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 17.01060914993286

BaB round 16
batch: 14527
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 579] [/input-8, 580] [/input-8, 1730] [/input-8, 579] [/input-8, 1730] [/input-8, 580] [/input-8, 1730] [/input-8, 579] [/input-8, 582] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8169096112251282, worst -0.016515836119651794
10 lb beta sum: 0.8247533440589905, worst -0.016580745577812195
Time: prepare 1.2530    bound 1.5987    transfer 0.1404    finalize 0.1719    func 3.6552    
Accumulated time: func 10.9243    prepare 3.0994    bound 6.0495    transfer 0.3433    finalize 0.6488    
all_split False
======================Cut inference begins======================
max lb tensor(0.00327998) min lb tensor(-0.01649611)
Number of Verified Splits: 4382 of 29054
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 1.8024723529815674 
BICCOS Cumulative time: 5.121813535690308
Preprocessing time: 0.9189507961273193 Inference time: 0.8416821956634521 Add cuts time: 0.04109644889831543 Cut analysis time: 0.0007429122924804688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01650 (23), -0.01646 (23), -0.01640 (24), -0.01637 (23), -0.01636 (24), -0.01635 (24), -0.01633 (23), -0.01632 (24), -0.01631 (23), -0.01629 (23), -0.01628 (23), -0.01625 (24), -0.01622 (24), -0.01619 (24), -0.01616 (24), -0.01606 (24), -0.01604 (24), -0.01603 (24), -0.01601 (24), -0.01601 (24), 
Length of domains: 24672
Time: pickout 0.2599    decision 0.8067    set_bounds 1.8372    solve 3.6601    add 0.0657    
Accumulated time: pickout 0.6082    decision 3.1024    set_bounds 4.5444    solve 10.9359    add 0.7815    
Current (lb-rhs): -0.01649610698223114
61637 domains visited
Cumulative time: 25.52316451072693

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1730] [/input-8, 579] [/input-8, 580] [/input-8, 579] [/input-8, 579] [/input-8, 580] [/input-8, 1593] [/input-8, 1730] [/input-8, 579] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7808767557144165, worst -0.015684708952903748
10 lb beta sum: 0.7845317125320435, worst -0.015662238001823425
Time: prepare 1.4988    bound 1.7929    transfer 0.1472    finalize 0.2163    func 3.8728    
Accumulated time: func 14.7971    prepare 4.5986    bound 7.8424    transfer 0.4905    finalize 0.8651    
all_split False
======================Cut inference begins======================
max lb tensor(0.00425774) min lb tensor(-0.01564829)
Number of Verified Splits: 8343 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.2269134521484375 
BICCOS Cumulative time: 8.348726987838745
Preprocessing time: 1.0596606731414795 Inference time: 2.0672404766082764 Add cuts time: 0.09928774833679199 Cut analysis time: 0.0007245540618896484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01650 (23), -0.01646 (23), -0.01640 (24), -0.01636 (24), -0.01635 (24), -0.01632 (24), -0.01631 (23), -0.01628 (23), -0.01619 (24), -0.01616 (24), -0.01601 (24), -0.01600 (24), -0.01597 (24), -0.01597 (24), -0.01565 (25), -0.01562 (25), -0.01557 (23), -0.01555 (24), -0.01554 (23), -0.01551 (24), 
Length of domains: 32713
Time: pickout 0.2607    decision 1.9836    set_bounds 2.1752    solve 3.8809    add 0.1266    
Accumulated time: pickout 0.8690    decision 5.0861    set_bounds 6.7196    solve 14.8169    add 0.9081    
Current (lb-rhs): -0.01649610698223114
86062 domains visited
current_vram/total_varm: 34.2GB/99.9GB, batch_size increase to 32768
Cumulative time: 37.31653690338135

BaB round 18
batch: 32713
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input, 2968] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input, 2968] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7550951838493347, worst -0.015830159187316895
10 lb beta sum: 0.7571699619293213, worst -0.015814900398254395
Time: prepare 3.1353    bound 3.5255    transfer 0.3183    finalize 0.4908    func 8.5381    
Accumulated time: func 23.3351    prepare 7.7343    bound 11.3679    transfer 0.8088    finalize 1.3559    
all_split False
======================Cut inference begins======================
max lb tensor(0.00336790) min lb tensor(-0.01580369)
Number of Verified Splits: 18934 of 65426
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 6.952570199966431 
BICCOS Cumulative time: 15.301297187805176
Preprocessing time: 2.1124610900878906 Inference time: 4.554243087768555 Add cuts time: 0.28505492210388184 Cut analysis time: 0.0008111000061035156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01580 (25), -0.01578 (25), -0.01577 (25), -0.01575 (25), -0.01561 (25), -0.01558 (25), -0.01544 (24), -0.01543 (25), -0.01543 (25), -0.01540 (24), -0.01539 (25), -0.01539 (25), -0.01524 (24), -0.01520 (24), -0.01518 (24), -0.01515 (24), -0.01501 (24), -0.01498 (25), -0.01497 (24), -0.01497 (26), 
Length of domains: 46492
Time: pickout 0.6266    decision 3.3765    set_bounds 3.7952    solve 8.5490    add 0.1331    
Accumulated time: pickout 1.4955    decision 8.4625    set_bounds 10.5148    solve 23.3659    add 1.0411    
Current (lb-rhs): -0.01580369472503662
132554 domains visited
Cumulative time: 61.03848600387573

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input-8, 142] [/input-8, 1325] [/input-8, 1730] [/input-8, 142] [/input-8, 1325] [/input, 2968] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7140035033226013, worst -0.015148520469665527
10 lb beta sum: 0.7149548530578613, worst -0.015138506889343262
Time: prepare 3.3147    bound 8.7156    transfer 0.2976    finalize 1.4105    func 14.1713    
Accumulated time: func 37.5065    prepare 11.0494    bound 20.0835    transfer 1.1065    finalize 2.7664    
all_split False
======================Cut inference begins======================
max lb tensor(0.00237256) min lb tensor(-0.01513249)
Number of Verified Splits: 17931 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 7.111739635467529 
BICCOS Cumulative time: 22.413036823272705
Preprocessing time: 2.2493255138397217 Inference time: 4.657809734344482 Add cuts time: 0.20380520820617676 Cut analysis time: 0.0007991790771484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01513 (26), -0.01513 (26), -0.01510 (26), -0.01509 (26), -0.01496 (26), -0.01492 (26), -0.01488 (25), -0.01486 (25), -0.01485 (25), -0.01482 (25), -0.01477 (26), -0.01476 (26), -0.01473 (26), -0.01473 (26), -0.01463 (25), -0.01461 (25), -0.01461 (25), -0.01457 (25), -0.01443 (25), -0.01442 (25), 
Length of domains: 61329
Time: pickout 0.6181    decision 3.6081    set_bounds 3.6118    solve 14.1864    add 0.1507    
Accumulated time: pickout 2.1136    decision 12.0706    set_bounds 14.1266    solve 37.5523    add 1.1919    
Current (lb-rhs): -0.015132486820220947
180159 domains visited
Cumulative time: 90.6117000579834

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1593] [/input-8, 142] [/input-8, 142] [/input-8, 579] [/input-8, 142] [/input-8, 142] [/input-8, 579] [/input-8, 579] [/input-8, 142] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01422572135925293
10 lb beta sum: 0.43617475032806396, worst -0.014295697212219238
Time: prepare 1.8706    bound 10.1340    transfer 0.2991    finalize 0.5852    func 13.3248    
Accumulated time: func 50.8313    prepare 12.9204    bound 30.2175    transfer 1.4055    finalize 3.3516    
all_split False
======================Cut inference begins======================
max lb tensor(0.00229585) min lb tensor(-0.01421082)
Number of Verified Splits: 17541 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 7.427428483963013 
BICCOS Cumulative time: 29.840465307235718
Preprocessing time: 3.5638275146484375 Inference time: 3.634389877319336 Add cuts time: 0.22846174240112305 Cut analysis time: 0.0007493495941162109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01513 (26), -0.01509 (26), -0.01496 (26), -0.01492 (26), -0.01486 (25), -0.01482 (25), -0.01473 (26), -0.01463 (25), -0.01461 (25), -0.01461 (25), -0.01457 (25), -0.01443 (25), -0.01440 (25), -0.01421 (26), -0.01417 (26), -0.01417 (26), -0.01413 (26), -0.01400 (27), -0.01399 (26), -0.01399 (27), 
Length of domains: 76556
Time: pickout 0.6335    decision 3.3386    set_bounds 4.8625    solve 13.3420    add 4.7405    
Accumulated time: pickout 2.7471    decision 15.4092    set_bounds 18.9891    solve 50.8944    add 5.9324    
Current (lb-rhs): -0.015125274658203125
228154 domains visited
Cumulative time: 125.24311852455139

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1576] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 1593] 
cut re-enabled after branching node selection
0 lb beta sum: 0.055809132754802704, worst -0.014204680919647217
10 lb beta sum: 0.46139851212501526, worst -0.01428377628326416
Time: prepare 2.0435    bound 10.1315    transfer 0.4591    finalize 0.5752    func 13.6460    
Accumulated time: func 64.4773    prepare 14.9644    bound 40.3491    transfer 1.8646    finalize 3.9268    
all_split False
======================Cut inference begins======================
max lb tensor(0.00224638) min lb tensor(-0.01420230)
Number of Verified Splits: 17004 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 17
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 6.650646924972534 
BICCOS Cumulative time: 36.49111223220825
Preprocessing time: 3.385464668273926 Inference time: 3.0757968425750732 Add cuts time: 0.18817496299743652 Cut analysis time: 0.0012104511260986328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01421 (26), -0.01420 (26), -0.01417 (26), -0.01416 (26), -0.01400 (27), -0.01399 (27), -0.01399 (27), -0.01399 (27), -0.01397 (27), -0.01396 (27), -0.01396 (27), -0.01396 (27), -0.01395 (26), -0.01395 (26), -0.01393 (26), -0.01391 (26), -0.01386 (27), -0.01386 (27), -0.01383 (27), -0.01383 (27), 
Length of domains: 92320
Time: pickout 0.6420    decision 3.9797    set_bounds 4.4755    solve 13.6653    add 0.2031    
Accumulated time: pickout 3.3891    decision 19.3889    set_bounds 23.4646    solve 64.5596    add 6.1354    
Current (lb-rhs): -0.014210820198059082
276686 domains visited
Cumulative time: 155.20983457565308

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1593] [/input-8, 1593] [/input-8, 579] [/input-8, 1593] [/input-8, 579] [/input-8, 1593] [/input-8, 1593] [/input-8, 1593] [/input-8, 1593] [/input-8, 579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.013516902923583984
10 lb beta sum: 0.4053611159324646, worst -0.01351553201675415
Time: prepare 1.9333    bound 10.1459    transfer 0.4850    finalize 1.9139    func 14.9006    
Accumulated time: func 79.3779    prepare 16.8982    bound 50.4950    transfer 2.3496    finalize 5.8407    
all_split False
======================Cut inference begins======================
max lb tensor(0.00411797) min lb tensor(-0.01351368)
Number of Verified Splits: 19217 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 7.359283924102783 
BICCOS Cumulative time: 43.850396156311035
Preprocessing time: 2.0865402221679688 Inference time: 5.04814600944519 Add cuts time: 0.22336769104003906 Cut analysis time: 0.001230001449584961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01420 (26), -0.01416 (26), -0.01399 (27), -0.01399 (27), -0.01399 (27), -0.01396 (27), -0.01396 (27), -0.01396 (27), -0.01395 (26), -0.01395 (26), -0.01393 (26), -0.01391 (26), -0.01386 (27), -0.01386 (27), -0.01383 (27), -0.01383 (27), -0.01382 (27), -0.01382 (27), -0.01379 (27), -0.01378 (27), 
Length of domains: 105871
Time: pickout 0.6875    decision 4.2184    set_bounds 3.4969    solve 14.9169    add 0.1947    
Accumulated time: pickout 4.0766    decision 23.6073    set_bounds 26.9615    solve 79.4765    add 6.3302    
Current (lb-rhs): -0.014202296733856201
323005 domains visited
Cumulative time: 186.4517641067505

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 1593] [/input-8, 382] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.013511300086975098
10 lb beta sum: 0.5519866347312927, worst -0.013016566634178162
Time: prepare 1.8767    bound 10.1515    transfer 0.5162    finalize 0.6187    func 13.5915    
Accumulated time: func 92.9694    prepare 18.7754    bound 60.6465    transfer 2.8658    finalize 6.4594    
all_split False
======================Cut inference begins======================
max lb tensor(0.00418478) min lb tensor(-0.01301120)
Number of Verified Splits: 25328 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 18
#cuts 4-6: 2
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 8.79504680633545 
BICCOS Cumulative time: 52.645442962646484
Preprocessing time: 3.7768242359161377 Inference time: 4.7075581550598145 Add cuts time: 0.3090178966522217 Cut analysis time: 0.0016465187072753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01399 (27), -0.01396 (27), -0.01383 (27), -0.01382 (27), -0.01378 (27), -0.01351 (28), -0.01348 (28), -0.01307 (27), -0.01307 (27), -0.01305 (28), -0.01304 (27), -0.01304 (28), -0.01303 (27), -0.01303 (27), -0.01301 (28), -0.01300 (28), -0.01300 (27), -0.01300 (28), -0.01298 (28), -0.01297 (28), 
Length of domains: 113311
Time: pickout 0.6864    decision 3.3694    set_bounds 4.9911    solve 13.6096    add 0.1712    
Accumulated time: pickout 4.7630    decision 26.9767    set_bounds 31.9526    solve 93.0861    add 6.5014    
Current (lb-rhs): -0.013988137245178223
363213 domains visited
Time out!!!!!!!!
Result: unknown in 221.2701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 293, 1, 523] with unstable size 292 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [292]; unstable size 292; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 292] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 292] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.07341278,  0.02069974, -0.45618200, -0.75070494, -0.48273373,
         -0.58674031,  0.21641415, -1.83327794, -0.92162514]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.52026176, -14.13672733, -13.69211388, -12.48086071, -13.31669331,
          -12.76901054, -12.69317245, -14.15498734, -12.40141487, -13.11113548],
         [-14.52026176, -14.13672733, -13.69211388, -12.48086071, -13.31669331,
          -12.76901054, -12.69317245, -14.15498734, -12.40141487, -13.11113548]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.99894142, -0.21231174,  0.62352085,  0.07583809, -0.29175758,
           0.41796303]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0143 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0505 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [789]; unstable size 789; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 789] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 789] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 789] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 259] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.47897124,  2.52675486,  0.01573110, -0.71339214, -0.73171139,
         -1.54283798,  0.69137245,  2.97468758,  2.91973948]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733],
         [-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34719467,  0.50400925, -0.14538002]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0550 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.22789001, -20.43865013, -26.99475098, -25.86932182, -27.76927757,
         -27.09349632, -26.96388435, -26.58814430, -23.07920265, -18.19562912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 462] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 462] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 182] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89370751, 1.38738179, 7.23277473, 6.41899109, 8.12875843, 7.56016350,
         7.36910725, 6.89903069, 3.88113236]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0413 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 235, 1, 584] with unstable size 234 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 584] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [234]; unstable size 234; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 234] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 234] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.98524380,  0.54466248,  1.17118835, -0.38150430,  1.88504982,
         -0.46537066,  0.44484615,  0.24631667,  3.03603745]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.50it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.40040588, -27.81520653, -28.63296509, -26.82895470, -29.46481514,
          -26.85583305, -27.88446808, -27.95312691, -26.49433899, -30.27206993],
         [-28.40040588, -27.81520653, -28.63296509, -26.82895470, -29.46481514,
          -26.85583305, -27.88446808, -27.95312691, -26.49433899, -30.27206993]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33461571, 0.36149406]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1205 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.091230392456055
alpha/beta optimization time: 1.2217953205108643
initial alpha-crown bounds: tensor([[ 1.03688896,  0.59373116,  1.24077272, -0.31201315,  1.97173262,
         -0.38633633,  0.51818943,  0.33714390,  3.09112048]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.3863363265991211
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61716055870056
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61712217330933
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61709642410278
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61707615852356
Verifying property 3 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.31201315]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.31201315]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3120114803314209
10 lb beta sum: 0.0, worst -0.31202220916748047
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 172] 
split level 12: [/input-8, 171] 
split level 13: [/input, 456] 
split level 14: [/input, 439] 
split level 15: [/input, 3000] 
split level 16: [/input-8, 179] 
split level 17: [/input-8, 788] 
split level 18: [/input, 3017] 
split level 19: [/input, 442] 
split level 20: [/input, 3018] 
split level 21: [/input-8, 371] 
split level 22: [/input, 3032] 
split level 23: [/input, 2986] 
split level 24: [/input-8, 909] 
split level 25: [/input-8, 1287] 
split level 26: [/input-8, 1282] 
split level 27: [/input-8, 473] 
split level 28: [/input-8, 178] 
split level 29: [/input, 3066] 
split level 30: [/input, 2972] 
split level 31: [/input, 3002] 
split level 32: [/input-8, 380] 
split level 33: [/input, 954] 
split level 34: [/input-8, 892] 
split level 35: [/input-8, 372] 
split level 36: [/input-8, 1067] 
split level 37: [/input, 487] 
split level 38: [/input, 2955] 
split level 39: [/input, 3019] 
split level 40: [/input-8, 186] 
split level 41: [/input-8, 1780] 
split level 42: [/input-8, 1125] 
split level 43: [/input, 3031] 
split level 44: [/input-8, 381] 
split level 45: [/input-8, 1075] 
split level 46: [/input, 999] 
split level 47: [/input-8, 1732] 
split level 48: [/input, 506] 
split level 49: [/input-8, 1123] 
split level 50: [/input, 3013] 
split level 51: [/input-8, 1118] 
split level 52: [/input-8, 292] 
split level 53: [/input, 474] 
split level 54: [/input-8, 1772] 
split level 55: [/input-8, 1038] 
split level 56: [/input-8, 1773] 
split level 57: [/input-8, 508] 
split level 58: [/input, 1975] 
split level 59: [/input, 892] 
split level 60: [/input, 956] 
split level 61: [/input, 986] 
split level 62: [/input-8, 146] 
split level 63: [/input-8, 465] 
split level 64: [/input, 202] 
split level 65: [/input-8, 774] 
split level 66: [/input-8, 925] 
split level 67: [/input-8, 1035] 
split level 68: [/input-8, 592] 
split level 69: [/input, 200] 
split level 70: [/input-8, 871] 
split level 71: [/input-8, 1655] 
split level 72: [/input-8, 792] 
split level 73: [/input, 949] 
split level 74: [/input, 2871] 
split level 75: [/input, 3036] 
split level 76: [/input, 918] 
split level 77: [/input-8, 1643] 
split level 78: [/input, 298] 
split level 79: [/input-8, 1731] 
split level 80: [/input, 467] 
split level 81: [/input, 217] 
split level 82: [/input, 971] 
split level 83: [/input, 1993] 
split level 84: [/input, 932] 
split level 85: [/input-8, 2046] 
split level 86: [/input, 2997] 
split level 87: [/input, 618] 
split level 88: [/input, 2927] 
split level 89: [/input-8, 893] 
split level 90: [/input, 1977] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1180] 
split level 93: [/input, 1974] 
split level 94: [/input-8, 891] 
split level 95: [/input, 1017] 
split level 96: [/input-8, 1730] 
split level 97: [/input, 923] 
split level 98: [/input-8, 1625] 
split level 99: [/input-8, 843] 
split level 100: [/input, 1976] 
split level 101: [/input, 232] 
split level 102: [/input, 435] 
split level 103: [/input, 2947] 
split level 104: [/input, 903] 
split level 105: [/input-8, 888] 
split level 106: [/input, 1003] 
split level 107: [/input, 507] 
split level 108: [/input, 390] 
split level 109: [/input, 1012] 
split level 110: [/input-8, 1614] 
split level 111: [/input, 1960] 
split level 112: [/input-8, 165] 
split level 113: [/input, 1978] 
split level 114: [/input-8, 773] 
split level 115: [/input, 3554] 
split level 116: [/input-8, 820] 
split level 117: [/input, 1990] 
split level 118: [/input-8, 1407] 
split level 119: [/input, 597] 
split level 120: [/input, 924] 
split level 121: [/input, 633] 
split level 122: [/input, 3022] 
split level 123: [/input-8, 158] 
split level 124: [/input, 308] 
split level 125: [/input-8, 122] 
split level 126: [/input, 661] 
split level 127: [/input-8, 1790] 
split level 128: [/input-8, 1563] 
split level 129: [/input-8, 1233] 
split level 130: [/input, 884] 
split level 131: [/input, 185] 
split level 132: [/input-8, 1737] 
split level 133: [/input, 619] 
split level 134: [/input, 3037] 
split level 135: [/input, 203] 
split level 136: [/input, 219] 
split level 137: [/input-8, 879] 
split level 138: [/input, 1973] 
split level 139: [/input-8, 406] 
split level 140: [/input, 2887] 
split level 141: [/input, 283] 
split level 142: [/input-8, 334] 
split level 143: [/input, 1989] 
split level 144: [/input, 323] 
split level 145: [/input, 909] 
split level 146: [/input, 631] 
split level 147: [/input, 795] 
split level 148: [/input, 2024] 
split level 149: [/input, 3522] 
split level 150: [/input, 314] 
split level 151: [/input-8, 1548] 
split level 152: [/input, 1502] 
split level 153: [/input, 605] 
split level 154: [/input-8, 169] 
split level 155: [/input-8, 887] 
split level 156: [/input-8, 1613] 
split level 157: [/input, 222] 
split level 158: [/input-8, 890] 
split level 159: [/input, 632] 
split level 160: [/input, 2010] 
split level 161: [/input, 221] 
split level 162: [/input, 2526] 
split level 163: [/input, 187] 
split level 164: [/input-8, 1678] 
split level 165: [/input, 2092] 
split level 166: [/input, 973] 
split level 167: [/input, 1961] 
split level 168: [/input-8, 1384] 
split level 169: [/input, 2363] 
split level 170: [/input, 2021] 
split level 171: [/input, 820] 
split level 172: [/input, 2921] 
split level 173: [/input, 339] 
split level 174: [/input, 268] 
split level 175: [/input, 1996] 
split level 176: [/input, 2930] 
split level 177: [/input, 1944] 
split level 178: [/input, 588] 
split level 179: [/input, 1946] 
split level 180: [/input-8, 142] 
split level 181: [/input, 3478] 
split level 182: [/input, 2322] 
split level 183: [/input-8, 1669] 
split level 184: [/input, 617] 
split level 185: [/input, 779] 
split level 186: [/input-8, 1920] 
split level 187: [/input, 2862] 
split level 188: [/input, 70] 
split level 189: [/input, 125] 
split level 190: [/input, 2332] 
split level 191: [/input, 786] 
split level 192: [/input, 2349] 
split level 193: [/input, 803] 
split level 194: [/input-8, 1278] 
split level 195: [/input-8, 1785] 
split level 196: [/input, 72] 
split level 197: [/input, 260] 
split level 198: [/input, 3038] 
split level 199: [/input, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3119654655456543
10 lb beta sum: 0.0, worst -0.31195974349975586
Time: prepare 0.0115    bound 0.0966    transfer 0.0029    finalize 0.0030    func 0.1167    
Accumulated time: func 0.1691    prepare 0.0217    bound 0.1486    transfer 0.0030    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.19403887) min lb tensor(-0.31195283)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010745048522949219 
BICCOS Cumulative time: 0.010745048522949219
Preprocessing time: 0.009960412979125977 Inference time: 0.00014209747314453125 Add cuts time: 6.747245788574219e-05 Cut analysis time: 0.0005750656127929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29670 (1), -0.29598 (1), -0.29591 (1), -0.29570 (1), -0.29544 (1), -0.29523 (1), -0.29453 (1), -0.29451 (1), -0.29407 (1), -0.29403 (1), -0.29383 (1), -0.29351 (1), -0.29273 (1), -0.29211 (1), -0.29185 (1), -0.29089 (1), -0.29040 (1), -0.29015 (1), -0.29006 (1), -0.29004 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5166    set_bounds 0.0109    solve 0.1167    add 0.0691    
Accumulated time: pickout 0.0003    decision 0.5166    set_bounds 0.0109    solve 0.1167    add 0.0691    
Current (lb-rhs): -0.29670143127441406
50 domains visited
Cumulative time: 0.7875568866729736

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2753455638885498
10 lb beta sum: 0.659247875213623, worst -0.20838403701782227
Time: prepare 0.0072    bound 0.1155    transfer 0.0023    finalize 0.0024    func 0.1300    
Accumulated time: func 0.2990    prepare 0.0291    bound 0.2641    transfer 0.0053    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.29780966) min lb tensor(-0.20817900)
Number of Verified Splits: 64 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.015635013580322266 
BICCOS Cumulative time: 0.026380062103271484
Preprocessing time: 0.011668205261230469 Inference time: 0.0023407936096191406 Add cuts time: 0.0013644695281982422 Cut analysis time: 0.00026154518127441406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11036 (2), -0.10995 (2), -0.10935 (2), -0.10905 (2), -0.10900 (2), -0.10859 (2), -0.10841 (2), -0.10803 (2), -0.10690 (2), -0.10664 (2), -0.10652 (2), -0.10589 (2), -0.10525 (2), -0.10453 (2), -0.10276 (2), -0.10263 (2), -0.10227 (2), -0.10107 (2), -0.09940 (2), -0.09830 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0222    set_bounds 0.0124    solve 0.1300    add 0.0811    
Accumulated time: pickout 0.0015    decision 0.5388    set_bounds 0.0233    solve 0.2468    add 0.1502    
Current (lb-rhs): -0.11035692691802979
100 domains visited
Cumulative time: 1.0503242015838623

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 64] [/input-12, 64] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611502647399902
10 lb beta sum: 0.756119966506958, worst -0.09558439254760742
Time: prepare 0.0070    bound 0.1151    transfer 0.0008    finalize 0.0028    func 0.1282    
Accumulated time: func 0.4273    prepare 0.0363    bound 0.3793    transfer 0.0061    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.40660283) min lb tensor(-0.09285307)
Number of Verified Splits: 205 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 15
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.024157285690307617 
BICCOS Cumulative time: 0.0505373477935791
Preprocessing time: 0.011445760726928711 Inference time: 0.008849859237670898 Add cuts time: 0.003384828567504883 Cut analysis time: 0.000476837158203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02887 (3), -0.02777 (3), -0.02672 (3), -0.02671 (3), -0.02555 (3), -0.02539 (3), -0.02504 (3), -0.02334 (3), -0.02286 (3), -0.02179 (3), -0.02085 (3), -0.02083 (3), -0.02080 (3), -0.02029 (3), -0.02024 (3), -0.01916 (3), -0.01909 (3), -0.01869 (3), -0.01835 (3), -0.01825 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0194    set_bounds 0.0154    solve 0.1283    add 0.0963    
Accumulated time: pickout 0.0025    decision 0.5581    set_bounds 0.0387    solve 0.3751    add 0.2465    
Current (lb-rhs): -0.028867632150650024
150 domains visited
Cumulative time: 1.335162878036499

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1351635456085205
10 lb beta sum: 1.0161974430084229, worst -0.08978068828582764
Time: prepare 0.0073    bound 0.1303    transfer 0.0007    finalize 0.0023    func 0.1438    
Accumulated time: func 0.5710    prepare 0.0438    bound 0.5096    transfer 0.0068    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.68372893) min lb tensor(-0.01021139)
Number of Verified Splits: 376 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 8
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.041647911071777344 
BICCOS Cumulative time: 0.09218525886535645
Preprocessing time: 0.011442422866821289 Inference time: 0.016911029815673828 Add cuts time: 0.012696981430053711 Cut analysis time: 0.0005974769592285156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0156    solve 0.1439    add 0.0236    
Accumulated time: pickout 0.0036    decision 0.5779    set_bounds 0.0543    solve 0.5190    add 0.2702    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.43345222e-01,  1.06315479e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  1.43345222e-01,  5.76852709e-02,  1.48440734e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  1.43345222e-01,  5.76852709e-02,  1.81714315e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.52054861e-01,  1.04178503e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  1.52054861e-01,  5.66046089e-02,  1.50893047e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  1.52054861e-01,  5.66046089e-02,  1.81558449e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  5.72376132e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26118054e-33,  8.73802155e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22560596466064453
10 lb beta sum: 1.0109610557556152, worst -0.1329573392868042
Time: prepare 0.0004    bound 0.1291    transfer 0.0002    finalize 0.0002    func 0.1300    
Accumulated time: func 0.7010    prepare 0.0442    bound 0.6387    transfer 0.0070    finalize 0.0107    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-12, 8] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 2] 
split level 4: [/input-12, 79] [/input-12, 79] [/input-12, 64] 
split level 5: [/input-12, 46] [/input-12, 46] [/input-12, 79] 
split level 6: [/input-8, 179] [/input-8, 179] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4878228902816772, worst -0.03551506996154785
10 lb beta sum: 1.4960440397262573, worst -0.03532910346984863
Time: prepare 0.0157    bound 0.1271    transfer 0.0013    finalize 0.0021    func 0.1486    
Accumulated time: func 0.8496    prepare 0.0603    bound 0.7658    transfer 0.0083    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.99604970) min lb tensor(-0.03529620)
Number of Verified Splits: 380 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.488688349723816, worst -0.4786238670349121
10 lb beta sum: 1.682083249092102, worst -0.05694448947906494
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.3728909492492676 
BICCOS Cumulative time: 0.465076208114624
Preprocessing time: 0.010081768035888672 Inference time: 0.3497488498687744 Add cuts time: 0.012173891067504883 Cut analysis time: 0.0008864402770996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03530 (7), -0.03191 (7), -0.02938 (7), -0.02565 (7), 
Length of domains: 4
Time: pickout 0.0005    decision 0.0198    set_bounds 0.0321    solve 0.1487    add 0.0011    
Accumulated time: pickout 0.0041    decision 0.5978    set_bounds 0.0864    solve 0.6677    add 0.2713    
Current (lb-rhs): -0.03529620170593262
154 domains visited
Cumulative time: 2.3099968433380127

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] 
split level 2: [/input, 3000] [/input, 3000] [/input, 3000] [/input, 3000] 
split level 3: [/input, 3017] [/input, 3017] [/input, 3017] [/input, 3017] 
split level 4: [/input, 3018] [/input, 3018] [/input, 3018] [/input, 3018] 
split level 5: [/input-8, 179] [/input-8, 179] [/input-8, 179] [/input-8, 179] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00426793098449707

all verified at 0th iter
Time: prepare 0.0064    bound 0.0050    transfer 0.0013    finalize 0.0013    func 0.0155    
Accumulated time: func 0.8651    prepare 0.0670    bound 0.7708    transfer 0.0095    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.09694767) min lb tensor(0.00426793)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.007644176483154297 
BICCOS Cumulative time: 0.4727203845977783
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0178    set_bounds 0.0264    solve 0.0155    add 0.0001    
Accumulated time: pickout 0.0057    decision 0.6156    set_bounds 0.1127    solve 0.6832    add 0.2713    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
Cumulative time: 2.380436420440674


Properties batch 4, size 1
Remaining timeout: 195.97743725776672
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 195.97666931152344
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.38633633]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.38633633]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38633275032043457
10 lb beta sum: 0.0, worst -0.3863379955291748
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 909] 
split level 12: [/input-8, 172] 
split level 13: [/input-8, 171] 
split level 14: [/input, 456] 
split level 15: [/input, 439] 
split level 16: [/input, 3000] 
split level 17: [/input-8, 1282] 
split level 18: [/input-8, 179] 
split level 19: [/input, 442] 
split level 20: [/input, 3032] 
split level 21: [/input, 2986] 
split level 22: [/input, 3017] 
split level 23: [/input, 3018] 
split level 24: [/input-8, 788] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1287] 
split level 28: [/input-8, 892] 
split level 29: [/input, 3066] 
split level 30: [/input-8, 178] 
split level 31: [/input, 487] 
split level 32: [/input, 2972] 
split level 33: [/input-8, 473] 
split level 34: [/input, 3002] 
split level 35: [/input, 954] 
split level 36: [/input, 2955] 
split level 37: [/input, 3031] 
split level 38: [/input-8, 925] 
split level 39: [/input-8, 1780] 
split level 40: [/input, 3019] 
split level 41: [/input-8, 372] 
split level 42: [/input-8, 186] 
split level 43: [/input-8, 1075] 
split level 44: [/input-8, 1038] 
split level 45: [/input-8, 1772] 
split level 46: [/input, 506] 
split level 47: [/input-8, 380] 
split level 48: [/input, 999] 
split level 49: [/input-8, 1773] 
split level 50: [/input-8, 774] 
split level 51: [/input-8, 1123] 
split level 52: [/input-8, 381] 
split level 53: [/input, 474] 
split level 54: [/input, 3013] 
split level 55: [/input-8, 1125] 
split level 56: [/input-8, 1035] 
split level 57: [/input-8, 508] 
split level 58: [/input-8, 1643] 
split level 59: [/input-8, 465] 
split level 60: [/input-8, 1732] 
split level 61: [/input, 892] 
split level 62: [/input, 986] 
split level 63: [/input-8, 146] 
split level 64: [/input, 202] 
split level 65: [/input-8, 871] 
split level 66: [/input, 949] 
split level 67: [/input-8, 1548] 
split level 68: [/input, 298] 
split level 69: [/input, 956] 
split level 70: [/input-8, 792] 
split level 71: [/input-8, 891] 
split level 72: [/input-8, 292] 
split level 73: [/input-8, 1118] 
split level 74: [/input-8, 1635] 
split level 75: [/input, 3036] 
split level 76: [/input-8, 893] 
split level 77: [/input, 923] 
split level 78: [/input, 467] 
split level 79: [/input, 200] 
split level 80: [/input, 1975] 
split level 81: [/input-8, 1180] 
split level 82: [/input, 918] 
split level 83: [/input-8, 2046] 
split level 84: [/input, 217] 
split level 85: [/input-8, 592] 
split level 86: [/input, 971] 
split level 87: [/input, 2927] 
split level 88: [/input, 1017] 
split level 89: [/input-8, 1076] 
split level 90: [/input-8, 1228] 
split level 91: [/input, 932] 
split level 92: [/input, 2997] 
split level 93: [/input-8, 843] 
split level 94: [/input, 924] 
split level 95: [/input, 232] 
split level 96: [/input-8, 1563] 
split level 97: [/input, 507] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 820] 
split level 100: [/input-8, 1614] 
split level 101: [/input, 618] 
split level 102: [/input, 1003] 
split level 103: [/input, 2947] 
split level 104: [/input, 1974] 
split level 105: [/input-8, 165] 
split level 106: [/input, 435] 
split level 107: [/input, 1012] 
split level 108: [/input, 2871] 
split level 109: [/input-8, 1731] 
split level 110: [/input, 1977] 
split level 111: [/input, 390] 
split level 112: [/input-8, 1243] 
split level 113: [/input, 1993] 
split level 114: [/input-8, 888] 
split level 115: [/input, 903] 
split level 116: [/input-8, 12] 
split level 117: [/input-8, 1625] 
split level 118: [/input, 3022] 
split level 119: [/input-8, 332] 
split level 120: [/input, 1976] 
split level 121: [/input-8, 158] 
split level 122: [/input, 283] 
split level 123: [/input, 1960] 
split level 124: [/input-8, 122] 
split level 125: [/input, 3554] 
split level 126: [/input, 811] 
split level 127: [/input, 633] 
split level 128: [/input, 2092] 
split level 129: [/input-8, 1233] 
split level 130: [/input-8, 890] 
split level 131: [/input-8, 1920] 
split level 132: [/input, 884] 
split level 133: [/input, 597] 
split level 134: [/input-8, 879] 
split level 135: [/input, 203] 
split level 136: [/input, 795] 
split level 137: [/input, 308] 
split level 138: [/input, 1978] 
split level 139: [/input, 1990] 
split level 140: [/input, 219] 
split level 141: [/input, 314] 
split level 142: [/input, 3037] 
split level 143: [/input, 185] 
split level 144: [/input-8, 334] 
split level 145: [/input-8, 1678] 
split level 146: [/input-8, 1407] 
split level 147: [/input, 909] 
split level 148: [/input, 792] 
split level 149: [/input-8, 1642] 
split level 150: [/input-8, 1737] 
split level 151: [/input, 2363] 
split level 152: [/input-8, 887] 
split level 153: [/input, 323] 
split level 154: [/input, 72] 
split level 155: [/input, 619] 
split level 156: [/input, 2887] 
split level 157: [/input, 1502] 
split level 158: [/input-8, 1384] 
split level 159: [/input, 222] 
split level 160: [/input, 3522] 
split level 161: [/input, 71] 
split level 162: [/input-8, 1669] 
split level 163: [/input-8, 169] 
split level 164: [/input-8, 1613] 
split level 165: [/input-8, 1730] 
split level 166: [/input, 339] 
split level 167: [/input, 973] 
split level 168: [/input, 221] 
split level 169: [/input, 605] 
split level 170: [/input, 70] 
split level 171: [/input, 632] 
split level 172: [/input, 631] 
split level 173: [/input, 2106] 
split level 174: [/input, 187] 
split level 175: [/input, 2930] 
split level 176: [/input, 2109] 
split level 177: [/input, 268] 
split level 178: [/input, 2862] 
split level 179: [/input, 2332] 
split level 180: [/input, 1335] 
split level 181: [/input, 2322] 
split level 182: [/input, 1996] 
split level 183: [/input, 1989] 
split level 184: [/input, 1944] 
split level 185: [/input-8, 1554] 
split level 186: [/input, 2091] 
split level 187: [/input, 1946] 
split level 188: [/input, 3038] 
split level 189: [/input, 779] 
split level 190: [/input-8, 1027] 
split level 191: [/input, 260] 
split level 192: [/input, 786] 
split level 193: [/input, 820] 
split level 194: [/input, 285] 
split level 195: [/input, 2349] 
split level 196: [/input, 1336] 
split level 197: [/input, 617] 
split level 198: [/input, 2021] 
split level 199: [/input, 588] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.386141300201416
10 lb beta sum: 0.0, worst -0.3861391544342041
Time: prepare 0.0112    bound 0.0972    transfer 0.0041    finalize 0.0033    func 0.1183    
Accumulated time: func 0.1731    prepare 0.0211    bound 0.1515    transfer 0.0042    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.17392540) min lb tensor(-0.38613319)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010657072067260742 
BICCOS Cumulative time: 0.010657072067260742
Preprocessing time: 0.0102691650390625 Inference time: 0.00011515617370605469 Add cuts time: 5.698204040527344e-05 Cut analysis time: 0.00021576881408691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36963 (1), -0.36948 (1), -0.36816 (1), -0.36791 (1), -0.36660 (1), -0.36599 (1), -0.36591 (1), -0.36571 (1), -0.36540 (1), -0.36503 (1), -0.36488 (1), -0.36479 (1), -0.36474 (1), -0.36415 (1), -0.36413 (1), -0.36400 (1), -0.36327 (1), -0.36227 (1), -0.36142 (1), -0.36121 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5122    set_bounds 0.0091    solve 0.1184    add 0.0711    
Accumulated time: pickout 0.0003    decision 0.5122    set_bounds 0.0091    solve 0.1184    add 0.0711    
Current (lb-rhs): -0.36963367462158203
50 domains visited
Cumulative time: 0.7871358394622803

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] 
split level 2: [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 2] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32616567611694336
10 lb beta sum: 0.4465484619140625, worst -0.30382728576660156
Time: prepare 0.0072    bound 0.1166    transfer 0.0007    finalize 0.0024    func 0.1294    
Accumulated time: func 0.3026    prepare 0.0285    bound 0.2681    transfer 0.0049    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.26297235) min lb tensor(-0.30361366)
Number of Verified Splits: 96 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.017565488815307617 
BICCOS Cumulative time: 0.02822256088256836
Preprocessing time: 0.011808156967163086 Inference time: 0.003643512725830078 Add cuts time: 0.0018694400787353516 Cut analysis time: 0.00024437904357910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18671 (2), -0.18588 (2), -0.18565 (2), -0.18520 (2), -0.18405 (2), -0.18395 (2), -0.18361 (2), -0.18318 (2), -0.18291 (2), -0.18212 (2), -0.18153 (2), -0.18019 (2), -0.17819 (2), -0.17701 (2), -0.17696 (2), -0.17644 (2), -0.17560 (2), -0.17524 (2), -0.17485 (2), -0.17440 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0220    set_bounds 0.0124    solve 0.1295    add 0.0827    
Accumulated time: pickout 0.0016    decision 0.5342    set_bounds 0.0215    solve 0.2479    add 0.1539    
Current (lb-rhs): -0.1867060661315918
100 domains visited
Cumulative time: 1.0528650283813477

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2369847297668457
10 lb beta sum: 0.7949877977371216, worst -0.15892601013183594
Time: prepare 0.0070    bound 0.1209    transfer 0.0008    finalize 0.0027    func 0.1340    
Accumulated time: func 0.4366    prepare 0.0358    bound 0.3890    transfer 0.0057    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.41913170) min lb tensor(-0.15695381)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.020330429077148438 
BICCOS Cumulative time: 0.0485529899597168
Preprocessing time: 0.011649370193481445 Inference time: 0.006316423416137695 Add cuts time: 0.0020461082458496094 Cut analysis time: 0.0003185272216796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04339 (3), -0.04210 (3), -0.04130 (3), -0.04108 (3), -0.03998 (3), -0.03920 (3), -0.03905 (3), -0.03806 (3), -0.03780 (3), -0.03728 (3), -0.03705 (3), -0.03679 (3), -0.03661 (3), -0.03650 (3), -0.03635 (3), -0.03524 (3), -0.03301 (3), -0.03145 (3), -0.03121 (3), -0.03006 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0191    set_bounds 0.0153    solve 0.1341    add 0.0937    
Accumulated time: pickout 0.0026    decision 0.5533    set_bounds 0.0368    solve 0.3820    add 0.2476    
Current (lb-rhs): -0.04339298605918884
150 domains visited
Cumulative time: 1.3367669582366943

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15011358261108398
10 lb beta sum: 0.8387399315834045, worst -0.019576936960220337
Time: prepare 0.0074    bound 0.1317    transfer 0.0007    finalize 0.0023    func 0.1449    
Accumulated time: func 0.5814    prepare 0.0436    bound 0.5207    transfer 0.0064    finalize 0.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.18235213) min lb tensor(-0.01798658)
Number of Verified Splits: 371 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03999638557434082 
BICCOS Cumulative time: 0.08854937553405762
Preprocessing time: 0.011577606201171875 Inference time: 0.017461061477661133 Add cuts time: 0.010218143463134766 Cut analysis time: 0.0007395744323730469
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0207    set_bounds 0.0156    solve 0.1450    add 0.0240    
Accumulated time: pickout 0.0041    decision 0.5740    set_bounds 0.0524    solve 0.5269    add 0.2716    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1067]), tensor([-1.]), tensor([0]), tensor([-1.26118054e-33]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([0.17002602, 0.16139333, 0.08347692]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.17002602, 0.16139333, 0.03720386]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.17002602, 0.12524308, 0.09722690]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([0.17002602, 0.12524308, 0.01881337]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([2, 8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.25994733e-43, 1.67150423e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.25994733e-43, 1.26840904e-01, 1.00912437e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [-1.2611805421575396e-33], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.25994733e-43, 1.26840904e-01, 1.88878048e-02]), tensor([1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38535618782043457
10 lb beta sum: 1.086531639099121, worst -0.24505329132080078
Time: prepare 0.0005    bound 0.1383    transfer 0.0002    finalize 0.0002    func 0.1392    
Accumulated time: func 0.7206    prepare 0.0441    bound 0.6590    transfer 0.0066    finalize 0.0111    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 61] 
split level 7: [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4406698942184448, worst -0.053371429443359375
10 lb beta sum: 1.464111328125, worst -0.05198681354522705
Time: prepare 0.0106    bound 0.1394    transfer 0.0011    finalize 0.0017    func 0.1545    
Accumulated time: func 0.8750    prepare 0.0551    bound 0.7983    transfer 0.0077    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.98341393) min lb tensor(-0.05188882)
Number of Verified Splits: 249 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4406698942184448, worst -0.1519467830657959
10 lb beta sum: 1.607244610786438, worst -0.1496647596359253
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 20
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.46070027351379395 
BICCOS Cumulative time: 0.5492496490478516
Preprocessing time: 0.0069997310638427734 Inference time: 0.44626641273498535 Add cuts time: 0.006464242935180664 Cut analysis time: 0.0009698867797851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05189 (8), -0.04825 (8), -0.04583 (8), -0.04137 (8), -0.00664 (8), -0.00390 (8), -0.00261 (8), 
Length of domains: 7
Time: pickout 0.0004    decision 0.0217    set_bounds 0.0175    solve 0.1546    add 0.0014    
Accumulated time: pickout 0.0045    decision 0.5957    set_bounds 0.0699    solve 0.6815    add 0.2730    
Current (lb-rhs): -0.05188882350921631
157 domains visited
Cumulative time: 2.4015605449676514

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input, 3000] [/input-8, 171] [/input-8, 268] [/input, 3000] [/input-8, 171] [/input-8, 171] [/input-8, 268] 
split level 2: [/input-8, 179] [/input, 3000] [/input-8, 171] [/input-8, 179] [/input, 3000] [/input-8, 179] [/input-8, 171] 
split level 3: [/input, 3017] [/input-8, 179] [/input-8, 179] [/input, 3017] [/input-8, 179] [/input, 3017] [/input-8, 179] 
split level 4: [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.020033836364746094
10 lb beta sum: 0.0431610532104969, worst -0.014554262161254883
Time: prepare 0.0057    bound 0.1418    transfer 0.0011    finalize 0.0013    func 0.1514    
Accumulated time: func 1.0264    prepare 0.0611    bound 0.9401    transfer 0.0088    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.08720922) min lb tensor(-0.01448393)
Number of Verified Splits: 195 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23424267768859863
10 lb beta sum: 1.1272187232971191, worst -0.1314908266067505
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 20
#cuts 4-6: 9
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2989692687988281 
BICCOS Cumulative time: 0.8482189178466797
Preprocessing time: 0.006631374359130859 Inference time: 0.28735852241516113 Add cuts time: 0.0038766860961914062 Cut analysis time: 0.0011026859283447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (13), -0.01268 (13), -0.01267 (13), -0.01072 (13), -0.00979 (13), -0.00903 (13), -0.00876 (13), -0.00857 (13), -0.00836 (13), -0.00811 (13), -0.00741 (13), -0.00618 (13), -0.00548 (13), -0.00483 (13), -0.00465 (13), -0.00461 (13), -0.00460 (13), -0.00431 (13), -0.00356 (13), -0.00332 (13), 
Length of domains: 29
Time: pickout 0.0013    decision 0.0158    set_bounds 0.0251    solve 0.1514    add 0.0028    
Accumulated time: pickout 0.0058    decision 0.6115    set_bounds 0.0950    solve 0.8329    add 0.2759    
Current (lb-rhs): -0.014483928680419922
186 domains visited
Cumulative time: 2.8993818759918213

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] 
split level 2: [/input, 3002] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3002] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0011060237884521484
10 lb beta sum: 0.0, worst -0.0010304450988769531
Time: prepare 0.0061    bound 0.1486    transfer 0.0051    finalize 0.0012    func 0.1626    
Accumulated time: func 1.1890    prepare 0.0674    bound 1.0887    transfer 0.0140    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.06574869) min lb tensor(-0.00097561)
Number of Verified Splits: 231 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 23
#cuts 4-6: 9
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.032892465591430664 
BICCOS Cumulative time: 0.8811113834381104
Preprocessing time: 0.007045745849609375 Inference time: 0.022760629653930664 Add cuts time: 0.0020902156829833984 Cut analysis time: 0.0009958744049072266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00098 (16), 
Length of domains: 1
Time: pickout 0.0042    decision 0.0159    set_bounds 0.0241    solve 0.1626    add 0.0006    
Accumulated time: pickout 0.0100    decision 0.6273    set_bounds 0.1191    solve 0.9956    add 0.2765    
Current (lb-rhs): -0.0009756088256835938
187 domains visited
Cumulative time: 3.1420063972473145

BaB round 4
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 268] 
split level 1: [/input, 456] 
split level 2: [/input-8, 172] 
split level 3: [/input-8, 372] 
split level 4: [/input-8, 178] 
split level 5: [/input, 3002] 
split level 6: [/input, 3031] 
split level 7: [/input-8, 1125] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.037513017654418945

all verified at 0th iter
Time: prepare 0.0124    bound 0.0057    transfer 0.0020    finalize 0.0013    func 0.0230    
Accumulated time: func 1.2119    prepare 0.0802    bound 1.0944    transfer 0.0159    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.11207175) min lb tensor(0.03751302)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 34.
#cuts 1-3: 23
#cuts 4-6: 9
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.007544040679931641 
BICCOS Cumulative time: 0.888655424118042
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0227    set_bounds 0.0296    solve 0.0231    add 0.0004    
Accumulated time: pickout 0.0112    decision 0.6500    set_bounds 0.1487    solve 1.0186    add 0.2769    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
187 domains visited
Cumulative time: 3.2280495166778564


Properties batch 6, size 1
Remaining timeout: 192.49383115768433
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 192.49374628067017
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 192.49249291419983
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 7.5076 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.30548668, -31.13262558, -30.14710617, -29.36580276, -31.43879890,
         -30.41797447, -28.40415192, -33.04300690, -32.20061874, -30.97929573]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 616] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 616] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89829922, 1.27482796, 1.03844357, 0.41801423, 2.17892456, 1.35105932,
         3.53787756, 2.40265918, 1.21200323]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0456 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1027]; unstable size 1027; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 1027] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1027] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1027] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 298] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02182770,  4.76163769, -0.19650859,  1.45338237,  1.88351452,
          0.29130352,  1.95355940,  2.40450501,  4.61817551]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.22353172, -18.85214615, -12.26174545, -14.25788116, -11.70257187,
          -14.80233765, -13.11868382, -14.95127678, -16.34649467, -18.77943611]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.55917358]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1127 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.15489387512207
alpha/beta optimization time: 1.1985020637512207
initial alpha-crown bounds: tensor([[ 2.14901829,  4.91513824, -0.11741787,  1.51492536,  1.96165812,
          0.36733091,  2.03420448,  2.56605959,  4.76397657]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11741787195205688
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64656138420105
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64652037620544
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64649438858032
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11741787]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
        -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11741787]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1027
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 30
-----------------
# of unstable neurons: 1350
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.870529174804688e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11741337180137634
10 lb beta sum: 0.0, worst -0.1174195408821106
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0528    
Accumulated time: func 0.0528    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 96] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 0] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 18] 
split level 12: [/input-12, 49] 
split level 13: [/input-12, 15] 
split level 14: [/input-12, 38] 
split level 15: [/input-8, 1628] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 275] 
split level 18: [/input-8, 1962] 
split level 19: [/input-8, 481] 
split level 20: [/input-8, 484] 
split level 21: [/input-8, 274] 
split level 22: [/input-8, 1954] 
split level 23: [/input-8, 1705] 
split level 24: [/input-8, 1678] 
split level 25: [/input-8, 477] 
split level 26: [/input-8, 1945] 
split level 27: [/input-8, 1710] 
split level 28: [/input-8, 1938] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 1946] 
split level 31: [/input-8, 1626] 
split level 32: [/input-12, 20] 
split level 33: [/input-8, 1716] 
split level 34: [/input-8, 1963] 
split level 35: [/input-8, 1618] 
split level 36: [/input-8, 1300] 
split level 37: [/input-8, 797] 
split level 38: [/input-8, 1931] 
split level 39: [/input-8, 469] 
split level 40: [/input-12, 57] 
split level 41: [/input-8, 1630] 
split level 42: [/input-8, 1318] 
split level 43: [/input-8, 1301] 
split level 44: [/input-8, 1953] 
split level 45: [/input-8, 592] 
split level 46: [/input-8, 1660] 
split level 47: [/input-8, 285] 
split level 48: [/input-8, 461] 
split level 49: [/input-8, 804] 
split level 50: [/input-8, 1363] 
split level 51: [/input-8, 779] 
split level 52: [/input-8, 100] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1638] 
split level 55: [/input-8, 1621] 
split level 56: [/input-8, 453] 
split level 57: [/input-8, 1230] 
split level 58: [/input-8, 1338] 
split level 59: [/input-8, 1939] 
split level 60: [/input-8, 578] 
split level 61: [/input-8, 1961] 
split level 62: [/input-8, 433] 
split level 63: [/input-8, 1340] 
split level 64: [/input-8, 777] 
split level 65: [/input-8, 1940] 
split level 66: [/input-8, 1941] 
split level 67: [/input-8, 75] 
split level 68: [/input-8, 1029] 
split level 69: [/input-8, 108] 
split level 70: [/input-8, 1372] 
split level 71: [/input-8, 1290] 
split level 72: [/input-8, 1364] 
split level 73: [/input-8, 1652] 
split level 74: [/input-8, 298] 
split level 75: [/input-8, 478] 
split level 76: [/input-8, 434] 
split level 77: [/input-8, 1054] 
split level 78: [/input-8, 778] 
split level 79: [/input-8, 1329] 
split level 80: [/input-8, 1226] 
split level 81: [/input-8, 918] 
split level 82: [/input-8, 624] 
split level 83: [/input-8, 1790] 
split level 84: [/input-8, 441] 
split level 85: [/input, 2710] 
split level 86: [/input-8, 814] 
split level 87: [/input-8, 830] 
split level 88: [/input-8, 91] 
split level 89: [/input-8, 603] 
split level 90: [/input-8, 465] 
split level 91: [/input-8, 577] 
split level 92: [/input-8, 785] 
split level 93: [/input-8, 595] 
split level 94: [/input-8, 829] 
split level 95: [/input-8, 1613] 
split level 96: [/input-8, 1646] 
split level 97: [/input-8, 1260] 
split level 98: [/input-8, 28] 
split level 99: [/input-8, 73] 
split level 100: [/input-8, 1229] 
split level 101: [/input-8, 1337] 
split level 102: [/input-8, 798] 
split level 103: [/input-8, 409] 
split level 104: [/input-8, 83] 
split level 105: [/input, 1446] 
split level 106: [/input-8, 813] 
split level 107: [/input-8, 82] 
split level 108: [/input-8, 76] 
split level 109: [/input-8, 1596] 
split level 110: [/input-8, 1297] 
split level 111: [/input-8, 955] 
split level 112: [/input-8, 1597] 
split level 113: [/input-8, 74] 
split level 114: [/input-8, 1225] 
split level 115: [/input-8, 492] 
split level 116: [/input-8, 958] 
split level 117: [/input-8, 1764] 
split level 118: [/input-8, 1773] 
split level 119: [/input-8, 1595] 
split level 120: [/input-8, 293] 
split level 121: [/input-8, 1762] 
split level 122: [/input, 612] 
split level 123: [/input-8, 109] 
split level 124: [/input-8, 1593] 
split level 125: [/input-8, 446] 
split level 126: [/input-8, 21] 
split level 127: [/input-8, 85] 
split level 128: [/input, 2725] 
split level 129: [/input-8, 1227] 
split level 130: [/input, 3460] 
split level 131: [/input-8, 1321] 
split level 132: [/input-8, 81] 
split level 133: [/input-8, 1657] 
split level 134: [/input-8, 486] 
split level 135: [/input-8, 22] 
split level 136: [/input, 3208] 
split level 137: [/input-8, 452] 
split level 138: [/input-8, 78] 
split level 139: [/input, 508] 
split level 140: [/input, 610] 
split level 141: [/input, 884] 
split level 142: [/input, 885] 
split level 143: [/input-8, 1594] 
split level 144: [/input, 597] 
split level 145: [/input-8, 626] 
split level 146: [/input-8, 812] 
split level 147: [/input-8, 1365] 
split level 148: [/input-8, 345] 
split level 149: [/input, 1223] 
split level 150: [/input-8, 1252] 
split level 151: [/input, 3239] 
split level 152: [/input, 2164] 
split level 153: [/input-8, 1228] 
split level 154: [/input, 3224] 
split level 155: [/input-8, 1222] 
split level 156: [/input, 1209] 
split level 157: [/input, 1012] 
split level 158: [/input, 1019] 
split level 159: [/input, 551] 
split level 160: [/input-8, 86] 
split level 161: [/input-8, 488] 
split level 162: [/input, 593] 
split level 163: [/input-8, 92] 
split level 164: [/input-8, 278] 
split level 165: [/input-8, 116] 
split level 166: [/input, 900] 
split level 167: [/input-8, 1781] 
split level 168: [/input, 2786] 
split level 169: [/input, 3492] 
split level 170: [/input, 611] 
split level 171: [/input, 3446] 
split level 172: [/input, 2787] 
split level 173: [/input, 2163] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 1020] 
split level 176: [/input, 2181] 
split level 177: [/input-8, 384] 
split level 178: [/input, 3578] 
split level 179: [/input, 1210] 
split level 180: [/input, 1179] 
split level 181: [/input-8, 442] 
split level 182: [/input, 2772] 
split level 183: [/input, 3048] 
split level 184: [/input, 2196] 
split level 185: [/input, 387] 
split level 186: [/input, 557] 
split level 187: [/input, 1208] 
split level 188: [/input, 3498] 
split level 189: [/input, 2789] 
split level 190: [/input, 552] 
split level 191: [/input, 3020] 
split level 192: [/input, 3541] 
split level 193: [/input, 2792] 
split level 194: [/input, 956] 
split level 195: [/input, 444] 
split level 196: [/input, 2556] 
split level 197: [/input, 1194] 
split level 198: [/input, 3532] 
split level 199: [/input, 2660] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11737555265426636
10 lb beta sum: 0.0, worst -0.11736670136451721
Time: prepare 0.0115    bound 0.0958    transfer 0.0026    finalize 0.0031    func 0.1155    
Accumulated time: func 0.1683    prepare 0.0215    bound 0.1481    transfer 0.0027    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.13235784) min lb tensor(-0.11736476)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01087188720703125 
BICCOS Cumulative time: 0.01087188720703125
Preprocessing time: 0.010030508041381836 Inference time: 0.0005168914794921875 Add cuts time: 8.320808410644531e-05 Cut analysis time: 0.00024127960205078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10714 (1), -0.10712 (1), -0.10690 (1), -0.10673 (1), -0.10672 (1), -0.10634 (1), -0.10629 (1), -0.10602 (1), -0.10581 (1), -0.10580 (1), -0.10568 (1), -0.10532 (1), -0.10528 (1), -0.10510 (1), -0.10450 (1), -0.10413 (1), -0.10399 (1), -0.10324 (1), -0.10308 (1), -0.10299 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5066    set_bounds 0.0088    solve 0.1156    add 0.0702    
Accumulated time: pickout 0.0003    decision 0.5066    set_bounds 0.0088    solve 0.1156    add 0.0702    
Current (lb-rhs): -0.1071443259716034
50 domains visited
Cumulative time: 0.7699084281921387

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08096808195114136

all verified at 6th iter
Time: prepare 0.0067    bound 0.0400    transfer 0.0007    finalize 0.0022    func 0.0522    
Accumulated time: func 0.2205    prepare 0.0285    bound 0.1881    transfer 0.0034    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.17984000) min lb tensor(0.00160849)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03504776954650879 
BICCOS Cumulative time: 0.04591965675354004
Preprocessing time: 0.011637687683105469 Inference time: 0.01565694808959961 Add cuts time: 0.0075762271881103516 Cut analysis time: 0.00017690658569335938
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0129    solve 0.0523    add 0.0148    
Accumulated time: pickout 0.0013    decision 0.5259    set_bounds 0.0217    solve 0.1679    add 0.0850    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.58172405e-11, 1.88168392e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.58172405e-11, 2.02158242e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.54676376e-06, 1.93648264e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([3.54676376e-06, 1.88853189e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05777639150619507

all verified at 2th iter
Time: prepare 0.0003    bound 0.0148    transfer 0.0001    finalize 0.0002    func 0.0155    
Accumulated time: func 0.2360    prepare 0.0288    bound 0.2030    transfer 0.0035    finalize 0.0056    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.53443574905396
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.53436493873596
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.53434324264526
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.53432393074036
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.53430485725403
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.53428554534912
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.26904869, -33.04354858, -25.95203400, -25.30147362, -26.82607079,
         -23.58791351, -27.02210999, -26.74736023, -30.97900772, -31.80931664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 497] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 497] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 235] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07312489, 7.09390211, 1.17368293, 1.32954621, 1.97331977, 2.09624052,
         2.19010615, 5.61076927, 6.28059912]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [914]; unstable size 914; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 914] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 914] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 914] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50396156,  4.56140280,  1.59753501,  0.26819670,  2.21705484,
         -0.30545175,  3.74951553,  1.75252283,  5.38511562]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.24it/s]100%|██████████| 1/1 [00:00<00:00,  9.24it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.61618996, -26.34212685, -20.08324432, -22.38359451, -20.88983536,
          -23.12462997, -20.31562424, -24.86903000, -23.20267296, -27.22996330]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23237991]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1108 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.21648406982422
alpha/beta optimization time: 1.1911675930023193
initial alpha-crown bounds: tensor([[ 1.54622090,  4.63079357,  1.64909256,  0.31041086,  2.27290082,
         -0.27205801,  3.81806421,  1.79653966,  5.46451902]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.27205801010131836
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.64496302604675
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.64492464065552
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.64489889144897
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6448781490326
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.644859790802
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6448414325714
Verifying property 5 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27205801]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
        -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27205801]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 914
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.846687316894531e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2720576524734497
10 lb beta sum: 0.0, worst -0.27205753326416016
Time: prepare 0.0002    bound 0.0867    transfer 0.0001    finalize 0.0001    func 0.0871    
Accumulated time: func 0.0871    prepare 0.0002    bound 0.0867    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 36] 
split level 2: [/input-12, 96] 
split level 3: [/input-12, 89] 
split level 4: [/input-12, 43] 
split level 5: [/input-12, 15] 
split level 6: [/input-12, 18] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 90] 
split level 9: [/input, 2968] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 173] 
split level 12: [/input-8, 1171] 
split level 13: [/input, 419] 
split level 14: [/input, 2984] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1756] 
split level 17: [/input-8, 1755] 
split level 18: [/input, 2966] 
split level 19: [/input, 900] 
split level 20: [/input-8, 1236] 
split level 21: [/input, 3044] 
split level 22: [/input-8, 1762] 
split level 23: [/input, 901] 
split level 24: [/input-8, 1734] 
split level 25: [/input, 932] 
split level 26: [/input-8, 228] 
split level 27: [/input, 953] 
split level 28: [/input-8, 372] 
split level 29: [/input, 885] 
split level 30: [/input, 2935] 
split level 31: [/input-8, 954] 
split level 32: [/input, 137] 
split level 33: [/input-8, 1374] 
split level 34: [/input, 117] 
split level 35: [/input, 966] 
split level 36: [/input, 3028] 
split level 37: [/input-8, 1245] 
split level 38: [/input, 2920] 
split level 39: [/input-8, 1740] 
split level 40: [/input, 3235] 
split level 41: [/input, 962] 
split level 42: [/input-8, 1769] 
split level 43: [/input-8, 2015] 
split level 44: [/input, 869] 
split level 45: [/input, 647] 
split level 46: [/input, 140] 
split level 47: [/input-8, 1716] 
split level 48: [/input, 133] 
split level 49: [/input-8, 2006] 
split level 50: [/input-8, 1332] 
split level 51: [/input, 964] 
split level 52: [/input, 1912] 
split level 53: [/input, 118] 
split level 54: [/input, 948] 
split level 55: [/input-8, 1625] 
split level 56: [/input-8, 1618] 
split level 57: [/input, 853] 
split level 58: [/input, 2685] 
split level 59: [/input-8, 1649] 
split level 60: [/input-8, 1193] 
split level 61: [/input-8, 1748] 
split level 62: [/input, 949] 
split level 63: [/input, 1390] 
split level 64: [/input, 2936] 
split level 65: [/input, 1943] 
split level 66: [/input, 916] 
split level 67: [/input, 934] 
split level 68: [/input, 169] 
split level 69: [/input, 167] 
split level 70: [/input, 125] 
split level 71: [/input, 2988] 
split level 72: [/input, 450] 
split level 73: [/input-8, 1077] 
split level 74: [/input, 965] 
split level 75: [/input, 141] 
split level 76: [/input, 970] 
split level 77: [/input-8, 1331] 
split level 78: [/input, 164] 
split level 79: [/input, 213] 
split level 80: [/input-8, 1244] 
split level 81: [/input, 102] 
split level 82: [/input, 2972] 
split level 83: [/input, 968] 
split level 84: [/input, 1928] 
split level 85: [/input-8, 1996] 
split level 86: [/input, 884] 
split level 87: [/input-8, 1650] 
split level 88: [/input, 172] 
split level 89: [/input-8, 1633] 
split level 90: [/input, 871] 
split level 91: [/input, 2686] 
split level 92: [/input-8, 1781] 
split level 93: [/input, 2441] 
split level 94: [/input-8, 2032] 
split level 95: [/input, 852] 
split level 96: [/input, 631] 
split level 97: [/input, 698] 
split level 98: [/input, 3460] 
split level 99: [/input, 946] 
split level 100: [/input, 142] 
split level 101: [/input, 678] 
split level 102: [/input, 89] 
split level 103: [/input, 2211] 
split level 104: [/input, 2670] 
split level 105: [/input, 406] 
split level 106: [/input-8, 1157] 
split level 107: [/input-8, 2017] 
split level 108: [/input, 2964] 
split level 109: [/input-8, 181] 
split level 110: [/input, 2692] 
split level 111: [/input, 868] 
split level 112: [/input, 854] 
split level 113: [/input, 2963] 
split level 114: [/input, 823] 
split level 115: [/input, 2524] 
split level 116: [/input-8, 1366] 
split level 117: [/input, 375] 
split level 118: [/input, 1913] 
split level 119: [/input, 1897] 
split level 120: [/input, 855] 
split level 121: [/input-8, 229] 
split level 122: [/input, 211] 
split level 123: [/input-8, 771] 
split level 124: [/input, 2948] 
split level 125: [/input, 2691] 
split level 126: [/input-8, 956] 
split level 127: [/input, 156] 
split level 128: [/input-8, 1610] 
split level 129: [/input, 1927] 
split level 130: [/input, 1881] 
split level 131: [/input, 3531] 
split level 132: [/input, 3131] 
split level 133: [/input, 930] 
split level 134: [/input, 3291] 
split level 135: [/input, 3476] 
split level 136: [/input, 4007] 
split level 137: [/input, 2939] 
split level 138: [/input, 662] 
split level 139: [/input, 216] 
split level 140: [/input, 2248] 
split level 141: [/input-8, 1617] 
split level 142: [/input, 126] 
split level 143: [/input, 1898] 
split level 144: [/input, 3532] 
split level 145: [/input, 914] 
split level 146: [/input, 838] 
split level 147: [/input, 132] 
split level 148: [/input, 228] 
split level 149: [/input, 957] 
split level 150: [/input, 981] 
split level 151: [/input, 94] 
split level 152: [/input, 2425] 
split level 153: [/input, 3549] 
split level 154: [/input-8, 1284] 
split level 155: [/input, 2690] 
split level 156: [/input, 101] 
split level 157: [/input, 2156] 
split level 158: [/input, 2702] 
split level 159: [/input-8, 1749] 
split level 160: [/input, 158] 
split level 161: [/input, 2477] 
split level 162: [/input, 898] 
split level 163: [/input-8, 366] 
split level 164: [/input, 2142] 
split level 165: [/input, 974] 
split level 166: [/input, 2932] 
split level 167: [/input, 2706] 
split level 168: [/input, 87] 
split level 169: [/input, 2212] 
split level 170: [/input, 2931] 
split level 171: [/input, 2492] 
split level 172: [/input, 2676] 
split level 173: [/input, 2436] 
split level 174: [/input, 2659] 
split level 175: [/input, 214] 
split level 176: [/input, 2181] 
split level 177: [/input, 2660] 
split level 178: [/input, 2675] 
split level 179: [/input, 215] 
split level 180: [/input-8, 213] 
split level 181: [/input, 2504] 
split level 182: [/input, 2507] 
split level 183: [/input, 2180] 
split level 184: [/input, 2424] 
split level 185: [/input, 73] 
split level 186: [/input, 2661] 
split level 187: [/input, 1882] 
split level 188: [/input, 2254] 
split level 189: [/input, 3501] 
split level 190: [/input, 1498] 
split level 191: [/input, 2677] 
split level 192: [/input, 2163] 
split level 193: [/input, 2658] 
split level 194: [/input, 2206] 
split level 195: [/input, 2638] 
split level 196: [/input, 2398] 
split level 197: [/input, 3041] 
split level 198: [/input, 2674] 
split level 199: [/input, 2705] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2718240022659302
10 lb beta sum: 0.0, worst -0.2718130350112915
Time: prepare 0.0116    bound 0.0957    transfer 0.0065    finalize 0.0030    func 0.1194    
Accumulated time: func 0.2065    prepare 0.0216    bound 0.1824    transfer 0.0066    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.02808881) min lb tensor(-0.27181196)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010491132736206055 
BICCOS Cumulative time: 0.010491132736206055
Preprocessing time: 0.010057926177978516 Inference time: 0.00014472007751464844 Add cuts time: 6.67572021484375e-05 Cut analysis time: 0.00022172927856445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26585 (1), -0.26582 (1), -0.26572 (1), -0.26563 (1), -0.26555 (1), -0.26530 (1), -0.26508 (1), -0.26495 (1), -0.26459 (1), -0.26443 (1), -0.26409 (1), -0.26402 (1), -0.26370 (1), -0.26368 (1), -0.26352 (1), -0.26339 (1), -0.26330 (1), -0.26329 (1), -0.26328 (1), -0.26313 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5077    set_bounds 0.0091    solve 0.1194    add 0.0719    
Accumulated time: pickout 0.0003    decision 0.5077    set_bounds 0.0091    solve 0.1194    add 0.0719    
Current (lb-rhs): -0.2658505439758301
50 domains visited
Cumulative time: 0.8126161098480225

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 96] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 89] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 43] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24263620376586914
10 lb beta sum: 0.5864970088005066, worst -0.23490381240844727
Time: prepare 0.0073    bound 0.1158    transfer 0.0007    finalize 0.0024    func 0.1287    
Accumulated time: func 0.3352    prepare 0.0291    bound 0.2981    transfer 0.0074    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.09610005) min lb tensor(-0.23489189)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.01336979866027832 
BICCOS Cumulative time: 0.023860931396484375
Preprocessing time: 0.011656045913696289 Inference time: 0.0005388259887695312 Add cuts time: 0.00021719932556152344 Cut analysis time: 0.0009577274322509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07053 (2), -0.06991 (2), -0.06978 (2), -0.06921 (2), -0.06899 (2), -0.06897 (2), -0.06889 (2), -0.06885 (2), -0.06859 (2), -0.06850 (2), -0.06813 (2), -0.06783 (2), -0.06765 (2), -0.06756 (2), -0.06557 (2), -0.06550 (2), -0.06377 (2), -0.06255 (2), -0.06167 (2), -0.06138 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0121    solve 0.1288    add 0.0783    
Accumulated time: pickout 0.0014    decision 0.5273    set_bounds 0.0212    solve 0.2483    add 0.1502    
Current (lb-rhs): -0.07052832841873169
100 domains visited
Cumulative time: 1.0661242008209229

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 1: [/input-12, 96] [/input-12, 96] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 36] [/input-12, 89] [/input-12, 36] 
split level 2: [/input-12, 89] [/input-12, 89] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 43] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0752558708190918
10 lb beta sum: 0.7982674837112427, worst -0.11708569526672363
Time: prepare 0.0068    bound 0.1164    transfer 0.0007    finalize 0.0024    func 0.1291    
Accumulated time: func 0.4643    prepare 0.0362    bound 0.4146    transfer 0.0081    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.29591250) min lb tensor(-0.03631997)
Number of Verified Splits: 378 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03570842742919922 
BICCOS Cumulative time: 0.059569358825683594
Preprocessing time: 0.011589765548706055 Inference time: 0.016559839248657227 Add cuts time: 0.007208585739135742 Cut analysis time: 0.0003502368927001953
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0191    set_bounds 0.0156    solve 0.1292    add 0.0195    
Accumulated time: pickout 0.0025    decision 0.5464    set_bounds 0.0368    solve 0.3774    add 0.1697    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.02747962e-01,  3.00477087e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.02747962e-01,  5.24633378e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  4.89072651e-02,  2.93955684e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  4.89072651e-02,  4.15066332e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  3.72992754e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.89572796e-01,  2.58534074e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.89572796e-01,  5.94145507e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2122175693511963
10 lb beta sum: 0.5384148359298706, worst -0.1947573870420456
Time: prepare 0.0004    bound 0.1260    transfer 0.0002    finalize 0.0002    func 0.1268    
Accumulated time: func 0.5911    prepare 0.0366    bound 0.5406    transfer 0.0083    finalize 0.0081    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 96] [/input-12, 83] 
split level 1: [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 15] [/input-12, 43] 
split level 3: [/input-8, 1171] [/input-12, 18] 
split level 4: [/input, 2984] [/input-8, 1171] 
split level 5: [/input, 2966] [/input, 2984] 
split level 6: [/input-8, 1762] [/input, 2966] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0952560901641846, worst -0.10420411825180054
10 lb beta sum: 1.1569147109985352, worst -0.10395771265029907
Time: prepare 0.0121    bound 0.1265    transfer 0.0011    finalize 0.0015    func 0.1429    
Accumulated time: func 0.7341    prepare 0.0491    bound 0.6671    transfer 0.0094    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(0.68827951) min lb tensor(-0.10389656)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.1161060333251953, worst -0.15010744333267212
10 lb beta sum: 1.2619845867156982, worst -0.052348434925079346
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 9
#cuts 4-6: 6
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.28073668479919434 
BICCOS Cumulative time: 0.34030604362487793
Preprocessing time: 0.00754237174987793 Inference time: 0.26593565940856934 Add cuts time: 0.0064618587493896484 Cut analysis time: 0.0007967948913574219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10390 (7), -0.10013 (7), -0.09844 (7), -0.09761 (7), -0.09468 (7), -0.09389 (7), -0.09215 (7), -0.08844 (7), -0.08566 (7), -0.08235 (7), -0.08034 (7), -0.07971 (7), -0.07718 (7), -0.07653 (7), -0.07441 (7), -0.07137 (7), -0.04720 (7), -0.04480 (7), -0.04380 (7), -0.04181 (7), 
Length of domains: 32
Time: pickout 0.0005    decision 0.0197    set_bounds 0.0272    solve 0.1430    add 0.0010    
Accumulated time: pickout 0.0030    decision 0.5661    set_bounds 0.0640    solve 0.5204    add 0.1707    
Current (lb-rhs): -0.10389655828475952
132 domains visited
Cumulative time: 1.9036896228790283

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 1: [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] 
split level 2: [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10298538208007812
10 lb beta sum: 0.2682151198387146, worst -0.0998237133026123
Time: prepare 0.0064    bound 0.1406    transfer 0.0005    finalize 0.0018    func 0.1513    
Accumulated time: func 0.8854    prepare 0.0556    bound 0.8077    transfer 0.0100    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(1.11673093) min lb tensor(-0.09978700)
Number of Verified Splits: 187 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 9
#cuts 4-6: 7
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.028012752532958984 
BICCOS Cumulative time: 0.3683187961578369
Preprocessing time: 0.008721351623535156 Inference time: 0.016060590744018555 Add cuts time: 0.0024459362030029297 Cut analysis time: 0.0007848739624023438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09979 (10), -0.09778 (10), -0.09604 (10), -0.09432 (10), -0.09408 (10), -0.09361 (10), -0.09231 (10), -0.09059 (10), -0.09022 (10), -0.08989 (10), -0.08864 (10), -0.08814 (10), -0.08656 (10), -0.08476 (10), -0.08442 (10), -0.08180 (10), -0.08110 (10), -0.07792 (10), -0.07652 (10), -0.07570 (10), 
Length of domains: 69
Time: pickout 0.0019    decision 0.0129    set_bounds 0.0213    solve 0.1514    add 0.0011    
Accumulated time: pickout 0.0050    decision 0.5790    set_bounds 0.0852    solve 0.6718    add 0.1719    
Current (lb-rhs): -0.09978699684143066
201 domains visited
Cumulative time: 2.121432065963745

BaB round 3
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] 
split level 1: [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09798717498779297
10 lb beta sum: 0.3302624523639679, worst -0.0979301929473877
Time: prepare 0.0070    bound 0.1428    transfer 0.0010    finalize 0.0018    func 0.1544    
Accumulated time: func 1.0397    prepare 0.0628    bound 0.9505    transfer 0.0110    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.45777035) min lb tensor(-0.09790230)
Number of Verified Splits: 212 of 276
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 9
#cuts 4-6: 7
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03235602378845215 
BICCOS Cumulative time: 0.40067481994628906
Preprocessing time: 0.008534908294677734 Inference time: 0.02056431770324707 Add cuts time: 0.002475261688232422 Cut analysis time: 0.0007815361022949219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09790 (12), -0.09588 (12), -0.09421 (12), -0.09247 (12), -0.09224 (12), -0.09166 (12), -0.09044 (12), -0.08879 (12), -0.08808 (12), -0.08798 (12), -0.08682 (12), -0.08623 (12), -0.08444 (12), -0.08264 (12), -0.08256 (12), -0.07911 (12), -0.07903 (12), -0.07530 (12), -0.07389 (12), -0.07314 (12), 
Length of domains: 64
Time: pickout 0.0020    decision 0.0145    set_bounds 0.0205    solve 0.1544    add 0.0012    
Accumulated time: pickout 0.0069    decision 0.5935    set_bounds 0.1057    solve 0.8263    add 0.1730    
Current (lb-rhs): -0.09790229797363281
265 domains visited
Cumulative time: 2.347437858581543

BaB round 4
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] 
split level 1: [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0015013705706223845, worst -0.09166669845581055
10 lb beta sum: 0.003160398453474045, worst -0.09162592887878418
Time: prepare 0.0122    bound 0.1414    transfer 0.0009    finalize 0.0014    func 0.1575    
Accumulated time: func 1.1972    prepare 0.0751    bound 1.0919    transfer 0.0118    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.00509558) min lb tensor(-0.09160948)
Number of Verified Splits: 5 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.010401725769042969 
BICCOS Cumulative time: 0.41107654571533203
Preprocessing time: 0.007514476776123047 Inference time: 0.0006544589996337891 Add cuts time: 0.001064300537109375 Cut analysis time: 0.0011684894561767578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09161 (14), -0.09027 (14), -0.08960 (14), -0.08826 (14), -0.08765 (14), -0.08631 (14), -0.08620 (14), -0.08571 (14), -0.08569 (14), -0.08529 (14), -0.08485 (14), -0.08437 (14), -0.08435 (14), -0.08418 (14), -0.08395 (14), -0.08382 (14), -0.08369 (14), -0.08283 (14), -0.08248 (14), -0.08235 (14), 
Length of domains: 251
Time: pickout 0.0019    decision 0.0141    set_bounds 0.0121    solve 0.1575    add 0.0015    
Accumulated time: pickout 0.0088    decision 0.6076    set_bounds 0.1178    solve 0.9838    add 0.1745    
Current (lb-rhs): -0.09160947799682617
516 domains visited
Cumulative time: 2.545257091522217

BaB round 5
batch: 251
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1756] [/input-8, 1245] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08919858932495117
10 lb beta sum: 0.0018542862962931395, worst -0.08916640281677246
Time: prepare 0.0123    bound 0.1513    transfer 0.0009    finalize 0.0025    func 0.1703    
Accumulated time: func 1.3675    prepare 0.0876    bound 1.2432    transfer 0.0127    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.00766178) min lb tensor(-0.08914924)
Number of Verified Splits: 24 of 502
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 9
#cuts 4-6: 11
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.02127861976623535 
BICCOS Cumulative time: 0.4323551654815674
Preprocessing time: 0.01516103744506836 Inference time: 0.002906322479248047 Add cuts time: 0.0012595653533935547 Cut analysis time: 0.0019516944885253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08915 (15), -0.08780 (15), -0.08719 (15), -0.08584 (15), -0.08521 (15), -0.08387 (15), -0.08374 (15), -0.08328 (15), -0.08313 (15), -0.08276 (15), -0.08239 (15), -0.08193 (15), -0.08178 (15), -0.08177 (15), -0.08142 (15), -0.08131 (15), -0.08114 (15), -0.08043 (15), -0.07996 (15), -0.07982 (15), 
Length of domains: 478
Time: pickout 0.0040    decision 0.0254    set_bounds 0.0213    solve 0.1704    add 0.0038    
Accumulated time: pickout 0.0129    decision 0.6330    set_bounds 0.1391    solve 1.1542    add 0.1782    
Current (lb-rhs): -0.08914923667907715
994 domains visited
Cumulative time: 2.792081356048584

BaB round 6
batch: 478
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08748674392700195
10 lb beta sum: 0.0014133508084341884, worst -0.08746480941772461
Time: prepare 0.0237    bound 0.1576    transfer 0.0015    finalize 0.0065    func 0.1954    
Accumulated time: func 1.5629    prepare 0.1116    bound 1.4008    transfer 0.0142    finalize 0.0235    
all_split False
======================Cut inference begins======================
max lb tensor(0.00957154) min lb tensor(-0.08745646)
Number of Verified Splits: 32 of 956
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 9
#cuts 4-6: 13
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.03622603416442871 
BICCOS Cumulative time: 0.4685811996459961
Preprocessing time: 0.02921271324157715 Inference time: 0.004007577896118164 Add cuts time: 0.0018258094787597656 Cut analysis time: 0.0011799335479736328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08746 (16), -0.08611 (16), -0.08551 (16), -0.08416 (16), -0.08250 (16), -0.08231 (16), -0.08205 (16), -0.08196 (16), -0.08178 (16), -0.08115 (16), -0.08105 (16), -0.08071 (16), -0.08066 (16), -0.08043 (16), -0.08009 (16), -0.08004 (16), -0.07986 (16), -0.07986 (16), -0.07970 (16), -0.07931 (16), 
Length of domains: 924
Time: pickout 0.0084    decision 0.0376    set_bounds 0.1869    solve 0.1956    add 0.0033    
Accumulated time: pickout 0.0213    decision 0.6706    set_bounds 0.3260    solve 1.3499    add 0.1816    
Current (lb-rhs): -0.08745646476745605
1918 domains visited
Cumulative time: 3.2613701820373535

BaB round 7
batch: 924
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1740] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 954] [/input-8, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0845632553100586
10 lb beta sum: 0.0013822885230183601, worst -0.08455562591552734
Time: prepare 0.0447    bound 0.2099    transfer 0.0050    finalize 0.0101    func 0.2818    
Accumulated time: func 1.8448    prepare 0.1566    bound 1.6107    transfer 0.0192    finalize 0.0337    
all_split False
======================Cut inference begins======================
max lb tensor(0.00993322) min lb tensor(-0.08455253)
Number of Verified Splits: 95 of 1848
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.0739891529083252 
BICCOS Cumulative time: 0.5425703525543213
Preprocessing time: 0.05628705024719238 Inference time: 0.012791633605957031 Add cuts time: 0.0033330917358398438 Cut analysis time: 0.0015773773193359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08455 (17), -0.08420 (17), -0.08259 (17), -0.08226 (17), -0.08221 (17), -0.08090 (17), -0.08084 (17), -0.08049 (17), -0.08046 (17), -0.07958 (17), -0.07926 (17), -0.07915 (17), -0.07895 (17), -0.07887 (17), -0.07881 (17), -0.07853 (17), -0.07812 (17), -0.07780 (17), -0.07762 (17), -0.07735 (17), 
Length of domains: 1753
Time: pickout 0.0181    decision 0.0624    set_bounds 0.0783    solve 0.2828    add 0.0060    
Accumulated time: pickout 0.0393    decision 0.7330    set_bounds 0.4043    solve 1.6326    add 0.1875    
Current (lb-rhs): -0.08455252647399902
3671 domains visited
Cumulative time: 3.785785436630249

BaB round 8
batch: 1753
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08177661895751953
10 lb beta sum: 0.0013407447841018438, worst -0.08177566528320312
Time: prepare 0.0863    bound 0.3395    transfer 0.0122    finalize 0.0186    func 0.4800    
Accumulated time: func 2.3248    prepare 0.2431    bound 1.9503    transfer 0.0314    finalize 0.0523    
all_split False
======================Cut inference begins======================
max lb tensor(0.01189208) min lb tensor(-0.08176827)
Number of Verified Splits: 258 of 3506
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 9
#cuts 4-6: 32
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.15430808067321777 
BICCOS Cumulative time: 0.6968784332275391
Preprocessing time: 0.10768675804138184 Inference time: 0.03667759895324707 Add cuts time: 0.007401943206787109 Cut analysis time: 0.002541780471801758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08177 (18), -0.08140 (18), -0.07977 (18), -0.07943 (18), -0.07936 (18), -0.07808 (18), -0.07801 (18), -0.07764 (18), -0.07760 (18), -0.07679 (18), -0.07643 (18), -0.07615 (18), -0.07610 (18), -0.07603 (18), -0.07590 (18), -0.07567 (18), -0.07556 (18), -0.07536 (18), -0.07500 (18), -0.07479 (18), 
Length of domains: 3248
Time: pickout 0.0282    decision 0.1065    set_bounds 0.1495    solve 0.4810    add 0.0169    
Accumulated time: pickout 0.0675    decision 0.8395    set_bounds 0.5538    solve 2.1136    add 0.2044    
Current (lb-rhs): -0.08176827430725098
6919 domains visited
Cumulative time: 4.728516578674316

BaB round 9
batch: 3248
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08099651336669922
10 lb beta sum: 0.0012592625571414828, worst -0.08099579811096191
Time: prepare 0.1690    bound 0.5729    transfer 0.0311    finalize 0.0379    func 0.8532    
Accumulated time: func 3.1780    prepare 0.4124    bound 2.5232    transfer 0.0626    finalize 0.0901    
all_split False
======================Cut inference begins======================
max lb tensor(0.01130557) min lb tensor(-0.08099365)
Number of Verified Splits: 502 of 6496
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 9
#cuts 4-6: 49
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.3011300563812256 
BICCOS Cumulative time: 0.9980084896087646
Preprocessing time: 0.20399069786071777 Inference time: 0.0784599781036377 Add cuts time: 0.016015291213989258 Cut analysis time: 0.0026640892028808594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08099 (19), -0.08063 (19), -0.07900 (19), -0.07866 (19), -0.07858 (19), -0.07731 (19), -0.07722 (19), -0.07684 (19), -0.07683 (19), -0.07602 (19), -0.07565 (19), -0.07538 (19), -0.07525 (19), -0.07513 (19), -0.07490 (19), -0.07477 (19), -0.07458 (19), -0.07422 (19), -0.07402 (19), -0.07372 (19), 
Length of domains: 5994
Time: pickout 0.0529    decision 0.3472    set_bounds 0.2832    solve 0.8550    add 0.0209    
Accumulated time: pickout 0.1204    decision 1.1867    set_bounds 0.8371    solve 2.9686    add 0.2254    
Current (lb-rhs): -0.08099365234375
12913 domains visited
Cumulative time: 6.599997043609619

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07817244529724121
10 lb beta sum: 0.0011734412983059883, worst -0.07816219329833984
Time: prepare 0.2166    bound 0.7003    transfer 0.0377    finalize 0.0454    func 1.0522    
Accumulated time: func 4.2302    prepare 0.6292    bound 3.2235    transfer 0.1003    finalize 0.1355    
all_split False
======================Cut inference begins======================
max lb tensor(0.01416399) min lb tensor(-0.07815528)
Number of Verified Splits: 601 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 9
#cuts 4-6: 43
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 0.5845866203308105 
BICCOS Cumulative time: 1.5825951099395752
Preprocessing time: 0.46370649337768555 Inference time: 0.09840106964111328 Add cuts time: 0.019455671310424805 Cut analysis time: 0.003023386001586914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07816 (20), -0.07774 (20), -0.07615 (20), -0.07576 (20), -0.07573 (20), -0.07550 (20), -0.07536 (20), -0.07442 (20), -0.07435 (20), -0.07398 (20), -0.07395 (20), -0.07367 (20), -0.07359 (20), -0.07321 (19), -0.07318 (20), -0.07313 (20), -0.07277 (20), -0.07254 (20), -0.07240 (20), -0.07213 (20), 
Length of domains: 9489
Time: pickout 0.0687    decision 0.3739    set_bounds 0.3595    solve 1.0541    add 0.0343    
Accumulated time: pickout 0.1891    decision 1.5606    set_bounds 1.1965    solve 4.0227    add 0.2597    
Current (lb-rhs): -0.0781552791595459
20504 domains visited
current_vram/total_varm: 12.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.091378688812256

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1928] [/input-8, 1769] [/input, 2935] [/input, 1912] [/input, 1943] [/input-8, 1769] [/input, 2935] [/input, 1928] [/input, 1928] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07674145698547363
10 lb beta sum: 0.0011743915965780616, worst -0.07669711112976074
Time: prepare 0.4358    bound 1.3361    transfer 0.0753    finalize 0.1006    func 2.2896    
Accumulated time: func 6.5198    prepare 1.0654    bound 4.5597    transfer 0.1756    finalize 0.2361    
all_split False
======================Cut inference begins======================
max lb tensor(0.01412958) min lb tensor(-0.07666707)
Number of Verified Splits: 1386 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 103.
#cuts 1-3: 9
#cuts 4-6: 30
#cuts 7-9: 60
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.8099260330200195 
BICCOS Cumulative time: 2.3925211429595947
Preprocessing time: 0.523148775100708 Inference time: 0.24782776832580566 Add cuts time: 0.033846378326416016 Cut analysis time: 0.005103111267089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07667 (21), -0.07491 (21), -0.07467 (21), -0.07425 (21), -0.07389 (21), -0.07378 (21), -0.07290 (21), -0.07286 (21), -0.07250 (21), -0.07249 (21), -0.07243 (20), -0.07229 (21), -0.07196 (21), -0.07189 (21), -0.07171 (21), -0.07158 (21), -0.07148 (21), -0.07141 (21), -0.07110 (21), -0.07105 (21), 
Length of domains: 16295
Time: pickout 0.1326    decision 0.4572    set_bounds 0.9107    solve 2.2924    add 0.0422    
Accumulated time: pickout 0.3218    decision 2.0178    set_bounds 2.1073    solve 6.3152    add 0.3019    
Current (lb-rhs): -0.07666707038879395
35502 domains visited
current_vram/total_varm: 24.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 13.765790700912476

BaB round 12
batch: 16295
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2006] [/input, 419] [/input, 419] [/input-8, 1740] [/input, 1912] [/input-8, 2006] [/input, 1912] [/input-8, 2006] [/input, 1912] [/input-8, 2006] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07448911666870117
10 lb beta sum: 0.00113878829870373, worst -0.0744619369506836
Time: prepare 0.8813    bound 2.6540    transfer 0.1569    finalize 0.5374    func 4.4406    
Accumulated time: func 10.9604    prepare 1.9470    bound 7.2136    transfer 0.3325    finalize 0.7735    
all_split False
======================Cut inference begins======================
max lb tensor(0.01475566) min lb tensor(-0.07445812)
Number of Verified Splits: 3375 of 32590
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 195.
#cuts 1-3: 9
#cuts 4-6: 63
#cuts 7-9: 105
#cuts 10-12: 18
#cuts >= 20: 0
BICCOS time: 2.141815185546875 
BICCOS Cumulative time: 4.53433632850647
Preprocessing time: 1.0611083507537842 Inference time: 0.96337890625 Add cuts time: 0.10747814178466797 Cut analysis time: 0.009849786758422852
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07446 (22), -0.07272 (22), -0.07227 (22), -0.07204 (22), -0.07185 (22), -0.07166 (22), -0.07147 (22), -0.07067 (22), -0.07055 (22), -0.07032 (22), -0.07031 (22), -0.07014 (22), -0.07012 (22), -0.06987 (22), -0.06959 (21), -0.06949 (22), -0.06948 (22), -0.06948 (22), -0.06944 (22), -0.06940 (22), 
Length of domains: 29215
Time: pickout 0.3177    decision 1.1744    set_bounds 1.7551    solve 4.4464    add 0.0948    
Accumulated time: pickout 0.6395    decision 3.1923    set_bounds 3.8624    solve 10.7616    add 0.3967    
Current (lb-rhs): -0.07445812225341797
64717 domains visited
Cumulative time: 23.755802869796753

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 419] [/input-8, 2006] [/input-8, 1769] [/input, 948] [/input-8, 1769] [/input, 1913] [/input-8, 1769] [/input, 2936] [/input, 1913] [/input, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07224774360656738
10 lb beta sum: 0.001156773418188095, worst -0.07224607467651367
Time: prepare 0.8956    bound 2.8715    transfer 0.1492    finalize 0.2586    func 4.8294    
Accumulated time: func 15.7898    prepare 2.8430    bound 10.0851    transfer 0.4817    finalize 1.0320    
all_split False
======================Cut inference begins======================
max lb tensor(0.01471888) min lb tensor(-0.07224488)
Number of Verified Splits: 3488 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 250.
#cuts 1-3: 9
#cuts 4-6: 86
#cuts 7-9: 137
#cuts 10-12: 17
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 1.8860464096069336 
BICCOS Cumulative time: 6.420382738113403
Preprocessing time: 1.0587818622589111 Inference time: 0.6591281890869141 Add cuts time: 0.15545058250427246 Cut analysis time: 0.012685775756835938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07224 (23), -0.07185 (22), -0.07050 (23), -0.07032 (22), -0.07012 (22), -0.07007 (23), -0.07005 (23), -0.06982 (23), -0.06948 (22), -0.06944 (23), -0.06923 (23), -0.06906 (22), -0.06888 (22), -0.06859 (22), -0.06846 (23), -0.06834 (23), -0.06829 (23), -0.06818 (22), -0.06809 (23), -0.06809 (22), 
Length of domains: 42111
Time: pickout 0.2819    decision 1.6396    set_bounds 1.9213    solve 4.8355    add 0.1092    
Accumulated time: pickout 0.9214    decision 4.8319    set_bounds 5.7837    solve 15.5971    add 0.5058    
Current (lb-rhs): -0.07224488258361816
93997 domains visited
Cumulative time: 34.50614929199219

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1740] [/input, 1943] [/input, 1943] [/input, 1943] [/input, 1943] [/input, 1943] [/input, 1943] [/input, 1943] [/input, 167] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06964230537414551
10 lb beta sum: 0.0013155166525393724, worst -0.06963992118835449
Time: prepare 0.8934    bound 2.9627    transfer 0.1516    finalize 0.2516    func 4.4757    
Accumulated time: func 20.2655    prepare 3.7368    bound 13.0478    transfer 0.6333    finalize 1.2836    
all_split False
======================Cut inference begins======================
max lb tensor(0.01518180) min lb tensor(-0.06963515)
Number of Verified Splits: 4632 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 310.
#cuts 1-3: 9
#cuts 4-6: 105
#cuts 7-9: 166
#cuts 10-12: 30
#cuts >= 20: 0
BICCOS time: 2.8342325687408447 
BICCOS Cumulative time: 9.254615306854248
Preprocessing time: 1.1013875007629395 Inference time: 1.4794633388519287 Add cuts time: 0.2373335361480713 Cut analysis time: 0.016048192977905273
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07224 (23), -0.07050 (23), -0.07007 (23), -0.07005 (23), -0.06982 (23), -0.06964 (23), -0.06944 (23), -0.06923 (23), -0.06846 (23), -0.06834 (23), -0.06829 (23), -0.06811 (23), -0.06809 (23), -0.06798 (23), -0.06792 (23), -0.06789 (23), -0.06765 (23), -0.06755 (23), -0.06742 (23), -0.06727 (23), 
Length of domains: 53863
Time: pickout 0.2856    decision 2.0997    set_bounds 2.0936    solve 4.4824    add 0.0945    
Accumulated time: pickout 1.2070    decision 6.9316    set_bounds 7.8773    solve 20.0794    add 0.6004    
Current (lb-rhs): -0.07224488258361816
122133 domains visited
Cumulative time: 46.47763395309448

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input-8, 1193] [/input, 419] [/input, 1912] [/input, 1912] [/input, 948] [/input-8, 1245] [/input, 1928] [/input-8, 1740] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0704050064086914
10 lb beta sum: 0.0012865960597991943, worst -0.07036042213439941
Time: prepare 0.9100    bound 3.0964    transfer 0.1520    finalize 0.2663    func 4.6403    
Accumulated time: func 24.9058    prepare 4.6472    bound 16.1442    transfer 0.7853    finalize 1.5499    
all_split False
======================Cut inference begins======================
max lb tensor(0.01638627) min lb tensor(-0.07034826)
Number of Verified Splits: 3855 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 336.
#cuts 1-3: 10
#cuts 4-6: 97
#cuts 7-9: 194
#cuts 10-12: 35
#cuts >= 20: 0
BICCOS time: 2.8207662105560303 
BICCOS Cumulative time: 12.075381517410278
Preprocessing time: 1.0823891162872314 Inference time: 1.4760527610778809 Add cuts time: 0.2441258430480957 Cut analysis time: 0.018198490142822266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07050 (23), -0.07035 (24), -0.06964 (23), -0.06944 (23), -0.06923 (23), -0.06834 (23), -0.06816 (24), -0.06811 (23), -0.06796 (24), -0.06789 (23), -0.06781 (24), -0.06755 (23), -0.06742 (23), -0.06727 (23), -0.06726 (23), -0.06717 (23), -0.06715 (23), -0.06703 (23), -0.06687 (23), -0.06683 (23), 
Length of domains: 66392
Time: pickout 0.2906    decision 1.6447    set_bounds 2.2542    solve 4.6491    add 0.1531    
Accumulated time: pickout 1.4976    decision 8.5763    set_bounds 10.1315    solve 24.7285    add 0.7534    
Current (lb-rhs): -0.07050037384033203
151046 domains visited
Cumulative time: 58.3868682384491

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input, 901] [/input, 2936] [/input, 2936] [/input, 901] [/input, 901] [/input, 885] [/input, 948] [/input, 3028] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06864738464355469
10 lb beta sum: 0.0013541935477405787, worst -0.07564699649810791
Time: prepare 0.9070    bound 3.1410    transfer 0.1507    finalize 1.0260    func 5.4378    
Accumulated time: func 30.3436    prepare 5.5545    bound 19.2853    transfer 0.9360    finalize 2.5759    
all_split False
======================Cut inference begins======================
max lb tensor(0.01803136) min lb tensor(-0.06859040)
Number of Verified Splits: 4460 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 405.
#cuts 1-3: 10
#cuts 4-6: 117
#cuts 7-9: 206
#cuts 10-12: 70
#cuts 13-15: 2
#cuts >= 20: 0
BICCOS time: 2.3176321983337402 
BICCOS Cumulative time: 14.393013715744019
Preprocessing time: 1.0853276252746582 Inference time: 0.8782949447631836 Add cuts time: 0.33190393447875977 Cut analysis time: 0.022105693817138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07035 (24), -0.06964 (23), -0.06859 (24), -0.06816 (24), -0.06811 (23), -0.06796 (24), -0.06789 (23), -0.06781 (24), -0.06751 (24), -0.06726 (23), -0.06711 (24), -0.06683 (23), -0.06664 (23), -0.06656 (24), -0.06638 (24), -0.06636 (23), -0.06620 (24), -0.06608 (24), -0.06591 (23), -0.06585 (23), 
Length of domains: 78316
Time: pickout 0.2972    decision 1.6562    set_bounds 1.6485    solve 5.4455    add 0.1148    
Accumulated time: pickout 1.7948    decision 10.2325    set_bounds 11.7800    solve 30.1741    add 0.8682    
Current (lb-rhs): -0.07034826278686523
179354 domains visited
Cumulative time: 69.96583580970764

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1769] [/input, 137] [/input-8, 1769] [/input, 137] [/input-8, 1769] [/input, 884] [/input-8, 1769] [/input, 884] [/input, 137] [/input, 137] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06779646873474121
10 lb beta sum: 0.001394548686221242, worst -0.06774115562438965
Time: prepare 0.9091    bound 3.3100    transfer 0.1496    finalize 0.2744    func 5.7594    
Accumulated time: func 36.1030    prepare 6.4640    bound 22.5953    transfer 1.0856    finalize 2.8503    
all_split False
======================Cut inference begins======================
max lb tensor(0.01516890) min lb tensor(-0.06771588)
Number of Verified Splits: 4328 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 450.
#cuts 1-3: 10
#cuts 4-6: 114
#cuts 7-9: 228
#cuts 10-12: 97
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 2.3521127700805664 
BICCOS Cumulative time: 16.745126485824585
Preprocessing time: 1.0828819274902344 Inference time: 0.8642740249633789 Add cuts time: 0.3789486885070801 Cut analysis time: 0.026008129119873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07035 (24), -0.06859 (24), -0.06816 (24), -0.06796 (24), -0.06781 (24), -0.06772 (24), -0.06751 (24), -0.06711 (24), -0.06656 (24), -0.06638 (24), -0.06620 (24), -0.06608 (24), -0.06597 (24), -0.06586 (24), -0.06577 (24), -0.06573 (24), -0.06568 (24), -0.06553 (24), -0.06542 (24), -0.06538 (24), 
Length of domains: 90372
Time: pickout 0.2991    decision 2.2095    set_bounds 1.6299    solve 5.7671    add 0.0853    
Accumulated time: pickout 2.0939    decision 12.4420    set_bounds 13.4100    solve 35.9412    add 0.9535    
Current (lb-rhs): -0.07034826278686523
207794 domains visited
Cumulative time: 82.42307949066162

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1913] [/input, 419] [/input-8, 1769] [/input, 1913] [/input, 1913] [/input, 1913] [/input, 137] [/input, 2936] [/input-8, 2006] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06597065925598145
10 lb beta sum: 0.0037582346703857183, worst -0.07131952047348022
Time: prepare 0.9117    bound 3.3842    transfer 0.1512    finalize 0.2713    func 4.9398    
Accumulated time: func 41.0428    prepare 7.3761    bound 25.9795    transfer 1.2367    finalize 3.1216    
all_split False
======================Cut inference begins======================
max lb tensor(0.01717056) min lb tensor(-0.06593680)
Number of Verified Splits: 3916 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 480.
#cuts 1-3: 11
#cuts 4-6: 99
#cuts 7-9: 263
#cuts 10-12: 107
#cuts >= 20: 0
BICCOS time: 3.398149013519287 
BICCOS Cumulative time: 20.143275499343872
Preprocessing time: 1.1090219020843506 Inference time: 1.8685719966888428 Add cuts time: 0.3930490016937256 Cut analysis time: 0.027506113052368164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07035 (24), -0.06859 (24), -0.06796 (24), -0.06781 (24), -0.06772 (24), -0.06751 (24), -0.06711 (24), -0.06656 (24), -0.06620 (24), -0.06608 (24), -0.06597 (24), -0.06594 (25), -0.06586 (24), -0.06577 (24), -0.06568 (24), -0.06553 (24), -0.06542 (24), -0.06538 (24), -0.06538 (24), -0.06524 (24), 
Length of domains: 102840
Time: pickout 0.3069    decision 1.6546    set_bounds 2.5968    solve 4.9474    add 0.1080    
Accumulated time: pickout 2.4008    decision 14.0966    set_bounds 16.0067    solve 40.8885    add 1.0615    
Current (lb-rhs): -0.07034826278686523
236646 domains visited
Cumulative time: 95.53346133232117

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input, 1390] [/input, 2935] [/input, 1390] [/input-8, 1769] [/input-8, 1769] [/input, 3028] [/input-8, 1193] [/input, 3028] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06817293167114258
10 lb beta sum: 0.006875503342598677, worst -0.07056780159473419
Time: prepare 0.9131    bound 3.4251    transfer 0.1490    finalize 0.2774    func 4.9835    
Accumulated time: func 46.0263    prepare 8.2896    bound 29.4045    transfer 1.3857    finalize 3.3990    
all_split False
======================Cut inference begins======================
max lb tensor(0.01460964) min lb tensor(-0.06813812)
Number of Verified Splits: 3990 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 3.5915682315826416 
BICCOS Cumulative time: 23.734843730926514
Preprocessing time: 2.2493512630462646 Inference time: 0.8246927261352539 Add cuts time: 0.48407769203186035 Cut analysis time: 0.033446550369262695
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06859 (24), -0.06814 (25), -0.06781 (24), -0.06772 (24), -0.06751 (24), -0.06711 (24), -0.06608 (24), -0.06597 (24), -0.06594 (25), -0.06586 (24), -0.06571 (25), -0.06553 (24), -0.06542 (24), -0.06538 (24), -0.06524 (24), -0.06511 (24), -0.06506 (24), -0.06500 (24), -0.06494 (24), -0.06493 (24), 
Length of domains: 115234
Time: pickout 0.3042    decision 1.6498    set_bounds 1.6537    solve 4.9912    add 0.0972    
Accumulated time: pickout 2.7050    decision 15.7464    set_bounds 17.6604    solve 45.8798    add 1.1587    
Current (lb-rhs): -0.06859040260314941
265424 domains visited
Cumulative time: 107.91060757637024

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1245] [/input-8, 1769] [/input, 1943] [/input-8, 1769] [/input-8, 1769] [/input, 1390] [/input, 901] [/input-8, 1193] [/input-8, 1769] [/input-8, 1193] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06642913818359375
10 lb beta sum: 0.004324190318584442, worst -0.06639957427978516
Time: prepare 0.9297    bound 3.6211    transfer 0.1501    finalize 1.5023    func 6.4191    
Accumulated time: func 52.4454    prepare 9.2198    bound 33.0256    transfer 1.5358    finalize 4.9013    
all_split False
======================Cut inference begins======================
max lb tensor(0.01586047) min lb tensor(-0.06638598)
Number of Verified Splits: 4075 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0010938644409179688 
BICCOS Cumulative time: 23.73593759536743
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06772 (24), -0.06711 (24), -0.06639 (25), -0.06608 (24), -0.06597 (24), -0.06594 (25), -0.06592 (25), -0.06586 (24), -0.06571 (25), -0.06542 (24), -0.06538 (24), -0.06530 (25), -0.06500 (24), -0.06494 (24), -0.06488 (24), -0.06454 (24), -0.06434 (25), -0.06431 (24), -0.06418 (25), 
Length of domains: 127543
Time: pickout 0.2982    decision 1.6516    set_bounds 1.7282    solve 6.4266    add 0.0946    
Accumulated time: pickout 3.0032    decision 17.3980    set_bounds 19.3886    solve 52.3063    add 1.2533    
Current (lb-rhs): -0.06813812255859375
294117 domains visited
Cumulative time: 118.20446753501892

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1943] [/input, 871] [/input, 137] [/input, 167] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1912] [/input, 1912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06526684761047363
10 lb beta sum: 0.0033009089529514313, worst -0.06717133522033691
Time: prepare 0.9652    bound 3.6210    transfer 0.1504    finalize 0.2591    func 6.4907    
Accumulated time: func 58.9361    prepare 10.1853    bound 36.6466    transfer 1.6862    finalize 5.1604    
all_split False
======================Cut inference begins======================
max lb tensor(0.01565136) min lb tensor(-0.06521583)
Number of Verified Splits: 4292 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0011086463928222656 
BICCOS Cumulative time: 23.737046241760254
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06772 (24), -0.06639 (25), -0.06597 (24), -0.06594 (25), -0.06592 (25), -0.06586 (24), -0.06571 (25), -0.06542 (24), -0.06530 (25), -0.06522 (25), -0.06488 (24), -0.06454 (24), -0.06434 (25), -0.06418 (25), -0.06418 (25), -0.06412 (24), -0.06396 (25), -0.06395 (24), -0.06389 (25), 
Length of domains: 139635
Time: pickout 0.3063    decision 1.6571    set_bounds 1.7252    solve 6.4981    add 0.0947    
Accumulated time: pickout 3.3095    decision 19.0551    set_bounds 21.1138    solve 58.8045    add 1.3480    
Current (lb-rhs): -0.06813812255859375
322593 domains visited
Cumulative time: 128.61030077934265

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input-8, 1193] [/input, 419] [/input, 2936] [/input-8, 2006] [/input-8, 1193] [/input-8, 1193] [/input, 871] [/input, 885] [/input-8, 1193] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06552004814147949
10 lb beta sum: 0.0028795148245990276, worst -0.06549787521362305
Time: prepare 0.9235    bound 3.6225    transfer 0.1478    finalize 0.2525    func 5.1689    
Accumulated time: func 64.1049    prepare 11.1091    bound 40.2691    transfer 1.8340    finalize 5.4129    
all_split False
======================Cut inference begins======================
max lb tensor(0.01655796) min lb tensor(-0.06549001)
Number of Verified Splits: 4033 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0015375614166259766 
BICCOS Cumulative time: 23.73858380317688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06639 (25), -0.06594 (25), -0.06592 (25), -0.06586 (24), -0.06571 (25), -0.06549 (25), -0.06530 (25), -0.06522 (25), -0.06454 (24), -0.06434 (25), -0.06418 (25), -0.06418 (25), -0.06412 (24), -0.06396 (25), -0.06389 (25), -0.06379 (25), -0.06371 (25), -0.06367 (24), -0.06350 (25), 
Length of domains: 151986
Time: pickout 0.3073    decision 1.6619    set_bounds 1.6477    solve 5.1760    add 0.0908    
Accumulated time: pickout 3.6167    decision 20.7169    set_bounds 22.7616    solve 63.9805    add 1.4388    
Current (lb-rhs): -0.06813812255859375
351328 domains visited
Cumulative time: 137.62115168571472

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1245] [/input, 948] [/input-8, 1245] [/input, 948] [/input-8, 1245] [/input, 948] [/input-8, 2006] [/input, 167] [/input-8, 2006] [/input-8, 2006] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06401848793029785
10 lb beta sum: 0.004065646789968014, worst -0.06668102741241455
Time: prepare 0.9224    bound 3.6208    transfer 0.1648    finalize 0.2589    func 5.1891    
Accumulated time: func 69.2940    prepare 12.0320    bound 43.8899    transfer 1.9988    finalize 5.6718    
all_split False
======================Cut inference begins======================
max lb tensor(0.01877213) min lb tensor(-0.06396794)
Number of Verified Splits: 3968 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0015861988067626953 
BICCOS Cumulative time: 23.740170001983643
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06639 (25), -0.06594 (25), -0.06592 (25), -0.06571 (25), -0.06549 (25), -0.06530 (25), -0.06522 (25), -0.06434 (25), -0.06418 (25), -0.06418 (25), -0.06397 (25), -0.06396 (25), -0.06389 (25), -0.06379 (25), -0.06371 (25), -0.06350 (25), -0.06345 (25), -0.06328 (25), -0.06317 (25), 
Length of domains: 164402
Time: pickout 0.3127    decision 2.7660    set_bounds 1.6350    solve 5.1968    add 0.1026    
Accumulated time: pickout 3.9294    decision 23.4830    set_bounds 24.3965    solve 69.1773    add 1.5414    
Current (lb-rhs): -0.06813812255859375
380128 domains visited
Cumulative time: 147.74914693832397

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1245] [/input-8, 1769] [/input-8, 1769] [/input, 1943] [/input-8, 1245] [/input, 1943] [/input, 1943] [/input, 932] [/input, 932] [/input, 167] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06311941146850586
10 lb beta sum: 0.004354922100901604, worst -0.06314563751220703
Time: prepare 0.9142    bound 3.6206    transfer 0.1685    finalize 0.2821    func 5.1948    
Accumulated time: func 74.4888    prepare 12.9465    bound 47.5104    transfer 2.1673    finalize 5.9539    
all_split False
======================Cut inference begins======================
max lb tensor(0.01873696) min lb tensor(-0.06308722)
Number of Verified Splits: 3633 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.001226186752319336 
BICCOS Cumulative time: 23.741396188735962
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06639 (25), -0.06592 (25), -0.06571 (25), -0.06549 (25), -0.06530 (25), -0.06522 (25), -0.06434 (25), -0.06418 (25), -0.06397 (25), -0.06396 (25), -0.06389 (25), -0.06379 (25), -0.06371 (25), -0.06345 (25), -0.06328 (25), -0.06317 (25), -0.06312 (25), -0.06310 (25), -0.06309 (26), 
Length of domains: 177153
Time: pickout 0.3132    decision 1.6753    set_bounds 3.0442    solve 5.2026    add 0.1052    
Accumulated time: pickout 4.2426    decision 25.1582    set_bounds 27.4407    solve 74.3799    add 1.6467    
Current (lb-rhs): -0.06813812255859375
409263 domains visited
Cumulative time: 158.21528315544128

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2936] [/input, 137] [/input, 1912] [/input, 1912] [/input, 901] [/input, 167] [/input-8, 1769] [/input, 901] [/input, 964] [/input, 1912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06105470657348633
10 lb beta sum: 0.004158873576670885, worst -0.06126393377780914
Time: prepare 0.9216    bound 3.6204    transfer 0.1873    finalize 1.7672    func 6.7090    
Accumulated time: func 81.1978    prepare 13.8685    bound 51.1308    transfer 2.3545    finalize 7.7210    
all_split False
======================Cut inference begins======================
max lb tensor(0.01913536) min lb tensor(-0.06099415)
Number of Verified Splits: 3399 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.001035451889038086 
BICCOS Cumulative time: 23.742431640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06814 (25), -0.06639 (25), -0.06592 (25), -0.06571 (25), -0.06549 (25), -0.06530 (25), -0.06522 (25), -0.06434 (25), -0.06418 (25), -0.06397 (25), -0.06396 (25), -0.06379 (25), -0.06371 (25), -0.06345 (25), -0.06328 (25), -0.06317 (25), -0.06312 (25), -0.06309 (26), -0.06309 (25), -0.06304 (25), 
Length of domains: 190138
Time: pickout 0.3127    decision 1.6565    set_bounds 1.6535    solve 6.7162    add 0.1036    
Accumulated time: pickout 4.5553    decision 26.8147    set_bounds 29.0943    solve 81.0961    add 1.7503    
Current (lb-rhs): -0.06813812255859375
438632 domains visited
Cumulative time: 168.76654934883118

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1193] [/input, 885] [/input, 964] [/input, 885] [/input, 964] [/input, 2936] [/input-8, 1769] [/input, 885] [/input-8, 1769] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06531381607055664
10 lb beta sum: 0.0038294389378279448, worst -0.06528759002685547
Time: prepare 0.9489    bound 3.6203    transfer 0.2050    finalize 0.2792    func 5.2631    
Accumulated time: func 86.4609    prepare 14.8178    bound 54.7511    transfer 2.5595    finalize 8.0002    
all_split False
======================Cut inference begins======================
max lb tensor(0.01870310) min lb tensor(-0.06526899)
Number of Verified Splits: 3608 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0016133785247802734 
BICCOS Cumulative time: 23.74404501914978
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06639 (25), -0.06592 (25), -0.06549 (25), -0.06530 (25), -0.06527 (26), -0.06522 (25), -0.06460 (26), -0.06418 (25), -0.06397 (25), -0.06371 (25), -0.06345 (25), -0.06328 (25), -0.06312 (25), -0.06309 (26), -0.06309 (25), -0.06304 (25), -0.06296 (25), -0.06287 (25), -0.06286 (26), -0.06282 (25), 
Length of domains: 202914
Time: pickout 0.3078    decision 1.6649    set_bounds 1.7024    solve 5.2713    add 0.1061    
Accumulated time: pickout 4.8631    decision 28.4796    set_bounds 30.7966    solve 86.3674    add 1.8564    
Current (lb-rhs): -0.06638598442077637
467792 domains visited
Cumulative time: 177.9193196296692

BaB round 27
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2006] [/input, 2936] [/input-8, 2006] [/input, 2936] [/input, 948] [/input-8, 1193] [/input, 948] [/input, 964] [/input, 871] [/input, 2968] 
cut re-enabled after branching node selection
0 lb beta sum: 0.004445664118975401, worst -0.06308412551879883
10 lb beta sum: 0.005256609059870243, worst -0.06476660072803497
Time: prepare 1.6482    bound 3.6216    transfer 0.2241    finalize 0.2849    func 5.9903    
Accumulated time: func 92.4512    prepare 16.4664    bound 58.3726    transfer 2.7836    finalize 8.2851    
all_split False
======================Cut inference begins======================
max lb tensor(0.01793909) min lb tensor(-0.06306148)
Number of Verified Splits: 3214 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0016384124755859375 
BICCOS Cumulative time: 23.745683431625366
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06639 (25), -0.06549 (25), -0.06530 (25), -0.06527 (26), -0.06522 (25), -0.06460 (26), -0.06418 (25), -0.06397 (25), -0.06371 (25), -0.06345 (25), -0.06328 (25), -0.06312 (25), -0.06309 (26), -0.06309 (25), -0.06306 (26), -0.06304 (25), -0.06296 (25), -0.06287 (25), -0.06286 (26), -0.06282 (25), 
Length of domains: 216084
Time: pickout 0.3110    decision 2.9960    set_bounds 1.6446    solve 6.0000    add 0.1133    
Accumulated time: pickout 5.1741    decision 31.4756    set_bounds 32.4412    solve 92.3674    add 1.9697    
Current (lb-rhs): -0.06638598442077637
497346 domains visited
Cumulative time: 189.1047146320343

BaB round 28
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 901] [/input-8, 1193] [/input-8, 1769] [/input-8, 1193] [/input-8, 1193] [/input-8, 1193] [/input-8, 1193] [/input-8, 1193] [/input-8, 1193] [/input, 964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.004299139603972435, worst -0.06356501579284668
10 lb beta sum: 0.004767805337905884, worst -0.06354331970214844
Time: prepare 1.7038    bound 3.6218    transfer 0.2288    finalize 2.0405    func 7.8054    
Accumulated time: func 100.2566    prepare 18.1707    bound 61.9945    transfer 3.0124    finalize 10.3256    
all_split False
======================Cut inference begins======================
max lb tensor(0.01934004) min lb tensor(-0.06352234)
Number of Verified Splits: 3395 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 563.
#cuts 1-3: 11
#cuts 4-6: 101
#cuts 7-9: 304
#cuts 10-12: 147
#cuts >= 20: 0
BICCOS time: 0.0011937618255615234 
BICCOS Cumulative time: 23.746877193450928
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06549 (25), -0.06527 (26), -0.06460 (26), -0.06397 (25), -0.06371 (25), -0.06352 (26), -0.06345 (25), -0.06312 (25), -0.06309 (26), -0.06306 (26), -0.06286 (26), -0.06285 (26), -0.06266 (25), -0.06263 (25), -0.06244 (26), -0.06241 (26), -0.06240 (26), -0.06238 (25), -0.06235 (26), -0.06222 (25), 
Length of domains: 229073
Time: pickout 0.3112    decision 1.6529    set_bounds 1.6615    solve 7.8130    add 0.1096    
Accumulated time: pickout 5.4853    decision 33.1285    set_bounds 34.1027    solve 100.1804    add 2.0793    
Current (lb-rhs): -0.0654900074005127
526719 domains visited
Time out!!!!!!!!
Result: unknown in 204.0206 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 815] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 815] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.40899777, -1.25210905, -1.71174979, -1.47050464, -0.92382908,
         -2.03374100, -0.67183781,  0.06250238, -1.59028673]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960],
         [-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.44213295,  1.06621361, -0.14937782,  0.05484581,  0.16149712,
          -0.55429077,  1.01409149,  0.67378044]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0907 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.75207901, -26.19200516, -21.51674461, -21.03239250, -21.79173470,
         -19.86995125, -22.43434525, -21.71803665, -25.64961243, -25.42793655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [834]; unstable size 834; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 834] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 834] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 834] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.31165743, 4.29574823, 0.41222423, 0.84093678, 0.84679627, 1.26739883,
         0.78366590, 3.96632433, 3.82774282]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [739]; unstable size 739; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 739] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 739] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 739] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 295] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56572270,  0.72621620, -1.85110521, -0.71412635, -0.72852230,
         -0.07062465,  0.71391797, -0.96604133,  0.12609529]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080],
         [-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.90642357, -1.01551914,  0.16205025,  0.25405121,  0.88140678,
           0.71677780]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0781 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.80888367, -17.65867996, -15.04872608, -14.86061478, -14.44957924,
         -15.80550385, -12.51641083, -16.93015480, -17.87636757, -16.77168083]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 527] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 527] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 299] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.97510839, 3.01688457, 0.83104944, 0.91215885, 0.13671160, 1.58025634,
         1.78175306, 2.71599007, 2.04945326]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0467 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 616] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 616] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 263] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55854058, -0.58301997, -0.01108980,  0.84704232,  0.37303150,
          1.41230488,  1.42802894, -0.66239893,  1.97629523]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.55933762, -22.55691528, -19.05906868, -19.80771828, -20.68400002,
          -20.36371231, -21.27793312, -21.47817230, -18.53498459, -21.80866051],
         [-18.55933762, -22.55691528, -19.05906868, -19.80771828, -20.68400002,
          -20.36371231, -21.27793312, -21.47817230, -18.53498459, -21.80866051]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.49973106,  1.24838066, -0.02435303]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0406 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.20258904, -28.97587204, -21.97974777, -26.12151527, -22.80328751,
         -24.79159355, -26.35929489, -25.88696289, -29.32278824, -27.97410202]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 81, 1, 659] with unstable size 80 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 659] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [80]; unstable size 80; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 80] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 80] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.61785388, 5.97946167, 3.68134046, 0.37307763, 2.26610613, 3.72874069,
         3.38983059, 6.45273113, 5.22464943]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0328 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 521] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 521] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 193] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86727262,  3.52099228, -0.37071085,  2.10049105,  2.35707164,
          2.03269410,  1.03111470,  1.52145696,  3.31146622]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.59311104, -25.98283386, -20.80554199, -23.80249596, -20.90235329,
          -24.19322205, -23.63773346, -22.69346428, -23.59370041, -25.37232018]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.09681129]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0442 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [620]; unstable size 620; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 620] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 620] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 620] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 180] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.75783086,  7.53109550, -0.86600566,  3.01546717,  1.56956530,
          3.31403446,  1.72679353,  7.39529657,  6.39896250]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.96817017, -27.31116486, -18.08074570, -21.85573387, -18.09226227,
          -20.52867126, -22.39926720, -20.45345879, -26.61774445, -25.83756828]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01151657]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0040 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0512 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.76115799, -29.22484970, -26.75863647, -27.30132103, -27.79590416,
         -27.84509468, -25.49637985, -28.66069603, -31.11473465, -27.50533867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [617]; unstable size 617; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 617] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 617] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 617] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.97265577, 2.28189492, 0.24724352, 0.96132326, 1.16451335, 1.43096864,
         1.79910481, 3.81141281, 0.72075999]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0419 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [854]; unstable size 854; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 854] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 854] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 854] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 206] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99029899,  0.58493596,  2.75045776,  0.33922231,  3.42682862,
          3.47799635,  2.48519111, -0.45412537,  3.58810258]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.35it/s]100%|██████████| 1/1 [00:00<00:00,  9.34it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.21707344, -26.20688248, -23.75342369, -25.93466568, -23.61607170,
          -26.77052689, -27.00837326, -26.42004776, -22.24679565, -26.81797409]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02972221]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1094 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.763309478759766
alpha/beta optimization time: 1.1853935718536377
initial alpha-crown bounds: tensor([[ 3.05976820,  0.63149047,  2.80625153,  0.39776456,  3.48817921,
          3.54835081,  2.58086824, -0.39641100,  3.64704752]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3964110016822815
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6620876789093
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.66205191612244
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.66202092170715
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.66200065612793
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.66198253631592
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.66196417808533
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.66194605827332
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.6619257926941
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39641100]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
        -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39641100]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 854
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 201
Node /15 input 0: size torch.Size([100]) unstable 25
-----------------
# of unstable neurons: 1080
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010943412780761719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3964104950428009
10 lb beta sum: 0.0, worst -0.39641308784484863
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 92] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 0] 
split level 4: [/input-12, 20] 
split level 5: [/input-8, 819] 
split level 6: [/input-8, 817] 
split level 7: [/input-8, 818] 
split level 8: [/input-12, 83] 
split level 9: [/input-8, 443] 
split level 10: [/input-8, 1334] 
split level 11: [/input-8, 500] 
split level 12: [/input-8, 444] 
split level 13: [/input-8, 1196] 
split level 14: [/input-8, 1715] 
split level 15: [/input-12, 42] 
split level 16: [/input-8, 497] 
split level 17: [/input-12, 64] 
split level 18: [/input-8, 499] 
split level 19: [/input-8, 1650] 
split level 20: [/input-8, 1169] 
split level 21: [/input-8, 1515] 
split level 22: [/input-8, 442] 
split level 23: [/input-8, 1114] 
split level 24: [/input-8, 1612] 
split level 25: [/input-8, 1065] 
split level 26: [/input-8, 1660] 
split level 27: [/input, 2938] 
split level 28: [/input-8, 1399] 
split level 29: [/input-8, 1619] 
split level 30: [/input-8, 1324] 
split level 31: [/input-8, 157] 
split level 32: [/input-8, 498] 
split level 33: [/input-8, 1611] 
split level 34: [/input-8, 1661] 
split level 35: [/input-8, 748] 
split level 36: [/input-8, 1134] 
split level 37: [/input-8, 1613] 
split level 38: [/input, 873] 
split level 39: [/input, 2781] 
split level 40: [/input-8, 747] 
split level 41: [/input-8, 338] 
split level 42: [/input-12, 43] 
split level 43: [/input-8, 1516] 
split level 44: [/input-8, 1662] 
split level 45: [/input-12, 59] 
split level 46: [/input-8, 1646] 
split level 47: [/input-8, 1322] 
split level 48: [/input-8, 749] 
split level 49: [/input-8, 1653] 
split level 50: [/input-8, 1654] 
split level 51: [/input-8, 793] 
split level 52: [/input-8, 1618] 
split level 53: [/input-8, 1768] 
split level 54: [/input-8, 1174] 
split level 55: [/input-8, 1610] 
split level 56: [/input-8, 403] 
split level 57: [/input, 889] 
split level 58: [/input-8, 404] 
split level 59: [/input, 857] 
split level 60: [/input-8, 154] 
split level 61: [/input-8, 1071] 
split level 62: [/input-8, 1172] 
split level 63: [/input, 872] 
split level 64: [/input, 665] 
split level 65: [/input-8, 794] 
split level 66: [/input, 974] 
split level 67: [/input, 651] 
split level 68: [/input, 3549] 
split level 69: [/input, 3521] 
split level 70: [/input, 667] 
split level 71: [/input, 680] 
split level 72: [/input-8, 406] 
split level 73: [/input, 361] 
split level 74: [/input-8, 68] 
split level 75: [/input, 3221] 
split level 76: [/input-8, 1549] 
split level 77: [/input, 2766] 
split level 78: [/input-8, 105] 
split level 79: [/input, 946] 
split level 80: [/input, 2779] 
split level 81: [/input-8, 2022] 
split level 82: [/input, 332] 
split level 83: [/input, 434] 
split level 84: [/input-8, 21] 
split level 85: [/input-8, 69] 
split level 86: [/input-8, 1161] 
split level 87: [/input-8, 429] 
split level 88: [/input, 844] 
split level 89: [/input, 165] 
split level 90: [/input, 345] 
split level 91: [/input-8, 1231] 
split level 92: [/input-8, 1265] 
split level 93: [/input-8, 475] 
split level 94: [/input-8, 441] 
split level 95: [/input, 930] 
split level 96: [/input, 2747] 
split level 97: [/input, 2760] 
split level 98: [/input-8, 167] 
split level 99: [/input, 871] 
split level 100: [/input-8, 476] 
split level 101: [/input, 2663] 
split level 102: [/input, 3414] 
split level 103: [/input, 3288] 
split level 104: [/input, 2778] 
split level 105: [/input, 316] 
split level 106: [/input, 957] 
split level 107: [/input-8, 331] 
split level 108: [/input, 2877] 
split level 109: [/input-8, 1617] 
split level 110: [/input-8, 1341] 
split level 111: [/input-8, 1924] 
split level 112: [/input-8, 1342] 
split level 113: [/input, 990] 
split level 114: [/input, 855] 
split level 115: [/input, 3192] 
split level 116: [/input, 225] 
split level 117: [/input-8, 1609] 
split level 118: [/input, 3031] 
split level 119: [/input-8, 1614] 
split level 120: [/input, 331] 
split level 121: [/input-8, 410] 
split level 122: [/input, 3975] 
split level 123: [/input, 381] 
split level 124: [/input-8, 401] 
split level 125: [/input-8, 402] 
split level 126: [/input, 1511] 
split level 127: [/input, 3041] 
split level 128: [/input-8, 468] 
split level 129: [/input, 3418] 
split level 130: [/input, 1134] 
split level 131: [/input, 3043] 
split level 132: [/input, 1510] 
split level 133: [/input, 226] 
split level 134: [/input, 962] 
split level 135: [/input-8, 1375] 
split level 136: [/input, 3459] 
split level 137: [/input, 683] 
split level 138: [/input-8, 488] 
split level 139: [/input, 2136] 
split level 140: [/input, 3030] 
split level 141: [/input, 843] 
split level 142: [/input-8, 1783] 
split level 143: [/input-8, 973] 
split level 144: [/input, 403] 
split level 145: [/input, 840] 
split level 146: [/input, 1509] 
split level 147: [/input, 2664] 
split level 148: [/input, 2424] 
split level 149: [/input, 841] 
split level 150: [/input, 1719] 
split level 151: [/input-8, 953] 
split level 152: [/input, 3042] 
split level 153: [/input-8, 1520] 
split level 154: [/input-8, 70] 
split level 155: [/input, 317] 
split level 156: [/input, 899] 
split level 157: [/input, 3548] 
split level 158: [/input, 2393] 
split level 159: [/input, 3246] 
split level 160: [/input, 1216] 
split level 161: [/input, 376] 
split level 162: [/input, 224] 
split level 163: [/input-8, 1925] 
split level 164: [/input, 3457] 
split level 165: [/input, 1492] 
split level 166: [/input, 2391] 
split level 167: [/input, 1006] 
split level 168: [/input, 2409] 
split level 169: [/input, 300] 
split level 170: [/input, 3443] 
split level 171: [/input, 3111] 
split level 172: [/input, 122] 
split level 173: [/input, 1021] 
split level 174: [/input, 3099] 
split level 175: [/input-8, 990] 
split level 176: [/input, 1017] 
split level 177: [/input, 2392] 
split level 178: [/input, 979] 
split level 179: [/input, 2137] 
split level 180: [/input, 1512] 
split level 181: [/input, 1514] 
split level 182: [/input, 975] 
split level 183: [/input, 3114] 
split level 184: [/input-8, 1547] 
split level 185: [/input, 2135] 
split level 186: [/input, 329] 
split level 187: [/input, 568] 
split level 188: [/input, 357] 
split level 189: [/input, 218] 
split level 190: [/input, 341] 
split level 191: [/input, 3419] 
split level 192: [/input, 2152] 
split level 193: [/input, 333] 
split level 194: [/input, 3441] 
split level 195: [/input, 1099] 
split level 196: [/input, 1513] 
split level 197: [/input, 3113] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1519] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3963732123374939
10 lb beta sum: 0.0, worst -0.39636969566345215
Time: prepare 0.0114    bound 0.0948    transfer 0.0027    finalize 0.0029    func 0.1144    
Accumulated time: func 0.1667    prepare 0.0216    bound 0.1467    transfer 0.0028    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.07017159) min lb tensor(-0.39636737)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010355710983276367 
BICCOS Cumulative time: 0.010355710983276367
Preprocessing time: 0.009926319122314453 Inference time: 0.0001418590545654297 Add cuts time: 7.128715515136719e-05 Cut analysis time: 0.0002162456512451172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38675 (1), -0.38674 (1), -0.38656 (1), -0.38642 (1), -0.38626 (1), -0.38588 (1), -0.38583 (1), -0.38573 (1), -0.38354 (1), -0.38254 (1), -0.38204 (1), -0.37946 (1), -0.37930 (1), -0.37873 (1), -0.37843 (1), -0.37808 (1), -0.37797 (1), -0.37730 (1), -0.37708 (1), -0.37684 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5106    set_bounds 0.0086    solve 0.1145    add 0.0685    
Accumulated time: pickout 0.0003    decision 0.5106    set_bounds 0.0086    solve 0.1145    add 0.0685    
Current (lb-rhs): -0.3867533206939697
50 domains visited
Cumulative time: 0.77028489112854

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37260422110557556
10 lb beta sum: 0.580084502696991, worst -0.3685382604598999
Time: prepare 0.0072    bound 0.1151    transfer 0.0008    finalize 0.0024    func 0.1281    
Accumulated time: func 0.2948    prepare 0.0290    bound 0.2618    transfer 0.0036    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.14343345) min lb tensor(-0.36848322)
Number of Verified Splits: 16 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01415705680847168 
BICCOS Cumulative time: 0.024512767791748047
Preprocessing time: 0.013000011444091797 Inference time: 0.0006794929504394531 Add cuts time: 0.0002467632293701172 Cut analysis time: 0.0002307891845703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23975 (2), -0.23949 (2), -0.23885 (2), -0.23773 (2), -0.23733 (2), -0.23706 (2), -0.23682 (2), -0.23628 (2), -0.23563 (2), -0.23549 (2), -0.23546 (2), -0.23546 (2), -0.23510 (2), -0.23344 (2), -0.23259 (2), -0.23241 (2), -0.23231 (2), -0.23210 (2), -0.23201 (2), -0.22929 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0209    set_bounds 0.0126    solve 0.1282    add 0.0779    
Accumulated time: pickout 0.0013    decision 0.5315    set_bounds 0.0212    solve 0.2427    add 0.1464    
Current (lb-rhs): -0.239752858877182
100 domains visited
Cumulative time: 1.0259792804718018

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 92] [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-8, 819] [/input-12, 0] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23940828442573547
10 lb beta sum: 0.7652418613433838, worst -0.23561033606529236
Time: prepare 0.0071    bound 0.1144    transfer 0.0008    finalize 0.0022    func 0.1271    
Accumulated time: func 0.4220    prepare 0.0364    bound 0.3761    transfer 0.0044    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.48864233) min lb tensor(-0.23514110)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.015456438064575195 
BICCOS Cumulative time: 0.03996920585632324
Preprocessing time: 0.011568784713745117 Inference time: 0.0020847320556640625 Add cuts time: 0.0015265941619873047 Cut analysis time: 0.00027632713317871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12185 (3), -0.11956 (3), -0.11954 (3), -0.11928 (3), -0.11908 (3), -0.11856 (3), -0.11796 (3), -0.11623 (3), -0.11411 (3), -0.11286 (3), -0.11168 (3), -0.11166 (3), -0.10858 (3), -0.10600 (3), -0.10471 (3), -0.10435 (3), -0.10281 (3), -0.10101 (3), -0.10089 (3), -0.09646 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0146    solve 0.1272    add 0.0857    
Accumulated time: pickout 0.0023    decision 0.5508    set_bounds 0.0358    solve 0.3699    add 0.2321    
Current (lb-rhs): -0.12185269594192505
150 domains visited
Cumulative time: 1.2895681858062744

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 92] [/input-8, 818] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-8, 818] 
split level 2: [/input-8, 819] [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 1322] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 500] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 1516] [/input-8, 500] [/input-8, 21] [/input-8, 500] [/input-8, 500] [/input-8, 1058] [/input-8, 1058] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12624168395996094
10 lb beta sum: 0.7355115413665771, worst -0.12132571637630463
Time: prepare 0.0075    bound 0.1155    transfer 0.0008    finalize 0.0029    func 0.1292    
Accumulated time: func 0.5512    prepare 0.0442    bound 0.4917    transfer 0.0052    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.50553274) min lb tensor(-0.11840300)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.017792463302612305 
BICCOS Cumulative time: 0.05776166915893555
Preprocessing time: 0.011464834213256836 Inference time: 0.004060983657836914 Add cuts time: 0.001821756362915039 Cut analysis time: 0.0004448890686035156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04699 (4), -0.04657 (4), -0.04620 (4), -0.04620 (4), -0.04556 (4), -0.04552 (4), -0.04474 (4), -0.04468 (4), -0.04451 (4), -0.04412 (4), -0.04400 (4), -0.04397 (4), -0.04390 (4), -0.04381 (4), -0.04307 (4), -0.04196 (4), -0.04161 (4), -0.03982 (4), -0.03943 (4), -0.03941 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0136    solve 0.1293    add 0.0934    
Accumulated time: pickout 0.0033    decision 0.5700    set_bounds 0.0494    solve 0.4992    add 0.3255    
Current (lb-rhs): -0.04698824882507324
200 domains visited
Cumulative time: 1.5641798973083496

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-12, 0] 
split level 2: [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 818] 
split level 3: [/input-8, 500] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05164909362792969
10 lb beta sum: 0.6671127676963806, worst -0.10890469700098038
Time: prepare 0.0079    bound 0.1309    transfer 0.0008    finalize 0.0025    func 0.1446    
Accumulated time: func 0.6958    prepare 0.0524    bound 0.6225    transfer 0.0059    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.04273123) min lb tensor(-0.04520279)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.024261474609375 
BICCOS Cumulative time: 0.08202314376831055
Preprocessing time: 0.01300954818725586 Inference time: 0.007742881774902344 Add cuts time: 0.0025713443756103516 Cut analysis time: 0.0009377002716064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00684 (5), -0.00681 (5), -0.00653 (5), -0.00651 (5), -0.00651 (5), -0.00634 (5), -0.00632 (5), -0.00591 (5), -0.00562 (5), -0.00542 (5), -0.00539 (5), -0.00530 (5), -0.00487 (5), -0.00487 (5), -0.00470 (5), -0.00467 (5), -0.00448 (5), -0.00437 (5), -0.00412 (5), -0.00409 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0151    solve 0.1447    add 0.2400    
Accumulated time: pickout 0.0043    decision 0.5895    set_bounds 0.0646    solve 0.6439    add 0.5655    
Current (lb-rhs): -0.00683725718408823
250 domains visited
Cumulative time: 2.009207010269165

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64]), tensor([-1.]), tensor([0]), tensor([4.09042968e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.023346470668911934], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.37509629e-01, 7.51475543e-02, 2.73028482e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.023346470668911934], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.37509629e-01, 7.51475543e-02, 5.65233678e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.019518660381436348], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.37509629e-01, 7.51475543e-02, 2.76324023e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.019518660381436348], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.37509629e-01, 7.51475543e-02, 5.60155958e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.37509629e-01, 3.57286185e-02, 5.22928080e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.37509629e-01, 3.57286185e-02, 4.99588013e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.017362164333462715], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.16706237e-01, 1.03368625e-01, 2.65603531e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.017362164333462715], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.16706237e-01, 1.03368625e-01, 4.78340536e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.014234708622097969], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.16706237e-01, 1.03368625e-01, 2.77573932e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.014234708622097969], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.72408804e-10, 1.16706237e-01, 1.03368625e-01, 4.83036488e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36, 24]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.72408804e-10, 1.16706237e-01, 3.52588147e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3935965597629547
10 lb beta sum: 0.8473874926567078, worst -0.38535815477371216
Time: prepare 0.0006    bound 0.1267    transfer 0.0002    finalize 0.0002    func 0.1278    
Accumulated time: func 0.8236    prepare 0.0529    bound 0.7493    transfer 0.0061    finalize 0.0132    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 2: [/input-12, 24] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 819] 
split level 3: [/input-12, 0] [/input, 2938] [/input, 2938] [/input-8, 1334] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] 
split level 4: [/input-8, 818] [/input-8, 1058] [/input-8, 1058] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 1334] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8528068661689758, worst -0.1948767751455307
10 lb beta sum: 0.8533709645271301, worst -0.19418102502822876
Time: prepare 0.0101    bound 0.1275    transfer 0.0008    finalize 0.0015    func 0.1414    
Accumulated time: func 0.9650    prepare 0.0634    bound 0.8768    transfer 0.0070    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.27959794) min lb tensor(-0.19391936)
Number of Verified Splits: 188 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8404695987701416, worst -0.29539012908935547
10 lb beta sum: 0.9460479617118835, worst -0.22012490034103394
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 4
#cuts 4-6: 22
#cuts 7-9: 8
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2597475051879883 
BICCOS Cumulative time: 0.34177064895629883
Preprocessing time: 0.006421327590942383 Inference time: 0.24582171440124512 Add cuts time: 0.0059664249420166016 Cut analysis time: 0.0015380382537841797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19392 (5), -0.19245 (5), -0.17419 (5), -0.17049 (5), -0.15550 (5), -0.15311 (5), -0.14802 (5), -0.14683 (5), -0.13814 (5), -0.13502 (5), -0.11640 (5), -0.11215 (5), -0.06620 (5), -0.06600 (5), -0.05980 (5), -0.05739 (5), -0.05457 (5), -0.05438 (5), -0.04365 (5), -0.04237 (5), 
Length of domains: 36
Time: pickout 0.0006    decision 0.0157    set_bounds 0.0219    solve 0.1415    add 0.0010    
Accumulated time: pickout 0.0050    decision 0.6052    set_bounds 0.0864    solve 0.7854    add 0.5666    
Current (lb-rhs): -0.1939193606376648
286 domains visited
Cumulative time: 2.6052536964416504

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 500] [/input-8, 500] [/input-8, 817] [/input-8, 817] [/input-8, 819] [/input-8, 819] [/input-8, 817] [/input-8, 817] [/input-8, 819] 
split level 1: [/input-8, 500] [/input, 2938] [/input-8, 157] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
split level 2: [/input-8, 157] [/input-8, 1058] [/input-8, 1662] [/input-8, 1516] [/input-8, 1516] [/input, 2938] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18394750356674194
10 lb beta sum: 0.4658515751361847, worst -0.17968839406967163
Time: prepare 0.0063    bound 0.1426    transfer 0.0018    finalize 0.0017    func 0.1541    
Accumulated time: func 1.1192    prepare 0.0698    bound 1.0194    transfer 0.0087    finalize 0.0163    
all_split False
======================Cut inference begins======================
max lb tensor(0.03252482) min lb tensor(-0.17953826)
Number of Verified Splits: 98 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.019223690032958984 
BICCOS Cumulative time: 0.3609943389892578
Preprocessing time: 0.008329391479492188 Inference time: 0.008030176162719727 Add cuts time: 0.0024263858795166016 Cut analysis time: 0.00043773651123046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17954 (8), -0.17825 (8), -0.16862 (8), -0.16623 (8), -0.16403 (8), -0.16307 (8), -0.15937 (8), -0.15536 (8), -0.15380 (8), -0.15130 (8), -0.14883 (8), -0.14847 (8), -0.14610 (8), -0.14610 (8), -0.14394 (8), -0.13967 (8), -0.13816 (8), -0.13788 (8), -0.13724 (8), -0.13640 (8), 
Length of domains: 190
Time: pickout 0.0017    decision 0.0131    set_bounds 0.0163    solve 0.1542    add 0.0015    
Accumulated time: pickout 0.0067    decision 0.6183    set_bounds 0.1028    solve 0.9396    add 0.5680    
Current (lb-rhs): -0.17953826487064362
476 domains visited
Cumulative time: 2.8120696544647217

BaB round 3
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2938] [/input-8, 1399] [/input-8, 1065] [/input-12, 20] [/input-8, 817] [/input-8, 817] [/input-8, 1065] [/input-8, 1334] [/input-8, 1334] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18100550770759583
10 lb beta sum: 0.5536284446716309, worst -0.17940554022789001
Time: prepare 0.0085    bound 0.1292    transfer 0.0012    finalize 0.0031    func 0.1443    
Accumulated time: func 1.2635    prepare 0.0785    bound 1.1486    transfer 0.0099    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.72082496) min lb tensor(-0.17933774)
Number of Verified Splits: 214 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.033153533935546875 
BICCOS Cumulative time: 0.3941478729248047
Preprocessing time: 0.010908365249633789 Inference time: 0.019245147705078125 Add cuts time: 0.0026149749755859375 Cut analysis time: 0.00038504600524902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17934 (9), -0.17808 (9), -0.16793 (9), -0.16554 (9), -0.16308 (9), -0.16206 (9), -0.15522 (9), -0.15268 (9), -0.15110 (9), -0.14998 (9), -0.14433 (9), -0.14387 (9), -0.14346 (9), -0.14140 (9), -0.13938 (9), -0.13538 (9), -0.13394 (9), -0.13366 (9), -0.13356 (9), -0.13249 (9), 
Length of domains: 166
Time: pickout 0.0030    decision 0.0220    set_bounds 0.0159    solve 0.1444    add 0.0014    
Accumulated time: pickout 0.0097    decision 0.6403    set_bounds 0.1186    solve 1.0840    add 0.5694    
Current (lb-rhs): -0.179337739944458
642 domains visited
Cumulative time: 3.033486843109131

BaB round 4
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1334] [/input-8, 1334] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] [/input-8, 1334] [/input-8, 1334] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17684528231620789
10 lb beta sum: 1.3492196798324585, worst -0.16877993941307068
Time: prepare 0.0073    bound 0.1497    transfer 0.0016    finalize 0.0020    func 0.1628    
Accumulated time: func 1.4263    prepare 0.0860    bound 1.2983    transfer 0.0115    finalize 0.0214    
all_split False
======================Cut inference begins======================
max lb tensor(1.02578652) min lb tensor(-0.16873145)
Number of Verified Splits: 268 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03668665885925293 
BICCOS Cumulative time: 0.4308345317840576
Preprocessing time: 0.009774208068847656 Inference time: 0.023572206497192383 Add cuts time: 0.002956867218017578 Cut analysis time: 0.0003833770751953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16873 (10), -0.16788 (10), -0.15719 (10), -0.15519 (10), -0.15213 (10), -0.15133 (10), -0.14578 (10), -0.14177 (10), -0.14155 (10), -0.13930 (10), -0.13469 (10), -0.13418 (10), -0.13184 (10), -0.12984 (10), -0.12975 (10), -0.12853 (10), -0.12828 (10), -0.12690 (10), -0.12202 (10), -0.11908 (10), 
Length of domains: 64
Time: pickout 0.0029    decision 0.0203    set_bounds 0.0139    solve 0.1629    add 0.0011    
Accumulated time: pickout 0.0126    decision 0.6605    set_bounds 0.1325    solve 1.2470    add 0.5705    
Current (lb-rhs): -0.1687314510345459
706 domains visited
Cumulative time: 3.272648334503174

BaB round 5
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1516] [/input-8, 1661] [/input-8, 157] [/input-8, 1174] [/input-8, 157] [/input-8, 1174] [/input-8, 157] [/input-8, 1661] [/input-8, 157] 
split level 1: [/input-8, 1174] [/input-8, 157] [/input-8, 1174] [/input-8, 1516] [/input-8, 1661] [/input-8, 1516] [/input-8, 1661] [/input-8, 1516] [/input-8, 1174] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.325324296951294, worst -0.16505646705627441
10 lb beta sum: 1.3278803825378418, worst -0.16500914096832275
Time: prepare 0.0115    bound 0.1421    transfer 0.0011    finalize 0.0017    func 0.1581    
Accumulated time: func 1.5844    prepare 0.0977    bound 1.4404    transfer 0.0126    finalize 0.0231    
all_split False
======================Cut inference begins======================
max lb tensor(0.15885943) min lb tensor(-0.16498578)
Number of Verified Splits: 48 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.012703657150268555 
BICCOS Cumulative time: 0.44353818893432617
Preprocessing time: 0.0074656009674072266 Inference time: 0.004032611846923828 Add cuts time: 0.0004239082336425781 Cut analysis time: 0.0007815361022949219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16499 (12), -0.16455 (12), -0.16322 (12), -0.15958 (12), -0.15299 (12), -0.15178 (12), -0.15166 (12), -0.14818 (12), -0.14759 (12), -0.14688 (12), -0.14629 (12), -0.14570 (12), -0.14558 (12), -0.14169 (12), -0.14153 (12), -0.13752 (12), -0.13713 (12), -0.13582 (12), -0.13503 (12), -0.13447 (12), 
Length of domains: 208
Time: pickout 0.0019    decision 0.0144    set_bounds 0.0133    solve 0.1582    add 0.0013    
Accumulated time: pickout 0.0145    decision 0.6750    set_bounds 0.1458    solve 1.4051    add 0.5718    
Current (lb-rhs): -0.1649857759475708
914 domains visited
Cumulative time: 3.474977493286133

BaB round 6
batch: 208
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1662] [/input-8, 748] [/input-8, 1662] [/input-8, 817] [/input-8, 1662] [/input-8, 817] [/input-8, 1662] [/input-8, 748] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1666770577430725
10 lb beta sum: 1.267026662826538, worst -0.1645563542842865
Time: prepare 0.0090    bound 0.1486    transfer 0.0025    finalize 0.0023    func 0.1652    
Accumulated time: func 1.7496    prepare 0.1070    bound 1.5890    transfer 0.0151    finalize 0.0254    
all_split False
======================Cut inference begins======================
max lb tensor(0.84973651) min lb tensor(-0.16455157)
Number of Verified Splits: 129 of 416
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.026849985122680664 
BICCOS Cumulative time: 0.47038817405700684
Preprocessing time: 0.011932611465454102 Inference time: 0.013024330139160156 Add cuts time: 0.0015096664428710938 Cut analysis time: 0.0003833770751953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16455 (13), -0.16320 (13), -0.16200 (13), -0.16083 (13), -0.16065 (13), -0.15949 (13), -0.15779 (13), -0.14992 (13), -0.14958 (13), -0.14824 (13), -0.14763 (13), -0.14714 (13), -0.14629 (13), -0.14579 (13), -0.14564 (13), -0.14384 (13), -0.14251 (13), -0.14162 (13), -0.14147 (13), -0.13745 (13), 
Length of domains: 287
Time: pickout 0.0031    decision 0.0221    set_bounds 0.0178    solve 0.1653    add 0.0017    
Accumulated time: pickout 0.0176    decision 0.6971    set_bounds 0.1636    solve 1.5704    add 0.5736    
Current (lb-rhs): -0.16455157101154327
1201 domains visited
Cumulative time: 3.713158369064331

BaB round 7
batch: 287
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 1.482016921043396, worst -0.1609295755624771
10 lb beta sum: 1.4982621669769287, worst -0.16089372336864471
Time: prepare 0.0251    bound 0.1566    transfer 0.0010    finalize 0.0035    func 0.1906    
Accumulated time: func 1.9402    prepare 0.1323    bound 1.7456    transfer 0.0161    finalize 0.0290    
all_split False
======================Cut inference begins======================
max lb tensor(0.22853339) min lb tensor(-0.16088764)
Number of Verified Splits: 168 of 574
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.037497758865356445 
BICCOS Cumulative time: 0.5078859329223633
Preprocessing time: 0.016266584396362305 Inference time: 0.01928544044494629 Add cuts time: 0.0015757083892822266 Cut analysis time: 0.000370025634765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16089 (14), -0.15969 (14), -0.15955 (14), -0.15935 (14), -0.15896 (14), -0.15836 (14), -0.15801 (14), -0.15763 (14), -0.15560 (14), -0.15428 (14), -0.15359 (14), -0.15226 (14), -0.14986 (14), -0.14956 (14), -0.14851 (14), -0.14823 (14), -0.14700 (14), -0.14610 (14), -0.14567 (14), -0.14536 (14), 
Length of domains: 406
Time: pickout 0.0047    decision 0.0316    set_bounds 0.0250    solve 0.1908    add 0.0017    
Accumulated time: pickout 0.0223    decision 0.7287    set_bounds 0.1886    solve 1.7612    add 0.5752    
Current (lb-rhs): -0.16088764369487762
1607 domains visited
Cumulative time: 4.006213665008545

BaB round 8
batch: 406
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 889] [/input-8, 1516] [/input-12, 20] [/input-8, 1399] [/input, 2938] [/input-8, 747] [/input-8, 498] [/input-8, 1516] [/input-8, 748] [/input-8, 1399] 
cut re-enabled after branching node selection
0 lb beta sum: 1.44524347782135, worst -0.16083574295043945
10 lb beta sum: 1.8196600675582886, worst -0.15936028957366943
Time: prepare 0.0360    bound 0.1627    transfer 0.0033    finalize 0.0052    func 0.2125    
Accumulated time: func 2.1527    prepare 0.1684    bound 1.9083    transfer 0.0194    finalize 0.0342    
all_split False
======================Cut inference begins======================
max lb tensor(0.20745927) min lb tensor(-0.15935045)
Number of Verified Splits: 54 of 812
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03160572052001953 
BICCOS Cumulative time: 0.5394916534423828
Preprocessing time: 0.02310466766357422 Inference time: 0.006005048751831055 Add cuts time: 0.0007762908935546875 Cut analysis time: 0.0017197132110595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15935 (15), -0.15804 (15), -0.15801 (15), -0.15680 (15), -0.15670 (15), -0.15668 (15), -0.15605 (15), -0.15546 (15), -0.15534 (15), -0.15472 (15), -0.15358 (15), -0.15224 (15), -0.15183 (15), -0.15172 (15), -0.15102 (15), -0.15067 (15), -0.15050 (15), -0.15040 (15), -0.15036 (15), -0.14973 (15), 
Length of domains: 758
Time: pickout 0.0058    decision 0.0365    set_bounds 0.0345    solve 0.2127    add 0.0035    
Accumulated time: pickout 0.0282    decision 0.7652    set_bounds 0.2231    solve 1.9739    add 0.5787    
Current (lb-rhs): -0.1593504548072815
2365 domains visited
Cumulative time: 4.332080364227295

BaB round 9
batch: 758
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 20] [/input-8, 747] [/input-8, 748] [/input-8, 1324] [/input-8, 1399] [/input-8, 1399] [/input-8, 1324] [/input-8, 498] [/input-8, 748] [/input-8, 1134] 
cut re-enabled after branching node selection
0 lb beta sum: 1.902797818183899, worst -0.1562870740890503
10 lb beta sum: 1.9050638675689697, worst -0.15624308586120605
Time: prepare 0.0669    bound 0.1864    transfer 0.0059    finalize 0.0087    func 0.2778    
Accumulated time: func 2.4305    prepare 0.2356    bound 2.0947    transfer 0.0254    finalize 0.0429    
all_split False
======================Cut inference begins======================
max lb tensor(0.25654048) min lb tensor(-0.15621459)
Number of Verified Splits: 212 of 1516
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.07529497146606445 
BICCOS Cumulative time: 0.6147866249084473
Preprocessing time: 0.04570889472961426 Inference time: 0.027231931686401367 Add cuts time: 0.001947164535522461 Cut analysis time: 0.0004069805145263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15621 (16), -0.15527 (16), -0.15488 (16), -0.15399 (16), -0.15392 (16), -0.15365 (16), -0.15331 (16), -0.15263 (16), -0.15231 (16), -0.15200 (16), -0.15194 (16), -0.15073 (16), -0.15066 (16), -0.14944 (16), -0.14938 (16), -0.14896 (16), -0.14869 (16), -0.14817 (16), -0.14809 (16), -0.14770 (16), 
Length of domains: 1304
Time: pickout 0.0135    decision 0.0569    set_bounds 0.0637    solve 0.2782    add 0.0050    
Accumulated time: pickout 0.0417    decision 0.8222    set_bounds 0.2868    solve 2.2520    add 0.5837    
Current (lb-rhs): -0.15621459484100342
3669 domains visited
Cumulative time: 4.828568458557129

BaB round 10
batch: 1304
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input, 889] [/input-8, 1134] [/input-8, 1516] [/input-8, 748] [/input-8, 157] [/input-8, 1516] [/input, 889] [/input-8, 747] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8691184520721436, worst -0.15351176261901855
10 lb beta sum: 1.8707493543624878, worst -0.15350234508514404
Time: prepare 0.1168    bound 0.2744    transfer 0.0090    finalize 0.0148    func 0.4323    
Accumulated time: func 2.8628    prepare 0.3527    bound 2.3692    transfer 0.0343    finalize 0.0578    
all_split False
======================Cut inference begins======================
max lb tensor(0.27459610) min lb tensor(-0.15349191)
Number of Verified Splits: 226 of 2608
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.11351609230041504 
BICCOS Cumulative time: 0.7283027172088623
Preprocessing time: 0.08023619651794434 Inference time: 0.03013753890991211 Add cuts time: 0.002700328826904297 Cut analysis time: 0.0004420280456542969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15349 (17), -0.15213 (17), -0.15194 (17), -0.15093 (17), -0.15075 (17), -0.15065 (17), -0.15057 (17), -0.14963 (17), -0.14956 (17), -0.14945 (17), -0.14940 (17), -0.14930 (17), -0.14903 (17), -0.14857 (17), -0.14828 (17), -0.14813 (17), -0.14802 (17), -0.14767 (17), -0.14721 (17), -0.14718 (17), 
Length of domains: 2382
Time: pickout 0.0195    decision 0.2460    set_bounds 0.1086    solve 0.4332    add 0.0121    
Accumulated time: pickout 0.0612    decision 1.0681    set_bounds 0.3955    solve 2.6852    add 0.5958    
Current (lb-rhs): -0.15349191427230835
6051 domains visited
Cumulative time: 5.7669219970703125

BaB round 11
batch: 2382
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 747] [/input-8, 747] [/input-8, 794] [/input, 889] [/input, 2938] [/input-8, 794] [/input-8, 1174] [/input-8, 748] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.847342848777771, worst -0.1525670886039734
10 lb beta sum: 1.848441481590271, worst -0.15256989002227783
Time: prepare 0.3645    bound 0.4325    transfer 0.0238    finalize 0.0266    func 0.8784    
Accumulated time: func 3.7412    prepare 0.7175    bound 2.8017    transfer 0.0581    finalize 0.0844    
all_split False
======================Cut inference begins======================
max lb tensor(0.27655298) min lb tensor(-0.15256023)
Number of Verified Splits: 420 of 4764
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.21437954902648926 
BICCOS Cumulative time: 0.9426822662353516
Preprocessing time: 0.1487135887145996 Inference time: 0.05916285514831543 Add cuts time: 0.005995988845825195 Cut analysis time: 0.0005071163177490234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15256 (18), -0.15120 (18), -0.15010 (18), -0.14882 (18), -0.14875 (18), -0.14810 (18), -0.14788 (18), -0.14781 (18), -0.14777 (18), -0.14764 (18), -0.14746 (18), -0.14708 (18), -0.14699 (18), -0.14674 (18), -0.14664 (18), -0.14652 (18), -0.14646 (18), -0.14622 (18), -0.14589 (18), -0.14581 (18), 
Length of domains: 4344
Time: pickout 0.0357    decision 0.1460    set_bounds 0.1953    solve 0.8801    add 0.0222    
Accumulated time: pickout 0.0969    decision 1.2141    set_bounds 0.5907    solve 3.5653    add 0.6180    
Current (lb-rhs): -0.15256023406982422
10395 domains visited
Cumulative time: 7.269496202468872

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 1174] [/input-8, 748] [/input-8, 497] [/input-8, 1611] [/input-8, 748] [/input-8, 497] [/input-8, 1611] [/input-8, 498] [/input-8, 794] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8189136981964111, worst -0.1489158272743225
10 lb beta sum: 1.8193330764770508, worst -0.14888548851013184
Time: prepare 0.3880    bound 0.6818    transfer 0.0285    finalize 0.0440    func 1.1953    
Accumulated time: func 4.9365    prepare 1.1058    bound 3.4835    transfer 0.0866    finalize 0.1284    
all_split False
======================Cut inference begins======================
max lb tensor(0.28415573) min lb tensor(-0.14887995)
Number of Verified Splits: 805 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.3909733295440674 
BICCOS Cumulative time: 1.333655595779419
Preprocessing time: 0.2587571144104004 Inference time: 0.11938643455505371 Add cuts time: 0.012295246124267578 Cut analysis time: 0.0005345344543457031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14888 (19), -0.14862 (19), -0.14788 (18), -0.14781 (19), -0.14752 (19), -0.14735 (19), -0.14727 (19), -0.14684 (19), -0.14645 (19), -0.14636 (19), -0.14599 (19), -0.14581 (19), -0.14564 (18), -0.14551 (19), -0.14515 (19), -0.14500 (19), -0.14470 (18), -0.14468 (19), -0.14446 (19), -0.14423 (19), 
Length of domains: 7635
Time: pickout 0.0625    decision 0.2332    set_bounds 0.5165    solve 1.1977    add 0.0350    
Accumulated time: pickout 0.1594    decision 1.4473    set_bounds 1.1073    solve 4.7630    add 0.6529    
Current (lb-rhs): -0.14887994527816772
17782 domains visited
current_vram/total_varm: 30.4GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.723477125167847

BaB round 13
batch: 7635
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 498] [/input-8, 747] [/input-8, 498] [/input-8, 747] [/input-8, 748] [/input-8, 748] [/input-8, 1324] [/input-8, 748] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7953171730041504, worst -0.14706456661224365
10 lb beta sum: 1.7957242727279663, worst -0.1470646858215332
Time: prepare 0.7186    bound 1.2055    transfer 0.0736    finalize 0.0881    func 2.1848    
Accumulated time: func 7.1213    prepare 1.8247    bound 4.6890    transfer 0.1602    finalize 0.2165    
all_split False
======================Cut inference begins======================
max lb tensor(0.27108300) min lb tensor(-0.14705980)
Number of Verified Splits: 915 of 15270
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.9227776527404785 
BICCOS Cumulative time: 2.2564332485198975
Preprocessing time: 0.49121570587158203 Inference time: 0.41545987129211426 Add cuts time: 0.015605449676513672 Cut analysis time: 0.0004966259002685547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14706 (20), -0.14676 (20), -0.14604 (19), -0.14586 (20), -0.14570 (20), -0.14550 (20), -0.14541 (20), -0.14450 (20), -0.14448 (20), -0.14435 (20), -0.14414 (19), -0.14413 (20), -0.14397 (20), -0.14364 (20), -0.14327 (20), -0.14324 (19), -0.14318 (20), -0.14314 (20), -0.14298 (20), -0.14292 (19), 
Length of domains: 14355
Time: pickout 0.1411    decision 0.6213    set_bounds 0.9004    solve 2.1878    add 0.0402    
Accumulated time: pickout 0.3004    decision 2.0686    set_bounds 2.0077    solve 6.9508    add 0.6931    
Current (lb-rhs): -0.14705979824066162
32137 domains visited
Cumulative time: 14.561358451843262

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 748] [/input-8, 1654] [/input, 3549] [/input-8, 1654] [/input-8, 747] [/input-8, 747] [/input-8, 1654] [/input-8, 747] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7609052658081055, worst -0.1454668641090393
10 lb beta sum: 1.761164903640747, worst -0.14538484811782837
Time: prepare 0.7833    bound 1.2836    transfer 0.0753    finalize 0.1058    func 2.3539    
Accumulated time: func 9.4752    prepare 2.6083    bound 5.9726    transfer 0.2354    finalize 0.3223    
all_split False
======================Cut inference begins======================
max lb tensor(0.01959085) min lb tensor(-0.14536917)
Number of Verified Splits: 1176 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 1.1181609630584717 
BICCOS Cumulative time: 3.374594211578369
Preprocessing time: 0.5271933078765869 Inference time: 0.5635519027709961 Add cuts time: 0.02688765525817871 Cut analysis time: 0.0005280971527099609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14537 (21), -0.14435 (20), -0.14435 (20), -0.14435 (21), -0.14414 (21), -0.14400 (21), -0.14397 (20), -0.14318 (20), -0.14307 (21), -0.14298 (20), -0.14297 (21), -0.14278 (20), -0.14277 (21), -0.14261 (20), -0.14240 (20), -0.14228 (20), -0.14209 (21), -0.14168 (21), -0.14139 (20), -0.14138 (20), 
Length of domains: 21371
Time: pickout 0.1294    decision 0.4540    set_bounds 1.0287    solve 2.3576    add 0.0549    
Accumulated time: pickout 0.4298    decision 2.5226    set_bounds 3.0365    solve 9.3084    add 0.7480    
Current (lb-rhs): -0.14536917209625244
47345 domains visited
current_vram/total_varm: 30.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 19.73828101158142

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1516] [/input-8, 497] [/input-8, 1516] [/input-8, 1516] [/input-8, 1134] [/input-8, 1516] [/input-8, 498] [/input-8, 1516] [/input-8, 404] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7585184574127197, worst -0.14250338077545166
10 lb beta sum: 1.758653163909912, worst -0.14254313707351685
Time: prepare 1.5950    bound 2.4905    transfer 0.2009    finalize 0.5767    func 5.0728    
Accumulated time: func 14.5480    prepare 4.2036    bound 8.4632    transfer 0.4363    finalize 0.8990    
all_split False
======================Cut inference begins======================
max lb tensor(0.20392400) min lb tensor(-0.14249206)
Number of Verified Splits: 2340 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 2.0245795249938965 
BICCOS Cumulative time: 5.399173736572266
Preprocessing time: 1.4887499809265137 Inference time: 0.47748780250549316 Add cuts time: 0.057802438735961914 Cut analysis time: 0.0005393028259277344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14537 (21), -0.14435 (21), -0.14414 (21), -0.14400 (21), -0.14307 (21), -0.14297 (21), -0.14277 (21), -0.14249 (21), -0.14248 (21), -0.14228 (21), -0.14209 (21), -0.14168 (21), -0.14133 (21), -0.14122 (21), -0.14121 (20), -0.14112 (21), -0.14104 (21), -0.14097 (21), -0.14090 (21), -0.14083 (21), 
Length of domains: 35415
Time: pickout 0.2612    decision 1.6314    set_bounds 1.8131    solve 5.0792    add 0.1360    
Accumulated time: pickout 0.6910    decision 4.1541    set_bounds 4.8496    solve 14.3876    add 0.8840    
Current (lb-rhs): -0.14536917209625244
77773 domains visited
current_vram/total_varm: 41.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 30.753284692764282

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1516] [/input-8, 1661] [/input-8, 1134] [/input-8, 1610] [/input-8, 748] [/input-8, 404] [/input-8, 1134] [/input, 2938] [/input-8, 1134] [/input, 3549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7483606338500977, worst -0.14352118968963623
10 lb beta sum: 1.7485078573226929, worst -0.14351505041122437
Time: prepare 3.2065    bound 10.1039    transfer 0.5742    finalize 0.5164    func 15.4435    
Accumulated time: func 29.9915    prepare 7.4105    bound 18.5670    transfer 1.0105    finalize 1.4154    
all_split False
======================Cut inference begins======================
max lb tensor(0.20899385) min lb tensor(-0.14350629)
Number of Verified Splits: 5340 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 4.00885009765625 
BICCOS Cumulative time: 9.408023834228516
Preprocessing time: 2.1246297359466553 Inference time: 1.7575900554656982 Add cuts time: 0.12603092193603516 Cut analysis time: 0.0005993843078613281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14351 (22), -0.14226 (22), -0.14215 (22), -0.14138 (22), -0.14125 (22), -0.14087 (22), -0.14040 (22), -0.14007 (22), -0.14006 (22), -0.13992 (22), -0.13975 (22), -0.13970 (22), -0.13935 (21), -0.13932 (22), -0.13913 (22), -0.13912 (22), -0.13911 (22), -0.13905 (22), -0.13899 (22), -0.13869 (22), 
Length of domains: 62843
Time: pickout 0.5412    decision 3.3226    set_bounds 4.0570    solve 15.4547    add 0.2503    
Accumulated time: pickout 1.2322    decision 7.4767    set_bounds 8.9066    solve 29.8422    add 1.1343    
Current (lb-rhs): -0.14350628852844238
137969 domains visited
Cumulative time: 58.53761053085327

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 1662] [/input-8, 1134] [/input-8, 497] [/input-8, 1662] [/input-8, 1661] [/input-8, 1662] [/input-8, 1661] [/input-8, 748] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7223436832427979, worst -0.1411101222038269
10 lb beta sum: 1.7224111557006836, worst -0.1410982608795166
Time: prepare 3.9544    bound 10.1017    transfer 0.5533    finalize 0.5739    func 15.6228    
Accumulated time: func 45.6144    prepare 11.3654    bound 28.6687    transfer 1.5638    finalize 1.9892    
all_split False
======================Cut inference begins======================
max lb tensor(0.23157477) min lb tensor(-0.14109403)
Number of Verified Splits: 6830 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 4.592448711395264 
BICCOS Cumulative time: 14.00047254562378
Preprocessing time: 3.03849196434021 Inference time: 1.3766145706176758 Add cuts time: 0.17655205726623535 Cut analysis time: 0.0007901191711425781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14138 (22), -0.14125 (22), -0.14109 (23), -0.14007 (22), -0.14006 (22), -0.13981 (23), -0.13975 (22), -0.13972 (23), -0.13932 (22), -0.13912 (22), -0.13899 (22), -0.13869 (22), -0.13841 (23), -0.13810 (22), -0.13798 (23), -0.13796 (22), -0.13753 (23), -0.13740 (23), -0.13711 (22), -0.13710 (22), 
Length of domains: 88781
Time: pickout 0.5648    decision 3.3142    set_bounds 3.8137    solve 15.6390    add 0.2203    
Accumulated time: pickout 1.7970    decision 10.7909    set_bounds 12.7203    solve 45.4812    add 1.3547    
Current (lb-rhs): -0.1413804292678833
196675 domains visited
Cumulative time: 86.89359927177429

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3549] [/input-8, 498] [/input-8, 498] [/input-8, 498] [/input-8, 498] [/input-8, 498] [/input-8, 498] [/input-8, 498] [/input, 3221] [/input, 3221] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7334171533584595, worst -0.14045488834381104
10 lb beta sum: 1.7334671020507812, worst -0.14046072959899902
Time: prepare 3.2924    bound 10.1031    transfer 0.5711    finalize 0.5799    func 14.9852    
Accumulated time: func 60.5996    prepare 14.6582    bound 38.7718    transfer 2.1348    finalize 2.5691    
all_split False
======================Cut inference begins======================
max lb tensor(0.21318722) min lb tensor(-0.14044714)
Number of Verified Splits: 5994 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 4.772912979125977 
BICCOS Cumulative time: 18.773385524749756
Preprocessing time: 3.3780715465545654 Inference time: 1.2490379810333252 Add cuts time: 0.14517736434936523 Cut analysis time: 0.0006260871887207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14109 (23), -0.14045 (23), -0.13981 (23), -0.13972 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13841 (23), -0.13819 (23), -0.13798 (23), -0.13788 (23), -0.13776 (23), -0.13753 (23), -0.13740 (23), -0.13701 (23), -0.13697 (23), -0.13693 (22), -0.13682 (23), -0.13670 (23), -0.13669 (23), 
Length of domains: 115555
Time: pickout 0.5790    decision 3.8068    set_bounds 4.2900    solve 15.0016    add 0.2018    
Accumulated time: pickout 2.3760    decision 14.5977    set_bounds 17.0103    solve 60.4828    add 1.5565    
Current (lb-rhs): -0.14109402894973755
256217 domains visited
Cumulative time: 115.68541812896729

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1169] [/input-8, 1661] [/input-8, 476] [/input-8, 497] [/input-8, 497] [/input-8, 1662] [/input-8, 497] [/input-8, 1662] [/input, 1719] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6992286443710327, worst -0.1377999186515808
10 lb beta sum: 1.6992485523223877, worst -0.13778090476989746
Time: prepare 3.3665    bound 10.1023    transfer 0.5830    finalize 0.6333    func 16.4553    
Accumulated time: func 77.0549    prepare 18.0251    bound 48.8741    transfer 2.7178    finalize 3.2024    
all_split False
======================Cut inference begins======================
max lb tensor(0.23100346) min lb tensor(-0.13776577)
Number of Verified Splits: 7746 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 4.1234824657440186 
BICCOS Cumulative time: 22.896867990493774
Preprocessing time: 2.2069509029388428 Inference time: 1.55216383934021 Add cuts time: 0.3637826442718506 Cut analysis time: 0.0005850791931152344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14045 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13819 (23), -0.13798 (23), -0.13788 (23), -0.13777 (24), -0.13776 (23), -0.13701 (23), -0.13697 (23), -0.13670 (23), -0.13669 (23), -0.13661 (23), -0.13655 (24), -0.13647 (24), -0.13640 (23), -0.13639 (24), -0.13624 (23), -0.13599 (23), 
Length of domains: 140577
Time: pickout 0.5692    decision 3.3299    set_bounds 4.3899    solve 16.4690    add 0.2099    
Accumulated time: pickout 2.9452    decision 17.9276    set_bounds 21.4002    solve 76.9517    add 1.7664    
Current (lb-rhs): -0.14044713973999023
314007 domains visited
Cumulative time: 144.98117589950562

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1169] [/input, 3221] [/input, 3221] [/input, 3221] [/input, 3549] [/input, 3221] [/input, 3221] [/input, 889] [/input-8, 1169] [/input-8, 1169] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7126319408416748, worst -0.1360432505607605
10 lb beta sum: 1.712659239768982, worst -0.13605058193206787
Time: prepare 3.3527    bound 10.1056    transfer 0.5738    finalize 2.1993    func 16.6661    
Accumulated time: func 93.7210    prepare 21.3783    bound 58.9797    transfer 3.2916    finalize 5.4017    
all_split False
======================Cut inference begins======================
max lb tensor(0.20975631) min lb tensor(-0.13603437)
Number of Verified Splits: 7107 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 4.065900087356567 
BICCOS Cumulative time: 26.962768077850342
Preprocessing time: 2.310762643814087 Inference time: 1.4218471050262451 Add cuts time: 0.33258676528930664 Cut analysis time: 0.0007035732269287109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14045 (23), -0.13913 (23), -0.13896 (23), -0.13846 (23), -0.13819 (23), -0.13777 (24), -0.13776 (23), -0.13701 (23), -0.13670 (23), -0.13655 (24), -0.13647 (24), -0.13640 (23), -0.13639 (24), -0.13603 (24), -0.13599 (23), -0.13597 (24), -0.13564 (23), -0.13546 (24), -0.13530 (24), -0.13518 (24), 
Length of domains: 166238
Time: pickout 0.5972    decision 4.2703    set_bounds 3.2390    solve 16.6794    add 0.2260    
Accumulated time: pickout 3.5424    decision 22.1979    set_bounds 24.6392    solve 93.6311    add 1.9924    
Current (lb-rhs): -0.14044713973999023
372436 domains visited
Cumulative time: 174.25055027008057

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1654] [/input, 889] [/input-8, 1662] [/input-8, 1265] [/input-8, 1610] [/input-8, 1265] [/input-8, 1662] [/input-8, 1654] [/input, 889] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1396556794643402
10 lb beta sum: 0.9113718271255493, worst -0.13754144310951233
Time: prepare 1.8764    bound 10.1090    transfer 0.5818    finalize 2.4281    func 15.4230    
Accumulated time: func 109.1440    prepare 23.2550    bound 69.0887    transfer 3.8735    finalize 7.8298    
all_split False
======================Cut inference begins======================
max lb tensor(0.22769058) min lb tensor(-0.13752107)
Number of Verified Splits: 34962 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 14
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 8.875874519348145 
BICCOS Cumulative time: 35.838642597198486
Preprocessing time: 2.0643115043640137 Inference time: 5.975654602050781 Add cuts time: 0.8348495960235596 Cut analysis time: 0.001058816909790039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13913 (23), -0.13777 (24), -0.13752 (24), -0.13668 (24), -0.13655 (24), -0.13647 (24), -0.13639 (24), -0.13636 (24), -0.13614 (24), -0.13603 (24), -0.13599 (23), -0.13597 (24), -0.13552 (24), -0.13546 (24), -0.13533 (24), -0.13530 (24), -0.13518 (24), -0.13510 (24), -0.13509 (24), -0.13496 (24), 
Length of domains: 164044
Time: pickout 0.5848    decision 4.4944    set_bounds 3.2239    solve 15.4358    add 0.1333    
Accumulated time: pickout 4.1272    decision 26.6923    set_bounds 27.8631    solve 109.0669    add 2.1257    
Current (lb-rhs): -0.1391298770904541
403010 domains visited
Time out!!!!!!!!
Result: unknown in 210.6833 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 775] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 775] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 291] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07465273,  0.67120814, -0.69678187, -0.40189266,  0.40540999,
         -1.27040505,  0.91171980,  1.11740470,  0.40299392]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255],
         [-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.96428108,  0.72169495,  0.94250107, -0.05741501]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 639] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 639] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 277] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53353477,  4.77915478, -0.68763828,  0.12715673,  0.16958088,
          0.30826423,  0.61279374,  2.10399389,  3.39013553]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.71807671, -30.91207504, -23.73194122, -25.07842064, -23.86753273,
          -25.28093910, -25.23051643, -25.63899803, -27.60635185, -29.14414406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13559151]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0538 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 291, 1, 770] with unstable size 290 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 770] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [290]; unstable size 290; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 290] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 290] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78770638,  1.03243494,  1.96444643,  0.51057196,  1.33818662,
          1.22204268,  0.09967929,  0.93596268, -0.07644796]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.26it/s]100%|██████████| 1/1 [00:00<00:00,  9.25it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.28597832, -31.01292419, -31.50415421, -32.71194839, -31.25744820,
          -32.18006134, -32.28217316, -30.93283844, -31.51461792, -29.99298286]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.70700455]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1105 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 23th iter
best_l after optimization: 8.5050048828125
alpha/beta optimization time: 0.28619861602783203
initial alpha-crown bounds: tensor([[8.78652096e-01, 1.08035851e+00, 2.04135537e+00, 5.90096474e-01,
         1.42439294e+00, 1.30016005e+00, 2.00367272e-01, 9.89597440e-01,
         2.43186951e-05]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 2.4318695068359375e-05
verified with init bound!
Result: safe-incomplete in 0.4541 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 710] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 710] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 187] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.05221027,  3.04186773, -1.68551719, -1.26099968, -0.22333625,
          0.06938839,  0.46372607,  0.85233915,  2.67835522]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521],
         [-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81415749, -0.29938889,  0.10436249]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0518 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-45.55731201, -50.89083099, -42.06116486, -47.85534668, -48.62054062,
         -48.15819550, -49.32711411, -47.74969101, -49.46615982, -52.86323929]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [518]; unstable size 518; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 116, 1, 518] with unstable size 115 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 518] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 518] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [115]; unstable size 115; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 115] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 115] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.03216028, 7.96402073, 5.21769238, 5.94199753, 5.50237274, 6.70993805,
         5.09641886, 6.72968769, 9.94023323]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0314 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 770] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 770] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 149] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.97211456, -0.64362037,  1.92279077, -0.18267369,  2.60485053,
          3.75918365,  1.37062407,  7.21187782,  7.83291054]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.54991722, -36.72984695, -28.28089142, -31.22305489, -28.90884018,
          -31.94745827, -33.18599701, -30.79593277, -36.82979584, -37.53469467],
         [-28.54991722, -36.72984695, -28.28089142, -31.22305489, -28.90884018,
          -31.94745827, -33.18599701, -30.79593277, -36.82979584, -37.53469467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26902580,  0.35892296]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0374 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31065178, -29.77011871, -24.73226166, -28.38901711, -26.21283531,
         -28.98853493, -28.51242447, -30.11011124, -25.90357208, -30.21725655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 606] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 606] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 204] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.38776445, 1.62000191, 4.98641109, 2.86554289, 5.48513174, 5.11340475,
         6.28316784, 2.58398342, 6.84431171]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0361 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.24666405, -28.76270676, -23.26070213, -22.05362892, -20.50691032,
         -21.35376549, -23.01077271, -17.43795013, -27.58108521, -26.06879044]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 274, 1, 599] with unstable size 273 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 599] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [273]; unstable size 273; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 273] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 273] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.87904978, 8.74207592, 3.91814995, 3.03320646, 2.01956177, 2.34560609,
         3.41726971, 7.67006540, 6.18134117]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0377 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [694]; unstable size 694; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 694] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 694] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 694] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 259] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.01481509,  2.06576967, -0.04681420,  1.60054767, -0.07306194,
          1.60960829,  2.27459669,  1.25393140,  2.08621788]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.02it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.09273529, -18.14864540, -14.29659462, -16.09573364, -14.54441929,
          -16.17729568, -13.98502541, -17.08440590, -16.74464989, -17.94149017],
         [-17.09273529, -18.14864540, -14.29659462, -16.09573364, -14.54441929,
          -16.17729568, -13.98502541, -17.08440590, -16.74464989, -17.94149017]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31156921, 0.55939388]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1136 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.356431007385254
alpha/beta optimization time: 1.1974577903747559
initial alpha-crown bounds: tensor([[ 2.11682487,  2.15421200, -0.00883842,  1.63260877, -0.03195834,
          1.64549255,  2.32464314,  1.34506512,  2.17838144]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.03195834159851074
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.66130328178406
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.66126346588135
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.66123795509338
Verifying property 2 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00883842]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00883842]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010275840759277344
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008836507797241211
10 lb beta sum: 0.0, worst -0.008847951889038086
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 61] 
split level 3: [/input-8, 1627] 
split level 4: [/input-8, 1635] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1954] 
split level 7: [/input-8, 1051] 
split level 8: [/input-8, 1628] 
split level 9: [/input-8, 924] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 477] 
split level 12: [/input-12, 71] 
split level 13: [/input-8, 410] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 1961] 
split level 16: [/input-8, 1962] 
split level 17: [/input-8, 418] 
split level 18: [/input-12, 50] 
split level 19: [/input-8, 1380] 
split level 20: [/input-8, 1963] 
split level 21: [/input-8, 1570] 
split level 22: [/input-8, 1589] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 306] 
split level 25: [/input-8, 466] 
split level 26: [/input-8, 1246] 
split level 27: [/input-8, 1590] 
split level 28: [/input-8, 300] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 424] 
split level 31: [/input-8, 1560] 
split level 32: [/input-8, 339] 
split level 33: [/input-8, 1371] 
split level 34: [/input-8, 435] 
split level 35: [/input-8, 307] 
split level 36: [/input-8, 36] 
split level 37: [/input-8, 741] 
split level 38: [/input-8, 161] 
split level 39: [/input-8, 458] 
split level 40: [/input-8, 1290] 
split level 41: [/input-8, 957] 
split level 42: [/input-8, 436] 
split level 43: [/input-8, 995] 
split level 44: [/input-8, 758] 
split level 45: [/input-8, 1598] 
split level 46: [/input-8, 869] 
split level 47: [/input-8, 738] 
split level 48: [/input-8, 408] 
split level 49: [/input-8, 1619] 
split level 50: [/input-8, 281] 
split level 51: [/input-8, 1561] 
split level 52: [/input-8, 150] 
split level 53: [/input-8, 459] 
split level 54: [/input-8, 159] 
split level 55: [/input-8, 149] 
split level 56: [/input-8, 1968] 
split level 57: [/input-8, 276] 
split level 58: [/input-8, 1680] 
split level 59: [/input-8, 625] 
split level 60: [/input-8, 177] 
split level 61: [/input-8, 1674] 
split level 62: [/input-8, 298] 
split level 63: [/input-12, 20] 
split level 64: [/input-8, 342] 
split level 65: [/input-8, 1038] 
split level 66: [/input-8, 243] 
split level 67: [/input-8, 102] 
split level 68: [/input-8, 299] 
split level 69: [/input-8, 349] 
split level 70: [/input-8, 908] 
split level 71: [/input-8, 770] 
split level 72: [/input-8, 1370] 
split level 73: [/input-8, 1638] 
split level 74: [/input-8, 357] 
split level 75: [/input-8, 1515] 
split level 76: [/input-8, 1701] 
split level 77: [/input-8, 1678] 
split level 78: [/input-8, 782] 
split level 79: [/input-8, 285] 
split level 80: [/input-8, 110] 
split level 81: [/input-8, 802] 
split level 82: [/input-8, 769] 
split level 83: [/input-8, 2036] 
split level 84: [/input-8, 771] 
split level 85: [/input-8, 85] 
split level 86: [/input-8, 494] 
split level 87: [/input-8, 244] 
split level 88: [/input-8, 1381] 
split level 89: [/input-8, 1945] 
split level 90: [/input-8, 997] 
split level 91: [/input, 1381] 
split level 92: [/input-8, 773] 
split level 93: [/input-8, 93] 
split level 94: [/input, 2787] 
split level 95: [/input-8, 1199] 
split level 96: [/input, 3314] 
split level 97: [/input-8, 245] 
split level 98: [/input-8, 1034] 
split level 99: [/input-8, 176] 
split level 100: [/input-8, 1210] 
split level 101: [/input-8, 169] 
split level 102: [/input-8, 1060] 
split level 103: [/input-8, 1947] 
split level 104: [/input, 4062] 
split level 105: [/input-8, 827] 
split level 106: [/input, 2804] 
split level 107: [/input, 1455] 
split level 108: [/input-8, 772] 
split level 109: [/input-8, 160] 
split level 110: [/input-8, 1656] 
split level 111: [/input-8, 411] 
split level 112: [/input, 2694] 
split level 113: [/input-8, 1227] 
split level 114: [/input-8, 1081] 
split level 115: [/input-8, 1225] 
split level 116: [/input, 2802] 
split level 117: [/input-8, 801] 
split level 118: [/input-8, 247] 
split level 119: [/input-8, 634] 
split level 120: [/input, 3463] 
split level 121: [/input-8, 246] 
split level 122: [/input-8, 71] 
split level 123: [/input-8, 449] 
split level 124: [/input, 1013] 
split level 125: [/input, 3991] 
split level 126: [/input, 85] 
split level 127: [/input-8, 1698] 
split level 128: [/input-8, 460] 
split level 129: [/input-8, 1937] 
split level 130: [/input-8, 1601] 
split level 131: [/input-8, 144] 
split level 132: [/input, 2941] 
split level 133: [/input-8, 1702] 
split level 134: [/input, 1382] 
split level 135: [/input, 832] 
split level 136: [/input-8, 488] 
split level 137: [/input, 3453] 
split level 138: [/input-8, 97] 
split level 139: [/input-8, 774] 
split level 140: [/input-8, 1609] 
split level 141: [/input, 1668] 
split level 142: [/input-8, 1073] 
split level 143: [/input, 1010] 
split level 144: [/input, 535] 
split level 145: [/input-8, 393] 
split level 146: [/input-8, 404] 
split level 147: [/input-8, 2037] 
split level 148: [/input-8, 1555] 
split level 149: [/input, 1488] 
split level 150: [/input, 2788] 
split level 151: [/input-8, 237] 
split level 152: [/input-8, 987] 
split level 153: [/input, 281] 
split level 154: [/input-8, 910] 
split level 155: [/input, 2012] 
split level 156: [/input-8, 251] 
split level 157: [/input-8, 1230] 
split level 158: [/input, 3234] 
split level 159: [/input, 844] 
split level 160: [/input-8, 1035] 
split level 161: [/input-8, 1688] 
split level 162: [/input, 841] 
split level 163: [/input, 621] 
split level 164: [/input-8, 37] 
split level 165: [/input-8, 1611] 
split level 166: [/input, 2908] 
split level 167: [/input, 3254] 
split level 168: [/input, 1252] 
split level 169: [/input, 610] 
split level 170: [/input, 3264] 
split level 171: [/input, 1305] 
split level 172: [/input, 509] 
split level 173: [/input-8, 1337] 
split level 174: [/input, 910] 
split level 175: [/input-8, 1789] 
split level 176: [/input-8, 451] 
split level 177: [/input, 1197] 
split level 178: [/input, 3049] 
split level 179: [/input, 2073] 
split level 180: [/input-8, 496] 
split level 181: [/input, 2843] 
split level 182: [/input, 857] 
split level 183: [/input-8, 407] 
split level 184: [/input, 1687] 
split level 185: [/input, 2009] 
split level 186: [/input-8, 255] 
split level 187: [/input, 2088] 
split level 188: [/input, 495] 
split level 189: [/input, 1148] 
split level 190: [/input, 2089] 
split level 191: [/input, 732] 
split level 192: [/input-8, 626] 
split level 193: [/input, 2013] 
split level 194: [/input-8, 391] 
split level 195: [/input, 514] 
split level 196: [/input, 3387] 
split level 197: [/input-8, 236] 
split level 198: [/input, 526] 
split level 199: [/input, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008778810501098633
10 lb beta sum: 0.0, worst -0.008773088455200195
Time: prepare 0.0115    bound 0.0971    transfer 0.0008    finalize 0.0028    func 0.1148    
Accumulated time: func 0.1671    prepare 0.0215    bound 0.1489    transfer 0.0008    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.19408154) min lb tensor(-0.00876856)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01409912109375 
BICCOS Cumulative time: 0.01409912109375
Preprocessing time: 0.010071516036987305 Inference time: 0.0027511119842529297 Add cuts time: 0.0011050701141357422 Cut analysis time: 0.00017142295837402344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5095    set_bounds 0.0086    solve 0.1149    add 0.0102    
Accumulated time: pickout 0.0003    decision 0.5095    set_bounds 0.0086    solve 0.1149    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([2.16580531e-09]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([2.16580531e-09]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03352785110473633

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1717    prepare 0.0218    bound 0.1530    transfer 0.0009    finalize 0.0031    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.67839932441711
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.6783401966095
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03195834]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03195834]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.72747802734375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03195691108703613
10 lb beta sum: 0.0, worst -0.03195667266845703
Time: prepare 0.0002    bound 0.0877    transfer 0.0001    finalize 0.0001    func 0.0881    
Accumulated time: func 0.0881    prepare 0.0002    bound 0.0877    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1051] 
split level 7: [/input-8, 155] 
split level 8: [/input-12, 71] 
split level 9: [/input-8, 306] 
split level 10: [/input-8, 1570] 
split level 11: [/input-8, 418] 
split level 12: [/input-8, 1370] 
split level 13: [/input-8, 300] 
split level 14: [/input-8, 349] 
split level 15: [/input-8, 410] 
split level 16: [/input-8, 1246] 
split level 17: [/input-8, 924] 
split level 18: [/input-8, 307] 
split level 19: [/input-8, 342] 
split level 20: [/input-8, 1380] 
split level 21: [/input-8, 1371] 
split level 22: [/input-8, 170] 
split level 23: [/input-8, 1680] 
split level 24: [/input-8, 299] 
split level 25: [/input-12, 55] 
split level 26: [/input-8, 149] 
split level 27: [/input-8, 1635] 
split level 28: [/input-8, 741] 
split level 29: [/input-8, 150] 
split level 30: [/input-8, 408] 
split level 31: [/input-8, 357] 
split level 32: [/input-8, 1589] 
split level 33: [/input-8, 1560] 
split level 34: [/input-8, 1381] 
split level 35: [/input-8, 1963] 
split level 36: [/input-8, 869] 
split level 37: [/input-8, 339] 
split level 38: [/input-8, 908] 
split level 39: [/input-8, 1561] 
split level 40: [/input-8, 2036] 
split level 41: [/input-8, 177] 
split level 42: [/input-8, 1210] 
split level 43: [/input-8, 738] 
split level 44: [/input-8, 1590] 
split level 45: [/input-8, 161] 
split level 46: [/input-8, 957] 
split level 47: [/input-8, 1324] 
split level 48: [/input-8, 1065] 
split level 49: [/input-8, 2037] 
split level 50: [/input-8, 1290] 
split level 51: [/input-8, 1515] 
split level 52: [/input-8, 758] 
split level 53: [/input-8, 36] 
split level 54: [/input-8, 424] 
split level 55: [/input-8, 298] 
split level 56: [/input-8, 179] 
split level 57: [/input-8, 1073] 
split level 58: [/input-8, 1962] 
split level 59: [/input-8, 1598] 
split level 60: [/input-8, 770] 
split level 61: [/input-8, 285] 
split level 62: [/input-8, 1674] 
split level 63: [/input-8, 1060] 
split level 64: [/input, 85] 
split level 65: [/input-8, 769] 
split level 66: [/input-8, 254] 
split level 67: [/input-8, 956] 
split level 68: [/input-8, 1332] 
split level 69: [/input-8, 2011] 
split level 70: [/input, 3497] 
split level 71: [/input, 3314] 
split level 72: [/input-8, 251] 
split level 73: [/input, 1381] 
split level 74: [/input-8, 1627] 
split level 75: [/input-8, 1941] 
split level 76: [/input, 2953] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 466] 
split level 79: [/input-8, 37] 
split level 80: [/input-8, 995] 
split level 81: [/input, 1382] 
split level 82: [/input-8, 252] 
split level 83: [/input-8, 997] 
split level 84: [/input, 2919] 
split level 85: [/input-8, 1969] 
split level 86: [/input-8, 802] 
split level 87: [/input-8, 1035] 
split level 88: [/input, 3466] 
split level 89: [/input-8, 1081] 
split level 90: [/input, 906] 
split level 91: [/input-8, 245] 
split level 92: [/input, 2787] 
split level 93: [/input, 410] 
split level 94: [/input-8, 243] 
split level 95: [/input-8, 827] 
split level 96: [/input-8, 102] 
split level 97: [/input-8, 1162] 
split level 98: [/input-8, 244] 
split level 99: [/input, 2802] 
split level 100: [/input-8, 773] 
split level 101: [/input-8, 1232] 
split level 102: [/input-8, 1034] 
split level 103: [/input-8, 253] 
split level 104: [/input-8, 1656] 
split level 105: [/input-8, 159] 
split level 106: [/input-8, 281] 
split level 107: [/input-8, 1362] 
split level 108: [/input, 2804] 
split level 109: [/input-8, 169] 
split level 110: [/input-8, 435] 
split level 111: [/input, 2930] 
split level 112: [/input-8, 782] 
split level 113: [/input-8, 771] 
split level 114: [/input-8, 38] 
split level 115: [/input-8, 30] 
split level 116: [/input, 345] 
split level 117: [/input, 2931] 
split level 118: [/input-8, 255] 
split level 119: [/input-8, 246] 
split level 120: [/input, 1687] 
split level 121: [/input, 2954] 
split level 122: [/input, 3387] 
split level 123: [/input, 1013] 
split level 124: [/input-8, 972] 
split level 125: [/input, 2904] 
split level 126: [/input, 857] 
split level 127: [/input, 1406] 
split level 128: [/input-8, 144] 
split level 129: [/input-8, 1961] 
split level 130: [/input, 844] 
split level 131: [/input-8, 1601] 
split level 132: [/input-8, 820] 
split level 133: [/input-8, 1199] 
split level 134: [/input-8, 772] 
split level 135: [/input, 343] 
split level 136: [/input-8, 1968] 
split level 137: [/input-8, 1347] 
split level 138: [/input, 828] 
split level 139: [/input-8, 816] 
split level 140: [/input-8, 176] 
split level 141: [/input, 2028] 
split level 142: [/input, 1252] 
split level 143: [/input-8, 411] 
split level 144: [/input, 2788] 
split level 145: [/input-8, 160] 
split level 146: [/input, 2638] 
split level 147: [/input, 426] 
split level 148: [/input, 281] 
split level 149: [/input, 839] 
split level 150: [/input-8, 1225] 
split level 151: [/input, 104] 
split level 152: [/input, 1197] 
split level 153: [/input, 135] 
split level 154: [/input, 841] 
split level 155: [/input, 2871] 
split level 156: [/input, 2012] 
split level 157: [/input, 2637] 
split level 158: [/input, 2027] 
split level 159: [/input, 716] 
split level 160: [/input, 2013] 
split level 161: [/input, 2941] 
split level 162: [/input, 359] 
split level 163: [/input, 495] 
split level 164: [/input, 2344] 
split level 165: [/input, 2884] 
split level 166: [/input-8, 1787] 
split level 167: [/input, 1305] 
split level 168: [/input, 812] 
split level 169: [/input, 3496] 
split level 170: [/input, 791] 
split level 171: [/input, 732] 
split level 172: [/input, 921] 
split level 173: [/input-8, 801] 
split level 174: [/input-8, 963] 
split level 175: [/input, 838] 
split level 176: [/input, 837] 
split level 177: [/input, 3373] 
split level 178: [/input, 509] 
split level 179: [/input, 3528] 
split level 180: [/input, 789] 
split level 181: [/input, 792] 
split level 182: [/input, 811] 
split level 183: [/input, 3234] 
split level 184: [/input-8, 407] 
split level 185: [/input, 1521] 
split level 186: [/input, 1300] 
split level 187: [/input, 2089] 
split level 188: [/input, 325] 
split level 189: [/input-8, 71] 
split level 190: [/input, 2088] 
split level 191: [/input, 163] 
split level 192: [/input, 621] 
split level 193: [/input, 3197] 
split level 194: [/input, 2085] 
split level 195: [/input, 938] 
split level 196: [/input, 1317] 
split level 197: [/input, 2073] 
split level 198: [/input, 3093] 
split level 199: [/input, 2086] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031899213790893555
10 lb beta sum: 0.0, worst -0.031899452209472656
Time: prepare 0.0116    bound 0.1010    transfer 0.0025    finalize 0.0029    func 0.1205    
Accumulated time: func 0.2087    prepare 0.0214    bound 0.1887    transfer 0.0026    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.36957812) min lb tensor(-0.03189683)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011010169982910156 
BICCOS Cumulative time: 0.011010169982910156
Preprocessing time: 0.0099334716796875 Inference time: 0.0006885528564453125 Add cuts time: 0.0002295970916748047 Cut analysis time: 0.00015854835510253906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5125    set_bounds 0.0086    solve 0.1206    add 0.0101    
Accumulated time: pickout 0.0003    decision 0.5125    set_bounds 0.0086    solve 0.1206    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([1.18108412e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([-1.26117907e-33]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.002172708511352539

all verified at 1th iter
Time: prepare 0.0003    bound 0.0095    transfer 0.0001    finalize 0.0001    func 0.0101    
Accumulated time: func 0.2188    prepare 0.0217    bound 0.1982    transfer 0.0027    finalize 0.0031    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 196.64810872077942
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.64804911613464
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.6480267047882
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.6479778289795
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.3521 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-39.90199280, -44.40210342, -40.76707840, -43.34727097, -43.50157547,
         -44.47279358, -43.63641739, -44.64598465, -42.91106033, -44.25598907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 505] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 505] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 148] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.55335259, 0.12430644, 2.72152352, 3.00824571, 3.66845274, 2.93544888,
         3.93169498, 2.25763464, 3.53325558]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 507, 1, 818] with unstable size 506 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 818] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [506]; unstable size 506; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 506] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 506] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09171438,  3.97727156, -0.48304778,  0.36927664,  0.67224622,
         -1.08889937,  1.76183963,  2.47835588,  4.03331900]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.54929352, -24.17858124, -17.99969864, -18.86230087, -17.29471970,
          -19.35946846, -17.28303909, -20.91881943, -22.74308395, -24.15728378],
         [-21.54929352, -24.17858124, -17.99969864, -18.86230087, -17.29471970,
          -19.35946846, -17.28303909, -20.91881943, -22.74308395, -24.15728378]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70497894, -0.01168060]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0572 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 585] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 585] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 203] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81747293,  0.87446845,  3.82560682,  4.56164360,  3.79659176,
          5.13660049,  6.65209627,  3.81942439, -1.01505280]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.04928017, -20.95272827, -24.45425415, -25.08170509, -24.51628304,
          -25.76401329, -27.44613266, -24.56295776, -19.09752655, -19.62283516]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52530861]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0052 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0449 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 234, 1, 650] with unstable size 233 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 650] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [233]; unstable size 233; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 233] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 233] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.41751957,  0.11600983,  0.06584787,  0.44963408, -0.42950106,
          0.86466217, -0.55640650,  0.24044323,  2.07411861]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.24it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.86489582, -12.93333149, -13.34103966, -13.58108902, -12.91056156,
          -14.13509750, -12.40045166, -13.78853512, -15.49103832, -12.07455730],
         [-15.86489582, -12.93333149, -13.34103966, -13.58108902, -12.91056156,
          -14.13509750, -12.40045166, -13.78853512, -15.49103832, -12.07455730]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.83600426, 0.32589436]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1108 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.90281867980957
alpha/beta optimization time: 1.1873304843902588
initial alpha-crown bounds: tensor([[ 2.50665474,  0.15565383,  0.15051842,  0.50773716, -0.35287476,
          0.92790365, -0.47352695,  0.32139492,  2.15935755]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4735269546508789
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6693058013916
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.66926908493042
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6692454814911
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.66922521591187
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6692066192627
Verifying property 4 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35287476]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35287476]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012612342834472656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3528738021850586
10 lb beta sum: 0.0, worst -0.3528757095336914
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 13] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 12] 
split level 12: [/input-8, 1690] 
split level 13: [/input-12, 64] 
split level 14: [/input-12, 55] 
split level 15: [/input-8, 923] 
split level 16: [/input-8, 913] 
split level 17: [/input-8, 820] 
split level 18: [/input-8, 1693] 
split level 19: [/input-8, 1674] 
split level 20: [/input-8, 915] 
split level 21: [/input-8, 1966] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 1714] 
split level 24: [/input-8, 336] 
split level 25: [/input-8, 249] 
split level 26: [/input-8, 240] 
split level 27: [/input-8, 930] 
split level 28: [/input, 3571] 
split level 29: [/input-8, 1323] 
split level 30: [/input-8, 1705] 
split level 31: [/input-8, 1934] 
split level 32: [/input-8, 1718] 
split level 33: [/input-8, 1713] 
split level 34: [/input-8, 1932] 
split level 35: [/input-8, 742] 
split level 36: [/input-8, 1676] 
split level 37: [/input-8, 250] 
split level 38: [/input-8, 1406] 
split level 39: [/input-8, 916] 
split level 40: [/input-8, 1951] 
split level 41: [/input-8, 242] 
split level 42: [/input-8, 1040] 
split level 43: [/input, 3572] 
split level 44: [/input-8, 305] 
split level 45: [/input-8, 239] 
split level 46: [/input-8, 750] 
split level 47: [/input-8, 300] 
split level 48: [/input, 2836] 
split level 49: [/input-8, 1704] 
split level 50: [/input-8, 1483] 
split level 51: [/input-8, 757] 
split level 52: [/input-8, 186] 
split level 53: [/input-8, 55] 
split level 54: [/input, 2167] 
split level 55: [/input, 328] 
split level 56: [/input, 2013] 
split level 57: [/input-8, 41] 
split level 58: [/input, 647] 
split level 59: [/input, 648] 
split level 60: [/input-8, 254] 
split level 61: [/input-8, 1954] 
split level 62: [/input, 2403] 
split level 63: [/input, 291] 
split level 64: [/input, 2787] 
split level 65: [/input, 1019] 
split level 66: [/input, 2004] 
split level 67: [/input, 2425] 
split level 68: [/input, 3794] 
split level 69: [/input, 3418] 
split level 70: [/input, 2340] 
split level 71: [/input-8, 331] 
split level 72: [/input-8, 2003] 
split level 73: [/input, 343] 
split level 74: [/input-8, 1634] 
split level 75: [/input, 2392] 
split level 76: [/input, 2007] 
split level 77: [/input, 1556] 
split level 78: [/input, 2933] 
split level 79: [/input-8, 581] 
split level 80: [/input, 1015] 
split level 81: [/input-8, 734] 
split level 82: [/input, 856] 
split level 83: [/input, 1350] 
split level 84: [/input-8, 398] 
split level 85: [/input-8, 1325] 
split level 86: [/input-8, 723] 
split level 87: [/input, 487] 
split level 88: [/input-8, 487] 
split level 89: [/input, 1013] 
split level 90: [/input, 490] 
split level 91: [/input-8, 479] 
split level 92: [/input, 3433] 
split level 93: [/input, 2835] 
split level 94: [/input, 2137] 
split level 95: [/input, 2552] 
split level 96: [/input, 2021] 
split level 97: [/input, 2002] 
split level 98: [/input-8, 246] 
split level 99: [/input, 2752] 
split level 100: [/input, 1020] 
split level 101: [/input, 312] 
split level 102: [/input, 2020] 
split level 103: [/input, 2556] 
split level 104: [/input, 2199] 
split level 105: [/input, 2006] 
split level 106: [/input, 2375] 
split level 107: [/input, 2010] 
split level 108: [/input, 2457] 
split level 109: [/input-8, 47] 
split level 110: [/input, 2949] 
split level 111: [/input, 3738] 
split level 112: [/input, 3481] 
split level 113: [/input-8, 765] 
split level 114: [/input, 83] 
split level 115: [/input, 2284] 
split level 116: [/input-8, 132] 
split level 117: [/input, 2339] 
split level 118: [/input-8, 2001] 
split level 119: [/input-8, 1311] 
split level 120: [/input, 2008] 
split level 121: [/input-8, 1245] 
split level 122: [/input, 2003] 
split level 123: [/input-8, 1383] 
split level 124: [/input-8, 1403] 
split level 125: [/input, 3384] 
split level 126: [/input, 2300] 
split level 127: [/input, 2768] 
split level 128: [/input, 3280] 
split level 129: [/input, 2553] 
split level 130: [/input, 2357] 
split level 131: [/input-8, 1646] 
split level 132: [/input, 3419] 
split level 133: [/input, 2409] 
split level 134: [/input, 327] 
split level 135: [/input, 486] 
split level 136: [/input, 3563] 
split level 137: [/input-8, 238] 
split level 138: [/input, 427] 
split level 139: [/input, 3788] 
split level 140: [/input, 348] 
split level 141: [/input, 1973] 
split level 142: [/input-8, 1204] 
split level 143: [/input, 3452] 
split level 144: [/input, 65] 
split level 145: [/input, 1348] 
split level 146: [/input, 2281] 
split level 147: [/input, 733] 
split level 148: [/input, 2147] 
split level 149: [/input, 817] 
split level 150: [/input, 2395] 
split level 151: [/input, 3300] 
split level 152: [/input, 701] 
split level 153: [/input, 858] 
split level 154: [/input, 396] 
split level 155: [/input, 2551] 
split level 156: [/input, 2180] 
split level 157: [/input, 1138] 
split level 158: [/input, 2341] 
split level 159: [/input, 791] 
split level 160: [/input, 2385] 
split level 161: [/input, 645] 
split level 162: [/input, 3785] 
split level 163: [/input, 2204] 
split level 164: [/input, 1851] 
split level 165: [/input, 2558] 
split level 166: [/input, 840] 
split level 167: [/input, 2882] 
split level 168: [/input, 824] 
split level 169: [/input, 2878] 
split level 170: [/input, 2098] 
split level 171: [/input-8, 195] 
split level 172: [/input-8, 1589] 
split level 173: [/input, 2087] 
split level 174: [/input, 859] 
split level 175: [/input, 2901] 
split level 176: [/input, 739] 
split level 177: [/input-8, 495] 
split level 178: [/input, 3264] 
split level 179: [/input, 3279] 
split level 180: [/input, 2298] 
split level 181: [/input, 651] 
split level 182: [/input, 2400] 
split level 183: [/input, 813] 
split level 184: [/input, 2417] 
split level 185: [/input, 2472] 
split level 186: [/input, 2297] 
split level 187: [/input-8, 1385] 
split level 188: [/input, 68] 
split level 189: [/input, 2277] 
split level 190: [/input, 3972] 
split level 191: [/input, 1003] 
split level 192: [/input, 2291] 
split level 193: [/input, 1251] 
split level 194: [/input, 2840] 
split level 195: [/input, 2302] 
split level 196: [/input, 2469] 
split level 197: [/input, 2849] 
split level 198: [/input, 3096] 
split level 199: [/input, 2912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.35274314880371094
10 lb beta sum: 0.0, worst -0.3527517318725586
Time: prepare 0.0114    bound 0.0967    transfer 0.0027    finalize 0.0029    func 0.1163    
Accumulated time: func 0.1690    prepare 0.0214    bound 0.1489    transfer 0.0028    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.30271301) min lb tensor(-0.35273981)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010550975799560547 
BICCOS Cumulative time: 0.010550975799560547
Preprocessing time: 0.010106563568115234 Inference time: 0.00015473365783691406 Add cuts time: 6.318092346191406e-05 Cut analysis time: 0.00022649765014648438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33612 (1), -0.33606 (1), -0.33555 (1), -0.33518 (1), -0.33515 (1), -0.33383 (1), -0.33346 (1), -0.33342 (1), -0.33114 (1), -0.33033 (1), -0.33019 (1), -0.33011 (1), -0.33010 (1), -0.32917 (1), -0.32909 (1), -0.32843 (1), -0.32840 (1), -0.32832 (1), -0.32717 (1), -0.32650 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5111    set_bounds 0.0097    solve 0.1164    add 0.0717    
Accumulated time: pickout 0.0003    decision 0.5111    set_bounds 0.0097    solve 0.1164    add 0.0717    
Current (lb-rhs): -0.3361177444458008
50 domains visited
Cumulative time: 0.7773702144622803

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 13] [/input-12, 13] [/input-12, 46] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 46] [/input-12, 4] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28230810165405273
10 lb beta sum: 0.5416095852851868, worst -0.26551133394241333
Time: prepare 0.0070    bound 0.1170    transfer 0.0008    finalize 0.0023    func 0.1297    
Accumulated time: func 0.2988    prepare 0.0286    bound 0.2659    transfer 0.0036    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.22609997) min lb tensor(-0.26535857)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.015753746032714844 
BICCOS Cumulative time: 0.02630472183227539
Preprocessing time: 0.01179814338684082 Inference time: 0.0022399425506591797 Add cuts time: 0.001378774642944336 Cut analysis time: 0.0003368854522705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11972 (2), -0.11906 (2), -0.11857 (2), -0.11681 (2), -0.11496 (2), -0.11384 (2), -0.11172 (2), -0.10984 (2), -0.10818 (2), -0.10380 (2), -0.10363 (2), -0.10303 (2), -0.10164 (2), -0.09755 (2), -0.09689 (2), -0.09684 (2), -0.09441 (2), -0.09122 (2), -0.09099 (2), -0.09083 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0134    solve 0.1298    add 0.0860    
Accumulated time: pickout 0.0014    decision 0.5309    set_bounds 0.0231    solve 0.2462    add 0.1577    
Current (lb-rhs): -0.11971813440322876
100 domains visited
Cumulative time: 1.0434260368347168

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 13] [/input-12, 69] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 69] [/input-12, 69] [/input-12, 2] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08436203002929688
10 lb beta sum: 0.5131667256355286, worst -0.017771601676940918
Time: prepare 0.0061    bound 0.1211    transfer 0.0008    finalize 0.0026    func 0.1331    
Accumulated time: func 0.4319    prepare 0.0349    bound 0.3870    transfer 0.0044    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.29263687) min lb tensor(-0.01513565)
Number of Verified Splits: 395 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03711295127868652 
BICCOS Cumulative time: 0.06341767311096191
Preprocessing time: 0.011599063873291016 Inference time: 0.01804971694946289 Add cuts time: 0.007258415222167969 Cut analysis time: 0.00020575523376464844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0199    set_bounds 0.0153    solve 0.1332    add 0.0184    
Accumulated time: pickout 0.0025    decision 0.5508    set_bounds 0.0384    solve 0.3795    add 0.1761    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.35538980e-01,  8.94073695e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.35538980e-01,  1.68614075e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26118054e-33,  2.34049842e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.06098637e-01,  1.98271498e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.06098637e-01,  2.19925031e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.78149149e-01,  9.95313376e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  1.78149149e-01,  2.22386524e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05999135971069336

all verified at 2th iter
Time: prepare 0.0004    bound 0.0148    transfer 0.0002    finalize 0.0002    func 0.0156    
Accumulated time: func 0.4475    prepare 0.0354    bound 0.4018    transfer 0.0046    finalize 0.0082    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.1859631538391
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.18588972091675
Verifying property 6 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47352695]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47352695]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.799003601074219e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4735274314880371
10 lb beta sum: 0.0, worst -0.47353410720825195
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] 
split level 1: [/input-12, 0] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 13] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 12] 
split level 10: [/input-12, 58] 
split level 11: [/input-12, 90] 
split level 12: [/input-12, 69] 
split level 13: [/input-8, 1690] 
split level 14: [/input-8, 820] 
split level 15: [/input-8, 1966] 
split level 16: [/input-12, 79] 
split level 17: [/input-8, 1713] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1693] 
split level 20: [/input-8, 1974] 
split level 21: [/input-8, 1676] 
split level 22: [/input-12, 6] 
split level 23: [/input-12, 34] 
split level 24: [/input-8, 1714] 
split level 25: [/input-8, 1698] 
split level 26: [/input-8, 1325] 
split level 27: [/input-8, 1718] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1687] 
split level 30: [/input-8, 1932] 
split level 31: [/input-8, 1951] 
split level 32: [/input-8, 1705] 
split level 33: [/input-8, 1704] 
split level 34: [/input-8, 601] 
split level 35: [/input-8, 1954] 
split level 36: [/input-8, 913] 
split level 37: [/input-8, 1323] 
split level 38: [/input-8, 923] 
split level 39: [/input, 2167] 
split level 40: [/input-8, 930] 
split level 41: [/input-8, 2003] 
split level 42: [/input-8, 1406] 
split level 43: [/input-8, 1934] 
split level 44: [/input-8, 588] 
split level 45: [/input, 2392] 
split level 46: [/input, 1350] 
split level 47: [/input-8, 621] 
split level 48: [/input-8, 750] 
split level 49: [/input, 2425] 
split level 50: [/input, 856] 
split level 51: [/input, 328] 
split level 52: [/input, 2137] 
split level 53: [/input-8, 1646] 
split level 54: [/input, 3433] 
split level 55: [/input, 872] 
split level 56: [/input, 3418] 
split level 57: [/input-8, 581] 
split level 58: [/input-8, 915] 
split level 59: [/input, 3571] 
split level 60: [/input, 3572] 
split level 61: [/input, 2199] 
split level 62: [/input, 1013] 
split level 63: [/input, 1661] 
split level 64: [/input-8, 595] 
split level 65: [/input-8, 742] 
split level 66: [/input, 2403] 
split level 67: [/input, 2552] 
split level 68: [/input-8, 336] 
split level 69: [/input-8, 1403] 
split level 70: [/input, 3452] 
split level 71: [/input-8, 331] 
split level 72: [/input, 1020] 
split level 73: [/input, 3794] 
split level 74: [/input, 857] 
split level 75: [/input-8, 1311] 
split level 76: [/input, 312] 
split level 77: [/input, 3419] 
split level 78: [/input, 3512] 
split level 79: [/input, 3384] 
split level 80: [/input-8, 757] 
split level 81: [/input-8, 1191] 
split level 82: [/input-8, 240] 
split level 83: [/input, 1019] 
split level 84: [/input-8, 879] 
split level 85: [/input, 2375] 
split level 86: [/input, 2004] 
split level 87: [/input, 2457] 
split level 88: [/input-8, 249] 
split level 89: [/input, 967] 
split level 90: [/input, 1348] 
split level 91: [/input, 2395] 
split level 92: [/input, 2398] 
split level 93: [/input, 2340] 
split level 94: [/input-8, 892] 
split level 95: [/input, 3496] 
split level 96: [/input, 2472] 
split level 97: [/input, 3785] 
split level 98: [/input-8, 250] 
split level 99: [/input, 348] 
split level 100: [/input, 2357] 
split level 101: [/input, 2204] 
split level 102: [/input, 2409] 
split level 103: [/input-8, 186] 
split level 104: [/input, 3563] 
split level 105: [/input, 2121] 
split level 106: [/input-8, 1720] 
split level 107: [/input, 2553] 
split level 108: [/input-8, 254] 
split level 109: [/input-8, 239] 
split level 110: [/input, 3788] 
split level 111: [/input, 2087] 
split level 112: [/input, 2327] 
split level 113: [/input, 2519] 
split level 114: [/input, 3278] 
split level 115: [/input, 2281] 
split level 116: [/input, 2275] 
split level 117: [/input, 858] 
split level 118: [/input, 1947] 
split level 119: [/input, 2284] 
split level 120: [/input, 2341] 
split level 121: [/input, 2836] 
split level 122: [/input, 2147] 
split level 123: [/input, 487] 
split level 124: [/input, 2020] 
split level 125: [/input, 824] 
split level 126: [/input, 2532] 
split level 127: [/input, 1466] 
split level 128: [/input, 2469] 
split level 129: [/input, 2949] 
split level 130: [/input, 2344] 
split level 131: [/input, 2558] 
split level 132: [/input, 2377] 
split level 133: [/input, 396] 
split level 134: [/input, 330] 
split level 135: [/input, 2933] 
split level 136: [/input, 951] 
split level 137: [/input, 327] 
split level 138: [/input, 3163] 
split level 139: [/input, 3804] 
split level 140: [/input, 2339] 
split level 141: [/input-8, 55] 
split level 142: [/input-8, 765] 
split level 143: [/input-8, 1634] 
split level 144: [/input, 2277] 
split level 145: [/input, 840] 
split level 146: [/input, 2007] 
split level 147: [/input, 486] 
split level 148: [/input, 2397] 
split level 149: [/input, 1901] 
split level 150: [/input, 1946] 
split level 151: [/input, 2180] 
split level 152: [/input, 2006] 
split level 153: [/input, 2473] 
split level 154: [/input, 1948] 
split level 155: [/input, 952] 
split level 156: [/input, 2300] 
split level 157: [/input, 3738] 
split level 158: [/input-8, 1285] 
split level 159: [/input, 859] 
split level 160: [/input, 2486] 
split level 161: [/input, 2298] 
split level 162: [/input, 739] 
split level 163: [/input-8, 479] 
split level 164: [/input, 1945] 
split level 165: [/input, 1902] 
split level 166: [/input, 2466] 
split level 167: [/input-8, 894] 
split level 168: [/input, 83] 
split level 169: [/input, 733] 
split level 170: [/input, 2122] 
split level 171: [/input, 2835] 
split level 172: [/input, 2291] 
split level 173: [/input, 2003] 
split level 174: [/input, 2302] 
split level 175: [/input-8, 1612] 
split level 176: [/input, 418] 
split level 177: [/input, 2211] 
split level 178: [/input-8, 246] 
split level 179: [/input, 3336] 
split level 180: [/input, 721] 
split level 181: [/input-8, 579] 
split level 182: [/input, 1894] 
split level 183: [/input-8, 495] 
split level 184: [/input, 3554] 
split level 185: [/input, 3279] 
split level 186: [/input, 2297] 
split level 187: [/input, 1893] 
split level 188: [/input, 3259] 
split level 189: [/input, 2008] 
split level 190: [/input, 2551] 
split level 191: [/input-8, 1924] 
split level 192: [/input, 2190] 
split level 193: [/input, 2098] 
split level 194: [/input, 2252] 
split level 195: [/input, 1958] 
split level 196: [/input, 2508] 
split level 197: [/input, 2501] 
split level 198: [/input, 2627] 
split level 199: [/input, 1895] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47341442108154297
10 lb beta sum: 0.0, worst -0.47342491149902344
Time: prepare 0.0112    bound 0.0981    transfer 0.0010    finalize 0.0029    func 0.1158    
Accumulated time: func 0.1681    prepare 0.0222    bound 0.1499    transfer 0.0011    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.43399286) min lb tensor(-0.47341442)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010679483413696289 
BICCOS Cumulative time: 0.010679483413696289
Preprocessing time: 0.010129690170288086 Inference time: 0.00021600723266601562 Add cuts time: 8.296966552734375e-05 Cut analysis time: 0.00025081634521484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45865 (1), -0.45846 (1), -0.45832 (1), -0.45812 (1), -0.45785 (1), -0.45761 (1), -0.45733 (1), -0.45583 (1), -0.45583 (1), -0.45566 (1), -0.45555 (1), -0.45477 (1), -0.45426 (1), -0.45221 (1), -0.45212 (1), -0.45116 (1), -0.44992 (1), -0.44945 (1), -0.44744 (1), -0.44692 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5123    set_bounds 0.0097    solve 0.1159    add 0.0701    
Accumulated time: pickout 0.0003    decision 0.5123    set_bounds 0.0097    solve 0.1159    add 0.0701    
Current (lb-rhs): -0.4586477279663086
50 domains visited
Cumulative time: 0.776111364364624

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 3: [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4105992317199707
10 lb beta sum: 1.046152949333191, worst -0.39881205558776855
Time: prepare 0.0069    bound 0.1154    transfer 0.0008    finalize 0.0024    func 0.1280    
Accumulated time: func 0.2961    prepare 0.0293    bound 0.2653    transfer 0.0019    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.28392535) min lb tensor(-0.39856255)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.018359899520874023 
BICCOS Cumulative time: 0.029039382934570312
Preprocessing time: 0.0119171142578125 Inference time: 0.004139900207519531 Add cuts time: 0.001978635787963867 Cut analysis time: 0.000324249267578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20267 (2), -0.20267 (2), -0.20265 (2), -0.20169 (2), -0.19615 (2), -0.19583 (2), -0.19505 (2), -0.19374 (2), -0.19327 (2), -0.18703 (2), -0.18630 (2), -0.18154 (2), -0.18105 (2), -0.17890 (2), -0.17831 (2), -0.17828 (2), -0.17759 (2), -0.17727 (2), -0.17629 (2), -0.17228 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0199    set_bounds 0.0130    solve 0.1281    add 0.0846    
Accumulated time: pickout 0.0017    decision 0.5322    set_bounds 0.0227    solve 0.2440    add 0.1547    
Current (lb-rhs): -0.2026745080947876
100 domains visited
Cumulative time: 1.041686773300171

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 13] [/input-12, 13] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 13] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21434640884399414
10 lb beta sum: 1.212538242340088, worst -0.20120644569396973
Time: prepare 0.0062    bound 0.1152    transfer 0.0008    finalize 0.0021    func 0.1270    
Accumulated time: func 0.4231    prepare 0.0358    bound 0.3805    transfer 0.0027    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.36011398) min lb tensor(-0.19960815)
Number of Verified Splits: 228 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0269014835357666 
BICCOS Cumulative time: 0.055940866470336914
Preprocessing time: 0.011544942855834961 Inference time: 0.010521411895751953 Add cuts time: 0.0044286251068115234 Cut analysis time: 0.00040650367736816406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12969 (3), -0.12718 (3), -0.12715 (3), -0.12033 (3), -0.12027 (3), -0.11952 (3), -0.11462 (3), -0.11456 (3), -0.10395 (3), -0.10367 (3), -0.10366 (3), -0.10349 (3), -0.09986 (3), -0.09981 (3), -0.09956 (3), -0.09295 (3), -0.09294 (3), -0.08356 (3), -0.08336 (3), -0.08141 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0157    solve 0.1271    add 0.1015    
Accumulated time: pickout 0.0026    decision 0.5519    set_bounds 0.0384    solve 0.3711    add 0.2562    
Current (lb-rhs): -0.12968826293945312
150 domains visited
Cumulative time: 1.3337640762329102

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 0] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 13] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 13] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 13] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 13] [/input-12, 13] [/input-12, 2] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1801753044128418
10 lb beta sum: 1.640074372291565, worst -0.09964108467102051
Time: prepare 0.0062    bound 0.1310    transfer 0.0008    finalize 0.0020    func 0.1426    
Accumulated time: func 0.5657    prepare 0.0423    bound 0.5115    transfer 0.0035    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(0.48241377) min lb tensor(-0.09790432)
Number of Verified Splits: 361 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.04073810577392578 
BICCOS Cumulative time: 0.0966789722442627
Preprocessing time: 0.012521505355834961 Inference time: 0.01785135269165039 Add cuts time: 0.009817361831665039 Cut analysis time: 0.0005478858947753906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0197    set_bounds 0.0156    solve 0.1427    add 0.1789    
Accumulated time: pickout 0.0036    decision 0.5715    set_bounds 0.0539    solve 0.5138    add 0.4350    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.92355773e-09, 6.02410197e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.92355773e-09, 6.07537478e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.60207419e-10, 1.66147992e-01, 1.18063971e-01, 1.85634896e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.60207419e-10, 1.66147992e-01, 1.18063971e-01, 8.12929124e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.60207419e-10, 1.66147992e-01, 1.39508769e-01, 1.84985921e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.60207419e-10, 1.66147992e-01, 1.39508769e-01, 8.43594521e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.60207419e-10, 2.22190306e-01, 2.27389500e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([3.60207419e-10, 2.22190306e-01, 7.56194443e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40236949920654297
10 lb beta sum: 1.4212714433670044, worst -0.16862952709197998
Time: prepare 0.0005    bound 0.1407    transfer 0.0002    finalize 0.0002    func 0.1417    
Accumulated time: func 0.7074    prepare 0.0428    bound 0.6522    transfer 0.0038    finalize 0.0097    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5855064392089844, worst 0.01379692554473877

all verified at 0th iter
Time: prepare 0.0095    bound 0.0051    transfer 0.0025    finalize 0.0017    func 0.0205    
Accumulated time: func 0.7279    prepare 0.0528    bound 0.6573    transfer 0.0063    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(1.19861710) min lb tensor(0.01379693)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.006697177886962891 
BICCOS Cumulative time: 0.10337615013122559
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0230    set_bounds 0.0207    solve 0.0205    add 0.0003    
Accumulated time: pickout 0.0042    decision 0.5945    set_bounds 0.0746    solve 0.5343    add 0.4354    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
Cumulative time: 1.970667839050293


Properties batch 7, size 1
Remaining timeout: 195.03981757164001
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 195.03888201713562
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 4.9612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.58661270, -19.23237419, -17.80228806, -19.64345360, -18.73787880,
         -20.88980293, -20.24271202, -20.68834686, -12.61566162, -18.87177277]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 600] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 600] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 197] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94333172, 5.41133118, 3.87400508, 5.60846615, 4.71441984, 6.68207359,
         6.00083208, 6.36807251, 5.18235588]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0782 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 327, 1, 1008] with unstable size 326 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 1008] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [326]; unstable size 326; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 326] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10357308,  2.68191576, -0.13346767, -0.21289110, -0.43652654,
          0.26639247,  0.25994682,  0.99712384,  1.33664083]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.44it/s]100%|██████████| 1/1 [00:00<00:00,  8.43it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.90619469, -26.33676720, -23.54781151, -23.44444466, -23.36634827,
          -24.09861946, -24.28264427, -25.14246368, -22.15742874, -24.83438683],
         [-22.90619469, -26.33676720, -23.54781151, -23.44444466, -23.36634827,
          -24.09861946, -24.28264427, -25.14246368, -22.15742874, -24.83438683]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.74876595, 1.39038277, 1.28701591, 1.20891953]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1219 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.6308674812316895
alpha/beta optimization time: 1.2482569217681885
initial alpha-crown bounds: tensor([[-0.02824795,  2.79288292, -0.02321959, -0.12002349, -0.32431316,
          0.37612677,  0.35790396,  1.15994787,  1.43981028]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.3243131637573242
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5967218875885
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02824795]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02824795]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010395050048828125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028244733810424805
10 lb beta sum: 0.0, worst -0.02825140953063965
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 69] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1643] 
split level 10: [/input-8, 1698] 
split level 11: [/input-12, 89] 
split level 12: [/input-8, 1060] 
split level 13: [/input-8, 1950] 
split level 14: [/input-12, 97] 
split level 15: [/input-8, 1707] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 1699] 
split level 21: [/input-12, 71] 
split level 22: [/input-8, 626] 
split level 23: [/input-8, 1050] 
split level 24: [/input-8, 172] 
split level 25: [/input-8, 371] 
split level 26: [/input-8, 1067] 
split level 27: [/input-12, 78] 
split level 28: [/input-8, 611] 
split level 29: [/input-8, 627] 
split level 30: [/input-8, 1716] 
split level 31: [/input-12, 10] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 1651] 
split level 34: [/input-8, 1693] 
split level 35: [/input-8, 1652] 
split level 36: [/input-8, 349] 
split level 37: [/input-12, 67] 
split level 38: [/input-8, 1764] 
split level 39: [/input-8, 1941] 
split level 40: [/input-8, 373] 
split level 41: [/input-8, 1634] 
split level 42: [/input-8, 612] 
split level 43: [/input-8, 1630] 
split level 44: [/input, 405] 
split level 45: [/input-8, 1402] 
split level 46: [/input-8, 276] 
split level 47: [/input-8, 1646] 
split level 48: [/input-8, 1243] 
split level 49: [/input-8, 1638] 
split level 50: [/input-8, 1945] 
split level 51: [/input, 3511] 
split level 52: [/input-8, 1404] 
split level 53: [/input-8, 302] 
split level 54: [/input, 3495] 
split level 55: [/input-8, 362] 
split level 56: [/input-8, 342] 
split level 57: [/input-8, 1057] 
split level 58: [/input-12, 35] 
split level 59: [/input-8, 1235] 
split level 60: [/input, 457] 
split level 61: [/input-8, 931] 
split level 62: [/input-8, 1627] 
split level 63: [/input, 423] 
split level 64: [/input, 2468] 
split level 65: [/input-8, 227] 
split level 66: [/input, 440] 
split level 67: [/input-8, 1660] 
split level 68: [/input-8, 1625] 
split level 69: [/input-8, 1301] 
split level 70: [/input, 2248] 
split level 71: [/input-8, 1642] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 907] 
split level 74: [/input-8, 602] 
split level 75: [/input-8, 1626] 
split level 76: [/input, 2520] 
split level 77: [/input-8, 228] 
split level 78: [/input-8, 597] 
split level 79: [/input, 2488] 
split level 80: [/input-8, 481] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 1958] 
split level 83: [/input-8, 871] 
split level 84: [/input, 948] 
split level 85: [/input, 2199] 
split level 86: [/input, 2247] 
split level 87: [/input-8, 1610] 
split level 88: [/input-8, 219] 
split level 89: [/input, 750] 
split level 90: [/input, 2246] 
split level 91: [/input, 1962] 
split level 92: [/input-8, 234] 
split level 93: [/input, 406] 
split level 94: [/input, 2505] 
split level 95: [/input, 2949] 
split level 96: [/input, 2172] 
split level 97: [/input-8, 111] 
split level 98: [/input-8, 163] 
split level 99: [/input, 2181] 
split level 100: [/input, 2214] 
split level 101: [/input, 390] 
split level 102: [/input-8, 863] 
split level 103: [/input, 2009] 
split level 104: [/input, 2010] 
split level 105: [/input-8, 1378] 
split level 106: [/input, 1991] 
split level 107: [/input-8, 1405] 
split level 108: [/input-8, 737] 
split level 109: [/input, 2263] 
split level 110: [/input-8, 750] 
split level 111: [/input, 2040] 
split level 112: [/input, 1994] 
split level 113: [/input-8, 473] 
split level 114: [/input, 81] 
split level 115: [/input, 3510] 
split level 116: [/input, 2473] 
split level 117: [/input, 988] 
split level 118: [/input, 2898] 
split level 119: [/input, 442] 
split level 120: [/input-8, 235] 
split level 121: [/input-8, 948] 
split level 122: [/input, 2042] 
split level 123: [/input, 972] 
split level 124: [/input, 3527] 
split level 125: [/input-8, 153] 
split level 126: [/input, 2264] 
split level 127: [/input, 1370] 
split level 128: [/input, 950] 
split level 129: [/input, 1978] 
split level 130: [/input-8, 1521] 
split level 131: [/input, 2008] 
split level 132: [/input, 1457] 
split level 133: [/input, 2011] 
split level 134: [/input, 2536] 
split level 135: [/input-8, 255] 
split level 136: [/input-8, 154] 
split level 137: [/input, 2506] 
split level 138: [/input-8, 1752] 
split level 139: [/input, 2266] 
split level 140: [/input, 3547] 
split level 141: [/input-8, 414] 
split level 142: [/input-8, 432] 
split level 143: [/input, 82] 
split level 144: [/input, 1992] 
split level 145: [/input-8, 218] 
split level 146: [/input-8, 1406] 
split level 147: [/input, 3526] 
split level 148: [/input, 3437] 
split level 149: [/input, 2250] 
split level 150: [/input, 939] 
split level 151: [/input-8, 1620] 
split level 152: [/input, 1993] 
split level 153: [/input-8, 1618] 
split level 154: [/input, 1362] 
split level 155: [/input, 2534] 
split level 156: [/input, 2202] 
split level 157: [/input-8, 248] 
split level 158: [/input, 2007] 
split level 159: [/input, 2533] 
split level 160: [/input-8, 1758] 
split level 161: [/input-8, 2035] 
split level 162: [/input-8, 119] 
split level 163: [/input, 1378] 
split level 164: [/input-8, 511] 
split level 165: [/input, 1975] 
split level 166: [/input, 2474] 
split level 167: [/input, 2930] 
split level 168: [/input, 2158] 
split level 169: [/input, 984] 
split level 170: [/input-8, 1364] 
split level 171: [/input-8, 790] 
split level 172: [/input-8, 949] 
split level 173: [/input, 2413] 
split level 174: [/input-8, 2034] 
split level 175: [/input-8, 1715] 
split level 176: [/input-8, 229] 
split level 177: [/input, 2262] 
split level 178: [/input, 2657] 
split level 179: [/input, 1946] 
split level 180: [/input, 2515] 
split level 181: [/input, 2458] 
split level 182: [/input, 663] 
split level 183: [/input, 2229] 
split level 184: [/input, 1976] 
split level 185: [/input, 1944] 
split level 186: [/input-8, 1667] 
split level 187: [/input-8, 447] 
split level 188: [/input, 2280] 
split level 189: [/input-8, 1045] 
split level 190: [/input, 1419] 
split level 191: [/input, 2139] 
split level 192: [/input, 1928] 
split level 193: [/input, 2269] 
split level 194: [/input-8, 1568] 
split level 195: [/input, 2417] 
split level 196: [/input, 2142] 
split level 197: [/input, 2245] 
split level 198: [/input, 2460] 
split level 199: [/input, 711] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028209924697875977
10 lb beta sum: 0.0, worst -0.028209447860717773
Time: prepare 0.0115    bound 0.0976    transfer 0.0026    finalize 0.0030    func 0.1173    
Accumulated time: func 0.1715    prepare 0.0216    bound 0.1513    transfer 0.0027    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.49938917) min lb tensor(-0.02820659)
Number of Verified Splits: 33 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012186288833618164 
BICCOS Cumulative time: 0.012186288833618164
Preprocessing time: 0.010067224502563477 Inference time: 0.0012116432189941406 Add cuts time: 0.0003674030303955078 Cut analysis time: 0.0005400180816650391
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5198    set_bounds 0.0090    solve 0.1174    add 0.0099    
Accumulated time: pickout 0.0004    decision 0.5198    set_bounds 0.0090    solve 0.1174    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([2.11867146e-09]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([2.11867146e-09]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008170485496520996

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0001    func 0.0102    
Accumulated time: func 0.1817    prepare 0.0219    bound 0.1610    transfer 0.0028    finalize 0.0033    
After pruning, left:  0

Back to Regular BaB


Properties batch 1, size 1
Remaining timeout: 197.61062264442444
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 197.61056399345398
Verifying property 2 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02321959]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02321959]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.393692016601562e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02321481704711914
10 lb beta sum: 0.0, worst -0.023221969604492188
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    func 0.0521    
Accumulated time: func 0.0521    prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 24] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 59] 
split level 10: [/input-8, 1643] 
split level 11: [/input-12, 68] 
split level 12: [/input-12, 90] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1707] 
split level 15: [/input-12, 79] 
split level 16: [/input-8, 1698] 
split level 17: [/input-8, 1699] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 1307] 
split level 20: [/input-8, 1950] 
split level 21: [/input-8, 1693] 
split level 22: [/input-8, 276] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1948] 
split level 25: [/input-8, 1651] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 931] 
split level 29: [/input-8, 372] 
split level 30: [/input-8, 737] 
split level 31: [/input-8, 947] 
split level 32: [/input-8, 1708] 
split level 33: [/input-8, 1660] 
split level 34: [/input-8, 602] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1638] 
split level 37: [/input-8, 1299] 
split level 38: [/input-8, 1947] 
split level 39: [/input-8, 1301] 
split level 40: [/input-8, 1659] 
split level 41: [/input-8, 1646] 
split level 42: [/input-8, 611] 
split level 43: [/input-8, 1634] 
split level 44: [/input-8, 1620] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 948] 
split level 47: [/input-8, 172] 
split level 48: [/input-8, 1060] 
split level 49: [/input, 457] 
split level 50: [/input, 2468] 
split level 51: [/input, 423] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 594] 
split level 55: [/input-8, 1642] 
split level 56: [/input-8, 477] 
split level 57: [/input, 663] 
split level 58: [/input-8, 1958] 
split level 59: [/input-8, 1716] 
split level 60: [/input, 3511] 
split level 61: [/input-8, 1626] 
split level 62: [/input-8, 342] 
split level 63: [/input, 440] 
split level 64: [/input-8, 941] 
split level 65: [/input-8, 593] 
split level 66: [/input, 948] 
split level 67: [/input, 1962] 
split level 68: [/input-8, 1764] 
split level 69: [/input-8, 587] 
split level 70: [/input, 2520] 
split level 71: [/input-8, 612] 
split level 72: [/input-8, 750] 
split level 73: [/input-8, 907] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 373] 
split level 76: [/input, 3495] 
split level 77: [/input, 1978] 
split level 78: [/input, 2246] 
split level 79: [/input-8, 949] 
split level 80: [/input-8, 597] 
split level 81: [/input-8, 348] 
split level 82: [/input, 2504] 
split level 83: [/input, 2214] 
split level 84: [/input, 3546] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 627] 
split level 87: [/input-8, 786] 
split level 88: [/input, 1004] 
split level 89: [/input-8, 781] 
split level 90: [/input, 3543] 
split level 91: [/input, 2248] 
split level 92: [/input, 2199] 
split level 93: [/input-8, 1618] 
split level 94: [/input-8, 1650] 
split level 95: [/input-8, 790] 
split level 96: [/input, 1994] 
split level 97: [/input, 2010] 
split level 98: [/input-8, 793] 
split level 99: [/input, 2247] 
split level 100: [/input, 2488] 
split level 101: [/input, 3560] 
split level 102: [/input, 1975] 
split level 103: [/input, 3526] 
split level 104: [/input, 3547] 
split level 105: [/input, 2263] 
split level 106: [/input, 3562] 
split level 107: [/input, 3563] 
split level 108: [/input-8, 1404] 
split level 109: [/input, 2536] 
split level 110: [/input, 984] 
split level 111: [/input, 988] 
split level 112: [/input, 442] 
split level 113: [/input-8, 899] 
split level 114: [/input, 2229] 
split level 115: [/input-8, 782] 
split level 116: [/input-8, 255] 
split level 117: [/input, 2505] 
split level 118: [/input, 2264] 
split level 119: [/input, 2009] 
split level 120: [/input, 2537] 
split level 121: [/input, 3510] 
split level 122: [/input, 3525] 
split level 123: [/input, 2040] 
split level 124: [/input, 1946] 
split level 125: [/input-12, 56] 
split level 126: [/input, 2473] 
split level 127: [/input-8, 234] 
split level 128: [/input-8, 780] 
split level 129: [/input, 3422] 
split level 130: [/input-8, 1235] 
split level 131: [/input, 2008] 
split level 132: [/input-8, 1715] 
split level 133: [/input, 1370] 
split level 134: [/input, 2266] 
split level 135: [/input-8, 785] 
split level 136: [/input, 2281] 
split level 137: [/input, 3524] 
split level 138: [/input, 1993] 
split level 139: [/input-8, 473] 
split level 140: [/input, 3527] 
split level 141: [/input, 1944] 
split level 142: [/input-8, 1658] 
split level 143: [/input-8, 1045] 
split level 144: [/input-8, 239] 
split level 145: [/input-8, 329] 
split level 146: [/input, 1992] 
split level 147: [/input-8, 481] 
split level 148: [/input, 2228] 
split level 149: [/input, 2007] 
split level 150: [/input, 2282] 
split level 151: [/input, 2011] 
split level 152: [/input-8, 248] 
split level 153: [/input, 972] 
split level 154: [/input-8, 796] 
split level 155: [/input-8, 1364] 
split level 156: [/input, 1977] 
split level 157: [/input, 2506] 
split level 158: [/input, 711] 
split level 159: [/input-8, 56] 
split level 160: [/input, 1976] 
split level 161: [/input, 2250] 
split level 162: [/input, 2280] 
split level 163: [/input, 987] 
split level 164: [/input, 1003] 
split level 165: [/input-8, 245] 
split level 166: [/input-8, 871] 
split level 167: [/input, 2534] 
split level 168: [/input, 2012] 
split level 169: [/input, 2245] 
split level 170: [/input, 406] 
split level 171: [/input-8, 474] 
split level 172: [/input, 3561] 
split level 173: [/input, 1960] 
split level 174: [/input, 2533] 
split level 175: [/input, 2262] 
split level 176: [/input, 2244] 
split level 177: [/input, 950] 
split level 178: [/input, 2540] 
split level 179: [/input-8, 231] 
split level 180: [/input, 1928] 
split level 181: [/input-8, 804] 
split level 182: [/input, 3409] 
split level 183: [/input, 3507] 
split level 184: [/input, 3437] 
split level 185: [/input, 2283] 
split level 186: [/input, 2551] 
split level 187: [/input-8, 218] 
split level 188: [/input-8, 330] 
split level 189: [/input-8, 235] 
split level 190: [/input-8, 49] 
split level 191: [/input-8, 1667] 
split level 192: [/input, 1974] 
split level 193: [/input, 2474] 
split level 194: [/input, 2532] 
split level 195: [/input-8, 254] 
split level 196: [/input, 2770] 
split level 197: [/input, 2269] 
split level 198: [/input, 678] 
split level 199: [/input, 2278] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023128509521484375
10 lb beta sum: 0.0, worst -0.02313995361328125
Time: prepare 0.0115    bound 0.0976    transfer 0.0009    finalize 0.0027    func 0.1153    
Accumulated time: func 0.1674    prepare 0.0216    bound 0.1492    transfer 0.0010    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.16038322) min lb tensor(-0.02312851)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01273965835571289 
BICCOS Cumulative time: 0.01273965835571289
Preprocessing time: 0.009929895401000977 Inference time: 0.0017855167388916016 Add cuts time: 0.0008451938629150391 Cut analysis time: 0.00017905235290527344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5165    set_bounds 0.0093    solve 0.1154    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5165    set_bounds 0.0093    solve 0.1154    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([6.40333342e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([2.34992828e-24]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.005661964416503906

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1719    prepare 0.0218    bound 0.1532    transfer 0.0011    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.7210476398468
Verifying property 3 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12002349]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12002349]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.512901306152344e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12001872062683105
10 lb beta sum: 0.0, worst -0.12002062797546387
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    func 0.0522    
Accumulated time: func 0.0522    prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 67] 
split level 7: [/input-12, 79] 
split level 8: [/input-8, 1643] 
split level 9: [/input-12, 59] 
split level 10: [/input-12, 46] 
split level 11: [/input-8, 172] 
split level 12: [/input-12, 78] 
split level 13: [/input-8, 1698] 
split level 14: [/input-8, 1707] 
split level 15: [/input-8, 173] 
split level 16: [/input-8, 1651] 
split level 17: [/input-8, 1699] 
split level 18: [/input-8, 1630] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 371] 
split level 21: [/input-8, 276] 
split level 22: [/input-8, 1693] 
split level 23: [/input-8, 1659] 
split level 24: [/input-8, 898] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1635] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 947] 
split level 29: [/input-8, 737] 
split level 30: [/input-8, 1301] 
split level 31: [/input-8, 1638] 
split level 32: [/input-8, 786] 
split level 33: [/input-8, 1646] 
split level 34: [/input-8, 626] 
split level 35: [/input-8, 1067] 
split level 36: [/input-8, 1610] 
split level 37: [/input-8, 1060] 
split level 38: [/input-8, 1662] 
split level 39: [/input-8, 785] 
split level 40: [/input-8, 907] 
split level 41: [/input-8, 611] 
split level 42: [/input, 457] 
split level 43: [/input-8, 908] 
split level 44: [/input-8, 507] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 931] 
split level 47: [/input, 423] 
split level 48: [/input-8, 1299] 
split level 49: [/input-12, 69] 
split level 50: [/input-8, 1404] 
split level 51: [/input-8, 793] 
split level 52: [/input, 405] 
split level 53: [/input, 3495] 
split level 54: [/input-8, 612] 
split level 55: [/input-8, 1660] 
split level 56: [/input-8, 790] 
split level 57: [/input-8, 1708] 
split level 58: [/input, 3511] 
split level 59: [/input, 948] 
split level 60: [/input-8, 899] 
split level 61: [/input-8, 597] 
split level 62: [/input-8, 627] 
split level 63: [/input-8, 782] 
split level 64: [/input-8, 373] 
split level 65: [/input-8, 506] 
split level 66: [/input-8, 473] 
split level 67: [/input-8, 1650] 
split level 68: [/input-8, 593] 
split level 69: [/input-8, 1950] 
split level 70: [/input-8, 602] 
split level 71: [/input-8, 1625] 
split level 72: [/input-8, 948] 
split level 73: [/input-8, 1634] 
split level 74: [/input-8, 342] 
split level 75: [/input-8, 781] 
split level 76: [/input-8, 477] 
split level 77: [/input, 2468] 
split level 78: [/input-8, 1941] 
split level 79: [/input-8, 1618] 
split level 80: [/input-8, 348] 
split level 81: [/input, 663] 
split level 82: [/input-8, 788] 
split level 83: [/input-8, 1642] 
split level 84: [/input-8, 481] 
split level 85: [/input-8, 1764] 
split level 86: [/input-8, 163] 
split level 87: [/input-8, 879] 
split level 88: [/input, 1370] 
split level 89: [/input-8, 629] 
split level 90: [/input-8, 1667] 
split level 91: [/input-8, 779] 
split level 92: [/input-8, 505] 
split level 93: [/input-8, 466] 
split level 94: [/input, 971] 
split level 95: [/input-8, 871] 
split level 96: [/input, 440] 
split level 97: [/input-8, 1402] 
split level 98: [/input, 442] 
split level 99: [/input-8, 1620] 
split level 100: [/input, 2246] 
split level 101: [/input-8, 510] 
split level 102: [/input-8, 1406] 
split level 103: [/input, 3546] 
split level 104: [/input, 3526] 
split level 105: [/input-8, 1045] 
split level 106: [/input-8, 796] 
split level 107: [/input-8, 1715] 
split level 108: [/input, 2520] 
split level 109: [/input-8, 1626] 
split level 110: [/input, 3525] 
split level 111: [/input, 2247] 
split level 112: [/input-8, 780] 
split level 113: [/input, 3510] 
split level 114: [/input, 2214] 
split level 115: [/input, 969] 
split level 116: [/input, 3527] 
split level 117: [/input-8, 1605] 
split level 118: [/input, 750] 
split level 119: [/input, 2248] 
split level 120: [/input-8, 474] 
split level 121: [/input-8, 1658] 
split level 122: [/input-8, 1235] 
split level 123: [/input-8, 594] 
split level 124: [/input, 947] 
split level 125: [/input-8, 1947] 
split level 126: [/input, 3507] 
split level 127: [/input-8, 804] 
split level 128: [/input, 2504] 
split level 129: [/input, 2199] 
split level 130: [/input, 3547] 
split level 131: [/input-8, 490] 
split level 132: [/input, 2263] 
split level 133: [/input-8, 167] 
split level 134: [/input, 406] 
split level 135: [/input, 3524] 
split level 136: [/input, 3467] 
split level 137: [/input-8, 949] 
split level 138: [/input, 1978] 
split level 139: [/input, 2229] 
split level 140: [/input, 988] 
split level 141: [/input, 2488] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 750] 
split level 144: [/input-8, 329] 
split level 145: [/input, 2473] 
split level 146: [/input, 3422] 
split level 147: [/input, 984] 
split level 148: [/input, 972] 
split level 149: [/input-8, 328] 
split level 150: [/input, 1991] 
split level 151: [/input, 2209] 
split level 152: [/input, 2151] 
split level 153: [/input, 2264] 
split level 154: [/input-8, 1057] 
split level 155: [/input, 2266] 
split level 156: [/input-8, 1521] 
split level 157: [/input, 2250] 
split level 158: [/input, 2202] 
split level 159: [/input, 1354] 
split level 160: [/input, 3560] 
split level 161: [/input, 1994] 
split level 162: [/input-8, 863] 
split level 163: [/input-8, 1401] 
split level 164: [/input-8, 1405] 
split level 165: [/input, 1975] 
split level 166: [/input, 786] 
split level 167: [/input, 2226] 
split level 168: [/input-8, 1356] 
split level 169: [/input, 2506] 
split level 170: [/input-8, 154] 
split level 171: [/input, 1946] 
split level 172: [/input, 3409] 
split level 173: [/input, 3451] 
split level 174: [/input, 2536] 
split level 175: [/input, 711] 
split level 176: [/input, 3441] 
split level 177: [/input, 1976] 
split level 178: [/input, 790] 
split level 179: [/input-8, 457] 
split level 180: [/input, 1929] 
split level 181: [/input, 2474] 
split level 182: [/input-8, 119] 
split level 183: [/input, 1992] 
split level 184: [/input, 2460] 
split level 185: [/input, 2280] 
split level 186: [/input, 2458] 
split level 187: [/input, 987] 
split level 188: [/input, 2262] 
split level 189: [/input-8, 1958] 
split level 190: [/input, 2136] 
split level 191: [/input, 3437] 
split level 192: [/input, 2326] 
split level 193: [/input, 2149] 
split level 194: [/input, 678] 
split level 195: [/input, 1944] 
split level 196: [/input, 3561] 
split level 197: [/input, 2245] 
split level 198: [/input, 787] 
split level 199: [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11991024017333984
10 lb beta sum: 0.0, worst -0.11991500854492188
Time: prepare 0.0115    bound 0.0972    transfer 0.0026    finalize 0.0028    func 0.1167    
Accumulated time: func 0.1689    prepare 0.0215    bound 0.1489    transfer 0.0027    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.48653007) min lb tensor(-0.11991024)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010560274124145508 
BICCOS Cumulative time: 0.010560274124145508
Preprocessing time: 0.009891986846923828 Inference time: 0.00029730796813964844 Add cuts time: 0.00010347366333007812 Cut analysis time: 0.0002675056457519531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10394 (1), -0.10381 (1), -0.10380 (1), -0.10371 (1), -0.10096 (1), -0.10080 (1), -0.10064 (1), -0.10015 (1), -0.10008 (1), -0.10006 (1), -0.09958 (1), -0.09889 (1), -0.09836 (1), -0.09814 (1), -0.09750 (1), -0.09747 (1), -0.09692 (1), -0.09616 (1), -0.09552 (1), -0.09529 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5095    set_bounds 0.0088    solve 0.1168    add 0.0829    
Accumulated time: pickout 0.0003    decision 0.5095    set_bounds 0.0088    solve 0.1168    add 0.0829    
Current (lb-rhs): -0.10394430160522461
50 domains visited
Cumulative time: 0.7861318588256836

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 53] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 67] [/input-12, 53] 
split level 3: [/input-12, 79] [/input-12, 53] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 53] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08252954483032227

all verified at 3th iter
Time: prepare 0.0076    bound 0.0243    transfer 0.0008    finalize 0.0026    func 0.0378    
Accumulated time: func 0.2067    prepare 0.0294    bound 0.1732    transfer 0.0035    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.27384508) min lb tensor(6.84261322e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.035796165466308594 
BICCOS Cumulative time: 0.0463564395904541
Preprocessing time: 0.012484550476074219 Inference time: 0.014515399932861328 Add cuts time: 0.008600711822509766 Cut analysis time: 0.00019550323486328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0202    set_bounds 0.0144    solve 0.0379    add 0.0153    
Accumulated time: pickout 0.0015    decision 0.5297    set_bounds 0.0233    solve 0.1547    add 0.0982    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  2.43944690e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26118054e-33,  9.05225724e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  2.41996571e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26118054e-33,  9.14109200e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03120112419128418

all verified at 0th iter
Time: prepare 0.0003    bound 0.0047    transfer 0.0001    finalize 0.0002    func 0.0054    
Accumulated time: func 0.2121    prepare 0.0297    bound 0.1779    transfer 0.0036    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 195.66115999221802
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32431316]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32431316]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.560585021972656e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.324310302734375
10 lb beta sum: 0.0, worst -0.32430362701416016
Time: prepare 0.0002    bound 0.0887    transfer 0.0001    finalize 0.0001    func 0.0892    
Accumulated time: func 0.0892    prepare 0.0002    bound 0.0887    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 69] 
split level 7: [/input-12, 32] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 53] 
split level 11: [/input-12, 56] 
split level 12: [/input-12, 4] 
split level 13: [/input-12, 79] 
split level 14: [/input-12, 67] 
split level 15: [/input-8, 1643] 
split level 16: [/input-12, 78] 
split level 17: [/input-8, 172] 
split level 18: [/input-8, 173] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 371] 
split level 22: [/input-8, 372] 
split level 23: [/input-8, 1699] 
split level 24: [/input-8, 1950] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 1651] 
split level 27: [/input-8, 1307] 
split level 28: [/input-8, 737] 
split level 29: [/input-8, 1652] 
split level 30: [/input-8, 1635] 
split level 31: [/input-8, 1947] 
split level 32: [/input-8, 1693] 
split level 33: [/input-8, 1067] 
split level 34: [/input, 457] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1660] 
split level 37: [/input-8, 907] 
split level 38: [/input, 3495] 
split level 39: [/input, 948] 
split level 40: [/input-8, 1299] 
split level 41: [/input-8, 1707] 
split level 42: [/input-8, 1060] 
split level 43: [/input, 3511] 
split level 44: [/input-8, 373] 
split level 45: [/input-8, 1945] 
split level 46: [/input, 423] 
split level 47: [/input, 971] 
split level 48: [/input, 663] 
split level 49: [/input, 2468] 
split level 50: [/input-8, 898] 
split level 51: [/input-8, 348] 
split level 52: [/input-8, 1301] 
split level 53: [/input, 988] 
split level 54: [/input-8, 941] 
split level 55: [/input-8, 908] 
split level 56: [/input, 3546] 
split level 57: [/input, 2520] 
split level 58: [/input-8, 1642] 
split level 59: [/input, 1004] 
split level 60: [/input, 3510] 
split level 61: [/input, 3526] 
split level 62: [/input, 442] 
split level 63: [/input-8, 342] 
split level 64: [/input, 3543] 
split level 65: [/input, 1962] 
split level 66: [/input-8, 1764] 
split level 67: [/input, 440] 
split level 68: [/input, 3547] 
split level 69: [/input, 3525] 
split level 70: [/input-8, 948] 
split level 71: [/input, 969] 
split level 72: [/input, 1978] 
split level 73: [/input-8, 1646] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 163] 
split level 76: [/input-8, 255] 
split level 77: [/input-8, 1667] 
split level 78: [/input, 984] 
split level 79: [/input, 972] 
split level 80: [/input, 2246] 
split level 81: [/input, 947] 
split level 82: [/input, 3527] 
split level 83: [/input, 2214] 
split level 84: [/input, 2010] 
split level 85: [/input, 3562] 
split level 86: [/input-8, 234] 
split level 87: [/input-8, 899] 
split level 88: [/input, 2247] 
split level 89: [/input-8, 253] 
split level 90: [/input, 2263] 
split level 91: [/input-8, 612] 
split level 92: [/input, 2504] 
split level 93: [/input, 3524] 
split level 94: [/input, 987] 
split level 95: [/input, 2248] 
split level 96: [/input, 1994] 
split level 97: [/input, 2009] 
split level 98: [/input, 3563] 
split level 99: [/input, 2264] 
split level 100: [/input, 2473] 
split level 101: [/input, 998] 
split level 102: [/input, 3507] 
split level 103: [/input, 2199] 
split level 104: [/input, 2537] 
split level 105: [/input, 2229] 
split level 106: [/input-8, 611] 
split level 107: [/input-8, 1650] 
split level 108: [/input, 3560] 
split level 109: [/input, 2536] 
split level 110: [/input, 1370] 
split level 111: [/input-8, 1958] 
split level 112: [/input, 2266] 
split level 113: [/input, 3422] 
split level 114: [/input-8, 329] 
split level 115: [/input, 1975] 
split level 116: [/input-8, 597] 
split level 117: [/input, 2008] 
split level 118: [/input, 2505] 
split level 119: [/input, 406] 
split level 120: [/input, 3438] 
split level 121: [/input, 2488] 
split level 122: [/input, 2202] 
split level 123: [/input-8, 2035] 
split level 124: [/input-8, 245] 
split level 125: [/input, 1946] 
split level 126: [/input-8, 793] 
split level 127: [/input-8, 1708] 
split level 128: [/input-8, 154] 
split level 129: [/input-8, 782] 
split level 130: [/input, 2281] 
split level 131: [/input, 2011] 
split level 132: [/input, 2007] 
split level 133: [/input-8, 328] 
split level 134: [/input, 3437] 
split level 135: [/input, 2282] 
split level 136: [/input, 1993] 
split level 137: [/input-8, 949] 
split level 138: [/input-8, 248] 
split level 139: [/input, 939] 
split level 140: [/input, 1992] 
split level 141: [/input-8, 790] 
split level 142: [/input-8, 1057] 
split level 143: [/input-8, 2034] 
split level 144: [/input-8, 239] 
split level 145: [/input, 2539] 
split level 146: [/input, 2250] 
split level 147: [/input, 2228] 
split level 148: [/input, 1976] 
split level 149: [/input, 2506] 
split level 150: [/input, 2012] 
split level 151: [/input, 803] 
split level 152: [/input, 2262] 
split level 153: [/input, 2474] 
split level 154: [/input, 1003] 
split level 155: [/input, 950] 
split level 156: [/input, 1362] 
split level 157: [/input, 2540] 
split level 158: [/input-8, 254] 
split level 159: [/input, 2458] 
split level 160: [/input, 2534] 
split level 161: [/input, 923] 
split level 162: [/input, 711] 
split level 163: [/input, 2283] 
split level 164: [/input, 2269] 
split level 165: [/input, 2245] 
split level 166: [/input-8, 217] 
split level 167: [/input, 3409] 
split level 168: [/input, 3561] 
split level 169: [/input, 1977] 
split level 170: [/input-8, 871] 
split level 171: [/input, 1960] 
split level 172: [/input-8, 785] 
split level 173: [/input-8, 1513] 
split level 174: [/input, 787] 
split level 175: [/input, 2533] 
split level 176: [/input-8, 251] 
split level 177: [/input, 1944] 
split level 178: [/input-8, 1235] 
split level 179: [/input, 2280] 
split level 180: [/input-8, 863] 
split level 181: [/input, 786] 
split level 182: [/input, 2014] 
split level 183: [/input-8, 231] 
split level 184: [/input, 2244] 
split level 185: [/input, 790] 
split level 186: [/input, 2142] 
split level 187: [/input, 2657] 
split level 188: [/input, 1974] 
split level 189: [/input, 3397] 
split level 190: [/input, 2006] 
split level 191: [/input, 2594] 
split level 192: [/input, 2898] 
split level 193: [/input-8, 49] 
split level 194: [/input, 82] 
split level 195: [/input, 2413] 
split level 196: [/input, 2278] 
split level 197: [/input-8, 473] 
split level 198: [/input, 2139] 
split level 199: [/input, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32419705390930176
10 lb beta sum: 0.0, worst -0.3241903781890869
Time: prepare 0.0117    bound 0.0991    transfer 0.0008    finalize 0.0026    func 0.1169    
Accumulated time: func 0.2060    prepare 0.0217    bound 0.1878    transfer 0.0009    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.44234848) min lb tensor(-0.32418752)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.011149168014526367 
BICCOS Cumulative time: 0.011149168014526367
Preprocessing time: 0.010078668594360352 Inference time: 0.000293731689453125 Add cuts time: 0.00012969970703125 Cut analysis time: 0.0006470680236816406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30804 (1), -0.30783 (1), -0.30706 (1), -0.30703 (1), -0.30696 (1), -0.30653 (1), -0.30579 (1), -0.30577 (1), -0.30557 (1), -0.30472 (1), -0.30447 (1), -0.30382 (1), -0.30377 (1), -0.30141 (1), -0.29945 (1), -0.29912 (1), -0.29837 (1), -0.29713 (1), -0.29649 (1), -0.29503 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5192    set_bounds 0.0089    solve 0.1169    add 0.0689    
Accumulated time: pickout 0.0003    decision 0.5192    set_bounds 0.0089    solve 0.1169    add 0.0689    
Current (lb-rhs): -0.30803751945495605
50 domains visited
Cumulative time: 0.8192930221557617

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27243638038635254
10 lb beta sum: 1.3615100383758545, worst -0.22152584791183472
Time: prepare 0.0071    bound 0.1164    transfer 0.0008    finalize 0.0023    func 0.1291    
Accumulated time: func 0.3351    prepare 0.0290    bound 0.3042    transfer 0.0017    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.37186837) min lb tensor(-0.22146201)
Number of Verified Splits: 85 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.01699662208557129 
BICCOS Cumulative time: 0.028145790100097656
Preprocessing time: 0.011527061462402344 Inference time: 0.003116607666015625 Add cuts time: 0.002000570297241211 Cut analysis time: 0.0003523826599121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07793 (2), -0.07767 (2), -0.07705 (2), -0.07688 (2), -0.07555 (2), -0.07529 (2), -0.07461 (2), -0.07447 (2), -0.07413 (2), -0.07244 (2), -0.07092 (2), -0.06999 (2), -0.06848 (2), -0.06744 (2), -0.06691 (2), -0.06375 (2), -0.06341 (2), -0.06339 (2), -0.06305 (2), -0.06239 (2), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0199    set_bounds 0.0126    solve 0.1292    add 0.0823    
Accumulated time: pickout 0.0019    decision 0.5391    set_bounds 0.0215    solve 0.2461    add 0.1512    
Current (lb-rhs): -0.07792532444000244
100 domains visited
Cumulative time: 1.082012414932251

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 46] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 79] [/input-12, 79] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1281747817993164
10 lb beta sum: 1.5395777225494385, worst -0.03541111946105957
Time: prepare 0.0067    bound 0.1364    transfer 0.0008    finalize 0.0025    func 0.1490    
Accumulated time: func 0.4842    prepare 0.0360    bound 0.4406    transfer 0.0025    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.36881793) min lb tensor(-0.03478336)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.035720109939575195 
BICCOS Cumulative time: 0.06386590003967285
Preprocessing time: 0.011598587036132812 Inference time: 0.016522884368896484 Add cuts time: 0.007418632507324219 Cut analysis time: 0.0001800060272216797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0218    set_bounds 0.0182    solve 0.1491    add 0.0315    
Accumulated time: pickout 0.0028    decision 0.5609    set_bounds 0.0397    solve 0.3952    add 0.1827    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.41399905e-01,  1.27623841e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.41399905e-01,  1.29594609e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.57450125e-01,  1.23991653e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.57450125e-01,  1.26489803e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.74038097e-01,  1.22414038e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  1.74038097e-01,  4.24205512e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  2.72041261e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13181805610656738

all verified at 3th iter
Time: prepare 0.0004    bound 0.0201    transfer 0.0002    finalize 0.0002    func 0.0210    
Accumulated time: func 0.5052    prepare 0.0364    bound 0.4607    transfer 0.0027    finalize 0.0078    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 194.12943768501282
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 194.12935876846313
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 194.12933588027954
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 194.1293168067932
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 5.8708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 480] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 480] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 238] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.72171760,  2.40926838,  1.62155724,  0.22273864,  1.79393649,
          0.73343098,  2.65353584,  0.41378760,  1.72563457]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.48986244, -20.62852478, -16.81181908, -19.12182999, -17.79186821,
          -19.52043343, -18.19032669, -20.78457069, -18.32118225, -19.74188423]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.32195663]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [516]; unstable size 516; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 516] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 516] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 516] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 215] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.92541993,  3.79097652, -0.20490694,  0.89167666,  1.22881365,
         -0.10279602,  2.61780787,  4.21574497,  3.57154131]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.14539337, -17.81489372, -12.46373749, -14.03906250, -12.16037464,
          -14.42084599, -13.10583210, -15.64711285, -18.06120491, -17.03760910],
         [-15.14539337, -17.81489372, -12.46373749, -14.03906250, -12.16037464,
          -14.42084599, -13.10583210, -15.64711285, -18.06120491, -17.03760910]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.30336285, 0.94545746]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1126 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.44194793701172
alpha/beta optimization time: 1.1836628913879395
initial alpha-crown bounds: tensor([[ 1.97218466,  3.86037302, -0.17337990,  0.95068502,  1.30200815,
         -0.04648668,  2.66390967,  4.29102421,  3.62162971]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17337989807128906
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.65397453308105
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6539363861084
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.65391421318054
Verifying property 2 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17337990]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17337990]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010633468627929688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1733800172805786
10 lb beta sum: 0.0, worst -0.1733856201171875
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0524    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 18] 
split level 6: [/input-12, 49] 
split level 7: [/input-8, 1962] 
split level 8: [/input-12, 15] 
split level 9: [/input-12, 38] 
split level 10: [/input-12, 7] 
split level 11: [/input-8, 1717] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 579] 
split level 14: [/input-8, 1710] 
split level 15: [/input-8, 1691] 
split level 16: [/input-8, 478] 
split level 17: [/input-8, 1698] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 476] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 1954] 
split level 22: [/input-8, 1500] 
split level 23: [/input-8, 1634] 
split level 24: [/input-8, 109] 
split level 25: [/input-12, 57] 
split level 26: [/input-8, 438] 
split level 27: [/input-8, 723] 
split level 28: [/input-8, 1964] 
split level 29: [/input-8, 452] 
split level 30: [/input-8, 1617] 
split level 31: [/input, 3253] 
split level 32: [/input-8, 1702] 
split level 33: [/input-8, 1356] 
split level 34: [/input-8, 420] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 486] 
split level 37: [/input-8, 1970] 
split level 38: [/input-8, 227] 
split level 39: [/input-8, 1298] 
split level 40: [/input-8, 733] 
split level 41: [/input-8, 900] 
split level 42: [/input-8, 84] 
split level 43: [/input-8, 1035] 
split level 44: [/input-8, 429] 
split level 45: [/input, 3254] 
split level 46: [/input-8, 1372] 
split level 47: [/input-8, 1485] 
split level 48: [/input-8, 1357] 
split level 49: [/input-8, 1605] 
split level 50: [/input-8, 91] 
split level 51: [/input-8, 630] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 923] 
split level 54: [/input-8, 174] 
split level 55: [/input-8, 584] 
split level 56: [/input-8, 1609] 
split level 57: [/input, 3067] 
split level 58: [/input-8, 450] 
split level 59: [/input-8, 280] 
split level 60: [/input, 235] 
split level 61: [/input, 2756] 
split level 62: [/input-8, 2004] 
split level 63: [/input-8, 1771] 
split level 64: [/input-8, 145] 
split level 65: [/input-8, 1355] 
split level 66: [/input, 636] 
split level 67: [/input-8, 406] 
split level 68: [/input-8, 794] 
split level 69: [/input, 1652] 
split level 70: [/input-8, 717] 
split level 71: [/input, 2266] 
split level 72: [/input, 2722] 
split level 73: [/input, 362] 
split level 74: [/input, 2987] 
split level 75: [/input-8, 1237] 
split level 76: [/input, 3382] 
split level 77: [/input-8, 1782] 
split level 78: [/input, 3506] 
split level 79: [/input, 2537] 
split level 80: [/input-8, 1549] 
split level 81: [/input-8, 1248] 
split level 82: [/input, 3492] 
split level 83: [/input, 3543] 
split level 84: [/input, 360] 
split level 85: [/input, 1463] 
split level 86: [/input, 1491] 
split level 87: [/input, 3478] 
split level 88: [/input, 2229] 
split level 89: [/input, 2482] 
split level 90: [/input-8, 747] 
split level 91: [/input-8, 189] 
split level 92: [/input, 364] 
split level 93: [/input, 234] 
split level 94: [/input, 1175] 
split level 95: [/input, 2759] 
split level 96: [/input, 2214] 
split level 97: [/input-8, 1026] 
split level 98: [/input, 3526] 
split level 99: [/input-8, 1635] 
split level 100: [/input, 3442] 
split level 101: [/input-8, 432] 
split level 102: [/input, 2199] 
split level 103: [/input, 2523] 
split level 104: [/input, 1483] 
split level 105: [/input, 940] 
split level 106: [/input, 594] 
split level 107: [/input, 1337] 
split level 108: [/input, 2476] 
split level 109: [/input, 2248] 
split level 110: [/input-8, 1387] 
split level 111: [/input, 596] 
split level 112: [/input-8, 1601] 
split level 113: [/input-8, 187] 
split level 114: [/input, 1129] 
split level 115: [/input-8, 346] 
split level 116: [/input-8, 80] 
split level 117: [/input, 2284] 
split level 118: [/input, 2247] 
split level 119: [/input, 2263] 
split level 120: [/input-8, 1825] 
split level 121: [/input, 3485] 
split level 122: [/input, 3892] 
split level 123: [/input, 3490] 
split level 124: [/input, 2226] 
split level 125: [/input, 2241] 
split level 126: [/input-8, 1380] 
split level 127: [/input, 198] 
split level 128: [/input, 2556] 
split level 129: [/input, 2774] 
split level 130: [/input-8, 981] 
split level 131: [/input-8, 434] 
split level 132: [/input, 3863] 
split level 133: [/input, 2539] 
split level 134: [/input, 1942] 
split level 135: [/input, 707] 
split level 136: [/input, 1144] 
split level 137: [/input, 2485] 
split level 138: [/input-8, 378] 
split level 139: [/input, 1112] 
split level 140: [/input, 1218] 
split level 141: [/input, 366] 
split level 142: [/input, 196] 
split level 143: [/input, 2180] 
split level 144: [/input, 3910] 
split level 145: [/input, 1494] 
split level 146: [/input, 2233] 
split level 147: [/input, 413] 
split level 148: [/input-8, 1534] 
split level 149: [/input, 2787] 
split level 150: [/input, 2441] 
split level 151: [/input, 2598] 
split level 152: [/input, 1544] 
split level 153: [/input, 3890] 
split level 154: [/input-8, 158] 
split level 155: [/input, 1669] 
split level 156: [/input, 2540] 
split level 157: [/input, 183] 
split level 158: [/input-8, 10] 
split level 159: [/input, 2007] 
split level 160: [/input, 2766] 
split level 161: [/input-8, 73] 
split level 162: [/input, 218] 
split level 163: [/input, 3093] 
split level 164: [/input-8, 1824] 
split level 165: [/input-8, 1682] 
split level 166: [/input-12, 92] 
split level 167: [/input, 2451] 
split level 168: [/input, 2513] 
split level 169: [/input, 877] 
split level 170: [/input, 3021] 
split level 171: [/input-8, 1672] 
split level 172: [/input-8, 1218] 
split level 173: [/input, 156] 
split level 174: [/input-8, 1995] 
split level 175: [/input-8, 440] 
split level 176: [/input-8, 1735] 
split level 177: [/input, 190] 
split level 178: [/input, 2929] 
split level 179: [/input, 546] 
split level 180: [/input, 862] 
split level 181: [/input, 1014] 
split level 182: [/input, 2910] 
split level 183: [/input, 2298] 
split level 184: [/input, 2668] 
split level 185: [/input-8, 1033] 
split level 186: [/input, 1235] 
split level 187: [/input, 2330] 
split level 188: [/input, 3437] 
split level 189: [/input, 2878] 
split level 190: [/input, 982] 
split level 191: [/input, 2478] 
split level 192: [/input, 3582] 
split level 193: [/input, 2548] 
split level 194: [/input, 2784] 
split level 195: [/input-8, 1379] 
split level 196: [/input, 846] 
split level 197: [/input, 1495] 
split level 198: [/input, 3335] 
split level 199: [/input-8, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17333877086639404
10 lb beta sum: 0.0, worst -0.1733241081237793
Time: prepare 0.0116    bound 0.0971    transfer 0.0025    finalize 0.0025    func 0.1163    
Accumulated time: func 0.1691    prepare 0.0216    bound 0.1495    transfer 0.0026    finalize 0.0026    
all_split False
======================Cut inference begins======================
max lb tensor(0.01895189) min lb tensor(-0.17331815)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010508060455322266 
BICCOS Cumulative time: 0.010508060455322266
Preprocessing time: 0.010074615478515625 Inference time: 0.00013327598571777344 Add cuts time: 7.82012939453125e-05 Cut analysis time: 0.0002219676971435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16248 (1), -0.16235 (1), -0.16214 (1), -0.16177 (1), -0.16122 (1), -0.16119 (1), -0.16111 (1), -0.16097 (1), -0.16011 (1), -0.15969 (1), -0.15933 (1), -0.15929 (1), -0.15788 (1), -0.15780 (1), -0.15772 (1), -0.15751 (1), -0.15748 (1), -0.15742 (1), -0.15736 (1), -0.15694 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5119    set_bounds 0.0091    solve 0.1163    add 0.0694    
Accumulated time: pickout 0.0003    decision 0.5119    set_bounds 0.0091    solve 0.1163    add 0.0694    
Current (lb-rhs): -0.16247868537902832
50 domains visited
Cumulative time: 0.7760984897613525

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 53] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 3: [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14616382122039795
10 lb beta sum: 0.34676826000213623, worst -0.14577269554138184
Time: prepare 0.0068    bound 0.1140    transfer 0.0008    finalize 0.0020    func 0.1262    
Accumulated time: func 0.2953    prepare 0.0287    bound 0.2634    transfer 0.0034    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.11064649) min lb tensor(-0.14573228)
Number of Verified Splits: 89 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.016977548599243164 
BICCOS Cumulative time: 0.02748560905456543
Preprocessing time: 0.011549949645996094 Inference time: 0.0033109188079833984 Add cuts time: 0.0019378662109375 Cut analysis time: 0.00017881393432617188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0125    solve 0.1262    add 0.0151    
Accumulated time: pickout 0.0014    decision 0.5316    set_bounds 0.0216    solve 0.2426    add 0.0845    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.98792491e-09, 1.16579190e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.98792491e-09, 1.24739632e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([6.98792491e-09, 8.75450820e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([6.98792491e-09, 9.90786999e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012821614742279053

all verified at 1th iter
Time: prepare 0.0003    bound 0.0094    transfer 0.0001    finalize 0.0001    func 0.0101    
Accumulated time: func 0.3053    prepare 0.0290    bound 0.2729    transfer 0.0035    finalize 0.0048    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.45008516311646
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.45001339912415
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.44999074935913
Verifying property 5 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04648668]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04648668]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.894371032714844e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04648536443710327
10 lb beta sum: 0.0, worst -0.04649445414543152
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 49] 
split level 1: [/input-12, 42] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 38] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 12] 
split level 9: [/input-8, 584] 
split level 10: [/input-12, 57] 
split level 11: [/input-8, 1068] 
split level 12: [/input-8, 1698] 
split level 13: [/input-8, 227] 
split level 14: [/input-8, 478] 
split level 15: [/input-8, 1053] 
split level 16: [/input-8, 1035] 
split level 17: [/input-8, 1069] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 1041] 
split level 20: [/input-8, 630] 
split level 21: [/input, 3442] 
split level 22: [/input, 2891] 
split level 23: [/input-8, 1742] 
split level 24: [/input-8, 822] 
split level 25: [/input-8, 476] 
split level 26: [/input-8, 109] 
split level 27: [/input-8, 1691] 
split level 28: [/input-8, 909] 
split level 29: [/input-8, 452] 
split level 30: [/input, 2923] 
split level 31: [/input-8, 486] 
split level 32: [/input-8, 379] 
split level 33: [/input-8, 1714] 
split level 34: [/input-8, 1682] 
split level 35: [/input-8, 1485] 
split level 36: [/input, 373] 
split level 37: [/input-8, 1771] 
split level 38: [/input-8, 280] 
split level 39: [/input-8, 1995] 
split level 40: [/input-8, 900] 
split level 41: [/input-8, 1964] 
split level 42: [/input, 2513] 
split level 43: [/input-8, 2004] 
split level 44: [/input-8, 80] 
split level 45: [/input, 636] 
split level 46: [/input-8, 1701] 
split level 47: [/input, 1942] 
split level 48: [/input-8, 73] 
split level 49: [/input, 898] 
split level 50: [/input, 3485] 
split level 51: [/input-8, 1702] 
split level 52: [/input, 1494] 
split level 53: [/input-8, 1161] 
split level 54: [/input-8, 411] 
split level 55: [/input, 1463] 
split level 56: [/input-8, 450] 
split level 57: [/input, 2241] 
split level 58: [/input-8, 1357] 
split level 59: [/input-8, 1298] 
split level 60: [/input, 414] 
split level 61: [/input, 1511] 
split level 62: [/input-8, 1970] 
split level 63: [/input, 1927] 
split level 64: [/input, 2900] 
split level 65: [/input, 2987] 
split level 66: [/input, 169] 
split level 67: [/input-8, 1617] 
split level 68: [/input-8, 372] 
split level 69: [/input, 2759] 
split level 70: [/input-8, 1710] 
split level 71: [/input, 2117] 
split level 72: [/input-8, 1355] 
split level 73: [/input, 940] 
split level 74: [/input-8, 1782] 
split level 75: [/input-8, 579] 
split level 76: [/input, 1337] 
split level 77: [/input, 2917] 
split level 78: [/input, 1495] 
split level 79: [/input, 2405] 
split level 80: [/input, 2936] 
split level 81: [/input, 2266] 
split level 82: [/input, 2162] 
split level 83: [/input, 2548] 
split level 84: [/input-8, 1988] 
split level 85: [/input, 2910] 
split level 86: [/input, 218] 
split level 87: [/input-8, 1757] 
split level 88: [/input, 362] 
split level 89: [/input, 364] 
split level 90: [/input, 2909] 
split level 91: [/input, 413] 
split level 92: [/input-8, 1062] 
split level 93: [/input-8, 1668] 
split level 94: [/input-8, 1605] 
split level 95: [/input, 198] 
split level 96: [/input, 956] 
split level 97: [/input-8, 1051] 
split level 98: [/input-8, 72] 
split level 99: [/input-8, 1731] 
split level 100: [/input, 915] 
split level 101: [/input-8, 1609] 
split level 102: [/input-8, 1634] 
split level 103: [/input, 2482] 
split level 104: [/input, 75] 
split level 105: [/input, 1452] 
split level 106: [/input, 2263] 
split level 107: [/input, 555] 
split level 108: [/input, 2774] 
split level 109: [/input, 3254] 
split level 110: [/input, 137] 
split level 111: [/input, 3548] 
split level 112: [/input, 901] 
split level 113: [/input-8, 420] 
split level 114: [/input, 2180] 
split level 115: [/input, 217] 
split level 116: [/input, 86] 
split level 117: [/input, 1432] 
split level 118: [/input, 181] 
split level 119: [/input, 1331] 
split level 120: [/input, 596] 
split level 121: [/input, 2476] 
split level 122: [/input, 2248] 
split level 123: [/input, 1369] 
split level 124: [/input, 2878] 
split level 125: [/input, 2902] 
split level 126: [/input, 3490] 
split level 127: [/input, 594] 
split level 128: [/input, 420] 
split level 129: [/input, 790] 
split level 130: [/input, 914] 
split level 131: [/input, 366] 
split level 132: [/input, 3027] 
split level 133: [/input, 862] 
split level 134: [/input, 885] 
split level 135: [/input, 2539] 
split level 136: [/input, 877] 
split level 137: [/input-8, 378] 
split level 138: [/input, 2247] 
split level 139: [/input, 90] 
split level 140: [/input, 2947] 
split level 141: [/input-8, 1358] 
split level 142: [/input, 2925] 
split level 143: [/input, 156] 
split level 144: [/input, 907] 
split level 145: [/input, 1021] 
split level 146: [/input, 2950] 
split level 147: [/input, 234] 
split level 148: [/input, 1313] 
split level 149: [/input, 60] 
split level 150: [/input, 183] 
split level 151: [/input, 91] 
split level 152: [/input, 1652] 
split level 153: [/input, 3013] 
split level 154: [/input, 2929] 
split level 155: [/input-8, 1142] 
split level 156: [/input-8, 1033] 
split level 157: [/input-8, 717] 
split level 158: [/input, 3260] 
split level 159: [/input, 974] 
split level 160: [/input, 1669] 
split level 161: [/input, 2372] 
split level 162: [/input, 2218] 
split level 163: [/input, 2229] 
split level 164: [/input, 182] 
split level 165: [/input, 846] 
split level 166: [/input, 663] 
split level 167: [/input, 2284] 
split level 168: [/input, 2510] 
split level 169: [/input, 2451] 
split level 170: [/input, 773] 
split level 171: [/input, 2178] 
split level 172: [/input, 929] 
split level 173: [/input, 2007] 
split level 174: [/input, 2998] 
split level 175: [/input-8, 116] 
split level 176: [/input, 2441] 
split level 177: [/input, 2355] 
split level 178: [/input, 2286] 
split level 179: [/input, 2556] 
split level 180: [/input, 3437] 
split level 181: [/input, 214] 
split level 182: [/input, 1299] 
split level 183: [/input, 2254] 
split level 184: [/input, 109] 
split level 185: [/input, 261] 
split level 186: [/input-8, 1730] 
split level 187: [/input, 632] 
split level 188: [/input, 948] 
split level 189: [/input, 2189] 
split level 190: [/input, 2370] 
split level 191: [/input, 65] 
split level 192: [/input, 1346] 
split level 193: [/input, 3582] 
split level 194: [/input, 964] 
split level 195: [/input-8, 2007] 
split level 196: [/input, 3276] 
split level 197: [/input-8, 123] 
split level 198: [/input, 446] 
split level 199: [/input, 484] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04641437530517578
10 lb beta sum: 0.0, worst -0.04642418026924133
Time: prepare 0.0112    bound 0.0961    transfer 0.0026    finalize 0.0028    func 0.1153    
Accumulated time: func 0.1679    prepare 0.0211    bound 0.1483    transfer 0.0027    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.19982582) min lb tensor(-0.04641402)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010753393173217773 
BICCOS Cumulative time: 0.010753393173217773
Preprocessing time: 0.009948968887329102 Inference time: 0.00048089027404785156 Add cuts time: 0.00016736984252929688 Cut analysis time: 0.00015616416931152344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5110    set_bounds 0.0091    solve 0.1153    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5110    set_bounds 0.0091    solve 0.1153    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([-1.]), tensor([0]), tensor([-1.26117907e-33]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([1.]), tensor([0]), tensor([4.66772732e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01940855383872986

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1724    prepare 0.0214    bound 0.1523    transfer 0.0028    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 196.54519200325012
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.54513359069824
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.54511141777039
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.4549 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.31871891, -18.47064972, -19.12639618, -20.47543144, -18.57441521,
         -21.48938560, -20.72224808, -20.14287567, -13.06752682, -17.90552711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [738]; unstable size 738; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 738] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 738] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 738] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 239] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.85416549, 3.53390384, 4.32532740, 5.85610437, 3.81353593, 6.73792934,
         5.85599041, 5.13794947, 3.02939749]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0595 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 646] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 646] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 297] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.24239588,  5.63600874,  0.64621544, -0.16879284, -0.18126950,
          1.30519676,  1.09948552,  4.69383430,  5.11891699]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.19it/s]100%|██████████| 1/1 [00:00<00:00,  9.18it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.62831497, -26.66142845, -20.55701828, -18.69111824, -19.67261124,
          -18.72575760, -21.38451195, -21.12766838, -25.30397987, -26.02238846],
         [-24.62831497, -26.66142845, -20.55701828, -18.69111824, -19.67261124,
          -18.72575760, -21.38451195, -21.12766838, -25.30397987, -26.02238846]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.98149300, 0.03463936]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1117 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.097373962402344
alpha/beta optimization time: 1.1754491329193115
initial alpha-crown bounds: tensor([[ 4.31553078,  5.74813366,  0.69852710, -0.09507769, -0.16205461,
          1.35331535,  1.20960474,  4.79450607,  5.23488855]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.1620546132326126
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.67581844329834
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.67577862739563
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.67575597763062
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.67573595046997
Verifying property 3 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09507769]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09507769]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010561943054199219
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09507614374160767
10 lb beta sum: 0.0, worst -0.09507668018341064
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 56] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 31] 
split level 11: [/input-12, 72] 
split level 12: [/input-8, 1371] 
split level 13: [/input-8, 1682] 
split level 14: [/input-8, 1940] 
split level 15: [/input-8, 1379] 
split level 16: [/input-8, 1380] 
split level 17: [/input-8, 851] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1370] 
split level 20: [/input-8, 850] 
split level 21: [/input-8, 1196] 
split level 22: [/input-8, 1681] 
split level 23: [/input-8, 245] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 204] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 224] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1363] 
split level 30: [/input-8, 232] 
split level 31: [/input-8, 852] 
split level 32: [/input-8, 246] 
split level 33: [/input-8, 230] 
split level 34: [/input-8, 1373] 
split level 35: [/input-8, 1070] 
split level 36: [/input-8, 1386] 
split level 37: [/input-8, 1387] 
split level 38: [/input-8, 1932] 
split level 39: [/input-8, 2030] 
split level 40: [/input-8, 250] 
split level 41: [/input-8, 37] 
split level 42: [/input-8, 244] 
split level 43: [/input-12, 71] 
split level 44: [/input-8, 192] 
split level 45: [/input, 3180] 
split level 46: [/input-8, 860] 
split level 47: [/input-8, 1690] 
split level 48: [/input-8, 236] 
split level 49: [/input-8, 1374] 
split level 50: [/input-12, 35] 
split level 51: [/input-8, 249] 
split level 52: [/input-8, 1939] 
split level 53: [/input-8, 194] 
split level 54: [/input, 3181] 
split level 55: [/input-8, 1206] 
split level 56: [/input-8, 597] 
split level 57: [/input-8, 46] 
split level 58: [/input-8, 1636] 
split level 59: [/input-8, 2005] 
split level 60: [/input-8, 240] 
split level 61: [/input-8, 2024] 
split level 62: [/input, 3214] 
split level 63: [/input-8, 962] 
split level 64: [/input-8, 1749] 
split level 65: [/input-8, 1955] 
split level 66: [/input, 3008] 
split level 67: [/input-8, 410] 
split level 68: [/input, 122] 
split level 69: [/input-8, 39] 
split level 70: [/input-8, 1382] 
split level 71: [/input, 123] 
split level 72: [/input, 3195] 
split level 73: [/input-8, 1076] 
split level 74: [/input-8, 215] 
split level 75: [/input, 2835] 
split level 76: [/input-8, 1665] 
split level 77: [/input, 2670] 
split level 78: [/input-8, 1765] 
split level 79: [/input-8, 1260] 
split level 80: [/input, 1307] 
split level 81: [/input-8, 182] 
split level 82: [/input-8, 1252] 
split level 83: [/input-8, 1473] 
split level 84: [/input-8, 30] 
split level 85: [/input-8, 994] 
split level 86: [/input-8, 409] 
split level 87: [/input, 3275] 
split level 88: [/input, 3166] 
split level 89: [/input-8, 1585] 
split level 90: [/input-8, 1366] 
split level 91: [/input, 2884] 
split level 92: [/input-8, 1365] 
split level 93: [/input-8, 1954] 
split level 94: [/input-8, 1078] 
split level 95: [/input, 107] 
split level 96: [/input-8, 1569] 
split level 97: [/input, 121] 
split level 98: [/input, 2976] 
split level 99: [/input-8, 170] 
split level 100: [/input, 1400] 
split level 101: [/input-8, 207] 
split level 102: [/input-8, 1308] 
split level 103: [/input, 137] 
split level 104: [/input-8, 174] 
split level 105: [/input-8, 1057] 
split level 106: [/input, 905] 
split level 107: [/input, 3177] 
split level 108: [/input-8, 1775] 
split level 109: [/input, 1324] 
split level 110: [/input, 44] 
split level 111: [/input-8, 1079] 
split level 112: [/input, 2650] 
split level 113: [/input-8, 1785] 
split level 114: [/input-8, 1375] 
split level 115: [/input, 140] 
split level 116: [/input, 2074] 
split level 117: [/input, 139] 
split level 118: [/input, 449] 
split level 119: [/input-8, 320] 
split level 120: [/input-8, 1708] 
split level 121: [/input, 3034] 
split level 122: [/input-8, 367] 
split level 123: [/input, 1308] 
split level 124: [/input, 145] 
split level 125: [/input-8, 958] 
split level 126: [/input-8, 1391] 
split level 127: [/input, 3276] 
split level 128: [/input-8, 1354] 
split level 129: [/input, 2361] 
split level 130: [/input, 1003] 
split level 131: [/input, 921] 
split level 132: [/input, 2075] 
split level 133: [/input, 2339] 
split level 134: [/input-8, 352] 
split level 135: [/input, 3243] 
split level 136: [/input, 2664] 
split level 137: [/input-8, 1750] 
split level 138: [/input, 120] 
split level 139: [/input, 2031] 
split level 140: [/input, 956] 
split level 141: [/input, 489] 
split level 142: [/input, 1004] 
split level 143: [/input, 193] 
split level 144: [/input, 2347] 
split level 145: [/input, 24] 
split level 146: [/input, 873] 
split level 147: [/input, 2345] 
split level 148: [/input, 1399] 
split level 149: [/input, 2653] 
split level 150: [/input-8, 47] 
split level 151: [/input, 156] 
split level 152: [/input, 4042] 
split level 153: [/input, 28] 
split level 154: [/input, 162] 
split level 155: [/input, 491] 
split level 156: [/input, 968] 
split level 157: [/input, 2615] 
split level 158: [/input, 2109] 
split level 159: [/input, 92] 
split level 160: [/input, 862] 
split level 161: [/input, 2077] 
split level 162: [/input, 27] 
split level 163: [/input, 274] 
split level 164: [/input, 2068] 
split level 165: [/input, 957] 
split level 166: [/input, 2631] 
split level 167: [/input, 3242] 
split level 168: [/input, 889] 
split level 169: [/input, 3244] 
split level 170: [/input, 81] 
split level 171: [/input-8, 336] 
split level 172: [/input, 2599] 
split level 173: [/input, 3148] 
split level 174: [/input, 2363] 
split level 175: [/input, 2620] 
split level 176: [/input, 78] 
split level 177: [/input, 4043] 
split level 178: [/input, 310] 
split level 179: [/input, 2680] 
split level 180: [/input, 3049] 
split level 181: [/input, 2099] 
split level 182: [/input, 2696] 
split level 183: [/input, 797] 
split level 184: [/input, 2494] 
split level 185: [/input, 2366] 
split level 186: [/input, 105] 
split level 187: [/input, 445] 
split level 188: [/input, 2187] 
split level 189: [/input, 2381] 
split level 190: [/input, 2093] 
split level 191: [/input, 1020] 
split level 192: [/input, 2333] 
split level 193: [/input, 45] 
split level 194: [/input, 1374] 
split level 195: [/input, 2731] 
split level 196: [/input, 2477] 
split level 197: [/input, 2114] 
split level 198: [/input, 2604] 
split level 199: [/input, 464] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09498846530914307
10 lb beta sum: 0.0, worst -0.09498864412307739
Time: prepare 0.0114    bound 0.0965    transfer 0.0008    finalize 0.0029    func 0.1143    
Accumulated time: func 0.1667    prepare 0.0214    bound 0.1485    transfer 0.0009    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.19737577) min lb tensor(-0.09498584)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.011084556579589844 
BICCOS Cumulative time: 0.011084556579589844
Preprocessing time: 0.009954452514648438 Inference time: 0.0003705024719238281 Add cuts time: 0.0001285076141357422 Cut analysis time: 0.0006310939788818359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08701 (1), -0.08692 (1), -0.08685 (1), -0.08682 (1), -0.08680 (1), -0.08678 (1), -0.08657 (1), -0.08651 (1), -0.08628 (1), -0.08614 (1), -0.08607 (1), -0.08605 (1), -0.08602 (1), -0.08600 (1), -0.08568 (1), -0.08556 (1), -0.08533 (1), -0.08529 (1), -0.08498 (1), -0.08402 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5101    set_bounds 0.0096    solve 0.1144    add 0.0707    
Accumulated time: pickout 0.0003    decision 0.5101    set_bounds 0.0096    solve 0.1144    add 0.0707    
Current (lb-rhs): -0.08700919151306152
50 domains visited
Cumulative time: 0.7733585834503174

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 90] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06346708536148071

all verified at 1th iter
Time: prepare 0.0069    bound 0.0118    transfer 0.0007    finalize 0.0022    func 0.0241    
Accumulated time: func 0.1908    prepare 0.0285    bound 0.1602    transfer 0.0016    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.19576314) min lb tensor(1.62124634e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03444957733154297 
BICCOS Cumulative time: 0.04553413391113281
Preprocessing time: 0.011683464050292969 Inference time: 0.014281749725341797 Add cuts time: 0.008301019668579102 Cut analysis time: 0.00018334388732910156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0121    solve 0.0242    add 0.0158    
Accumulated time: pickout 0.0013    decision 0.5296    set_bounds 0.0217    solve 0.1386    add 0.0865    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  5.47301620e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.84468970e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.55849233e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26118054e-33,  1.89724371e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006882727146148682

all verified at 1th iter
Time: prepare 0.0003    bound 0.0100    transfer 0.0001    finalize 0.0001    func 0.0106    
Accumulated time: func 0.2014    prepare 0.0288    bound 0.1703    transfer 0.0018    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.60052585601807
Verifying property 4 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16205461]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16205461]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010228157043457031
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16205435991287231
10 lb beta sum: 0.0, worst -0.16205500066280365
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0521    transfer 0.0001    finalize 0.0001    func 0.0525    
Accumulated time: func 0.0525    prepare 0.0002    bound 0.0521    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 17] 
split level 7: [/input-8, 908] 
split level 8: [/input-8, 868] 
split level 9: [/input-8, 875] 
split level 10: [/input-8, 930] 
split level 11: [/input-12, 56] 
split level 12: [/input-8, 909] 
split level 13: [/input-8, 20] 
split level 14: [/input-8, 1548] 
split level 15: [/input-12, 43] 
split level 16: [/input-8, 860] 
split level 17: [/input-8, 1052] 
split level 18: [/input-8, 869] 
split level 19: [/input-8, 853] 
split level 20: [/input-8, 1748] 
split level 21: [/input-8, 1259] 
split level 22: [/input-8, 1242] 
split level 23: [/input-8, 1756] 
split level 24: [/input-8, 877] 
split level 25: [/input-8, 861] 
split level 26: [/input-8, 852] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 26] 
split level 29: [/input-8, 812] 
split level 30: [/input-8, 938] 
split level 31: [/input-8, 1363] 
split level 32: [/input-12, 59] 
split level 33: [/input-8, 918] 
split level 34: [/input, 3108] 
split level 35: [/input-8, 1379] 
split level 36: [/input-8, 1234] 
split level 37: [/input-8, 1061] 
split level 38: [/input-8, 1749] 
split level 39: [/input-8, 192] 
split level 40: [/input, 2629] 
split level 41: [/input-8, 1069] 
split level 42: [/input-8, 794] 
split level 43: [/input-8, 364] 
split level 44: [/input-8, 934] 
split level 45: [/input-8, 862] 
split level 46: [/input-8, 870] 
split level 47: [/input-8, 1362] 
split level 48: [/input-12, 79] 
split level 49: [/input-8, 336] 
split level 50: [/input-8, 1628] 
split level 51: [/input-8, 1260] 
split level 52: [/input-8, 1357] 
split level 53: [/input-8, 1371] 
split level 54: [/input-8, 1076] 
split level 55: [/input-8, 1932] 
split level 56: [/input-8, 358] 
split level 57: [/input-8, 224] 
split level 58: [/input-8, 1370] 
split level 59: [/input, 1315] 
split level 60: [/input-8, 1636] 
split level 61: [/input-8, 1373] 
split level 62: [/input-8, 101] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 4] 
split level 65: [/input, 1332] 
split level 66: [/input-8, 1196] 
split level 67: [/input-8, 1387] 
split level 68: [/input-8, 344] 
split level 69: [/input, 1316] 
split level 70: [/input-8, 851] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 854] 
split level 73: [/input, 1320] 
split level 74: [/input-8, 1354] 
split level 75: [/input-8, 174] 
split level 76: [/input-8, 1380] 
split level 77: [/input-8, 1633] 
split level 78: [/input-8, 1637] 
split level 79: [/input-8, 1365] 
split level 80: [/input-8, 1612] 
split level 81: [/input, 2581] 
split level 82: [/input-8, 1641] 
split level 83: [/input, 887] 
split level 84: [/input-8, 92] 
split level 85: [/input-8, 1765] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 232] 
split level 88: [/input-8, 230] 
split level 89: [/input-8, 1625] 
split level 90: [/input-8, 215] 
split level 91: [/input-8, 2005] 
split level 92: [/input-8, 245] 
split level 93: [/input-8, 170] 
split level 94: [/input, 1815] 
split level 95: [/input, 3417] 
split level 96: [/input-8, 1386] 
split level 97: [/input, 1334] 
split level 98: [/input, 1351] 
split level 99: [/input-8, 109] 
split level 100: [/input, 1305] 
split level 101: [/input, 1400] 
split level 102: [/input-8, 887] 
split level 103: [/input, 889] 
split level 104: [/input-8, 1710] 
split level 105: [/input-8, 1388] 
split level 106: [/input, 855] 
split level 107: [/input-8, 1772] 
split level 108: [/input-8, 37] 
split level 109: [/input-8, 194] 
split level 110: [/input-8, 182] 
split level 111: [/input-8, 154] 
split level 112: [/input, 3539] 
split level 113: [/input-8, 1366] 
split level 114: [/input-8, 93] 
split level 115: [/input-8, 1374] 
split level 116: [/input-8, 207] 
split level 117: [/input, 1287] 
split level 118: [/input, 885] 
split level 119: [/input-8, 846] 
split level 120: [/input, 3142] 
split level 121: [/input-8, 1263] 
split level 122: [/input, 2394] 
split level 123: [/input, 905] 
split level 124: [/input-8, 249] 
split level 125: [/input-8, 1180] 
split level 126: [/input-8, 1976] 
split level 127: [/input, 2407] 
split level 128: [/input, 1399] 
split level 129: [/input, 2135] 
split level 130: [/input, 436] 
split level 131: [/input, 2134] 
split level 132: [/input, 1306] 
split level 133: [/input-8, 1382] 
split level 134: [/input, 1817] 
split level 135: [/input-8, 246] 
split level 136: [/input-8, 1404] 
split level 137: [/input, 533] 
split level 138: [/input-8, 1057] 
split level 139: [/input, 489] 
split level 140: [/input, 3444] 
split level 141: [/input-8, 175] 
split level 142: [/input-8, 845] 
split level 143: [/input-8, 1039] 
split level 144: [/input, 107] 
split level 145: [/input, 947] 
split level 146: [/input, 1079] 
split level 147: [/input, 3860] 
split level 148: [/input-8, 1676] 
split level 149: [/input-8, 240] 
split level 150: [/input-8, 947] 
split level 151: [/input-8, 473] 
split level 152: [/input, 2361] 
split level 153: [/input, 871] 
split level 154: [/input, 2696] 
split level 155: [/input, 2423] 
split level 156: [/input, 3034] 
split level 157: [/input, 53] 
split level 158: [/input, 2345] 
split level 159: [/input, 120] 
split level 160: [/input, 2680] 
split level 161: [/input, 310] 
split level 162: [/input-8, 1406] 
split level 163: [/input-8, 439] 
split level 164: [/input, 1307] 
split level 165: [/input-8, 510] 
split level 166: [/input, 27] 
split level 167: [/input, 1544] 
split level 168: [/input-8, 1540] 
split level 169: [/input-8, 797] 
split level 170: [/input, 535] 
split level 171: [/input, 362] 
split level 172: [/input-8, 250] 
split level 173: [/input-8, 1649] 
split level 174: [/input, 423] 
split level 175: [/input, 873] 
split level 176: [/input, 122] 
split level 177: [/input-8, 1350] 
split level 178: [/input-8, 1961] 
split level 179: [/input, 2624] 
split level 180: [/input, 2640] 
split level 181: [/input, 445] 
split level 182: [/input, 1080] 
split level 183: [/input-8, 102] 
split level 184: [/input, 2168] 
split level 185: [/input-8, 1668] 
split level 186: [/input, 85] 
split level 187: [/input-8, 1262] 
split level 188: [/input-8, 183] 
split level 189: [/input-8, 1939] 
split level 190: [/input, 2068] 
split level 191: [/input, 22] 
split level 192: [/input-8, 445] 
split level 193: [/input, 2072] 
split level 194: [/input-8, 352] 
split level 195: [/input, 1344] 
split level 196: [/input, 2391] 
split level 197: [/input, 1324] 
split level 198: [/input, 3049] 
split level 199: [/input-8, 863] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1620098501443863
10 lb beta sum: 0.0, worst -0.16200441122055054
Time: prepare 0.0116    bound 0.0970    transfer 0.0026    finalize 0.0030    func 0.1167    
Accumulated time: func 0.1693    prepare 0.0214    bound 0.1491    transfer 0.0027    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06769669) min lb tensor(-0.16200191)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01003265380859375 
BICCOS Cumulative time: 0.01003265380859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15805 (1), -0.15801 (1), -0.15788 (1), -0.15777 (1), -0.15770 (1), -0.15765 (1), -0.15764 (1), -0.15740 (1), -0.15722 (1), -0.15719 (1), -0.15663 (1), -0.15656 (1), -0.15656 (1), -0.15610 (1), -0.15590 (1), -0.15513 (1), -0.15512 (1), -0.15512 (1), -0.15501 (1), -0.15500 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5036    set_bounds 0.0089    solve 0.1168    add 0.0840    
Accumulated time: pickout 0.0003    decision 0.5036    set_bounds 0.0089    solve 0.1168    add 0.0840    
Current (lb-rhs): -0.15804579854011536
50 domains visited
Cumulative time: 0.7808742523193359

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1510952115058899
10 lb beta sum: 0.0, worst -0.1509455144405365
Time: prepare 0.0126    bound 0.1003    transfer 0.0009    finalize 0.0025    func 0.1189    
Accumulated time: func 0.2882    prepare 0.0344    bound 0.2494    transfer 0.0036    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.02657786) min lb tensor(-0.15093699)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012889862060546875 
BICCOS Cumulative time: 0.022922515869140625
Preprocessing time: 0.011948823928833008 Inference time: 0.0001926422119140625 Add cuts time: 0.00013256072998046875 Cut analysis time: 0.0006158351898193359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06087 (2), -0.06086 (2), -0.06084 (2), -0.06082 (2), -0.06066 (2), -0.06055 (2), -0.06042 (2), -0.06038 (2), -0.06006 (2), -0.05974 (2), -0.05960 (2), -0.05929 (2), -0.05788 (2), -0.05771 (2), -0.05765 (2), -0.05761 (2), -0.05735 (2), -0.05602 (2), -0.05597 (2), -0.05584 (2), 
Length of domains: 50
Time: pickout 0.0024    decision 0.0224    set_bounds 0.0127    solve 0.1190    add 0.0839    
Accumulated time: pickout 0.0027    decision 0.5260    set_bounds 0.0215    solve 0.2358    add 0.1678    
Current (lb-rhs): -0.06087425351142883
100 domains visited
Cumulative time: 1.0344152450561523

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-8, 868] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-8, 1252] [/input-8, 868] [/input-8, 860] [/input-8, 1371] [/input-8, 868] [/input-8, 1252] [/input-12, 17] [/input-8, 860] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057936325669288635
10 lb beta sum: 0.11694122850894928, worst -0.25163787603378296
Time: prepare 0.0067    bound 0.1208    transfer 0.0009    finalize 0.0022    func 0.1333    
Accumulated time: func 0.4215    prepare 0.0415    bound 0.3702    transfer 0.0045    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.21991092) min lb tensor(-0.05420634)
Number of Verified Splits: 143 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.021692276000976562 
BICCOS Cumulative time: 0.04461479187011719
Preprocessing time: 0.011960744857788086 Inference time: 0.007238626480102539 Add cuts time: 0.0020513534545898438 Cut analysis time: 0.00044155120849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02618 (3), -0.02600 (3), -0.02600 (3), -0.02574 (3), -0.02468 (3), -0.02411 (3), -0.02410 (3), -0.02371 (3), -0.02358 (3), -0.02330 (3), -0.02329 (3), -0.02328 (3), -0.02270 (3), -0.02268 (3), -0.02188 (3), -0.02151 (3), -0.02092 (3), -0.02057 (3), -0.02025 (3), -0.02013 (3), 
Length of domains: 50
Time: pickout 0.0017    decision 0.0209    set_bounds 0.0152    solve 0.1334    add 0.0995    
Accumulated time: pickout 0.0045    decision 0.5469    set_bounds 0.0368    solve 0.3692    add 0.2673    
Current (lb-rhs): -0.026178965345025063
150 domains visited
Cumulative time: 1.3270988464355469

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 8] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 10] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-8, 1076] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 90] [/input-12, 17] 
split level 3: [/input-8, 868] [/input-8, 1252] [/input-8, 1371] [/input-8, 868] [/input-8, 1371] [/input-8, 1371] [/input-8, 1252] [/input-8, 1252] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02967095375061035
10 lb beta sum: 0.15630248188972473, worst -0.04386894404888153
Time: prepare 0.0068    bound 0.1264    transfer 0.0010    finalize 0.0029    func 0.1398    
Accumulated time: func 0.5613    prepare 0.0485    bound 0.4966    transfer 0.0055    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.11034137) min lb tensor(-0.02254183)
Number of Verified Splits: 225 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 5
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.029273509979248047 
BICCOS Cumulative time: 0.07388830184936523
Preprocessing time: 0.012670755386352539 Inference time: 0.011750459671020508 Add cuts time: 0.0043599605560302734 Cut analysis time: 0.0004923343658447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01162 (4), -0.01139 (4), -0.01131 (4), -0.01128 (4), -0.01094 (4), -0.01089 (4), -0.01087 (4), -0.01058 (4), -0.01045 (4), -0.01036 (4), -0.01027 (4), -0.00995 (4), -0.00989 (4), -0.00970 (4), -0.00932 (4), -0.00868 (4), -0.00824 (4), -0.00814 (4), -0.00810 (4), -0.00797 (4), 
Length of domains: 50
Time: pickout 0.0016    decision 0.0206    set_bounds 0.0145    solve 0.1399    add 0.2958    
Accumulated time: pickout 0.0060    decision 0.5676    set_bounds 0.0513    solve 0.5091    add 0.5631    
Current (lb-rhs): -0.011619672179222107
200 domains visited
Cumulative time: 1.8291537761688232

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 860] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018809333443641663
10 lb beta sum: 0.6391623020172119, worst -0.2263849377632141
Time: prepare 0.0080    bound 0.1381    transfer 0.0023    finalize 0.0032    func 0.1544    
Accumulated time: func 0.7156    prepare 0.0568    bound 0.6347    transfer 0.0078    finalize 0.0139    
all_split False
======================Cut inference begins======================
max lb tensor(0.04802749) min lb tensor(-0.01084042)
Number of Verified Splits: 288 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03152060508728027 
BICCOS Cumulative time: 0.10540890693664551
Preprocessing time: 0.011553764343261719 Inference time: 0.014467954635620117 Add cuts time: 0.005025386810302734 Cut analysis time: 0.0004734992980957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00804 (5), -0.00803 (5), -0.00796 (5), -0.00796 (5), -0.00795 (5), -0.00795 (5), -0.00504 (5), -0.00490 (5), -0.00490 (5), -0.00314 (5), -0.00306 (5), -0.00305 (5), -0.00287 (5), -0.00281 (5), -0.00275 (5), -0.00016 (5), -0.00006 (5), -0.00005 (5), 
Length of domains: 18
Time: pickout 0.0014    decision 0.0211    set_bounds 0.0173    solve 0.1544    add 0.1179    
Accumulated time: pickout 0.0074    decision 0.5886    set_bounds 0.0685    solve 0.6635    add 0.6811    
Current (lb-rhs): -0.008043870329856873
218 domains visited
Cumulative time: 2.172966718673706

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.07908675e-02, 2.04502754e-02,
        3.62397893e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.07908675e-02, 2.04502754e-02,
        3.26141566e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.07908675e-02, 1.46975704e-02,
        3.34391906e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.07908675e-02, 1.46975704e-02,
        3.51713374e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [0.009142192080616951], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.72031482e-02, 7.02337688e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [0.009142192080616951], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.72031482e-02, 3.51695828e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [0.0092314463108778], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.72031482e-02, 6.97295507e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [0.0092314463108778], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.74153589e-10, 2.09058393e-02, 2.72031482e-02, 3.58722955e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.74153589e-10, 7.31982430e-03, 6.67391112e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.74153589e-10, 7.31982430e-03, 2.62187034e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.74152701e-10, 1.69063825e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([2.74152701e-10, 1.73318703e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10341383516788483
10 lb beta sum: 0.4764866530895233, worst -0.09314543008804321
Time: prepare 0.0006    bound 0.1350    transfer 0.0003    finalize 0.0002    func 0.1362    
Accumulated time: func 0.8518    prepare 0.0574    bound 0.7697    transfer 0.0081    finalize 0.0141    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 97] [/input-12, 8] [/input-12, 90] [/input-12, 10] 
split level 2: [/input-8, 868] [/input-12, 90] [/input-12, 17] [/input-12, 90] 
split level 3: [/input-8, 860] [/input-12, 97] [/input-8, 868] [/input-12, 17] 
split level 4: [/input-8, 1052] [/input-8, 868] [/input-8, 869] [/input-8, 868] 
split level 5: [/input-8, 1748] [/input-8, 860] [/input-8, 1052] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8635216355323792, worst -0.06448483467102051
10 lb beta sum: 0.8645190000534058, worst -0.06412595510482788
Time: prepare 0.0109    bound 0.1302    transfer 0.0021    finalize 0.0018    func 0.1467    
Accumulated time: func 0.9986    prepare 0.0687    bound 0.8998    transfer 0.0103    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.24069645) min lb tensor(-0.06395543)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8485606908798218, worst -0.18264538049697876
10 lb beta sum: 0.8806843161582947, worst -0.1297890543937683
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.2609548568725586 
BICCOS Cumulative time: 0.3663637638092041
Preprocessing time: 0.006952047348022461 Inference time: 0.2510340213775635 Add cuts time: 0.002516031265258789 Cut analysis time: 0.0004527568817138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06396 (6), -0.06320 (6), -0.06222 (6), -0.06218 (6), -0.06046 (6), -0.05946 (6), -0.05871 (6), -0.05864 (6), -0.05772 (6), -0.05769 (6), -0.05709 (6), -0.05695 (6), -0.05576 (6), -0.05504 (6), -0.05469 (6), -0.05432 (6), -0.05431 (6), -0.05307 (6), -0.05115 (6), -0.05090 (6), 
Length of domains: 64
Time: pickout 0.0006    decision 0.0181    set_bounds 0.0209    solve 0.1468    add 0.0025    
Accumulated time: pickout 0.0080    decision 0.6067    set_bounds 0.0895    solve 0.8103    add 0.6836    
Current (lb-rhs): -0.06395542621612549
282 domains visited
Cumulative time: 2.786593437194824

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-8, 908] [/input-12, 10] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-8, 861] [/input-12, 97] [/input-8, 909] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9124411344528198, worst -0.0622219443321228
10 lb beta sum: 0.9124411344528198, worst -0.06206393241882324
Time: prepare 0.0110    bound 0.1306    transfer 0.0006    finalize 0.0017    func 0.1455    
Accumulated time: func 1.1440    prepare 0.0798    bound 1.0305    transfer 0.0108    finalize 0.0176    
all_split False
======================Cut inference begins======================
max lb tensor(0.29424202) min lb tensor(-0.06197625)
Number of Verified Splits: 155 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.022533416748046875 
BICCOS Cumulative time: 0.388897180557251
Preprocessing time: 0.007418632507324219 Inference time: 0.01309967041015625 Add cuts time: 0.0015764236450195312 Cut analysis time: 0.000438690185546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06198 (8), -0.06194 (8), -0.06138 (8), -0.06059 (8), -0.05849 (8), -0.05845 (8), -0.05794 (8), -0.05742 (8), -0.05689 (8), -0.05685 (8), -0.05577 (8), -0.05555 (8), -0.05500 (8), -0.05484 (8), -0.05464 (8), -0.05436 (8), -0.05398 (8), -0.05384 (8), -0.05234 (8), -0.05131 (8), 
Length of domains: 101
Time: pickout 0.0023    decision 0.0145    set_bounds 0.0141    solve 0.1455    add 0.0021    
Accumulated time: pickout 0.0103    decision 0.6212    set_bounds 0.1036    solve 0.9558    add 0.6857    
Current (lb-rhs): -0.06197625398635864
383 domains visited
Cumulative time: 2.988689422607422

BaB round 3
batch: 101
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 20] [/input-8, 20] [/input-12, 56] [/input-8, 908] [/input-8, 908] 
split level 1: [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-8, 860] [/input-8, 909] [/input-8, 1052] [/input-8, 20] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05988404154777527
10 lb beta sum: 0.6273733973503113, worst -0.05515265464782715
Time: prepare 0.0078    bound 0.1438    transfer 0.0012    finalize 0.0025    func 0.1580    
Accumulated time: func 1.3020    prepare 0.0878    bound 1.1742    transfer 0.0120    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.02298647) min lb tensor(-0.05508196)
Number of Verified Splits: 124 of 404
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.024439334869384766 
BICCOS Cumulative time: 0.41333651542663574
Preprocessing time: 0.01148676872253418 Inference time: 0.01085662841796875 Add cuts time: 0.0007822513580322266 Cut analysis time: 0.0013136863708496094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05508 (10), -0.05464 (10), -0.05382 (10), -0.05364 (10), -0.05165 (10), -0.05123 (10), -0.05037 (10), -0.05009 (10), -0.04998 (10), -0.04991 (10), -0.04826 (10), -0.04797 (10), -0.04718 (10), -0.04707 (10), -0.04630 (10), -0.04618 (10), -0.04617 (10), -0.04599 (10), -0.04448 (10), -0.04375 (10), 
Length of domains: 280
Time: pickout 0.0024    decision 0.0292    set_bounds 0.0218    solve 0.1581    add 0.0051    
Accumulated time: pickout 0.0127    decision 0.6504    set_bounds 0.1254    solve 1.1139    add 0.6908    
Current (lb-rhs): -0.055081963539123535
663 domains visited
Cumulative time: 3.2307052612304688

BaB round 4
batch: 280
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 908] [/input-8, 860] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 1748] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05729889124631882
10 lb beta sum: 1.2678693532943726, worst -0.04736769199371338
Time: prepare 0.0109    bound 0.1493    transfer 0.0048    finalize 0.0036    func 0.1721    
Accumulated time: func 1.4741    prepare 0.0989    bound 1.3235    transfer 0.0168    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.65138113) min lb tensor(-0.04732352)
Number of Verified Splits: 327 of 560
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.0511937141418457 
BICCOS Cumulative time: 0.46453022956848145
Preprocessing time: 0.015650033950805664 Inference time: 0.03242182731628418 Add cuts time: 0.002672433853149414 Cut analysis time: 0.0004494190216064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04732 (11), -0.04712 (11), -0.04620 (11), -0.04592 (11), -0.04390 (11), -0.04378 (11), -0.04325 (11), -0.04284 (11), -0.04237 (11), -0.04191 (11), -0.04173 (11), -0.04092 (11), -0.04055 (11), -0.04015 (11), -0.03995 (11), -0.03926 (11), -0.03837 (11), -0.03823 (11), -0.03811 (11), -0.03785 (11), 
Length of domains: 233
Time: pickout 0.0049    decision 0.0309    set_bounds 0.0233    solve 0.1723    add 0.0026    
Accumulated time: pickout 0.0176    decision 0.6813    set_bounds 0.1487    solve 1.2862    add 0.6934    
Current (lb-rhs): -0.047323524951934814
896 domains visited
Cumulative time: 3.5181076526641846

BaB round 5
batch: 233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 860] [/input-8, 1748] [/input-8, 1748] [/input-8, 860] [/input-8, 1252] [/input-8, 860] [/input-8, 1932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.055416688323020935
10 lb beta sum: 1.6436958312988281, worst -0.04726976156234741
Time: prepare 0.0092    bound 0.1477    transfer 0.0023    finalize 0.0027    func 0.1648    
Accumulated time: func 1.6389    prepare 0.1084    bound 1.4712    transfer 0.0191    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.65011030) min lb tensor(-0.04724228)
Number of Verified Splits: 276 of 466
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.042778730392456055 
BICCOS Cumulative time: 0.5073089599609375
Preprocessing time: 0.013037443161010742 Inference time: 0.027713298797607422 Add cuts time: 0.00185394287109375 Cut analysis time: 0.00017404556274414062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (12), -0.04704 (12), -0.04380 (12), -0.04369 (12), -0.04230 (12), -0.04184 (12), -0.04047 (12), -0.03987 (12), -0.03823 (12), -0.03811 (12), -0.03799 (12), -0.03782 (12), -0.03665 (12), -0.03558 (12), -0.03480 (12), -0.03452 (12), -0.03351 (12), -0.03331 (12), -0.03322 (12), -0.03306 (12), 
Length of domains: 190
Time: pickout 0.0039    decision 0.0277    set_bounds 0.0201    solve 0.1650    add 0.0157    
Accumulated time: pickout 0.0215    decision 0.7090    set_bounds 0.1688    solve 1.4512    add 0.7091    
Current (lb-rhs): -0.04724228382110596
1086 domains visited
Cumulative time: 3.795081377029419

BaB round 6
batch: 190
splitting decisions: 
split level 0: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1932] [/input-8, 1932] [/input-8, 860] [/input-8, 860] [/input-8, 1932] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05229438841342926

all verified at 2th iter
Time: prepare 0.0075    bound 0.0158    transfer 0.0015    finalize 0.0022    func 0.0294    
Accumulated time: func 1.6683    prepare 0.1161    bound 1.4870    transfer 0.0205    finalize 0.0285    
all_split False
======================Cut inference begins======================
max lb tensor(0.09111722) min lb tensor(0.00300054)
Number of Verified Splits: 380 of 380
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010831594467163086 
BICCOS Cumulative time: 0.5181405544281006
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0052    decision 0.0208    set_bounds 0.0164    solve 0.0295    add 0.0005    
Accumulated time: pickout 0.0267    decision 0.7299    set_bounds 0.1851    solve 1.4806    add 0.7096    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1086 domains visited
Cumulative time: 3.879917860031128


Properties batch 5, size 1
Remaining timeout: 193.56176948547363
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 193.56153297424316
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 193.56150317192078
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 193.56146717071533
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 6.4386 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11565208, -26.29471397, -20.11076927, -23.31661606, -21.61720848,
         -22.97149086, -21.28172302, -23.18593788, -27.03968811, -25.88165855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [697]; unstable size 697; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 697] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 697] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 697] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 311] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.78565788, 4.27323198, 2.01961517, 0.27245486, 1.55622053, 0.05097020,
         1.07475889, 5.46636009, 4.11699820]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0589 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.48653412, -28.85784149, -33.36421204, -32.71415710, -32.16485214,
         -32.94163132, -33.09236145, -31.24285507, -33.00304794, -27.07908058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [755]; unstable size 755; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 755] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 755] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 755] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.82790518, 0.86489141, 4.30059624, 3.81733036, 3.25241184, 3.89844608,
         3.96334553, 2.53978395, 4.38356352]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0383 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 942] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 942] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 298] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78787947,  5.47186089,  3.06105733, -0.50585997,  2.82687831,
          1.17288160,  2.26738644,  3.64541507,  5.32217216]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.35269165, -26.69282150, -19.10937881, -23.07330704, -19.10766220,
          -22.84299278, -21.32702637, -22.39660072, -24.61823463, -26.29825020]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00171661]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0078 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0491 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [787]; unstable size 787; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 787] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 787] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 787] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29445887,  2.55111361, -1.20112336,  0.14969707, -0.85841632,
          0.26714206,  0.60579419,  3.49371624,  1.95312881]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112],
         [-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23219109,  0.17301846]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]],


         [[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0352 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 675] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 675] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 329] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.27801943,  2.64099765,  0.07614517,  0.77937746,  0.49395740,
         -0.89621031,  1.17210221,  0.74582720,  1.35976291]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.68633461, -23.94194031, -20.53064346, -19.07315063, -21.10494423,
          -19.94137764, -18.70578766, -21.84820747, -22.05760574, -22.51838303]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36736298]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.98860359, -29.81665421, -22.90506172, -26.87357140, -25.76964569,
         -27.17270279, -26.79407501, -29.03504753, -24.31199837, -29.65661049]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 508] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 508] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 139] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.01010799, 0.43884718, 4.07559061, 3.17350531, 4.33794880, 3.97197700,
         6.33449650, 1.59434056, 6.97273016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0440 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [796]; unstable size 796; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 796] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 796] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 796] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 160] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.89236927, -0.28250670, -0.08627728,  1.25970435,  0.33654189,
          1.56063449,  2.24391055,  2.57144284,  3.82517886]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.88it/s]100%|██████████| 1/1 [00:00<00:00,  8.87it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.14734077, -27.13224411, -22.18392181, -22.67267036, -24.06332588,
          -23.14534950, -24.43538666, -25.13541222, -25.67602921, -26.70593071],
         [-22.14734077, -27.13224411, -22.18392181, -22.67267036, -24.06332588,
          -23.14534950, -24.43538666, -25.13541222, -25.67602921, -26.70593071]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03658104, 0.52532959]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1154 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.666088104248047
alpha/beta optimization time: 1.2091166973114014
initial alpha-crown bounds: tensor([[ 3.92945433, -0.25881624, -0.04859799,  1.30887055,  0.37676278,
          1.59917831,  2.28565121,  2.62420344,  3.84938145]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.2588162422180176
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61257553100586
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61253595352173
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.25881624]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25881624]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010013580322265625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.258817195892334
10 lb beta sum: 0.0, worst -0.25881779193878174
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 0] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 1578] 
split level 7: [/input-8, 1571] 
split level 8: [/input-8, 595] 
split level 9: [/input-8, 283] 
split level 10: [/input-8, 796] 
split level 11: [/input-12, 58] 
split level 12: [/input-8, 1197] 
split level 13: [/input-8, 1182] 
split level 14: [/input-8, 1590] 
split level 15: [/input-8, 794] 
split level 16: [/input-8, 1573] 
split level 17: [/input-8, 1581] 
split level 18: [/input-8, 470] 
split level 19: [/input-8, 461] 
split level 20: [/input-8, 1612] 
split level 21: [/input-8, 166] 
split level 22: [/input-8, 1637] 
split level 23: [/input, 662] 
split level 24: [/input-8, 1598] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 460] 
split level 27: [/input, 3528] 
split level 28: [/input-8, 309] 
split level 29: [/input-8, 1206] 
split level 30: [/input, 3292] 
split level 31: [/input, 661] 
split level 32: [/input, 3259] 
split level 33: [/input, 954] 
split level 34: [/input, 3513] 
split level 35: [/input, 963] 
split level 36: [/input-8, 1613] 
split level 37: [/input-12, 6] 
split level 38: [/input, 3432] 
split level 39: [/input, 2980] 
split level 40: [/input, 935] 
split level 41: [/input-8, 951] 
split level 42: [/input, 2764] 
split level 43: [/input-8, 246] 
split level 44: [/input, 2762] 
split level 45: [/input, 967] 
split level 46: [/input-8, 473] 
split level 47: [/input, 979] 
split level 48: [/input, 3257] 
split level 49: [/input-8, 274] 
split level 50: [/input, 951] 
split level 51: [/input-8, 1045] 
split level 52: [/input, 2729] 
split level 53: [/input, 3416] 
split level 54: [/input, 420] 
split level 55: [/input, 922] 
split level 56: [/input, 983] 
split level 57: [/input-8, 1622] 
split level 58: [/input, 3244] 
split level 59: [/input, 3399] 
split level 60: [/input, 2780] 
split level 61: [/input, 980] 
split level 62: [/input, 2246] 
split level 63: [/input, 659] 
split level 64: [/input-8, 1804] 
split level 65: [/input-8, 589] 
split level 66: [/input, 971] 
split level 67: [/input, 2231] 
split level 68: [/input, 2104] 
split level 69: [/input, 2120] 
split level 70: [/input, 1942] 
split level 71: [/input-8, 1597] 
split level 72: [/input, 988] 
split level 73: [/input-8, 1614] 
split level 74: [/input-8, 238] 
split level 75: [/input, 972] 
split level 76: [/input, 949] 
split level 77: [/input, 2779] 
split level 78: [/input, 989] 
split level 79: [/input, 583] 
split level 80: [/input, 948] 
split level 81: [/input, 1304] 
split level 82: [/input, 2727] 
split level 83: [/input, 2599] 
split level 84: [/input-8, 1805] 
split level 85: [/input, 2731] 
split level 86: [/input, 2121] 
split level 87: [/input, 379] 
split level 88: [/input-8, 457] 
split level 89: [/input, 3546] 
split level 90: [/input, 990] 
split level 91: [/input-8, 959] 
split level 92: [/input, 332] 
split level 93: [/input, 2796] 
split level 94: [/input, 2520] 
split level 95: [/input, 2135] 
split level 96: [/input-8, 508] 
split level 97: [/input-8, 1921] 
split level 98: [/input, 2486] 
split level 99: [/input, 200] 
split level 100: [/input, 2503] 
split level 101: [/input, 3533] 
split level 102: [/input, 2122] 
split level 103: [/input, 2517] 
split level 104: [/input, 1001] 
split level 105: [/input, 1941] 
split level 106: [/input, 1303] 
split level 107: [/input-8, 1833] 
split level 108: [/input, 228] 
split level 109: [/input, 3564] 
split level 110: [/input, 3256] 
split level 111: [/input, 919] 
split level 112: [/input, 1457] 
split level 113: [/input, 2247] 
split level 114: [/input, 1006] 
split level 115: [/input, 3105] 
split level 116: [/input, 973] 
split level 117: [/input-8, 428] 
split level 118: [/input-8, 369] 
split level 119: [/input, 3563] 
split level 120: [/input-8, 507] 
split level 121: [/input, 2152] 
split level 122: [/input-8, 1604] 
split level 123: [/input, 1963] 
split level 124: [/input, 3467] 
split level 125: [/input, 1944] 
split level 126: [/input, 999] 
split level 127: [/input, 924] 
split level 128: [/input, 2245] 
split level 129: [/input, 3384] 
split level 130: [/input, 2261] 
split level 131: [/input, 193] 
split level 132: [/input, 2504] 
split level 133: [/input, 201] 
split level 134: [/input, 2264] 
split level 135: [/input, 646] 
split level 136: [/input-8, 916] 
split level 137: [/input, 3255] 
split level 138: [/input, 2518] 
split level 139: [/input, 2230] 
split level 140: [/input, 2600] 
split level 141: [/input-8, 61] 
split level 142: [/input, 1322] 
split level 143: [/input, 199] 
split level 144: [/input, 182] 
split level 145: [/input, 2049] 
split level 146: [/input, 232] 
split level 147: [/input, 3032] 
split level 148: [/input, 3089] 
split level 149: [/input, 2501] 
split level 150: [/input, 2734] 
split level 151: [/input, 1943] 
split level 152: [/input, 2249] 
split level 153: [/input, 231] 
split level 154: [/input, 781] 
split level 155: [/input, 892] 
split level 156: [/input, 3452] 
split level 157: [/input, 2153] 
split level 158: [/input, 234] 
split level 159: [/input, 2117] 
split level 160: [/input-8, 1951] 
split level 161: [/input, 2537] 
split level 162: [/input, 2215] 
split level 163: [/input, 2279] 
split level 164: [/input, 2280] 
split level 165: [/input, 3090] 
split level 166: [/input, 227] 
split level 167: [/input, 2357] 
split level 168: [/input, 2343] 
split level 169: [/input, 2515] 
split level 170: [/input, 165] 
split level 171: [/input, 660] 
split level 172: [/input, 676] 
split level 173: [/input, 233] 
split level 174: [/input, 2134] 
split level 175: [/input, 2262] 
split level 176: [/input, 668] 
split level 177: [/input, 3358] 
split level 178: [/input, 3106] 
split level 179: [/input, 2050] 
split level 180: [/input, 2514] 
split level 181: [/input, 230] 
split level 182: [/input, 2535] 
split level 183: [/input, 2761] 
split level 184: [/input, 3289] 
split level 185: [/input, 3373] 
split level 186: [/input, 2051] 
split level 187: [/input, 2232] 
split level 188: [/input, 2061] 
split level 189: [/input, 2052] 
split level 190: [/input, 2521] 
split level 191: [/input, 508] 
split level 192: [/input, 675] 
split level 193: [/input, 2149] 
split level 194: [/input, 2094] 
split level 195: [/input, 2282] 
split level 196: [/input, 3374] 
split level 197: [/input, 1948] 
split level 198: [/input, 2333] 
split level 199: [/input, 2075] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25867652893066406
10 lb beta sum: 0.0, worst -0.25867748260498047
Time: prepare 0.0117    bound 0.0999    transfer 0.0078    finalize 0.0037    func 0.1258    
Accumulated time: func 0.1790    prepare 0.0219    bound 0.1527    transfer 0.0079    finalize 0.0038    
all_split False
======================Cut inference begins======================
max lb tensor(0.15740919) min lb tensor(-0.25867510)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010879755020141602 
BICCOS Cumulative time: 0.010879755020141602
Preprocessing time: 0.01022958755493164 Inference time: 0.0004062652587890625 Add cuts time: 4.2438507080078125e-05 Cut analysis time: 0.0002014636993408203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25248 (1), -0.25241 (1), -0.25232 (1), -0.25226 (1), -0.25213 (1), -0.25183 (1), -0.25180 (1), -0.25179 (1), -0.25179 (1), -0.25166 (1), -0.25146 (1), -0.25112 (1), -0.25061 (1), -0.25037 (1), -0.25018 (1), -0.25011 (1), -0.25003 (1), -0.24996 (1), -0.24988 (1), -0.24896 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5300    set_bounds 0.0110    solve 0.1259    add 0.0706    
Accumulated time: pickout 0.0003    decision 0.5300    set_bounds 0.0110    solve 0.1259    add 0.0706    
Current (lb-rhs): -0.25247955322265625
50 domains visited
Cumulative time: 0.8067374229431152

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 59] [/input-12, 0] [/input-12, 0] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 3: [/input-8, 283] [/input-8, 470] [/input-12, 58] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23920583724975586
10 lb beta sum: 0.19286824762821198, worst -0.2378230094909668
Time: prepare 0.0073    bound 0.1139    transfer 0.0007    finalize 0.0024    func 0.1270    
Accumulated time: func 0.3060    prepare 0.0294    bound 0.2667    transfer 0.0086    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.09562564) min lb tensor(-0.23767424)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012751579284667969 
BICCOS Cumulative time: 0.02363133430480957
Preprocessing time: 0.011774301528930664 Inference time: 0.0005095005035400391 Add cuts time: 0.00019550323486328125 Cut analysis time: 0.0002722740173339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07722 (2), -0.07687 (2), -0.07681 (2), -0.07625 (2), -0.07604 (2), -0.07550 (2), -0.07527 (2), -0.07482 (2), -0.07477 (2), -0.07476 (2), -0.07329 (2), -0.07276 (2), -0.07263 (2), -0.07161 (2), -0.07060 (2), -0.07018 (2), -0.06987 (2), -0.06900 (2), -0.06805 (2), -0.06773 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0195    set_bounds 0.0119    solve 0.1270    add 0.0777    
Accumulated time: pickout 0.0017    decision 0.5494    set_bounds 0.0229    solve 0.2529    add 0.1483    
Current (lb-rhs): -0.07721757888793945
100 domains visited
Cumulative time: 1.0571613311767578

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 0] [/input-12, 12] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-8, 1573] [/input-8, 470] 
split level 3: [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-8, 470] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07463884353637695
10 lb beta sum: 0.3701663911342621, worst -0.09714755415916443
Time: prepare 0.0076    bound 0.1366    transfer 0.0007    finalize 0.0026    func 0.1502    
Accumulated time: func 0.4562    prepare 0.0373    bound 0.4033    transfer 0.0094    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.07089910) min lb tensor(-0.05598035)
Number of Verified Splits: 120 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 16
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.02151656150817871 
BICCOS Cumulative time: 0.04514789581298828
Preprocessing time: 0.011791229248046875 Inference time: 0.0070972442626953125 Add cuts time: 0.0019807815551757812 Cut analysis time: 0.0006473064422607422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02275 (3), -0.02255 (3), -0.02248 (3), -0.02215 (3), -0.02106 (3), -0.02090 (3), -0.02084 (3), -0.02068 (3), -0.02062 (3), -0.02034 (3), -0.01987 (3), -0.01976 (3), -0.01962 (3), -0.01954 (3), -0.01913 (3), -0.01896 (3), -0.01852 (3), -0.01836 (3), -0.01807 (3), -0.01791 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0149    solve 0.1503    add 0.0919    
Accumulated time: pickout 0.0027    decision 0.5685    set_bounds 0.0378    solve 0.4032    add 0.2402    
Current (lb-rhs): -0.022747009992599487
150 domains visited
Cumulative time: 1.356194019317627

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-8, 1581] [/input-8, 1637] [/input-8, 461] [/input-8, 1637] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] 
split level 3: [/input-8, 309] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 470] [/input-8, 470] [/input-8, 470] [/input-8, 470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03354799747467041
10 lb beta sum: 0.35573631525039673, worst -0.12704627215862274
Time: prepare 0.0081    bound 0.1397    transfer 0.0008    finalize 0.0025    func 0.1537    
Accumulated time: func 0.6098    prepare 0.0457    bound 0.5430    transfer 0.0101    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.06036997) min lb tensor(-0.01487470)
Number of Verified Splits: 302 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.033603668212890625 
BICCOS Cumulative time: 0.0787515640258789
Preprocessing time: 0.011568069458007812 Inference time: 0.01354217529296875 Add cuts time: 0.00736236572265625 Cut analysis time: 0.0011310577392578125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0198    set_bounds 0.0161    solve 0.1538    add 0.0262    
Accumulated time: pickout 0.0042    decision 0.5883    set_bounds 0.0539    solve 0.5570    add 0.2663    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  8.83418769e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  4.91170138e-02,  3.02001704e-02,  2.31298674e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26117907e-33,  4.91170138e-02,  3.02001704e-02,  1.29992235e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([-1.26117907e-33,  4.91170138e-02,  4.03592885e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.63814232e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([-1.26117907e-33,  3.43118161e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21267175674438477
10 lb beta sum: 0.4787251949310303, worst -0.21098081767559052
Time: prepare 0.0004    bound 0.1407    transfer 0.0002    finalize 0.0002    func 0.1415    
Accumulated time: func 0.7513    prepare 0.0461    bound 0.6837    transfer 0.0103    finalize 0.0114    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 10] [/input-12, 0] [/input-12, 0] 
split level 1: [/input-8, 1573] [/input-12, 58] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1581] [/input-8, 1581] [/input-12, 58] [/input-8, 283] 
split level 3: [/input-8, 470] [/input-8, 1573] [/input-8, 470] [/input-12, 58] 
split level 4: [/input-8, 461] [/input-8, 470] [/input-8, 461] [/input-8, 470] 
split level 5: [/input-8, 174] [/input-8, 174] [/input-8, 309] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.610125720500946, worst -0.14884203672409058
10 lb beta sum: 0.6100839376449585, worst -0.14864438772201538
Time: prepare 0.0108    bound 0.1498    transfer 0.0012    finalize 0.0013    func 0.1648    
Accumulated time: func 0.9161    prepare 0.0572    bound 0.8335    transfer 0.0115    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.07210311) min lb tensor(-0.14858145)
Number of Verified Splits: 186 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.6589411497116089, worst -0.49019813537597656
10 lb beta sum: 0.7030229568481445, worst -0.08904808759689331
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 21
#cuts 4-6: 22
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.485379695892334 
BICCOS Cumulative time: 0.5641312599182129
Preprocessing time: 0.007920265197753906 Inference time: 0.4701988697052002 Add cuts time: 0.005937814712524414 Cut analysis time: 0.0013227462768554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14858 (6), -0.14641 (6), -0.14633 (6), -0.14357 (6), -0.14326 (6), -0.14240 (6), -0.14114 (6), -0.14070 (6), -0.14052 (6), -0.14026 (6), -0.13773 (6), -0.13734 (6), -0.13549 (6), -0.13373 (6), -0.13293 (6), -0.13012 (6), -0.12525 (6), -0.12449 (6), -0.12302 (6), -0.12281 (6), 
Length of domains: 70
Time: pickout 0.0005    decision 0.0182    set_bounds 0.0208    solve 0.1648    add 0.0021    
Accumulated time: pickout 0.0047    decision 0.6064    set_bounds 0.0747    solve 0.7218    add 0.2684    
Current (lb-rhs): -0.14858144521713257
220 domains visited
Cumulative time: 2.457638740539551

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] 
split level 1: [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14495444297790527
10 lb beta sum: 0.3767719268798828, worst -0.1433841437101364
Time: prepare 0.0055    bound 0.1522    transfer 0.0032    finalize 0.0014    func 0.1641    
Accumulated time: func 1.0802    prepare 0.0629    bound 0.9857    transfer 0.0146    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.00908749) min lb tensor(-0.14334279)
Number of Verified Splits: 24 of 280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.012829780578613281 
BICCOS Cumulative time: 0.5769610404968262
Preprocessing time: 0.008224010467529297 Inference time: 0.0020194053649902344 Add cuts time: 0.0016298294067382812 Cut analysis time: 0.0009565353393554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14334 (8), -0.14110 (8), -0.14107 (8), -0.13804 (8), -0.13794 (8), -0.13689 (8), -0.13555 (8), -0.13512 (8), -0.13497 (8), -0.13473 (8), -0.13461 (8), -0.13236 (8), -0.13234 (8), -0.13216 (8), -0.13176 (8), -0.12960 (8), -0.12920 (8), -0.12859 (8), -0.12795 (8), -0.12743 (8), 
Length of domains: 256
Time: pickout 0.0027    decision 0.0151    set_bounds 0.0133    solve 0.1642    add 0.0012    
Accumulated time: pickout 0.0074    decision 0.6216    set_bounds 0.0879    solve 0.8861    add 0.2696    
Current (lb-rhs): -0.1433427929878235
476 domains visited
Cumulative time: 2.6674985885620117

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1581] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 1581] [/input-8, 1581] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14163494110107422
10 lb beta sum: 0.3946153521537781, worst -0.1400567889213562
Time: prepare 0.0099    bound 0.1712    transfer 0.0076    finalize 0.0024    func 0.1954    
Accumulated time: func 1.2756    prepare 0.0730    bound 1.1569    transfer 0.0223    finalize 0.0166    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02646606) min lb tensor(-0.14002807)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.015092849731445312 
BICCOS Cumulative time: 0.5920538902282715
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14003 (9), -0.13778 (9), -0.13776 (9), -0.13462 (9), -0.13454 (9), -0.13375 (9), -0.13206 (9), -0.13189 (9), -0.13170 (9), -0.13168 (9), -0.13162 (9), -0.13084 (9), -0.12964 (9), -0.12943 (9), -0.12904 (9), -0.12860 (9), -0.12857 (9), -0.12830 (9), -0.12649 (9), -0.12648 (9), 
Length of domains: 512
Time: pickout 0.0042    decision 0.0232    set_bounds 0.0220    solve 0.1955    add 0.0052    
Accumulated time: pickout 0.0116    decision 0.6448    set_bounds 0.1099    solve 1.0816    add 0.2748    
Current (lb-rhs): -0.14002807438373566
988 domains visited
Cumulative time: 2.9334657192230225

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1637] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4695902466773987, worst -0.13707800209522247
10 lb beta sum: 0.4695902466773987, worst -0.13704045116901398
Time: prepare 0.0437    bound 0.1660    transfer 0.0038    finalize 0.0061    func 0.2262    
Accumulated time: func 1.5018    prepare 0.1169    bound 1.3229    transfer 0.0261    finalize 0.0227    
all_split False
======================Cut inference begins======================
max lb tensor(0.00448935) min lb tensor(-0.13702299)
Number of Verified Splits: 12 of 1024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 12
#cuts 4-6: 21
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03458428382873535 
BICCOS Cumulative time: 0.6266381740570068
Preprocessing time: 0.03090381622314453 Inference time: 0.0013377666473388672 Add cuts time: 0.0012786388397216797 Cut analysis time: 0.0010640621185302734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13702 (10), -0.13478 (10), -0.13475 (10), -0.13170 (10), -0.13161 (10), -0.13125 (10), -0.12931 (10), -0.12921 (10), -0.12907 (10), -0.12882 (10), -0.12825 (10), -0.12769 (10), -0.12747 (10), -0.12648 (10), -0.12601 (10), -0.12598 (10), -0.12545 (10), -0.12544 (10), -0.12541 (10), -0.12536 (10), 
Length of domains: 1012
Time: pickout 0.0070    decision 0.0376    set_bounds 0.0459    solve 0.2272    add 0.0045    
Accumulated time: pickout 0.0185    decision 0.6823    set_bounds 0.1559    solve 1.3088    add 0.2793    
Current (lb-rhs): -0.1370229870080948
2000 domains visited
Cumulative time: 3.2915093898773193

BaB round 5
batch: 1012
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 460] [/input-8, 1612] [/input-8, 1612] [/input-8, 1581] [/input-8, 1637] [/input-8, 1612] [/input-8, 1612] [/input-8, 796] [/input-8, 1571] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1350257396697998
10 lb beta sum: 0.39087337255477905, worst -0.1335083693265915
Time: prepare 0.0380    bound 0.2349    transfer 0.0083    finalize 0.0092    func 0.3035    
Accumulated time: func 1.8053    prepare 0.1552    bound 1.5578    transfer 0.0344    finalize 0.0319    
all_split False
======================Cut inference begins======================
max lb tensor(0.02287096) min lb tensor(-0.13350075)
Number of Verified Splits: 169 of 2024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 12
#cuts 4-6: 27
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.08666729927062988 
BICCOS Cumulative time: 0.7133054733276367
Preprocessing time: 0.061261892318725586 Inference time: 0.01963520050048828 Add cuts time: 0.00437617301940918 Cut analysis time: 0.001394033432006836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13350 (11), -0.13119 (11), -0.13101 (11), -0.12968 (11), -0.12862 (11), -0.12830 (11), -0.12786 (11), -0.12765 (11), -0.12746 (11), -0.12570 (11), -0.12559 (11), -0.12547 (11), -0.12546 (11), -0.12534 (11), -0.12452 (11), -0.12407 (11), -0.12404 (11), -0.12362 (11), -0.12353 (11), -0.12299 (11), 
Length of domains: 1855
Time: pickout 0.0153    decision 0.0750    set_bounds 0.0866    solve 0.3045    add 0.0154    
Accumulated time: pickout 0.0338    decision 0.7573    set_bounds 0.2424    solve 1.6133    add 0.2947    
Current (lb-rhs): -0.13350075483322144
3855 domains visited
Cumulative time: 3.8786826133728027

BaB round 6
batch: 1855
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 796] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 1182] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 174] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1319655179977417
10 lb beta sum: 0.3898150324821472, worst -0.13044385612010956
Time: prepare 0.0809    bound 0.3685    transfer 0.0280    finalize 0.0194    func 0.5215    
Accumulated time: func 2.3268    prepare 0.2364    bound 1.9263    transfer 0.0624    finalize 0.0513    
all_split False
======================Cut inference begins======================
max lb tensor(0.03378767) min lb tensor(-0.13044035)
Number of Verified Splits: 374 of 3710
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 12
#cuts 4-6: 32
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.17674851417541504 
BICCOS Cumulative time: 0.8900539875030518
Preprocessing time: 0.11452174186706543 Inference time: 0.04782247543334961 Add cuts time: 0.012119531631469727 Cut analysis time: 0.0022847652435302734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13044 (12), -0.12809 (12), -0.12754 (12), -0.12752 (12), -0.12616 (12), -0.12561 (12), -0.12539 (12), -0.12532 (12), -0.12522 (12), -0.12517 (12), -0.12495 (12), -0.12431 (12), -0.12341 (12), -0.12338 (12), -0.12321 (12), -0.12307 (12), -0.12279 (12), -0.12243 (12), -0.12233 (12), -0.12223 (12), 
Length of domains: 3336
Time: pickout 0.0238    decision 0.1188    set_bounds 0.3865    solve 0.5222    add 0.0191    
Accumulated time: pickout 0.0576    decision 0.8761    set_bounds 0.6289    solve 2.1355    add 0.3138    
Current (lb-rhs): -0.130440354347229
7191 domains visited
Cumulative time: 5.1372971534729

BaB round 7
batch: 3336
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input-8, 174] [/input-8, 1571] [/input-8, 1571] [/input-8, 309] [/input-8, 1637] [/input, 935] [/input-8, 460] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1306595802307129
10 lb beta sum: 0.3872150778770447, worst -0.12913362681865692
Time: prepare 0.1351    bound 0.5946    transfer 0.0194    finalize 0.0364    func 0.8285    
Accumulated time: func 3.1553    prepare 0.3717    bound 2.5210    transfer 0.0818    finalize 0.0877    
all_split False
======================Cut inference begins======================
max lb tensor(0.03464973) min lb tensor(-0.12912589)
Number of Verified Splits: 783 of 6672
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 77.
#cuts 1-3: 12
#cuts 4-6: 33
#cuts 7-9: 31
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.35262489318847656 
BICCOS Cumulative time: 1.2426788806915283
Preprocessing time: 0.21436381340026855 Inference time: 0.10544776916503906 Add cuts time: 0.029526233673095703 Cut analysis time: 0.003287076950073242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12621 (13), -0.12619 (13), -0.12484 (13), -0.12430 (13), -0.12406 (13), -0.12401 (13), -0.12390 (13), -0.12376 (13), -0.12298 (13), -0.12229 (13), -0.12209 (13), -0.12207 (13), -0.12191 (13), -0.12175 (13), -0.12093 (13), -0.12091 (13), -0.12077 (13), -0.12073 (13), 
Length of domains: 5889
Time: pickout 0.0440    decision 0.2053    set_bounds 0.4706    solve 0.8307    add 0.0168    
Accumulated time: pickout 0.1016    decision 1.0815    set_bounds 1.0996    solve 2.9662    add 0.3306    
Current (lb-rhs): -0.12912589311599731
13080 domains visited
Cumulative time: 7.0736403465271

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1637] [/input-8, 460] [/input-8, 1571] [/input-8, 460] [/input-8, 1637] [/input-8, 1182] [/input-8, 309] [/input-8, 1571] [/input-8, 174] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12699997425079346
10 lb beta sum: 0.3860253691673279, worst -0.1254228949546814
Time: prepare 0.1702    bound 0.7111    transfer 0.0518    finalize 0.2449    func 1.2315    
Accumulated time: func 4.3868    prepare 0.5422    bound 3.2320    transfer 0.1336    finalize 0.3326    
all_split False
======================Cut inference begins======================
max lb tensor(0.02489400) min lb tensor(-0.12540288)
Number of Verified Splits: 1169 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 100.
#cuts 1-3: 12
#cuts 4-6: 41
#cuts 7-9: 45
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.4950978755950928 
BICCOS Cumulative time: 1.737776756286621
Preprocessing time: 0.2767632007598877 Inference time: 0.1752021312713623 Add cuts time: 0.038564443588256836 Cut analysis time: 0.0045680999755859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12619 (13), -0.12540 (14), -0.12430 (13), -0.12407 (14), -0.12376 (13), -0.12328 (14), -0.12324 (14), -0.12312 (14), -0.12298 (13), -0.12229 (13), -0.12209 (13), -0.12207 (13), -0.12113 (14), -0.12098 (14), -0.12093 (13), -0.12073 (13), -0.12013 (14), -0.12011 (13), 
Length of domains: 8816
Time: pickout 0.0503    decision 0.3883    set_bounds 0.3696    solve 1.2332    add 0.0282    
Accumulated time: pickout 0.1519    decision 1.4697    set_bounds 1.4692    solve 4.1994    add 0.3587    
Current (lb-rhs): -0.12912589311599731
20103 domains visited
current_vram/total_varm: 12.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.66616678237915

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1637] [/input-8, 460] [/input-8, 1571] [/input-8, 1637] [/input-8, 1182] [/input-8, 1613] [/input-8, 1819] [/input-8, 1571] [/input-8, 796] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12989377975463867
10 lb beta sum: 0.38532543182373047, worst -0.1283530294895172
Time: prepare 0.3375    bound 1.3494    transfer 0.0907    finalize 0.1035    func 1.9880    
Accumulated time: func 6.3748    prepare 0.8800    bound 4.5814    transfer 0.2243    finalize 0.4361    
all_split False
======================Cut inference begins======================
max lb tensor(0.03260273) min lb tensor(-0.12834755)
Number of Verified Splits: 2849 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 160.
#cuts 1-3: 13
#cuts 4-6: 55
#cuts 7-9: 87
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 1.3113181591033936 
BICCOS Cumulative time: 3.0490949153900146
Preprocessing time: 0.531376838684082 Inference time: 0.6719443798065186 Add cuts time: 0.10036373138427734 Cut analysis time: 0.007633209228515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12835 (14), -0.12600 (14), -0.12540 (14), -0.12351 (14), -0.12219 (14), -0.12160 (15), -0.12131 (14), -0.12130 (14), -0.12098 (14), -0.12086 (15), -0.12028 (15), -0.12022 (14), -0.11954 (15), -0.11950 (15), -0.11945 (15), -0.11933 (15), -0.11879 (14), -0.11875 (15), -0.11871 (15), -0.11870 (14), 
Length of domains: 14159
Time: pickout 0.0999    decision 0.6266    set_bounds 0.9299    solve 1.9918    add 0.0391    
Accumulated time: pickout 0.2518    decision 2.0964    set_bounds 2.3990    solve 6.1912    add 0.3979    
Current (lb-rhs): -0.12834754586219788
33638 domains visited
current_vram/total_varm: 22.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.714274406433105

BaB round 10
batch: 14159
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1182] [/input-8, 1573] [/input-8, 1637] [/input-8, 1637] [/input-8, 174] [/input-8, 1819] [/input-8, 1571] [/input-8, 1182] [/input-8, 174] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1261388063430786
10 lb beta sum: 0.3731388449668884, worst -0.12457714974880219
Time: prepare 0.6275    bound 2.4347    transfer 0.1336    finalize 0.1761    func 3.8331    
Accumulated time: func 10.2079    prepare 1.5078    bound 7.0161    transfer 0.3579    finalize 0.6122    
all_split False
======================Cut inference begins======================
max lb tensor(0.17945212) min lb tensor(-0.12455767)
Number of Verified Splits: 6644 of 28318
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 118.
#cuts 1-3: 17
#cuts 4-6: 53
#cuts 7-9: 44
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 2.429687738418579 
BICCOS Cumulative time: 5.478782653808594
Preprocessing time: 0.9186761379241943 Inference time: 1.3427181243896484 Add cuts time: 0.16313552856445312 Cut analysis time: 0.005157947540283203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12456 (15), -0.12382 (15), -0.12222 (15), -0.12161 (15), -0.12148 (15), -0.12087 (15), -0.12025 (15), -0.11974 (15), -0.11899 (15), -0.11857 (16), -0.11840 (15), -0.11807 (15), -0.11776 (15), -0.11766 (15), -0.11756 (16), -0.11754 (15), -0.11750 (15), -0.11725 (16), -0.11684 (16), -0.11680 (15), 
Length of domains: 21674
Time: pickout 0.2261    decision 0.7871    set_bounds 1.7442    solve 3.8377    add 0.0804    
Accumulated time: pickout 0.4779    decision 2.8834    set_bounds 4.1433    solve 10.0289    add 0.4783    
Current (lb-rhs): -0.12455767393112183
55312 domains visited
Cumulative time: 23.938020944595337

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 174] [/input-8, 174] [/input-8, 309] [/input-8, 1819] [/input-8, 1573] [/input-8, 1637] [/input-8, 1573] [/input-12, 8] [/input-8, 1182] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1231154203414917
10 lb beta sum: 0.46343937516212463, worst -0.1215527355670929
Time: prepare 0.7686    bound 2.6876    transfer 0.1447    finalize 0.2331    func 4.0503    
Accumulated time: func 14.2582    prepare 2.2767    bound 9.7038    transfer 0.5026    finalize 0.8453    
all_split False
======================Cut inference begins======================
max lb tensor(0.17817050) min lb tensor(-0.12153213)
Number of Verified Splits: 6663 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 20
#cuts 4-6: 24
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 2.7538580894470215 
BICCOS Cumulative time: 8.232640743255615
Preprocessing time: 1.0853374004364014 Inference time: 1.5242969989776611 Add cuts time: 0.14271926879882812 Cut analysis time: 0.0015044212341308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12153 (16), -0.12052 (16), -0.11980 (16), -0.11947 (16), -0.11919 (16), -0.11858 (16), -0.11854 (17), -0.11817 (16), -0.11757 (16), -0.11754 (17), -0.11745 (16), -0.11723 (16), -0.11722 (17), -0.11712 (16), -0.11705 (16), -0.11684 (16), -0.11682 (17), -0.11671 (16), -0.11652 (16), -0.11651 (16), 
Length of domains: 31395
Time: pickout 0.2376    decision 1.6575    set_bounds 2.2121    solve 4.0569    add 0.0870    
Accumulated time: pickout 0.7155    decision 4.5409    set_bounds 6.3554    solve 14.0858    add 0.5653    
Current (lb-rhs): -0.1215321272611618
81417 domains visited
current_vram/total_varm: 40.4GB/99.9GB, batch_size increase to 32768
Cumulative time: 35.05898571014404

BaB round 12
batch: 31395
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 935] [/input-8, 1819] [/input-8, 1637] [/input, 935] [/input-8, 1819] [/input-8, 174] [/input-8, 1182] [/input-8, 309] [/input-8, 1819] [/input, 935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12175726890563965
10 lb beta sum: 1.0792503356933594, worst -0.12151399254798889
Time: prepare 1.5602    bound 4.8236    transfer 0.2897    finalize 0.4454    func 8.1359    
Accumulated time: func 22.3941    prepare 3.8373    bound 14.5273    transfer 0.7922    finalize 1.2907    
all_split False
======================Cut inference begins======================
max lb tensor(0.65066874) min lb tensor(-0.12150221)
Number of Verified Splits: 51507 of 62790
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 12.364845991134644 
BICCOS Cumulative time: 20.59748673439026
Preprocessing time: 2.0608763694763184 Inference time: 9.541543960571289 Add cuts time: 0.7619969844818115 Cut analysis time: 0.0004286766052246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12150 (17), -0.12049 (17), -0.11977 (17), -0.11942 (17), -0.11916 (17), -0.11855 (17), -0.11815 (17), -0.11754 (17), -0.11743 (17), -0.11708 (17), -0.11682 (17), -0.11668 (17), -0.11647 (17), -0.11566 (17), -0.11534 (17), -0.11495 (17), -0.11460 (17), -0.11447 (17), -0.11445 (17), -0.11433 (17), 
Length of domains: 11283
Time: pickout 0.5606    decision 3.2281    set_bounds 3.8959    solve 8.1466    add 0.0635    
Accumulated time: pickout 1.2761    decision 7.7690    set_bounds 10.2513    solve 22.2323    add 0.6287    
Current (lb-rhs): -0.12150220572948456
92700 domains visited
Cumulative time: 63.96209096908569

BaB round 13
batch: 11283
splitting decisions: 
split level 0: [/input-12, 8] [/input, 935] [/input, 935] [/input-8, 1819] [/input, 935] [/input-8, 1573] [/input-8, 1573] [/input-12, 8] [/input-8, 1819] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1196674108505249
10 lb beta sum: 0.1889483630657196, worst -0.0057246387004852295
Time: prepare 0.5812    bound 0.9835    transfer 0.1080    finalize 0.1425    func 1.9591    
Accumulated time: func 24.3532    prepare 4.4187    bound 15.5108    transfer 0.9002    finalize 1.4332    
all_split False
======================Cut inference begins======================
max lb tensor(0.33852094) min lb tensor(5.06639481e-06)
Number of Verified Splits: 22566 of 22566
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.2177422046661377 
BICCOS Cumulative time: 21.815228939056396
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1983    decision 0.6404    set_bounds 0.9918    solve 1.9648    add 0.0017    
Accumulated time: pickout 1.4745    decision 8.4094    set_bounds 11.2431    solve 24.1971    add 0.6305    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
92700 domains visited
Cumulative time: 69.18596720695496


Properties batch 2, size 1
Remaining timeout: 129.25431060791016
Verifying property 2 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04859799]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04859799]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010156631469726562
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04859626293182373
10 lb beta sum: 0.0, worst -0.048606038093566895
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 59] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 55] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 6] 
split level 9: [/input-8, 796] 
split level 10: [/input-8, 163] 
split level 11: [/input-8, 1045] 
split level 12: [/input-8, 794] 
split level 13: [/input-8, 166] 
split level 14: [/input-8, 470] 
split level 15: [/input-8, 473] 
split level 16: [/input-8, 465] 
split level 17: [/input-8, 497] 
split level 18: [/input-8, 461] 
split level 19: [/input-8, 1651] 
split level 20: [/input-8, 1614] 
split level 21: [/input, 3259] 
split level 22: [/input-8, 813] 
split level 23: [/input, 2950] 
split level 24: [/input, 420] 
split level 25: [/input-8, 595] 
split level 26: [/input, 398] 
split level 27: [/input-8, 460] 
split level 28: [/input-8, 457] 
split level 29: [/input-8, 1622] 
split level 30: [/input, 2764] 
split level 31: [/input-8, 1182] 
split level 32: [/input-8, 506] 
split level 33: [/input, 3292] 
split level 34: [/input-8, 505] 
split level 35: [/input-8, 1609] 
split level 36: [/input-8, 507] 
split level 37: [/input-8, 1921] 
split level 38: [/input-8, 508] 
split level 39: [/input-8, 1613] 
split level 40: [/input-8, 1197] 
split level 41: [/input, 2729] 
split level 42: [/input-8, 1054] 
split level 43: [/input, 901] 
split level 44: [/input, 900] 
split level 45: [/input, 2966] 
split level 46: [/input-8, 916] 
split level 47: [/input-8, 1637] 
split level 48: [/input-8, 1581] 
split level 49: [/input, 3244] 
split level 50: [/input, 583] 
split level 51: [/input, 2762] 
split level 52: [/input-8, 822] 
split level 53: [/input, 3257] 
split level 54: [/input-8, 1604] 
split level 55: [/input, 2761] 
split level 56: [/input-8, 1642] 
split level 57: [/input-8, 1601] 
split level 58: [/input, 2917] 
split level 59: [/input, 3399] 
split level 60: [/input, 2980] 
split level 61: [/input-8, 1014] 
split level 62: [/input-8, 959] 
split level 63: [/input-8, 1062] 
split level 64: [/input, 967] 
split level 65: [/input-8, 951] 
split level 66: [/input, 662] 
split level 67: [/input, 2731] 
split level 68: [/input-8, 367] 
split level 69: [/input-8, 458] 
split level 70: [/input-8, 283] 
split level 71: [/input, 379] 
split level 72: [/input-8, 340] 
split level 73: [/input-8, 1007] 
split level 74: [/input, 3089] 
split level 75: [/input, 3513] 
split level 76: [/input-8, 589] 
split level 77: [/input, 418] 
split level 78: [/input, 2765] 
split level 79: [/input, 892] 
split level 80: [/input, 903] 
split level 81: [/input, 3533] 
split level 82: [/input-8, 174] 
split level 83: [/input, 2780] 
split level 84: [/input-8, 1922] 
split level 85: [/input, 963] 
split level 86: [/input-8, 1975] 
split level 87: [/input, 1354] 
split level 88: [/input, 2599] 
split level 89: [/input, 3105] 
split level 90: [/input, 2779] 
split level 91: [/input, 332] 
split level 92: [/input, 646] 
split level 93: [/input, 2120] 
split level 94: [/input, 1322] 
split level 95: [/input, 1304] 
split level 96: [/input-8, 348] 
split level 97: [/input, 660] 
split level 98: [/input-8, 982] 
split level 99: [/input-8, 382] 
split level 100: [/input, 2321] 
split level 101: [/input, 2919] 
split level 102: [/input, 3227] 
split level 103: [/input, 2600] 
split level 104: [/input, 3416] 
split level 105: [/input, 2121] 
split level 106: [/input, 3090] 
split level 107: [/input, 3256] 
split level 108: [/input, 2854] 
split level 109: [/input, 661] 
split level 110: [/input, 228] 
split level 111: [/input, 2734] 
split level 112: [/input-8, 274] 
split level 113: [/input, 805] 
split level 114: [/input-8, 1612] 
split level 115: [/input, 2916] 
split level 116: [/input-8, 911] 
split level 117: [/input, 948] 
split level 118: [/input, 1303] 
split level 119: [/input, 949] 
split level 120: [/input, 2122] 
split level 121: [/input, 3255] 
split level 122: [/input, 2049] 
split level 123: [/input, 2247] 
split level 124: [/input, 924] 
split level 125: [/input, 929] 
split level 126: [/input, 25] 
split level 127: [/input-8, 1101] 
split level 128: [/input, 973] 
split level 129: [/input-8, 1805] 
split level 130: [/input, 2053] 
split level 131: [/input, 909] 
split level 132: [/input, 3279] 
split level 133: [/input, 2153] 
split level 134: [/input, 3467] 
split level 135: [/input, 2070] 
split level 136: [/input, 945] 
split level 137: [/input, 2796] 
split level 138: [/input-8, 1573] 
split level 139: [/input, 417] 
split level 140: [/input, 3202] 
split level 141: [/input, 3564] 
split level 142: [/input, 3563] 
split level 143: [/input, 2246] 
split level 144: [/input, 3373] 
split level 145: [/input-8, 1923] 
split level 146: [/input, 2322] 
split level 147: [/input, 328] 
split level 148: [/input, 796] 
split level 149: [/input, 935] 
split level 150: [/input, 1487] 
split level 151: [/input, 2714] 
split level 152: [/input, 300] 
split level 153: [/input, 3106] 
split level 154: [/input, 2117] 
split level 155: [/input, 2051] 
split level 156: [/input, 2373] 
split level 157: [/input, 983] 
split level 158: [/input, 2727] 
split level 159: [/input, 37] 
split level 160: [/input, 3226] 
split level 161: [/input, 676] 
split level 162: [/input, 2323] 
split level 163: [/input, 781] 
split level 164: [/input, 2334] 
split level 165: [/input, 3358] 
split level 166: [/input, 2052] 
split level 167: [/input, 402] 
split level 168: [/input, 919] 
split level 169: [/input, 3091] 
split level 170: [/input, 227] 
split level 171: [/input-8, 2015] 
split level 172: [/input, 2050] 
split level 173: [/input, 22] 
split level 174: [/input, 230] 
split level 175: [/input, 26] 
split level 176: [/input, 2503] 
split level 177: [/input, 1471] 
split level 178: [/input, 77] 
split level 179: [/input, 2152] 
split level 180: [/input, 2337] 
split level 181: [/input, 3107] 
split level 182: [/input, 3289] 
split level 183: [/input, 2884] 
split level 184: [/input, 182] 
split level 185: [/input, 3186] 
split level 186: [/input, 2054] 
split level 187: [/input, 232] 
split level 188: [/input, 2324] 
split level 189: [/input, 2061] 
split level 190: [/input, 668] 
split level 191: [/input, 2372] 
split level 192: [/input, 2341] 
split level 193: [/input, 3374] 
split level 194: [/input, 2075] 
split level 195: [/input, 2333] 
split level 196: [/input, 2330] 
split level 197: [/input, 2883] 
split level 198: [/input-8, 2007] 
split level 199: [/input, 2371] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.048501789569854736
10 lb beta sum: 0.0, worst -0.048505425453186035
Time: prepare 0.0119    bound 0.1009    transfer 0.0085    finalize 0.0062    func 0.1303    
Accumulated time: func 0.1844    prepare 0.0219    bound 0.1546    transfer 0.0086    finalize 0.0064    
all_split False
======================Cut inference begins======================
max lb tensor(0.38106370) min lb tensor(-0.04849851)
Number of Verified Splits: 10 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01109623908996582 
BICCOS Cumulative time: 0.01109623908996582
Preprocessing time: 0.010344505310058594 Inference time: 0.0004248619079589844 Add cuts time: 0.00013518333435058594 Cut analysis time: 0.00019168853759765625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5175    set_bounds 0.0085    solve 0.1303    add 0.0110    
Accumulated time: pickout 0.0003    decision 0.5175    set_bounds 0.0085    solve 0.1303    add 0.0110    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12]), tensor([-1.]), tensor([0]), tensor([-1.26117907e-33]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12]), tensor([1.]), tensor([0]), tensor([6.96210867e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.011164247989654541

all verified at 0th iter
Time: prepare 0.0003    bound 0.0045    transfer 0.0001    finalize 0.0002    func 0.0051    
Accumulated time: func 0.1896    prepare 0.0223    bound 0.1591    transfer 0.0087    finalize 0.0065    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 128.26666069030762
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 128.26659154891968
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 128.2665674686432
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 128.2665457725525
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 128.2665238380432
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 128.26650285720825
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 71.7335 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 288, 1, 674] with unstable size 287 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 674] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [287]; unstable size 287; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 287] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81797135, -0.16427040,  0.28392220, -0.02352804,  0.05720711,
          0.13988930,  0.34796524,  2.02355814, -0.78494501]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]100%|██████████| 1/1 [00:00<00:00,  8.65it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.01829529, -19.11191368, -19.11120224, -18.61349297, -18.97978783,
          -19.01415634, -17.75732231, -19.74451256, -21.61842537, -18.24022865],
         [-20.01829529, -19.11191368, -19.11120224, -18.61349297, -18.97978783,
          -19.01415634, -17.75732231, -19.74451256, -21.61842537, -18.24022865]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.35459137, 0.85617065, 0.48290634]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1186 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.675459861755371
alpha/beta optimization time: 1.2290613651275635
initial alpha-crown bounds: tensor([[ 0.93886685,  0.00690508,  0.35141182,  0.04002118,  0.13587236,
          0.21446025,  0.44984037,  2.16908240, -0.63100052]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6310005187988281
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58115649223328
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58111810684204
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58109545707703
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.58107566833496
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.58105731010437
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.58103847503662
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.58101987838745
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.58100056648254
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.58098196983337
Verifying property 8 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.63100052]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
        -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.63100052]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 674
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 282
Node /15 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 987
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.679794311523438e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6309976577758789
10 lb beta sum: 0.0, worst -0.6310110092163086
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0532    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 7] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 86] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 59] 
split level 8: [/input-8, 868] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 15] 
split level 11: [/input-12, 14] 
split level 12: [/input-8, 870] 
split level 13: [/input-8, 36] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 467] 
split level 16: [/input-8, 1057] 
split level 17: [/input-8, 438] 
split level 18: [/input-8, 877] 
split level 19: [/input-8, 1379] 
split level 20: [/input, 2950] 
split level 21: [/input-8, 1126] 
split level 22: [/input-8, 149] 
split level 23: [/input-8, 430] 
split level 24: [/input-8, 1563] 
split level 25: [/input, 2949] 
split level 26: [/input-8, 35] 
split level 27: [/input-8, 883] 
split level 28: [/input-8, 1380] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 466] 
split level 32: [/input-8, 382] 
split level 33: [/input-8, 1571] 
split level 34: [/input-8, 1378] 
split level 35: [/input-8, 461] 
split level 36: [/input-8, 451] 
split level 37: [/input-8, 34] 
split level 38: [/input-8, 1124] 
split level 39: [/input-8, 442] 
split level 40: [/input-8, 1061] 
split level 41: [/input-8, 1044] 
split level 42: [/input-8, 1036] 
split level 43: [/input-8, 1053] 
split level 44: [/input, 2916] 
split level 45: [/input-8, 1388] 
split level 46: [/input-8, 1370] 
split level 47: [/input-8, 1628] 
split level 48: [/input, 389] 
split level 49: [/input-8, 944] 
split level 50: [/input-8, 1387] 
split level 51: [/input-8, 1027] 
split level 52: [/input-8, 1562] 
split level 53: [/input-8, 773] 
split level 54: [/input-8, 413] 
split level 55: [/input-8, 1509] 
split level 56: [/input-8, 1381] 
split level 57: [/input-8, 441] 
split level 58: [/input, 935] 
split level 59: [/input-8, 1382] 
split level 60: [/input-8, 182] 
split level 61: [/input-8, 1738] 
split level 62: [/input-8, 125] 
split level 63: [/input-8, 179] 
split level 64: [/input, 887] 
split level 65: [/input-8, 1358] 
split level 66: [/input-8, 945] 
split level 67: [/input-8, 1620] 
split level 68: [/input-8, 1355] 
split level 69: [/input-8, 884] 
split level 70: [/input-8, 446] 
split level 71: [/input-8, 119] 
split level 72: [/input-8, 1369] 
split level 73: [/input-8, 1386] 
split level 74: [/input-8, 1389] 
split level 75: [/input-12, 56] 
split level 76: [/input-12, 57] 
split level 77: [/input-8, 1109] 
split level 78: [/input, 650] 
split level 79: [/input-8, 955] 
split level 80: [/input, 343] 
split level 81: [/input, 138] 
split level 82: [/input-8, 1390] 
split level 83: [/input-8, 1612] 
split level 84: [/input-8, 410] 
split level 85: [/input-8, 212] 
split level 86: [/input-8, 20] 
split level 87: [/input, 937] 
split level 88: [/input, 155] 
split level 89: [/input-8, 140] 
split level 90: [/input, 134] 
split level 91: [/input, 916] 
split level 92: [/input, 2743] 
split level 93: [/input, 1481] 
split level 94: [/input-8, 1359] 
split level 95: [/input-8, 1621] 
split level 96: [/input, 117] 
split level 97: [/input-8, 585] 
split level 98: [/input-8, 402] 
split level 99: [/input, 1453] 
split level 100: [/input, 1451] 
split level 101: [/input, 156] 
split level 102: [/input-8, 1613] 
split level 103: [/input-8, 1739] 
split level 104: [/input-8, 1385] 
split level 105: [/input-8, 863] 
split level 106: [/input-8, 304] 
split level 107: [/input, 1499] 
split level 108: [/input, 917] 
split level 109: [/input-8, 1247] 
split level 110: [/input, 169] 
split level 111: [/input-8, 403] 
split level 112: [/input, 116] 
split level 113: [/input-8, 1291] 
split level 114: [/input, 1454] 
split level 115: [/input, 3363] 
split level 116: [/input-8, 2027] 
split level 117: [/input, 3009] 
split level 118: [/input-8, 1398] 
split level 119: [/input-8, 1747] 
split level 120: [/input-8, 431] 
split level 121: [/input-8, 412] 
split level 122: [/input-8, 1077] 
split level 123: [/input, 1303] 
split level 124: [/input, 885] 
split level 125: [/input, 3229] 
split level 126: [/input-8, 885] 
split level 127: [/input, 3252] 
split level 128: [/input-8, 1526] 
split level 129: [/input, 181] 
split level 130: [/input-8, 404] 
split level 131: [/input, 2757] 
split level 132: [/input-8, 218] 
split level 133: [/input-8, 235] 
split level 134: [/input-8, 1678] 
split level 135: [/input-8, 733] 
split level 136: [/input-8, 1329] 
split level 137: [/input, 3292] 
split level 138: [/input, 102] 
split level 139: [/input, 3273] 
split level 140: [/input, 1514] 
split level 141: [/input-8, 220] 
split level 142: [/input, 150] 
split level 143: [/input-8, 1670] 
split level 144: [/input, 130] 
split level 145: [/input, 2716] 
split level 146: [/input, 2765] 
split level 147: [/input-8, 447] 
split level 148: [/input-8, 407] 
split level 149: [/input, 2739] 
split level 150: [/input, 857] 
split level 151: [/input-8, 578] 
split level 152: [/input-8, 1622] 
split level 153: [/input-8, 176] 
split level 154: [/input, 2667] 
split level 155: [/input-8, 440] 
split level 156: [/input, 649] 
split level 157: [/input, 648] 
split level 158: [/input-8, 969] 
split level 159: [/input, 2751] 
split level 160: [/input-8, 1331] 
split level 161: [/input-8, 229] 
split level 162: [/input-8, 278] 
split level 163: [/input, 216] 
split level 164: [/input-8, 411] 
split level 165: [/input, 905] 
split level 166: [/input, 165] 
split level 167: [/input-8, 87] 
split level 168: [/input, 876] 
split level 169: [/input, 841] 
split level 170: [/input-8, 1219] 
split level 171: [/input-8, 296] 
split level 172: [/input, 2875] 
split level 173: [/input-8, 59] 
split level 174: [/input-8, 1539] 
split level 175: [/input-8, 961] 
split level 176: [/input, 235] 
split level 177: [/input-8, 174] 
split level 178: [/input-8, 62] 
split level 179: [/input, 1509] 
split level 180: [/input-8, 439] 
split level 181: [/input-8, 909] 
split level 182: [/input, 956] 
split level 183: [/input-8, 211] 
split level 184: [/input-8, 355] 
split level 185: [/input, 2766] 
split level 186: [/input, 2674] 
split level 187: [/input, 844] 
split level 188: [/input, 2720] 
split level 189: [/input, 1767] 
split level 190: [/input-8, 928] 
split level 191: [/input-8, 284] 
split level 192: [/input-8, 14] 
split level 193: [/input, 24] 
split level 194: [/input, 939] 
split level 195: [/input-8, 130] 
split level 196: [/input, 1165] 
split level 197: [/input, 1768] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1130] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6308526992797852
10 lb beta sum: 0.0, worst -0.6308555603027344
Time: prepare 0.0115    bound 0.1001    transfer 0.0039    finalize 0.0027    func 0.1207    
Accumulated time: func 0.1743    prepare 0.0216    bound 0.1533    transfer 0.0040    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.33893442) min lb tensor(-0.63083982)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010462760925292969 
BICCOS Cumulative time: 0.010462760925292969
Preprocessing time: 0.009814977645874023 Inference time: 0.0002841949462890625 Add cuts time: 0.00010156631469726562 Cut analysis time: 0.0002620220184326172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.60489 (1), -0.60481 (1), -0.60424 (1), -0.60408 (1), -0.60220 (1), -0.60144 (1), -0.60138 (1), -0.60124 (1), -0.60065 (1), -0.59956 (1), -0.59949 (1), -0.59679 (1), -0.59613 (1), -0.59579 (1), -0.59523 (1), -0.59267 (1), -0.59182 (1), -0.59134 (1), -0.59101 (1), -0.59061 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5240    set_bounds 0.0085    solve 0.1208    add 0.0693    
Accumulated time: pickout 0.0003    decision 0.5240    set_bounds 0.0085    solve 0.1208    add 0.0693    
Current (lb-rhs): -0.6048884391784668
50 domains visited
Cumulative time: 0.7958357334136963

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 20] [/input-12, 18] 
split level 2: [/input-12, 20] [/input-12, 86] [/input-12, 86] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 20] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5662155151367188
10 lb beta sum: 1.4109927415847778, worst -0.4495916962623596
Time: prepare 0.0073    bound 0.1189    transfer 0.0008    finalize 0.0026    func 0.1320    
Accumulated time: func 0.3064    prepare 0.0291    bound 0.2722    transfer 0.0047    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.56413412) min lb tensor(-0.44908017)
Number of Verified Splits: 152 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.01980876922607422 
BICCOS Cumulative time: 0.030271530151367188
Preprocessing time: 0.011518239974975586 Inference time: 0.005837678909301758 Add cuts time: 0.0021457672119140625 Cut analysis time: 0.0003070831298828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21996 (2), -0.21952 (2), -0.21895 (2), -0.21651 (2), -0.21570 (2), -0.21541 (2), -0.21508 (2), -0.21464 (2), -0.21432 (2), -0.21055 (2), -0.20996 (2), -0.20925 (2), -0.20922 (2), -0.20887 (2), -0.20832 (2), -0.20691 (2), -0.20646 (2), -0.20531 (2), -0.20491 (2), -0.20347 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0120    solve 0.1321    add 0.0857    
Accumulated time: pickout 0.0013    decision 0.5435    set_bounds 0.0204    solve 0.2529    add 0.1550    
Current (lb-rhs): -0.21996045112609863
100 domains visited
Cumulative time: 1.0661418437957764

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 7] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 32] [/input-12, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3658003807067871
10 lb beta sum: 1.3766353130340576, worst -0.2060391902923584
Time: prepare 0.0069    bound 0.1175    transfer 0.0008    finalize 0.0024    func 0.1300    
Accumulated time: func 0.4364    prepare 0.0363    bound 0.3897    transfer 0.0055    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.62426043) min lb tensor(-0.20534647)
Number of Verified Splits: 224 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.02570486068725586 
BICCOS Cumulative time: 0.05597639083862305
Preprocessing time: 0.011219978332519531 Inference time: 0.009421586990356445 Add cuts time: 0.0046346187591552734 Cut analysis time: 0.0004286766052246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10091 (3), -0.09691 (3), -0.09672 (3), -0.09536 (3), -0.07721 (3), -0.07668 (3), -0.07480 (3), -0.07458 (3), -0.07423 (3), -0.07399 (3), -0.07382 (3), -0.06945 (3), -0.06890 (3), -0.06865 (3), -0.06779 (3), -0.06768 (3), -0.06608 (3), -0.06457 (3), -0.06450 (3), -0.06291 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0153    solve 0.1301    add 0.0957    
Accumulated time: pickout 0.0023    decision 0.5628    set_bounds 0.0357    solve 0.3830    add 0.2507    
Current (lb-rhs): -0.10091042518615723
150 domains visited
Cumulative time: 1.3534114360809326

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 3: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2571721076965332
10 lb beta sum: 2.041074752807617, worst -0.07906222343444824
Time: prepare 0.0072    bound 0.1338    transfer 0.0008    finalize 0.0021    func 0.1469    
Accumulated time: func 0.5833    prepare 0.0437    bound 0.5234    transfer 0.0062    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.44942141) min lb tensor(-0.07731128)
Number of Verified Splits: 347 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 34
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03847622871398926 
BICCOS Cumulative time: 0.0944526195526123
Preprocessing time: 0.011213302612304688 Inference time: 0.014827489852905273 Add cuts time: 0.011595487594604492 Cut analysis time: 0.0008399486541748047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02959 (4), -0.02958 (4), -0.02957 (4), -0.02957 (4), -0.02955 (4), -0.02954 (4), -0.02952 (4), -0.02949 (4), -0.02921 (4), -0.02921 (4), -0.02919 (4), -0.02914 (4), -0.02894 (4), -0.02893 (4), -0.02891 (4), -0.02883 (4), -0.02701 (4), -0.02701 (4), -0.02700 (4), -0.02699 (4), 
Length of domains: 32
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0152    solve 0.1469    add 0.2500    
Accumulated time: pickout 0.0033    decision 0.5820    set_bounds 0.0509    solve 0.5300    add 0.5007    
Current (lb-rhs): -0.02958536148071289
182 domains visited
Cumulative time: 1.8245389461517334

Shallow-BaB round 5
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 18] [/input-12, 18] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 7] [/input-12, 7] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 4: [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] 
split level 5: [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23261594772338867

all verified at 5th iter
Time: prepare 0.0067    bound 0.0441    transfer 0.0015    finalize 0.0027    func 0.0574    
Accumulated time: func 0.6407    prepare 0.0508    bound 0.5676    transfer 0.0077    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.52575541) min lb tensor(0.00087893)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 34
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.0379941463470459 
BICCOS Cumulative time: 0.1324467658996582
Preprocessing time: 0.010890483856201172 Inference time: 0.01905989646911621 Add cuts time: 0.00706171989440918 Cut analysis time: 0.000982046127319336
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0252    set_bounds 0.0134    solve 0.0575    add 0.0294    
Accumulated time: pickout 0.0043    decision 0.6073    set_bounds 0.0643    solve 0.5875    add 0.5301    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
182 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([-1.26117907e-33,  1.89148352e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1.,  1.]), tensor([0, 0]), tensor([-1.26117907e-33,  6.27066672e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  3.64285648e-01,  1.37294997e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([-1.26118054e-33,  3.64285648e-01,  4.53523576e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26118054e-33,  2.65588224e-01,  1.45734951e-01,  1.78809632e-02,
         3.45725119e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26118054e-33,  2.65588224e-01,  1.45734951e-01,  1.78809632e-02,
         3.12326420e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  2.65588224e-01,  1.45734951e-01,  4.82241690e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26118054e-33,  2.65588224e-01,  1.41787335e-01,  1.91251505e-02,
         3.43751252e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([-1.26118054e-33,  2.65588224e-01,  1.41787335e-01,  1.91251505e-02,
         3.05260886e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([-1.26118054e-33,  2.65588224e-01,  1.41787335e-01,  4.61320817e-01]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.275270938873291

all verified at 3th iter
Time: prepare 0.0005    bound 0.0315    transfer 0.0001    finalize 0.0002    func 0.0324    
Accumulated time: func 0.6730    prepare 0.0513    bound 0.5991    transfer 0.0079    finalize 0.0127    
After pruning, left:  0

Back to Regular BaB

Result: safe in 3.7694 seconds
############# Summary #############
Final verified acc: 55.00000000000001% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 110 , total falsified (unsafe/sat): 85 , timeout: 5
mean time for ALL instances (total 200):8.435119918829713, max time: 223.93421936035156
mean time for verified SAFE instances(total 110): 5.523491974310441, max time: 172.88062810897827
mean time for verified (SAFE + UNSAFE) instances (total 195): 3.139690740291889, max time: [2.1651039123535156, 10.05057168006897, 0.05142402648925781, 0.027874231338500977, 0.03098440170288086, 0.04926156997680664, 0.05165362358093262, 0.2951202392578125, 2.3667829036712646, 0.05510759353637695, 0.042305707931518555, 0.04706835746765137, 3.6868326663970947, 0.06343436241149902, 0.06453227996826172, 0.05584859848022461, 0.042104244232177734, 0.062064170837402344, 0.04279303550720215, 0.03333163261413574, 2.2490971088409424, 0.04567694664001465, 0.030901193618774414, 0.05206489562988281, 0.04837632179260254, 0.05792355537414551, 2.550457239151001, 0.04731416702270508, 0.04809308052062988, 0.056145429611206055, 2.293445110321045, 0.04723215103149414, 22.35183334350586, 172.88062810897827, 0.06787872314453125, 0.04332280158996582, 2.5877623558044434, 53.6572527885437, 2.7978715896606445, 0.05572795867919922, 0.05097556114196777, 0.03288435935974121, 0.04897904396057129, 0.03209257125854492, 0.042771339416503906, 0.05015254020690918, 5.934110879898071, 0.06294584274291992, 0.05013394355773926, 23.564773321151733, 0.045720815658569336, 0.06307148933410645, 0.06207466125488281, 2.4217286109924316, 2.424469232559204, 0.2235090732574463, 0.028135299682617188, 2.4731857776641846, 0.0423736572265625, 0.03051018714904785, 0.029310226440429688, 2.77730393409729, 0.04647636413574219, 0.04991412162780762, 0.043830156326293945, 0.050943851470947266, 0.028255939483642578, 2.4878523349761963, 0.04983019828796387, 154.6327302455902, 0.03283810615539551, 2.2999086380004883, 0.02638697624206543, 3.480689764022827, 0.047905683517456055, 11.423346519470215, 0.03764176368713379, 0.04394030570983887, 0.04554605484008789, 0.03196096420288086, 0.0631411075592041, 0.03469967842102051, 0.05633068084716797, 0.027884960174560547, 0.04128742218017578, 7.5075671672821045, 0.04564547538757324, 2.4657633304595947, 0.06411314010620117, 0.06414222717285156, 0.046652793884277344, 0.03281903266906738, 0.04188084602355957, 0.45410966873168945, 0.03135490417480469, 0.03607749938964844, 0.0377047061920166, 3.3520665168762207, 0.0691671371459961, 4.961187124252319, 0.07815337181091309, 5.870765686035156, 3.4549314975738525, 0.05951666831970215, 6.438627481460571, 0.058930158615112305, 0.038275957107543945, 0.043993234634399414, 71.73354840278625, 3.769364833831787]
mean time for verified SAFE + TIMEOUT instances (total 115): 14.629291225516278, max time: [223.93421936035156, 214.87622046470642, 221.27012300491333, 204.02055525779724, 210.68325567245483] 
mean time for verified UNSAFE instances (total 85): 0.05477149626787971, max time: 0.11527872085571289
safe-incomplete (total 79), index: [0, 7, 8, 11, 14, 17, 18, 20, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 42, 47, 49, 51, 52, 55, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 85, 86, 89, 98, 103, 107, 109, 110, 114, 115, 116, 117, 118, 121, 131, 133, 136, 139, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 192, 193, 197]
unsafe-pgd (total 85), index: [1, 3, 4, 5, 6, 9, 10, 12, 15, 16, 21, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 58, 61, 63, 65, 72, 78, 80, 82, 84, 87, 88, 90, 91, 92, 94, 95, 96, 99, 100, 101, 102, 105, 106, 108, 112, 113, 119, 122, 123, 124, 125, 126, 128, 129, 130, 134, 138, 141, 143, 145, 149, 150, 151, 152, 155, 156, 163, 165, 167, 169, 170, 173, 174, 176, 178, 183, 184, 188, 194, 195, 196]
safe (total 31), index: [2, 19, 24, 38, 48, 54, 57, 59, 64, 66, 67, 76, 83, 93, 97, 104, 111, 120, 127, 132, 135, 137, 158, 160, 181, 185, 187, 189, 191, 198, 199]
unknown (total 5), index: [13, 77, 154, 162, 172]
