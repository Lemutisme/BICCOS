Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_mix4/biccos_all_selective_mts_plus_gcp.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_mix4
  path: models/sdp/cifar_cnn_a_mix4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_150
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: true
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 07:21:39 2024 on r23g0004.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_mix4/biccos_all_selective_mts_plus_gcp.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.71758652, -10.60625553,  -8.48054504,  -7.71353006,  -8.18405724,
          -8.17642593,  -8.98493576,  -8.79066181, -11.70876884, -10.32774353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 744] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 744] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.43510067, 2.04025769, 0.39722514, 0.03137302, 0.32232380, 0.68482637,
         0.70088995, 3.05900240, 1.95559037]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3505 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [681]; unstable size 681; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 237, 1, 681] with unstable size 236 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 681] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 681] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [236]; unstable size 236; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 236] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 236] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86854887, -1.72656703,  7.80241489,  6.11302614,  6.77265692,
          6.66194582,  6.08438683,  7.59612846,  5.53368664]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
         -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.86604881, -21.89766502, -32.18166733, -30.40774727, -31.19883347,
          -31.09389877, -30.58707047, -32.34036255, -29.66195297, -22.73365021]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.83598518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.46507931, -1.30634916, -1.32222211,  ...,  0.10634929,
             0.02698422,  0.04285724],
           [-1.25873005, -1.35396814, -1.40158725,  ...,  0.31269848,
             0.28095245,  0.28095245],
           [ 0.15396833,  0.42380959,  0.29682547,  ..., -0.00476181,
            -0.17936498, -0.24285704],
           ...,
           [-0.86190474, -0.60793650, -0.38571417,  ...,  0.91587305,
             0.82063496,  0.83650798],
           [-0.43333322, -0.30634910, -0.22698402,  ...,  0.90000004,
             0.77301592,  0.75714290],
           [-0.33809513, -0.30634910, -0.27460307,  ...,  0.88412702,
             0.78888893,  0.67777783]],

          [[-1.44927526, -1.28824472, -1.30434775,  ...,  0.20933989,
             0.14492765,  0.20933989],
           [-1.35265696, -1.36875999, -1.33655393,  ...,  0.37037048,
             0.35426742,  0.40257660],
           [-1.32045078, -1.35265696, -1.41706920,  ...,  0.04830930,
            -0.14492741, -0.24154577],
           ...,
           [-0.75684375, -0.51529789, -0.30595800,  ...,  0.91787446,
             0.83735919,  0.90177143],
           [-0.32206106, -0.19323659, -0.14492741,  ...,  0.90177143,
             0.78904998,  0.82125610],
           [-0.17713353, -0.17713353, -0.16103047,  ...,  0.90177143,
             0.78904998,  0.74074084]],

          [[-1.54272878, -1.49775124, -1.49775124,  ...,  0.42128953,
             0.34632701,  0.37631202],
           [-1.51274371, -1.55772126, -1.52773619,  ...,  0.52623707,
             0.49625200,  0.49625200],
           [-1.13793111, -1.09295356, -1.12293863,  ...,  0.09145443,
            -0.08845562, -0.19340314],
           ...,
           [-0.59820086, -0.43328333, -0.28335828,  ...,  0.88605714,
             0.81109464,  0.88605714],
           [-0.23838064, -0.14842562, -0.11844061,  ...,  0.85607213,
             0.76611710,  0.81109464],
           [-0.07346311, -0.10344811, -0.08845562,  ...,  0.75112462,
             0.79610211,  0.73613209]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1021 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [974]; unstable size 974; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 974] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 974] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 974] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 267] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.48544788,  2.23013353,  1.58959246,  1.19109249,  1.84305859,
          1.51451588,  3.08925152,  0.10891056,  0.42558655]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
         -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  2.09it/s]100%|██████████| 1/1 [00:00<00:00,  2.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.96112823, -19.53406715, -23.43943405, -22.77491570, -22.15659523,
          -23.06166649, -22.97703743, -23.94551468, -21.15086555, -20.97314644]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42706108]]], device='cuda:0')
number of violation:  0
Attack finished in 0.4815 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.328790664672852
alpha/beta optimization time: 3.6838185787200928
initial alpha-crown bounds: tensor([[-0.41349697,  2.33963633,  1.68942070,  1.28609276,  1.95209217,
          1.58836603,  3.19598174,  0.21351385,  0.47718370]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4134969711303711
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6207 seconds.
lower bounds for all target labels: [-0.4134969711303711, 2.3396363258361816, 1.6894207000732422, 1.286092758178711, 1.952092170715332, 1.5883636474609375, 3.195981740951538, 0.21351242065429688, 0.477183073759079]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 32878 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.6576919555664
Verifying property 0 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.195981740951538.

Properties batch 1, size 1
Remaining timeout: 195.49454712867737
Verifying property 1 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3396363258361816.

Properties batch 2, size 1
Remaining timeout: 195.3957552909851
Verifying property 2 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.952092170715332.

Properties batch 3, size 1
Remaining timeout: 195.30457139015198
Verifying property 3 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6894207000732422.

Properties batch 4, size 1
Remaining timeout: 195.20761966705322
Verifying property 4 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5883660316467285.

Properties batch 5, size 1
Remaining timeout: 195.11862778663635
Verifying property 5 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.286092758178711.

Properties batch 6, size 1
Remaining timeout: 195.02948594093323
Verifying property 6 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4771836996078491.

Properties batch 7, size 1
Remaining timeout: 194.93419194221497
Verifying property 7 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.21351385116577148.

Properties batch 8, size 1
Remaining timeout: 194.8300597667694
Verifying property 8 with 1 instances.
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.41349697]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.40543556, -20.17714310, -24.91600418, -24.17427254, -23.62779045,
        -24.44828224, -24.39273453, -25.42860413, -22.45011139, -21.93351555],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.41349697]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 974
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 263
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1259
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009715557098388672
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0004    bound 0.5850    transfer 0.0001    finalize 0.0093    func 0.5948    
Accumulated time: func 0.5948    prepare 0.0004    bound 0.5850    transfer 0.0001    finalize 0.0093    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 79] 
split level 3: [/input-12, 67] 
split level 4: [/input-12, 24] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 1963] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 64] 
split level 9: [/input-12, 29] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 1964] 
split level 12: [/input-8, 1956] 
split level 13: [/input-12, 57] 
split level 14: [/input-8, 1133] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 853] 
split level 17: [/input-8, 852] 
split level 18: [/input-8, 857] 
split level 19: [/input-8, 425] 
split level 20: [/input-8, 165] 
split level 21: [/input-8, 379] 
split level 22: [/input-8, 157] 
split level 23: [/input-8, 155] 
split level 24: [/input-8, 282] 
split level 25: [/input-8, 314] 
split level 26: [/input-8, 854] 
split level 27: [/input-8, 1719] 
split level 28: [/input-8, 922] 
split level 29: [/input-8, 421] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 619] 
split level 32: [/input-8, 1932] 
split level 33: [/input-8, 603] 
split level 34: [/input-8, 424] 
split level 35: [/input-8, 1236] 
split level 36: [/input-8, 317] 
split level 37: [/input-8, 745] 
split level 38: [/input-8, 617] 
split level 39: [/input-8, 154] 
split level 40: [/input-8, 618] 
split level 41: [/input-8, 1709] 
split level 42: [/input-8, 439] 
split level 43: [/input, 3542] 
split level 44: [/input-8, 928] 
split level 45: [/input, 3557] 
split level 46: [/input-8, 614] 
split level 47: [/input-8, 1763] 
split level 48: [/input-8, 1393] 
split level 49: [/input-8, 432] 
split level 50: [/input-8, 749] 
split level 51: [/input-8, 377] 
split level 52: [/input-8, 1698] 
split level 53: [/input-8, 416] 
split level 54: [/input-8, 105] 
split level 55: [/input-8, 318] 
split level 56: [/input-8, 1649] 
split level 57: [/input-8, 422] 
split level 58: [/input-8, 372] 
split level 59: [/input-8, 1701] 
split level 60: [/input-8, 313] 
split level 61: [/input-8, 1931] 
split level 62: [/input-8, 1625] 
split level 63: [/input-8, 1702] 
split level 64: [/input-8, 858] 
split level 65: [/input-8, 1700] 
split level 66: [/input-8, 1764] 
split level 67: [/input-8, 410] 
split level 68: [/input-8, 1235] 
split level 69: [/input, 3541] 
split level 70: [/input, 3958] 
split level 71: [/input-8, 316] 
split level 72: [/input-8, 414] 
split level 73: [/input-8, 371] 
split level 74: [/input-8, 1617] 
split level 75: [/input-8, 1650] 
split level 76: [/input-8, 1585] 
split level 77: [/input-8, 1040] 
split level 78: [/input-8, 408] 
split level 79: [/input-8, 1705] 
split level 80: [/input-8, 1704] 
split level 81: [/input-8, 1125] 
split level 82: [/input, 3560] 
split level 83: [/input, 3573] 
split level 84: [/input-8, 1210] 
split level 85: [/input, 2726] 
split level 86: [/input, 3558] 
split level 87: [/input, 3564] 
split level 88: [/input-8, 92] 
split level 89: [/input, 998] 
split level 90: [/input, 1016] 
split level 91: [/input, 3789] 
split level 92: [/input, 3575] 
split level 93: [/input, 1004] 
split level 94: [/input-8, 1628] 
split level 95: [/input-8, 1314] 
split level 96: [/input-8, 904] 
split level 97: [/input-8, 981] 
split level 98: [/input, 1003] 
split level 99: [/input, 3559] 
split level 100: [/input-12, 12] 
split level 101: [/input, 1483] 
split level 102: [/input, 3447] 
split level 103: [/input, 1444] 
split level 104: [/input-8, 1619] 
split level 105: [/input, 3578] 
split level 106: [/input, 3581] 
split level 107: [/input, 164] 
split level 108: [/input, 3556] 
split level 109: [/input-8, 381] 
split level 110: [/input, 3555] 
split level 111: [/input, 1002] 
split level 112: [/input, 1021] 
split level 113: [/input, 1948] 
split level 114: [/input, 995] 
split level 115: [/input, 3237] 
split level 116: [/input, 3572] 
split level 117: [/input-8, 1610] 
split level 118: [/input-8, 828] 
split level 119: [/input, 1457] 
split level 120: [/input-8, 973] 
split level 121: [/input, 3543] 
split level 122: [/input, 1943] 
split level 123: [/input-8, 1535] 
split level 124: [/input, 3553] 
split level 125: [/input-8, 370] 
split level 126: [/input, 1484] 
split level 127: [/input, 3574] 
split level 128: [/input-8, 412] 
split level 129: [/input-8, 810] 
split level 130: [/input-8, 2045] 
split level 131: [/input-8, 1712] 
split level 132: [/input, 2537] 
split level 133: [/input-8, 949] 
split level 134: [/input-8, 475] 
split level 135: [/input, 2503] 
split level 136: [/input, 2519] 
split level 137: [/input, 2282] 
split level 138: [/input, 3540] 
split level 139: [/input, 494] 
split level 140: [/input, 2538] 
split level 141: [/input-8, 415] 
split level 142: [/input, 2553] 
split level 143: [/input, 3554] 
split level 144: [/input, 1970] 
split level 145: [/input, 2786] 
split level 146: [/input, 2551] 
split level 147: [/input, 2552] 
split level 148: [/input, 1947] 
split level 149: [/input, 1758] 
split level 150: [/input-8, 1713] 
split level 151: [/input, 2788] 
split level 152: [/input, 2266] 
split level 153: [/input, 2279] 
split level 154: [/input-12, 36] 
split level 155: [/input, 3537] 
split level 156: [/input-8, 1609] 
split level 157: [/input, 888] 
split level 158: [/input-8, 1369] 
split level 159: [/input, 3241] 
split level 160: [/input, 3570] 
split level 161: [/input, 2991] 
split level 162: [/input, 3571] 
split level 163: [/input, 872] 
split level 164: [/input, 2769] 
split level 165: [/input-8, 818] 
split level 166: [/input-8, 980] 
split level 167: [/input-8, 1620] 
split level 168: [/input, 3569] 
split level 169: [/input, 3873] 
split level 170: [/input-8, 162] 
split level 171: [/input, 1000] 
split level 172: [/input, 3269] 
split level 173: [/input, 3041] 
split level 174: [/input-8, 466] 
split level 175: [/input, 2182] 
split level 176: [/input, 2555] 
split level 177: [/input-8, 1708] 
split level 178: [/input, 3469] 
split level 179: [/input, 2534] 
split level 180: [/input, 2682] 
split level 181: [/input-8, 401] 
split level 182: [/input-8, 168] 
split level 183: [/input, 2529] 
split level 184: [/input, 2214] 
split level 185: [/input, 2004] 
split level 186: [/input, 1950] 
split level 187: [/input-8, 1924] 
split level 188: [/input-8, 407] 
split level 189: [/input, 1917] 
split level 190: [/input, 3282] 
split level 191: [/input, 2278] 
split level 192: [/input, 2275] 
split level 193: [/input-8, 1611] 
split level 194: [/input, 1999] 
split level 195: [/input, 2583] 
split level 196: [/input, 2006] 
split level 197: [/input, 3161] 
split level 198: [/input, 2260] 
split level 199: [/input, 1698] 
Time: prepare 0.0060    bound 0.1902    transfer 0.0036    finalize 0.0034    func 0.2032    
Accumulated time: func 0.7980    prepare 0.0166    bound 0.7752    transfer 0.0037    finalize 0.0127    
all_split False
======================Cut inference begins======================
max lb tensor(0.27181816) min lb tensor(-0.41324997)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014751434326171875 
BICCOS Cumulative time: 0.014751434326171875
Preprocessing time: 0.010179996490478516 Inference time: 0.002052783966064453 Add cuts time: 0.00011587142944335938 Cut analysis time: 0.002402782440185547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39414 (1), -0.39302 (1), -0.39261 (1), -0.39249 (1), -0.39094 (1), -0.39078 (1), -0.39066 (1), -0.38896 (1), -0.38806 (1), -0.38750 (1), -0.38648 (1), -0.38574 (1), -0.38452 (1), -0.38406 (1), -0.38378 (1), -0.38225 (1), -0.38199 (1), -0.38051 (1), -0.37987 (1), -0.37862 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5779    set_bounds 0.0082    solve 0.2033    add 0.1851    
Accumulated time: pickout 0.0004    decision 0.5779    set_bounds 0.0082    solve 0.2033    add 0.1851    
Current (lb-rhs): -0.39413928985595703
50 domains visited
Cumulative time: 1.6405727863311768

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 6] 
split level 2: [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38312530517578125
10 lb beta sum: 0.3769441843032837, worst -0.37989091873168945
Time: prepare 0.0075    bound 1.2747    transfer 0.0013    finalize 0.0028    func 1.2892    
Accumulated time: func 2.0872    prepare 0.0244    bound 2.0499    transfer 0.0051    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.66232777) min lb tensor(-0.37982130)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.016935110092163086 
BICCOS Cumulative time: 0.03168654441833496
Preprocessing time: 0.012204885482788086 Inference time: 0.0019130706787109375 Add cuts time: 0.0012793540954589844 Cut analysis time: 0.0015377998352050781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21200 (2), -0.20943 (2), -0.20674 (2), -0.20520 (2), -0.20519 (2), -0.20488 (2), -0.20468 (2), -0.20370 (2), -0.20364 (2), -0.20270 (2), -0.20243 (2), -0.20114 (2), -0.19951 (2), -0.19936 (2), -0.19784 (2), -0.19752 (2), -0.19482 (2), -0.19445 (2), -0.19354 (2), -0.19327 (2), 
Length of domains: 50
Time: pickout 0.0085    decision 0.0242    set_bounds 0.0127    solve 1.2894    add 0.2236    
Accumulated time: pickout 0.0089    decision 0.6022    set_bounds 0.0210    solve 1.4927    add 0.4087    
Current (lb-rhs): -0.2120037078857422
100 domains visited
Cumulative time: 3.223140001296997

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 6] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 53] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2150592803955078
10 lb beta sum: 0.46235522627830505, worst -0.2036895751953125
Time: prepare 0.0068    bound 0.1201    transfer 0.0009    finalize 0.0021    func 0.1333    
Accumulated time: func 2.2206    prepare 0.0315    bound 2.1700    transfer 0.0060    finalize 0.0176    
all_split False
======================Cut inference begins======================
max lb tensor(0.70494324) min lb tensor(-0.19997199)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.019700050354003906 
BICCOS Cumulative time: 0.05138659477233887
Preprocessing time: 0.011866569519042969 Inference time: 0.004082918167114258 Add cuts time: 0.0023660659790039062 Cut analysis time: 0.0013844966888427734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08866 (3), -0.08825 (3), -0.08768 (3), -0.08709 (3), -0.08686 (3), -0.08674 (3), -0.08671 (3), -0.08661 (3), -0.08622 (3), -0.08602 (3), -0.08494 (3), -0.08482 (3), -0.08384 (3), -0.08365 (3), -0.08345 (3), -0.08337 (3), -0.08071 (3), -0.07972 (3), -0.07879 (3), -0.07835 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0210    set_bounds 0.0173    solve 0.1335    add 0.2215    
Accumulated time: pickout 0.0168    decision 0.6231    set_bounds 0.0382    solve 1.6262    add 0.6302    
Current (lb-rhs): -0.0886646956205368
150 domains visited
Cumulative time: 3.651157855987549

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10738754272460938
10 lb beta sum: 0.561001181602478, worst -0.09000881016254425
Time: prepare 0.0068    bound 0.1327    transfer 0.0010    finalize 0.0023    func 0.1454    
Accumulated time: func 2.3659    prepare 0.0385    bound 2.3027    transfer 0.0070    finalize 0.0199    
all_split False
======================Cut inference begins======================
max lb tensor(0.20565848) min lb tensor(-0.08730243)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03019404411315918 
BICCOS Cumulative time: 0.08158063888549805
Preprocessing time: 0.012042045593261719 Inference time: 0.012098073959350586 Add cuts time: 0.004550933837890625 Cut analysis time: 0.00150299072265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02479 (4), -0.02479 (4), -0.02433 (4), -0.02325 (4), -0.02252 (4), -0.01956 (4), -0.01942 (4), -0.01940 (4), -0.01917 (4), -0.01898 (4), -0.01865 (4), -0.01830 (4), -0.01816 (4), -0.01788 (4), -0.01734 (4), -0.01722 (4), -0.01711 (4), -0.01709 (4), -0.01686 (4), -0.01680 (4), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0203    set_bounds 0.0173    solve 0.1455    add 0.3851    
Accumulated time: pickout 0.0247    decision 0.6434    set_bounds 0.0556    solve 1.7717    add 1.0153    
Current (lb-rhs): -0.024792641401290894
200 domains visited
Cumulative time: 4.264616966247559

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 29] [/input-12, 29] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 71] [/input-12, 71] [/input-8, 1964] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04484987258911133
10 lb beta sum: 0.4405977427959442, worst -0.024493694305419922
Time: prepare 0.0069    bound 1.3993    transfer 0.0022    finalize 0.0022    func 1.4132    
Accumulated time: func 3.7791    prepare 0.0456    bound 3.7020    transfer 0.0091    finalize 0.0221    
all_split False
======================Cut inference begins======================
max lb tensor(0.12625504) min lb tensor(-0.01523304)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.04388022422790527 
BICCOS Cumulative time: 0.12546086311340332
Preprocessing time: 0.011823177337646484 Inference time: 0.021526336669921875 Add cuts time: 0.009098052978515625 Cut analysis time: 0.001432657241821289
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0200    set_bounds 0.0166    solve 1.4133    add 0.0275    
Accumulated time: pickout 0.0326    decision 0.6634    set_bounds 0.0722    solve 3.1850    add 1.0429    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.03872828, 0.01438146]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 56]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.03872828, 0.98580986]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09785084, 0.07714470, 0.06332447, 0.03992948]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09785084, 0.07714470, 0.06332447, 0.11470370]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09785084, 0.07714470, 0.06415512, 0.04188250]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 29, 56]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09785084, 0.07714470, 0.06415512, 0.11894469]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.16760258, 0.09785084, 0.05067005]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09443621, 0.07310349, 0.06556704, 0.00209575]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09443621, 0.07310349, 0.06556704, 0.11596541]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09443621, 0.07310349, 0.06815388, 0.00245337]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53, 64, 56]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.16760258, 0.09443621, 0.07310349, 0.06815388, 0.11302714]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 67, 53]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.16760258, 0.09443621, 0.05420844]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3642597198486328
10 lb beta sum: 0.5715274810791016, worst -0.3450741767883301
Time: prepare 0.0006    bound 0.1506    transfer 0.0002    finalize 0.0002    func 0.1516    
Accumulated time: func 3.9308    prepare 0.0462    bound 3.8526    transfer 0.0093    finalize 0.0223    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 79] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 67] [/input-12, 64] [/input-12, 64] 
split level 2: [/input-12, 53] [/input-12, 29] [/input-12, 71] 
split level 3: [/input-12, 64] [/input-12, 71] [/input-12, 29] 
split level 4: [/input-12, 29] [/input-8, 1964] [/input-8, 1964] 
split level 5: [/input-12, 71] [/input-8, 1956] [/input-8, 1956] 
split level 6: [/input-8, 1956] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8770644068717957, worst -0.03705930709838867
10 lb beta sum: 0.8770644068717957, worst -0.035694122314453125
Time: prepare 0.0167    bound 0.1523    transfer 0.0009    finalize 0.0022    func 0.1747    
Accumulated time: func 4.1054    prepare 0.0633    bound 4.0049    transfer 0.0102    finalize 0.0245    
all_split False
======================Cut inference begins======================
max lb tensor(0.55712891) min lb tensor(-0.03535700)
Number of Verified Splits: 358 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8890537619590759, worst -0.39519262313842773
10 lb beta sum: 1.1667829751968384, worst -0.383758544921875
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 9
#cuts 4-6: 24
#cuts 7-9: 30
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.4013392925262451 
BICCOS Cumulative time: 0.5268001556396484
Preprocessing time: 0.011123418807983398 Inference time: 0.375704288482666 Add cuts time: 0.010416030883789062 Cut analysis time: 0.004095554351806641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03536 (7), -0.03088 (7), -0.03007 (7), -0.03006 (7), -0.02788 (7), -0.02460 (7), -0.02213 (7), -0.02056 (7), -0.01997 (7), -0.01840 (7), -0.01821 (7), -0.01433 (7), -0.01094 (7), -0.00982 (7), -0.00933 (7), -0.00813 (7), -0.00700 (7), -0.00694 (7), -0.00605 (7), -0.00452 (7), 
Length of domains: 26
Time: pickout 0.0006    decision 0.0209    set_bounds 0.0351    solve 0.1748    add 0.0613    
Accumulated time: pickout 0.0332    decision 0.6843    set_bounds 0.1073    solve 3.3599    add 1.1042    
Current (lb-rhs): -0.035356998443603516
226 domains visited
Cumulative time: 6.765120029449463

BaB round 2
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1964] [/input-12, 57] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] 
split level 1: [/input-12, 57] [/input-12, 57] [/input-8, 1964] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] 
split level 2: [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] [/input-8, 1948] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008166313171386719

all verified at 1th iter
Time: prepare 0.0044    bound 0.0213    transfer 0.0005    finalize 0.0013    func 0.0290    
Accumulated time: func 4.1344    prepare 0.0680    bound 4.0262    transfer 0.0107    finalize 0.0258    
all_split False
======================Cut inference begins======================
max lb tensor(0.12108660) min lb tensor(2.86102295e-05)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
Total number of valid cuts: 64.
#cuts 1-3: 9
#cuts 4-6: 24
#cuts 7-9: 30
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.007849693298339844 
BICCOS Cumulative time: 0.5346498489379883
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0052    decision 0.0164    set_bounds 0.0187    solve 0.0290    add 0.0001    
Accumulated time: pickout 0.0384    decision 0.7007    set_bounds 0.1260    solve 3.3889    add 1.1043    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
226 domains visited
Cumulative time: 6.843858957290649

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=2_spec=0_26930698.log
found process for pidx=0
kill process for pidx=0
Result: safe in 12.4112 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [524]; unstable size 524; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 524] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 524] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 524] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 230] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.57842255,  7.92652655,  0.44128633,  0.66715562, -0.01040864,
          3.37060809, -2.14889312,  8.08667374,  6.50471687]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.49797249, -32.02593231, -24.13653946, -24.35863113, -22.85143471,
         -23.68348503, -27.44120789, -21.38064575, -32.04727936, -30.62964058]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058],
         [-29.49797440, -32.02593613, -24.13653946, -24.35863304, -22.85143471,
          -23.68348312, -27.44120789, -21.38064194, -32.04728317, -30.62964058]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.83204842, -1.47079277]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 586] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 586] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 240] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88010168,  3.64075089, -1.31467128,  1.09980798,  0.71520257,
          0.08684754,  0.73927283,  3.52310181,  2.98584557]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
         -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15470314, -20.96789932, -15.15356350, -17.63923645, -15.52186012,
          -17.33632088, -16.64702988, -17.53084564, -21.19912529, -20.21182442]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36829662]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0352 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [702]; unstable size 702; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 702] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 702] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 702] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 197] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.11359966,  4.75878525, -0.60330057, -1.14847982, -0.96145201,
          1.62045527,  1.45868993,  4.42397833,  5.39402199]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.93012428, -28.86279678, -22.95105362, -22.21138573, -22.55353546,
         -22.42994499, -25.40056229, -25.07742310, -28.55600357, -29.30382729]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729],
         [-23.93012238, -28.86279297, -22.95105362, -22.21138191, -22.55353355,
          -22.42994118, -25.40056038, -25.07742310, -28.55599976, -29.30382729]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39752007, -0.34215164, -0.12359238]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]],


         [[[ 1.61428595,  1.53492093,  1.53492093,  ...,  0.31269848,
             0.78888893,  1.31269872],
           [ 1.61428595,  1.55079389,  1.59841299,  ...,  0.66190481,
             0.75714290,  1.39206374],
           [ 1.66190505,  1.58253992,  1.61428595,  ..., -0.30634910,
            -0.33809513,  1.01111114],
           ...,
           [ 1.66190505,  1.67777801,  1.64603198,  ...,  1.36031771,
             1.39206374,  1.40793681],
           [ 1.61428595,  1.61428595,  1.61428595,  ...,  1.37619078,
             1.39206374,  1.45555580],
           [ 1.50317490,  1.43968284,  1.53492093,  ...,  1.50317490,
             1.50317490,  1.56666696]],

          [[ 1.40096653,  1.32045114,  1.32045114,  ..., -0.09661824,
             0.40257660,  1.03059590],
           [ 1.38486338,  1.32045114,  1.36876035,  ...,  0.30595824,
             0.45088577,  1.19162667],
           [ 1.41706955,  1.35265732,  1.38486338,  ..., -0.61191624,
            -0.59581316,  0.90177143],
           ...,
           [ 1.32045114,  1.25603890,  1.32045114,  ...,  0.93397754,
             0.99838978,  1.07890511],
           [ 1.30434811,  1.27214205,  1.32045114,  ...,  0.98228669,
             1.03059590,  1.11111140],
           [ 1.23993587,  1.17552364,  1.27214205,  ...,  1.23993587,
             1.28824508,  1.27214205]],

          [[ 1.33583248,  1.27586246,  1.27586246,  ..., -0.07346311,
             0.39130452,  0.97601217],
           [ 1.39580250,  1.33583248,  1.38081002,  ...,  0.33133450,
             0.46626705,  1.20089996],
           [ 1.44078004,  1.36581755,  1.41079497,  ..., -0.49325335,
            -0.44827583,  0.99100471],
           ...,
           [ 1.18590748,  1.09595215,  1.21589243,  ...,  0.82608712,
             0.91604215,  0.97601217],
           [ 1.21589243,  1.17091501,  1.24587750,  ...,  0.87106466,
             0.94602716,  1.02098966],
           [ 1.17091501,  1.12593722,  1.21589243,  ...,  1.12593722,
             1.20089996,  1.23088503]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0455 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 600] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 209] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.74476337,  2.03234005,  3.50479412,  2.95214224,  3.84003544,
          3.82891655,  2.31719398,  0.27049726,  0.99338436]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.40559387, -22.88947487, -25.63683701, -27.29631996, -26.72020721,
         -27.76915359, -27.74243546, -26.42049408, -23.75277328, -24.53628540]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.70954704, -22.50856209, -25.82820511, -27.24475288, -26.80752373,
          -27.71620750, -27.81856155, -26.49511337, -23.68723488, -24.25093651]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20098495]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0562 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.38412285, -21.59840584, -16.79981041, -17.57214165, -15.52907753,
         -18.46681404, -14.29935837, -18.97409439, -21.41892242, -22.47642326]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [661]; unstable size 661; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 661] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 661] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 661] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 280] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.40035534, 4.96538591, 1.38254356, 2.09833980, 0.19923043, 2.73652554,
         2.77133179, 5.19357395, 5.75338602]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0354 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.33151817, -30.12449837, -30.12789345, -32.32761765, -31.50092506,
         -33.39948273, -34.24899292, -33.59529877, -28.85486984, -31.05011368]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 660] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 660] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 124] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10990620, 3.26029634, 5.21397591, 4.49963570, 6.16231918, 7.11179590,
         6.38362312, 1.83803439, 4.12780380]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0385 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [652]; unstable size 652; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 652] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 652] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 652] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 272] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.76794958,  3.46308851, -1.30139840, -0.50252229, -0.49823141,
          0.25928617,  1.05345261,  0.17230242,  2.34708548]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.09156418, -20.41763687, -14.61236668, -14.66382980, -15.40889931,
         -14.92277241, -16.08656311, -16.88404655, -16.89081764, -19.10676003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003],
         [-17.09156036, -20.41763496, -14.61236477, -14.66382885, -15.40889931,
          -14.92277145, -16.08656311, -16.88404655, -16.89081764, -19.10676003]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31040668, -0.25894260,  0.48612785]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0395 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 138, 1, 602] with unstable size 137 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 602] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [137]; unstable size 137; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 137] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.99381113,  6.23490953, -1.89244640, -1.75638413,  1.05084133,
         -2.64184833,  3.30787516,  3.47557878,  4.31073713]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.21570015, -30.75971413, -22.25073242, -22.32918739, -25.08177185,
         -21.45276070, -27.76211929, -23.59930420, -27.91633797, -28.86312294]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675],
         [-26.21570015, -30.75971603, -22.25073242, -22.32919121, -25.08177567,
          -21.45276070, -27.76212311, -23.59930420, -27.91633797, -28.86312675]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.34857178, -1.27011299, -2.14654350]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0424 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.21021080, -22.37670517, -15.79945183, -19.83161354, -17.04315186,
         -20.54102135, -18.07866096, -20.16787720, -20.66229820, -22.52699852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [783]; unstable size 783; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 272, 1, 783] with unstable size 271 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 783] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 783] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [271]; unstable size 271; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 271] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 271] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.10988951, 4.28679037, 2.71925116, 0.07136542, 3.35213184, 0.93095911,
         2.59224510, 3.15873313, 4.39236212]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0579 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 512] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 512] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.19138661,  0.13958716, -1.25776386,  0.64105940,  1.78223979,
         -0.24006474,  4.64796352,  2.03586769,  0.69128191]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.29772568, -26.69688797, -24.65950394, -26.42867851, -27.60770798,
         -25.51318932, -30.98760223, -25.11904716, -28.58666801, -27.05063820]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820],
         [-26.29772758, -26.69688797, -24.65950203, -26.42867661, -27.60770798,
          -25.51318359, -30.98759842, -25.11904335, -28.58666611, -27.05063820]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.45954132,  0.39414024]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0393 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 212, 1, 800] with unstable size 211 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 800] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [211]; unstable size 211; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 211] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 211] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64949799,  2.53695774,  4.98263073,  4.08614874,  6.12158537,
          4.88727713,  5.69290924,  0.59366226,  1.31843662]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
         -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.69252968, -23.57816505, -27.19650650, -29.87729073, -29.16208076,
          -31.30131340, -29.60456848, -30.91409683, -24.93794060, -25.69927025]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.11436462]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1130 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 30.024337768554688
alpha/beta optimization time: 1.2071192264556885
initial alpha-crown bounds: tensor([[-0.60099649,  2.58548069,  5.03595257,  4.14844179,  6.18062735,
          4.93974590,  5.75247002,  0.64157915,  1.34103787]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6009964942932129
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6096 seconds.
lower bounds for all target labels: [-0.6009969711303711, 2.585479736328125, 5.035953521728516, 4.148441791534424, 6.180625915527344, 4.939745903015137, 5.752467632293701, 0.6415801048278809, 1.3410356044769287]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 33647 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6056866645813
Verifying property 0 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.180627346038818.

Properties batch 1, size 1
Remaining timeout: 198.4467294216156
Verifying property 1 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.752470016479492.

Properties batch 2, size 1
Remaining timeout: 198.3525836467743
Verifying property 2 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.035952568054199.

Properties batch 3, size 1
Remaining timeout: 198.26027154922485
Verifying property 3 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.939745903015137.

Properties batch 4, size 1
Remaining timeout: 198.16935777664185
Verifying property 4 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.148441791534424.

Properties batch 5, size 1
Remaining timeout: 198.07875299453735
Verifying property 5 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5854806900024414.

Properties batch 6, size 1
Remaining timeout: 197.98625874519348
Verifying property 6 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3410378694534302.

Properties batch 7, size 1
Remaining timeout: 197.89084148406982
Verifying property 7 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6415791511535645.

Properties batch 8, size 1
Remaining timeout: 197.778493642807
Verifying property 8 with 1 instances.
##### Instance 13 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.60099649]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.11111641, -23.23637962, -27.61908340, -29.99626923, -29.48331070,
        -31.42300415, -29.79775810, -31.17150879, -25.13313293, -25.51217079],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.60099649]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 800
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 204
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1025
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009207725524902344
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0003    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0530    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 89] 
split level 5: [/input-12, 64] 
split level 6: [/input-12, 2] 
split level 7: [/input-12, 90] 
split level 8: [/input-12, 8] 
split level 9: [/input-12, 71] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 32] 
split level 12: [/input-8, 292] 
split level 13: [/input-12, 14] 
split level 14: [/input-8, 1949] 
split level 15: [/input-8, 757] 
split level 16: [/input-8, 146] 
split level 17: [/input-8, 155] 
split level 18: [/input-8, 1134] 
split level 19: [/input-8, 1387] 
split level 20: [/input-8, 418] 
split level 21: [/input-8, 420] 
split level 22: [/input-8, 158] 
split level 23: [/input-8, 147] 
split level 24: [/input-8, 416] 
split level 25: [/input-8, 306] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 751] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1388] 
split level 30: [/input-8, 939] 
split level 31: [/input-12, 13] 
split level 32: [/input-8, 150] 
split level 33: [/input, 3544] 
split level 34: [/input-8, 1852] 
split level 35: [/input-8, 1396] 
split level 36: [/input-8, 423] 
split level 37: [/input, 374] 
split level 38: [/input-8, 1755] 
split level 39: [/input-8, 1629] 
split level 40: [/input-8, 1195] 
split level 41: [/input-8, 1395] 
split level 42: [/input-8, 633] 
split level 43: [/input-8, 154] 
split level 44: [/input, 3545] 
split level 45: [/input-8, 242] 
split level 46: [/input-8, 634] 
split level 47: [/input-8, 414] 
split level 48: [/input-8, 1391] 
split level 49: [/input, 469] 
split level 50: [/input-8, 1178] 
split level 51: [/input-8, 1754] 
split level 52: [/input-8, 1851] 
split level 53: [/input-8, 1397] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 737] 
split level 56: [/input-8, 141] 
split level 57: [/input, 506] 
split level 58: [/input, 2503] 
split level 59: [/input, 3165] 
split level 60: [/input, 3563] 
split level 61: [/input, 1449] 
split level 62: [/input, 3130] 
split level 63: [/input, 1003] 
split level 64: [/input-12, 68] 
split level 65: [/input-8, 433] 
split level 66: [/input-8, 1615] 
split level 67: [/input-8, 1399] 
split level 68: [/input-8, 635] 
split level 69: [/input-8, 1097] 
split level 70: [/input-8, 410] 
split level 71: [/input-8, 400] 
split level 72: [/input, 986] 
split level 73: [/input, 987] 
split level 74: [/input, 968] 
split level 75: [/input, 373] 
split level 76: [/input, 983] 
split level 77: [/input, 1453] 
split level 78: [/input-8, 736] 
split level 79: [/input, 961] 
split level 80: [/input, 508] 
split level 81: [/input, 2931] 
split level 82: [/input-8, 350] 
split level 83: [/input, 981] 
split level 84: [/input, 963] 
split level 85: [/input, 988] 
split level 86: [/input, 1001] 
split level 87: [/input, 3480] 
split level 88: [/input, 492] 
split level 89: [/input, 3197] 
split level 90: [/input-8, 1377] 
split level 91: [/input, 977] 
split level 92: [/input-8, 2033] 
split level 93: [/input, 3913] 
split level 94: [/input, 3579] 
split level 95: [/input, 1006] 
split level 96: [/input, 3565] 
split level 97: [/input, 408] 
split level 98: [/input, 2264] 
split level 99: [/input-8, 1512] 
split level 100: [/input, 3525] 
split level 101: [/input-8, 241] 
split level 102: [/input, 825] 
split level 103: [/input, 995] 
split level 104: [/input, 452] 
split level 105: [/input, 2266] 
split level 106: [/input, 2265] 
split level 107: [/input, 325] 
split level 108: [/input, 2913] 
split level 109: [/input, 2282] 
split level 110: [/input, 844] 
split level 111: [/input, 2771] 
split level 112: [/input-8, 243] 
split level 113: [/input, 2262] 
split level 114: [/input, 996] 
split level 115: [/input, 2406] 
split level 116: [/input, 470] 
split level 117: [/input, 2263] 
split level 118: [/input, 3580] 
split level 119: [/input, 979] 
split level 120: [/input, 2183] 
split level 121: [/input, 2789] 
split level 122: [/input, 3113] 
split level 123: [/input, 3578] 
split level 124: [/input, 827] 
split level 125: [/input, 998] 
split level 126: [/input, 505] 
split level 127: [/input, 2515] 
split level 128: [/input, 3562] 
split level 129: [/input-8, 1398] 
split level 130: [/input-8, 427] 
split level 131: [/input, 3269] 
split level 132: [/input, 993] 
split level 133: [/input, 2516] 
split level 134: [/input, 2009] 
split level 135: [/input-8, 1376] 
split level 136: [/input, 692] 
split level 137: [/input, 2010] 
split level 138: [/input, 2281] 
split level 139: [/input-8, 636] 
split level 140: [/input, 3180] 
split level 141: [/input, 693] 
split level 142: [/input, 904] 
split level 143: [/input, 2267] 
split level 144: [/input, 2539] 
split level 145: [/input, 2969] 
split level 146: [/input, 2654] 
split level 147: [/input-8, 363] 
split level 148: [/input, 691] 
split level 149: [/input, 3007] 
split level 150: [/input, 2553] 
split level 151: [/input, 2283] 
split level 152: [/input, 2258] 
split level 153: [/input, 2538] 
split level 154: [/input, 129] 
split level 155: [/input, 3148] 
split level 156: [/input, 2517] 
split level 157: [/input, 709] 
split level 158: [/input, 2757] 
split level 159: [/input-8, 94] 
split level 160: [/input, 2129] 
split level 161: [/input, 711] 
split level 162: [/input, 371] 
split level 163: [/input, 2685] 
split level 164: [/input, 710] 
split level 165: [/input, 822] 
split level 166: [/input, 3133] 
split level 167: [/input, 2530] 
split level 168: [/input, 2273] 
split level 169: [/input, 3283] 
split level 170: [/input, 3284] 
split level 171: [/input, 707] 
split level 172: [/input, 729] 
split level 173: [/input, 225] 
split level 174: [/input, 808] 
split level 175: [/input, 2514] 
split level 176: [/input, 497] 
split level 177: [/input, 708] 
split level 178: [/input-8, 1855] 
split level 179: [/input, 690] 
split level 180: [/input, 210] 
split level 181: [/input, 713] 
split level 182: [/input, 2011] 
split level 183: [/input, 498] 
split level 184: [/input, 3560] 
split level 185: [/input, 3576] 
split level 186: [/input, 2180] 
split level 187: [/input, 689] 
split level 188: [/input, 487] 
split level 189: [/input-8, 912] 
split level 190: [/input, 705] 
split level 191: [/input, 2259] 
split level 192: [/input, 2436] 
split level 193: [/input, 2916] 
split level 194: [/input, 209] 
split level 195: [/input, 706] 
split level 196: [/input, 989] 
split level 197: [/input, 2556] 
split level 198: [/input, 208] 
split level 199: [/input, 885] 
Time: prepare 0.0061    bound 0.0954    transfer 0.0096    finalize 0.0036    func 0.1149    
Accumulated time: func 0.1685    prepare 0.0167    bound 0.1484    transfer 0.0097    finalize 0.0039    
all_split False
======================Cut inference begins======================
max lb tensor(0.07143211) min lb tensor(-0.60082245)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01156306266784668 
BICCOS Cumulative time: 0.01156306266784668
Preprocessing time: 0.010398149490356445 Inference time: 0.00011849403381347656 Add cuts time: 6.866455078125e-05 Cut analysis time: 0.0009777545928955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58948 (1), -0.58923 (1), -0.58917 (1), -0.58855 (1), -0.58773 (1), -0.58718 (1), -0.58653 (1), -0.58590 (1), -0.58475 (1), -0.58434 (1), -0.58393 (1), -0.58375 (1), -0.58357 (1), -0.58355 (1), -0.58354 (1), -0.58341 (1), -0.58314 (1), -0.58215 (1), -0.58196 (1), -0.58138 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5169    set_bounds 0.0098    solve 0.1150    add 0.2106    
Accumulated time: pickout 0.0004    decision 0.5169    set_bounds 0.0098    solve 0.1150    add 0.2106    
Current (lb-rhs): -0.5894804000854492
50 domains visited
Cumulative time: 0.9455845355987549

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 38] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5508632659912109
10 lb beta sum: 0.3896826207637787, worst -0.5451396703720093
Time: prepare 0.0071    bound 0.1489    transfer 0.0017    finalize 0.0034    func 0.1639    
Accumulated time: func 0.3323    prepare 0.0241    bound 0.2973    transfer 0.0114    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.28841394) min lb tensor(-0.54499203)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.015715599060058594 
BICCOS Cumulative time: 0.027278661727905273
Preprocessing time: 0.013256549835205078 Inference time: 0.0007028579711914062 Add cuts time: 0.00023484230041503906 Cut analysis time: 0.0015213489532470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11149 (2), -0.11053 (2), -0.11015 (2), -0.10911 (2), -0.10874 (2), -0.10838 (2), -0.10751 (2), -0.10656 (2), -0.10590 (2), -0.10561 (2), -0.10513 (2), -0.10474 (2), -0.10466 (2), -0.10415 (2), -0.10410 (2), -0.10319 (2), -0.10267 (2), -0.10239 (2), -0.10213 (2), -0.10079 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0202    set_bounds 0.0131    solve 0.1640    add 0.2165    
Accumulated time: pickout 0.0086    decision 0.5370    set_bounds 0.0228    solve 0.2790    add 0.4271    
Current (lb-rhs): -0.11149285733699799
100 domains visited
Cumulative time: 1.3902831077575684

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 89] [/input-12, 38] [/input-12, 4] [/input-12, 89] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 4] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 89] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11099457740783691
10 lb beta sum: 0.33456897735595703, worst -0.13489821553230286
Time: prepare 0.0071    bound 0.1314    transfer 0.0009    finalize 0.0023    func 0.1443    
Accumulated time: func 0.4767    prepare 0.0314    bound 0.4287    transfer 0.0123    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.88343912) min lb tensor(-0.02813061)
Number of Verified Splits: 344 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03572893142700195 
BICCOS Cumulative time: 0.06300759315490723
Preprocessing time: 0.01153111457824707 Inference time: 0.01541757583618164 Add cuts time: 0.006808757781982422 Cut analysis time: 0.0019714832305908203
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0196    set_bounds 0.0157    solve 0.1444    add 0.0187    
Accumulated time: pickout 0.0164    decision 0.5566    set_bounds 0.0386    solve 0.4234    add 0.4458    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.42807466e-11, 6.68311119e-02, 2.01076835e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.42807466e-11, 6.68311119e-02, 8.51600766e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.42807466e-11, 7.46774822e-02, 2.00105622e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34,  2, 38]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.42807466e-11, 7.46774822e-02, 8.59142393e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.42807466e-11, 3.82274151e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([34, 38]), tensor([1., 1.]), tensor([0, 0]), tensor([5.42807466e-11, 4.49652523e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5220441818237305
10 lb beta sum: 0.7933249473571777, worst -0.5109842419624329
Time: prepare 0.0004    bound 0.1184    transfer 0.0002    finalize 0.0002    func 0.1192    
Accumulated time: func 0.5959    prepare 0.0317    bound 0.5471    transfer 0.0125    finalize 0.0097    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 71] [/input-12, 71] [/input-12, 8] [/input-12, 8] 
split level 4: [/input-8, 1134] [/input-8, 1134] [/input-12, 71] [/input-12, 71] 
split level 5: [/input-8, 306] [/input-8, 306] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8030974864959717, worst -0.2650213837623596
10 lb beta sum: 0.8030974864959717, worst -0.2637386918067932
Time: prepare 0.0104    bound 0.1174    transfer 0.0017    finalize 0.0021    func 0.1333    
Accumulated time: func 0.7292    prepare 0.0425    bound 0.6645    transfer 0.0142    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.37998867) min lb tensor(-0.26312643)
Number of Verified Splits: 216 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8199712038040161, worst -0.36191326379776
10 lb beta sum: 1.047450065612793, worst -0.142045259475708
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 8
#cuts 4-6: 16
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.2514970302581787 
BICCOS Cumulative time: 0.31450462341308594
Preprocessing time: 0.006890058517456055 Inference time: 0.23603177070617676 Add cuts time: 0.006456851959228516 Cut analysis time: 0.002118349075317383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26313 (6), -0.26243 (6), -0.26221 (6), -0.26033 (6), -0.25068 (6), -0.25032 (6), -0.24858 (6), -0.24769 (6), -0.23451 (6), -0.23235 (6), -0.22932 (6), -0.22671 (6), -0.22053 (6), -0.21996 (6), -0.20900 (6), -0.20486 (6), -0.13452 (6), -0.13005 (6), -0.12829 (6), -0.12464 (6), 
Length of domains: 40
Time: pickout 0.0005    decision 0.0197    set_bounds 0.0191    solve 0.1340    add 0.0654    
Accumulated time: pickout 0.0169    decision 0.5763    set_bounds 0.0577    solve 0.5574    add 0.5112    
Current (lb-rhs): -0.2631264328956604
140 domains visited
Cumulative time: 2.3100624084472656

BaB round 2
batch: 40
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] [/input-8, 1754] [/input-8, 1754] [/input-8, 757] [/input-8, 757] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24969005584716797
10 lb beta sum: 0.3509281873703003, worst -0.24106580018997192
Time: prepare 0.0064    bound 0.1195    transfer 0.0033    finalize 0.0025    func 0.1337    
Accumulated time: func 0.8629    prepare 0.0491    bound 0.7840    transfer 0.0174    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.61088073) min lb tensor(-0.24093831)
Number of Verified Splits: 187 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3682365417480469
10 lb beta sum: 1.1226274967193604, worst -0.25600486993789673
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 8
#cuts 4-6: 16
#cuts 7-9: 13
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.25403451919555664 
BICCOS Cumulative time: 0.5685391426086426
Preprocessing time: 0.009543180465698242 Inference time: 0.23406362533569336 Add cuts time: 0.007618427276611328 Cut analysis time: 0.002809286117553711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24094 (9), -0.24032 (9), -0.23947 (9), -0.23801 (9), -0.22835 (9), -0.22737 (9), -0.22490 (9), -0.22482 (9), -0.22472 (9), -0.22372 (9), -0.22371 (9), -0.22176 (9), -0.21497 (9), -0.21275 (9), -0.21241 (9), -0.21237 (9), -0.21055 (9), -0.20974 (9), -0.20970 (9), -0.20962 (9), 
Length of domains: 133
Time: pickout 0.0063    decision 0.0159    set_bounds 0.0236    solve 0.1338    add 0.0858    
Accumulated time: pickout 0.0232    decision 0.5923    set_bounds 0.0813    solve 0.6912    add 0.5970    
Current (lb-rhs): -0.24093830585479736
273 domains visited
Cumulative time: 2.838348627090454

BaB round 3
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2436046600341797
10 lb beta sum: 0.32711535692214966, worst -0.24082843959331512
Time: prepare 0.0056    bound 0.1362    transfer 0.0015    finalize 0.0018    func 0.1469    
Accumulated time: func 1.0098    prepare 0.0549    bound 0.9202    transfer 0.0189    finalize 0.0161    
all_split False
======================Cut inference begins======================
max lb tensor(0.34996879) min lb tensor(-0.24073511)
Number of Verified Splits: 89 of 266
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 8
#cuts 4-6: 20
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.022290706634521484 
BICCOS Cumulative time: 0.5908298492431641
Preprocessing time: 0.008310556411743164 Inference time: 0.008481740951538086 Add cuts time: 0.003119945526123047 Cut analysis time: 0.0023784637451171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24074 (10), -0.24014 (10), -0.23931 (10), -0.23781 (10), -0.22819 (10), -0.22720 (10), -0.22466 (10), -0.22458 (10), -0.22424 (10), -0.22328 (10), -0.22325 (10), -0.22138 (10), -0.21433 (10), -0.21231 (10), -0.21209 (10), -0.21208 (10), -0.21012 (10), -0.20917 (10), -0.20850 (10), -0.20842 (10), 
Length of domains: 177
Time: pickout 0.0142    decision 0.2575    set_bounds 0.0122    solve 0.1470    add 0.0782    
Accumulated time: pickout 0.0373    decision 0.8497    set_bounds 0.0935    solve 0.8382    add 0.6753    
Current (lb-rhs): -0.24073511362075806
450 domains visited
Cumulative time: 3.3778905868530273

BaB round 4
batch: 177
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2373661994934082
10 lb beta sum: 0.28786247968673706, worst -0.23460856080055237
Time: prepare 0.0072    bound 0.1372    transfer 0.0009    finalize 0.0022    func 0.1498    
Accumulated time: func 1.1596    prepare 0.0624    bound 1.0574    transfer 0.0198    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.22923937) min lb tensor(-0.23455910)
Number of Verified Splits: 97 of 354
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 8
#cuts 4-6: 25
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.02695155143737793 
BICCOS Cumulative time: 0.617781400680542
Preprocessing time: 0.010646343231201172 Inference time: 0.010209798812866211 Add cuts time: 0.0038344860076904297 Cut analysis time: 0.002260923385620117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23456 (11), -0.23386 (11), -0.23169 (11), -0.23167 (11), -0.22212 (11), -0.22105 (11), -0.21792 (11), -0.21762 (11), -0.21736 (11), -0.21702 (11), -0.21562 (11), -0.21524 (11), -0.20897 (11), -0.20682 (11), -0.20597 (11), -0.20581 (11), -0.20276 (11), -0.20248 (11), -0.20244 (11), -0.20227 (11), 
Length of domains: 257
Time: pickout 0.0158    decision 0.1932    set_bounds 0.0161    solve 0.1499    add 0.0822    
Accumulated time: pickout 0.0531    decision 1.0430    set_bounds 0.1096    solve 0.9881    add 0.7575    
Current (lb-rhs): -0.23455910384655
707 domains visited
Cumulative time: 3.8705532550811768

BaB round 5
batch: 257
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 155] [/input-8, 418] [/input-8, 147] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 155] [/input-8, 418] [/input-8, 146] [/input-8, 146] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23123693466186523
10 lb beta sum: 0.2529476284980774, worst -0.22845403850078583
Time: prepare 0.0103    bound 0.1379    transfer 0.0017    finalize 0.0035    func 0.1568    
Accumulated time: func 1.3164    prepare 0.0729    bound 1.1953    transfer 0.0215    finalize 0.0218    
all_split False
======================Cut inference begins======================
max lb tensor(0.23103559) min lb tensor(-0.22843176)
Number of Verified Splits: 116 of 514
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.034034013748168945 
BICCOS Cumulative time: 0.6518154144287109
Preprocessing time: 0.015147924423217773 Inference time: 0.013447999954223633 Add cuts time: 0.0034742355346679688 Cut analysis time: 0.0019638538360595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22843 (12), -0.22841 (12), -0.22804 (12), -0.22502 (12), -0.21591 (12), -0.21578 (12), -0.21465 (12), -0.21338 (12), -0.21247 (12), -0.21229 (12), -0.21194 (12), -0.21167 (12), -0.21165 (12), -0.21113 (12), -0.20855 (12), -0.20850 (12), -0.19968 (12), -0.19930 (12), -0.19924 (12), -0.19855 (12), 
Length of domains: 398
Time: pickout 0.0188    decision 0.0258    set_bounds 0.0228    solve 0.1570    add 0.1085    
Accumulated time: pickout 0.0719    decision 1.0687    set_bounds 0.1323    solve 1.1451    add 0.8659    
Current (lb-rhs): -0.22843176126480103
1105 domains visited
Cumulative time: 4.245664834976196

BaB round 6
batch: 398
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 1134] [/input-8, 155] [/input-8, 1134] [/input-8, 147] [/input-8, 306] [/input-8, 147] [/input-8, 306] [/input-8, 155] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22609758377075195
10 lb beta sum: 0.21586883068084717, worst -0.22331705689430237
Time: prepare 0.0166    bound 0.1408    transfer 0.0036    finalize 0.0046    func 0.1708    
Accumulated time: func 1.4872    prepare 0.0897    bound 1.3361    transfer 0.0251    finalize 0.0265    
all_split False
======================Cut inference begins======================
max lb tensor(0.45766443) min lb tensor(-0.22327809)
Number of Verified Splits: 178 of 796
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 11
#cuts 4-6: 8
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.050214529037475586 
BICCOS Cumulative time: 0.7020299434661865
Preprocessing time: 0.023386716842651367 Inference time: 0.022017240524291992 Add cuts time: 0.0029935836791992188 Cut analysis time: 0.0018169879913330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22328 (13), -0.22326 (13), -0.21539 (13), -0.21507 (13), -0.21333 (13), -0.21270 (13), -0.21020 (13), -0.21012 (13), -0.20967 (13), -0.20898 (13), -0.20884 (13), -0.20823 (13), -0.20767 (13), -0.20710 (13), -0.20691 (13), -0.20510 (13), -0.20405 (13), -0.20360 (13), -0.20311 (13), -0.19854 (13), 
Length of domains: 618
Time: pickout 0.0613    decision 0.0335    set_bounds 0.0358    solve 0.1710    add 0.0846    
Accumulated time: pickout 0.1332    decision 1.1022    set_bounds 0.1681    solve 1.3161    add 0.9505    
Current (lb-rhs): -0.22327809035778046
1723 domains visited
Cumulative time: 4.691150903701782

BaB round 7
batch: 618
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 751] [/input-8, 306] [/input-8, 418] [/input-8, 306] [/input-8, 751] [/input-8, 751] [/input, 374] [/input-8, 1134] [/input-8, 1134] [/input-8, 306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2229008674621582
10 lb beta sum: 0.6130662560462952, worst -0.20971769094467163
Time: prepare 0.0251    bound 0.1485    transfer 0.0056    finalize 0.0069    func 0.1950    
Accumulated time: func 1.6822    prepare 0.1150    bound 1.4846    transfer 0.0307    finalize 0.0333    
all_split False
======================Cut inference begins======================
max lb tensor(0.49787319) min lb tensor(-0.20967253)
Number of Verified Splits: 218 of 1236
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 12
#cuts 4-6: 8
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.06857967376708984 
BICCOS Cumulative time: 0.7706096172332764
Preprocessing time: 0.03825736045837402 Inference time: 0.025474071502685547 Add cuts time: 0.0030989646911621094 Cut analysis time: 0.001749277114868164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20967 (14), -0.20921 (14), -0.20768 (14), -0.20736 (14), -0.20716 (14), -0.20652 (14), -0.19923 (14), -0.19874 (14), -0.19762 (14), -0.19703 (14), -0.19631 (14), -0.19620 (14), -0.19534 (14), -0.19501 (14), -0.19419 (14), -0.19306 (14), -0.19301 (14), -0.19296 (14), -0.19280 (14), -0.19249 (14), 
Length of domains: 1018
Time: pickout 0.0203    decision 0.0470    set_bounds 0.0540    solve 0.1953    add 0.1144    
Accumulated time: pickout 0.1535    decision 1.1492    set_bounds 0.2221    solve 1.5114    add 1.0648    
Current (lb-rhs): -0.20967252552509308
2741 domains visited
Cumulative time: 5.199893236160278

BaB round 8
batch: 1018
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 751] [/input, 374] [/input-8, 416] [/input, 374] [/input-8, 1134] [/input-8, 751] [/input-8, 416] [/input-8, 751] [/input-8, 751] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21846246719360352
10 lb beta sum: 0.779462993144989, worst -0.20715370774269104
Time: prepare 0.0437    bound 0.1715    transfer 0.0093    finalize 0.0122    func 0.2498    
Accumulated time: func 1.9320    prepare 0.1590    bound 1.6561    transfer 0.0400    finalize 0.0455    
all_split False
======================Cut inference begins======================
max lb tensor(0.32903063) min lb tensor(-0.20713763)
Number of Verified Splits: 1016 of 2036
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 12
#cuts 4-6: 8
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.3329472541809082 
BICCOS Cumulative time: 1.1035568714141846
Preprocessing time: 0.06284809112548828 Inference time: 0.2493607997894287 Add cuts time: 0.01869821548461914 Cut analysis time: 0.0020401477813720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20714 (15), -0.20665 (15), -0.20312 (15), -0.20300 (15), -0.20249 (15), -0.20188 (15), -0.19655 (15), -0.19598 (15), -0.19386 (15), -0.19250 (15), -0.19231 (15), -0.19174 (15), -0.19162 (15), -0.19159 (15), -0.19094 (15), -0.19088 (15), -0.19086 (15), -0.19071 (15), -0.19048 (15), -0.19038 (15), 
Length of domains: 1020
Time: pickout 0.0749    decision 0.0677    set_bounds 0.0834    solve 0.2501    add 0.1176    
Accumulated time: pickout 0.2284    decision 1.2169    set_bounds 0.3055    solve 1.7616    add 1.1824    
Current (lb-rhs): -0.20713762938976288
3761 domains visited
Cumulative time: 6.140555143356323

BaB round 9
batch: 1020
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 292] [/input-8, 418] [/input-8, 147] [/input-8, 306] [/input-8, 751] [/input-8, 147] [/input-8, 751] [/input-8, 751] [/input-8, 418] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2161717414855957
10 lb beta sum: 0.6185597777366638, worst -0.20289650559425354
Time: prepare 0.0441    bound 0.1713    transfer 0.0073    finalize 0.0127    func 0.2492    
Accumulated time: func 2.1812    prepare 0.2033    bound 1.8274    transfer 0.0473    finalize 0.0583    
all_split False
======================Cut inference begins======================
max lb tensor(0.28285116) min lb tensor(-0.20287707)
Number of Verified Splits: 26 of 2040
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 8
#cuts 7-9: 3
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.07025980949401855 
BICCOS Cumulative time: 1.1738166809082031
Preprocessing time: 0.06269574165344238 Inference time: 0.004160881042480469 Add cuts time: 0.001495361328125 Cut analysis time: 0.0019078254699707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20288 (16), -0.20234 (16), -0.20056 (16), -0.19956 (16), -0.19945 (16), -0.19883 (16), -0.19283 (16), -0.19229 (16), -0.18959 (16), -0.18913 (16), -0.18845 (16), -0.18773 (16), -0.18765 (16), -0.18731 (16), -0.18726 (16), -0.18722 (16), -0.18713 (16), -0.18703 (16), -0.18691 (16), -0.18689 (16), 
Length of domains: 2014
Time: pickout 0.0751    decision 0.0661    set_bounds 0.0877    solve 0.2497    add 0.1024    
Accumulated time: pickout 0.3035    decision 1.2830    set_bounds 0.3932    solve 2.0112    add 1.2848    
Current (lb-rhs): -0.20287707448005676
5775 domains visited
Cumulative time: 6.800806283950806

BaB round 10
batch: 2014
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 147] [/input-8, 292] [/input-8, 423] [/input-8, 292] [/input-8, 1134] [/input-8, 423] [/input-8, 1134] [/input-8, 147] [/input-8, 1134] [/input-8, 423] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21201658248901367
10 lb beta sum: 0.5995450019836426, worst -0.19904986023902893
Time: prepare 0.0941    bound 0.2809    transfer 0.0127    finalize 0.1526    func 0.5668    
Accumulated time: func 2.7480    prepare 0.2977    bound 2.1083    transfer 0.0600    finalize 0.2108    
all_split False
======================Cut inference begins======================
max lb tensor(0.29716194) min lb tensor(-0.19902997)
Number of Verified Splits: 192 of 4028
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts 7-9: 22
#cuts >= 20: 0
BICCOS time: 0.1661829948425293 
BICCOS Cumulative time: 1.3399996757507324
Preprocessing time: 0.12510418891906738 Inference time: 0.030783891677856445 Add cuts time: 0.007191896438598633 Cut analysis time: 0.003103017807006836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19903 (17), -0.19846 (17), -0.19634 (17), -0.19555 (17), -0.19325 (17), -0.19262 (17), -0.18913 (17), -0.18884 (17), -0.18849 (17), -0.18826 (17), -0.18493 (17), -0.18449 (17), -0.18433 (17), -0.18409 (17), -0.18405 (17), -0.18404 (17), -0.18394 (17), -0.18392 (17), -0.18355 (17), -0.18335 (17), 
Length of domains: 3836
Time: pickout 0.0435    decision 0.1206    set_bounds 0.1744    solve 0.5674    add 0.1556    
Accumulated time: pickout 0.3470    decision 1.4036    set_bounds 0.5676    solve 2.5786    add 1.4404    
Current (lb-rhs): -0.19902996718883514
9611 domains visited
Cumulative time: 8.040704488754272

BaB round 11
batch: 3836
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 416] [/input-8, 420] [/input-8, 292] [/input-8, 420] [/input-8, 306] [/input-8, 292] [/input-8, 1195] [/input-8, 420] [/input-8, 1195] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20903444290161133
10 lb beta sum: 0.5894915461540222, worst -0.19349175691604614
Time: prepare 0.1880    bound 0.6535    transfer 0.0338    finalize 0.0519    func 0.9776    
Accumulated time: func 3.7256    prepare 0.4859    bound 2.7618    transfer 0.0938    finalize 0.2627    
all_split False
======================Cut inference begins======================
max lb tensor(0.31400192) min lb tensor(-0.19347343)
Number of Verified Splits: 517 of 7672
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 12
#cuts 4-6: 16
#cuts 7-9: 29
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.35047149658203125 
BICCOS Cumulative time: 1.6904711723327637
Preprocessing time: 0.2402634620666504 Inference time: 0.08625960350036621 Add cuts time: 0.02001786231994629 Cut analysis time: 0.003930568695068359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19347 (18), -0.19290 (18), -0.19230 (18), -0.19230 (18), -0.19084 (18), -0.19021 (18), -0.18821 (18), -0.18762 (18), -0.18681 (18), -0.18609 (18), -0.18275 (18), -0.18252 (18), -0.18250 (18), -0.18216 (18), -0.18060 (18), -0.18025 (18), -0.18019 (18), -0.18014 (18), -0.17990 (18), -0.17984 (18), 
Length of domains: 7155
Time: pickout 0.0644    decision 0.2204    set_bounds 0.4847    solve 0.9791    add 0.1926    
Accumulated time: pickout 0.4113    decision 1.6240    set_bounds 1.0523    solve 3.5578    add 1.6330    
Current (lb-rhs): -0.1934734284877777
16766 domains visited
Cumulative time: 10.349872589111328

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 423] [/input-8, 147] [/input-8, 416] [/input-8, 147] [/input-8, 1195] [/input-8, 416] [/input-8, 306] [/input-8, 292] [/input-8, 306] [/input-8, 155] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2056136131286621
10 lb beta sum: 0.5705618858337402, worst -0.19000563025474548
Time: prepare 0.2016    bound 0.7029    transfer 0.0432    finalize 0.0552    func 1.0565    
Accumulated time: func 4.7821    prepare 0.6878    bound 3.4648    transfer 0.1371    finalize 0.3179    
all_split False
======================Cut inference begins======================
max lb tensor(0.33066982) min lb tensor(-0.18999547)
Number of Verified Splits: 769 of 8192
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 12
#cuts 4-6: 24
#cuts 7-9: 31
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.6232376098632812 
BICCOS Cumulative time: 2.313708782196045
Preprocessing time: 0.45055127143859863 Inference time: 0.13898348808288574 Add cuts time: 0.0291292667388916 Cut analysis time: 0.0045735836029052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19290 (18), -0.19230 (18), -0.19230 (18), -0.19084 (18), -0.19021 (18), -0.19000 (19), -0.18370 (19), -0.18310 (19), -0.18275 (18), -0.18256 (19), -0.18252 (18), -0.18216 (18), -0.18186 (19), -0.18060 (18), -0.18025 (18), -0.18019 (18), -0.18014 (18), -0.17990 (18), -0.17984 (18), -0.17974 (18), 
Length of domains: 10482
Time: pickout 0.0705    decision 0.3946    set_bounds 0.3778    solve 1.0590    add 0.3140    
Accumulated time: pickout 0.4818    decision 2.0186    set_bounds 1.4301    solve 4.6168    add 1.9470    
Current (lb-rhs): -0.19290481507778168
24189 domains visited
current_vram/total_varm: 13.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.213291645050049

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 420] [/input, 373] [/input-8, 423] [/input-8, 420] [/input-8, 292] [/input-8, 418] [/input-8, 292] [/input-8, 1384] [/input-8, 306] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19726181030273438
10 lb beta sum: 0.5819787383079529, worst -0.19254621863365173
Time: prepare 0.3985    bound 1.3300    transfer 0.0855    finalize 0.1063    func 2.2404    
Accumulated time: func 7.0224    prepare 1.0867    bound 4.7948    transfer 0.2225    finalize 0.4242    
all_split False
======================Cut inference begins======================
max lb tensor(0.39995158) min lb tensor(-0.19229800)
Number of Verified Splits: 2105 of 16384
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 474 constraints, 25259 nonzero elements
cuts preparing time: 0.0105
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 597.
#cuts 1-3: 117
#cuts 4-6: 43
#cuts 7-9: 60
#cuts 10-12: 16
#cuts 13-15: 16
#cuts 16-18: 24
#cuts 19-21: 23
#cuts >= 20: 298
BICCOS time: 1.1465134620666504 
BICCOS Cumulative time: 3.4602222442626953
Preprocessing time: 0.5065088272094727 Inference time: 0.3510901927947998 Add cuts time: 0.07399272918701172 Cut analysis time: 0.2149217128753662
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19230 (19), -0.19229 (19), -0.19000 (20), -0.18999 (20), -0.18811 (19), -0.18749 (19), -0.18638 (19), -0.18572 (19), -0.18368 (20), -0.18309 (20), -0.18013 (19), -0.17984 (19), -0.17977 (19), -0.17967 (19), -0.17951 (19), -0.17794 (19), -0.17786 (20), -0.17738 (19), -0.17715 (20), -0.17682 (19), 
Length of domains: 16569
Time: pickout 0.1291    decision 0.4730    set_bounds 0.9453    solve 2.2432    add 0.4188    
Accumulated time: pickout 0.6109    decision 2.4916    set_bounds 2.3754    solve 6.8600    add 2.3658    
Current (lb-rhs): -0.19229799509048462
38468 domains visited
current_vram/total_varm: 21.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 18.614672660827637

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 146] [/input, 373] [/input-8, 418] [/input-12, 13] [/input-8, 158] [/input-8, 420] [/input-8, 154] [/input-8, 292] [/input-8, 158] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19365739822387695
10 lb beta sum: 7.7384843826293945, worst -0.10914015769958496
Time: prepare 0.7966    bound 6.5431    transfer 0.1694    finalize 0.2461    func 7.9665    
Accumulated time: func 14.9889    prepare 1.8837    bound 11.3380    transfer 0.3920    finalize 0.6703    
all_split False
======================Cut inference begins======================
max lb tensor(0.78787684) min lb tensor(-0.10064340)
Number of Verified Splits: 23310 of 32768
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 975 constraints, 53751 nonzero elements
cuts preparing time: 0.0193
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1267.
#cuts 1-3: 167
#cuts 4-6: 183
#cuts 7-9: 104
#cuts 10-12: 23
#cuts 13-15: 53
#cuts 16-18: 71
#cuts 19-21: 43
#cuts >= 20: 623
BICCOS time: 6.364484071731567 
BICCOS Cumulative time: 9.824706315994263
Preprocessing time: 0.9898848533630371 Inference time: 4.131302356719971 Add cuts time: 0.7885823249816895 Cut analysis time: 0.4547145366668701
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15389 (20), -0.14471 (20), -0.14463 (20), -0.13997 (20), -0.13777 (20), -0.13473 (20), -0.13314 (20), -0.12913 (20), -0.12859 (20), -0.12845 (20), -0.12584 (20), -0.12470 (20), -0.11986 (20), -0.11953 (20), -0.11932 (20), -0.11881 (20), -0.11857 (20), -0.11695 (20), -0.11604 (20), -0.11531 (20), 
Length of domains: 9643
Time: pickout 0.2467    decision 1.8942    set_bounds 1.9892    solve 8.2787    add 0.1670    
Accumulated time: pickout 0.8575    decision 4.3858    set_bounds 4.3646    solve 15.1387    add 2.5328    
Current (lb-rhs): -0.15389034152030945
47926 domains visited
Cumulative time: 37.797202825546265

BaB round 15
batch: 9643
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 146] [/input-8, 306] [/input-8, 420] [/input-12, 53] [/input-8, 306] [/input-8, 420] [/input-12, 53] [/input-8, 420] [/input-8, 146] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1913585662841797
10 lb beta sum: 12.76945972442627, worst -0.12577497959136963
Time: prepare 0.4709    bound 6.0127    transfer 0.1018    finalize 0.1426    func 6.8551    
Accumulated time: func 21.8440    prepare 2.3549    bound 17.3507    transfer 0.4937    finalize 0.8128    
all_split False
======================Cut inference begins======================
max lb tensor(1.12318623) min lb tensor(-0.06973433)
Number of Verified Splits: 14482 of 19286
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1236 constraints, 61180 nonzero elements
cuts preparing time: 0.0217
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1422.
#cuts 1-3: 182
#cuts 4-6: 150
#cuts 7-9: 35
#cuts 10-12: 31
#cuts 13-15: 63
#cuts 16-18: 89
#cuts 19-21: 78
#cuts >= 20: 794
BICCOS time: 4.430186033248901 
BICCOS Cumulative time: 14.254892349243164
Preprocessing time: 0.6431424617767334 Inference time: 2.750572919845581 Add cuts time: 0.5148415565490723 Cut analysis time: 0.5216290950775146
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06973 (22), -0.06908 (21), -0.06677 (22), -0.06619 (21), -0.06571 (22), -0.06555 (22), -0.06403 (21), -0.06403 (21), -0.06345 (21), -0.06328 (21), -0.06327 (21), -0.06266 (21), -0.06118 (21), -0.05990 (21), -0.05911 (22), -0.05807 (21), -0.05789 (22), -0.05755 (22), -0.05745 (22), -0.05732 (22), 
Length of domains: 4804
Time: pickout 0.1685    decision 0.8136    set_bounds 1.2002    solve 6.8598    add 0.1435    
Accumulated time: pickout 1.0260    decision 5.1995    set_bounds 5.5648    solve 21.9986    add 2.6762    
Current (lb-rhs): -0.06973433494567871
52730 domains visited
Cumulative time: 51.57309412956238

BaB round 16
batch: 4804
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 418] [/input-8, 418] [/input-8, 1195] [/input-8, 420] [/input-8, 147] [/input-8, 1395] [/input-8, 418] [/input-8, 418] [/input-8, 147] [/input-8, 1395] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1848130226135254
10 lb beta sum: 13.291760444641113, worst -0.0800938606262207
Time: prepare 0.2315    bound 3.3262    transfer 0.0494    finalize 0.0667    func 3.7366    
Accumulated time: func 25.5806    prepare 2.5867    bound 20.6768    transfer 0.5431    finalize 0.8795    
all_split False
======================Cut inference begins======================
max lb tensor(1.54399109) min lb tensor(-0.06093121)
Number of Verified Splits: 5203 of 9608
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1292 constraints, 62138 nonzero elements
cuts preparing time: 0.0211
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1490.
#cuts 1-3: 191
#cuts 4-6: 179
#cuts 7-9: 19
#cuts 10-12: 32
#cuts 13-15: 67
#cuts 16-18: 91
#cuts 19-21: 77
#cuts >= 20: 834
BICCOS time: 1.9369511604309082 
BICCOS Cumulative time: 16.191843509674072
Preprocessing time: 0.3225414752960205 Inference time: 0.8552708625793457 Add cuts time: 0.23408842086791992 Cut analysis time: 0.5250504016876221
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06093 (23), -0.05830 (22), -0.05763 (23), -0.05748 (23), -0.05681 (22), -0.05655 (23), -0.05622 (22), -0.05564 (22), -0.05558 (22), -0.05546 (22), -0.05391 (22), -0.05353 (22), -0.05329 (22), -0.05281 (23), -0.05251 (22), -0.05229 (22), -0.05202 (23), -0.05185 (22), -0.05137 (23), -0.04935 (23), 
Length of domains: 4405
Time: pickout 0.0927    decision 0.4815    set_bounds 0.4439    solve 3.9591    add 0.1854    
Accumulated time: pickout 1.1187    decision 5.6809    set_bounds 6.0087    solve 25.9576    add 2.8617    
Current (lb-rhs): -0.06093120574951172
57135 domains visited
Cumulative time: 58.739410400390625

BaB round 17
batch: 4405
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 154] [/input-8, 1387] [/input-12, 13] [/input-8, 1195] [/input-8, 154] [/input-8, 1387] [/input-12, 13] [/input-12, 13] [/input-8, 146] [/input-8, 1387] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18071699142456055
10 lb beta sum: 12.25688362121582, worst -0.08034420013427734
Time: prepare 0.2138    bound 3.1882    transfer 0.0478    finalize 0.0592    func 3.7642    
Accumulated time: func 29.3448    prepare 2.8009    bound 23.8650    transfer 0.5909    finalize 0.9387    
all_split False
======================Cut inference begins======================
max lb tensor(0.45667964) min lb tensor(-0.05289030)
Number of Verified Splits: 4629 of 8810
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 216.
#cuts 1-3: 17
#cuts 4-6: 196
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 1.2737319469451904 
BICCOS Cumulative time: 17.465575456619263
Preprocessing time: 0.2933008670806885 Inference time: 0.809356689453125 Add cuts time: 0.1593916416168213 Cut analysis time: 0.011682748794555664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05289 (24), -0.05281 (23), -0.05264 (23), -0.05196 (23), -0.05193 (24), -0.05152 (23), -0.05126 (23), -0.05117 (23), -0.05111 (23), -0.05038 (24), -0.04945 (24), -0.04811 (23), -0.04751 (24), -0.04675 (23), -0.04659 (24), -0.04653 (23), -0.04649 (23), -0.04643 (24), -0.04599 (24), -0.04584 (23), 
Length of domains: 4181
Time: pickout 0.1594    decision 0.4399    set_bounds 0.4017    solve 3.7668    add 0.1436    
Accumulated time: pickout 1.2781    decision 6.1208    set_bounds 6.4104    solve 29.7244    add 3.0053    
Current (lb-rhs): -0.05289030075073242
61316 domains visited
Cumulative time: 65.0230188369751

BaB round 18
batch: 4181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 306] [/input-12, 13] [/input-8, 306] [/input-8, 306] [/input-8, 306] [/input-8, 158] [/input-8, 1384] [/input-8, 420] [/input-8, 420] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17833614349365234
10 lb beta sum: 0.5797487497329712, worst -0.2254197895526886
Time: prepare 0.2078    bound 0.7784    transfer 0.0453    finalize 0.0586    func 1.1458    
Accumulated time: func 30.4906    prepare 3.0089    bound 24.6434    transfer 0.6362    finalize 0.9973    
all_split False
======================Cut inference begins======================
max lb tensor(1.24748039) min lb tensor(-0.05289030)
Number of Verified Splits: 1561 of 8362
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 216.
#cuts 1-3: 17
#cuts 4-6: 196
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.8436815738677979 
BICCOS Cumulative time: 18.30925703048706
Preprocessing time: 0.28191471099853516 Inference time: 0.480975866317749 Add cuts time: 0.07207036018371582 Cut analysis time: 0.008720636367797852
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05289 (25), -0.05281 (24), -0.05281 (24), -0.05264 (24), -0.05264 (24), -0.05196 (24), -0.05196 (24), -0.05193 (25), -0.05152 (24), -0.05152 (24), -0.05126 (24), -0.05126 (24), -0.05117 (24), -0.05117 (24), -0.05111 (24), -0.05111 (24), -0.05038 (25), -0.04945 (25), -0.04811 (24), -0.04811 (24), 
Length of domains: 6801
Time: pickout 0.0875    decision 0.2404    set_bounds 0.5637    solve 1.1491    add 0.1521    
Accumulated time: pickout 1.3656    decision 6.3612    set_bounds 6.9740    solve 30.8735    add 3.1573    
Current (lb-rhs): -0.05289030075073242
68117 domains visited
Cumulative time: 68.09217596054077

BaB round 19
batch: 6801
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 416] [/input-8, 423] [/input-8, 416] [/input-8, 423] [/input-8, 1195] [/input-8, 423] [/input-8, 1178] [/input-8, 154] [/input-8, 1195] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6244382262229919, worst -0.1713600754737854
10 lb beta sum: 0.6320221424102783, worst -0.2156836986541748
Time: prepare 0.6701    bound 1.2497    transfer 0.0741    finalize 0.0963    func 2.1818    
Accumulated time: func 32.6724    prepare 3.6794    bound 25.8931    transfer 0.7104    finalize 1.0936    
all_split False
======================Cut inference begins======================
max lb tensor(0.50153190) min lb tensor(-0.05289030)
Number of Verified Splits: 1648 of 13602
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1312 constraints, 61917 nonzero elements
cuts preparing time: 0.0241
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1365.
#cuts 1-3: 200
#cuts 4-6: 28
#cuts 7-9: 23
#cuts 10-12: 38
#cuts 13-15: 71
#cuts 16-18: 96
#cuts 19-21: 78
#cuts >= 20: 831
BICCOS time: 1.6140012741088867 
BICCOS Cumulative time: 19.923258304595947
Preprocessing time: 0.683448314666748 Inference time: 0.36025428771972656 Add cuts time: 0.04700016975402832 Cut analysis time: 0.5232985019683838
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05289 (26), -0.05281 (25), -0.05281 (25), -0.05281 (25), -0.05281 (25), -0.05264 (25), -0.05264 (25), -0.05264 (25), -0.05264 (25), -0.05196 (25), -0.05196 (25), -0.05196 (25), -0.05196 (25), -0.05193 (26), -0.05152 (25), -0.05152 (25), -0.05152 (25), -0.05152 (25), -0.05126 (25), -0.05126 (25), 
Length of domains: 11954
Time: pickout 0.1349    decision 0.3861    set_bounds 0.8335    solve 2.1854    add 0.1683    
Accumulated time: pickout 1.5005    decision 6.7473    set_bounds 7.8076    solve 33.0588    add 3.3256    
Current (lb-rhs): -0.05289030075073242
80071 domains visited
Cumulative time: 73.45404052734375

BaB round 20
batch: 11954
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-8, 1949] [/input-12, 53] [/input-8, 1949] [/input-12, 13] [/input-12, 53] [/input-8, 1629] [/input-12, 13] [/input-12, 13] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16950654983520508
10 lb beta sum: 7.144882678985596, worst -0.07576704025268555
Time: prepare 0.5857    bound 7.8179    transfer 0.1305    finalize 0.4619    func 9.1550    
Accumulated time: func 41.8274    prepare 4.2654    bound 33.7110    transfer 0.8409    finalize 1.5554    
all_split False
======================Cut inference begins======================
max lb tensor(1.54707491) min lb tensor(-0.05127215)
Number of Verified Splits: 21712 of 23908
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1376 constraints, 64187 nonzero elements
cuts preparing time: 0.4278
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1434.
#cuts 1-3: 187
#cuts 4-6: 38
#cuts 7-9: 27
#cuts 10-12: 54
#cuts 13-15: 77
#cuts 16-18: 103
#cuts 19-21: 87
#cuts >= 20: 861
BICCOS time: 6.849111557006836 
BICCOS Cumulative time: 26.772369861602783
Preprocessing time: 0.7801411151885986 Inference time: 4.70849347114563 Add cuts time: 0.4093344211578369 Cut analysis time: 0.9511425495147705
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05127 (27), -0.04945 (27), -0.04856 (26), -0.04794 (27), -0.04755 (26), -0.04741 (26), -0.04720 (26), -0.04688 (27), -0.04645 (27), -0.04588 (26), -0.04587 (26), -0.04552 (26), -0.04542 (27), -0.04536 (26), -0.04524 (26), -0.04460 (27), -0.04391 (26), -0.04389 (27), -0.04384 (27), -0.04310 (26), 
Length of domains: 2196
Time: pickout 0.2123    decision 0.9230    set_bounds 1.3737    solve 9.1607    add 0.1068    
Accumulated time: pickout 1.7127    decision 7.6703    set_bounds 9.1813    solve 42.2196    add 3.4324    
Current (lb-rhs): -0.05127215385437012
82267 domains visited
Cumulative time: 92.33887577056885

BaB round 21
batch: 2196
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 420] [/input-8, 420] [/input-8, 420] [/input-8, 146] [/input-8, 146] [/input-8, 146] [/input-8, 146] [/input-8, 420] [/input-8, 1384] [/input-8, 1384] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1672515869140625
10 lb beta sum: 11.126219749450684, worst -0.12934589385986328
Time: prepare 0.1139    bound 1.6505    transfer 0.0234    finalize 0.0292    func 1.8459    
Accumulated time: func 43.6733    prepare 4.3798    bound 35.3614    transfer 0.8643    finalize 1.5847    
all_split False
======================Cut inference begins======================
max lb tensor(0.82682556) min lb tensor(-0.04517531)
Number of Verified Splits: 2512 of 4392
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 33
#cuts 4-6: 25
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.6721498966217041 
BICCOS Cumulative time: 27.444519758224487
Preprocessing time: 0.14211106300354004 Inference time: 0.4816315174102783 Add cuts time: 0.04237556457519531 Cut analysis time: 0.00603175163269043
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04518 (28), -0.04508 (28), -0.04419 (27), -0.04391 (27), -0.04390 (28), -0.04378 (27), -0.04363 (28), -0.04359 (28), -0.04356 (27), -0.04344 (27), -0.04321 (27), -0.04205 (27), -0.04201 (27), -0.04190 (27), -0.04184 (28), -0.04176 (27), -0.04153 (27), -0.04114 (27), -0.04104 (28), -0.04101 (28), 
Length of domains: 1880
Time: pickout 0.0740    decision 0.1423    set_bounds 0.2105    solve 1.8472    add 0.0965    
Accumulated time: pickout 1.7867    decision 7.8127    set_bounds 9.3917    solve 44.0668    add 3.5288    
Current (lb-rhs): -0.04517531394958496
84147 domains visited
Cumulative time: 95.42099165916443

BaB round 22
batch: 1880
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 146] [/input-8, 146] [/input-8, 146] [/input-8, 1949] [/input-8, 146] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16567039489746094
10 lb beta sum: 0.5029812455177307, worst -0.20433533191680908
Time: prepare 0.0961    bound 0.2718    transfer 0.0167    finalize 0.0226    func 0.4317    
Accumulated time: func 44.1051    prepare 4.4762    bound 35.6332    transfer 0.8810    finalize 1.6073    
all_split False
======================Cut inference begins======================
max lb tensor(0.45838347) min lb tensor(-0.04517531)
Number of Verified Splits: 1310 of 3760
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 33
#cuts 4-6: 25
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.4004027843475342 
BICCOS Cumulative time: 27.84492254257202
Preprocessing time: 0.12045645713806152 Inference time: 0.25614237785339355 Add cuts time: 0.02115941047668457 Cut analysis time: 0.0026445388793945312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04518 (29), -0.04508 (29), -0.04419 (28), -0.04391 (28), -0.04390 (29), -0.04378 (28), -0.04363 (29), -0.04359 (29), -0.04356 (28), -0.04344 (28), -0.04321 (28), -0.04205 (28), -0.04201 (28), -0.04190 (28), -0.04184 (29), -0.04176 (28), -0.04153 (28), -0.04114 (28), -0.04104 (29), -0.04104 (29), 
Length of domains: 2450
Time: pickout 0.0551    decision 0.1123    set_bounds 0.1689    solve 0.4330    add 0.0985    
Accumulated time: pickout 1.8418    decision 7.9250    set_bounds 9.5607    solve 44.4997    add 3.6273    
Current (lb-rhs): -0.04517531394958496
86597 domains visited
Cumulative time: 96.7158625125885

BaB round 23
batch: 2450
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input-8, 1395] [/input-8, 154] [/input-8, 154] [/input-8, 154] [/input-8, 154] [/input-8, 154] [/input-8, 154] [/input-8, 154] [/input-8, 154] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4900517761707306, worst -0.15850310027599335
10 lb beta sum: 0.49715980887413025, worst -0.16202330589294434
Time: prepare 0.2310    bound 0.3356    transfer 0.0257    finalize 0.0325    func 0.6573    
Accumulated time: func 44.7624    prepare 4.7074    bound 35.9689    transfer 0.9067    finalize 1.6399    
all_split False
======================Cut inference begins======================
max lb tensor(0.34543878) min lb tensor(-0.04517531)
Number of Verified Splits: 210 of 4900
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1388 constraints, 63967 nonzero elements
cuts preparing time: 0.1913
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1442.
#cuts 1-3: 191
#cuts 4-6: 31
#cuts 7-9: 31
#cuts 10-12: 59
#cuts 13-15: 85
#cuts 16-18: 103
#cuts 19-21: 91
#cuts >= 20: 851
BICCOS time: 0.9078478813171387 
BICCOS Cumulative time: 28.75277042388916
Preprocessing time: 0.15625333786010742 Inference time: 0.043161630630493164 Add cuts time: 0.005239009857177734 Cut analysis time: 0.7031939029693604
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04518 (30), -0.04518 (30), -0.04508 (30), -0.04508 (30), -0.04419 (29), -0.04419 (29), -0.04391 (29), -0.04391 (29), -0.04390 (30), -0.04390 (30), -0.04378 (29), -0.04378 (29), -0.04363 (30), -0.04363 (30), -0.04359 (30), -0.04359 (30), -0.04356 (29), -0.04356 (29), -0.04344 (29), -0.04344 (29), 
Length of domains: 4690
Time: pickout 0.0620    decision 0.1492    set_bounds 0.3891    solve 0.6584    add 0.1857    
Accumulated time: pickout 1.9038    decision 8.0741    set_bounds 9.9498    solve 45.1581    add 3.8131    
Current (lb-rhs): -0.04517531394958496
91287 domains visited
Cumulative time: 99.0831949710846

BaB round 24
batch: 4690
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1629] [/input-8, 1629] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] [/input-8, 1395] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15674829483032227
10 lb beta sum: 15.38116455078125, worst -0.16142058372497559
Time: prepare 0.2092    bound 3.2983    transfer 0.0514    finalize 0.0615    func 3.6844    
Accumulated time: func 48.4468    prepare 4.9169    bound 39.2671    transfer 0.9582    finalize 1.7013    
all_split False
======================Cut inference begins======================
max lb tensor(0.52072942) min lb tensor(-0.04148245)
Number of Verified Splits: 6194 of 9380
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1413 constraints, 64348 nonzero elements
cuts preparing time: 0.0239
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1472.
#cuts 1-3: 199
#cuts 4-6: 35
#cuts 7-9: 34
#cuts 10-12: 59
#cuts 13-15: 88
#cuts 16-18: 107
#cuts 19-21: 90
#cuts >= 20: 860
BICCOS time: 2.433262348175049 
BICCOS Cumulative time: 31.18603277206421
Preprocessing time: 0.3047754764556885 Inference time: 1.5093426704406738 Add cuts time: 0.08324480056762695 Cut analysis time: 0.5358994007110596
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04148 (31), -0.04109 (31), -0.03959 (31), -0.03916 (31), -0.03910 (31), -0.03908 (30), -0.03899 (31), -0.03892 (30), -0.03878 (31), -0.03857 (31), -0.03811 (31), -0.03805 (31), -0.03797 (31), -0.03741 (31), -0.03723 (30), -0.03707 (31), -0.03692 (30), -0.03659 (30), -0.03652 (31), -0.03649 (30), 
Length of domains: 3186
Time: pickout 0.1798    decision 0.2638    set_bounds 0.5974    solve 3.6872    add 0.1404    
Accumulated time: pickout 2.0836    decision 8.3379    set_bounds 10.5472    solve 48.8453    add 3.9535    
Current (lb-rhs): -0.04148244857788086
94473 domains visited
Cumulative time: 106.46260046958923

BaB round 25
batch: 3186
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 423] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 1395] [/input-8, 416] [/input-8, 416] [/input-8, 416] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15374326705932617
10 lb beta sum: 15.093965530395508, worst -0.15472912788391113
Time: prepare 0.3074    bound 2.3153    transfer 0.0274    finalize 0.0383    func 2.7309    
Accumulated time: func 51.1776    prepare 5.2245    bound 41.5824    transfer 0.9856    finalize 1.7396    
all_split False
======================Cut inference begins======================
max lb tensor(0.39493543) min lb tensor(-0.03916430)
Number of Verified Splits: 2876 of 6372
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 37
#cuts 4-6: 16
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.8686590194702148 
BICCOS Cumulative time: 32.054691791534424
Preprocessing time: 0.20696520805358887 Inference time: 0.6087424755096436 Add cuts time: 0.04575943946838379 Cut analysis time: 0.007191896438598633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03916 (32), -0.03913 (32), -0.03857 (32), -0.03817 (32), -0.03797 (32), -0.03747 (31), -0.03736 (32), -0.03723 (32), -0.03723 (32), -0.03689 (32), -0.03604 (32), -0.03604 (31), -0.03598 (31), -0.03551 (31), -0.03529 (32), -0.03486 (32), -0.03483 (31), -0.03472 (32), -0.03467 (31), -0.03424 (31), 
Length of domains: 3496
Time: pickout 0.0736    decision 0.1851    set_bounds 0.2887    solve 2.7323    add 0.1402    
Accumulated time: pickout 2.1572    decision 8.5230    set_bounds 10.8360    solve 51.5776    add 4.0937    
Current (lb-rhs): -0.03916430473327637
97969 domains visited
Cumulative time: 110.7970986366272

BaB round 26
batch: 3496
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 423] [/input-8, 1395] [/input-8, 1395] [/input-8, 1754] [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 1754] [/input-8, 414] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15038156509399414
10 lb beta sum: 0.41236117482185364, worst -0.21971839666366577
Time: prepare 0.1609    bound 0.4458    transfer 0.0372    finalize 0.0428    func 0.7340    
Accumulated time: func 51.9116    prepare 5.3857    bound 42.0282    transfer 1.0228    finalize 1.7824    
all_split False
======================Cut inference begins======================
max lb tensor(0.55748439) min lb tensor(-0.03916430)
Number of Verified Splits: 1278 of 6992
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1426 constraints, 64611 nonzero elements
cuts preparing time: 0.0248
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1470.
#cuts 1-3: 190
#cuts 4-6: 30
#cuts 7-9: 38
#cuts 10-12: 58
#cuts 13-15: 93
#cuts 16-18: 113
#cuts 19-21: 88
#cuts >= 20: 860
BICCOS time: 1.2343692779541016 
BICCOS Cumulative time: 33.289061069488525
Preprocessing time: 0.2230818271636963 Inference time: 0.4542989730834961 Add cuts time: 0.019062280654907227 Cut analysis time: 0.537926197052002
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03916 (33), -0.03916 (33), -0.03913 (33), -0.03913 (33), -0.03857 (33), -0.03857 (33), -0.03817 (33), -0.03817 (33), -0.03797 (33), -0.03797 (33), -0.03747 (32), -0.03736 (33), -0.03736 (33), -0.03723 (33), -0.03723 (33), -0.03723 (33), -0.03723 (33), -0.03689 (33), -0.03689 (33), -0.03604 (33), 
Length of domains: 5714
Time: pickout 0.0832    decision 0.2024    set_bounds 0.4796    solve 0.7359    add 0.1446    
Accumulated time: pickout 2.2404    decision 8.7254    set_bounds 11.3155    solve 52.3136    add 4.2383    
Current (lb-rhs): -0.03916430473327637
103683 domains visited
Cumulative time: 113.70578145980835

BaB round 27
batch: 5714
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 414] [/input-8, 414] [/input-8, 414] [/input-8, 423] [/input-8, 423] [/input-8, 423] [/input-8, 423] [/input-8, 423] [/input-8, 414] [/input-8, 1754] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1451864242553711
10 lb beta sum: 14.758416175842285, worst -0.1336684226989746
Time: prepare 0.2649    bound 4.0410    transfer 0.0627    finalize 0.0792    func 4.7365    
Accumulated time: func 56.6481    prepare 5.6509    bound 46.0691    transfer 1.0855    finalize 1.8616    
all_split False
======================Cut inference begins======================
max lb tensor(0.33199680) min lb tensor(-0.03293443)
Number of Verified Splits: 6968 of 11428
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1439 constraints, 64579 nonzero elements
cuts preparing time: 0.2597
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1486.
#cuts 1-3: 199
#cuts 4-6: 24
#cuts 7-9: 45
#cuts 10-12: 57
#cuts 13-15: 99
#cuts 16-18: 118
#cuts 19-21: 89
#cuts >= 20: 855
BICCOS time: 2.7692558765411377 
BICCOS Cumulative time: 36.05831694602966
Preprocessing time: 0.36546778678894043 Inference time: 1.538938283920288 Add cuts time: 0.08522772789001465 Cut analysis time: 0.7796220779418945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03293 (34), -0.03241 (34), -0.03204 (34), -0.03189 (34), -0.03174 (34), -0.03152 (34), -0.03126 (34), -0.03082 (33), -0.03073 (34), -0.03026 (33), -0.03025 (33), -0.03019 (34), -0.03005 (33), -0.02992 (33), -0.02990 (34), -0.02972 (34), -0.02957 (34), -0.02944 (33), -0.02937 (34), -0.02926 (33), 
Length of domains: 4460
Time: pickout 0.1182    decision 0.3214    set_bounds 0.6865    solve 4.7393    add 0.1422    
Accumulated time: pickout 2.3586    decision 9.0468    set_bounds 12.0021    solve 57.0528    add 4.3805    
Current (lb-rhs): -0.03293442726135254
108143 domains visited
Cumulative time: 122.56738471984863

BaB round 28
batch: 4460
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1754] [/input-8, 737] [/input-8, 414] [/input-8, 939] [/input-8, 939] [/input-8, 414] [/input-8, 414] [/input-8, 1178] [/input-8, 423] [/input-8, 423] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14223623275756836
10 lb beta sum: 6.042886734008789, worst -0.05375504493713379
Time: prepare 0.4032    bound 3.2020    transfer 0.0484    finalize 0.0551    func 3.7682    
Accumulated time: func 60.4164    prepare 6.0544    bound 49.2711    transfer 1.1339    finalize 1.9167    
all_split False
======================Cut inference begins======================
max lb tensor(1.49127555) min lb tensor(-0.02719307)
Number of Verified Splits: 8433 of 8920
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1450 constraints, 64798 nonzero elements
cuts preparing time: 0.0250
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1496.
#cuts 1-3: 202
#cuts 4-6: 20
#cuts 7-9: 47
#cuts 10-12: 60
#cuts 13-15: 99
#cuts 16-18: 117
#cuts 19-21: 90
#cuts >= 20: 861
BICCOS time: 3.066774368286133 
BICCOS Cumulative time: 39.125091314315796
Preprocessing time: 0.30008482933044434 Inference time: 2.1067864894866943 Add cuts time: 0.11345028877258301 Cut analysis time: 0.5464527606964111
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02719 (35), -0.02574 (35), -0.02492 (35), -0.02468 (34), -0.02441 (35), -0.02399 (34), -0.02269 (34), -0.02207 (35), -0.02172 (35), -0.02172 (34), -0.02167 (35), -0.02131 (35), -0.02112 (34), -0.02108 (35), -0.02038 (35), -0.02027 (35), -0.02012 (34), -0.02011 (34), -0.02005 (35), -0.01995 (34), 
Length of domains: 487
Time: pickout 0.0985    decision 0.2570    set_bounds 0.3878    solve 3.7706    add 0.0846    
Accumulated time: pickout 2.4571    decision 9.3038    set_bounds 12.3899    solve 60.8235    add 4.4651    
Current (lb-rhs): -0.027193069458007812
108630 domains visited
Cumulative time: 130.33211302757263

BaB round 29
batch: 487
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input-8, 1195] [/input, 3544] [/input-8, 1195] [/input, 3544] [/input, 3544] [/input-8, 242] [/input, 3544] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14071941375732422
10 lb beta sum: 7.863468170166016, worst -0.039060354232788086
Time: prepare 0.0229    bound 0.3972    transfer 0.0061    finalize 0.0072    func 0.4398    
Accumulated time: func 60.8562    prepare 6.0775    bound 49.6683    transfer 1.1401    finalize 1.9240    
all_split False
======================Cut inference begins======================
max lb tensor(1.10854244) min lb tensor(-0.01448250)
Number of Verified Splits: 943 of 974
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 44
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.24901723861694336 
BICCOS Cumulative time: 39.37410855293274
Preprocessing time: 0.03084540367126465 Inference time: 0.20182037353515625 Add cuts time: 0.011220455169677734 Cut analysis time: 0.0051310062408447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (36), -0.01440 (36), -0.01341 (36), -0.01336 (36), -0.01156 (36), -0.01144 (36), -0.01002 (36), -0.00973 (36), -0.00967 (36), -0.00899 (35), -0.00734 (36), -0.00728 (36), -0.00725 (36), -0.00722 (35), -0.00653 (35), -0.00636 (36), -0.00632 (36), -0.00589 (35), -0.00494 (35), -0.00446 (35), 
Length of domains: 31
Time: pickout 0.0226    decision 0.0382    set_bounds 0.0385    solve 0.4401    add 0.0613    
Accumulated time: pickout 2.4797    decision 9.3420    set_bounds 12.4284    solve 61.2636    add 4.5264    
Current (lb-rhs): -0.014482498168945312
108661 domains visited
Cumulative time: 131.19641160964966

BaB round 30
batch: 31
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1195] [/input-8, 737] [/input-8, 1195] [/input-8, 737] [/input-8, 737] [/input-8, 737] [/input-8, 737] [/input-8, 737] [/input-8, 1195] [/input-8, 737] 
split level 1: [/input-8, 737] [/input-8, 154] [/input-8, 737] [/input, 408] [/input, 408] [/input, 408] [/input, 408] [/input-8, 154] [/input-8, 737] [/input, 408] 
split level 2: [/input, 408] [/input, 408] [/input, 408] [/input-8, 1754] [/input-8, 1754] [/input-8, 1754] [/input-8, 1754] [/input, 408] [/input, 408] [/input-8, 1754] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12950658798217773
10 lb beta sum: 1.7788077592849731, worst -0.1168718934059143
Time: prepare 0.0061    bound 0.1540    transfer 0.0007    finalize 0.0017    func 0.1641    
Accumulated time: func 61.0203    prepare 6.0839    bound 49.8224    transfer 1.1407    finalize 1.9257    
all_split False
======================Cut inference begins======================
max lb tensor(0.55762589) min lb tensor(-0.01448250)
Number of Verified Splits: 98 of 248
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 44
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03492474555969238 
BICCOS Cumulative time: 39.40903329849243
Preprocessing time: 0.007817506790161133 Inference time: 0.021968603134155273 Add cuts time: 0.0032465457916259766 Cut analysis time: 0.00189208984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (39), -0.01448 (39), -0.01448 (39), -0.01448 (39), -0.01440 (39), -0.01440 (39), -0.01440 (39), -0.01440 (39), -0.01341 (39), -0.01341 (39), -0.01341 (39), -0.01341 (39), -0.01336 (39), -0.01336 (39), -0.01336 (39), -0.01336 (39), -0.01156 (39), -0.01156 (39), -0.01156 (39), -0.01156 (39), 
Length of domains: 150
Time: pickout 0.0056    decision 0.0164    set_bounds 0.0192    solve 0.1642    add 0.0765    
Accumulated time: pickout 2.4853    decision 9.3584    set_bounds 12.4476    solve 61.4278    add 4.6029    
Current (lb-rhs): -0.014482498168945312
108811 domains visited
Cumulative time: 131.5212128162384

BaB round 31
batch: 150
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0126750469207764, worst -0.11565709114074707
10 lb beta sum: 2.0126750469207764, worst -0.11549496650695801
Time: prepare 0.0142    bound 0.1492    transfer 0.0007    finalize 0.0018    func 0.1679    
Accumulated time: func 61.1883    prepare 6.0983    bound 49.9715    transfer 1.1414    finalize 1.9275    
all_split False
======================Cut inference begins======================
max lb tensor(0.15464354) min lb tensor(-0.01448250)
Number of Verified Splits: 59 of 300
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 46
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.027259111404418945 
BICCOS Cumulative time: 39.43629240989685
Preprocessing time: 0.009164094924926758 Inference time: 0.01362299919128418 Add cuts time: 0.0026845932006835938 Cut analysis time: 0.001787424087524414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (40), -0.01448 (40), -0.01448 (40), -0.01448 (40), -0.01448 (40), -0.01448 (40), -0.01448 (40), -0.01448 (40), -0.01440 (40), -0.01440 (40), -0.01440 (40), -0.01440 (40), -0.01440 (40), -0.01440 (40), -0.01440 (40), -0.01440 (40), -0.01341 (40), -0.01341 (40), -0.01341 (40), -0.01341 (40), 
Length of domains: 241
Time: pickout 0.0167    decision 0.0194    set_bounds 0.0134    solve 0.1680    add 0.0761    
Accumulated time: pickout 2.5021    decision 9.3778    set_bounds 12.4610    solve 61.5958    add 4.6790    
Current (lb-rhs): -0.014482498168945312
109052 domains visited
Cumulative time: 131.849956035614

BaB round 32
batch: 241
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 374] [/input, 374] [/input, 374] [/input-8, 1178] [/input-8, 939] [/input, 374] [/input, 374] [/input, 374] [/input, 374] [/input-8, 939] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1253662109375
10 lb beta sum: 1.7670401334762573, worst -0.11297756433486938
Time: prepare 0.0114    bound 0.1506    transfer 0.0012    finalize 0.0027    func 0.1691    
Accumulated time: func 61.3574    prepare 6.1099    bound 50.1221    transfer 1.1426    finalize 1.9302    
all_split False
======================Cut inference begins======================
max lb tensor(0.27848291) min lb tensor(-0.01448250)
Number of Verified Splits: 10 of 482
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 46
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.02095484733581543 
BICCOS Cumulative time: 39.457247257232666
Preprocessing time: 0.014554738998413086 Inference time: 0.002477884292602539 Add cuts time: 0.0022110939025878906 Cut analysis time: 0.001711130142211914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01448 (41), -0.01440 (41), -0.01440 (41), -0.01440 (41), -0.01440 (41), 
Length of domains: 472
Time: pickout 0.0186    decision 0.0238    set_bounds 0.0215    solve 0.1692    add 0.0852    
Accumulated time: pickout 2.5207    decision 9.4015    set_bounds 12.4825    solve 61.7650    add 4.7642    
Current (lb-rhs): -0.014482498168945312
109524 domains visited
Cumulative time: 132.197744846344

BaB round 33
batch: 472
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1178] [/input-8, 1178] [/input-8, 1178] [/input-8, 939] [/input-8, 1178] [/input-8, 939] [/input-8, 939] [/input, 469] [/input, 469] [/input-8, 1178] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1045949459075928, worst -0.11294424533843994
10 lb beta sum: 2.1045949459075928, worst -0.11291754245758057
Time: prepare 0.0455    bound 0.1617    transfer 0.0022    finalize 0.0066    func 0.2221    
Accumulated time: func 61.5795    prepare 6.1557    bound 50.2839    transfer 1.1448    finalize 1.9368    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00062180) min lb tensor(-0.01448250)
Number of Verified Splits: 0 of 944
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
Total number of valid cuts: 49.
#cuts 1-3: 46
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03257632255554199 
BICCOS Cumulative time: 39.48982357978821
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), -0.01448 (42), 
Length of domains: 944
Time: pickout 0.0237    decision 0.0370    set_bounds 0.0398    solve 0.2223    add 0.0997    
Accumulated time: pickout 2.5443    decision 9.4386    set_bounds 12.5224    solve 61.9874    add 4.8639    
Current (lb-rhs): -0.014482498168945312
110468 domains visited
Cumulative time: 132.66118144989014

BaB round 34
batch: 944
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1754] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-8, 1178] [/input-8, 1178] [/input-8, 1178] [/input-8, 1178] [/input, 374] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1045949459075928, worst -0.1129080057144165
10 lb beta sum: 2.1045949459075928, worst -0.11290514469146729
Time: prepare 0.0960    bound 0.2134    transfer 0.0053    finalize 0.0124    func 0.3391    
Accumulated time: func 61.9185    prepare 6.2519    bound 50.4973    transfer 1.1501    finalize 1.9492    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00062180) min lb tensor(-0.01448250)
Number of Verified Splits: 0 of 1888
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
Total number of valid cuts: 49.
#cuts 1-3: 46
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.06049633026123047 
BICCOS Cumulative time: 39.55031991004944
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), -0.01448 (43), 
Length of domains: 1888
Time: pickout 0.0399    decision 0.0630    set_bounds 0.0769    solve 0.3400    add 0.0955    
Accumulated time: pickout 2.5843    decision 9.5015    set_bounds 12.5993    solve 62.3274    add 4.9594    
Current (lb-rhs): -0.014482498168945312
112356 domains visited
Cumulative time: 133.34591841697693

BaB round 35
batch: 1888
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 939] [/input-8, 939] [/input-8, 939] [/input-8, 1378] [/input-8, 1378] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-8, 1754] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1045947074890137, worst -0.11002373695373535
10 lb beta sum: 2.1045947074890137, worst -0.11002659797668457
Time: prepare 0.1941    bound 0.3596    transfer 0.0122    finalize 0.0215    func 0.6123    
Accumulated time: func 62.5309    prepare 6.4463    bound 50.8569    transfer 1.1623    finalize 1.9708    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00062180) min lb tensor(-0.01448250)
Number of Verified Splits: 0 of 3776
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0016
Total number of valid cuts: 49.
#cuts 1-3: 46
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.12080955505371094 
BICCOS Cumulative time: 39.67112946510315
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), -0.01448 (44), 
Length of domains: 3776
Time: pickout 0.0600    decision 0.2483    set_bounds 0.1612    solve 0.6130    add 0.1368    
Accumulated time: pickout 2.6443    decision 9.7499    set_bounds 12.7605    solve 62.9403    add 5.0962    
Current (lb-rhs): -0.014482498168945312
116132 domains visited
Cumulative time: 134.69655966758728

BaB round 36
batch: 3776
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-8, 1754] [/input-8, 1754] [/input, 963] [/input-8, 410] [/input-8, 1378] [/input-8, 1378] [/input-8, 939] [/input-8, 939] [/input-8, 1378] 
cut re-enabled after branching node selection
0 lb beta sum: 2.1045947074890137, worst -0.10896432399749756
10 lb beta sum: 2.1045947074890137, worst -0.10885179042816162
Time: prepare 0.3916    bound 0.6447    transfer 0.0382    finalize 0.0434    func 1.1663    
Accumulated time: func 63.6971    prepare 6.8381    bound 51.5016    transfer 1.2006    finalize 2.0142    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00062180) min lb tensor(-0.01448250)
Number of Verified Splits: 0 of 7552
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1443 constraints, 64552 nonzero elements
cuts preparing time: 0.1909
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1492.
#cuts 1-3: 202
#cuts 4-6: 21
#cuts 7-9: 48
#cuts 10-12: 61
#cuts 13-15: 101
#cuts 16-18: 116
#cuts 19-21: 95
#cuts >= 20: 848
BICCOS time: 0.9466457366943359 
BICCOS Cumulative time: 40.617775201797485
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), -0.01448 (45), 
Length of domains: 7552
Time: pickout 0.1000    decision 0.2177    set_bounds 0.4594    solve 1.1681    add 0.1951    
Accumulated time: pickout 2.7442    decision 9.9676    set_bounds 13.2199    solve 64.1085    add 5.2914    
Current (lb-rhs): -0.014482498168945312
123684 domains visited
Cumulative time: 137.79666304588318

BaB round 37
batch: 7552
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input, 374] [/input, 469] [/input, 963] [/input-8, 410] [/input-8, 1754] [/input-12, 68] [/input-8, 410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11235666275024414
10 lb beta sum: 15.85302734375, worst -0.03638482093811035
Time: prepare 0.4311    bound 5.3072    transfer 0.0781    finalize 0.0979    func 6.2440    
Accumulated time: func 69.9412    prepare 7.2696    bound 56.8089    transfer 1.2787    finalize 2.1120    
all_split False
======================Cut inference begins======================
max lb tensor(0.04428005) min lb tensor(-0.00075006)
Number of Verified Splits: 15102 of 15104
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts: total 1474 constraints, 64910 nonzero elements
cuts preparing time: 0.0230
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1475.
#cuts 1-3: 157
#cuts 4-6: 18
#cuts 7-9: 60
#cuts 10-12: 72
#cuts 13-15: 110
#cuts 16-18: 112
#cuts 19-21: 98
#cuts >= 20: 848
BICCOS time: 5.799242973327637 
BICCOS Cumulative time: 46.41701817512512
Preprocessing time: 0.4918370246887207 Inference time: 4.574497222900391 Add cuts time: 0.19183564186096191 Cut analysis time: 0.5410730838775635
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00075 (45), -0.00026 (45), 
Length of domains: 2
Time: pickout 0.2913    decision 0.4202    set_bounds 0.8466    solve 6.2466    add 0.0297    
Accumulated time: pickout 3.0355    decision 10.3878    set_bounds 14.0665    solve 70.3550    add 5.3211    
Current (lb-rhs): -0.0007500648498535156
123686 domains visited
Cumulative time: 151.57332301139832

BaB round 38
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 1378] 
split level 1: [/input-8, 1399] [/input-8, 141] 
split level 2: [/input-12, 68] [/input-8, 1399] 
split level 3: [/input-8, 410] [/input-12, 68] 
split level 4: [/input, 408] [/input, 408] 
split level 5: [/input, 963] [/input, 963] 
split level 6: [/input, 492] [/input, 492] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09127521514892578

all verified at 3th iter
Time: prepare 0.0066    bound 0.0354    transfer 0.0024    finalize 0.0013    func 0.0474    
Accumulated time: func 69.9885    prepare 7.2766    bound 56.8442    transfer 1.2811    finalize 2.1133    
all_split False
======================Cut inference begins======================
max lb tensor(0.05970681) min lb tensor(0.03175664)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
Total number of valid cuts: 1475.
#cuts 1-3: 157
#cuts 4-6: 18
#cuts 7-9: 60
#cuts 10-12: 72
#cuts 13-15: 110
#cuts 16-18: 112
#cuts 19-21: 98
#cuts >= 20: 848
BICCOS time: 0.009865999221801758 
BICCOS Cumulative time: 46.426884174346924
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.0243    set_bounds 0.0375    solve 0.0474    add 0.0001    
Accumulated time: pickout 3.0371    decision 10.4121    set_bounds 14.1040    solve 70.4025    add 5.3212    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
123686 domains visited
Cumulative time: 151.69605660438538

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=13_spec=0_26931692.log
found process for pidx=0
kill process for pidx=0
Result: safe in 154.3116 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.06784821, -10.58980083, -14.57435703, -13.27788925, -13.83081436,
         -14.45864487, -13.14409447, -13.97298336, -12.07690144,  -9.28960514]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 479] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 479] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 217] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.56003833, 0.62899357, 3.70473790, 2.64315939, 3.00231934, 3.71363783,
         2.32806015, 2.93838763, 1.83370125]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [587]; unstable size 587; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 587] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 587] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 587] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 221] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55051112,  4.09006119,  0.36009502, -0.47126287, -0.31621832,
          1.88454628, -0.86957830,  4.73674631,  3.06783509]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.44266796, -16.16106987, -11.92645931, -10.71731567, -11.05861855,
         -10.75457382, -13.42498779, -10.81375790, -16.44475365, -15.04152584]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193],
         [-14.83619690, -16.61016846, -12.28275108, -11.27688122, -11.14465904,
          -11.27646160, -13.88090134, -10.95770168, -16.84897423, -15.54391193]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13222218, -0.00041962, -0.31917953]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0128 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0733 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [857]; unstable size 857; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 401, 1, 857] with unstable size 400 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 857] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 857] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [400]; unstable size 400; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 400] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 400] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.34057283,  3.30707383, -1.46605659, -1.78303552, -0.07614887,
         -1.46367049,  0.02865028,  2.77813005,  3.23617673]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.68520546, -29.33057404, -23.34724998, -23.50040627, -23.08244896,
         -23.89678383, -23.22287750, -25.18677521, -28.65573311, -29.02714920]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920],
         [-26.68520737, -29.33057594, -23.34725189, -23.50040627, -23.08245087,
          -23.89678574, -23.22287941, -25.18677711, -28.65573311, -29.02714920]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15315437, -0.41795540,  0.39637947, -0.27752686]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.55547142, -21.29835701, -26.80152893, -27.28372574, -26.67305183,
         -28.70449638, -26.93589401, -28.94626617, -24.43898201, -23.37986755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 525] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 525] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 253] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.71861172, 3.84952354, 4.56171417, 3.84017420, 5.90635014, 4.26612377,
         6.14898109, 1.99088383, 1.41389072]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0501 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [463]; unstable size 463; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 463] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 463] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 463] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 310] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.97309494,  6.70187187, -0.02662754,  2.50170565, -0.07382107,
          1.85107899,  1.77261984,  7.00046825,  5.85668755]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96761131, -23.51111603, -16.18240738, -18.45089149, -16.26456261,
         -17.94385719, -14.73691177, -18.44084930, -24.07545662, -22.63823509]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.69it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350],
         [-21.13876343, -24.08310127, -16.37594223, -18.98218155, -16.69490623,
          -18.46617508, -15.56402779, -18.87380600, -24.34334183, -23.19640350]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.81191444, 1.13087845]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1179 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 8th iter
best_l after optimization: 30.21087646484375
alpha/beta optimization time: 0.11250162124633789
initial alpha-crown bounds: tensor([[4.06331825e+00, 6.77928352e+00, 3.31611633e-02, 2.54543567e+00,
         2.59351730e-03, 1.90330672e+00, 1.86108589e+00, 7.08985519e+00,
         5.93283844e+00]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.002593517303466797
verified with init bound!
Result: safe-incomplete in 0.3327 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [624]; unstable size 624; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 333, 1, 624] with unstable size 332 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 624] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 624] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [332]; unstable size 332; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 332] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 332] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.85006952,  6.56637907,  0.72854543,  0.16635108,  0.09236522,
         -0.16829324,  2.54186082,  4.97395706,  6.48725319]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
         -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
100%|██████████| 1/1 [00:00<00:00,  8.86it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6344 seconds.
lower bounds for all target labels: [4.063318252563477, 6.77928352355957, 0.033161163330078125, 2.545435667037964, 0.002593517303466797, 1.9033067226409912, 1.8610858917236328, 7.089855194091797, 5.932838439941406]
Number of cpus: 96  Number of subproblems: 0
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: []
start creating model mps for candidates: []
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.02144432, -22.99676323, -16.43036079, -14.81798553, -15.77610588,
          -15.32225418, -15.29498672, -18.67889786, -21.40403748, -22.81297874]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.47700119]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1159 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.75708770751953
alpha/beta optimization time: 1.2294247150421143
initial alpha-crown bounds: tensor([[ 3.92190433,  6.63770342,  0.78050637,  0.20929861,  0.10922233,
         -0.07384801,  2.59734678,  5.03754330,  6.53741217]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.07384800910949707
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
parallel mps save finish
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6436 seconds.
lower bounds for all target labels: [3.9219043254852295, 6.637701988220215, 0.7805063724517822, 0.20929861068725586, 0.10922233015298843, -0.07384824752807617, 2.597346782684326, 5.03754186630249, 6.537412166595459]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [5]
start creating model mps for candidates: ['lay/16_5']
Process 34552 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5071792602539
Verifying property 0 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.6377034187316895.

Properties batch 1, size 1
Remaining timeout: 198.26093912124634
Verifying property 1 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.537412166595459.

Properties batch 2, size 1
Remaining timeout: 198.09568786621094
Verifying property 2 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.037543296813965.

Properties batch 3, size 1
Remaining timeout: 197.96933245658875
Verifying property 3 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.9219043254852295.

Properties batch 4, size 1
Remaining timeout: 197.84334540367126
Verifying property 4 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.597346782684326.

Properties batch 5, size 1
Remaining timeout: 197.71085143089294
Verifying property 5 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7805063724517822.

Properties batch 6, size 1
Remaining timeout: 197.5633523464203
Verifying property 6 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.20929861068725586.

Properties batch 7, size 1
Remaining timeout: 197.41511130332947
Verifying property 7 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.10922233015298843.

Properties batch 8, size 1
Remaining timeout: 197.26941442489624
Verifying property 8 with 1 instances.
##### Instance 19 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07384801]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.95204353, -23.01272583, -16.49953651, -14.64277744, -15.90678215,
        -15.11271095, -15.73008537, -18.56428909, -21.39385223, -22.75593376],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07384801]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 624
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 330
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 975
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0013446807861328125
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0679    transfer 0.0001    finalize 0.0002    func 0.0686    
Accumulated time: func 0.0686    prepare 0.0003    bound 0.0679    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 61] 
split level 6: [/input-8, 220] 
split level 7: [/input-8, 227] 
split level 8: [/input-12, 72] 
split level 9: [/input-8, 219] 
split level 10: [/input-8, 1947] 
split level 11: [/input-8, 229] 
split level 12: [/input-8, 221] 
split level 13: [/input-8, 612] 
split level 14: [/input-12, 43] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 214] 
split level 17: [/input-8, 1697] 
split level 18: [/input-8, 206] 
split level 19: [/input-8, 1372] 
split level 20: [/input-8, 578] 
split level 21: [/input-8, 605] 
split level 22: [/input, 3153] 
split level 23: [/input-8, 238] 
split level 24: [/input-8, 1380] 
split level 25: [/input-8, 1954] 
split level 26: [/input-8, 1381] 
split level 27: [/input-8, 245] 
split level 28: [/input-8, 593] 
split level 29: [/input-8, 946] 
split level 30: [/input-8, 213] 
split level 31: [/input-8, 1709] 
split level 32: [/input-8, 239] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 218] 
split level 35: [/input-8, 235] 
split level 36: [/input-8, 223] 
split level 37: [/input, 2657] 
split level 38: [/input-8, 211] 
split level 39: [/input-8, 222] 
split level 40: [/input, 1403] 
split level 41: [/input, 3475] 
split level 42: [/input-8, 1373] 
split level 43: [/input-8, 1379] 
split level 44: [/input-8, 1374] 
split level 45: [/input-8, 1710] 
split level 46: [/input, 3427] 
split level 47: [/input-8, 224] 
split level 48: [/input, 929] 
split level 49: [/input-8, 254] 
split level 50: [/input, 710] 
split level 51: [/input, 922] 
split level 52: [/input, 3139] 
split level 53: [/input, 3235] 
split level 54: [/input, 900] 
split level 55: [/input, 1002] 
split level 56: [/input-8, 203] 
split level 57: [/input, 3138] 
split level 58: [/input-8, 1763] 
split level 59: [/input, 3973] 
split level 60: [/input, 2441] 
split level 61: [/input, 2993] 
split level 62: [/input-8, 240] 
split level 63: [/input, 1351] 
split level 64: [/input-8, 231] 
split level 65: [/input-8, 988] 
split level 66: [/input-8, 345] 
split level 67: [/input, 2423] 
split level 68: [/input-8, 1931] 
split level 69: [/input-8, 196] 
split level 70: [/input-8, 1169] 
split level 71: [/input-8, 1774] 
split level 72: [/input-8, 242] 
split level 73: [/input, 2679] 
split level 74: [/input-8, 204] 
split level 75: [/input-8, 1365] 
split level 76: [/input, 1400] 
split level 77: [/input-8, 2005] 
split level 78: [/input-8, 1946] 
split level 79: [/input, 2673] 
split level 80: [/input, 3219] 
split level 81: [/input, 930] 
split level 82: [/input-8, 241] 
split level 83: [/input, 193] 
split level 84: [/input, 1385] 
split level 85: [/input, 2184] 
split level 86: [/input, 2263] 
split level 87: [/input, 2721] 
split level 88: [/input, 2977] 
split level 89: [/input, 172] 
split level 90: [/input, 2994] 
split level 91: [/input-8, 247] 
split level 92: [/input, 2165] 
split level 93: [/input, 1640] 
split level 94: [/input, 2197] 
split level 95: [/input-8, 197] 
split level 96: [/input-8, 1366] 
split level 97: [/input, 3429] 
split level 98: [/input-8, 255] 
split level 99: [/input-8, 1981] 
split level 100: [/input, 2708] 
split level 101: [/input-8, 1382] 
split level 102: [/input, 2470] 
split level 103: [/input, 120] 
split level 104: [/input-8, 1994] 
split level 105: [/input, 2425] 
split level 106: [/input-8, 201] 
split level 107: [/input-8, 1305] 
split level 108: [/input, 1356] 
split level 109: [/input, 156] 
split level 110: [/input, 401] 
split level 111: [/input, 2697] 
split level 112: [/input, 984] 
split level 113: [/input, 990] 
split level 114: [/input, 985] 
split level 115: [/input, 836] 
split level 116: [/input-8, 1737] 
split level 117: [/input-8, 934] 
split level 118: [/input, 2504] 
split level 119: [/input, 2540] 
split level 120: [/input, 2166] 
split level 121: [/input, 2279] 
split level 122: [/input, 155] 
split level 123: [/input, 2473] 
split level 124: [/input, 2476] 
split level 125: [/input, 3444] 
split level 126: [/input, 149] 
split level 127: [/input, 2698] 
split level 128: [/input, 3530] 
split level 129: [/input, 2274] 
split level 130: [/input, 2426] 
split level 131: [/input, 121] 
split level 132: [/input, 1006] 
split level 133: [/input-8, 1758] 
split level 134: [/input, 163] 
split level 135: [/input, 742] 
split level 136: [/input, 994] 
split level 137: [/input, 2971] 
split level 138: [/input, 177] 
split level 139: [/input, 2716] 
split level 140: [/input, 2979] 
split level 141: [/input-8, 1733] 
split level 142: [/input-8, 1244] 
split level 143: [/input, 419] 
split level 144: [/input, 932] 
split level 145: [/input, 2179] 
split level 146: [/input, 171] 
split level 147: [/input-8, 216] 
split level 148: [/input, 2537] 
split level 149: [/input, 2121] 
split level 150: [/input, 3140] 
split level 151: [/input, 2724] 
split level 152: [/input-8, 1746] 
split level 153: [/input, 91] 
split level 154: [/input-8, 1999] 
split level 155: [/input-8, 843] 
split level 156: [/input, 1863] 
split level 157: [/input, 3411] 
split level 158: [/input, 1494] 
split level 159: [/input, 129] 
split level 160: [/input, 2465] 
split level 161: [/input, 3173] 
split level 162: [/input, 2467] 
split level 163: [/input, 2661] 
split level 164: [/input, 2190] 
split level 165: [/input, 157] 
split level 166: [/input, 3497] 
split level 167: [/input-8, 1389] 
split level 168: [/input, 147] 
split level 169: [/input-8, 1226] 
split level 170: [/input, 180] 
split level 171: [/input, 3390] 
split level 172: [/input, 2460] 
split level 173: [/input, 3227] 
split level 174: [/input, 2103] 
split level 175: [/input, 2395] 
split level 176: [/input, 60] 
split level 177: [/input, 2360] 
split level 178: [/input, 1617] 
split level 179: [/input, 2257] 
split level 180: [/input, 597] 
split level 181: [/input, 2156] 
split level 182: [/input, 2844] 
split level 183: [/input, 137] 
split level 184: [/input, 2409] 
split level 185: [/input, 1469] 
split level 186: [/input, 2690] 
split level 187: [/input, 1454] 
split level 188: [/input, 2148] 
split level 189: [/input, 59] 
split level 190: [/input, 2119] 
split level 191: [/input, 2088] 
split level 192: [/input, 54] 
split level 193: [/input, 2406] 
split level 194: [/input, 2089] 
split level 195: [/input-8, 1752] 
split level 196: [/input, 1022] 
split level 197: [/input, 820] 
split level 198: [/input, 2498] 
split level 199: [/input, 2542] 
Time: prepare 0.0064    bound 0.0967    transfer 0.0163    finalize 0.0043    func 0.1238    
Accumulated time: func 0.1924    prepare 0.0178    bound 0.1646    transfer 0.0164    finalize 0.0045    
all_split False
======================Cut inference begins======================
max lb tensor(0.28507209) min lb tensor(-0.07372785)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01326751708984375 
BICCOS Cumulative time: 0.01326751708984375
Preprocessing time: 0.011551380157470703 Inference time: 0.0003864765167236328 Add cuts time: 0.0002148151397705078 Cut analysis time: 0.0011148452758789062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.5579    set_bounds 0.0119    solve 0.1240    add 0.0101    
Accumulated time: pickout 0.0005    decision 0.5579    set_bounds 0.0119    solve 0.1240    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([-1.]), tensor([0]), tensor([1.63648175e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([0]), tensor([1.]), tensor([0]), tensor([1.63648175e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026601076126098633

all verified at 1th iter
Time: prepare 0.0003    bound 0.0188    transfer 0.0001    finalize 0.0001    func 0.0194    
Accumulated time: func 0.2118    prepare 0.0181    bound 0.1834    transfer 0.0166    finalize 0.0046    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.1852 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.15224266, -25.34284210, -20.68698883, -21.11905098, -21.28755379,
         -21.18818092, -18.96833420, -23.86169434, -24.43035507, -25.58597183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [838]; unstable size 838; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 838] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 838] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 838] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 333] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.44667244, 4.02514315, 0.65229511, 0.96642137, 0.94116831, 0.84790838,
         2.93652296, 3.08846807, 4.46393156]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0774 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 523] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 523] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.59975958,  3.72134590, -0.09878129,  0.47413677,  0.20959473,
          1.12203467, -0.49487069,  3.08997488,  2.65038443]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.31029320, -25.64724922, -21.19924164, -21.00788879, -21.44479942,
         -20.21812248, -22.40578079, -20.59401131, -24.67918396, -24.01255989]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833],
         [-26.13118744, -26.43610382, -22.10371780, -21.97385406, -22.15757751,
          -21.20539856, -23.31969070, -21.12502861, -25.59633255, -24.98401833]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89831924, -0.08036995]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0453 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.87531281, -15.75632095, -14.57347012, -15.76169777, -14.07984734,
         -16.31337166, -16.52824211, -16.65783691,  -8.99959373, -15.31440544]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [604]; unstable size 604; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 604] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 604] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 604] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 243] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74084187, 5.52800369, 4.11085033, 5.41803837, 3.71402359, 5.74122238,
         6.21470261, 6.00886154, 4.98770428]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0510 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.64936256, -23.01173401, -19.97909546, -17.49272156, -20.01158905,
         -17.02442741, -21.03547668, -19.50024414, -20.38127136, -20.46527672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [447]; unstable size 447; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 447] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 447] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 447] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 188] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.30454564, 4.15309763, 1.79540038, 0.15248439, 1.72279513, 3.02521515,
         1.09999537, 1.62638271, 1.86410713]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1052]; unstable size 1052; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 1052] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1052] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1052] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 365] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.67349291,  0.95226765,  3.60676479,  1.65506077,  4.16815853,
          2.46865177,  3.16671324,  0.41265202,  0.44317579]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
         -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]100%|██████████| 1/1 [00:00<00:00,  8.83it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.87743950, -19.35758781, -22.15427971, -24.89256096, -22.97465324,
          -25.62451553, -23.85381317, -24.51388931, -21.46959877, -20.74610329]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51985168]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1158 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.485843658447266
alpha/beta optimization time: 1.21673583984375
initial alpha-crown bounds: tensor([[-0.55390930,  1.12264442,  3.76586914,  1.80786228,  4.34684420,
          2.61715698,  3.32345629,  0.54351664,  0.51240158]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.5539093017578125
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6472 seconds.
lower bounds for all target labels: [-0.5539093017578125, 1.1226444244384766, 3.765869140625, 1.8078622817993164, 4.34684419631958, 2.617156982421875, 3.323456287384033, 0.5435166358947754, 0.5123990774154663]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 35846 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5649127960205
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.34684419631958.

Properties batch 1, size 1
Remaining timeout: 198.28966569900513
Verifying property 1 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.765869140625.

Properties batch 2, size 1
Remaining timeout: 198.18501615524292
Verifying property 2 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.323456287384033.

Properties batch 3, size 1
Remaining timeout: 198.10420513153076
Verifying property 3 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.617156982421875.

Properties batch 4, size 1
Remaining timeout: 198.02455949783325
Verifying property 4 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8078622817993164.

Properties batch 5, size 1
Remaining timeout: 197.94497394561768
Verifying property 5 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1226444244384766.

Properties batch 6, size 1
Remaining timeout: 197.8653838634491
Verifying property 6 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5435166358947754.

Properties batch 7, size 1
Remaining timeout: 197.78572845458984
Verifying property 7 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5124015808105469.

Properties batch 8, size 1
Remaining timeout: 197.70414328575134
Verifying property 8 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55390930]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.53723717, -20.17998314, -24.00674057, -26.48255730, -24.71885872,
        -27.20367241, -25.54711533, -26.09858704, -22.80258942, -21.74352837],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55390930]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1052
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 355
Node /15 input 0: size torch.Size([100]) unstable 29
-----------------
# of unstable neurons: 1436
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006115436553955078
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0602    transfer 0.0001    finalize 0.0002    func 0.0607    
Accumulated time: func 0.0607    prepare 0.0002    bound 0.0602    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 8] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 67] 
split level 8: [/input-12, 2] 
split level 9: [/input-12, 89] 
split level 10: [/input-12, 64] 
split level 11: [/input-12, 24] 
split level 12: [/input-12, 14] 
split level 13: [/input-12, 42] 
split level 14: [/input-8, 1957] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1964] 
split level 17: [/input-12, 71] 
split level 18: [/input-12, 90] 
split level 19: [/input-12, 57] 
split level 20: [/input-8, 421] 
split level 21: [/input-8, 749] 
split level 22: [/input-8, 914] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1965] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1386] 
split level 27: [/input-8, 414] 
split level 28: [/input-8, 150] 
split level 29: [/input-8, 371] 
split level 30: [/input-8, 1951] 
split level 31: [/input-8, 1710] 
split level 32: [/input-8, 1635] 
split level 33: [/input-8, 605] 
split level 34: [/input-8, 604] 
split level 35: [/input-8, 433] 
split level 36: [/input-8, 1689] 
split level 37: [/input-8, 1392] 
split level 38: [/input-8, 416] 
split level 39: [/input-8, 1688] 
split level 40: [/input-12, 13] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 1675] 
split level 43: [/input-8, 1658] 
split level 44: [/input-8, 1657] 
split level 45: [/input-8, 1650] 
split level 46: [/input-8, 411] 
split level 47: [/input-8, 1483] 
split level 48: [/input-8, 1577] 
split level 49: [/input-8, 1393] 
split level 50: [/input-8, 1194] 
split level 51: [/input-8, 1179] 
split level 52: [/input-8, 748] 
split level 53: [/input-8, 1385] 
split level 54: [/input-8, 1619] 
split level 55: [/input-8, 821] 
split level 56: [/input-8, 1397] 
split level 57: [/input, 3546] 
split level 58: [/input, 1678] 
split level 59: [/input-8, 1620] 
split level 60: [/input-8, 1649] 
split level 61: [/input, 3547] 
split level 62: [/input, 2186] 
split level 63: [/input, 3545] 
split level 64: [/input-8, 406] 
split level 65: [/input-8, 958] 
split level 66: [/input-8, 1715] 
split level 67: [/input-8, 843] 
split level 68: [/input, 3450] 
split level 69: [/input-8, 1396] 
split level 70: [/input-8, 1395] 
split level 71: [/input-8, 293] 
split level 72: [/input-8, 1754] 
split level 73: [/input-8, 1067] 
split level 74: [/input-8, 1702] 
split level 75: [/input, 3537] 
split level 76: [/input, 131] 
split level 77: [/input-8, 307] 
split level 78: [/input-8, 1317] 
split level 79: [/input-8, 403] 
split level 80: [/input-8, 1230] 
split level 81: [/input-8, 1484] 
split level 82: [/input, 2714] 
split level 83: [/input-8, 820] 
split level 84: [/input, 3770] 
split level 85: [/input-8, 1399] 
split level 86: [/input-8, 889] 
split level 87: [/input-8, 1226] 
split level 88: [/input, 999] 
split level 89: [/input-8, 245] 
split level 90: [/input-8, 145] 
split level 91: [/input, 3525] 
split level 92: [/input-8, 242] 
split level 93: [/input-8, 1598] 
split level 94: [/input-8, 1388] 
split level 95: [/input, 2283] 
split level 96: [/input, 985] 
split level 97: [/input-8, 1593] 
split level 98: [/input, 1000] 
split level 99: [/input-8, 890] 
split level 100: [/input, 982] 
split level 101: [/input, 3542] 
split level 102: [/input-8, 497] 
split level 103: [/input, 962] 
split level 104: [/input-8, 1610] 
split level 105: [/input, 978] 
split level 106: [/input, 3526] 
split level 107: [/input-8, 308] 
split level 108: [/input-8, 373] 
split level 109: [/input-8, 826] 
split level 110: [/input, 1413] 
split level 111: [/input, 713] 
split level 112: [/input, 998] 
split level 113: [/input, 712] 
split level 114: [/input-8, 284] 
split level 115: [/input, 694] 
split level 116: [/input-8, 402] 
split level 117: [/input, 983] 
split level 118: [/input, 1003] 
split level 119: [/input-8, 891] 
split level 120: [/input, 2785] 
split level 121: [/input, 997] 
split level 122: [/input, 1001] 
split level 123: [/input, 715] 
split level 124: [/input, 2770] 
split level 125: [/input-8, 292] 
split level 126: [/input-8, 241] 
split level 127: [/input, 2539] 
split level 128: [/input, 2945] 
split level 129: [/input-8, 1318] 
split level 130: [/input-8, 306] 
split level 131: [/input, 1012] 
split level 132: [/input, 1020] 
split level 133: [/input-8, 825] 
split level 134: [/input, 977] 
split level 135: [/input, 2786] 
split level 136: [/input, 907] 
split level 137: [/input-8, 1323] 
split level 138: [/input-8, 244] 
split level 139: [/input, 2769] 
split level 140: [/input, 1011] 
split level 141: [/input-8, 1594] 
split level 142: [/input-8, 1398] 
split level 143: [/input, 2266] 
split level 144: [/input-8, 827] 
split level 145: [/input-8, 1609] 
split level 146: [/input, 2407] 
split level 147: [/input, 1006] 
split level 148: [/input, 3528] 
split level 149: [/input, 961] 
split level 150: [/input, 1896] 
split level 151: [/input, 2555] 
split level 152: [/input-8, 246] 
split level 153: [/input, 2716] 
split level 154: [/input, 714] 
split level 155: [/input, 3508] 
split level 156: [/input-8, 250] 
split level 157: [/input, 2537] 
split level 158: [/input-8, 254] 
split level 159: [/input-8, 1376] 
split level 160: [/input-8, 255] 
split level 161: [/input, 2267] 
split level 162: [/input-8, 819] 
split level 163: [/input, 2279] 
split level 164: [/input-8, 840] 
split level 165: [/input, 2284] 
split level 166: [/input, 2282] 
split level 167: [/input, 2753] 
split level 168: [/input-8, 393] 
split level 169: [/input, 2538] 
split level 170: [/input, 675] 
split level 171: [/input-8, 253] 
split level 172: [/input, 1013] 
split level 173: [/input, 1019] 
split level 174: [/input-8, 243] 
split level 175: [/input-8, 842] 
split level 176: [/input-8, 1175] 
split level 177: [/input-8, 2033] 
split level 178: [/input, 2265] 
split level 179: [/input, 2549] 
split level 180: [/input, 2285] 
split level 181: [/input-8, 833] 
split level 182: [/input-8, 203] 
split level 183: [/input, 2550] 
split level 184: [/input-12, 36] 
split level 185: [/input, 2536] 
split level 186: [/input, 2535] 
split level 187: [/input, 2903] 
split level 188: [/input, 2551] 
split level 189: [/input, 1912] 
split level 190: [/input, 2552] 
split level 191: [/input, 2787] 
split level 192: [/input, 2280] 
split level 193: [/input, 2261] 
split level 194: [/input, 2557] 
split level 195: [/input, 2553] 
split level 196: [/input, 2541] 
split level 197: [/input, 2548] 
split level 198: [/input, 2547] 
split level 199: [/input, 2281] 
Time: prepare 0.0063    bound 0.1119    transfer 0.0078    finalize 0.0053    func 0.1314    
Accumulated time: func 0.1921    prepare 0.0170    bound 0.1721    transfer 0.0079    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.25172043) min lb tensor(-0.55388117)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012605905532836914 
BICCOS Cumulative time: 0.012605905532836914
Preprocessing time: 0.011425018310546875 Inference time: 0.00013637542724609375 Add cuts time: 7.319450378417969e-05 Cut analysis time: 0.0009713172912597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53513 (1), -0.53305 (1), -0.53185 (1), -0.53179 (1), -0.53135 (1), -0.53029 (1), -0.52977 (1), -0.52829 (1), -0.52829 (1), -0.52762 (1), -0.52753 (1), -0.52681 (1), -0.52651 (1), -0.52603 (1), -0.52467 (1), -0.52372 (1), -0.52368 (1), -0.52164 (1), -0.52129 (1), -0.52091 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5552    set_bounds 0.0118    solve 0.1315    add 0.2397    
Accumulated time: pickout 0.0004    decision 0.5552    set_bounds 0.0118    solve 0.1315    add 0.2397    
Current (lb-rhs): -0.5351319313049316
50 domains visited
Cumulative time: 1.035149335861206

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 61] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 31] [/input-12, 69] [/input-12, 31] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.49222373962402344
10 lb beta sum: 0.41372600197792053, worst -0.4795827269554138
Time: prepare 0.0075    bound 0.1261    transfer 0.0012    finalize 0.0032    func 0.1407    
Accumulated time: func 0.3329    prepare 0.0250    bound 0.2982    transfer 0.0092    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.31830204) min lb tensor(-0.47951132)
Number of Verified Splits: 80 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.024451732635498047 
BICCOS Cumulative time: 0.03705763816833496
Preprocessing time: 0.0158236026763916 Inference time: 0.00477147102355957 Add cuts time: 0.0026836395263671875 Cut analysis time: 0.0011730194091796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24998 (2), -0.24938 (2), -0.24669 (2), -0.24511 (2), -0.24502 (2), -0.24322 (2), -0.24095 (2), -0.23992 (2), -0.23679 (2), -0.23601 (2), -0.23483 (2), -0.23272 (2), -0.23189 (2), -0.23043 (2), -0.22825 (2), -0.22772 (2), -0.22688 (2), -0.22620 (2), -0.22558 (2), -0.22239 (2), 
Length of domains: 50
Time: pickout 0.0157    decision 0.0254    set_bounds 0.0166    solve 0.1409    add 0.1654    
Accumulated time: pickout 0.0161    decision 0.5806    set_bounds 0.0284    solve 0.2725    add 0.4051    
Current (lb-rhs): -0.24997574090957642
100 domains visited
Cumulative time: 1.424302339553833

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 38] [/input-12, 38] [/input-12, 69] 
split level 3: [/input-12, 67] [/input-12, 67] [/input-12, 46] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25121355056762695
10 lb beta sum: 1.217774510383606, worst -0.151472806930542
Time: prepare 0.0068    bound 0.1879    transfer 0.0010    finalize 0.0036    func 0.2020    
Accumulated time: func 0.5349    prepare 0.0321    bound 0.4860    transfer 0.0102    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.67256075) min lb tensor(-0.14962929)
Number of Verified Splits: 286 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.03496956825256348 
BICCOS Cumulative time: 0.07202720642089844
Preprocessing time: 0.013075590133666992 Inference time: 0.013900995254516602 Add cuts time: 0.005833625793457031 Cut analysis time: 0.0021593570709228516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14963 (3), -0.14961 (3), -0.09265 (3), -0.05456 (3), -0.05450 (3), -0.05446 (3), -0.05425 (3), -0.05423 (3), -0.05409 (3), -0.04081 (3), -0.00303 (3), -0.00267 (3), 
Length of domains: 12
Time: pickout 0.0010    decision 0.0199    set_bounds 0.0176    solve 0.2022    add 0.2210    
Accumulated time: pickout 0.0172    decision 0.6005    set_bounds 0.0460    solve 0.4746    add 0.6261    
Current (lb-rhs): -0.14962929487228394
112 domains visited
Cumulative time: 1.9278926849365234

Shallow-BaB round 4
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 61] [/input-12, 61] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] [/input-12, 38] [/input-12, 38] [/input-12, 31] 
split level 2: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 38] 
split level 3: [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 67] [/input-12, 46] 
split level 4: [/input-12, 2] [/input-12, 2] [/input-12, 67] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 53] 
split level 5: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] 
split level 6: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] 
split level 7: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 64] 
split level 8: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 14] 
split level 9: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-12, 42] 
split level 10: [/input-12, 90] [/input-12, 90] [/input-12, 71] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-8, 1964] 
split level 11: [/input-12, 71] [/input-12, 71] [/input-12, 90] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 12: [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 57] [/input-12, 90] 
split level 13: [/input-8, 914] [/input-8, 914] [/input-8, 1951] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-8, 914] [/input-12, 57] 
split level 14: [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1710] [/input-8, 1951] 
split level 15: [/input-8, 1710] [/input-8, 1710] [/input-8, 1689] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1951] [/input-8, 1710] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22480154037475586
10 lb beta sum: 1.8370299339294434, worst -0.045428693294525146
Time: prepare 0.0062    bound 0.1331    transfer 0.0058    finalize 0.0031    func 0.1508    
Accumulated time: func 0.6857    prepare 0.0391    bound 0.6192    transfer 0.0160    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.65292621) min lb tensor(-0.04146886)
Number of Verified Splits: 350 of 384
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.03737187385559082 
BICCOS Cumulative time: 0.10939908027648926
Preprocessing time: 0.01181173324584961 Inference time: 0.018394947052001953 Add cuts time: 0.005494594573974609 Cut analysis time: 0.0016705989837646484
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0554    set_bounds 0.0142    solve 0.1509    add 0.2432    
Accumulated time: pickout 0.0182    decision 0.6559    set_bounds 0.0603    solve 0.6255    add 0.8692    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.43683118e-09, 2.28400394e-01, 4.01761949e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.43683118e-09, 2.28400394e-01, 1.50061414e-01, 7.92785138e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.43683118e-09, 2.28400394e-01, 1.50061414e-01, 9.30039138e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.43683118e-09, 1.51293620e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.23144877e-11, 2.31370077e-01, 4.39488888e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.23144877e-11, 2.31370077e-01, 1.45004913e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.23144877e-11, 1.50097892e-01, 4.59900439e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([69, 46, 61]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.23144877e-11, 1.50097892e-01, 1.44926712e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31609106063842773
10 lb beta sum: 1.1069294214248657, worst -0.08423984050750732
Time: prepare 0.0006    bound 0.1578    transfer 0.0003    finalize 0.0003    func 0.1590    
Accumulated time: func 0.8447    prepare 0.0397    bound 0.7770    transfer 0.0163    finalize 0.0156    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 61] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 38] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 89] 
split level 6: [/input-12, 71] 
split level 7: [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 2.9545745849609375, worst 0.023659706115722656

all verified at 0th iter
Time: prepare 0.0102    bound 0.0056    transfer 0.0039    finalize 0.0023    func 0.0236    
Accumulated time: func 0.8684    prepare 0.0503    bound 0.7825    transfer 0.0202    finalize 0.0179    
all_split False
======================Cut inference begins======================
max lb tensor(2.00362968) min lb tensor(0.02365971)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
Total number of valid cuts: 26.
#cuts 1-3: 17
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.008394479751586914 
BICCOS Cumulative time: 0.11779356002807617
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0236    set_bounds 0.0217    solve 0.0237    add 0.0001    
Accumulated time: pickout 0.0188    decision 0.6795    set_bounds 0.0820    solve 0.6493    add 0.8693    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
112 domains visited
Cumulative time: 2.749460220336914

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=24_spec=0_26947641.log
found process for pidx=0
kill process for pidx=0
Result: safe in 5.4166 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 659] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 659] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 310] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.06798172, -2.58395004, -2.91112733, -3.35464382, -2.51877713,
         -3.61694932, -2.86971116,  0.43352529, -1.25155258]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.01604462, -16.60401917, -13.75974274, -13.62233925, -13.08835316,
         -14.19851303, -12.87796688, -14.01632118, -16.99109268, -15.74184418]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608],
         [-15.01604366, -16.60401917, -13.75974369, -13.62234020, -13.08835220,
          -14.19851398, -12.87796688, -14.01632118, -16.99109459, -15.74184608]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.58797550, -1.25629997, -1.39370346, -1.92769146, -0.81752968,
          -2.13807678, -0.99972248,  0.72580242]]], device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0800 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.90988064, -12.45664406, -15.21899319, -13.88694572, -14.48770905,
         -14.28946209, -14.69633865, -13.84464264, -14.34021282, -11.62079906]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [500]; unstable size 500; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 500] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 500] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 500] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 172] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81550616, 0.12776923, 1.67829573, 0.58634543, 0.90821457, 0.83706689,
         1.15809011, 0.31059170, 1.68028700]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0637 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.65237999, -26.28784180, -22.21496773, -22.94103813, -19.88295174,
         -23.10355949, -23.92632675, -16.94944000, -25.83104324, -24.10295296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 632] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 632] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 241] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.00603676, 7.31206369, 3.91715908, 4.58261108, 2.16801476, 4.73694086,
         5.37613535, 6.48344803, 5.24407578]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0485 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.01066399, -28.57836723, -25.32221985, -26.57108498, -26.69775391,
         -27.17006111, -27.16849136, -29.60597229, -25.49334908, -28.60743141]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [602]; unstable size 602; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 602] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 602] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 602] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 133] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.69067621, 1.75672960, 2.90525079, 3.03809547, 3.37360620, 3.51928496,
         5.64078951, 1.68219006, 4.79778767]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [824]; unstable size 824; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 824] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 824] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 824] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 256] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.94624805,  4.85114479, -0.16955996, -1.79679918, -1.73069477,
         -1.51086378, -1.98932076,  3.64661908,  4.09455442]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.58022118, -31.81094170, -26.44467354, -24.52676773, -24.55172729,
         -24.79080772, -24.80268097, -25.39589882, -30.52891159, -30.66180420]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420],
         [-29.58021927, -31.81093979, -26.44467163, -24.52676773, -24.55172729,
          -24.79080582, -24.80267715, -25.39589882, -30.52891159, -30.66180420]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.04877281, -0.86913109, -0.84417152, -0.60509300, -0.59322166]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.97128105, -37.96307373, -34.52404785, -37.46557999, -35.63014603,
         -38.36451340, -36.77544022, -40.04882431, -35.94057846, -38.51336288]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [763]; unstable size 763; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 763] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 763] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 763] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 175] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.93386221, 1.84800148, 4.37804556, 2.56460905, 5.05402136, 3.82877159,
         6.62601900, 3.10796809, 5.56228876]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.48475838, -29.65727234, -23.60843277, -25.59186363, -21.86170197,
         -25.18845367, -25.36190605, -23.12098694, -27.66559601, -28.33211899]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [618]; unstable size 618; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 618] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 618] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 618] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.15050721, 5.57539082, 0.71036434, 2.73630524, 2.29937887, 2.30952454,
         0.40072083, 4.11238289, 4.36770487]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0526 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 331, 1, 1008] with unstable size 330 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1008] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [330]; unstable size 330; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 330] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 330] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17812490,  2.10233831, -1.56133437, -0.11888385, -1.70705891,
          0.52253580, -0.66222930, -0.72439456,  1.23998880]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.43476677, -21.89505386, -17.38277435, -18.91377258, -16.89746284,
         -19.49347115, -18.77677345, -17.15766907, -19.06263733, -20.67627907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907],
         [-19.43476868, -21.89505196, -17.38277435, -18.91377449, -16.89746284,
          -19.49347115, -18.77677155, -17.15766907, -19.06263924, -20.67627907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.22510529,  1.75610542, -0.26020622,  1.61910248,  1.90497017]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0761 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35557175, -32.47544098, -30.43883324, -33.30394363, -32.17427444,
         -34.25338364, -33.63493729, -35.26922607, -29.93074799, -32.68428421]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [840]; unstable size 840; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 840] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 840] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 840] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.16921902, 2.31352901, 4.99022341, 3.81911087, 5.78720427, 5.29893923,
         6.80568743, 1.75992763, 4.51705408]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [649]; unstable size 649; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 316, 1, 649] with unstable size 315 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 649] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 649] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [315]; unstable size 315; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 315] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 315] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.31691742,  2.24976444,  0.04557872, -0.85450935,  0.30286217,
         -0.63437951, -0.21570837,  3.64171338,  1.40587425]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.44459343, -15.51812744, -11.64377499, -10.47452068, -10.72119522,
         -11.05707169, -11.06166363, -11.43825245, -16.58495712, -14.37756157]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459],
         [-15.56100559, -15.55041409, -11.83961582, -10.86203289, -10.65551853,
          -11.47358513, -11.20098400, -11.55763531, -16.66084862, -14.52304459]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20651436,  0.33895111,  0.69560242]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0513 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 283, 1, 539] with unstable size 282 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 539] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 282] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.73897862,  3.94992781,  0.45281982,  1.56286383,  0.87203956,
         -1.16177833,  0.85932624,  3.68842554,  2.19751167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
         -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.64219093, -17.43132782, -12.73828030, -10.98612118, -13.95148468,
          -12.17405128, -10.92382336, -13.20341492, -16.59213638, -15.28749561]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.06229782]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.09047651,  1.12222254,  1.12222254,  ...,  1.07460344,
             1.15396857,  1.13809550],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.04285717,
             1.07460344,  1.07460344],
           [ 1.04285717,  1.07460344,  1.07460344,  ...,  1.02698421,
             1.07460344,  1.07460344],
           ...,
           [ 1.04285717,  1.07460344,  1.09047651,  ..., -0.35396814,
             0.55079371,  1.07460344],
           [ 1.04285717,  1.07460344,  1.05873048,  ..., -0.62380952,
            -0.24285704,  0.77301592],
           [ 1.04285717,  1.07460344,  1.07460344,  ..., -0.21111101,
             0.10634929,  0.83650798]],

          [[ 1.25603890,  1.28824508,  1.28824508,  ...,  1.25603890,
             1.27214205,  1.28824508],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.25603890,
             1.23993587,  1.23993587],
           [ 1.20772982,  1.23993587,  1.23993587,  ...,  1.23993587,
             1.23993587,  1.23993587],
           ...,
           [ 1.20772982,  1.23993587,  1.25603890,  ..., -0.49919480,
             0.51529801,  1.17552364],
           [ 1.20772982,  1.23993587,  1.22383285,  ..., -0.82125598,
            -0.32206106,  0.85346222],
           [ 1.20772982,  1.23993587,  1.23993587,  ..., -0.32206106,
             0.08051541,  0.93397754]],

          [[ 1.42578757,  1.45577252,  1.45577252,  ...,  1.44078004,
             1.42578757,  1.45577252],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.41079497,
             1.39580250,  1.41079497],
           [ 1.38081002,  1.41079497,  1.41079497,  ...,  1.44078004,
             1.42578757,  1.41079497],
           ...,
           [ 1.38081002,  1.41079497,  1.42578757,  ..., -0.53823084,
             0.54122955,  1.33583248],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -1.07796109,
            -0.41829082,  0.99100471],
           [ 1.38081002,  1.41079497,  1.41079497,  ..., -0.64317840,
            -0.07346311,  1.06596720]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0294 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 563] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 563] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 155] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.52441859,  5.39360428,  0.73585320, -1.15312338,  0.82712793,
         -0.08107734,  1.07491684,  4.02794266,  3.11614585]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.07254219, -23.32916451, -18.11545181, -16.03979683, -17.97344971,
         -17.07232475, -18.43986130, -16.48874283, -21.96584511, -20.95975685]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685],
         [-19.07254028, -23.32916641, -18.11545372, -16.03979683, -17.97345161,
          -17.07232285, -18.43986130, -16.48874283, -21.96584702, -20.95975685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44894600,  0.58358002]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.70158577, -22.21768379, -23.95887756, -27.52854156, -24.44779968,
         -28.61229897, -28.66467094, -26.43075180, -22.27626801, -22.80558968]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 756] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 756] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.58621740, 2.47435975, 5.86044264, 2.89928865, 6.82225561, 6.78166151,
         4.58398342, 0.69966269, 1.06527996]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0428 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [453]; unstable size 453; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 302, 1, 453] with unstable size 301 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 453] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 453] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [301]; unstable size 301; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 301] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 301] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.36418676e+00,  3.88016176e+00, -1.22666359e-03,  5.18171310e-01,
         -7.83941746e-02,  5.22855401e-01,  8.93965006e-01,  5.49661064e+00,
          2.41142750e+00]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
         -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674],
         [-15.12287807, -14.69568729, -10.06177521, -10.78610325, -10.26407623,
          -10.99050617,  -9.46359158, -11.73374748, -16.38097382, -13.27322674]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59818363, 0.80048466]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1153 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.593074798583984
alpha/beta optimization time: 1.224545955657959
initial alpha-crown bounds: tensor([[ 4.42038727,  3.93954587,  0.04252577,  0.59053797, -0.04267049,
          0.61050200,  0.96340358,  5.55710554,  2.51173735]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.042670488357543945
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6201 seconds.
lower bounds for all target labels: [4.420389175415039, 3.939546585083008, 0.042527198791503906, 0.5905383825302124, -0.04266977310180664, 0.6104996800422668, 0.9634049534797668, 5.557104110717773, 2.511735200881958]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [4]
start creating model mps for candidates: ['lay/16_4']
Process 36099 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56620359420776
Verifying property 0 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.557105541229248.

Properties batch 1, size 1
Remaining timeout: 198.40606689453125
Verifying property 1 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.420387268066406.

Properties batch 2, size 1
Remaining timeout: 198.30085587501526
Verifying property 2 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.9395458698272705.

Properties batch 3, size 1
Remaining timeout: 198.18268632888794
Verifying property 3 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.51173734664917.

Properties batch 4, size 1
Remaining timeout: 198.07912063598633
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.963403582572937.

Properties batch 5, size 1
Remaining timeout: 197.97560930252075
Verifying property 5 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6105020046234131.

Properties batch 6, size 1
Remaining timeout: 197.8680408000946
Verifying property 6 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.590537965297699.

Properties batch 7, size 1
Remaining timeout: 197.76290845870972
Verifying property 7 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.0425257682800293.

Properties batch 8, size 1
Remaining timeout: 197.65845346450806
Verifying property 8 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04267049]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.42754364, -14.80943012, -10.45694256, -11.06365776, -10.51977921,
        -11.33867931,  -9.27479267, -12.10030270, -16.64357758, -13.39722061],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04267049]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 453
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 299
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 772
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008344650268554688
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0003    func 0.0551    
Accumulated time: func 0.0551    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 85] 
split level 3: [/input-12, 14] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 10] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 17] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 163] 
split level 12: [/input-8, 154] 
split level 13: [/input-8, 132] 
split level 14: [/input-8, 142] 
split level 15: [/input-8, 172] 
split level 16: [/input, 2887] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1249] 
split level 19: [/input-12, 55] 
split level 20: [/input-8, 298] 
split level 21: [/input-8, 309] 
split level 22: [/input-8, 155] 
split level 23: [/input-8, 1362] 
split level 24: [/input-8, 1386] 
split level 25: [/input-8, 914] 
split level 26: [/input-8, 147] 
split level 27: [/input-8, 1242] 
split level 28: [/input-8, 1203] 
split level 29: [/input-8, 178] 
split level 30: [/input, 3300] 
split level 31: [/input-8, 290] 
split level 32: [/input-12, 8] 
split level 33: [/input-8, 315] 
split level 34: [/input-8, 492] 
split level 35: [/input, 2919] 
split level 36: [/input-8, 307] 
split level 37: [/input-8, 1627] 
split level 38: [/input-8, 282] 
split level 39: [/input-8, 1389] 
split level 40: [/input-8, 146] 
split level 41: [/input-8, 1271] 
split level 42: [/input-8, 162] 
split level 43: [/input-8, 252] 
split level 44: [/input, 2934] 
split level 45: [/input-8, 1390] 
split level 46: [/input-8, 1395] 
split level 47: [/input-8, 1674] 
split level 48: [/input-8, 171] 
split level 49: [/input, 840] 
split level 50: [/input-8, 1382] 
split level 51: [/input, 3556] 
split level 52: [/input-8, 445] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1240] 
split level 55: [/input-8, 99] 
split level 56: [/input-8, 1363] 
split level 57: [/input-8, 957] 
split level 58: [/input-8, 1066] 
split level 59: [/input-8, 2029] 
split level 60: [/input, 345] 
split level 61: [/input-8, 348] 
split level 62: [/input-8, 1675] 
split level 63: [/input, 856] 
split level 64: [/input-8, 1628] 
split level 65: [/input, 824] 
split level 66: [/input-8, 777] 
split level 67: [/input-8, 1644] 
split level 68: [/input-8, 257] 
split level 69: [/input-8, 430] 
split level 70: [/input-8, 1587] 
split level 71: [/input-8, 1673] 
split level 72: [/input-8, 250] 
split level 73: [/input-8, 342] 
split level 74: [/input-8, 499] 
split level 75: [/input-8, 341] 
split level 76: [/input, 854] 
split level 77: [/input-12, 72] 
split level 78: [/input-8, 46] 
split level 79: [/input-8, 1689] 
split level 80: [/input, 2788] 
split level 81: [/input-8, 1181] 
split level 82: [/input, 341] 
split level 83: [/input-8, 1354] 
split level 84: [/input, 2933] 
split level 85: [/input-8, 98] 
split level 86: [/input-8, 238] 
split level 87: [/input-8, 1676] 
split level 88: [/input, 821] 
split level 89: [/input, 2901] 
split level 90: [/input-8, 424] 
split level 91: [/input, 2922] 
split level 92: [/input-8, 55] 
split level 93: [/input-8, 1383] 
split level 94: [/input, 2949] 
split level 95: [/input-8, 1005] 
split level 96: [/input, 873] 
split level 97: [/input, 487] 
split level 98: [/input, 3381] 
split level 99: [/input, 859] 
split level 100: [/input-8, 1680] 
split level 101: [/input-8, 1399] 
split level 102: [/input-8, 922] 
split level 103: [/input-8, 1355] 
split level 104: [/input-8, 275] 
split level 105: [/input-8, 1660] 
split level 106: [/input-8, 253] 
split level 107: [/input-8, 878] 
split level 108: [/input-8, 1361] 
split level 109: [/input, 1655] 
split level 110: [/input-8, 446] 
split level 111: [/input-8, 1375] 
split level 112: [/input, 362] 
split level 113: [/input-8, 1044] 
split level 114: [/input-8, 249] 
split level 115: [/input-8, 230] 
split level 116: [/input-8, 493] 
split level 117: [/input-8, 1602] 
split level 118: [/input, 409] 
split level 119: [/input-8, 447] 
split level 120: [/input-8, 1540] 
split level 121: [/input, 329] 
split level 122: [/input-8, 151] 
split level 123: [/input, 3572] 
split level 124: [/input, 2952] 
split level 125: [/input, 456] 
split level 126: [/input, 969] 
split level 127: [/input, 146] 
split level 128: [/input, 2872] 
split level 129: [/input-8, 2021] 
split level 130: [/input-8, 1512] 
split level 131: [/input-8, 485] 
split level 132: [/input, 3215] 
split level 133: [/input, 885] 
split level 134: [/input-8, 103] 
split level 135: [/input-8, 441] 
split level 136: [/input, 841] 
split level 137: [/input-8, 231] 
split level 138: [/input, 791] 
split level 139: [/input-8, 1665] 
split level 140: [/input, 795] 
split level 141: [/input, 844] 
split level 142: [/input-8, 786] 
split level 143: [/input-8, 107] 
split level 144: [/input-8, 1652] 
split level 145: [/input, 3557] 
split level 146: [/input-8, 137] 
split level 147: [/input-8, 18] 
split level 148: [/input, 440] 
split level 149: [/input, 283] 
split level 150: [/input, 2907] 
split level 151: [/input-8, 458] 
split level 152: [/input, 3214] 
split level 153: [/input-8, 369] 
split level 154: [/input, 3497] 
split level 155: [/input, 2966] 
split level 156: [/input, 789] 
split level 157: [/input, 981] 
split level 158: [/input-8, 350] 
split level 159: [/input-8, 1535] 
split level 160: [/input-8, 191] 
split level 161: [/input-8, 1527] 
split level 162: [/input-8, 1353] 
split level 163: [/input, 2836] 
split level 164: [/input, 339] 
split level 165: [/input, 2910] 
split level 166: [/input, 3286] 
split level 167: [/input-8, 143] 
split level 168: [/input, 4013] 
split level 169: [/input, 3181] 
split level 170: [/input-8, 1729] 
split level 171: [/input-8, 1333] 
split level 172: [/input, 3293] 
split level 173: [/input, 3419] 
split level 174: [/input, 2838] 
split level 175: [/input, 867] 
split level 176: [/input-8, 1081] 
split level 177: [/input-8, 97] 
split level 178: [/input, 3268] 
split level 179: [/input, 90] 
split level 180: [/input, 2894] 
split level 181: [/input, 793] 
split level 182: [/input-8, 1217] 
split level 183: [/input-8, 1653] 
split level 184: [/input, 2719] 
split level 185: [/input, 1013] 
split level 186: [/input-8, 439] 
split level 187: [/input-8, 963] 
split level 188: [/input, 1187] 
split level 189: [/input-8, 1356] 
split level 190: [/input-8, 339] 
split level 191: [/input, 2852] 
split level 192: [/input, 2893] 
split level 193: [/input-8, 204] 
split level 194: [/input-8, 1225] 
split level 195: [/input, 3099] 
split level 196: [/input, 21] 
split level 197: [/input, 861] 
split level 198: [/input, 403] 
split level 199: [/input, 104] 
Time: prepare 0.0062    bound 0.0934    transfer 0.0057    finalize 0.0043    func 0.1096    
Accumulated time: func 0.1648    prepare 0.0163    bound 0.1479    transfer 0.0058    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.44494903) min lb tensor(-0.04263830)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013061046600341797 
BICCOS Cumulative time: 0.013061046600341797
Preprocessing time: 0.010943174362182617 Inference time: 0.0008072853088378906 Add cuts time: 0.00025582313537597656 Cut analysis time: 0.0010547637939453125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5174    set_bounds 0.0104    solve 0.1097    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5174    set_bounds 0.0104    solve 0.1097    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([-1.]), tensor([0]), tensor([1.56292080e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59]), tensor([1.]), tensor([0]), tensor([1.56292080e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030645370483398438

all verified at 1th iter
Time: prepare 0.0003    bound 0.0099    transfer 0.0001    finalize 0.0001    func 0.0105    
Accumulated time: func 0.1753    prepare 0.0166    bound 0.1579    transfer 0.0059    finalize 0.0047    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 3.6757 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25883293, -16.40706444, -12.91650105, -13.33503723, -12.76172256,
         -14.05701828, -10.42017269, -14.10208035, -18.75581741, -16.93133926]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [403]; unstable size 403; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 259, 1, 403] with unstable size 258 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 403] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 403] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [258]; unstable size 258; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 258] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 258] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00860596, 4.23702192, 1.09872437, 1.64570773, 0.89420366, 2.14901757,
         1.57642567, 6.09759998, 4.54596329]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0549 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.57652092, -32.23639679, -28.36616898, -29.83554840, -30.16464424,
         -30.64960480, -32.17686844, -29.80444527, -29.91892624, -32.09518433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 483] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 483] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07906628, 1.77047992, 3.19271326, 3.46971607, 3.86029005, 5.23355198,
         2.96001387, 3.10798526, 5.22355986]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0318 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.71967888, -24.49569893, -23.46326828, -21.31615639, -22.26188850,
         -21.78440475, -22.43858719, -23.19987106, -16.18318367, -22.82086182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 644] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 644] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 214] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.49413443, 6.51567602, 5.72104549, 3.75618243, 4.40788603, 4.05219269,
         4.77330256, 5.20548964, 5.05213881]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.19749069, -20.07060051, -15.00829124, -14.86962318, -16.28983498,
         -15.46364594, -13.24634743, -17.95564651, -17.94532013, -19.32559013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 570] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 570] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 264] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89140415, 4.24306583, 0.43238282, 0.61651576, 1.44491529, 0.98225832,
         2.89481401, 2.46429324, 3.67898178]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0586 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 591] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 591] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 291] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08203363,  2.15383053, -1.83007765, -0.33773929, -2.24676943,
         -3.21968865, -0.57630783,  2.02706289,  0.67616510]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.52461720, -17.35180283, -12.05615902, -12.63583565, -11.58507633,
         -12.59487724, -10.57591057, -13.41824055, -16.97095490, -15.37764359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454],
         [-15.52461624, -17.35180092, -12.05615902, -12.63583660, -11.58507729,
          -12.59487820, -10.57591152, -13.41824245, -16.97095490, -15.37764454]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53871918,  0.04095840, -1.00980091, -2.01896667,  0.82336426]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0671 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [929]; unstable size 929; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 450, 1, 929] with unstable size 449 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 929] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 929] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [449]; unstable size 449; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 449] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 449] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.88848346,  3.70000124,  0.24055994, -1.21744084,  0.64094114,
         -1.06626415, -0.11656308,  2.34579182,  3.68335915]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.45021820, -27.45919800, -20.82433891, -22.54921150, -21.01146507,
         -23.11272240, -21.28590775, -22.88107681, -25.70099831, -27.22681618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201],
         [-23.65473557, -27.69364357, -21.07613373, -22.60361481, -20.87356758,
          -23.11100769, -21.44839478, -22.64229012, -25.88486099, -27.33996201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20256615,  0.37226105,  1.56615639]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0637 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [670]; unstable size 670; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 670] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 670] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 670] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 244] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.87631416, -2.55956173, -2.18437910, -2.77099705, -1.83020782,
         -2.16091824, -1.01760435, -2.05305672, -0.77688050]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.70279121, -25.07186508, -24.43242264, -24.38763809, -24.00282478,
         -24.77808571, -24.40219879, -25.75534058, -24.67971420, -24.98260498]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689],
         [-24.70278931, -25.07186699, -24.43242264, -24.38763809, -24.00282288,
          -24.77808380, -24.40219879, -25.75533867, -24.67971420, -24.98260689]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36907768, -0.63944435, -0.68422890, -1.06904411, -0.29378319,
          -0.66966820,  0.68347168, -0.39215279, -0.08926010]]],
       device='cuda:0')
number of violation:  8
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0837 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [889]; unstable size 889; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 324, 1, 889] with unstable size 323 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 889] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 889] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [323]; unstable size 323; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 323] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 323] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86873078,  3.27330399, -1.23502302, -0.61113095, -0.78136897,
         -0.75137866,  0.93968034,  3.48995066,  3.24112701]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77937126, -24.38296890, -19.26746750, -18.82821846, -19.50073814,
         -19.05830956, -19.41297340, -21.65519333, -24.81905746, -23.99803734]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925],
         [-21.77937126, -24.38297081, -19.26746559, -18.82821846, -19.50073814,
          -19.05830956, -19.41297150, -21.65519333, -24.81905556, -23.99803925]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.20915604, -0.23009109,  0.44242859,  0.35466194]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.53012466, -29.66223907, -26.90876389, -28.07838631, -26.04151726,
         -29.22808647, -27.47805023, -29.35506439, -20.28993988, -29.09470940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 586] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 586] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 173] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51274920, 8.23108101, 5.60526562, 6.71246910, 4.74748898, 7.73364449,
         6.02225113, 7.97453213, 7.67071819]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0464 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [688]; unstable size 688; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 688] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 688] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 688] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 260] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.49447227,  3.06922221,  0.62996602, -0.02265927,  0.38052917,
         -0.22107959,  0.10723680,  4.39991093,  2.21292210]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
         -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.93it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637],
         [-20.18397522, -21.81373215, -17.85622978, -16.59555244, -17.68647575,
          -16.41921616, -17.14182472, -17.56402969, -22.39430809, -20.54507637]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.17633629, 0.72260857]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1148 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.641363143920898
alpha/beta optimization time: 1.2052769660949707
initial alpha-crown bounds: tensor([[ 2.55440640,  3.16163635,  0.69625640,  0.01558444,  0.45437193,
         -0.16967762,  0.16310704,  4.47692680,  2.28875113]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16967761516571045
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6259 seconds.
lower bounds for all target labels: [2.55440616607666, 3.1616363525390625, 0.6962563991546631, 0.015584439039230347, 0.45437192916870117, -0.16967856884002686, 0.1631065011024475, 4.476925849914551, 2.2887511253356934]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [5]
start creating model mps for candidates: ['lay/16_5']
Process 36751 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5607762336731
Verifying property 0 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.476926803588867.

Properties batch 1, size 1
Remaining timeout: 198.36396265029907
Verifying property 1 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1616363525390625.

Properties batch 2, size 1
Remaining timeout: 198.23593497276306
Verifying property 2 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5544064044952393.

Properties batch 3, size 1
Remaining timeout: 198.15556812286377
Verifying property 3 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2887511253356934.

Properties batch 4, size 1
Remaining timeout: 198.0779242515564
Verifying property 4 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6962563991546631.

Properties batch 5, size 1
Remaining timeout: 198.00077962875366
Verifying property 5 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.45437192916870117.

Properties batch 6, size 1
Remaining timeout: 197.92231678962708
Verifying property 6 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1631070375442505.

Properties batch 7, size 1
Remaining timeout: 197.8429524898529
Verifying property 7 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.015584439039230347.

Properties batch 8, size 1
Remaining timeout: 197.76290845870972
Verifying property 8 with 1 instances.
##### Instance 48 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16967762]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.52310753, -22.21076012, -18.13401031, -16.74857521, -17.94910240,
        -16.36793709, -17.47036171, -17.69790268, -22.73849869, -20.87914658],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16967762]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 688
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 258
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 968
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006272792816162109
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0625    transfer 0.0001    finalize 0.0002    func 0.0630    
Accumulated time: func 0.0630    prepare 0.0002    bound 0.0625    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 64] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 17] 
split level 4: [/input-12, 72] 
split level 5: [/input-12, 35] 
split level 6: [/input-8, 944] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 89] 
split level 9: [/input-8, 593] 
split level 10: [/input-12, 36] 
split level 11: [/input-8, 421] 
split level 12: [/input-8, 1948] 
split level 13: [/input-8, 1949] 
split level 14: [/input-12, 18] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1946] 
split level 17: [/input-8, 853] 
split level 18: [/input-8, 418] 
split level 19: [/input-8, 1709] 
split level 20: [/input-8, 1938] 
split level 21: [/input-8, 427] 
split level 22: [/input-8, 601] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 938] 
split level 25: [/input-8, 585] 
split level 26: [/input, 1431] 
split level 27: [/input-8, 979] 
split level 28: [/input-8, 604] 
split level 29: [/input-8, 594] 
split level 30: [/input, 3209] 
split level 31: [/input-8, 980] 
split level 32: [/input-8, 1684] 
split level 33: [/input-12, 71] 
split level 34: [/input-8, 1170] 
split level 35: [/input, 1377] 
split level 36: [/input-8, 844] 
split level 37: [/input-8, 1693] 
split level 38: [/input, 3124] 
split level 39: [/input-8, 1675] 
split level 40: [/input-8, 1954] 
split level 41: [/input-8, 587] 
split level 42: [/input-8, 1742] 
split level 43: [/input, 2710] 
split level 44: [/input-8, 403] 
split level 45: [/input, 1443] 
split level 46: [/input, 2676] 
split level 47: [/input, 276] 
split level 48: [/input, 1444] 
split level 49: [/input, 2679] 
split level 50: [/input, 3171] 
split level 51: [/input-8, 404] 
split level 52: [/input, 1394] 
split level 53: [/input, 3238] 
split level 54: [/input, 2485] 
split level 55: [/input-8, 1331] 
split level 56: [/input-8, 1599] 
split level 57: [/input, 147] 
split level 58: [/input, 131] 
split level 59: [/input, 2451] 
split level 60: [/input-12, 43] 
split level 61: [/input-8, 1177] 
split level 62: [/input, 1346] 
split level 63: [/input-8, 1341] 
split level 64: [/input, 2197] 
split level 65: [/input-8, 1676] 
split level 66: [/input, 1361] 
split level 67: [/input, 2180] 
split level 68: [/input, 2198] 
split level 69: [/input-8, 1752] 
split level 70: [/input, 3285] 
split level 71: [/input-8, 580] 
split level 72: [/input, 209] 
split level 73: [/input, 132] 
split level 74: [/input, 2586] 
split level 75: [/input, 1441] 
split level 76: [/input, 3287] 
split level 77: [/input, 3102] 
split level 78: [/input, 3118] 
split level 79: [/input, 803] 
split level 80: [/input, 1719] 
split level 81: [/input, 787] 
split level 82: [/input, 3363] 
split level 83: [/input, 2603] 
split level 84: [/input, 2434] 
split level 85: [/input, 820] 
split level 86: [/input, 2099] 
split level 87: [/input-8, 1782] 
split level 88: [/input-8, 60] 
split level 89: [/input, 2257] 
split level 90: [/input, 1387] 
split level 91: [/input-8, 1315] 
split level 92: [/input, 3379] 
split level 93: [/input, 1410] 
split level 94: [/input, 146] 
split level 95: [/input, 788] 
split level 96: [/input, 804] 
split level 97: [/input, 2587] 
split level 98: [/input, 3142] 
split level 99: [/input, 2258] 
split level 100: [/input, 2707] 
split level 101: [/input, 1994] 
split level 102: [/input, 2792] 
split level 103: [/input, 2437] 
split level 104: [/input, 2145] 
split level 105: [/input, 819] 
split level 106: [/input, 156] 
split level 107: [/input, 1426] 
split level 108: [/input, 851] 
split level 109: [/input, 3154] 
split level 110: [/input, 1449] 
split level 111: [/input, 2512] 
split level 112: [/input, 2266] 
split level 113: [/input, 177] 
split level 114: [/input, 2387] 
split level 115: [/input, 2433] 
split level 116: [/input, 1468] 
split level 117: [/input, 2116] 
split level 118: [/input, 2741] 
split level 119: [/input, 2758] 
split level 120: [/input, 166] 
split level 121: [/input-8, 836] 
split level 122: [/input, 2658] 
split level 123: [/input-8, 1765] 
split level 124: [/input, 2529] 
split level 125: [/input, 1480] 
split level 126: [/input, 2620] 
split level 127: [/input, 214] 
split level 128: [/input, 2211] 
split level 129: [/input, 2530] 
split level 130: [/input, 835] 
split level 131: [/input, 999] 
split level 132: [/input, 2757] 
split level 133: [/input, 3301] 
split level 134: [/input, 2148] 
split level 135: [/input, 2791] 
split level 136: [/input-8, 396] 
split level 137: [/input, 2242] 
split level 138: [/input, 182] 
split level 139: [/input-8, 1265] 
split level 140: [/input, 113] 
split level 141: [/input, 2161] 
split level 142: [/input, 2774] 
split level 143: [/input, 995] 
split level 144: [/input, 193] 
split level 145: [/input, 3288] 
split level 146: [/input, 2773] 
split level 147: [/input-8, 1784] 
split level 148: [/input-8, 402] 
split level 149: [/input, 2657] 
split level 150: [/input, 3525] 
split level 151: [/input, 837] 
split level 152: [/input, 2977] 
split level 153: [/input, 996] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 977] 
split level 156: [/input, 2686] 
split level 157: [/input, 2507] 
split level 158: [/input, 3358] 
split level 159: [/input, 2777] 
split level 160: [/input, 162] 
split level 161: [/input, 195] 
split level 162: [/input, 145] 
split level 163: [/input, 2699] 
split level 164: [/input, 2450] 
split level 165: [/input, 2355] 
split level 166: [/input, 227] 
split level 167: [/input, 2204] 
split level 168: [/input, 3381] 
split level 169: [/input, 114] 
split level 170: [/input, 199] 
split level 171: [/input, 3014] 
split level 172: [/input, 789] 
split level 173: [/input, 2654] 
split level 174: [/input, 2488] 
split level 175: [/input, 3284] 
split level 176: [/input, 2193] 
split level 177: [/input, 2273] 
split level 178: [/input, 2226] 
split level 179: [/input, 3303] 
split level 180: [/input-8, 1743] 
split level 181: [/input, 2705] 
split level 182: [/input, 173] 
split level 183: [/input, 2210] 
split level 184: [/input, 2611] 
split level 185: [/input-8, 835] 
split level 186: [/input, 2776] 
split level 187: [/input, 183] 
split level 188: [/input, 3555] 
split level 189: [/input, 2466] 
split level 190: [/input, 2515] 
split level 191: [/input, 1978] 
split level 192: [/input, 2214] 
split level 193: [/input, 2489] 
split level 194: [/input, 2248] 
split level 195: [/input, 2209] 
split level 196: [/input, 2517] 
split level 197: [/input, 482] 
split level 198: [/input, 2521] 
split level 199: [/input, 167] 
Time: prepare 0.0063    bound 0.1144    transfer 0.0059    finalize 0.0048    func 0.1315    
Accumulated time: func 0.1946    prepare 0.0173    bound 0.1769    transfer 0.0060    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.26176727) min lb tensor(-0.16961610)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012838125228881836 
BICCOS Cumulative time: 0.012838125228881836
Preprocessing time: 0.011376380920410156 Inference time: 0.00026607513427734375 Add cuts time: 0.00011706352233886719 Cut analysis time: 0.0010786056518554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16202 (1), -0.16197 (1), -0.16190 (1), -0.16179 (1), -0.16160 (1), -0.16152 (1), -0.16142 (1), -0.16132 (1), -0.16131 (1), -0.16122 (1), -0.16121 (1), -0.16060 (1), -0.16054 (1), -0.15996 (1), -0.15977 (1), -0.15970 (1), -0.15870 (1), -0.15799 (1), -0.15793 (1), -0.15643 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5612    set_bounds 0.0120    solve 0.1317    add 0.1360    
Accumulated time: pickout 0.0004    decision 0.5612    set_bounds 0.0120    solve 0.1317    add 0.1360    
Current (lb-rhs): -0.16202235221862793
50 domains visited
Cumulative time: 0.93393874168396

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] 
split level 1: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 42] [/input-12, 64] 
split level 2: [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 17] [/input-12, 42] 
split level 3: [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 35] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13135921955108643
10 lb beta sum: 0.6887269616127014, worst -0.06046968698501587
Time: prepare 0.0074    bound 0.1378    transfer 0.0009    finalize 0.0028    func 0.1515    
Accumulated time: func 0.3461    prepare 0.0251    bound 0.3147    transfer 0.0069    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.38830948) min lb tensor(-0.06029499)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.029595136642456055 
BICCOS Cumulative time: 0.04243326187133789
Preprocessing time: 0.013193368911743164 Inference time: 0.010891914367675781 Add cuts time: 0.004935503005981445 Cut analysis time: 0.0005743503570556641
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0028    decision 0.0222    set_bounds 0.0129    solve 0.1516    add 0.0149    
Accumulated time: pickout 0.0032    decision 0.5835    set_bounds 0.0249    solve 0.2833    add 0.1509    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023889e+30, 4.32518661e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023889e+30, 1.08544514e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023889e+30, 4.34406579e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([42,  0]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023889e+30, 1.11121520e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03160738945007324

all verified at 1th iter
Time: prepare 0.0004    bound 0.0154    transfer 0.0002    finalize 0.0003    func 0.0164    
Accumulated time: func 0.3625    prepare 0.0255    bound 0.3301    transfer 0.0071    finalize 0.0081    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.0118 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.84988976, -27.04168510, -32.56347275, -33.70067215, -33.15383530,
         -34.10073471, -32.55872345, -32.39547729, -30.81136703, -29.74110985]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [597]; unstable size 597; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 597] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 597] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 597] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 252] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.47295213, 3.67134237, 4.79961014, 4.17743587, 5.03716660, 3.67930984,
         3.29446173, 2.28837848, 1.78437138]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1300]; unstable size 1300; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 386, 1, 1300] with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1300] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1300] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [385]; unstable size 385; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 385] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 385] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.83590484, -0.36369562, -0.81580865, -0.21350297, -1.76645565,
         -0.45421195,  1.06313872,  0.19591475,  0.91548681]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.95876122, -24.06052399, -22.79921150, -22.37466049, -21.66536903,
         -22.27144814, -23.11923218, -24.92821121, -24.52709389, -24.95055580]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199],
         [-21.95876312, -24.06052208, -22.79921341, -22.37466049, -21.66536713,
          -22.27144814, -23.11923218, -24.92821121, -24.52709579, -24.95055199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31268501,  1.78907394,  0.52776527,  0.10321236, -0.60608101,
           0.84778404]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0879 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.02009583, -25.62828255, -18.56137657, -22.16949654, -20.18937492,
         -22.90802956, -21.61422729, -24.61019516, -20.71578217, -25.30768013]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [637]; unstable size 637; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 152, 1, 637] with unstable size 151 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 637] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 637] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [151]; unstable size 151; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 151] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.60369158, 1.05985761, 4.44430256, 2.54081869, 5.11138248, 3.84395003,
         6.83230734, 2.69353676, 7.41863537]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.94017601, -28.86633301, -23.06001091, -21.31272125, -22.19619942,
         -20.90770912, -22.69350815, -22.96586227, -29.16728783, -27.83672142]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [615]; unstable size 615; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 323, 1, 615] with unstable size 322 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 615] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 615] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [322]; unstable size 322; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 322] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 322] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.51382399, 5.73518991, 0.91068625, 0.11511439, 0.03012896, 0.51855564,
         1.05246675, 6.62892056, 5.18492365]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0535 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [580]; unstable size 580; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 184, 1, 580] with unstable size 183 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 580] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 580] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 183] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.55080438,  1.90782392, -1.05542922, -0.76249856, -0.39093411,
         -0.77109879, -0.48512748,  2.12622023, -0.21663618]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.12831688, -24.87204933, -21.52433014, -21.45733643, -22.17998314,
         -21.62087250, -21.34234619, -22.34700012, -24.97188950, -22.55655289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083],
         [-21.98245811, -25.14087677, -21.26465225, -21.48969841, -22.09676743,
          -21.62775993, -21.63244629, -22.23480034, -24.92131615, -22.71515083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.35001183, -0.36779404, -0.14274788,  0.46432114, -0.00468636,
           0.60235405,  1.08270454]]], device='cuda:0')
number of violation:  3
Attack finished in 0.0185 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0867 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 631] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 631] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 276] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26207829,  2.67205691, -0.09352827,  0.10025704,  0.83907413,
          0.73087049,  0.70621538,  0.08608729,  2.33385897]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
         -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.55it/s]100%|██████████| 1/1 [00:00<00:00,  7.54it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.58753777, -25.74412537, -22.30705833, -22.74228668, -23.48993874,
          -23.62050629, -23.39388275, -23.13651657, -21.69568634, -25.29735374]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.61137199]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1354 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.14978313446045
alpha/beta optimization time: 1.3969886302947998
initial alpha-crown bounds: tensor([[ 2.29125237,  2.73074484, -0.03381586,  0.15643752,  0.90439701,
          0.79678750,  0.77209902,  0.15606207,  2.37581873]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.033815860748291016
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6329 seconds.
lower bounds for all target labels: [2.2912521362304688, 2.730745315551758, -0.03381776809692383, 0.1564316749572754, 0.9043936729431152, 0.7967829704284668, 0.7720997333526611, 0.15606173872947693, 2.3758187294006348]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
Process 37347 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3406205177307
Verifying property 0 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7307448387145996.

Properties batch 1, size 1
Remaining timeout: 198.133380651474
Verifying property 1 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3758187294006348.

Properties batch 2, size 1
Remaining timeout: 198.02096962928772
Verifying property 2 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.291252374649048.

Properties batch 3, size 1
Remaining timeout: 197.91845321655273
Verifying property 3 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9043970108032227.

Properties batch 4, size 1
Remaining timeout: 197.81586146354675
Verifying property 4 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7967875003814697.

Properties batch 5, size 1
Remaining timeout: 197.71250176429749
Verifying property 5 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7720990180969238.

Properties batch 6, size 1
Remaining timeout: 197.60941982269287
Verifying property 6 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.15643751621246338.

Properties batch 7, size 1
Remaining timeout: 197.50584745407104
Verifying property 7 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1560620665550232.

Properties batch 8, size 1
Remaining timeout: 197.38737750053406
Verifying property 8 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03381586]], device='cuda:0') need to verify.
Model prediction is: tensor([-25.02576256, -26.03837204, -23.14089203, -23.39199638, -24.21075249,
        -24.33787727, -24.11221695, -23.78001785, -21.66454697, -25.57447433],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03381586]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 631
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 271
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 917
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009529590606689453
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0547    transfer 0.0001    finalize 0.0002    func 0.0553    
Accumulated time: func 0.0553    prepare 0.0003    bound 0.0547    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 50] 
split level 6: [/input-8, 1963] 
split level 7: [/input-8, 1947] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1718] 
split level 10: [/input-8, 1693] 
split level 11: [/input-8, 370] 
split level 12: [/input-8, 923] 
split level 13: [/input-8, 371] 
split level 14: [/input-8, 1956] 
split level 15: [/input-8, 1948] 
split level 16: [/input-8, 938] 
split level 17: [/input-8, 299] 
split level 18: [/input-8, 454] 
split level 19: [/input-8, 365] 
split level 20: [/input-8, 362] 
split level 21: [/input-8, 1710] 
split level 22: [/input-8, 1656] 
split level 23: [/input-8, 909] 
split level 24: [/input-8, 1970] 
split level 25: [/input-8, 291] 
split level 26: [/input-8, 795] 
split level 27: [/input-8, 1644] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1636] 
split level 30: [/input-8, 617] 
split level 31: [/input-8, 908] 
split level 32: [/input-8, 1840] 
split level 33: [/input-8, 587] 
split level 34: [/input-8, 186] 
split level 35: [/input-8, 586] 
split level 36: [/input-8, 1640] 
split level 37: [/input-8, 785] 
split level 38: [/input-8, 604] 
split level 39: [/input-8, 778] 
split level 40: [/input, 3544] 
split level 41: [/input-8, 1684] 
split level 42: [/input-8, 905] 
split level 43: [/input, 2423] 
split level 44: [/input-8, 354] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1648] 
split level 47: [/input, 2231] 
split level 48: [/input-8, 781] 
split level 49: [/input-8, 1971] 
split level 50: [/input-8, 1631] 
split level 51: [/input-8, 918] 
split level 52: [/input-8, 178] 
split level 53: [/input-8, 1639] 
split level 54: [/input-8, 1651] 
split level 55: [/input-8, 1295] 
split level 56: [/input, 2023] 
split level 57: [/input-8, 1698] 
split level 58: [/input-8, 218] 
split level 59: [/input, 3541] 
split level 60: [/input-8, 580] 
split level 61: [/input-8, 1627] 
split level 62: [/input, 469] 
split level 63: [/input-8, 346] 
split level 64: [/input-8, 1284] 
split level 65: [/input, 2153] 
split level 66: [/input, 2472] 
split level 67: [/input, 3542] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2442] 
split level 70: [/input-8, 172] 
split level 71: [/input-8, 1781] 
split level 72: [/input, 2201] 
split level 73: [/input, 2457] 
split level 74: [/input, 2370] 
split level 75: [/input, 2024] 
split level 76: [/input, 488] 
split level 77: [/input, 2421] 
split level 78: [/input-8, 222] 
split level 79: [/input-8, 337] 
split level 80: [/input, 2022] 
split level 81: [/input, 754] 
split level 82: [/input, 2021] 
split level 83: [/input, 3545] 
split level 84: [/input, 2181] 
split level 85: [/input-8, 1150] 
split level 86: [/input-8, 1706] 
split level 87: [/input, 1415] 
split level 88: [/input-8, 910] 
split level 89: [/input, 2488] 
split level 90: [/input, 981] 
split level 91: [/input, 487] 
split level 92: [/input, 2246] 
split level 93: [/input-8, 907] 
split level 94: [/input-8, 1824] 
split level 95: [/input, 2518] 
split level 96: [/input-8, 1617] 
split level 97: [/input, 696] 
split level 98: [/input, 2154] 
split level 99: [/input, 2473] 
split level 100: [/input-8, 48] 
split level 101: [/input-8, 997] 
split level 102: [/input, 2282] 
split level 103: [/input, 3540] 
split level 104: [/input-8, 1974] 
split level 105: [/input, 998] 
split level 106: [/input-8, 1587] 
split level 107: [/input-8, 42] 
split level 108: [/input, 2026] 
split level 109: [/input, 2538] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 1773] 
split level 112: [/input, 2489] 
split level 113: [/input, 2114] 
split level 114: [/input-8, 213] 
split level 115: [/input-8, 1607] 
split level 116: [/input-8, 233] 
split level 117: [/input-8, 776] 
split level 118: [/input, 2121] 
split level 119: [/input, 985] 
split level 120: [/input, 3557] 
split level 121: [/input, 4066] 
split level 122: [/input-8, 211] 
split level 123: [/input-8, 1034] 
split level 124: [/input, 2263] 
split level 125: [/input-8, 330] 
split level 126: [/input, 2264] 
split level 127: [/input, 486] 
split level 128: [/input, 2075] 
split level 129: [/input, 3558] 
split level 130: [/input-8, 219] 
split level 131: [/input, 2265] 
split level 132: [/input, 2533] 
split level 133: [/input, 2325] 
split level 134: [/input, 2451] 
split level 135: [/input-8, 1736] 
split level 136: [/input, 707] 
split level 137: [/input, 2435] 
split level 138: [/input, 738] 
split level 139: [/input, 2525] 
split level 140: [/input, 3973] 
split level 141: [/input, 2261] 
split level 142: [/input, 3371] 
split level 143: [/input-8, 1816] 
split level 144: [/input, 2248] 
split level 145: [/input, 4006] 
split level 146: [/input, 2347] 
split level 147: [/input-8, 217] 
split level 148: [/input, 812] 
split level 149: [/input, 2025] 
split level 150: [/input-8, 215] 
split level 151: [/input, 2163] 
split level 152: [/input-8, 339] 
split level 153: [/input, 2369] 
split level 154: [/input, 485] 
split level 155: [/input, 2280] 
split level 156: [/input, 2113] 
split level 157: [/input, 299] 
split level 158: [/input-8, 238] 
split level 159: [/input, 2382] 
split level 160: [/input-8, 253] 
split level 161: [/input, 2353] 
split level 162: [/input, 3422] 
split level 163: [/input, 1000] 
split level 164: [/input, 3361] 
split level 165: [/input-8, 290] 
split level 166: [/input, 952] 
split level 167: [/input, 489] 
split level 168: [/input-8, 197] 
split level 169: [/input, 2536] 
split level 170: [/input, 986] 
split level 171: [/input, 3395] 
split level 172: [/input, 2505] 
split level 173: [/input, 2552] 
split level 174: [/input, 2281] 
split level 175: [/input, 4082] 
split level 176: [/input, 1977] 
split level 177: [/input, 3882] 
split level 178: [/input, 1976] 
split level 179: [/input, 3559] 
split level 180: [/input-8, 225] 
split level 181: [/input-8, 1254] 
split level 182: [/input, 3942] 
split level 183: [/input, 2554] 
split level 184: [/input, 3372] 
split level 185: [/input, 2278] 
split level 186: [/input, 2125] 
split level 187: [/input, 2092] 
split level 188: [/input, 2515] 
split level 189: [/input, 2551] 
split level 190: [/input-8, 1848] 
split level 191: [/input, 3344] 
split level 192: [/input, 2788] 
split level 193: [/input, 2277] 
split level 194: [/input, 2126] 
split level 195: [/input, 2499] 
split level 196: [/input, 2279] 
split level 197: [/input, 2549] 
split level 198: [/input-8, 410] 
split level 199: [/input, 2227] 
Time: prepare 0.0062    bound 0.0944    transfer 0.0070    finalize 0.0043    func 0.1120    
Accumulated time: func 0.1673    prepare 0.0165    bound 0.1491    transfer 0.0071    finalize 0.0045    
all_split False
======================Cut inference begins======================
max lb tensor(0.16245198) min lb tensor(-0.03360415)
Number of Verified Splits: 24 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01316213607788086 
BICCOS Cumulative time: 0.01316213607788086
Preprocessing time: 0.010873556137084961 Inference time: 0.0009398460388183594 Add cuts time: 0.0003039836883544922 Cut analysis time: 0.0010447502136230469
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5148    set_bounds 0.0115    solve 0.1121    add 0.0100    
Accumulated time: pickout 0.0004    decision 0.5148    set_bounds 0.0115    solve 0.1121    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([1.63023647e+30]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([5.35614331e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004791736602783203

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0047    
Accumulated time: func 0.1720    prepare 0.0168    bound 0.1532    transfer 0.0072    finalize 0.0046    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 3.9413 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.79308891, -23.41397476, -18.82098770, -19.48437309, -18.56243706,
         -19.91847992, -17.07889175, -20.97890472, -23.56008720, -23.37459755]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 336, 1, 606] with unstable size 335 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 606] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [335]; unstable size 335; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 335] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 335] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.91788793, 3.99140930, 0.67279971, 1.37791419, 0.25162339, 1.69752812,
         2.11260486, 4.47059774, 4.00945711]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0679 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 675] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 675] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 216] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.57993078,  3.15776849,  6.31814671,  3.25631618,  7.08248043,
          6.16690922,  5.13876152, -1.86000645,  3.30038881]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
         -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.65884781, -39.15306854, -38.09638214, -41.44153214, -38.26478195,
          -42.46372604, -41.47655106, -40.54250336, -32.64043427, -38.01860428]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.01841354]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0714 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [645]; unstable size 645; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 645] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 645] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 645] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 262] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.42895699,  4.10993099, -0.60754943, -0.13815880, -0.32017219,
          1.23225904, -0.67439413,  4.97595882,  2.89095950]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
         -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.31it/s]100%|██████████| 1/1 [00:00<00:00,  8.31it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760],
         [-21.49737930, -22.43238258, -17.16550827, -16.42162704, -17.18960381,
          -16.38314819, -18.64624214, -17.14737320, -23.54323959, -21.05616760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.78236008, 0.03847885, 0.80645561, 0.76422501]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1233 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.555831909179688
alpha/beta optimization time: 1.1970105171203613
initial alpha-crown bounds: tensor([[ 3.51031113,  4.22539663, -0.55174983, -0.12316942, -0.26672792,
          1.27698314, -0.59470469,  5.09362984,  2.98586226]], device='cuda:0')
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5947046875953674
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6220 seconds.
lower bounds for all target labels: [3.510310173034668, 4.225396633148193, -0.5517499446868896, -0.1231694221496582, -0.2667282819747925, 1.2769827842712402, -0.5947050452232361, 5.093629837036133, 2.9858622550964355]
Number of cpus: 96  Number of subproblems: 4
Reassign each subproblems with number of thread: 24
Starting MIP solver for these labels: [2, 3, 4, 6]
start creating model mps for candidates: ['lay/16_2', 'lay/16_3', 'lay/16_4', 'lay/16_6']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 38457 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 38460 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 38461 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 38462 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58802342414856
Verifying property 0 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.093629837036133.

Properties batch 1, size 1
Remaining timeout: 198.40148782730103
Verifying property 1 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.225396633148193.

Properties batch 2, size 1
Remaining timeout: 198.31535959243774
Verifying property 2 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.5103111267089844.

Properties batch 3, size 1
Remaining timeout: 198.232412815094
Verifying property 3 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.9858622550964355.

Properties batch 4, size 1
Remaining timeout: 198.14954686164856
Verifying property 4 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2769831418991089.

Properties batch 5, size 1
Remaining timeout: 198.0664665699005
Verifying property 5 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12316942]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12316942]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0010097026824951172
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0594    transfer 0.0001    finalize 0.0002    func 0.0599    
Accumulated time: func 0.0599    prepare 0.0002    bound 0.0594    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 7] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 49] 
split level 10: [/input-12, 4] 
split level 11: [/input-12, 57] 
split level 12: [/input-8, 1098] 
split level 13: [/input-12, 92] 
split level 14: [/input-12, 53] 
split level 15: [/input-12, 71] 
split level 16: [/input-8, 1683] 
split level 17: [/input-8, 395] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 416] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 227] 
split level 24: [/input-8, 394] 
split level 25: [/input-8, 406] 
split level 26: [/input-8, 132] 
split level 27: [/input-8, 417] 
split level 28: [/input-8, 714] 
split level 29: [/input-8, 723] 
split level 30: [/input-8, 211] 
split level 31: [/input-8, 629] 
split level 32: [/input-8, 425] 
split level 33: [/input-8, 393] 
split level 34: [/input-8, 1673] 
split level 35: [/input, 3099] 
split level 36: [/input-8, 419] 
split level 37: [/input-8, 1665] 
split level 38: [/input-8, 1323] 
split level 39: [/input-8, 1692] 
split level 40: [/input-12, 20] 
split level 41: [/input-8, 78] 
split level 42: [/input-8, 1666] 
split level 43: [/input-8, 61] 
split level 44: [/input-8, 1276] 
split level 45: [/input-8, 716] 
split level 46: [/input-8, 613] 
split level 47: [/input-8, 627] 
split level 48: [/input-8, 1697] 
split level 49: [/input-8, 1946] 
split level 50: [/input-8, 142] 
split level 51: [/input-8, 1576] 
split level 52: [/input, 1416] 
split level 53: [/input-8, 2034] 
split level 54: [/input, 1374] 
split level 55: [/input-8, 2028] 
split level 56: [/input, 1448] 
split level 57: [/input-8, 1730] 
split level 58: [/input-8, 1982] 
split level 59: [/input-8, 434] 
split level 60: [/input-8, 48] 
split level 61: [/input-8, 129] 
split level 62: [/input-8, 1084] 
split level 63: [/input-8, 1736] 
split level 64: [/input, 1879] 
split level 65: [/input-8, 844] 
split level 66: [/input-8, 1273] 
split level 67: [/input-8, 57] 
split level 68: [/input, 1400] 
split level 69: [/input-8, 1322] 
split level 70: [/input, 130] 
split level 71: [/input-8, 218] 
split level 72: [/input-8, 407] 
split level 73: [/input, 2269] 
split level 74: [/input, 1410] 
split level 75: [/input, 2622] 
split level 76: [/input-8, 1987] 
split level 77: [/input, 2796] 
split level 78: [/input-8, 1708] 
split level 79: [/input-8, 1157] 
split level 80: [/input-8, 456] 
split level 81: [/input-8, 1082] 
split level 82: [/input, 1864] 
split level 83: [/input-8, 1088] 
split level 84: [/input-8, 1159] 
split level 85: [/input-8, 398] 
split level 86: [/input, 812] 
split level 87: [/input, 2674] 
split level 88: [/input, 2670] 
split level 89: [/input, 421] 
split level 90: [/input, 2587] 
split level 91: [/input, 2952] 
split level 92: [/input, 1878] 
split level 93: [/input, 34] 
split level 94: [/input, 1563] 
split level 95: [/input-8, 1081] 
split level 96: [/input, 2638] 
split level 97: [/input, 1942] 
split level 98: [/input, 2779] 
split level 99: [/input, 1898] 
split level 100: [/input-8, 1275] 
split level 101: [/input, 2689] 
split level 102: [/input, 2218] 
split level 103: [/input, 2184] 
split level 104: [/input, 136] 
split level 105: [/input-8, 1759] 
split level 106: [/input, 788] 
split level 107: [/input, 1438] 
split level 108: [/input, 813] 
split level 109: [/input, 2750] 
split level 110: [/input, 119] 
split level 111: [/input, 3230] 
split level 112: [/input, 2685] 
split level 113: [/input, 1508] 
split level 114: [/input-8, 267] 
split level 115: [/input, 2697] 
split level 116: [/input-8, 229] 
split level 117: [/input-8, 424] 
split level 118: [/input, 152] 
split level 119: [/input, 221] 
split level 120: [/input, 2778] 
split level 121: [/input-8, 2038] 
split level 122: [/input, 1507] 
split level 123: [/input, 2871] 
split level 124: [/input, 1422] 
split level 125: [/input, 1450] 
split level 126: [/input, 2777] 
split level 127: [/input, 619] 
split level 128: [/input, 1064] 
split level 129: [/input, 2906] 
split level 130: [/input, 2540] 
split level 131: [/input, 2797] 
split level 132: [/input, 2932] 
split level 133: [/input, 228] 
split level 134: [/input-8, 808] 
split level 135: [/input, 1164] 
split level 136: [/input-8, 204] 
split level 137: [/input, 134] 
split level 138: [/input, 2794] 
split level 139: [/input, 786] 
split level 140: [/input, 220] 
split level 141: [/input, 2746] 
split level 142: [/input, 790] 
split level 143: [/input, 3527] 
split level 144: [/input, 2232] 
split level 145: [/input, 153] 
split level 146: [/input, 2980] 
split level 147: [/input-8, 1716] 
split level 148: [/input, 2732] 
split level 149: [/input, 1130] 
split level 150: [/input, 1894] 
split level 151: [/input, 2765] 
split level 152: [/input, 1925] 
split level 153: [/input, 1469] 
split level 154: [/input, 1882] 
split level 155: [/input, 216] 
split level 156: [/input, 1483] 
split level 157: [/input, 1862] 
split level 158: [/input, 2456] 
split level 159: [/input, 987] 
split level 160: [/input, 2747] 
split level 161: [/input, 2763] 
split level 162: [/input, 237] 
split level 163: [/input, 3149] 
split level 164: [/input-8, 481] 
split level 165: [/input, 2264] 
split level 166: [/input, 3973] 
split level 167: [/input-8, 143] 
split level 168: [/input, 2715] 
split level 169: [/input-8, 612] 
split level 170: [/input, 893] 
split level 171: [/input, 2251] 
split level 172: [/input, 305] 
split level 173: [/input, 2760] 
split level 174: [/input, 203] 
split level 175: [/input, 2705] 
split level 176: [/input, 2798] 
split level 177: [/input, 1146] 
split level 178: [/input, 177] 
split level 179: [/input, 1899] 
split level 180: [/input, 238] 
split level 181: [/input, 148] 
split level 182: [/input, 2698] 
split level 183: [/input, 2776] 
split level 184: [/input, 179] 
split level 185: [/input, 2234] 
split level 186: [/input, 2781] 
split level 187: [/input-8, 1953] 
split level 188: [/input-8, 368] 
split level 189: [/input, 1846] 
split level 190: [/input, 37] 
split level 191: [/input, 3013] 
split level 192: [/input, 2266] 
split level 193: [/input, 142] 
split level 194: [/input-8, 1662] 
split level 195: [/input, 49] 
split level 196: [/input, 1470] 
split level 197: [/input, 1490] 
split level 198: [/input-8, 1344] 
split level 199: [/input, 1148] 
Time: prepare 0.0062    bound 0.1120    transfer 0.0054    finalize 0.0050    func 0.1286    
Accumulated time: func 0.1885    prepare 0.0171    bound 0.1714    transfer 0.0055    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03540331) min lb tensor(-0.12313432)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012794971466064453 
BICCOS Cumulative time: 0.012794971466064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11944 (1), -0.11921 (1), -0.11918 (1), -0.11910 (1), -0.11884 (1), -0.11875 (1), -0.11855 (1), -0.11833 (1), -0.11830 (1), -0.11821 (1), -0.11819 (1), -0.11776 (1), -0.11733 (1), -0.11667 (1), -0.11663 (1), -0.11643 (1), -0.11610 (1), -0.11566 (1), -0.11554 (1), -0.11544 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5507    set_bounds 0.0121    solve 0.1288    add 0.2017    
Accumulated time: pickout 0.0004    decision 0.5507    set_bounds 0.0121    solve 0.1288    add 0.2017    
Current (lb-rhs): -0.11944365501403809
50 domains visited
Cumulative time: 0.9902708530426025

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 3: [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
Time: prepare 0.0069    bound 0.1002    transfer 0.0023    finalize 0.0033    func 0.1128    
Accumulated time: func 0.3014    prepare 0.0243    bound 0.2716    transfer 0.0078    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.09722203) min lb tensor(-0.11147040)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.01633167266845703 
BICCOS Cumulative time: 0.029126644134521484
Preprocessing time: 0.013756752014160156 Inference time: 0.00046563148498535156 Add cuts time: 0.000156402587890625 Cut analysis time: 0.0019528865814208984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05446 (2), -0.05433 (2), -0.05411 (2), -0.05385 (2), -0.05308 (2), -0.05264 (2), -0.05237 (2), -0.05200 (2), -0.05193 (2), -0.05190 (2), -0.05183 (2), -0.05165 (2), -0.05139 (2), -0.05124 (2), -0.05101 (2), -0.05075 (2), -0.05074 (2), -0.05032 (2), -0.05031 (2), -0.05024 (2), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0216    set_bounds 0.0164    solve 0.1130    add 0.1573    
Accumulated time: pickout 0.0087    decision 0.5723    set_bounds 0.0285    solve 0.2418    add 0.3590    
Current (lb-rhs): -0.054458796977996826
100 domains visited
Cumulative time: 1.3235995769500732

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 85] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 85] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] 
split level 3: [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04602658748626709
10 lb beta sum: 0.03813406080007553, worst -0.06466789543628693
Time: prepare 0.0066    bound 0.1365    transfer 0.0010    finalize 0.0024    func 0.1493    
Accumulated time: func 0.4507    prepare 0.0312    bound 0.4081    transfer 0.0088    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.03650320) min lb tensor(-0.04320819)
Number of Verified Splits: 125 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.022867441177368164 
BICCOS Cumulative time: 0.05199408531188965
Preprocessing time: 0.01275014877319336 Inference time: 0.007272005081176758 Add cuts time: 0.0020186901092529297 Cut analysis time: 0.0008265972137451172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01939 (3), -0.01938 (3), -0.01880 (3), -0.01871 (3), -0.01853 (3), -0.01845 (3), -0.01765 (3), -0.01665 (3), -0.01604 (3), -0.01591 (3), -0.01501 (3), -0.01430 (3), -0.01414 (3), -0.01338 (3), -0.01204 (3), -0.01199 (3), -0.01196 (3), -0.01149 (3), -0.01089 (3), -0.01007 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0206    set_bounds 0.0177    solve 0.1494    add 0.2364    
Accumulated time: pickout 0.0099    decision 0.5930    set_bounds 0.0462    solve 0.3912    add 0.5954    
Current (lb-rhs): -0.019390365108847618
150 domains visited
Cumulative time: 1.778815507888794

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 36] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 6] [/input-12, 34] [/input-12, 34] [/input-12, 83] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 85] [/input-12, 72] [/input-12, 85] [/input-12, 6] [/input-12, 72] 
split level 3: [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-12, 6] [/input-12, 72] [/input-8, 1698] [/input-12, 72] [/input-12, 72] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019506990909576416
10 lb beta sum: 0.11796451359987259, worst -0.04228389263153076
Time: prepare 0.0075    bound 0.1800    transfer 0.0011    finalize 0.0025    func 0.1937    
Accumulated time: func 0.6444    prepare 0.0390    bound 0.5881    transfer 0.0098    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.03649813) min lb tensor(-0.01602649)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 8
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.038871049880981445 
BICCOS Cumulative time: 0.0908651351928711
Preprocessing time: 0.013007879257202148 Inference time: 0.017380952835083008 Add cuts time: 0.005866050720214844 Cut analysis time: 0.0026161670684814453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01124 (4), -0.01013 (4), -0.00988 (4), -0.00973 (4), -0.00938 (4), -0.00917 (4), -0.00859 (4), -0.00826 (4), -0.00795 (4), -0.00788 (4), -0.00764 (4), -0.00712 (4), -0.00694 (4), -0.00689 (4), -0.00658 (4), -0.00651 (4), -0.00647 (4), -0.00643 (4), -0.00641 (4), -0.00610 (4), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0212    set_bounds 0.0182    solve 0.1939    add 0.5174    
Accumulated time: pickout 0.0178    decision 0.6142    set_bounds 0.0643    solve 0.5851    add 1.1128    
Current (lb-rhs): -0.011243564076721668
200 domains visited
Cumulative time: 2.5842103958129883

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 34] [/input-12, 36] [/input-12, 34] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 18] [/input-12, 34] [/input-12, 18] 
split level 2: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 85] [/input-12, 18] [/input-12, 85] 
split level 3: [/input-12, 6] [/input-12, 72] [/input-12, 85] [/input-12, 57] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 72] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012190937995910645
10 lb beta sum: 0.2404141128063202, worst -0.036347344517707825
Time: prepare 0.0074    bound 0.1460    transfer 0.0030    finalize 0.0035    func 0.1640    
Accumulated time: func 0.8084    prepare 0.0467    bound 0.7340    transfer 0.0128    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.03790951) min lb tensor(-0.00584517)
Number of Verified Splits: 384 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 9
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.05113673210144043 
BICCOS Cumulative time: 0.14200186729431152
Preprocessing time: 0.012924671173095703 Inference time: 0.025467395782470703 Add cuts time: 0.009950399398803711 Cut analysis time: 0.0027942657470703125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0076    decision 0.0217    set_bounds 0.0184    solve 0.1642    add 0.0323    
Accumulated time: pickout 0.0254    decision 0.6359    set_bounds 0.0828    solve 0.7493    add 1.1451    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63024372e+30, 1.85128320e-02, 4.00031060e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63024372e+30, 1.85128320e-02, 1.67130101e-02, 3.56994122e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63024372e+30, 1.85128320e-02, 1.67130101e-02, 8.47171433e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63024372e+30, 1.87051166e-02, 4.04287428e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63024372e+30, 1.87051166e-02, 1.66091789e-02, 3.61137241e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  6, 36, 83]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63024372e+30, 1.87051166e-02, 1.66091789e-02, 8.48107226e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([1.]), tensor([0]), tensor([5.60519386e-45]), tensor([0]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12286490201950073
10 lb beta sum: 0.36642852425575256, worst -0.12248122692108154
Time: prepare 0.0007    bound 0.1889    transfer 0.0004    finalize 0.0003    func 0.1905    
Accumulated time: func 0.9989    prepare 0.0474    bound 0.9230    transfer 0.0132    finalize 0.0172    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 83] 
split level 2: [/input-12, 34] 
split level 3: [/input-12, 18] 
split level 4: [/input-12, 85] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 57] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23172041773796082, worst -0.04968529939651489
10 lb beta sum: 0.2543512284755707, worst -0.04949992895126343
Time: prepare 0.0103    bound 0.1667    transfer 0.0039    finalize 0.0024    func 0.1850    
Accumulated time: func 1.1839    prepare 0.0583    bound 1.0897    transfer 0.0171    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.05327250) min lb tensor(-0.04941189)
Number of Verified Splits: 197 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23172038793563843, worst -0.06330764293670654
10 lb beta sum: 0.5193575620651245, worst -0.0666075050830841
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 53.
#cuts 1-3: 9
#cuts 4-6: 27
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.3300211429595947 
BICCOS Cumulative time: 0.47202301025390625
Preprocessing time: 0.007512092590332031 Inference time: 0.31150078773498535 Add cuts time: 0.007307767868041992 Cut analysis time: 0.0037004947662353516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04941 (8), -0.04920 (8), -0.04826 (8), -0.04781 (8), -0.04768 (8), -0.04704 (8), -0.04645 (8), -0.04562 (8), -0.04154 (8), -0.04144 (8), -0.03979 (8), -0.03887 (8), -0.03850 (8), -0.03827 (8), -0.03819 (8), -0.03662 (8), -0.02767 (8), -0.02649 (8), -0.02478 (8), -0.02403 (8), 
Length of domains: 59
Time: pickout 0.0007    decision 0.0263    set_bounds 0.0237    solve 0.1852    add 0.1051    
Accumulated time: pickout 0.0261    decision 0.6622    set_bounds 0.1065    solve 0.9345    add 1.2501    
Current (lb-rhs): -0.049411892890930176
259 domains visited
Cumulative time: 3.942491292953491

BaB round 2
batch: 59
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 71] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04104417562484741
10 lb beta sum: 0.10630500316619873, worst -0.04054063558578491
Time: prepare 0.0043    bound 0.1957    transfer 0.0020    finalize 0.0023    func 0.2059    
Accumulated time: func 1.3898    prepare 0.0629    bound 1.2854    transfer 0.0191    finalize 0.0218    
all_split False
======================Cut inference begins======================
max lb tensor(0.02214408) min lb tensor(-0.04050642)
Number of Verified Splits: 139 of 236
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05196821689605713
10 lb beta sum: 0.4497150480747223, worst -0.0891103595495224
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 82.
#cuts 1-3: 9
#cuts 4-6: 28
#cuts 7-9: 43
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.34076833724975586 
BICCOS Cumulative time: 0.8127913475036621
Preprocessing time: 0.008090019226074219 Inference time: 0.31362485885620117 Add cuts time: 0.01330709457397461 Cut analysis time: 0.005746364593505859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04051 (10), -0.04038 (10), -0.03934 (10), -0.03890 (10), -0.03858 (10), -0.03788 (10), -0.03748 (10), -0.03735 (10), -0.03697 (10), -0.03663 (10), -0.03633 (10), -0.03608 (10), -0.03566 (10), -0.03562 (10), -0.03493 (10), -0.03434 (10), -0.03246 (10), -0.03236 (10), -0.03076 (10), -0.02993 (10), 
Length of domains: 97
Time: pickout 0.0115    decision 0.0218    set_bounds 0.0137    solve 0.2060    add 0.1038    
Accumulated time: pickout 0.0375    decision 0.6840    set_bounds 0.1202    solve 1.1405    add 1.3539    
Current (lb-rhs): -0.04050642251968384
356 domains visited
Cumulative time: 4.65122127532959

BaB round 3
batch: 97
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03394514322280884
10 lb beta sum: 0.10831579566001892, worst -0.03351140022277832
Time: prepare 0.0074    bound 0.5735    transfer 0.0039    finalize 0.0036    func 0.5911    
Accumulated time: func 1.9810    prepare 0.0706    bound 1.8589    transfer 0.0230    finalize 0.0254    
all_split False
======================Cut inference begins======================
max lb tensor(0.03238654) min lb tensor(-0.03349233)
Number of Verified Splits: 266 of 388
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 20
#cuts 4-6: 18
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.056310415267944336 
BICCOS Cumulative time: 0.8691017627716064
Preprocessing time: 0.012660741806030273 Inference time: 0.0338289737701416 Add cuts time: 0.006682634353637695 Cut analysis time: 0.0031380653381347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03349 (12), -0.03337 (12), -0.03238 (12), -0.03197 (12), -0.03156 (12), -0.03090 (12), -0.03058 (12), -0.03026 (12), -0.02998 (12), -0.02974 (12), -0.02941 (12), -0.02914 (12), -0.02875 (12), -0.02869 (12), -0.02807 (12), -0.02759 (12), -0.02572 (12), -0.02533 (12), -0.02530 (12), -0.02529 (12), 
Length of domains: 122
Time: pickout 0.0185    decision 0.0284    set_bounds 0.0256    solve 0.5913    add 0.1231    
Accumulated time: pickout 0.0561    decision 0.7124    set_bounds 0.1457    solve 1.7319    add 1.4771    
Current (lb-rhs): -0.033492326736450195
478 domains visited
Cumulative time: 5.505980491638184

BaB round 4
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029082536697387695
10 lb beta sum: 0.1418052464723587, worst -0.03368610143661499
Time: prepare 0.0048    bound 0.2151    transfer 0.0009    finalize 0.0016    func 0.2240    
Accumulated time: func 2.2050    prepare 0.0758    bound 2.0739    transfer 0.0238    finalize 0.0270    
all_split False
======================Cut inference begins======================
max lb tensor(0.00674462) min lb tensor(-0.02864325)
Number of Verified Splits: 73 of 244
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 23
#cuts 4-6: 18
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.023227691650390625 
BICCOS Cumulative time: 0.8923294544219971
Preprocessing time: 0.008210897445678711 Inference time: 0.008796453475952148 Add cuts time: 0.0033006668090820312 Cut analysis time: 0.0029196739196777344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02864 (13), -0.02841 (13), -0.02753 (13), -0.02737 (13), -0.02729 (13), -0.02705 (13), -0.02681 (13), -0.02619 (13), -0.02611 (13), -0.02588 (13), -0.02584 (13), -0.02532 (13), -0.02502 (13), -0.02498 (13), -0.02495 (13), -0.02451 (13), -0.02444 (13), -0.02430 (13), -0.02418 (13), -0.02405 (13), 
Length of domains: 171
Time: pickout 0.0185    decision 0.0239    set_bounds 0.0135    solve 0.2242    add 0.1395    
Accumulated time: pickout 0.0746    decision 0.7363    set_bounds 0.1592    solve 1.9560    add 1.6165    
Current (lb-rhs): -0.028643250465393066
649 domains visited
Cumulative time: 5.967718124389648

BaB round 5
batch: 171
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] [/input-8, 1691] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02734154462814331
10 lb beta sum: 0.17313626408576965, worst -0.0269128680229187
Time: prepare 0.0084    bound 0.2276    transfer 0.0012    finalize 0.0037    func 0.2432    
Accumulated time: func 2.4482    prepare 0.0845    bound 2.3015    transfer 0.0250    finalize 0.0307    
all_split False
======================Cut inference begins======================
max lb tensor(0.31488085) min lb tensor(-0.02690214)
Number of Verified Splits: 65 of 342
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.024248600006103516 
BICCOS Cumulative time: 0.9165780544281006
Preprocessing time: 0.01121377944946289 Inference time: 0.007432222366333008 Add cuts time: 0.003187894821166992 Cut analysis time: 0.002414703369140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02690 (14), -0.02649 (14), -0.02584 (14), -0.02560 (14), -0.02541 (14), -0.02523 (14), -0.02509 (14), -0.02453 (14), -0.02445 (14), -0.02424 (14), -0.02405 (14), -0.02390 (14), -0.02364 (14), -0.02337 (14), -0.02332 (14), -0.02323 (14), -0.02320 (14), -0.02316 (14), -0.02307 (14), -0.02307 (14), 
Length of domains: 277
Time: pickout 0.0231    decision 0.0278    set_bounds 0.0109    solve 0.2434    add 0.1063    
Accumulated time: pickout 0.0977    decision 0.7641    set_bounds 0.1701    solve 2.1994    add 1.7228    
Current (lb-rhs): -0.02690213918685913
926 domains visited
Cumulative time: 6.4158875942230225

BaB round 6
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] [/input-8, 1698] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02602231502532959
10 lb beta sum: 0.18538618087768555, worst -0.037287794053554535
Time: prepare 0.0125    bound 0.1928    transfer 0.0047    finalize 0.0037    func 0.2174    
Accumulated time: func 2.6656    prepare 0.0972    bound 2.4944    transfer 0.0297    finalize 0.0344    
all_split False
======================Cut inference begins======================
max lb tensor(0.31752360) min lb tensor(-0.02550542)
Number of Verified Splits: 92 of 554
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.03646683692932129 
BICCOS Cumulative time: 0.9530448913574219
Preprocessing time: 0.018448352813720703 Inference time: 0.011639833450317383 Add cuts time: 0.004168272018432617 Cut analysis time: 0.002210378646850586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02551 (15), -0.02505 (15), -0.02457 (15), -0.02417 (15), -0.02390 (15), -0.02387 (15), -0.02376 (15), -0.02326 (15), -0.02323 (15), -0.02318 (15), -0.02289 (15), -0.02261 (15), -0.02251 (15), -0.02244 (15), -0.02243 (15), -0.02229 (15), -0.02209 (15), -0.02204 (15), -0.02203 (15), -0.02191 (15), 
Length of domains: 462
Time: pickout 0.0224    decision 0.0341    set_bounds 0.0315    solve 0.2177    add 0.1314    
Accumulated time: pickout 0.1201    decision 0.7981    set_bounds 0.2016    solve 2.4172    add 1.8542    
Current (lb-rhs): -0.025505423545837402
1388 domains visited
Cumulative time: 6.899463653564453

BaB round 7
batch: 462
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 723] [/input-8, 723] [/input-8, 419] [/input-8, 1692] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1698] [/input-8, 723] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024671316146850586
10 lb beta sum: 0.19352145493030548, worst -0.024250030517578125
Time: prepare 0.0209    bound 0.2051    transfer 0.0065    finalize 0.0069    func 0.2468    
Accumulated time: func 2.9124    prepare 0.1184    bound 2.6995    transfer 0.0362    finalize 0.0413    
all_split False
======================Cut inference begins======================
max lb tensor(0.37782937) min lb tensor(-0.02423954)
Number of Verified Splits: 103 of 924
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 10
#cuts 4-6: 6
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.051740407943725586 
BICCOS Cumulative time: 1.0047852993011475
Preprocessing time: 0.033807992935180664 Inference time: 0.013433456420898438 Add cuts time: 0.0024564266204833984 Cut analysis time: 0.002042531967163086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02424 (16), -0.02366 (16), -0.02331 (16), -0.02297 (16), -0.02279 (16), -0.02243 (16), -0.02237 (16), -0.02234 (16), -0.02231 (16), -0.02204 (16), -0.02180 (16), -0.02179 (16), -0.02158 (16), -0.02158 (16), -0.02127 (16), -0.02113 (16), -0.02111 (16), -0.02110 (16), -0.02108 (16), -0.02107 (16), 
Length of domains: 821
Time: pickout 0.0741    decision 0.0449    set_bounds 0.0475    solve 0.2473    add 0.1539    
Accumulated time: pickout 0.1942    decision 0.8431    set_bounds 0.2491    solve 2.6645    add 2.0081    
Current (lb-rhs): -0.024239540100097656
2209 domains visited
Cumulative time: 7.529709339141846

BaB round 8
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 723] [/input-8, 419] [/input-8, 723] [/input-8, 419] [/input-8, 419] [/input-8, 419] [/input-8, 1673] [/input-8, 723] [/input-8, 1692] [/input-8, 419] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022931814193725586
10 lb beta sum: 0.2821463942527771, worst -0.022520780563354492
Time: prepare 0.0371    bound 0.2087    transfer 0.0099    finalize 0.0100    func 0.2780    
Accumulated time: func 3.1904    prepare 0.1558    bound 2.9081    transfer 0.0461    finalize 0.0513    
all_split False
======================Cut inference begins======================
max lb tensor(0.39061457) min lb tensor(-0.02250904)
Number of Verified Splits: 659 of 1642
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 20
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.16140174865722656 
BICCOS Cumulative time: 1.166187047958374
Preprocessing time: 0.060739755630493164 Inference time: 0.09002423286437988 Add cuts time: 0.008689641952514648 Cut analysis time: 0.0019481182098388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (17), -0.02180 (17), -0.02164 (17), -0.02161 (17), -0.02130 (17), -0.02110 (17), -0.02096 (17), -0.02095 (17), -0.02089 (17), -0.02064 (17), -0.02064 (17), -0.02058 (17), -0.02057 (17), -0.02034 (17), -0.02028 (17), -0.02019 (17), -0.02002 (17), -0.02001 (17), -0.01998 (17), -0.01989 (17), 
Length of domains: 983
Time: pickout 0.0816    decision 0.0650    set_bounds 0.3110    solve 0.2786    add 0.1464    
Accumulated time: pickout 0.2758    decision 0.9080    set_bounds 0.5600    solve 2.9431    add 2.1545    
Current (lb-rhs): -0.02250903844833374
3192 domains visited
Cumulative time: 8.594201564788818

BaB round 9
batch: 983
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 419] [/input-8, 1698] [/input-8, 723] [/input-8, 723] [/input-8, 723] [/input-8, 1692] [/input-8, 419] [/input-8, 1692] [/input-8, 1673] [/input-8, 1673] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022055447101593018
10 lb beta sum: 1.2708114385604858, worst -0.019915923476219177
Time: prepare 0.0435    bound 0.2159    transfer 0.0036    finalize 0.0122    func 0.2907    
Accumulated time: func 3.4811    prepare 0.1996    bound 3.1240    transfer 0.0498    finalize 0.0635    
all_split False
======================Cut inference begins======================
max lb tensor(0.98136026) min lb tensor(-0.01990634)
Number of Verified Splits: 1710 of 1966
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.3408238887786865 
BICCOS Cumulative time: 1.5070109367370605
Preprocessing time: 0.0730290412902832 Inference time: 0.24578619003295898 Add cuts time: 0.020343542098999023 Cut analysis time: 0.0016651153564453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01991 (18), -0.01909 (18), -0.01907 (18), -0.01849 (18), -0.01795 (18), -0.01765 (18), -0.01732 (18), -0.01717 (18), -0.01706 (18), -0.01692 (18), -0.01681 (18), -0.01677 (18), -0.01670 (18), -0.01662 (18), -0.01658 (18), -0.01654 (18), -0.01644 (18), -0.01630 (18), -0.01622 (18), -0.01621 (18), 
Length of domains: 256
Time: pickout 0.1129    decision 0.0754    set_bounds 0.0999    solve 0.2914    add 0.0940    
Accumulated time: pickout 0.3887    decision 0.9834    set_bounds 0.6599    solve 3.2345    add 2.2484    
Current (lb-rhs): -0.019906342029571533
3448 domains visited
Cumulative time: 9.640289783477783

BaB round 10
batch: 256
splitting decisions: 
split level 0: [/input-8, 212] [/input-8, 1673] [/input-8, 212] [/input-8, 212] [/input-8, 419] [/input-8, 425] [/input-8, 419] [/input-8, 425] [/input-8, 212] [/input-8, 1692] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021107614040374756

all verified at 2th iter
Time: prepare 0.0114    bound 0.0330    transfer 0.0022    finalize 0.0046    func 0.0545    
Accumulated time: func 3.5356    prepare 0.2112    bound 3.1570    transfer 0.0519    finalize 0.0681    
all_split False
======================Cut inference begins======================
max lb tensor(0.09441739) min lb tensor(0.05796130)
Number of Verified Splits: 512 of 512
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0027
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.020635366439819336 
BICCOS Cumulative time: 1.5276463031768799
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0218    decision 0.0294    set_bounds 0.0255    solve 0.0547    add 0.0001    
Accumulated time: pickout 0.4104    decision 1.0127    set_bounds 0.6854    solve 3.2892    add 2.2486    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3448 domains visited
Cumulative time: 9.801734447479248

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=3_26949535.log

Properties batch 6, size 1
Remaining timeout: 188.07315802574158
Verifying property 6 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26672792]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26672792]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
Cut time: 0.0013134479522705078
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0660    transfer 0.0001    finalize 0.0002    func 0.0667    
Accumulated time: func 0.0667    prepare 0.0002    bound 0.0660    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 34] 
split level 4: [/input-12, 83] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 97] 
split level 7: [/input-12, 31] 
split level 8: [/input-12, 7] 
split level 9: [/input-8, 1683] 
split level 10: [/input-12, 2] 
split level 11: [/input-12, 72] 
split level 12: [/input-12, 24] 
split level 13: [/input-12, 92] 
split level 14: [/input-8, 219] 
split level 15: [/input-8, 1249] 
split level 16: [/input-12, 71] 
split level 17: [/input-8, 164] 
split level 18: [/input-8, 227] 
split level 19: [/input-8, 218] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 212] 
split level 22: [/input-8, 211] 
split level 23: [/input-8, 349] 
split level 24: [/input-8, 1378] 
split level 25: [/input-8, 1576] 
split level 26: [/input-8, 41] 
split level 27: [/input-8, 172] 
split level 28: [/input-8, 48] 
split level 29: [/input-8, 204] 
split level 30: [/input-8, 1692] 
split level 31: [/input-8, 1666] 
split level 32: [/input-8, 1579] 
split level 33: [/input, 3099] 
split level 34: [/input-8, 246] 
split level 35: [/input-8, 1370] 
split level 36: [/input-8, 201] 
split level 37: [/input-8, 180] 
split level 38: [/input-8, 205] 
split level 39: [/input-8, 343] 
split level 40: [/input-8, 342] 
split level 41: [/input-8, 1250] 
split level 42: [/input-8, 1673] 
split level 43: [/input-8, 194] 
split level 44: [/input-8, 417] 
split level 45: [/input-8, 1369] 
split level 46: [/input-8, 238] 
split level 47: [/input-8, 2038] 
split level 48: [/input-8, 222] 
split level 49: [/input-8, 171] 
split level 50: [/input-8, 188] 
split level 51: [/input, 1942] 
split level 52: [/input, 2636] 
split level 53: [/input-8, 132] 
split level 54: [/input, 2871] 
split level 55: [/input-8, 395] 
split level 56: [/input-8, 1665] 
split level 57: [/input-8, 254] 
split level 58: [/input-12, 53] 
split level 59: [/input-8, 1363] 
split level 60: [/input-8, 1946] 
split level 61: [/input-8, 51] 
split level 62: [/input-8, 416] 
split level 63: [/input-8, 57] 
split level 64: [/input, 2985] 
split level 65: [/input, 1374] 
split level 66: [/input-8, 1323] 
split level 67: [/input-8, 723] 
split level 68: [/input-8, 206] 
split level 69: [/input-8, 2034] 
split level 70: [/input-8, 207] 
split level 71: [/input-8, 255] 
split level 72: [/input-8, 1387] 
split level 73: [/input, 2670] 
split level 74: [/input-8, 223] 
split level 75: [/input, 2986] 
split level 76: [/input, 3149] 
split level 77: [/input, 829] 
split level 78: [/input-8, 39] 
split level 79: [/input, 130] 
split level 80: [/input, 3267] 
split level 81: [/input-8, 214] 
split level 82: [/input-8, 200] 
split level 83: [/input, 1926] 
split level 84: [/input, 954] 
split level 85: [/input-8, 253] 
split level 86: [/input-8, 1362] 
split level 87: [/input, 2739] 
split level 88: [/input, 1410] 
split level 89: [/input-8, 196] 
split level 90: [/input, 2653] 
split level 91: [/input-8, 2014] 
split level 92: [/input, 947] 
split level 93: [/input-8, 195] 
split level 94: [/input-8, 209] 
split level 95: [/input, 987] 
split level 96: [/input-8, 216] 
split level 97: [/input, 1910] 
split level 98: [/input, 812] 
split level 99: [/input-8, 245] 
split level 100: [/input-8, 198] 
split level 101: [/input-8, 1273] 
split level 102: [/input-8, 1736] 
split level 103: [/input, 1864] 
split level 104: [/input, 619] 
split level 105: [/input, 1064] 
split level 106: [/input, 2906] 
split level 107: [/input-8, 1996] 
split level 108: [/input, 1879] 
split level 109: [/input, 2638] 
split level 110: [/input, 179] 
split level 111: [/input, 1878] 
split level 112: [/input-8, 186] 
split level 113: [/input, 1438] 
split level 114: [/input-8, 1635] 
split level 115: [/input, 2587] 
split level 116: [/input, 177] 
split level 117: [/input, 786] 
split level 118: [/input, 1845] 
split level 119: [/input-8, 199] 
split level 120: [/input, 2622] 
split level 121: [/input, 1894] 
split level 122: [/input-8, 1383] 
split level 123: [/input, 1150] 
split level 124: [/input, 138] 
split level 125: [/input, 2750] 
split level 126: [/input, 813] 
split level 127: [/input-8, 129] 
split level 128: [/input, 1400] 
split level 129: [/input, 305] 
split level 130: [/input, 180] 
split level 131: [/input, 1416] 
split level 132: [/input-8, 419] 
split level 133: [/input, 973] 
split level 134: [/input, 193] 
split level 135: [/input, 3019] 
split level 136: [/input, 3230] 
split level 137: [/input-8, 1157] 
split level 138: [/input-8, 187] 
split level 139: [/input, 1898] 
split level 140: [/input, 3265] 
split level 141: [/input, 1925] 
split level 142: [/input-8, 229] 
split level 143: [/input, 2755] 
split level 144: [/input, 1080] 
split level 145: [/input, 953] 
split level 146: [/input, 651] 
split level 147: [/input, 885] 
split level 148: [/input, 2651] 
split level 149: [/input, 2685] 
split level 150: [/input-8, 61] 
split level 151: [/input, 2698] 
split level 152: [/input, 204] 
split level 153: [/input, 49] 
split level 154: [/input, 225] 
split level 155: [/input, 74] 
split level 156: [/input, 3220] 
split level 157: [/input-8, 161] 
split level 158: [/input, 790] 
split level 159: [/input, 2810] 
split level 160: [/input, 1618] 
split level 161: [/input, 2397] 
split level 162: [/input, 937] 
split level 163: [/input, 667] 
split level 164: [/input, 635] 
split level 165: [/input-8, 1343] 
split level 166: [/input, 2753] 
split level 167: [/input, 2754] 
split level 168: [/input, 2953] 
split level 169: [/input, 194] 
split level 170: [/input, 1899] 
split level 171: [/input-8, 1987] 
split level 172: [/input, 2069] 
split level 173: [/input, 2732] 
split level 174: [/input-8, 1159] 
split level 175: [/input, 1470] 
split level 176: [/input, 71] 
split level 177: [/input, 84] 
split level 178: [/input, 1359] 
split level 179: [/input, 1134] 
split level 180: [/input, 1166] 
split level 181: [/input, 1882] 
split level 182: [/input, 1862] 
split level 183: [/input, 2156] 
split level 184: [/input-8, 185] 
split level 185: [/input, 203] 
split level 186: [/input, 2747] 
split level 187: [/input, 1472] 
split level 188: [/input, 2752] 
split level 189: [/input, 37] 
split level 190: [/input, 3978] 
split level 191: [/input, 220] 
split level 192: [/input, 238] 
split level 193: [/input, 2120] 
split level 194: [/input, 1490] 
split level 195: [/input, 2980] 
split level 196: [/input, 683] 
split level 197: [/input, 2794] 
split level 198: [/input, 142] 
split level 199: [/input, 3018] 
Time: prepare 0.0066    bound 0.1199    transfer 0.0033    finalize 0.0041    func 0.1339    
Accumulated time: func 0.2006    prepare 0.0179    bound 0.1859    transfer 0.0034    finalize 0.0043    
all_split False
======================Cut inference begins======================
max lb tensor(0.15740353) min lb tensor(-0.26662529)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01506948471069336 
BICCOS Cumulative time: 0.01506948471069336
Preprocessing time: 0.01198124885559082 Inference time: 0.00019478797912597656 Add cuts time: 0.00011992454528808594 Cut analysis time: 0.0027735233306884766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25663 (1), -0.25648 (1), -0.25646 (1), -0.25497 (1), -0.25494 (1), -0.25414 (1), -0.25394 (1), -0.25367 (1), -0.25363 (1), -0.25359 (1), -0.25283 (1), -0.25204 (1), -0.24867 (1), -0.24860 (1), -0.24857 (1), -0.24803 (1), -0.24707 (1), -0.24699 (1), -0.24614 (1), -0.24515 (1), 
Length of domains: 50
Time: pickout 0.0006    decision 0.5703    set_bounds 0.0112    solve 0.1340    add 0.2398    
Accumulated time: pickout 0.0006    decision 0.5703    set_bounds 0.0112    solve 0.1340    add 0.2398    
Current (lb-rhs): -0.2566303014755249
50 domains visited
Cumulative time: 1.0658226013183594

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] 
split level 1: [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 85] [/input-12, 4] [/input-12, 85] [/input-12, 4] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 17] [/input-12, 34] [/input-12, 17] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 34] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22131288051605225
10 lb beta sum: 0.4202897548675537, worst -0.2186240255832672
Time: prepare 0.0074    bound 0.1673    transfer 0.0080    finalize 0.0050    func 0.1905    
Accumulated time: func 0.3910    prepare 0.0257    bound 0.3532    transfer 0.0114    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.14893419) min lb tensor(-0.21850982)
Number of Verified Splits: 87 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.024453163146972656 
BICCOS Cumulative time: 0.039522647857666016
Preprocessing time: 0.015542984008789062 Inference time: 0.004355430603027344 Add cuts time: 0.002705097198486328 Cut analysis time: 0.0018496513366699219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05051 (2), -0.05034 (2), -0.04965 (2), -0.04954 (2), -0.04838 (2), -0.04781 (2), -0.04781 (2), -0.04747 (2), -0.04717 (2), -0.04715 (2), -0.04368 (2), -0.04332 (2), -0.04304 (2), -0.04192 (2), -0.04176 (2), -0.04032 (2), -0.04032 (2), -0.04008 (2), -0.03955 (2), -0.03751 (2), 
Length of domains: 50
Time: pickout 0.0133    decision 0.0250    set_bounds 0.0191    solve 0.1906    add 0.2415    
Accumulated time: pickout 0.0139    decision 0.5953    set_bounds 0.0303    solve 0.3247    add 0.4812    
Current (lb-rhs): -0.05051290988922119
100 domains visited
Cumulative time: 1.5878281593322754

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 83] [/input-12, 83] [/input-12, 34] [/input-12, 83] [/input-12, 83] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 97] [/input-12, 97] [/input-12, 34] [/input-12, 34] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05771780014038086

all verified at 1th iter
Time: prepare 0.0076    bound 0.0164    transfer 0.0012    finalize 0.0030    func 0.0318    
Accumulated time: func 0.4229    prepare 0.0336    bound 0.3696    transfer 0.0125    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.18795890) min lb tensor(0.00105762)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04526376724243164 
BICCOS Cumulative time: 0.08478641510009766
Preprocessing time: 0.013683557510375977 Inference time: 0.020230531692504883 Add cuts time: 0.009690999984741211 Cut analysis time: 0.0016586780548095703
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0115    decision 0.0224    set_bounds 0.0199    solve 0.0321    add 0.0218    
Accumulated time: pickout 0.0254    decision 0.6178    set_bounds 0.0502    solve 0.3567    add 0.5030    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34,  4]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.09340870e-10, 9.56901163e-02, 1.23926923e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34,  4]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.09340870e-10, 9.56901163e-02, 7.15945214e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.09340870e-10, 1.61904380e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17,  4]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.03118958e-10, 6.88587874e-02, 1.30883381e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17,  4]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.03118958e-10, 6.88587874e-02, 9.54342484e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([85, 17]), tensor([1., 1.]), tensor([0, 0]), tensor([1.03118958e-10, 1.27024457e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03865242004394531

all verified at 1th iter
Time: prepare 0.0004    bound 0.0135    transfer 0.0002    finalize 0.0003    func 0.0146    
Accumulated time: func 0.4374    prepare 0.0341    bound 0.3831    transfer 0.0127    finalize 0.0125    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 3
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=4_26949535.log

Properties batch 7, size 1
Remaining timeout: 185.98778629302979
Verifying property 7 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55174983]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55174983]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
Cut time: 0.0010323524475097656
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0959    transfer 0.0001    finalize 0.0001    func 0.0964    
Accumulated time: func 0.0964    prepare 0.0002    bound 0.0959    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 85] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 83] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 7] 
split level 9: [/input-12, 4] 
split level 10: [/input-12, 92] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1651] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1963] 
split level 15: [/input-8, 1643] 
split level 16: [/input-8, 1627] 
split level 17: [/input-8, 1652] 
split level 18: [/input-8, 1636] 
split level 19: [/input-8, 227] 
split level 20: [/input-8, 219] 
split level 21: [/input-8, 416] 
split level 22: [/input-8, 1691] 
split level 23: [/input-8, 1628] 
split level 24: [/input-12, 71] 
split level 25: [/input-8, 1692] 
split level 26: [/input-8, 844] 
split level 27: [/input-8, 212] 
split level 28: [/input-8, 1644] 
split level 29: [/input-8, 1637] 
split level 30: [/input-8, 218] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 394] 
split level 33: [/input-8, 1946] 
split level 34: [/input-8, 1645] 
split level 35: [/input-8, 419] 
split level 36: [/input-8, 211] 
split level 37: [/input-8, 417] 
split level 38: [/input-8, 1650] 
split level 39: [/input-8, 48] 
split level 40: [/input-8, 828] 
split level 41: [/input-8, 1658] 
split level 42: [/input-8, 1716] 
split level 43: [/input-8, 1661] 
split level 44: [/input-8, 1619] 
split level 45: [/input-8, 1708] 
split level 46: [/input-8, 469] 
split level 47: [/input-8, 57] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 1387] 
split level 50: [/input-8, 1953] 
split level 51: [/input-8, 1653] 
split level 52: [/input-12, 6] 
split level 53: [/input-8, 201] 
split level 54: [/input-8, 205] 
split level 55: [/input-8, 395] 
split level 56: [/input-8, 1669] 
split level 57: [/input-8, 921] 
split level 58: [/input-8, 229] 
split level 59: [/input-8, 1970] 
split level 60: [/input-8, 425] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input-8, 222] 
split level 64: [/input-8, 246] 
split level 65: [/input-8, 186] 
split level 66: [/input-8, 204] 
split level 67: [/input-8, 194] 
split level 68: [/input-8, 253] 
split level 69: [/input-8, 499] 
split level 70: [/input, 2985] 
split level 71: [/input, 89] 
split level 72: [/input-8, 1323] 
split level 73: [/input-8, 1576] 
split level 74: [/input, 2986] 
split level 75: [/input-8, 164] 
split level 76: [/input-8, 214] 
split level 77: [/input-8, 51] 
split level 78: [/input, 2906] 
split level 79: [/input-8, 1673] 
split level 80: [/input-8, 238] 
split level 81: [/input-8, 1662] 
split level 82: [/input-8, 254] 
split level 83: [/input-8, 200] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 349] 
split level 86: [/input-8, 1521] 
split level 87: [/input-12, 56] 
split level 88: [/input-8, 407] 
split level 89: [/input-8, 393] 
split level 90: [/input-8, 424] 
split level 91: [/input-8, 1378] 
split level 92: [/input, 75] 
split level 93: [/input-8, 187] 
split level 94: [/input, 2378] 
split level 95: [/input-8, 41] 
split level 96: [/input-8, 255] 
split level 97: [/input, 1320] 
split level 98: [/input, 2871] 
split level 99: [/input-8, 342] 
split level 100: [/input-8, 129] 
split level 101: [/input-8, 723] 
split level 102: [/input-8, 161] 
split level 103: [/input-8, 1979] 
split level 104: [/input, 138] 
split level 105: [/input, 391] 
split level 106: [/input, 130] 
split level 107: [/input, 2380] 
split level 108: [/input-8, 1370] 
split level 109: [/input-8, 1759] 
split level 110: [/input-8, 714] 
split level 111: [/input-8, 1250] 
split level 112: [/input-8, 223] 
split level 113: [/input-8, 188] 
split level 114: [/input, 1845] 
split level 115: [/input, 3018] 
split level 116: [/input, 104] 
split level 117: [/input-8, 1579] 
split level 118: [/input, 1942] 
split level 119: [/input-8, 171] 
split level 120: [/input-8, 209] 
split level 121: [/input, 1410] 
split level 122: [/input-8, 1362] 
split level 123: [/input-8, 930] 
split level 124: [/input-8, 207] 
split level 125: [/input-8, 61] 
split level 126: [/input-8, 1566] 
split level 127: [/input, 140] 
split level 128: [/input, 41] 
split level 129: [/input-8, 1666] 
split level 130: [/input, 1669] 
split level 131: [/input, 2952] 
split level 132: [/input, 2477] 
split level 133: [/input-8, 1322] 
split level 134: [/input-8, 216] 
split level 135: [/input, 74] 
split level 136: [/input, 2203] 
split level 137: [/input-8, 1159] 
split level 138: [/input-8, 195] 
split level 139: [/input, 2953] 
split level 140: [/input, 2958] 
split level 141: [/input, 1864] 
split level 142: [/input-8, 730] 
split level 143: [/input-8, 1343] 
split level 144: [/input, 732] 
split level 145: [/input, 45] 
split level 146: [/input-8, 245] 
split level 147: [/input, 71] 
split level 148: [/input-8, 196] 
split level 149: [/input, 3541] 
split level 150: [/input, 1305] 
split level 151: [/input, 1879] 
split level 152: [/input, 470] 
split level 153: [/input, 177] 
split level 154: [/input, 2689] 
split level 155: [/input-8, 1665] 
split level 156: [/input-8, 1717] 
split level 157: [/input-8, 198] 
split level 158: [/input, 2156] 
split level 159: [/input, 1483] 
split level 160: [/input, 1827] 
split level 161: [/input, 1953] 
split level 162: [/input, 1022] 
split level 163: [/input, 2397] 
split level 164: [/input, 1878] 
split level 165: [/input, 1910] 
split level 166: [/input, 1925] 
split level 167: [/input, 1338] 
split level 168: [/input, 3527] 
split level 169: [/input, 37] 
split level 170: [/input, 2823] 
split level 171: [/input-8, 199] 
split level 172: [/input-8, 1944] 
split level 173: [/input, 188] 
split level 174: [/input, 1898] 
split level 175: [/input, 1416] 
split level 176: [/input, 360] 
split level 177: [/input, 1064] 
split level 178: [/input, 1146] 
split level 179: [/input, 204] 
split level 180: [/input, 136] 
split level 181: [/input, 2493] 
split level 182: [/input, 1894] 
split level 183: [/input, 2758] 
split level 184: [/input, 203] 
split level 185: [/input, 1882] 
split level 186: [/input, 3019] 
split level 187: [/input, 2824] 
split level 188: [/input, 1922] 
split level 189: [/input, 2674] 
split level 190: [/input, 1952] 
split level 191: [/input, 748] 
split level 192: [/input, 1032] 
split level 193: [/input, 1905] 
split level 194: [/input, 1400] 
split level 195: [/input, 1080] 
split level 196: [/input, 216] 
split level 197: [/input, 2215] 
split level 198: [/input, 1130] 
split level 199: [/input, 1846] 
Time: prepare 0.0066    bound 0.1150    transfer 0.0027    finalize 0.0041    func 0.1286    
Accumulated time: func 0.2250    prepare 0.0176    bound 0.2110    transfer 0.0028    finalize 0.0042    
all_split False
======================Cut inference begins======================
max lb tensor(0.19855744) min lb tensor(-0.55159760)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0025
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.017514705657958984 
BICCOS Cumulative time: 0.017514705657958984
Preprocessing time: 0.013804912567138672 Inference time: 0.00025463104248046875 Add cuts time: 0.00018310546875 Cut analysis time: 0.0032720565795898438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53793 (1), -0.53784 (1), -0.53751 (1), -0.53739 (1), -0.53731 (1), -0.53662 (1), -0.53626 (1), -0.53596 (1), -0.53518 (1), -0.53447 (1), -0.53445 (1), -0.53430 (1), -0.53380 (1), -0.53343 (1), -0.53274 (1), -0.53200 (1), -0.53140 (1), -0.53086 (1), -0.53082 (1), -0.53068 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5668    set_bounds 0.0119    solve 0.1287    add 0.2261    
Accumulated time: pickout 0.0005    decision 0.5668    set_bounds 0.0119    solve 0.1287    add 0.2261    
Current (lb-rhs): -0.5379332304000854
50 domains visited
Cumulative time: 1.0750408172607422

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 72] [/input-12, 53] [/input-12, 53] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5343043804168701
10 lb beta sum: 0.171164408326149, worst -0.5342402458190918
Time: prepare 0.0072    bound 0.1285    transfer 0.0011    finalize 0.0028    func 0.1422    
Accumulated time: func 0.3672    prepare 0.0251    bound 0.3395    transfer 0.0039    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.35147232) min lb tensor(-0.53420484)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.018384695053100586 
BICCOS Cumulative time: 0.03589940071105957
Preprocessing time: 0.013583183288574219 Inference time: 0.002035379409790039 Add cuts time: 0.0013549327850341797 Cut analysis time: 0.0014111995697021484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26691 (2), -0.26648 (2), -0.26535 (2), -0.26480 (2), -0.26434 (2), -0.26118 (2), -0.25831 (2), -0.25826 (2), -0.25797 (2), -0.25592 (2), -0.25321 (2), -0.25115 (2), -0.25047 (2), -0.24998 (2), -0.24935 (2), -0.24767 (2), -0.24742 (2), -0.24734 (2), -0.24730 (2), -0.24688 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0219    set_bounds 0.0149    solve 0.1423    add 0.2293    
Accumulated time: pickout 0.0087    decision 0.5887    set_bounds 0.0268    solve 0.2710    add 0.4554    
Current (lb-rhs): -0.2669091820716858
100 domains visited
Cumulative time: 1.5178828239440918

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 53] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 53] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 72] [/input-12, 72] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23381727933883667, worst -0.2669091820716858
10 lb beta sum: 0.23381727933883667, worst -0.2670932412147522
Time: prepare 0.0164    bound 0.1319    transfer 0.0010    finalize 0.0032    func 0.1553    
Accumulated time: func 0.5225    prepare 0.0418    bound 0.4714    transfer 0.0049    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.31539628) min lb tensor(-0.26520985)
Number of Verified Splits: 65 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.01960611343383789 
BICCOS Cumulative time: 0.05550551414489746
Preprocessing time: 0.013163089752197266 Inference time: 0.003238201141357422 Add cuts time: 0.0017371177673339844 Cut analysis time: 0.0014677047729492188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05860 (3), -0.05851 (3), -0.05511 (3), -0.05446 (3), -0.05428 (3), -0.05278 (3), -0.04822 (3), -0.04545 (3), -0.04481 (3), -0.04472 (3), -0.04460 (3), -0.04453 (3), -0.04439 (3), -0.04354 (3), -0.04347 (3), -0.04311 (3), -0.04272 (3), -0.04108 (3), -0.04094 (3), -0.04052 (3), 
Length of domains: 50
Time: pickout 0.0085    decision 0.0207    set_bounds 0.0181    solve 0.1554    add 0.2308    
Accumulated time: pickout 0.0172    decision 0.6094    set_bounds 0.0448    solve 0.4264    add 0.6862    
Current (lb-rhs): -0.0585978627204895
150 domains visited
Cumulative time: 1.9781601428985596

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 53] [/input-12, 85] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 72] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 7] [/input-12, 83] [/input-12, 7] [/input-12, 83] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.058597564697265625
10 lb beta sum: 0.08440739661455154, worst -0.30580276250839233
Time: prepare 0.0062    bound 0.1346    transfer 0.0009    finalize 0.0021    func 0.1466    
Accumulated time: func 0.6691    prepare 0.0484    bound 0.6060    transfer 0.0059    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.40299773) min lb tensor(-0.04527903)
Number of Verified Splits: 368 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.042603492736816406 
BICCOS Cumulative time: 0.09810900688171387
Preprocessing time: 0.01493072509765625 Inference time: 0.021537065505981445 Add cuts time: 0.004363298416137695 Cut analysis time: 0.0017724037170410156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0209    set_bounds 0.0184    solve 0.1467    add 0.0268    
Accumulated time: pickout 0.0249    decision 0.6303    set_bounds 0.0632    solve 0.5732    add 0.7130    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.25929374e-04, 1.36681423e-01, 1.09197959e-01, 4.07759428e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00032593, 0.13668142, 0.10919796, 0.01265995]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.25929374e-04, 1.36681423e-01, 1.41220972e-01, 4.13896561e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 85, 31]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00032593, 0.13668142, 0.14122097, 0.05561203]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.00032593, 0.09187481, 0.05179648]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.25929374e-04, 9.18748081e-02, 1.55068442e-01, 3.99766088e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53, 34, 31]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00032593, 0.09187481, 0.15506844, 0.07792199]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.25929374e-04, 6.91658378e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([0.00032593, 0.00425594]), tensor([0, 1]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44916832447052
10 lb beta sum: 0.1761602908372879, worst -0.4485129117965698
Time: prepare 0.0006    bound 0.1434    transfer 0.0004    finalize 0.0005    func 0.1451    
Accumulated time: func 0.8141    prepare 0.0490    bound 0.7495    transfer 0.0063    finalize 0.0127    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 53] 
split level 1: [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 83] [/input-12, 34] 
split level 3: [/input-12, 17] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 83] 
split level 5: [/input-12, 4] [/input-12, 7] 
split level 6: [/input-12, 92] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20524288713932037, worst -0.14021927118301392
10 lb beta sum: 0.20555394887924194, worst -0.1107824444770813
Time: prepare 0.0112    bound 0.1340    transfer 0.0043    finalize 0.0021    func 0.1535    
Accumulated time: func 0.9676    prepare 0.0606    bound 0.8835    transfer 0.0106    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.64063960) min lb tensor(-0.11029446)
Number of Verified Splits: 249 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.21021480858325958, worst -0.31287217140197754
10 lb beta sum: 0.33062902092933655, worst -0.38994067907333374
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 7
#cuts 4-6: 22
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 0.5080122947692871 
BICCOS Cumulative time: 0.606121301651001
Preprocessing time: 0.00810551643371582 Inference time: 0.48746466636657715 Add cuts time: 0.008752107620239258 Cut analysis time: 0.003690004348754883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11029 (7), -0.09267 (7), -0.05665 (7), -0.05055 (7), -0.02000 (7), -0.01265 (7), -0.01231 (7), 
Length of domains: 7
Time: pickout 0.0011    decision 0.0217    set_bounds 0.0227    solve 0.1536    add 0.0388    
Accumulated time: pickout 0.0260    decision 0.6520    set_bounds 0.0860    solve 0.7268    add 0.7518    
Current (lb-rhs): -0.11029446125030518
157 domains visited
Cumulative time: 3.2373554706573486

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 1: [/input-12, 92] [/input-8, 1683] [/input-12, 92] [/input-8, 1683] [/input-8, 1963] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 71] [/input-8, 1636] [/input-8, 1963] [/input-12, 92] [/input-12, 92] [/input-8, 1636] [/input-8, 1691] 
split level 3: [/input-8, 1627] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1691] [/input-8, 1627] [/input-8, 1692] 
split level 4: [/input-8, 419] [/input-8, 1644] [/input-8, 1946] [/input-8, 1636] [/input-8, 1946] [/input-8, 1644] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06443655490875244
10 lb beta sum: 0.0, worst -0.06370890140533447
Time: prepare 0.0049    bound 0.1505    transfer 0.0017    finalize 0.0023    func 0.1610    
Accumulated time: func 1.1286    prepare 0.0659    bound 1.0340    transfer 0.0123    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.17694807) min lb tensor(-0.06337970)
Number of Verified Splits: 185 of 224
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03188967704772949 
BICCOS Cumulative time: 0.6380109786987305
Preprocessing time: 0.00778651237487793 Inference time: 0.019518613815307617 Add cuts time: 0.0025222301483154297 Cut analysis time: 0.0020623207092285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06338 (12), -0.06072 (12), -0.05041 (12), -0.04874 (12), -0.04795 (12), -0.04782 (12), -0.04763 (12), -0.04704 (12), -0.04337 (12), -0.03798 (12), -0.03760 (12), -0.03621 (12), -0.03604 (12), -0.03556 (12), -0.03482 (12), -0.03452 (12), -0.03417 (12), -0.03015 (12), -0.03003 (12), -0.02945 (12), 
Length of domains: 39
Time: pickout 0.0020    decision 0.0217    set_bounds 0.0203    solve 0.1611    add 0.0665    
Accumulated time: pickout 0.0280    decision 0.6737    set_bounds 0.1063    solve 0.8879    add 0.8183    
Current (lb-rhs): -0.06337970495223999
196 domains visited
Cumulative time: 3.5499229431152344

BaB round 3
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1683] [/input-8, 1692] [/input-8, 1692] [/input-8, 1683] [/input-8, 1683] [/input-8, 1683] [/input-8, 1692] 
split level 1: [/input-8, 1627] [/input-12, 71] [/input-12, 92] [/input-12, 71] [/input-12, 71] [/input-8, 1627] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1627] 
split level 2: [/input-12, 71] [/input-8, 930] [/input-8, 1963] [/input-8, 1636] [/input-8, 930] [/input-12, 71] [/input-8, 930] [/input-8, 1636] [/input-8, 930] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04305654764175415
10 lb beta sum: 0.0, worst -0.042642831802368164
Time: prepare 0.0073    bound 0.1466    transfer 0.0024    finalize 0.0027    func 0.1611    
Accumulated time: func 1.2897    prepare 0.0735    bound 1.1806    transfer 0.0147    finalize 0.0198    
all_split False
======================Cut inference begins======================
max lb tensor(0.06310189) min lb tensor(-0.04242593)
Number of Verified Splits: 219 of 312
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts: total 548 constraints, 27828 nonzero elements
cuts preparing time: 0.0162
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 568.
#cuts 1-3: 144
#cuts 4-6: 5
#cuts 7-9: 9
#cuts 10-12: 3
#cuts 13-15: 8
#cuts 16-18: 25
#cuts 19-21: 22
#cuts >= 20: 352
BICCOS time: 0.2847447395324707 
BICCOS Cumulative time: 0.9227557182312012
Preprocessing time: 0.010434150695800781 Inference time: 0.027701139450073242 Add cuts time: 0.001917123794555664 Cut analysis time: 0.24469232559204102
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04243 (15), -0.03924 (15), -0.03607 (15), -0.03477 (15), -0.03304 (15), -0.03160 (15), -0.02957 (15), -0.02863 (15), -0.02716 (15), -0.02666 (15), -0.02664 (15), -0.02623 (15), -0.02600 (15), -0.02347 (15), -0.02299 (15), -0.02242 (15), -0.02235 (15), -0.02171 (15), -0.02086 (15), -0.02065 (15), 
Length of domains: 93
Time: pickout 0.0063    decision 0.0192    set_bounds 0.0363    solve 0.1612    add 0.0808    
Accumulated time: pickout 0.0344    decision 0.6929    set_bounds 0.1426    solve 1.0491    add 0.8991    
Current (lb-rhs): -0.04242593050003052
289 domains visited
Cumulative time: 4.150925874710083

BaB round 4
batch: 93
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1627] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] 
split level 1: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 417] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031450748443603516

all verified at 3th iter
Time: prepare 0.0081    bound 0.0506    transfer 0.0032    finalize 0.0027    func 0.0670    
Accumulated time: func 1.3567    prepare 0.0818    bound 1.2312    transfer 0.0179    finalize 0.0224    
all_split False
======================Cut inference begins======================
max lb tensor(0.31717467) min lb tensor(0.00014007)
Number of Verified Splits: 372 of 372
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0017
Total number of valid cuts: 568.
#cuts 1-3: 144
#cuts 4-6: 5
#cuts 7-9: 9
#cuts 10-12: 3
#cuts 13-15: 8
#cuts 16-18: 25
#cuts 19-21: 22
#cuts >= 20: 352
BICCOS time: 0.01443171501159668 
BICCOS Cumulative time: 0.9371874332427979
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0154    decision 0.0263    set_bounds 0.0217    solve 0.0672    add 0.0001    
Accumulated time: pickout 0.0498    decision 0.7192    set_bounds 0.1642    solve 1.1163    add 0.8992    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
289 domains visited
Cumulative time: 4.299088001251221

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=2_26949535.log
found process to kill: terminal indx = 3
found process to kill: terminal indx = 4

Properties batch 8, size 1
Remaining timeout: 181.4117329120636
Verifying property 8 with 1 instances.
##### Instance 57 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.59470469]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.77992249, -23.03407669, -17.37753677, -16.74362373, -17.53236580,
        -16.54874611, -19.20664024, -17.36742783, -24.01373863, -21.60027885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.59470469]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 645
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 256
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 924
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
Cut time: 0.0012447834014892578
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0004    bound 0.0620    transfer 0.0002    finalize 0.0002    func 0.0627    
Accumulated time: func 0.0627    prepare 0.0004    bound 0.0620    transfer 0.0002    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 89] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 34] 
split level 5: [/input-12, 85] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 24] 
split level 9: [/input-12, 31] 
split level 10: [/input-8, 416] 
split level 11: [/input-8, 1683] 
split level 12: [/input-8, 1249] 
split level 13: [/input-8, 164] 
split level 14: [/input-8, 172] 
split level 15: [/input-8, 180] 
split level 16: [/input-8, 48] 
split level 17: [/input-8, 39] 
split level 18: [/input-8, 1576] 
split level 19: [/input-8, 1996] 
split level 20: [/input-8, 23] 
split level 21: [/input-8, 41] 
split level 22: [/input-8, 1579] 
split level 23: [/input-8, 188] 
split level 24: [/input-8, 844] 
split level 25: [/input-8, 51] 
split level 26: [/input-8, 349] 
split level 27: [/input-8, 227] 
split level 28: [/input-8, 417] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 361] 
split level 31: [/input-8, 1363] 
split level 32: [/input-8, 370] 
split level 33: [/input-8, 425] 
split level 34: [/input-8, 1691] 
split level 35: [/input-8, 1987] 
split level 36: [/input-8, 57] 
split level 37: [/input, 460] 
split level 38: [/input-8, 267] 
split level 39: [/input, 908] 
split level 40: [/input-8, 1692] 
split level 41: [/input-8, 1946] 
split level 42: [/input-8, 1369] 
split level 43: [/input-8, 1708] 
split level 44: [/input-8, 205] 
split level 45: [/input-8, 171] 
split level 46: [/input-8, 1566] 
split level 47: [/input-8, 201] 
split level 48: [/input, 2985] 
split level 49: [/input, 130] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 207] 
split level 52: [/input, 1942] 
split level 53: [/input, 2739] 
split level 54: [/input-8, 723] 
split level 55: [/input-8, 2014] 
split level 56: [/input, 2986] 
split level 57: [/input-8, 1367] 
split level 58: [/input-8, 1273] 
split level 59: [/input, 954] 
split level 60: [/input-8, 218] 
split level 61: [/input-8, 206] 
split level 62: [/input-8, 434] 
split level 63: [/input, 89] 
split level 64: [/input-8, 1378] 
split level 65: [/input, 3267] 
split level 66: [/input-8, 1370] 
split level 67: [/input-8, 1627] 
split level 68: [/input, 1374] 
split level 69: [/input-8, 253] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1666] 
split level 72: [/input, 2723] 
split level 73: [/input-8, 352] 
split level 74: [/input-8, 343] 
split level 75: [/input, 1410] 
split level 76: [/input-8, 1716] 
split level 77: [/input-8, 714] 
split level 78: [/input-8, 2038] 
split level 79: [/input, 885] 
split level 80: [/input-8, 185] 
split level 81: [/input-8, 268] 
split level 82: [/input-8, 194] 
split level 83: [/input-8, 369] 
split level 84: [/input, 2906] 
split level 85: [/input, 2689] 
split level 86: [/input-8, 254] 
split level 87: [/input-8, 342] 
split level 88: [/input, 126] 
split level 89: [/input, 987] 
split level 90: [/input-8, 161] 
split level 91: [/input, 179] 
split level 92: [/input-8, 204] 
split level 93: [/input-8, 214] 
split level 94: [/input-8, 1374] 
split level 95: [/input, 177] 
split level 96: [/input-8, 456] 
split level 97: [/input-8, 238] 
split level 98: [/input, 883] 
split level 99: [/input, 2871] 
split level 100: [/input, 428] 
split level 101: [/input, 973] 
split level 102: [/input-8, 129] 
split level 103: [/input, 165] 
split level 104: [/input, 947] 
split level 105: [/input, 3467] 
split level 106: [/input-8, 200] 
split level 107: [/input-8, 503] 
split level 108: [/input-8, 1387] 
split level 109: [/input-8, 255] 
split level 110: [/input-8, 223] 
split level 111: [/input-8, 61] 
split level 112: [/input, 41] 
split level 113: [/input-8, 407] 
split level 114: [/input, 2622] 
split level 115: [/input, 3099] 
split level 116: [/input, 2674] 
split level 117: [/input-8, 1159] 
split level 118: [/input, 786] 
split level 119: [/input-8, 198] 
split level 120: [/input, 22] 
split level 121: [/input, 180] 
split level 122: [/input, 1448] 
split level 123: [/input, 103] 
split level 124: [/input-8, 209] 
split level 125: [/input-8, 1619] 
split level 126: [/input, 3187] 
split level 127: [/input-8, 1368] 
split level 128: [/input, 45] 
split level 129: [/input-8, 419] 
split level 130: [/input, 71] 
split level 131: [/input, 104] 
split level 132: [/input, 2926] 
split level 133: [/input-8, 195] 
split level 134: [/input, 195] 
split level 135: [/input-8, 1362] 
split level 136: [/input, 193] 
split level 137: [/input, 1416] 
split level 138: [/input-8, 1635] 
split level 139: [/input, 37] 
split level 140: [/input-8, 186] 
split level 141: [/input-8, 845] 
split level 142: [/input, 2072] 
split level 143: [/input-8, 1250] 
split level 144: [/input-8, 187] 
split level 145: [/input, 1400] 
split level 146: [/input-8, 1736] 
split level 147: [/input-8, 216] 
split level 148: [/input, 3018] 
split level 149: [/input-8, 246] 
split level 150: [/input, 183] 
split level 151: [/input-8, 295] 
split level 152: [/input, 3230] 
split level 153: [/input-8, 1248] 
split level 154: [/input, 667] 
split level 155: [/input, 2587] 
split level 156: [/input, 2705] 
split level 157: [/input, 843] 
split level 158: [/input, 3019] 
split level 159: [/input, 144] 
split level 160: [/input-8, 1344] 
split level 161: [/input, 900] 
split level 162: [/input, 74] 
split level 163: [/input-8, 196] 
split level 164: [/input-8, 199] 
split level 165: [/input-8, 1759] 
split level 166: [/input, 199] 
split level 167: [/input, 1299] 
split level 168: [/input-8, 245] 
split level 169: [/input-8, 1323] 
split level 170: [/input, 194] 
split level 171: [/input, 2584] 
split level 172: [/input, 216] 
split level 173: [/input, 1287] 
split level 174: [/input, 953] 
split level 175: [/input, 2755] 
split level 176: [/input, 3220] 
split level 177: [/input, 635] 
split level 178: [/input-8, 1730] 
split level 179: [/input, 1064] 
split level 180: [/input, 142] 
split level 181: [/input, 683] 
split level 182: [/input, 2980] 
split level 183: [/input, 152] 
split level 184: [/input, 2380] 
split level 185: [/input, 203] 
split level 186: [/input, 651] 
split level 187: [/input, 619] 
split level 188: [/input, 3149] 
split level 189: [/input, 1305] 
split level 190: [/input, 3523] 
split level 191: [/input, 3265] 
split level 192: [/input, 204] 
split level 193: [/input, 169] 
split level 194: [/input, 1166] 
split level 195: [/input, 1182] 
split level 196: [/input, 2397] 
split level 197: [/input, 937] 
split level 198: [/input-8, 1383] 
split level 199: [/input, 1359] 
Time: prepare 0.0063    bound 0.1110    transfer 0.0026    finalize 0.0038    func 0.1239    
Accumulated time: func 0.1866    prepare 0.0175    bound 0.1730    transfer 0.0028    finalize 0.0040    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01201940) min lb tensor(-0.59463680)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.013113975524902344 
BICCOS Cumulative time: 0.013113975524902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.58241 (1), -0.58194 (1), -0.58127 (1), -0.58084 (1), -0.58078 (1), -0.58075 (1), -0.58023 (1), -0.57980 (1), -0.57952 (1), -0.57944 (1), -0.57903 (1), -0.57885 (1), -0.57820 (1), -0.57733 (1), -0.57701 (1), -0.57681 (1), -0.57650 (1), -0.57504 (1), -0.57374 (1), -0.57346 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5610    set_bounds 0.0103    solve 0.1240    add 0.2030    
Accumulated time: pickout 0.0005    decision 0.5610    set_bounds 0.0103    solve 0.1240    add 0.2030    
Current (lb-rhs): -0.5824055075645447
50 domains visited
Cumulative time: 1.0014252662658691

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 97] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 2] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 2] 
split level 2: [/input-12, 2] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 34] [/input-12, 2] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 34] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] [/input-12, 85] [/input-12, 85] 
Time: prepare 0.0072    bound 0.0933    transfer 0.0010    finalize 0.0027    func 0.1043    
Accumulated time: func 0.2910    prepare 0.0249    bound 0.2663    transfer 0.0038    finalize 0.0067    
all_split False
======================Cut inference begins======================
max lb tensor(0.37216496) min lb tensor(-0.55072081)
Number of Verified Splits: 21 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01570415496826172 
BICCOS Cumulative time: 0.028818130493164062
Preprocessing time: 0.012355804443359375 Inference time: 0.000978708267211914 Add cuts time: 0.0003681182861328125 Cut analysis time: 0.002001523971557617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35354 (2), -0.35242 (2), -0.35117 (2), -0.35067 (2), -0.35045 (2), -0.34913 (2), -0.34905 (2), -0.34856 (2), -0.34575 (2), -0.34428 (2), -0.34191 (2), -0.34022 (2), -0.33735 (2), -0.33698 (2), -0.33651 (2), -0.33625 (2), -0.32998 (2), -0.32982 (2), -0.32866 (2), -0.32830 (2), 
Length of domains: 50
Time: pickout 0.0120    decision 0.0208    set_bounds 0.0137    solve 0.1044    add 0.2096    
Accumulated time: pickout 0.0124    decision 0.5818    set_bounds 0.0239    solve 0.2284    add 0.4126    
Current (lb-rhs): -0.35354024171829224
100 domains visited
Cumulative time: 1.385387897491455

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 2] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 34] [/input-12, 34] [/input-12, 89] [/input-12, 89] [/input-12, 2] [/input-12, 34] 
split level 3: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.33128583431243896
10 lb beta sum: 0.641204833984375, worst -0.3082417845726013
Time: prepare 0.0067    bound 0.1218    transfer 0.0042    finalize 0.0030    func 0.1383    
Accumulated time: func 0.4293    prepare 0.0319    bound 0.3881    transfer 0.0080    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.53759968) min lb tensor(-0.30799276)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 5
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.021146297454833984 
BICCOS Cumulative time: 0.04996442794799805
Preprocessing time: 0.012444019317626953 Inference time: 0.005049467086791992 Add cuts time: 0.002365589141845703 Cut analysis time: 0.001287221908569336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09268 (3), -0.09236 (3), -0.09220 (3), -0.09210 (3), -0.09059 (3), -0.08980 (3), -0.08804 (3), -0.08605 (3), -0.08339 (3), -0.07681 (3), -0.07649 (3), -0.07612 (3), -0.07580 (3), -0.07578 (3), -0.07542 (3), -0.07511 (3), -0.06820 (3), -0.06720 (3), -0.06680 (3), -0.06669 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0225    set_bounds 0.0201    solve 0.1385    add 0.2273    
Accumulated time: pickout 0.0202    decision 0.6044    set_bounds 0.0440    solve 0.3669    add 0.6399    
Current (lb-rhs): -0.09267854690551758
150 domains visited
Cumulative time: 1.8294117450714111

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 97] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 2] [/input-12, 89] 
split level 3: [/input-12, 85] [/input-12, 85] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15992027521133423
10 lb beta sum: 0.706005871295929, worst -0.0604964941740036
Time: prepare 0.0069    bound 0.1181    transfer 0.0010    finalize 0.0026    func 0.1311    
Accumulated time: func 0.5604    prepare 0.0391    bound 0.5062    transfer 0.0090    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.68245363) min lb tensor(-0.05906183)
Number of Verified Splits: 327 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts: total 541 constraints, 35764 nonzero elements
cuts preparing time: 0.2184
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 554.
#cuts 1-3: 138
#cuts 4-6: 7
#cuts 10-12: 4
#cuts 13-15: 12
#cuts 16-18: 23
#cuts 19-21: 16
#cuts >= 20: 354
BICCOS time: 0.5375974178314209 
BICCOS Cumulative time: 0.587561845779419
Preprocessing time: 0.01204371452331543 Inference time: 0.016328811645507812 Add cuts time: 0.006264209747314453 Cut analysis time: 0.5029606819152832
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05906 (4), -0.05901 (4), -0.05898 (4), -0.05898 (4), -0.05893 (4), -0.05888 (4), -0.05801 (4), -0.05800 (4), -0.05796 (4), -0.05763 (4), -0.05761 (4), -0.05753 (4), -0.05086 (4), -0.05085 (4), -0.05084 (4), -0.05041 (4), -0.05040 (4), -0.05040 (4), -0.03075 (4), -0.03068 (4), 
Length of domains: 28
Time: pickout 0.0116    decision 0.0207    set_bounds 0.0159    solve 0.1312    add 0.2316    
Accumulated time: pickout 0.0318    decision 0.6251    set_bounds 0.0599    solve 0.4981    add 0.8716    
Current (lb-rhs): -0.05906182527542114
178 domains visited
Cumulative time: 2.7854201793670654

Shallow-BaB round 5
batch: 28
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 4: [/input-12, 7] [/input-12, 24] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 5: [/input-8, 417] [/input-8, 425] [/input-12, 24] [/input-8, 425] [/input-8, 425] [/input-8, 425] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 417] 
split level 6: [/input-8, 171] [/input-8, 417] [/input-8, 171] [/input-8, 417] [/input-8, 417] [/input-8, 417] [/input-8, 171] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14897474646568298
10 lb beta sum: 5.191878318786621, worst -0.03843414783477783
Time: prepare 0.0066    bound 0.1905    transfer 0.0044    finalize 0.0025    func 0.2065    
Accumulated time: func 0.7670    prepare 0.0461    bound 0.6967    transfer 0.0134    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.43434858) min lb tensor(4.41074371e-05)
Number of Verified Splits: 392 of 392
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 6
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.042878150939941406 
BICCOS Cumulative time: 0.6304399967193604
Preprocessing time: 0.011711835861206055 Inference time: 0.021303176879882812 Add cuts time: 0.006925821304321289 Cut analysis time: 0.00293731689453125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0083    decision 0.0309    set_bounds 0.0146    solve 0.2067    add 0.0279    
Accumulated time: pickout 0.0400    decision 0.6560    set_bounds 0.0745    solve 0.7048    add 0.8995    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
178 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.09824345e-01, 1.19300053e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34, 56]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.09824345e-01, 2.94170201e-01, 2.90603340e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 34, 56]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.09824345e-01, 2.94170201e-01, 1.18891913e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.51683614e-01, 4.11762655e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.51683614e-01, 8.59063864e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.72780062e-10, 1.04226217e-01, 3.95482540e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 56]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.72780062e-10, 1.04226217e-01, 8.57182145e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.72780062e-10, 1.61892578e-01, 1.24312028e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([7.72780062e-10, 1.61892578e-01, 1.39432773e-01, 6.10835701e-02,
        3.07057112e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([7.72780062e-10, 1.61892578e-01, 1.39432773e-01, 6.10835701e-02,
        6.04475886e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([7.72780062e-10, 1.61892578e-01, 1.39432773e-01, 7.86279887e-02,
        2.83406675e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97,  2, 85, 72, 56]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([7.72780062e-10, 1.61892578e-01, 1.39432773e-01, 7.86279887e-02,
        5.15446514e-02]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28060638904571533
10 lb beta sum: 0.9275946617126465, worst -0.19257372617721558
Time: prepare 0.0005    bound 0.1269    transfer 0.0003    finalize 0.0002    func 0.1280    
Accumulated time: func 0.8949    prepare 0.0466    bound 0.8235    transfer 0.0137    finalize 0.0150    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 89] [/input-12, 89] [/input-12, 56] 
split level 1: [/input-12, 89] [/input-12, 34] [/input-12, 34] [/input-12, 89] 
split level 2: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 34] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 4: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 5: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7142128944396973, worst -0.09733045101165771
10 lb beta sum: 1.7142128944396973, worst -0.09670901298522949
Time: prepare 0.0097    bound 0.1311    transfer 0.0007    finalize 0.0018    func 0.1449    
Accumulated time: func 1.0399    prepare 0.0566    bound 0.9546    transfer 0.0144    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(1.29553306) min lb tensor(-0.09641910)
Number of Verified Splits: 234 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.756978988647461, worst -3.1379594802856445
10 lb beta sum: 1.4386690855026245, worst -0.48141390085220337
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 6
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.2805492877960205 
BICCOS Cumulative time: 0.9109892845153809
Preprocessing time: 0.006707191467285156 Inference time: 0.26778554916381836 Add cuts time: 0.004489898681640625 Cut analysis time: 0.0015666484832763672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09642 (6), -0.09140 (6), -0.08318 (6), -0.07821 (6), -0.07644 (6), -0.06708 (6), -0.06129 (6), -0.06098 (6), -0.05657 (6), -0.05387 (6), -0.04930 (6), -0.04768 (6), -0.04732 (6), -0.04668 (6), -0.04254 (6), -0.03536 (6), -0.03205 (6), -0.02776 (6), -0.02230 (6), -0.01708 (6), 
Length of domains: 22
Time: pickout 0.0007    decision 0.0178    set_bounds 0.0172    solve 0.1450    add 0.0472    
Accumulated time: pickout 0.0407    decision 0.6738    set_bounds 0.0918    solve 0.8498    add 0.9467    
Current (lb-rhs): -0.09641909599304199
200 domains visited
Cumulative time: 3.8693456649780273

BaB round 2
batch: 22
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 164] [/input-8, 180] [/input-8, 180] [/input-8, 180] [/input-8, 180] 
split level 1: [/input-8, 41] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 349] [/input-8, 1579] [/input-8, 349] [/input-8, 1579] [/input-8, 41] 
split level 2: [/input-8, 417] [/input-8, 171] [/input-8, 41] [/input-8, 171] [/input-8, 41] [/input-8, 1579] [/input-8, 41] [/input-8, 1579] [/input-8, 349] [/input-8, 417] 
split level 3: [/input-8, 1579] [/input-8, 723] [/input-8, 1250] [/input-8, 723] [/input-8, 1250] [/input-8, 723] [/input-8, 349] [/input-8, 723] [/input-8, 41] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07865428924560547
10 lb beta sum: 0.16255462169647217, worst -0.07783526182174683
Time: prepare 0.0068    bound 0.1374    transfer 0.0049    finalize 0.0030    func 0.1544    
Accumulated time: func 1.1942    prepare 0.0636    bound 1.0920    transfer 0.0193    finalize 0.0197    
all_split False
======================Cut inference begins======================
max lb tensor(0.04341841) min lb tensor(-0.07756408)
Number of Verified Splits: 174 of 352
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3751060366630554
10 lb beta sum: 0.6458026170730591, worst -0.26372450590133667
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 6
#cuts 4-6: 8
#cuts 7-9: 3
#cuts 10-12: 3
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 0.26613593101501465 
BICCOS Cumulative time: 1.1771252155303955
Preprocessing time: 0.010528087615966797 Inference time: 0.2516763210296631 Add cuts time: 0.0018758773803710938 Cut analysis time: 0.002055644989013672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07756 (10), -0.07614 (10), -0.07182 (10), -0.07103 (10), -0.07038 (10), -0.06933 (10), -0.06877 (10), -0.06795 (10), -0.06715 (10), -0.06657 (10), -0.06625 (10), -0.06492 (10), -0.06270 (10), -0.06239 (10), -0.06094 (10), -0.06078 (10), -0.05890 (10), -0.05888 (10), -0.05741 (10), -0.05681 (10), 
Length of domains: 178
Time: pickout 0.0017    decision 0.0180    set_bounds 0.0167    solve 0.1545    add 0.0798    
Accumulated time: pickout 0.0424    decision 0.6918    set_bounds 0.1085    solve 1.0043    add 1.0265    
Current (lb-rhs): -0.07756407558917999
378 domains visited
Cumulative time: 4.414753675460815

BaB round 3
batch: 178
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 172] [/input-8, 1576] [/input-8, 349] [/input-8, 1576] [/input-8, 1576] [/input-8, 1576] [/input-8, 172] [/input-8, 417] [/input-8, 425] [/input-8, 349] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07487964630126953
10 lb beta sum: 0.19398225843906403, worst -0.07425431907176971
Time: prepare 0.0073    bound 0.1379    transfer 0.0010    finalize 0.0024    func 0.1508    
Accumulated time: func 1.3450    prepare 0.0713    bound 1.2299    transfer 0.0203    finalize 0.0221    
all_split False
======================Cut inference begins======================
max lb tensor(0.02642876) min lb tensor(-0.07411796)
Number of Verified Splits: 121 of 356
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 12
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.028176546096801758 
BICCOS Cumulative time: 1.2053017616271973
Preprocessing time: 0.010911226272583008 Inference time: 0.013185262680053711 Add cuts time: 0.002396821975708008 Cut analysis time: 0.0016832351684570312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07412 (11), -0.07270 (11), -0.07092 (11), -0.06951 (11), -0.06905 (11), -0.06835 (11), -0.06758 (11), -0.06655 (11), -0.06608 (11), -0.06509 (11), -0.06438 (11), -0.06372 (11), -0.06338 (11), -0.06271 (11), -0.06219 (11), -0.06119 (11), -0.06009 (11), -0.05907 (11), -0.05816 (11), -0.05767 (11), 
Length of domains: 235
Time: pickout 0.0153    decision 0.0234    set_bounds 0.0160    solve 0.1509    add 0.0779    
Accumulated time: pickout 0.0577    decision 0.7152    set_bounds 0.1245    solve 1.1552    add 1.1044    
Current (lb-rhs): -0.07411795854568481
613 domains visited
Cumulative time: 4.73451042175293

BaB round 4
batch: 235
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 417] [/input-8, 1576] [/input-8, 369] [/input-8, 417] [/input-8, 425] [/input-8, 39] [/input-8, 349] [/input-8, 180] [/input-8, 349] [/input-8, 41] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07325148582458496
10 lb beta sum: 0.6290733814239502, worst -0.0704604834318161
Time: prepare 0.0094    bound 0.1381    transfer 0.0052    finalize 0.0032    func 0.1590    
Accumulated time: func 1.5041    prepare 0.0808    bound 1.3680    transfer 0.0255    finalize 0.0253    
all_split False
======================Cut inference begins======================
max lb tensor(0.47579235) min lb tensor(-0.07037073)
Number of Verified Splits: 235 of 470
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 18
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.04501843452453613 
BICCOS Cumulative time: 1.2503201961517334
Preprocessing time: 0.013980627059936523 Inference time: 0.02647256851196289 Add cuts time: 0.0030994415283203125 Cut analysis time: 0.0014657974243164062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07037 (12), -0.06909 (12), -0.06710 (12), -0.06582 (12), -0.06372 (12), -0.06234 (12), -0.06213 (12), -0.06045 (12), -0.05993 (12), -0.05893 (12), -0.05838 (12), -0.05760 (12), -0.05724 (12), -0.05711 (12), -0.05602 (12), -0.05567 (12), -0.05535 (12), -0.05492 (12), -0.05457 (12), -0.05407 (12), 
Length of domains: 235
Time: pickout 0.0166    decision 0.0248    set_bounds 0.0210    solve 0.1592    add 0.0757    
Accumulated time: pickout 0.0743    decision 0.7400    set_bounds 0.1455    solve 1.3144    add 1.1801    
Current (lb-rhs): -0.07037073373794556
848 domains visited
Cumulative time: 5.085101127624512

BaB round 5
batch: 235
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 349] [/input-8, 417] [/input-8, 1946] [/input-8, 171] [/input-8, 1691] [/input-8, 185] [/input-8, 39] [/input-8, 349] [/input-8, 417] [/input-8, 1946] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06922245025634766
10 lb beta sum: 1.4661043882369995, worst -0.060150146484375
Time: prepare 0.0094    bound 0.1324    transfer 0.0012    finalize 0.0028    func 0.1488    
Accumulated time: func 1.6529    prepare 0.0904    bound 1.5005    transfer 0.0267    finalize 0.0280    
all_split False
======================Cut inference begins======================
max lb tensor(0.73394650) min lb tensor(-0.06005776)
Number of Verified Splits: 428 of 470
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 27
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.06983280181884766 
BICCOS Cumulative time: 1.320152997970581
Preprocessing time: 0.013711690902709961 Inference time: 0.04903054237365723 Add cuts time: 0.005532979965209961 Cut analysis time: 0.0015575885772705078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06006 (13), -0.05845 (13), -0.05680 (13), -0.05497 (13), -0.04504 (13), -0.04344 (13), -0.04107 (13), -0.03946 (13), -0.03921 (13), -0.03780 (13), -0.03740 (13), -0.03599 (13), -0.03224 (13), -0.03188 (13), -0.03133 (13), -0.03115 (13), -0.02916 (13), -0.02885 (13), -0.02850 (13), -0.02835 (13), 
Length of domains: 42
Time: pickout 0.0160    decision 0.0218    set_bounds 0.0203    solve 0.1490    add 0.0632    
Accumulated time: pickout 0.0904    decision 0.7618    set_bounds 0.1658    solve 1.4634    add 1.2433    
Current (lb-rhs): -0.060057759284973145
890 domains visited
Cumulative time: 5.434051513671875

BaB round 6
batch: 42
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 164] [/input-8, 2014] [/input-8, 349] [/input-8, 349] [/input-8, 2014] [/input-8, 164] [/input-8, 164] [/input-8, 349] [/input-8, 349] [/input-8, 164] 
split level 1: [/input-8, 369] [/input, 987] [/input-8, 1692] [/input-8, 1692] [/input, 1410] [/input-8, 369] [/input-8, 369] [/input-8, 1692] [/input-8, 1692] [/input-8, 369] 
split level 2: [/input-8, 2014] [/input-8, 1692] [/input-8, 2014] [/input-8, 2014] [/input-8, 1692] [/input-8, 2014] [/input-8, 2014] [/input-8, 2014] [/input-8, 2014] [/input-8, 2014] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05709385871887207
10 lb beta sum: 1.8811264038085938, worst -0.040105581283569336
Time: prepare 0.0070    bound 0.1374    transfer 0.0009    finalize 0.0032    func 0.1508    
Accumulated time: func 1.8037    prepare 0.0977    bound 1.6379    transfer 0.0276    finalize 0.0312    
all_split False
======================Cut inference begins======================
max lb tensor(0.46880960) min lb tensor(-0.04006577)
Number of Verified Splits: 215 of 336
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04093289375305176 
BICCOS Cumulative time: 1.3610858917236328
Preprocessing time: 0.010082483291625977 Inference time: 0.028052568435668945 Add cuts time: 0.001783132553100586 Cut analysis time: 0.00101470947265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04007 (16), -0.03951 (16), -0.03931 (16), -0.03878 (16), -0.03793 (16), -0.03784 (16), -0.03738 (16), -0.03731 (16), -0.03692 (16), -0.03636 (16), -0.03618 (16), -0.03565 (16), -0.03458 (16), -0.03449 (16), -0.03403 (16), -0.03395 (16), -0.03320 (16), -0.03234 (16), -0.03158 (16), -0.03080 (16), 
Length of domains: 121
Time: pickout 0.0057    decision 0.0169    set_bounds 0.0183    solve 0.1509    add 0.0785    
Accumulated time: pickout 0.0960    decision 0.7787    set_bounds 0.1841    solve 1.6143    add 1.3218    
Current (lb-rhs): -0.040065765380859375
1011 domains visited
Cumulative time: 5.7535529136657715

BaB round 7
batch: 121
splitting decisions: 
split level 0: [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 361] [/input-8, 185] [/input-8, 185] [/input-8, 185] [/input-8, 185] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.054731130599975586

all verified at 2th iter
Time: prepare 0.0050    bound 0.0208    transfer 0.0007    finalize 0.0013    func 0.0295    
Accumulated time: func 1.8332    prepare 0.1029    bound 1.6587    transfer 0.0284    finalize 0.0325    
all_split False
======================Cut inference begins======================
max lb tensor(0.08296625) min lb tensor(0.03270511)
Number of Verified Splits: 242 of 242
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.008568286895751953 
BICCOS Cumulative time: 1.3696541786193848
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0296    decision 0.0182    set_bounds 0.0105    solve 0.0295    add 0.0001    
Accumulated time: pickout 0.1256    decision 0.7968    set_bounds 0.1946    solve 1.6439    add 1.3219    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1011 domains visited
Cumulative time: 5.851109504699707

found process to kill: terminal indx = 2
found process to kill: terminal indx = 3
found process to kill: terminal indx = 4
found process to kill: terminal indx = 6
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=57_spec=6_26949535.log
found process for pidx=2
found process for pidx=3
found process for pidx=4
found process for pidx=6
kill process for pidx=6
Result: safe in 24.8925 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 482] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 482] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 215] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.04004717, -1.07115650,  0.35848117,  1.95242727,  0.74911094,
          0.26205671,  2.80084372, -0.02647531, -0.53875589]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54733276, -21.78987122, -22.60601997, -21.30351830, -24.20145226,
         -22.29459190, -22.23107147, -25.10035706, -22.73666000, -22.06024361]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.02569389, -21.82901001, -23.36814117, -22.22129059, -25.05405426,
          -23.25062561, -22.97693062, -25.95488548, -23.13699722, -22.30997849],
         [-23.02569389, -21.82901001, -23.36814117, -22.22129059, -25.05405426,
          -23.25062561, -22.97693062, -25.95488548, -23.13699722, -22.30997849]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80440331, -0.39228058,  0.91570663,  0.08868790]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0069 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0634 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1050]; unstable size 1050; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 1050] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 1050] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1050] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 329] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.91365635,  2.97547603, -0.38596034, -0.14092678, -0.68310499,
          0.74673331,  1.63518643,  1.76536179,  3.08691597]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
         -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]100%|██████████| 1/1 [00:00<00:00,  9.03it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.73095417, -15.17011356, -10.95801258, -11.12242126, -10.36753273,
          -12.15822506, -10.36675453, -13.20997334, -13.88632774, -15.23771191],
         [-13.73095417, -15.17011356, -10.95801258, -11.12242126, -10.36753273,
          -12.15822506, -10.36675453, -13.20997334, -13.88632774, -15.23771191]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59125805, 0.75566673, 0.00077820]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1135 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.672626495361328
alpha/beta optimization time: 1.200660228729248
initial alpha-crown bounds: tensor([[ 2.17554379,  3.15855932, -0.19436598,  0.02832639, -0.55011010,
          0.92495251,  1.83316219,  2.01714492,  3.27941370]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5501101016998291
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.8333 seconds.
lower bounds for all target labels: [2.175543785095215, 3.1585593223571777, -0.194366455078125, 0.02832639217376709, -0.5501101016998291, 0.924952507019043, 1.8331621885299683, 2.0171430110931396, 3.2794137001037598]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 4]
start creating model mps for candidates: ['lay/16_2', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=2_26952054.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=2_26952054.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 39260 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 39263 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56780815124512
Verifying property 0 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.2794137001037598.

Properties batch 1, size 1
Remaining timeout: 198.39341640472412
Verifying property 1 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1585593223571777.

Properties batch 2, size 1
Remaining timeout: 198.28773880004883
Verifying property 2 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.175543785095215.

Properties batch 3, size 1
Remaining timeout: 198.17398047447205
Verifying property 3 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0171449184417725.

Properties batch 4, size 1
Remaining timeout: 198.0660376548767
Verifying property 4 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8331621885299683.

Properties batch 5, size 1
Remaining timeout: 197.96400713920593
Verifying property 5 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.924952507019043.

Properties batch 6, size 1
Remaining timeout: 197.86311674118042
Verifying property 6 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.02832639217376709.

Properties batch 7, size 1
Remaining timeout: 197.76147270202637
Verifying property 7 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19436598]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19436598]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008609294891357422
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0628    transfer 0.0001    finalize 0.0002    func 0.0634    
Accumulated time: func 0.0634    prepare 0.0003    bound 0.0628    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 61] 
split level 8: [/input-12, 72] 
split level 9: [/input-12, 14] 
split level 10: [/input-12, 6] 
split level 11: [/input-8, 1955] 
split level 12: [/input-12, 12] 
split level 13: [/input-12, 68] 
split level 14: [/input-12, 92] 
split level 15: [/input-8, 738] 
split level 16: [/input-8, 347] 
split level 17: [/input-12, 79] 
split level 18: [/input-8, 804] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 466] 
split level 22: [/input-8, 788] 
split level 23: [/input-8, 490] 
split level 24: [/input-12, 97] 
split level 25: [/input-8, 577] 
split level 26: [/input-8, 154] 
split level 27: [/input-8, 475] 
split level 28: [/input-8, 1372] 
split level 29: [/input-8, 1257] 
split level 30: [/input-8, 162] 
split level 31: [/input-12, 71] 
split level 32: [/input-8, 755] 
split level 33: [/input-8, 357] 
split level 34: [/input-8, 1379] 
split level 35: [/input-8, 434] 
split level 36: [/input-8, 158] 
split level 37: [/input-12, 20] 
split level 38: [/input-8, 148] 
split level 39: [/input-8, 915] 
split level 40: [/input-8, 165] 
split level 41: [/input-8, 91] 
split level 42: [/input-8, 1693] 
split level 43: [/input-8, 1643] 
split level 44: [/input-8, 436] 
split level 45: [/input-8, 779] 
split level 46: [/input-8, 829] 
split level 47: [/input-8, 294] 
split level 48: [/input-8, 460] 
split level 49: [/input-8, 427] 
split level 50: [/input-8, 1388] 
split level 51: [/input-8, 37] 
split level 52: [/input-8, 1254] 
split level 53: [/input-8, 1748] 
split level 54: [/input-8, 1261] 
split level 55: [/input-8, 163] 
split level 56: [/input-8, 156] 
split level 57: [/input-8, 1509] 
split level 58: [/input-8, 1574] 
split level 59: [/input-8, 1556] 
split level 60: [/input-8, 149] 
split level 61: [/input-8, 785] 
split level 62: [/input-8, 1363] 
split level 63: [/input-8, 30] 
split level 64: [/input-8, 26] 
split level 65: [/input-8, 492] 
split level 66: [/input-8, 159] 
split level 67: [/input-8, 777] 
split level 68: [/input-8, 958] 
split level 69: [/input-8, 1659] 
split level 70: [/input-8, 1634] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 411] 
split level 73: [/input-8, 1972] 
split level 74: [/input-8, 1292] 
split level 75: [/input-8, 1214] 
split level 76: [/input-8, 507] 
split level 77: [/input-8, 454] 
split level 78: [/input-8, 1029] 
split level 79: [/input-8, 1028] 
split level 80: [/input-8, 412] 
split level 81: [/input-8, 1340] 
split level 82: [/input-8, 151] 
split level 83: [/input-8, 1229] 
split level 84: [/input-8, 1652] 
split level 85: [/input-8, 1626] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 1301] 
split level 88: [/input-8, 1700] 
split level 89: [/input-8, 1241] 
split level 90: [/input-8, 225] 
split level 91: [/input-8, 92] 
split level 92: [/input-8, 1945] 
split level 93: [/input-8, 782] 
split level 94: [/input-8, 223] 
split level 95: [/input-8, 166] 
split level 96: [/input-8, 1757] 
split level 97: [/input-8, 183] 
split level 98: [/input-8, 1238] 
split level 99: [/input-8, 231] 
split level 100: [/input-8, 1181] 
split level 101: [/input, 2789] 
split level 102: [/input-8, 1246] 
split level 103: [/input-8, 226] 
split level 104: [/input-8, 449] 
split level 105: [/input-8, 1265] 
split level 106: [/input-8, 582] 
split level 107: [/input-8, 1294] 
split level 108: [/input-8, 90] 
split level 109: [/input, 3035] 
split level 110: [/input-8, 233] 
split level 111: [/input-8, 217] 
split level 112: [/input-8, 1329] 
split level 113: [/input-8, 1364] 
split level 114: [/input-8, 178] 
split level 115: [/input-8, 481] 
split level 116: [/input, 70] 
split level 117: [/input-8, 241] 
split level 118: [/input-8, 1228] 
split level 119: [/input-8, 450] 
split level 120: [/input-8, 944] 
split level 121: [/input-8, 1341] 
split level 122: [/input-8, 773] 
split level 123: [/input-8, 170] 
split level 124: [/input-8, 1707] 
split level 125: [/input, 227] 
split level 126: [/input-8, 141] 
split level 127: [/input-8, 624] 
split level 128: [/input-8, 452] 
split level 129: [/input-8, 312] 
split level 130: [/input-8, 182] 
split level 131: [/input, 3433] 
split level 132: [/input-8, 147] 
split level 133: [/input-8, 146] 
split level 134: [/input-8, 1598] 
split level 135: [/input-8, 1337] 
split level 136: [/input-8, 364] 
split level 137: [/input-8, 143] 
split level 138: [/input, 873] 
split level 139: [/input, 2787] 
split level 140: [/input-8, 242] 
split level 141: [/input, 2887] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 169] 
split level 144: [/input-8, 215] 
split level 145: [/input-8, 205] 
split level 146: [/input, 1516] 
split level 147: [/input-8, 209] 
split level 148: [/input-8, 207] 
split level 149: [/input-8, 239] 
split level 150: [/input-8, 253] 
split level 151: [/input-8, 1297] 
split level 152: [/input, 3288] 
split level 153: [/input-8, 234] 
split level 154: [/input, 1205] 
split level 155: [/input, 1891] 
split level 156: [/input, 71] 
split level 157: [/input, 1207] 
split level 158: [/input, 72] 
split level 159: [/input-8, 1227] 
split level 160: [/input, 942] 
split level 161: [/input-8, 230] 
split level 162: [/input-8, 255] 
split level 163: [/input, 2790] 
split level 164: [/input, 137] 
split level 165: [/input-8, 1786] 
split level 166: [/input, 226] 
split level 167: [/input, 3717] 
split level 168: [/input, 1999] 
split level 169: [/input-8, 1741] 
split level 170: [/input-8, 1302] 
split level 171: [/input, 1490] 
split level 172: [/input, 1843] 
split level 173: [/input-8, 1799] 
split level 174: [/input-8, 1279] 
split level 175: [/input, 2649] 
split level 176: [/input-8, 206] 
split level 177: [/input, 3497] 
split level 178: [/input, 2724] 
split level 179: [/input-8, 1233] 
split level 180: [/input, 906] 
split level 181: [/input, 2786] 
split level 182: [/input, 833] 
split level 183: [/input-8, 103] 
split level 184: [/input, 2792] 
split level 185: [/input, 1320] 
split level 186: [/input, 1180] 
split level 187: [/input, 2870] 
split level 188: [/input, 1829] 
split level 189: [/input, 1158] 
split level 190: [/input-8, 179] 
split level 191: [/input, 1918] 
split level 192: [/input, 1937] 
split level 193: [/input, 2632] 
split level 194: [/input, 1886] 
split level 195: [/input, 533] 
split level 196: [/input, 1812] 
split level 197: [/input, 329] 
split level 198: [/input, 2014] 
split level 199: [/input, 1012] 
Time: prepare 0.0066    bound 0.1136    transfer 0.0069    finalize 0.0058    func 0.1330    
Accumulated time: func 0.1964    prepare 0.0177    bound 0.1764    transfer 0.0070    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.25904536) min lb tensor(-0.19429326)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.016255617141723633 
BICCOS Cumulative time: 0.016255617141723633
Preprocessing time: 0.014188766479492188 Inference time: 0.0005099773406982422 Add cuts time: 0.0002129077911376953 Cut analysis time: 0.0013439655303955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18177 (1), -0.18149 (1), -0.18013 (1), -0.17981 (1), -0.17884 (1), -0.17875 (1), -0.17841 (1), -0.17834 (1), -0.17800 (1), -0.17737 (1), -0.17728 (1), -0.17620 (1), -0.17578 (1), -0.17548 (1), -0.17532 (1), -0.17458 (1), -0.17446 (1), -0.17431 (1), -0.17359 (1), -0.17351 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5657    set_bounds 0.0124    solve 0.1332    add 0.1325    
Accumulated time: pickout 0.0004    decision 0.5657    set_bounds 0.0124    solve 0.1332    add 0.1325    
Current (lb-rhs): -0.18177390098571777
50 domains visited
Cumulative time: 0.9407463073730469

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 31] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17229533195495605

all verified at 8th iter
Time: prepare 0.0080    bound 0.0687    transfer 0.0009    finalize 0.0031    func 0.0833    
Accumulated time: func 0.2797    prepare 0.0260    bound 0.2451    transfer 0.0079    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.15613461) min lb tensor(0.00401253)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04290938377380371 
BICCOS Cumulative time: 0.059165000915527344
Preprocessing time: 0.015832901000976562 Inference time: 0.01669931411743164 Add cuts time: 0.009700536727905273 Cut analysis time: 0.0006766319274902344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0022    decision 0.0214    set_bounds 0.0153    solve 0.0835    add 0.0179    
Accumulated time: pickout 0.0026    decision 0.5871    set_bounds 0.0278    solve 0.2167    add 0.1503    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023889e+30, 1.93143353e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023889e+30, 2.36133143e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.00038680, 0.16258614]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 46]), tensor([1., 1.]), tensor([0, 0]), tensor([0.00038680, 0.24335246]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15019822120666504

all verified at 4th iter
Time: prepare 0.0005    bound 0.0282    transfer 0.0004    finalize 0.0002    func 0.0294    
Accumulated time: func 0.3091    prepare 0.0265    bound 0.2733    transfer 0.0082    finalize 0.0093    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.39927124977112
Verifying property 8 with 1 instances.
##### Instance 59 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55011010]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.79305267, -15.05270672, -11.01360893, -11.14069176, -10.53976250,
        -12.22748184, -10.10639000, -13.34503460, -13.81023407, -15.20878029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55011010]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1050
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1392
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0004258155822753906
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0572    transfer 0.0001    finalize 0.0001    func 0.0577    
Accumulated time: func 0.0577    prepare 0.0002    bound 0.0572    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 14] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 4] 
split level 8: [/input-12, 31] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 79] 
split level 11: [/input-8, 1380] 
split level 12: [/input-12, 92] 
split level 13: [/input-8, 141] 
split level 14: [/input-8, 163] 
split level 15: [/input-8, 1261] 
split level 16: [/input-8, 165] 
split level 17: [/input-8, 1257] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1388] 
split level 20: [/input-8, 738] 
split level 21: [/input-8, 1262] 
split level 22: [/input-8, 1241] 
split level 23: [/input-8, 1574] 
split level 24: [/input-8, 1389] 
split level 25: [/input-8, 30] 
split level 26: [/input-8, 37] 
split level 27: [/input-12, 71] 
split level 28: [/input-8, 1246] 
split level 29: [/input-8, 1254] 
split level 30: [/input-8, 148] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 156] 
split level 33: [/input-8, 1748] 
split level 34: [/input-8, 173] 
split level 35: [/input-8, 1757] 
split level 36: [/input-8, 1181] 
split level 37: [/input-8, 1643] 
split level 38: [/input-8, 1379] 
split level 39: [/input-12, 8] 
split level 40: [/input-8, 1372] 
split level 41: [/input-8, 91] 
split level 42: [/input, 3207] 
split level 43: [/input-8, 1214] 
split level 44: [/input-8, 147] 
split level 45: [/input-8, 149] 
split level 46: [/input-8, 252] 
split level 47: [/input-8, 162] 
split level 48: [/input-8, 294] 
split level 49: [/input-8, 182] 
split level 50: [/input-8, 788] 
split level 51: [/input-8, 154] 
split level 52: [/input-8, 92] 
split level 53: [/input-8, 166] 
split level 54: [/input-8, 755] 
split level 55: [/input-8, 941] 
split level 56: [/input-8, 779] 
split level 57: [/input-8, 1950] 
split level 58: [/input-8, 1738] 
split level 59: [/input-8, 139] 
split level 60: [/input-8, 2017] 
split level 61: [/input-8, 312] 
split level 62: [/input-8, 1265] 
split level 63: [/input-8, 1635] 
split level 64: [/input-8, 944] 
split level 65: [/input-8, 1238] 
split level 66: [/input, 3035] 
split level 67: [/input-8, 1741] 
split level 68: [/input-8, 225] 
split level 69: [/input-8, 492] 
split level 70: [/input-8, 1666] 
split level 71: [/input-8, 1266] 
split level 72: [/input-8, 1390] 
split level 73: [/input-8, 2031] 
split level 74: [/input-8, 146] 
split level 75: [/input-8, 1652] 
split level 76: [/input-8, 223] 
split level 77: [/input-8, 151] 
split level 78: [/input-8, 26] 
split level 79: [/input-8, 218] 
split level 80: [/input-8, 217] 
split level 81: [/input-8, 183] 
split level 82: [/input-8, 253] 
split level 83: [/input-8, 1739] 
split level 84: [/input-8, 221] 
split level 85: [/input-8, 782] 
split level 86: [/input-8, 159] 
split level 87: [/input-12, 72] 
split level 88: [/input, 2881] 
split level 89: [/input-8, 1173] 
split level 90: [/input-8, 181] 
split level 91: [/input, 3257] 
split level 92: [/input-8, 2029] 
split level 93: [/input-8, 25] 
split level 94: [/input-8, 507] 
split level 95: [/input-8, 179] 
split level 96: [/input-8, 231] 
split level 97: [/input-8, 233] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 958] 
split level 100: [/input-8, 582] 
split level 101: [/input, 474] 
split level 102: [/input, 873] 
split level 103: [/input-8, 460] 
split level 104: [/input-8, 357] 
split level 105: [/input-8, 1758] 
split level 106: [/input-8, 170] 
split level 107: [/input-8, 1382] 
split level 108: [/input, 3190] 
split level 109: [/input-8, 213] 
split level 110: [/input-8, 1229] 
split level 111: [/input-8, 209] 
split level 112: [/input, 3208] 
split level 113: [/input-8, 1233] 
split level 114: [/input-8, 241] 
split level 115: [/input, 918] 
split level 116: [/input-8, 1029] 
split level 117: [/input, 98] 
split level 118: [/input, 2887] 
split level 119: [/input, 809] 
split level 120: [/input-8, 230] 
split level 121: [/input-8, 454] 
split level 122: [/input-8, 466] 
split level 123: [/input, 3497] 
split level 124: [/input, 3252] 
split level 125: [/input-8, 777] 
split level 126: [/input, 934] 
split level 127: [/input-8, 205] 
split level 128: [/input, 156] 
split level 129: [/input, 2724] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 1765] 
split level 132: [/input-8, 1786] 
split level 133: [/input-8, 364] 
split level 134: [/input, 838] 
split level 135: [/input, 137] 
split level 136: [/input-8, 239] 
split level 137: [/input, 1426] 
split level 138: [/input-8, 242] 
split level 139: [/input-8, 215] 
split level 140: [/input, 854] 
split level 141: [/input, 888] 
split level 142: [/input, 970] 
split level 143: [/input-8, 624] 
split level 144: [/input-8, 207] 
split level 145: [/input-8, 226] 
split level 146: [/input-8, 1730] 
split level 147: [/input-8, 255] 
split level 148: [/input-8, 1030] 
split level 149: [/input, 1180] 
split level 150: [/input-8, 1028] 
split level 151: [/input-8, 1279] 
split level 152: [/input-8, 138] 
split level 153: [/input, 2040] 
split level 154: [/input, 942] 
split level 155: [/input, 2871] 
split level 156: [/input, 2328] 
split level 157: [/input-8, 1378] 
split level 158: [/input-8, 206] 
split level 159: [/input, 1207] 
split level 160: [/input, 793] 
split level 161: [/input, 1516] 
split level 162: [/input, 2971] 
split level 163: [/input, 3433] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 794] 
split level 166: [/input, 457] 
split level 167: [/input, 2664] 
split level 168: [/input, 60] 
split level 169: [/input, 2870] 
split level 170: [/input, 329] 
split level 171: [/input, 1891] 
split level 172: [/input, 684] 
split level 173: [/input-8, 1799] 
split level 174: [/input, 2859] 
split level 175: [/input, 2876] 
split level 176: [/input, 1129] 
split level 177: [/input, 3143] 
split level 178: [/input, 407] 
split level 179: [/input-8, 1244] 
split level 180: [/input, 162] 
split level 181: [/input, 833] 
split level 182: [/input-8, 103] 
split level 183: [/input, 3127] 
split level 184: [/input, 313] 
split level 185: [/input, 97] 
split level 186: [/input, 2883] 
split level 187: [/input, 2330] 
split level 188: [/input, 50] 
split level 189: [/input, 2700] 
split level 190: [/input, 2039] 
split level 191: [/input, 51] 
split level 192: [/input, 2055] 
split level 193: [/input, 2596] 
split level 194: [/input-8, 1602] 
split level 195: [/input, 172] 
split level 196: [/input, 827] 
split level 197: [/input, 2877] 
split level 198: [/input, 3828] 
split level 199: [/input, 3352] 
Time: prepare 0.0064    bound 0.1166    transfer 0.0009    finalize 0.0036    func 0.1276    
Accumulated time: func 0.1853    prepare 0.0171    bound 0.1738    transfer 0.0010    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(-0.16451073) min lb tensor(-0.55004311)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.013502120971679688 
BICCOS Cumulative time: 0.013502120971679688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.53656 (1), -0.53650 (1), -0.53635 (1), -0.53551 (1), -0.53541 (1), -0.53465 (1), -0.53456 (1), -0.53438 (1), -0.53436 (1), -0.53425 (1), -0.53369 (1), -0.53365 (1), -0.53343 (1), -0.53300 (1), -0.53289 (1), -0.53160 (1), -0.53142 (1), -0.53109 (1), -0.53057 (1), -0.52916 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5509    set_bounds 0.0100    solve 0.1277    add 0.2262    
Accumulated time: pickout 0.0004    decision 0.5509    set_bounds 0.0100    solve 0.1277    add 0.2262    
Current (lb-rhs): -0.5365607738494873
50 domains visited
Cumulative time: 1.0102531909942627

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 90] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
Time: prepare 0.0072    bound 0.1118    transfer 0.0051    finalize 0.0030    func 0.1272    
Accumulated time: func 0.3125    prepare 0.0246    bound 0.2856    transfer 0.0061    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.05239964) min lb tensor(-0.51019526)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01686573028564453 
BICCOS Cumulative time: 0.03036785125732422
Preprocessing time: 0.014150381088256836 Inference time: 0.0002560615539550781 Add cuts time: 9.512901306152344e-05 Cut analysis time: 0.0023641586303710938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30639 (2), -0.30532 (2), -0.30375 (2), -0.30326 (2), -0.30323 (2), -0.30297 (2), -0.29993 (2), -0.29933 (2), -0.29750 (2), -0.29474 (2), -0.29336 (2), -0.28581 (2), -0.28234 (2), -0.28136 (2), -0.27799 (2), -0.27723 (2), -0.27564 (2), -0.27375 (2), -0.27271 (2), -0.27096 (2), 
Length of domains: 50
Time: pickout 0.0155    decision 0.0225    set_bounds 0.0167    solve 0.1273    add 0.2367    
Accumulated time: pickout 0.0158    decision 0.5734    set_bounds 0.0266    solve 0.2550    add 0.4629    
Current (lb-rhs): -0.30639004707336426
100 domains visited
Cumulative time: 1.4535927772521973

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 14] [/input-12, 14] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 14] [/input-12, 14] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 14] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 31] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2981698513031006
10 lb beta sum: 0.17160627245903015, worst -0.29797863960266113
Time: prepare 0.0067    bound 0.1535    transfer 0.0011    finalize 0.0030    func 0.1670    
Accumulated time: func 0.4795    prepare 0.0316    bound 0.4391    transfer 0.0072    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.47139913) min lb tensor(-0.29544234)
Number of Verified Splits: 91 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.023613691329956055 
BICCOS Cumulative time: 0.05398154258728027
Preprocessing time: 0.013410091400146484 Inference time: 0.004965305328369141 Add cuts time: 0.0035123825073242188 Cut analysis time: 0.001725912094116211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10059 (3), -0.10045 (3), -0.09881 (3), -0.09784 (3), -0.09492 (3), -0.09429 (3), -0.09137 (3), -0.09111 (3), -0.08947 (3), -0.08784 (3), -0.08569 (3), -0.08465 (3), -0.08450 (3), -0.08432 (3), -0.08428 (3), -0.08349 (3), -0.08317 (3), -0.08310 (3), -0.08254 (3), -0.08251 (3), 
Length of domains: 50
Time: pickout 0.0157    decision 0.0214    set_bounds 0.0194    solve 0.1672    add 0.3396    
Accumulated time: pickout 0.0315    decision 0.5948    set_bounds 0.0461    solve 0.4222    add 0.8025    
Current (lb-rhs): -0.10059463977813721
150 domains visited
Cumulative time: 2.04483699798584

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] [/input-12, 14] [/input-12, 31] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 31] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10105419158935547
10 lb beta sum: 0.43347829580307007, worst -0.1017920970916748
Time: prepare 0.0072    bound 0.1655    transfer 0.0013    finalize 0.0024    func 0.1791    
Accumulated time: func 0.6586    prepare 0.0392    bound 0.6046    transfer 0.0085    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.30906564) min lb tensor(-0.09449530)
Number of Verified Splits: 197 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 5
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.03220987319946289 
BICCOS Cumulative time: 0.08619141578674316
Preprocessing time: 0.013499975204467773 Inference time: 0.012947559356689453 Add cuts time: 0.0038902759552001953 Cut analysis time: 0.0018720626831054688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02946 (4), -0.02924 (4), -0.02922 (4), -0.02890 (4), -0.02850 (4), -0.02776 (4), -0.02767 (4), -0.02744 (4), -0.02742 (4), -0.02733 (4), -0.02729 (4), -0.02720 (4), -0.02712 (4), -0.02686 (4), -0.02635 (4), -0.02518 (4), -0.02517 (4), -0.02484 (4), -0.02482 (4), -0.02169 (4), 
Length of domains: 50
Time: pickout 0.0263    decision 0.0259    set_bounds 0.0211    solve 0.1793    add 0.4637    
Accumulated time: pickout 0.0578    decision 0.6207    set_bounds 0.0672    solve 0.6015    add 1.2662    
Current (lb-rhs): -0.029455222189426422
200 domains visited
Cumulative time: 2.800661087036133

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 1: [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 14] [/input-12, 14] [/input-12, 68] [/input-12, 61] [/input-12, 61] [/input-12, 31] [/input-12, 68] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 68] [/input-12, 68] [/input-12, 79] [/input-12, 31] [/input-12, 31] [/input-8, 1266] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04692482948303223
10 lb beta sum: 0.5833709836006165, worst -0.11523276567459106
Time: prepare 0.0067    bound 0.1470    transfer 0.0030    finalize 0.0031    func 0.1627    
Accumulated time: func 0.8213    prepare 0.0463    bound 0.7516    transfer 0.0115    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.11835623) min lb tensor(-0.00252688)
Number of Verified Splits: 396 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 6
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.04974102973937988 
BICCOS Cumulative time: 0.13593244552612305
Preprocessing time: 0.012899637222290039 Inference time: 0.02578449249267578 Add cuts time: 0.00858306884765625 Cut analysis time: 0.0024738311767578125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0146    decision 0.0292    set_bounds 0.0205    solve 0.1629    add 0.0287    
Accumulated time: pickout 0.0725    decision 0.6499    set_bounds 0.0877    solve 0.7644    add 1.2949    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 8.36075991e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.07278535e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 9.32345837e-02, 1.42775048e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 46]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 9.32345837e-02, 3.75889719e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 6.83955699e-02, 5.87474555e-02,
        7.07525164e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 6.83955699e-02, 5.87474555e-02,
        1.01208940e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 6.83955699e-02, 6.51988685e-02,
        7.13674724e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 6.83955699e-02, 6.51988685e-02,
        1.03902310e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 5.34108877e-02, 6.22106045e-02,
        6.24859035e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 5.34108877e-02, 6.22106045e-02,
        1.01194948e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([ 1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 5.34108877e-02, 6.36894703e-02,
        7.19105154e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([90, 59, 31, 79, 46]), tensor([1., 1., 1., 1., 1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.11584494e-01, 5.34108877e-02, 6.36894703e-02,
        1.01907864e-01]), tensor([0, 1, 2, 3, 4]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4494202136993408
10 lb beta sum: 1.1684679985046387, worst -0.44017481803894043
Time: prepare 0.0006    bound 0.1356    transfer 0.0003    finalize 0.0003    func 0.1370    
Accumulated time: func 0.9582    prepare 0.0469    bound 0.8872    transfer 0.0118    finalize 0.0156    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 46] [/input-12, 97] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 14] [/input-12, 14] [/input-12, 14] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 4: [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 5: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 6: [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47441428899765015, worst -0.3006272315979004
10 lb beta sum: 0.5131465792655945, worst -0.2994551658630371
Time: prepare 0.0157    bound 0.1366    transfer 0.0062    finalize 0.0037    func 0.1646    
Accumulated time: func 1.1229    prepare 0.0630    bound 1.0238    transfer 0.0180    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.75428915) min lb tensor(-0.29921913)
Number of Verified Splits: 309 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.49811848998069763, worst -0.7821952104568481
10 lb beta sum: 0.8207178711891174, worst -0.34052929282188416
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 6
#cuts 4-6: 24
#cuts 7-9: 14
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.35329747200012207 
BICCOS Cumulative time: 0.4892299175262451
Preprocessing time: 0.010272741317749023 Inference time: 0.3249971866607666 Add cuts time: 0.014030933380126953 Cut analysis time: 0.003996610641479492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29922 (7), -0.29586 (7), -0.26279 (7), -0.25468 (7), -0.23687 (7), -0.23490 (7), -0.22071 (7), -0.21976 (7), -0.21648 (7), -0.21233 (7), -0.18205 (7), -0.17942 (7), -0.17477 (7), -0.16696 (7), -0.15674 (7), -0.15547 (7), -0.15049 (7), -0.14740 (7), -0.12217 (7), -0.11273 (7), 
Length of domains: 75
Time: pickout 0.0009    decision 0.0227    set_bounds 0.0308    solve 0.1648    add 0.0898    
Accumulated time: pickout 0.0734    decision 0.6726    set_bounds 0.1184    solve 0.9292    add 1.3847    
Current (lb-rhs): -0.29921913146972656
275 domains visited
Cumulative time: 4.044384241104126

BaB round 2
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 92] [/input-12, 4] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27382898330688477
10 lb beta sum: 0.04755069687962532, worst -0.27350544929504395
Time: prepare 0.0064    bound 0.1625    transfer 0.0057    finalize 0.0037    func 0.1804    
Accumulated time: func 1.3033    prepare 0.0697    bound 1.1863    transfer 0.0237    finalize 0.0230    
all_split False
======================Cut inference begins======================
max lb tensor(0.54514545) min lb tensor(-0.27339888)
Number of Verified Splits: 216 of 300
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 15
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.04238295555114746 
BICCOS Cumulative time: 0.5316128730773926
Preprocessing time: 0.010073184967041016 Inference time: 0.025234460830688477 Add cuts time: 0.005056858062744141 Cut analysis time: 0.002018451690673828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27340 (9), -0.26974 (9), -0.23790 (9), -0.23021 (9), -0.21185 (9), -0.20970 (9), -0.19722 (9), -0.19325 (9), -0.19056 (9), -0.18354 (9), -0.15430 (9), -0.15406 (9), -0.14857 (9), -0.14398 (9), -0.13835 (9), -0.13824 (9), -0.12992 (9), -0.11938 (9), -0.10147 (9), -0.09872 (9), 
Length of domains: 84
Time: pickout 0.0147    decision 0.0208    set_bounds 0.0212    solve 0.1805    add 0.0868    
Accumulated time: pickout 0.0881    decision 0.6934    set_bounds 0.1396    solve 1.1097    add 1.4715    
Current (lb-rhs): -0.27339887619018555
359 domains visited
Cumulative time: 4.418200254440308

BaB round 3
batch: 84
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-8, 1254] [/input-12, 92] [/input-12, 92] [/input-8, 1241] [/input-8, 1246] [/input-12, 92] [/input-12, 4] [/input-12, 4] 
split level 1: [/input-8, 1261] [/input-8, 1241] [/input-8, 37] [/input-8, 37] [/input-8, 1261] [/input-12, 92] [/input-8, 1254] [/input-8, 37] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25250136852264404
10 lb beta sum: 0.13221319019794464, worst -0.2523000240325928
Time: prepare 0.0080    bound 0.1589    transfer 0.0027    finalize 0.0029    func 0.1748    
Accumulated time: func 1.4781    prepare 0.0780    bound 1.3452    transfer 0.0264    finalize 0.0259    
all_split False
======================Cut inference begins======================
max lb tensor(0.49937320) min lb tensor(-0.25224328)
Number of Verified Splits: 239 of 336
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 10
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.04344940185546875 
BICCOS Cumulative time: 0.5750622749328613
Preprocessing time: 0.011201143264770508 Inference time: 0.02730274200439453 Add cuts time: 0.002791166305541992 Cut analysis time: 0.0021543502807617188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25224 (11), -0.25061 (11), -0.24908 (11), -0.24728 (11), -0.24069 (11), -0.23918 (11), -0.23787 (11), -0.23616 (11), -0.21775 (11), -0.21117 (11), -0.20911 (11), -0.20824 (11), -0.20432 (11), -0.19872 (11), -0.19659 (11), -0.19179 (11), -0.18999 (11), -0.18939 (11), -0.18466 (11), -0.18454 (11), 
Length of domains: 97
Time: pickout 0.0141    decision 0.0213    set_bounds 0.0231    solve 0.1750    add 0.0826    
Accumulated time: pickout 0.1022    decision 0.7148    set_bounds 0.1628    solve 1.2847    add 1.5542    
Current (lb-rhs): -0.2522432804107666
456 domains visited
Cumulative time: 4.788307189941406

BaB round 4
batch: 97
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 37] [/input-8, 1257] [/input-8, 1261] [/input-8, 37] [/input-8, 1257] [/input-8, 1233] [/input-8, 1246] [/input-8, 1261] [/input-8, 1261] [/input-8, 37] 
split level 1: [/input-8, 1254] [/input-8, 156] [/input-8, 156] [/input-8, 1254] [/input-8, 1254] [/input-8, 357] [/input-8, 37] [/input-8, 1254] [/input-8, 156] [/input-8, 1254] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2443171739578247
10 lb beta sum: 0.2749209702014923, worst -0.24414587020874023
Time: prepare 0.0089    bound 0.1902    transfer 0.0018    finalize 0.0036    func 0.2072    
Accumulated time: func 1.6853    prepare 0.0872    bound 1.5354    transfer 0.0282    finalize 0.0295    
all_split False
======================Cut inference begins======================
max lb tensor(0.45379710) min lb tensor(-0.24409842)
Number of Verified Splits: 248 of 388
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 14
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.04697275161743164 
BICCOS Cumulative time: 0.622035026550293
Preprocessing time: 0.013249397277832031 Inference time: 0.029209375381469727 Add cuts time: 0.002900838851928711 Cut analysis time: 0.0016131401062011719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24410 (13), -0.24316 (13), -0.24191 (13), -0.24096 (13), -0.23930 (13), -0.23909 (13), -0.23820 (13), -0.23607 (13), -0.22626 (13), -0.22593 (13), -0.22407 (13), -0.22224 (13), -0.22219 (13), -0.22039 (13), -0.21982 (13), -0.21774 (13), -0.20835 (13), -0.20554 (13), -0.20204 (13), -0.20008 (13), 
Length of domains: 140
Time: pickout 0.0146    decision 0.0205    set_bounds 0.0219    solve 0.2074    add 0.0798    
Accumulated time: pickout 0.1168    decision 0.7353    set_bounds 0.1846    solve 1.4921    add 1.6340    
Current (lb-rhs): -0.24409842491149902
596 domains visited
Cumulative time: 5.191202163696289

BaB round 5
batch: 140
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 37] [/input-8, 1574] [/input-8, 1262] [/input-8, 1246] [/input-8, 1246] [/input-8, 165] [/input-8, 165] [/input-8, 1257] [/input-8, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24388813972473145
10 lb beta sum: 0.8560814261436462, worst -0.23713073134422302
Time: prepare 0.0068    bound 0.1936    transfer 0.0009    finalize 0.0028    func 0.2061    
Accumulated time: func 1.8914    prepare 0.0943    bound 1.7290    transfer 0.0291    finalize 0.0323    
all_split False
======================Cut inference begins======================
max lb tensor(0.61107337) min lb tensor(-0.23706090)
Number of Verified Splits: 146 of 280
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 18
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03566384315490723 
BICCOS Cumulative time: 0.6576988697052002
Preprocessing time: 0.009710550308227539 Inference time: 0.021831512451171875 Add cuts time: 0.0022351741790771484 Cut analysis time: 0.001886606216430664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23706 (14), -0.23431 (14), -0.22944 (14), -0.22541 (14), -0.22537 (14), -0.22309 (14), -0.20600 (14), -0.20502 (14), -0.19619 (14), -0.19284 (14), -0.19263 (14), -0.19245 (14), -0.17707 (14), -0.17640 (14), -0.17467 (14), -0.17403 (14), -0.16883 (14), -0.16791 (14), -0.16782 (14), -0.16565 (14), 
Length of domains: 134
Time: pickout 0.0181    decision 0.0253    set_bounds 0.0150    solve 0.2062    add 0.0807    
Accumulated time: pickout 0.1349    decision 0.7606    set_bounds 0.1996    solve 1.6983    add 1.7147    
Current (lb-rhs): -0.23706090450286865
730 domains visited
Cumulative time: 5.580669641494751

BaB round 6
batch: 134
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 156] [/input-8, 1246] [/input-8, 165] [/input-8, 37] [/input-8, 156] [/input-8, 1254] [/input-12, 71] [/input-8, 156] [/input-8, 1254] [/input-8, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23692619800567627
10 lb beta sum: 1.5095765590667725, worst -0.22339904308319092
Time: prepare 0.0066    bound 0.1895    transfer 0.0015    finalize 0.0029    func 0.2035    
Accumulated time: func 2.0949    prepare 0.1011    bound 1.9186    transfer 0.0306    finalize 0.0352    
all_split False
======================Cut inference begins======================
max lb tensor(0.57761800) min lb tensor(-0.22331768)
Number of Verified Splits: 210 of 268
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.042488813400268555 
BICCOS Cumulative time: 0.7001876831054688
Preprocessing time: 0.008842706680297852 Inference time: 0.028200626373291016 Add cuts time: 0.0031430721282958984 Cut analysis time: 0.002302408218383789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22332 (15), -0.22159 (15), -0.22100 (15), -0.22010 (15), -0.16717 (15), -0.16031 (15), -0.15052 (15), -0.14934 (15), -0.14812 (15), -0.14733 (15), -0.14312 (15), -0.14246 (15), -0.13966 (15), -0.13550 (15), -0.06289 (15), -0.06287 (15), -0.06261 (15), -0.05596 (15), -0.05509 (15), -0.05398 (15), 
Length of domains: 58
Time: pickout 0.0154    decision 0.0245    set_bounds 0.0136    solve 0.2036    add 0.0783    
Accumulated time: pickout 0.1502    decision 0.7851    set_bounds 0.2132    solve 1.9019    add 1.7930    
Current (lb-rhs): -0.2233176827430725
788 domains visited
Cumulative time: 5.9678919315338135

BaB round 7
batch: 58
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-8, 1254] [/input-12, 71] [/input-8, 156] [/input-12, 71] [/input-8, 1257] [/input-8, 1257] [/input-8, 912] [/input-8, 179] [/input-8, 912] 
split level 1: [/input-8, 944] [/input-12, 71] [/input-8, 788] [/input-8, 944] [/input-8, 788] [/input-8, 944] [/input-8, 788] [/input-8, 179] [/input-8, 912] [/input-8, 179] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6097896099090576, worst -0.21779173612594604
10 lb beta sum: 2.2626023292541504, worst -0.21074426174163818
Time: prepare 0.0109    bound 0.1587    transfer 0.0008    finalize 0.0021    func 0.1741    
Accumulated time: func 2.2690    prepare 0.1125    bound 2.0772    transfer 0.0313    finalize 0.0373    
all_split False
======================Cut inference begins======================
max lb tensor(0.32386714) min lb tensor(-0.21068645)
Number of Verified Splits: 104 of 232
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.02541375160217285 
BICCOS Cumulative time: 0.7256014347076416
Preprocessing time: 0.007787942886352539 Inference time: 0.013518333435058594 Add cuts time: 0.0025243759155273438 Cut analysis time: 0.001583099365234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21069 (17), -0.20966 (17), -0.20614 (17), -0.20608 (17), -0.20535 (17), -0.20489 (17), -0.20434 (17), -0.20300 (17), -0.19597 (17), -0.19495 (17), -0.19081 (17), -0.18960 (17), -0.15039 (17), -0.14733 (17), -0.14733 (17), -0.14645 (17), -0.14426 (17), -0.14226 (17), -0.14022 (17), -0.13942 (17), 
Length of domains: 128
Time: pickout 0.0135    decision 0.0217    set_bounds 0.0160    solve 0.1742    add 0.0774    
Accumulated time: pickout 0.1638    decision 0.8067    set_bounds 0.2292    solve 2.0761    add 1.8704    
Current (lb-rhs): -0.21068644523620605
916 domains visited
Cumulative time: 6.304073333740234

BaB round 8
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 1262] [/input-8, 141] [/input-8, 1262] [/input-8, 141] [/input-8, 165] [/input-8, 141] [/input-8, 1262] [/input-8, 165] [/input-8, 141] 
cut re-enabled after branching node selection
0 lb beta sum: 2.665004014968872, worst -0.20810985565185547
10 lb beta sum: 2.665004014968872, worst -0.2080608606338501
Time: prepare 0.0120    bound 0.1454    transfer 0.0015    finalize 0.0020    func 0.1626    
Accumulated time: func 2.4316    prepare 0.1247    bound 2.2226    transfer 0.0328    finalize 0.0393    
all_split False
======================Cut inference begins======================
max lb tensor(0.13773286) min lb tensor(-0.20803642)
Number of Verified Splits: 43 of 256
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.01699972152709961 
BICCOS Cumulative time: 0.7426011562347412
Preprocessing time: 0.008334875106811523 Inference time: 0.005913734436035156 Add cuts time: 0.0007312297821044922 Cut analysis time: 0.0020198822021484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20804 (18), -0.20716 (18), -0.20604 (18), -0.20587 (18), -0.20475 (18), -0.20426 (18), -0.20291 (18), -0.19950 (18), -0.19938 (18), -0.19860 (18), -0.19803 (18), -0.19079 (18), -0.18985 (18), -0.18972 (18), -0.18941 (18), -0.18922 (18), -0.18841 (18), -0.18785 (18), -0.18734 (18), -0.18395 (18), 
Length of domains: 213
Time: pickout 0.0160    decision 0.0184    set_bounds 0.0134    solve 0.1627    add 0.1120    
Accumulated time: pickout 0.1798    decision 0.8251    set_bounds 0.2427    solve 2.2388    add 1.9824    
Current (lb-rhs): -0.2080364227294922
1129 domains visited
Cumulative time: 6.651221752166748

BaB round 9
batch: 213
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 165] [/input-8, 165] [/input-8, 165] [/input-8, 156] [/input-8, 165] [/input-8, 173] [/input-8, 1246] [/input-8, 1262] [/input-8, 173] [/input-8, 1246] 
cut re-enabled after branching node selection
0 lb beta sum: 2.6713173389434814, worst -0.2035585641860962
10 lb beta sum: 2.6713173389434814, worst -0.20351707935333252
Time: prepare 0.0191    bound 0.1501    transfer 0.0046    finalize 0.0041    func 0.1807    
Accumulated time: func 2.6123    prepare 0.1440    bound 2.3726    transfer 0.0374    finalize 0.0434    
all_split False
======================Cut inference begins======================
max lb tensor(0.16489708) min lb tensor(-0.20349801)
Number of Verified Splits: 82 of 426
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.030501842498779297 
BICCOS Cumulative time: 0.7731029987335205
Preprocessing time: 0.013236522674560547 Inference time: 0.012574434280395508 Add cuts time: 0.002674102783203125 Cut analysis time: 0.002016782760620117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20350 (19), -0.20220 (19), -0.20215 (19), -0.20181 (19), -0.20133 (19), -0.20080 (19), -0.20046 (19), -0.20006 (19), -0.19987 (19), -0.19931 (19), -0.19866 (19), -0.19803 (19), -0.19406 (19), -0.19326 (19), -0.19280 (19), -0.19244 (19), -0.19232 (19), -0.19201 (19), -0.19100 (19), -0.19098 (19), 
Length of domains: 344
Time: pickout 0.0608    decision 0.0255    set_bounds 0.0200    solve 0.1809    add 0.0895    
Accumulated time: pickout 0.2405    decision 0.8505    set_bounds 0.2626    solve 2.4197    add 2.0719    
Current (lb-rhs): -0.2034980058670044
1473 domains visited
Cumulative time: 7.06648325920105

BaB round 10
batch: 344
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1262] [/input-8, 1246] [/input-8, 1246] [/input-8, 1246] [/input-8, 1246] [/input-12, 71] [/input-8, 1246] [/input-8, 156] [/input-8, 1246] [/input-8, 1246] 
cut re-enabled after branching node selection
0 lb beta sum: 2.624002695083618, worst -0.20349884033203125
10 lb beta sum: 2.624002695083618, worst -0.20350468158721924
Time: prepare 0.0307    bound 0.1488    transfer 0.0050    finalize 0.0042    func 0.1943    
Accumulated time: func 2.8067    prepare 0.1750    bound 2.5214    transfer 0.0424    finalize 0.0476    
all_split False
======================Cut inference begins======================
max lb tensor(0.18273914) min lb tensor(-0.20348823)
Number of Verified Splits: 138 of 688
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.05028200149536133 
BICCOS Cumulative time: 0.8233850002288818
Preprocessing time: 0.02174067497253418 Inference time: 0.025043249130249023 Add cuts time: 0.002002716064453125 Cut analysis time: 0.001495361328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20349 (20), -0.20218 (20), -0.20213 (20), -0.20179 (20), -0.20130 (20), -0.20077 (20), -0.20069 (20), -0.20045 (20), -0.19983 (20), -0.19912 (20), -0.19910 (20), -0.19772 (20), -0.19765 (20), -0.19706 (20), -0.19624 (20), -0.19572 (20), -0.19381 (20), -0.19319 (20), -0.19253 (20), -0.19233 (20), 
Length of domains: 550
Time: pickout 0.0192    decision 0.0320    set_bounds 0.0329    solve 0.1946    add 0.0934    
Accumulated time: pickout 0.2597    decision 0.8825    set_bounds 0.2955    solve 2.6143    add 2.1654    
Current (lb-rhs): -0.20348823070526123
2023 domains visited
Cumulative time: 7.497476577758789

BaB round 11
batch: 550
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1181] [/input-8, 1246] [/input-8, 779] [/input-8, 1181] [/input-8, 1262] [/input-8, 788] [/input-8, 1246] [/input-8, 1246] [/input-8, 1181] [/input-8, 147] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20966792106628418
10 lb beta sum: 1.4377927780151367, worst -0.20017242431640625
Time: prepare 0.0263    bound 0.1776    transfer 0.0080    finalize 0.0116    func 0.2348    
Accumulated time: func 3.0415    prepare 0.2015    bound 2.6991    transfer 0.0504    finalize 0.0592    
all_split False
======================Cut inference begins======================
max lb tensor(0.27861738) min lb tensor(-0.20014101)
Number of Verified Splits: 330 of 1100
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.10843563079833984 
BICCOS Cumulative time: 0.9318206310272217
Preprocessing time: 0.04433465003967285 Inference time: 0.05588388442993164 Add cuts time: 0.006409645080566406 Cut analysis time: 0.0018074512481689453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20014 (21), -0.19888 (21), -0.19875 (21), -0.19836 (21), -0.19807 (21), -0.19745 (21), -0.19689 (21), -0.19651 (21), -0.19645 (21), -0.19507 (21), -0.19490 (21), -0.19421 (21), -0.19375 (21), -0.19362 (21), -0.19340 (21), -0.19334 (21), -0.19325 (21), -0.19294 (21), -0.19240 (21), -0.19237 (21), 
Length of domains: 770
Time: pickout 0.0217    decision 0.0436    set_bounds 0.2914    solve 0.2353    add 0.1103    
Accumulated time: pickout 0.2814    decision 0.9261    set_bounds 0.5869    solve 2.8496    add 2.2757    
Current (lb-rhs): -0.20014101266860962
2793 domains visited
Cumulative time: 8.324233531951904

BaB round 12
batch: 770
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1574] [/input-8, 1262] [/input-8, 1574] [/input-8, 1246] [/input-8, 1574] [/input-8, 149] [/input-8, 941] [/input-8, 779] [/input-12, 55] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5609303712844849, worst -0.20014148950576782
10 lb beta sum: 1.5609303712844849, worst -0.20013493299484253
Time: prepare 0.0714    bound 0.1708    transfer 0.0087    finalize 0.0101    func 0.2722    
Accumulated time: func 3.3136    prepare 0.2733    bound 2.8698    transfer 0.0591    finalize 0.0692    
all_split False
======================Cut inference begins======================
max lb tensor(0.14557052) min lb tensor(-0.20011848)
Number of Verified Splits: 74 of 1540
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.07038402557373047 
BICCOS Cumulative time: 1.0022046566009521
Preprocessing time: 0.05438852310180664 Inference time: 0.012410640716552734 Add cuts time: 0.001874685287475586 Cut analysis time: 0.0017101764678955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20012 (22), -0.19886 (22), -0.19872 (22), -0.19835 (22), -0.19806 (22), -0.19741 (22), -0.19688 (22), -0.19647 (22), -0.19377 (22), -0.19358 (22), -0.19304 (22), -0.19304 (22), -0.19296 (22), -0.19251 (22), -0.19242 (22), -0.19218 (22), -0.19206 (22), -0.19201 (22), -0.19185 (22), -0.19180 (22), 
Length of domains: 1466
Time: pickout 0.0619    decision 0.0616    set_bounds 0.0788    solve 0.2729    add 0.1115    
Accumulated time: pickout 0.3433    decision 0.9877    set_bounds 0.6657    solve 3.1225    add 2.3872    
Current (lb-rhs): -0.20011848211288452
4259 domains visited
Cumulative time: 8.98840594291687

BaB round 13
batch: 1466
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 779] [/input-8, 779] [/input-8, 779] [/input-8, 1181] [/input-8, 149] [/input-12, 55] [/input-8, 1241] [/input-8, 1181] [/input-8, 779] [/input-8, 1241] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5450832843780518, worst -0.1988586187362671
10 lb beta sum: 1.5450832843780518, worst -0.19886839389801025
Time: prepare 0.1440    bound 0.2385    transfer 0.0085    finalize 0.0210    func 0.4319    
Accumulated time: func 3.7455    prepare 0.4175    bound 3.1084    transfer 0.0676    finalize 0.0902    
all_split False
======================Cut inference begins======================
max lb tensor(0.23973274) min lb tensor(-0.19885802)
Number of Verified Splits: 123 of 2932
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.14061689376831055 
BICCOS Cumulative time: 1.1428215503692627
Preprocessing time: 0.10978531837463379 Inference time: 0.02593541145324707 Add cuts time: 0.0031256675720214844 Cut analysis time: 0.0017704963684082031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19886 (23), -0.19806 (23), -0.19752 (23), -0.19737 (23), -0.19687 (23), -0.19643 (23), -0.19613 (23), -0.19572 (23), -0.19282 (23), -0.19274 (23), -0.19238 (23), -0.19222 (23), -0.19187 (23), -0.19172 (23), -0.19162 (23), -0.19154 (23), -0.19141 (23), -0.19123 (23), -0.19107 (23), -0.19093 (23), 
Length of domains: 2809
Time: pickout 0.0452    decision 0.1009    set_bounds 0.1384    solve 0.4328    add 0.1071    
Accumulated time: pickout 0.3886    decision 1.0886    set_bounds 0.8041    solve 3.5553    add 2.4943    
Current (lb-rhs): -0.19885802268981934
7068 domains visited
Cumulative time: 9.962871789932251

BaB round 14
batch: 2809
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1241] [/input-8, 1241] [/input-8, 1241] [/input-12, 55] [/input-12, 55] [/input-8, 1262] [/input-12, 55] [/input-8, 1241] [/input-8, 1262] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5359339714050293, worst -0.19751781225204468
10 lb beta sum: 1.5359339714050293, worst -0.19752520322799683
Time: prepare 0.2662    bound 0.3774    transfer 0.0316    finalize 0.0375    func 0.7491    
Accumulated time: func 4.4946    prepare 0.6841    bound 3.4858    transfer 0.0992    finalize 0.1277    
all_split False
======================Cut inference begins======================
max lb tensor(0.24043560) min lb tensor(-0.19751650)
Number of Verified Splits: 494 of 5618
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.4935576915740967 
BICCOS Cumulative time: 1.6363792419433594
Preprocessing time: 0.37420105934143066 Inference time: 0.09667587280273438 Add cuts time: 0.02095198631286621 Cut analysis time: 0.0017287731170654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19752 (24), -0.19657 (24), -0.19613 (24), -0.19574 (24), -0.19571 (24), -0.19512 (24), -0.19429 (24), -0.19413 (24), -0.19214 (24), -0.19093 (24), -0.19083 (24), -0.19081 (24), -0.19079 (24), -0.19033 (24), -0.19013 (24), -0.19012 (24), -0.19010 (24), -0.19002 (24), -0.18980 (24), -0.18956 (24), 
Length of domains: 5124
Time: pickout 0.0637    decision 0.3553    set_bounds 0.2647    solve 0.7512    add 0.1459    
Accumulated time: pickout 0.4523    decision 1.4439    set_bounds 1.0688    solve 4.3065    add 2.6402    
Current (lb-rhs): -0.19751650094985962
12192 domains visited
Cumulative time: 12.053080797195435

BaB round 15
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 141] [/input-8, 141] [/input-8, 141] [/input-8, 1262] [/input-8, 1262] [/input-8, 1262] [/input-8, 141] [/input-8, 1262] [/input-8, 141] [/input-8, 141] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4945666790008545, worst -0.19682258367538452
10 lb beta sum: 1.4945666790008545, worst -0.19682234525680542
Time: prepare 0.4012    bound 0.5205    transfer 0.0445    finalize 0.0541    func 1.0740    
Accumulated time: func 5.5686    prepare 1.0856    bound 4.0063    transfer 0.1437    finalize 0.1818    
all_split False
======================Cut inference begins======================
max lb tensor(0.24345469) min lb tensor(-0.19680876)
Number of Verified Splits: 1525 of 8192
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 607 constraints, 28403 nonzero elements
cuts preparing time: 0.2418
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 635.
#cuts 1-3: 147
#cuts 4-6: 4
#cuts 7-9: 2
#cuts 10-12: 3
#cuts 13-15: 13
#cuts 16-18: 16
#cuts 19-21: 32
#cuts >= 20: 418
BICCOS time: 1.1477773189544678 
BICCOS Cumulative time: 2.784156560897827
Preprocessing time: 0.27965426445007324 Inference time: 0.3410515785217285 Add cuts time: 0.05018782615661621 Cut analysis time: 0.4768836498260498
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19681 (25), -0.19542 (25), -0.19502 (25), -0.19358 (25), -0.19223 (25), -0.19169 (25), -0.19139 (25), -0.19139 (25), -0.19109 (25), -0.19082 (25), -0.19081 (25), -0.19017 (25), -0.19013 (25), -0.18995 (25), -0.18991 (25), -0.18954 (25), -0.18938 (25), -0.18933 (25), -0.18927 (25), -0.18916 (25), 
Length of domains: 7695
Time: pickout 0.0863    decision 0.2506    set_bounds 0.5939    solve 1.0763    add 0.2005    
Accumulated time: pickout 0.5386    decision 1.6945    set_bounds 1.6627    solve 5.3828    add 2.8407    
Current (lb-rhs): -0.19680875539779663
18859 domains visited
current_vram/total_varm: 10.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 15.445426940917969

BaB round 16
batch: 7695
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 779] [/input-8, 173] [/input-8, 1241] [/input-12, 55] [/input-8, 944] [/input-8, 1181] [/input-12, 55] [/input-8, 1574] [/input-12, 55] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19694721698760986
10 lb beta sum: 4.717711925506592, worst -0.16450613737106323
Time: prepare 0.3742    bound 3.0955    transfer 0.0835    finalize 0.1115    func 3.7637    
Accumulated time: func 9.3324    prepare 1.4603    bound 7.1018    transfer 0.2272    finalize 0.2932    
all_split False
======================Cut inference begins======================
max lb tensor(0.39644766) min lb tensor(-0.15609568)
Number of Verified Splits: 2358 of 15390
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 891 constraints, 40478 nonzero elements
cuts preparing time: 0.0157
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 916.
#cuts 1-3: 185
#cuts 4-6: 3
#cuts 7-9: 1
#cuts 10-12: 6
#cuts 13-15: 22
#cuts 16-18: 34
#cuts 19-21: 63
#cuts >= 20: 602
BICCOS time: 1.5030956268310547 
BICCOS Cumulative time: 4.287252187728882
Preprocessing time: 0.5220375061035156 Inference time: 0.5513720512390137 Add cuts time: 0.08509039878845215 Cut analysis time: 0.34459567070007324
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15610 (26), -0.15542 (26), -0.15541 (26), -0.15526 (26), -0.15508 (26), -0.15469 (26), -0.15406 (26), -0.15397 (26), -0.15373 (26), -0.15356 (26), -0.15324 (26), -0.15320 (26), -0.15312 (26), -0.15307 (26), -0.15300 (26), -0.15256 (26), -0.15230 (26), -0.15215 (26), -0.15206 (26), -0.15202 (26), 
Length of domains: 13032
Time: pickout 0.2516    decision 0.4671    set_bounds 1.0346    solve 4.0230    add 0.1753    
Accumulated time: pickout 0.7902    decision 2.1616    set_bounds 2.6974    solve 9.4058    add 3.0160    
Current (lb-rhs): -0.1560956835746765
31891 domains visited
Cumulative time: 22.94682288169861

BaB round 17
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 1181] [/input-8, 1181] [/input-8, 149] [/input-8, 141] [/input-8, 1372] [/input-8, 1181] [/input-12, 55] [/input-8, 944] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1956261396408081
10 lb beta sum: 5.910114765167236, worst -0.1558629274368286
Time: prepare 0.3954    bound 4.1326    transfer 0.0854    finalize 0.1564    func 4.8808    
Accumulated time: func 14.2132    prepare 1.8561    bound 11.2343    transfer 0.3126    finalize 0.4496    
all_split False
======================Cut inference begins======================
max lb tensor(0.37650299) min lb tensor(-0.14596415)
Number of Verified Splits: 1802 of 16384
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 23
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.1338825225830078 
BICCOS Cumulative time: 5.42113471031189
Preprocessing time: 0.621199369430542 Inference time: 0.4260120391845703 Add cuts time: 0.07832217216491699 Cut analysis time: 0.008348941802978516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15307 (26), -0.14932 (26), -0.14784 (26), -0.14769 (26), -0.14768 (26), -0.14596 (27), -0.14555 (26), -0.14551 (26), -0.14550 (26), -0.14544 (26), -0.14533 (27), -0.14530 (26), -0.14530 (26), -0.14505 (26), -0.14497 (27), -0.14487 (26), -0.14473 (26), -0.14446 (27), -0.14441 (26), -0.14437 (27), 
Length of domains: 19422
Time: pickout 0.1546    decision 0.7528    set_bounds 1.1125    solve 4.8897    add 0.3743    
Accumulated time: pickout 0.9448    decision 2.9145    set_bounds 3.8099    solve 14.2956    add 3.3903    
Current (lb-rhs): -0.1530737280845642
46473 domains visited
current_vram/total_varm: 26.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 31.440021991729736

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 149] [/input-8, 162] [/input-8, 1748] [/input-8, 149] [/input-8, 1748] [/input-8, 941] [/input-8, 147] [/input-8, 1238] [/input-8, 779] [/input-8, 1238] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19322752952575684
10 lb beta sum: 1.0817971229553223, worst -0.18755117058753967
Time: prepare 0.7936    bound 1.8383    transfer 0.1687    finalize 0.2362    func 3.2498    
Accumulated time: func 17.4630    prepare 2.6505    bound 13.0726    transfer 0.4813    finalize 0.6858    
all_split False
======================Cut inference begins======================
max lb tensor(0.29427075) min lb tensor(-0.15307373)
Number of Verified Splits: 13764 of 32768
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 1337 constraints, 70926 nonzero elements
cuts preparing time: 0.0268
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1372.
#cuts 1-3: 241
#cuts 4-6: 12
#cuts 7-9: 4
#cuts 10-12: 18
#cuts 13-15: 56
#cuts 16-18: 111
#cuts 19-21: 86
#cuts >= 20: 844
BICCOS time: 5.834000110626221 
BICCOS Cumulative time: 11.25513482093811
Preprocessing time: 1.0734190940856934 Inference time: 3.8442342281341553 Add cuts time: 0.284679651260376 Cut analysis time: 0.6316671371459961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15307 (27), -0.15307 (27), -0.14932 (27), -0.14932 (27), -0.14784 (27), -0.14784 (27), -0.14769 (27), -0.14769 (27), -0.14768 (27), -0.14768 (27), -0.14596 (28), -0.14555 (27), -0.14555 (27), -0.14551 (27), -0.14551 (27), -0.14550 (27), -0.14550 (27), -0.14544 (27), -0.14544 (27), -0.14533 (28), 
Length of domains: 22042
Time: pickout 0.3272    decision 2.1999    set_bounds 2.5837    solve 3.6465    add 0.2421    
Accumulated time: pickout 1.2721    decision 5.1144    set_bounds 6.3935    solve 17.9421    add 3.6325    
Current (lb-rhs): -0.1530737280845642
65477 domains visited
current_vram/total_varm: 29.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 46.47643184661865

BaB round 19
batch: 22042
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2029] [/input-8, 146] [/input-8, 147] [/input-8, 1265] [/input-8, 347] [/input-8, 941] [/input-8, 149] [/input-8, 1181] [/input-8, 1265] [/input, 858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18947815895080566
10 lb beta sum: 7.037364959716797, worst -0.15371131896972656
Time: prepare 1.0720    bound 14.2529    transfer 0.2379    finalize 0.8791    func 16.7363    
Accumulated time: func 34.1993    prepare 3.7230    bound 27.3254    transfer 0.7192    finalize 1.5650    
all_split False
======================Cut inference begins======================
max lb tensor(0.40033638) min lb tensor(-0.13878417)
Number of Verified Splits: 5191 of 44084
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 1584 constraints, 86450 nonzero elements
cuts preparing time: 0.0310
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1615.
#cuts 1-3: 231
#cuts 4-6: 5
#cuts 7-9: 11
#cuts 10-12: 37
#cuts 13-15: 100
#cuts 16-18: 147
#cuts 19-21: 129
#cuts >= 20: 955
BICCOS time: 4.656487464904785 
BICCOS Cumulative time: 15.911622285842896
Preprocessing time: 1.7014153003692627 Inference time: 2.001431941986084 Add cuts time: 0.18438339233398438 Cut analysis time: 0.7692568302154541
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13878 (29), -0.13794 (28), -0.13728 (29), -0.13692 (29), -0.13594 (28), -0.13559 (29), -0.13547 (29), -0.13488 (29), -0.13483 (29), -0.13443 (28), -0.13432 (29), -0.13431 (29), -0.13429 (29), -0.13370 (29), -0.13355 (29), -0.13337 (29), -0.13334 (29), -0.13331 (28), -0.13328 (29), -0.13321 (29), 
Length of domains: 38893
Time: pickout 0.6057    decision 2.4747    set_bounds 2.6233    solve 16.7452    add 0.8953    
Accumulated time: pickout 1.8778    decision 7.5890    set_bounds 9.0168    solve 34.6872    add 4.5277    
Current (lb-rhs): -0.13878417015075684
104370 domains visited
Cumulative time: 74.62933158874512

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1181] [/input-8, 1372] [/input-8, 1372] [/input-8, 1372] [/input-12, 55] [/input-8, 1265] [/input-12, 55] [/input-8, 1372] [/input-8, 162] [/input, 873] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18802618980407715
10 lb beta sum: 7.415997505187988, worst -0.14878487586975098
Time: prepare 1.6371    bound 29.0376    transfer 0.3283    finalize 0.5379    func 31.9679    
Accumulated time: func 66.1672    prepare 5.3605    bound 56.3630    transfer 1.0475    finalize 2.1029    
all_split False
======================Cut inference begins======================
max lb tensor(0.76187778) min lb tensor(-0.13145638)
Number of Verified Splits: 6081 of 65536
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 1836 constraints, 95843 nonzero elements
cuts preparing time: 0.0387
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1860.
#cuts 1-3: 226
#cuts 4-6: 4
#cuts 7-9: 21
#cuts 10-12: 60
#cuts 13-15: 135
#cuts 16-18: 215
#cuts 19-21: 145
#cuts >= 20: 1054
BICCOS time: 5.791726350784302 
BICCOS Cumulative time: 21.703348636627197
Preprocessing time: 3.1286630630493164 Inference time: 1.6105802059173584 Add cuts time: 0.1934807300567627 Cut analysis time: 0.8590023517608643
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13692 (29), -0.13429 (29), -0.13337 (29), -0.13204 (29), -0.13204 (29), -0.13196 (29), -0.13194 (29), -0.13146 (29), -0.13138 (30), -0.13109 (30), -0.13083 (30), -0.13082 (30), -0.13059 (30), -0.13028 (30), -0.13016 (29), -0.12998 (30), -0.12996 (29), -0.12994 (30), -0.12993 (29), -0.12968 (29), 
Length of domains: 65580
Time: pickout 0.6578    decision 3.6231    set_bounds 4.5657    solve 31.9800    add 19.6274    
Accumulated time: pickout 2.5356    decision 11.2121    set_bounds 13.5825    solve 66.6673    add 24.1551    
Current (lb-rhs): -0.13692188262939453
163825 domains visited
Cumulative time: 141.0531075000763

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 162] [/input-8, 1372] [/input-8, 347] [/input, 857] [/input-8, 347] [/input-8, 1262] [/input-8, 1181] [/input-12, 55] [/input-8, 162] [/input-8, 162] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1860036849975586
10 lb beta sum: 7.939920425415039, worst -0.15232694149017334
Time: prepare 1.7041    bound 31.8808    transfer 0.3357    finalize 0.5810    func 34.9316    
Accumulated time: func 101.0987    prepare 7.0651    bound 88.2438    transfer 1.3831    finalize 2.6839    
all_split False
======================Cut inference begins======================
max lb tensor(0.41678432) min lb tensor(-0.12855732)
Number of Verified Splits: 5458 of 65536
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 1968 constraints, 98930 nonzero elements
cuts preparing time: 0.0385
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1992.
#cuts 1-3: 209
#cuts 4-6: 8
#cuts 7-9: 36
#cuts 10-12: 90
#cuts 13-15: 188
#cuts 16-18: 259
#cuts 19-21: 173
#cuts >= 20: 1029
BICCOS time: 5.937408447265625 
BICCOS Cumulative time: 27.640757083892822
Preprocessing time: 2.2590484619140625 Inference time: 2.6046953201293945 Add cuts time: 0.19373345375061035 Cut analysis time: 0.8799312114715576
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13138 (30), -0.13109 (30), -0.13083 (30), -0.13082 (30), -0.13059 (30), -0.13028 (30), -0.12998 (30), -0.12994 (30), -0.12946 (30), -0.12925 (30), -0.12920 (30), -0.12867 (30), -0.12856 (30), -0.12825 (30), -0.12820 (30), -0.12778 (29), -0.12769 (30), -0.12753 (30), -0.12749 (30), -0.12744 (30), 
Length of domains: 92890
Time: pickout 0.6380    decision 4.2790    set_bounds 5.4050    solve 34.9483    add 0.4463    
Accumulated time: pickout 3.1736    decision 15.4911    set_bounds 18.9875    solve 101.6156    add 24.6014    
Current (lb-rhs): -0.13138437271118164
223903 domains visited
Cumulative time: 192.977769613266

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 779] [/input-8, 944] [/input-8, 1652] [/input-8, 1652] [/input-8, 944] [/input-8, 944] [/input-8, 162] [/input-8, 347] [/input-8, 347] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18659448623657227
10 lb beta sum: 8.30636978149414, worst -0.14479243755340576
Time: prepare 1.7504    bound 33.4659    transfer 0.3269    finalize 2.8422    func 38.8061    
Accumulated time: func 139.9048    prepare 8.8161    bound 121.7098    transfer 1.7100    finalize 5.5260    
all_split False
======================Cut inference begins======================
max lb tensor(0.37398601) min lb tensor(-0.12648308)
Number of Verified Splits: 4599 of 65536
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts: total 2050 constraints, 100000 nonzero elements
cuts preparing time: 0.0483
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2075.
#cuts 1-3: 204
#cuts 4-6: 10
#cuts 7-9: 36
#cuts 10-12: 96
#cuts 13-15: 220
#cuts 16-18: 261
#cuts 19-21: 188
#cuts >= 20: 1060
BICCOS time: 7.56499171257019 
BICCOS Cumulative time: 35.20574879646301
Preprocessing time: 2.6493773460388184 Inference time: 3.82942795753479 Add cuts time: 0.1634540557861328 Cut analysis time: 0.9227323532104492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12856 (30), -0.12749 (30), -0.12678 (30), -0.12649 (30), -0.12648 (31), -0.12602 (30), -0.12524 (30), -0.12519 (31), -0.12489 (31), -0.12485 (31), -0.12480 (31), -0.12412 (30), -0.12409 (31), -0.12402 (31), -0.12401 (31), -0.12391 (30), -0.12377 (30), -0.12354 (30), -0.12350 (30), -0.12346 (30), 
Length of domains: 121059
Time: pickout 0.7732    decision 3.4969    set_bounds 5.3542    solve 38.8341    add 0.4586    
Accumulated time: pickout 3.9468    decision 18.9880    set_bounds 24.3418    solve 140.4497    add 25.0600    
Current (lb-rhs): -0.12855732440948486
284840 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=2_26952054.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=2_26952054.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=2_26952054.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=2_26952054.log
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=59_spec=4_26952054.log
found process for pidx=2
kill process for pidx=2
found process for pidx=4
Result: unknown in 255.4850 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.67420197, -25.24380302, -28.67889023, -28.16714287, -31.08404350,
         -29.38106728, -30.15142441, -31.47988510, -26.39269066, -27.12945747]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 131, 1, 576] with unstable size 130 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 576] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [130]; unstable size 130; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 130] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58424401, 2.27789831, 1.83070707, 4.66640329, 2.88375115, 3.73132467,
         4.99384832, 0.22025681, 1.28892255]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [969]; unstable size 969; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 342, 1, 969] with unstable size 341 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 969] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 969] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [341]; unstable size 341; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 341] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 341] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.74619770,  0.19975376,  1.29172361, -0.31224108,  1.47659290,
          0.91263294,  0.33260223, -2.13532138, -1.77720261]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.82417488, -22.89990807, -24.55294609, -25.83590508, -23.99347115,
         -26.13236237, -25.80495453, -25.02459717, -21.89008331, -22.53929710]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092],
         [-22.82417488, -22.89990807, -24.55294800, -25.83590889, -23.99347305,
          -26.13236427, -25.80495453, -25.02459717, -21.89008522, -22.53930092]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07573318,  1.16929817, -0.93408966, -0.28487396]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0807 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.59115791, -34.97940826, -33.80213165, -37.62691879, -34.83726883,
         -38.96181488, -38.03176880, -36.83436584, -27.23085785, -35.44748306]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 675] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 675] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 186] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53111207,  6.68231106,  5.40997410,  9.09447956,  6.24458981,
         10.17940712,  9.45173359,  8.14738464,  7.13950682]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 591] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 591] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 126] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.02588892,  2.80756664, -2.69469118, -0.18732274, -1.80930603,
         -1.25439477,  0.15932608,  1.76952982,  3.03217888]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.97131920, -28.80028915, -23.13581467, -25.54052544, -23.92788124,
         -24.59213448, -25.03964615, -26.08118820, -27.66898346, -29.01627922]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113],
         [-26.97132111, -28.80028915, -23.13581467, -25.54052544, -23.92788315,
          -24.59213638, -25.03964615, -26.08118629, -27.66898155, -29.01628113]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.90383148,  0.50087929, -1.11176300, -0.44750977]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1119]; unstable size 1119; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 1119] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 1119] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1119] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 286] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.60318446,  7.55680847,  1.79625535, -0.18556568,  1.88933921,
          1.24666548,  2.70504045,  5.15829468,  6.78245831]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
         -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.62it/s]100%|██████████| 1/1 [00:00<00:00,  7.61it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.81661415, -22.46876526, -13.03005505, -15.94738007, -13.62407589,
          -16.17176628, -15.44046783, -17.37049484, -19.77799225, -21.58205223]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.59402084]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1344 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 31.233139038085938
alpha/beta optimization time: 1.3808908462524414
initial alpha-crown bounds: tensor([[ 3.65191054,  7.65019608,  1.84882593, -0.11801758,  1.94617438,
          1.30992103,  2.79970694,  5.27360153,  6.87081909]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11801758408546448
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6707 seconds.
lower bounds for all target labels: [3.6519112586975098, 7.650197982788086, 1.8488221168518066, -0.11801716685295105, 1.9461749792099, 1.3099218606948853, 2.7997076511383057, 5.273598670959473, 6.870820999145508]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
Process 40220 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 40220 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.34015083312988
Verifying property 0 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.650196075439453.

Properties batch 1, size 1
Remaining timeout: 198.01709389686584
Verifying property 1 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.870819091796875.

Properties batch 2, size 1
Remaining timeout: 197.87320113182068
Verifying property 2 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.273601531982422.

Properties batch 3, size 1
Remaining timeout: 197.72803568840027
Verifying property 3 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6519105434417725.

Properties batch 4, size 1
Remaining timeout: 197.58898425102234
Verifying property 4 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7997069358825684.

Properties batch 5, size 1
Remaining timeout: 197.42967224121094
Verifying property 5 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9461743831634521.

Properties batch 6, size 1
Remaining timeout: 197.28907823562622
Verifying property 6 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8488259315490723.

Properties batch 7, size 1
Remaining timeout: 197.14872884750366
Verifying property 7 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3099210262298584.

Properties batch 8, size 1
Remaining timeout: 197.0009458065033
Verifying property 8 with 1 instances.
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11801758]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.24694061, -22.01322937, -12.40090942, -15.54353809, -13.43921661,
        -15.79218292, -15.07034302, -17.14505386, -19.37706184, -21.17110634],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11801758]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1119
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 284
Node /15 input 0: size torch.Size([100]) unstable 28
-----------------
# of unstable neurons: 1431
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008702278137207031
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0584    transfer 0.0001    finalize 0.0002    func 0.0590    
Accumulated time: func 0.0590    prepare 0.0003    bound 0.0584    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 67] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 10] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 55] 
split level 10: [/input-12, 83] 
split level 11: [/input-12, 42] 
split level 12: [/input-8, 2013] 
split level 13: [/input-12, 86] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 181] 
split level 17: [/input-8, 182] 
split level 18: [/input-8, 156] 
split level 19: [/input-8, 2009] 
split level 20: [/input-8, 1076] 
split level 21: [/input-8, 1389] 
split level 22: [/input-8, 1186] 
split level 23: [/input-8, 1372] 
split level 24: [/input-8, 1244] 
split level 25: [/input-8, 2005] 
split level 26: [/input-8, 1181] 
split level 27: [/input-8, 1390] 
split level 28: [/input-8, 171] 
split level 29: [/input-8, 1366] 
split level 30: [/input-12, 35] 
split level 31: [/input-8, 1373] 
split level 32: [/input, 3258] 
split level 33: [/input-8, 1365] 
split level 34: [/input-8, 2012] 
split level 35: [/input-8, 2010] 
split level 36: [/input-8, 101] 
split level 37: [/input, 3206] 
split level 38: [/input-8, 93] 
split level 39: [/input, 968] 
split level 40: [/input-8, 1356] 
split level 41: [/input-8, 354] 
split level 42: [/input, 3273] 
split level 43: [/input-8, 251] 
split level 44: [/input-8, 1367] 
split level 45: [/input, 920] 
split level 46: [/input, 3241] 
split level 47: [/input-8, 252] 
split level 48: [/input-8, 1358] 
split level 49: [/input, 629] 
split level 50: [/input-8, 907] 
split level 51: [/input, 819] 
split level 52: [/input-8, 1369] 
split level 53: [/input-8, 1378] 
split level 54: [/input-8, 102] 
split level 55: [/input-8, 1359] 
split level 56: [/input, 3188] 
split level 57: [/input, 2762] 
split level 58: [/input-8, 1174] 
split level 59: [/input-8, 2008] 
split level 60: [/input-8, 2031] 
split level 61: [/input-8, 1211] 
split level 62: [/input-8, 817] 
split level 63: [/input-8, 203] 
split level 64: [/input-8, 250] 
split level 65: [/input-8, 1385] 
split level 66: [/input-8, 16] 
split level 67: [/input-8, 1377] 
split level 68: [/input-8, 189] 
split level 69: [/input, 804] 
split level 70: [/input-8, 1361] 
split level 71: [/input, 3226] 
split level 72: [/input-8, 1147] 
split level 73: [/input, 2694] 
split level 74: [/input-8, 147] 
split level 75: [/input, 820] 
split level 76: [/input, 3222] 
split level 77: [/input-8, 188] 
split level 78: [/input, 3221] 
split level 79: [/input-8, 1146] 
split level 80: [/input-8, 1185] 
split level 81: [/input, 2867] 
split level 82: [/input, 3171] 
split level 83: [/input-8, 2003] 
split level 84: [/input-8, 23] 
split level 85: [/input-8, 24] 
split level 86: [/input-8, 774] 
split level 87: [/input, 2835] 
split level 88: [/input, 3532] 
split level 89: [/input-8, 337] 
split level 90: [/input, 836] 
split level 91: [/input, 3209] 
split level 92: [/input-8, 1061] 
split level 93: [/input, 835] 
split level 94: [/input, 2678] 
split level 95: [/input-8, 479] 
split level 96: [/input-8, 190] 
split level 97: [/input, 803] 
split level 98: [/input-8, 17] 
split level 99: [/input-8, 1386] 
split level 100: [/input, 81] 
split level 101: [/input, 3464] 
split level 102: [/input, 936] 
split level 103: [/input, 2883] 
split level 104: [/input, 825] 
split level 105: [/input, 2697] 
split level 106: [/input, 2865] 
split level 107: [/input, 2851] 
split level 108: [/input, 2866] 
split level 109: [/input-8, 1398] 
split level 110: [/input, 3238] 
split level 111: [/input, 940] 
split level 112: [/input-8, 249] 
split level 113: [/input, 2696] 
split level 114: [/input, 3187] 
split level 115: [/input-8, 1399] 
split level 116: [/input-8, 32] 
split level 117: [/input-8, 607] 
split level 118: [/input, 2882] 
split level 119: [/input-8, 809] 
split level 120: [/input-8, 336] 
split level 121: [/input, 3146] 
split level 122: [/input, 2881] 
split level 123: [/input, 2849] 
split level 124: [/input, 2748] 
split level 125: [/input, 3155] 
split level 126: [/input, 2764] 
split level 127: [/input, 3500] 
split level 128: [/input, 3484] 
split level 129: [/input, 909] 
split level 130: [/input-8, 992] 
split level 131: [/input, 49] 
split level 132: [/input, 50] 
split level 133: [/input, 808] 
split level 134: [/input, 78] 
split level 135: [/input, 1401] 
split level 136: [/input, 2852] 
split level 137: [/input, 841] 
split level 138: [/input, 97] 
split level 139: [/input, 2913] 
split level 140: [/input, 115] 
split level 141: [/input, 3303] 
split level 142: [/input, 293] 
split level 143: [/input, 3562] 
split level 144: [/input, 98] 
split level 145: [/input, 110] 
split level 146: [/input, 82] 
split level 147: [/input, 65] 
split level 148: [/input, 3530] 
split level 149: [/input, 142] 
split level 150: [/input, 910] 
split level 151: [/input, 934] 
split level 152: [/input-8, 323] 
split level 153: [/input, 957] 
split level 154: [/input-8, 1199] 
split level 155: [/input-8, 1603] 
split level 156: [/input-8, 1387] 
split level 157: [/input, 62] 
split level 158: [/input, 93] 
split level 159: [/input, 2731] 
split level 160: [/input, 2897] 
split level 161: [/input, 2510] 
split level 162: [/input, 126] 
split level 163: [/input-8, 97] 
split level 164: [/input-8, 255] 
split level 165: [/input, 3028] 
split level 166: [/input, 51] 
split level 167: [/input, 33] 
split level 168: [/input, 113] 
split level 169: [/input, 3006] 
split level 170: [/input, 990] 
split level 171: [/input-8, 85] 
split level 172: [/input, 77] 
split level 173: [/input, 3147] 
split level 174: [/input, 888] 
split level 175: [/input, 2158] 
split level 176: [/input, 2359] 
split level 177: [/input, 99] 
split level 178: [/input, 66] 
split level 179: [/input, 2142] 
split level 180: [/input-8, 1198] 
split level 181: [/input-8, 1355] 
split level 182: [/input, 114] 
split level 183: [/input-8, 771] 
split level 184: [/input, 61] 
split level 185: [/input, 2914] 
split level 186: [/input, 124] 
split level 187: [/input, 2869] 
split level 188: [/input, 2750] 
split level 189: [/input, 2686] 
split level 190: [/input, 3483] 
split level 191: [/input, 274] 
split level 192: [/input, 3469] 
split level 193: [/input, 3113] 
split level 194: [/input, 3517] 
split level 195: [/input, 3132] 
split level 196: [/input, 3114] 
split level 197: [/input, 60] 
split level 198: [/input, 3130] 
split level 199: [/input, 2858] 
Time: prepare 0.0062    bound 0.1004    transfer 0.0119    finalize 0.0100    func 0.1287    
Accumulated time: func 0.1877    prepare 0.0167    bound 0.1588    transfer 0.0121    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.26627362) min lb tensor(-0.11798868)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.013567686080932617 
BICCOS Cumulative time: 0.013567686080932617
Preprocessing time: 0.011981964111328125 Inference time: 0.00030732154846191406 Add cuts time: 0.0001049041748046875 Cut analysis time: 0.0011734962463378906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10950 (1), -0.10950 (1), -0.10938 (1), -0.10927 (1), -0.10902 (1), -0.10894 (1), -0.10858 (1), -0.10842 (1), -0.10824 (1), -0.10817 (1), -0.10782 (1), -0.10661 (1), -0.10605 (1), -0.10541 (1), -0.10505 (1), -0.10492 (1), -0.10478 (1), -0.10475 (1), -0.10374 (1), -0.10358 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5423    set_bounds 0.0128    solve 0.1288    add 0.2210    
Accumulated time: pickout 0.0004    decision 0.5423    set_bounds 0.0128    solve 0.1288    add 0.2210    
Current (lb-rhs): -0.10950478911399841
50 domains visited
Cumulative time: 1.0021893978118896

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] 
split level 2: [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 97] [/input-12, 4] [/input-12, 4] [/input-12, 97] [/input-12, 4] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 97] [/input-12, 97] [/input-12, 10] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.071043461561203

all verified at 9th iter
Time: prepare 0.0075    bound 0.0725    transfer 0.0011    finalize 0.0035    func 0.0874    
Accumulated time: func 0.2751    prepare 0.0245    bound 0.2313    transfer 0.0131    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.15370339) min lb tensor(0.00017402)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03933978080749512 
BICCOS Cumulative time: 0.052907466888427734
Preprocessing time: 0.013420820236206055 Inference time: 0.017491579055786133 Add cuts time: 0.007654666900634766 Cut analysis time: 0.0007727146148681641
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0085    decision 0.0227    set_bounds 0.0161    solve 0.0875    add 0.0175    
Accumulated time: pickout 0.0089    decision 0.5650    set_bounds 0.0290    solve 0.2163    add 0.2385    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.87069077e-10, 1.45132646e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.87069077e-10, 9.77173895e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.44818619e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 4, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.02071479e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.033238887786865234

all verified at 0th iter
Time: prepare 0.0004    bound 0.0046    transfer 0.0002    finalize 0.0002    func 0.0054    
Accumulated time: func 0.2804    prepare 0.0249    bound 0.2359    transfer 0.0133    finalize 0.0139    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.8336 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 578] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 578] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 152] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.58451509,  2.26354074,  0.51416540, -1.32597995,  0.81974971,
         -0.53718394,  0.88996947, -0.70218897,  0.60620284]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.54049110, -19.17367935, -17.10903168, -14.96515083, -17.66605568,
         -15.88734627, -15.45722198, -17.64301682, -16.20054626, -17.64737320]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320],
         [-17.54049110, -19.17367935, -17.10903168, -14.96515179, -17.66605568,
          -15.88734627, -15.45722198, -17.64301872, -16.20054626, -17.64737320]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.49207020,  0.43012428,  0.74332428]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [550]; unstable size 550; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 550] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 550] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 550] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 295] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.52899957,  3.35346889, -0.60972607,  1.57596004,  1.06331682,
         -0.42583418,  1.62264919,  1.54576540,  3.27385807]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
         -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.42it/s]100%|██████████| 1/1 [00:00<00:00,  7.41it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.79688454, -20.48247719, -15.16759300, -17.41525078, -15.03807354,
          -17.04138947, -15.56449890, -17.84644318, -18.37698746, -20.11083412],
         [-16.79688454, -20.48247719, -15.16759300, -17.41525078, -15.03807354,
          -17.04138947, -15.56449890, -17.84644318, -18.37698746, -20.11083412]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12951946, 0.52642536]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1382 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.63650894165039
alpha/beta optimization time: 1.41947603225708
initial alpha-crown bounds: tensor([[ 0.60815525,  3.47484636, -0.55310130,  1.62192655,  1.11317492,
         -0.37937474,  1.72037315,  1.66001821,  3.37049007]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5531013011932373
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6492 seconds.
lower bounds for all target labels: [0.6081552505493164, 3.474846363067627, -0.5531013011932373, 1.6219265460968018, 1.1131749153137207, -0.37937498092651367, 1.7203731536865234, 1.6600182056427002, 3.370490074157715]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 5]
start creating model mps for candidates: ['lay/16_2', 'lay/16_5']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 41321 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 41324 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.29884839057922
Verifying property 0 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.474846363067627.

Properties batch 1, size 1
Remaining timeout: 197.9704189300537
Verifying property 1 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.370490074157715.

Properties batch 2, size 1
Remaining timeout: 197.83456707000732
Verifying property 2 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7203731536865234.

Properties batch 3, size 1
Remaining timeout: 197.7446117401123
Verifying property 3 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6600182056427002.

Properties batch 4, size 1
Remaining timeout: 197.64711785316467
Verifying property 4 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6219265460968018.

Properties batch 5, size 1
Remaining timeout: 197.56536626815796
Verifying property 5 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1131749153137207.

Properties batch 6, size 1
Remaining timeout: 197.48232531547546
Verifying property 6 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6081552505493164.

Properties batch 7, size 1
Remaining timeout: 197.39089155197144
Verifying property 7 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37937474]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37937474]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006673336029052734
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0555    transfer 0.0001    finalize 0.0002    func 0.0560    
Accumulated time: func 0.0560    prepare 0.0002    bound 0.0555    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 3] 
split level 1: [/input-12, 49] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 43] 
split level 4: [/input-12, 18] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 6] 
split level 7: [/input-12, 57] 
split level 8: [/input-8, 1693] 
split level 9: [/input-8, 927] 
split level 10: [/input-12, 24] 
split level 11: [/input-8, 1044] 
split level 12: [/input-8, 1692] 
split level 13: [/input-12, 12] 
split level 14: [/input-8, 1057] 
split level 15: [/input-8, 619] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 1068] 
split level 18: [/input-8, 1695] 
split level 19: [/input-12, 86] 
split level 20: [/input-8, 382] 
split level 21: [/input-8, 1622] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 498] 
split level 24: [/input-8, 1972] 
split level 25: [/input-8, 1967] 
split level 26: [/input-8, 1069] 
split level 27: [/input-8, 626] 
split level 28: [/input-8, 1700] 
split level 29: [/input-8, 1268] 
split level 30: [/input-8, 1974] 
split level 31: [/input-8, 1686] 
split level 32: [/input-8, 593] 
split level 33: [/input-8, 227] 
split level 34: [/input-8, 629] 
split level 35: [/input-8, 1973] 
split level 36: [/input, 1649] 
split level 37: [/input-8, 1683] 
split level 38: [/input-8, 1314] 
split level 39: [/input-8, 635] 
split level 40: [/input-8, 490] 
split level 41: [/input, 2923] 
split level 42: [/input-8, 371] 
split level 43: [/input-8, 1306] 
split level 44: [/input-8, 1762] 
split level 45: [/input-8, 1765] 
split level 46: [/input-8, 1267] 
split level 47: [/input-8, 1403] 
split level 48: [/input-8, 367] 
split level 49: [/input-8, 505] 
split level 50: [/input-8, 633] 
split level 51: [/input-8, 506] 
split level 52: [/input-8, 1773] 
split level 53: [/input-8, 1035] 
split level 54: [/input-8, 934] 
split level 55: [/input-8, 1703] 
split level 56: [/input-8, 468] 
split level 57: [/input-8, 618] 
split level 58: [/input, 385] 
split level 59: [/input-8, 1076] 
split level 60: [/input-8, 1789] 
split level 61: [/input-8, 459] 
split level 62: [/input-8, 1714] 
split level 63: [/input-8, 1650] 
split level 64: [/input-8, 1626] 
split level 65: [/input-8, 462] 
split level 66: [/input-8, 1929] 
split level 67: [/input, 2906] 
split level 68: [/input-8, 636] 
split level 69: [/input-8, 918] 
split level 70: [/input, 1512] 
split level 71: [/input-8, 1659] 
split level 72: [/input-8, 1790] 
split level 73: [/input-8, 1298] 
split level 74: [/input-8, 1294] 
split level 75: [/input-12, 20] 
split level 76: [/input-8, 497] 
split level 77: [/input-8, 466] 
split level 78: [/input-8, 1726] 
split level 79: [/input-8, 380] 
split level 80: [/input-8, 1651] 
split level 81: [/input-8, 1713] 
split level 82: [/input, 2157] 
split level 83: [/input-8, 1997] 
split level 84: [/input-8, 1244] 
split level 85: [/input-8, 1704] 
split level 86: [/input, 1418] 
split level 87: [/input, 2506] 
split level 88: [/input-8, 1681] 
split level 89: [/input-8, 1252] 
split level 90: [/input-8, 1649] 
split level 91: [/input-8, 900] 
split level 92: [/input-8, 1633] 
split level 93: [/input, 2181] 
split level 94: [/input, 2953] 
split level 95: [/input-8, 1708] 
split level 96: [/input-8, 1653] 
split level 97: [/input-8, 1660] 
split level 98: [/input-8, 1746] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1310] 
split level 101: [/input, 110] 
split level 102: [/input-8, 1750] 
split level 103: [/input-8, 1716] 
split level 104: [/input-8, 1064] 
split level 105: [/input-8, 1522] 
split level 106: [/input-8, 1969] 
split level 107: [/input-8, 1612] 
split level 108: [/input-8, 1774] 
split level 109: [/input, 2460] 
split level 110: [/input-8, 898] 
split level 111: [/input, 4005] 
split level 112: [/input, 2412] 
split level 113: [/input-8, 329] 
split level 114: [/input, 2470] 
split level 115: [/input, 867] 
split level 116: [/input-8, 1766] 
split level 117: [/input, 2186] 
split level 118: [/input-8, 473] 
split level 119: [/input, 4023] 
split level 120: [/input-8, 1978] 
split level 121: [/input, 1500] 
split level 122: [/input-8, 1668] 
split level 123: [/input, 2931] 
split level 124: [/input, 2173] 
split level 125: [/input, 151] 
split level 126: [/input, 4021] 
split level 127: [/input, 2555] 
split level 128: [/input, 2440] 
split level 129: [/input, 3517] 
split level 130: [/input-8, 1320] 
split level 131: [/input, 2454] 
split level 132: [/input-8, 1331] 
split level 133: [/input-8, 1770] 
split level 134: [/input, 2982] 
split level 135: [/input, 1365] 
split level 136: [/input-8, 75] 
split level 137: [/input-8, 2028] 
split level 138: [/input, 169] 
split level 139: [/input-8, 1269] 
split level 140: [/input, 1526] 
split level 141: [/input, 881] 
split level 142: [/input-8, 420] 
split level 143: [/input, 89] 
split level 144: [/input, 2538] 
split level 145: [/input-8, 486] 
split level 146: [/input, 2165] 
split level 147: [/input, 2189] 
split level 148: [/input, 3427] 
split level 149: [/input, 2774] 
split level 150: [/input, 2263] 
split level 151: [/input, 3549] 
split level 152: [/input-8, 899] 
split level 153: [/input-8, 1161] 
split level 154: [/input, 2927] 
split level 155: [/input-8, 2029] 
split level 156: [/input, 1478] 
split level 157: [/input, 328] 
split level 158: [/input, 2776] 
split level 159: [/input-8, 1337] 
split level 160: [/input-8, 73] 
split level 161: [/input, 2252] 
split level 162: [/input, 3526] 
split level 163: [/input, 2231] 
split level 164: [/input-8, 410] 
split level 165: [/input-8, 1531] 
split level 166: [/input, 667] 
split level 167: [/input-8, 805] 
split level 168: [/input-8, 74] 
split level 169: [/input, 2519] 
split level 170: [/input-8, 908] 
split level 171: [/input, 2761] 
split level 172: [/input, 408] 
split level 173: [/input, 2374] 
split level 174: [/input, 2404] 
split level 175: [/input, 954] 
split level 176: [/input-8, 1761] 
split level 177: [/input, 1392] 
split level 178: [/input, 2550] 
split level 179: [/input, 1493] 
split level 180: [/input, 3279] 
split level 181: [/input, 3546] 
split level 182: [/input, 2838] 
split level 183: [/input, 2133] 
split level 184: [/input, 344] 
split level 185: [/input, 852] 
split level 186: [/input, 2961] 
split level 187: [/input, 4009] 
split level 188: [/input, 1391] 
split level 189: [/input, 278] 
split level 190: [/input, 3271] 
split level 191: [/input-8, 78] 
split level 192: [/input-8, 1743] 
split level 193: [/input, 141] 
split level 194: [/input, 215] 
split level 195: [/input, 2118] 
split level 196: [/input, 94] 
split level 197: [/input, 2542] 
split level 198: [/input, 2484] 
split level 199: [/input, 3579] 
Time: prepare 0.0062    bound 0.0941    transfer 0.0073    finalize 0.0045    func 0.1122    
Accumulated time: func 0.1682    prepare 0.0165    bound 0.1496    transfer 0.0074    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.24518502) min lb tensor(-0.37924218)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.012629032135009766 
BICCOS Cumulative time: 0.012629032135009766
Preprocessing time: 0.011317729949951172 Inference time: 0.00017547607421875 Add cuts time: 6.794929504394531e-05 Cut analysis time: 0.0010678768157958984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36536 (1), -0.36534 (1), -0.36514 (1), -0.36460 (1), -0.36438 (1), -0.36371 (1), -0.36366 (1), -0.36343 (1), -0.36308 (1), -0.36247 (1), -0.36222 (1), -0.36154 (1), -0.36136 (1), -0.36056 (1), -0.35983 (1), -0.35897 (1), -0.35869 (1), -0.35734 (1), -0.35660 (1), -0.35591 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5195    set_bounds 0.0116    solve 0.1123    add 0.2163    
Accumulated time: pickout 0.0004    decision 0.5195    set_bounds 0.0116    solve 0.1123    add 0.2163    
Current (lb-rhs): -0.3653566837310791
50 domains visited
Cumulative time: 0.9520750045776367

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 3] [/input-12, 49] [/input-12, 49] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 49] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 83] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32822084426879883
10 lb beta sum: 0.5766316652297974, worst -0.3254569172859192
Time: prepare 0.0073    bound 0.1221    transfer 0.0045    finalize 0.0028    func 0.1395    
Accumulated time: func 0.3077    prepare 0.0241    bound 0.2717    transfer 0.0120    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.27090347) min lb tensor(-0.32541406)
Number of Verified Splits: 14 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.015337705612182617 
BICCOS Cumulative time: 0.027966737747192383
Preprocessing time: 0.013002634048461914 Inference time: 0.0006966590881347656 Add cuts time: 0.0003008842468261719 Cut analysis time: 0.0013375282287597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10103 (2), -0.10096 (2), -0.10023 (2), -0.10005 (2), -0.09792 (2), -0.09732 (2), -0.09688 (2), -0.09667 (2), -0.09573 (2), -0.09552 (2), -0.09515 (2), -0.09496 (2), -0.09456 (2), -0.09160 (2), -0.09032 (2), -0.08948 (2), -0.08909 (2), -0.08859 (2), -0.08516 (2), -0.08476 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0239    set_bounds 0.0133    solve 0.1396    add 0.2228    
Accumulated time: pickout 0.0085    decision 0.5434    set_bounds 0.0249    solve 0.2520    add 0.4391    
Current (lb-rhs): -0.10102683305740356
100 domains visited
Cumulative time: 1.3824176788330078

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] [/input-12, 3] 
split level 1: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 43] [/input-12, 43] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] 
split level 3: [/input-12, 53] [/input-12, 18] [/input-12, 18] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10227584838867188
10 lb beta sum: 0.9057185053825378, worst -0.02858835458755493
Time: prepare 0.0075    bound 0.1207    transfer 0.0011    finalize 0.0027    func 0.1347    
Accumulated time: func 0.4424    prepare 0.0319    bound 0.3924    transfer 0.0130    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.25396371) min lb tensor(-0.02376965)
Number of Verified Splits: 366 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.03922247886657715 
BICCOS Cumulative time: 0.06718921661376953
Preprocessing time: 0.012786865234375 Inference time: 0.017466306686401367 Add cuts time: 0.008277177810668945 Cut analysis time: 0.0006921291351318359
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0090    decision 0.0219    set_bounds 0.0184    solve 0.1348    add 0.0202    
Accumulated time: pickout 0.0176    decision 0.5653    set_bounds 0.0434    solve 0.3868    add 0.4593    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49,  3]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.95473679e-11, 5.69440484e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49,  3]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.95473679e-11, 1.60698164e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.95473679e-11, 6.28510267e-02, 2.77627051e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.95473679e-11, 6.28510267e-02, 8.80780369e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.95473679e-11, 9.00529176e-02, 2.80449867e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 43,  3]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([6.95473679e-11, 9.00529176e-02, 7.95314759e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.313737154006958
10 lb beta sum: 0.5503321886062622, worst -0.3114352822303772
Time: prepare 0.0012    bound 0.1166    transfer 0.0002    finalize 0.0003    func 0.1185    
Accumulated time: func 0.5609    prepare 0.0331    bound 0.5089    transfer 0.0133    finalize 0.0105    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 43] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 24] 
split level 5: [/input-8, 1692] 
split level 6: [/input-12, 12] 
split level 7: [/input-8, 1695] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst -0.10818681120872498
10 lb beta sum: 0.732018768787384, worst -0.10746440291404724
Time: prepare 0.0113    bound 0.1430    transfer 0.0045    finalize 0.0032    func 0.1639    
Accumulated time: func 0.7249    prepare 0.0449    bound 0.6519    transfer 0.0178    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.26083890) min lb tensor(-0.10730633)
Number of Verified Splits: 215 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796276092529, worst -0.2278364598751068
10 lb beta sum: 1.3542485237121582, worst -0.08394664525985718
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 69.
#cuts 1-3: 7
#cuts 4-6: 26
#cuts 7-9: 36
#cuts >= 20: 0
BICCOS time: 0.2977609634399414 
BICCOS Cumulative time: 0.36495018005371094
Preprocessing time: 0.009113550186157227 Inference time: 0.2668447494506836 Add cuts time: 0.016336679458618164 Cut analysis time: 0.005465984344482422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10731 (8), -0.09904 (8), -0.09220 (8), -0.09118 (8), -0.08302 (8), -0.08294 (8), -0.07752 (8), -0.06833 (8), -0.06462 (8), -0.05878 (8), -0.05773 (8), -0.05765 (8), -0.05036 (8), -0.05030 (8), -0.04897 (8), -0.04718 (8), -0.04641 (8), -0.04517 (8), -0.04352 (8), -0.04342 (8), 
Length of domains: 41
Time: pickout 0.0005    decision 0.0227    set_bounds 0.0260    solve 0.1641    add 0.0625    
Accumulated time: pickout 0.0181    decision 0.5879    set_bounds 0.0694    solve 0.5509    add 0.5218    
Current (lb-rhs): -0.1073063313961029
141 domains visited
Cumulative time: 2.387227773666382

BaB round 2
batch: 41
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1972] [/input-8, 1630] [/input-8, 1630] [/input-8, 1972] [/input-8, 1630] [/input-8, 1630] 
split level 1: [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1964] [/input-8, 1967] [/input-8, 1972] [/input-8, 1973] [/input-8, 1314] [/input-8, 1972] 
split level 2: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-8, 1967] [/input-8, 1651] [/input-8, 1973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09146928787231445
10 lb beta sum: 0.39521685242652893, worst -0.08945494890213013
Time: prepare 0.0064    bound 0.1371    transfer 0.0054    finalize 0.0023    func 0.1534    
Accumulated time: func 0.8782    prepare 0.0515    bound 0.7890    transfer 0.0233    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.05261946) min lb tensor(-0.08937368)
Number of Verified Splits: 132 of 328
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 11
#cuts 4-6: 8
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.02902054786682129 
BICCOS Cumulative time: 0.3939707279205322
Preprocessing time: 0.009870529174804688 Inference time: 0.013908624649047852 Add cuts time: 0.0035059452056884766 Cut analysis time: 0.0017354488372802734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08937 (11), -0.08744 (11), -0.08177 (11), -0.07984 (11), -0.07974 (11), -0.07781 (11), -0.07519 (11), -0.07455 (11), -0.07394 (11), -0.07336 (11), -0.07254 (11), -0.07142 (11), -0.07136 (11), -0.06942 (11), -0.06758 (11), -0.06641 (11), -0.06583 (11), -0.06567 (11), -0.06560 (11), -0.06497 (11), 
Length of domains: 196
Time: pickout 0.0055    decision 0.0172    set_bounds 0.0176    solve 0.1535    add 0.0839    
Accumulated time: pickout 0.0236    decision 0.6051    set_bounds 0.0871    solve 0.7043    add 0.6057    
Current (lb-rhs): -0.08937367796897888
337 domains visited
Cumulative time: 2.698859214782715

BaB round 3
batch: 196
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1693] [/input-8, 1967] [/input-8, 1967] [/input-8, 1068] [/input-8, 1967] [/input-8, 1068] [/input-8, 1967] [/input-8, 1967] [/input-8, 1068] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0874478816986084
10 lb beta sum: 0.5051541328430176, worst -0.08667212724685669
Time: prepare 0.0078    bound 0.1379    transfer 0.0021    finalize 0.0023    func 0.1528    
Accumulated time: func 1.0310    prepare 0.0595    bound 0.9269    transfer 0.0254    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.02980137) min lb tensor(-0.08546981)
Number of Verified Splits: 115 of 392
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 15
#cuts 4-6: 19
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.03306221961975098 
BICCOS Cumulative time: 0.4270329475402832
Preprocessing time: 0.012829780578613281 Inference time: 0.014686346054077148 Add cuts time: 0.002827167510986328 Cut analysis time: 0.0027189254760742188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08547 (12), -0.08369 (12), -0.07810 (12), -0.07779 (12), -0.07600 (12), -0.07596 (12), -0.07574 (12), -0.07395 (12), -0.07140 (12), -0.07032 (12), -0.07016 (12), -0.06987 (12), -0.06944 (12), -0.06844 (12), -0.06834 (12), -0.06801 (12), -0.06766 (12), -0.06728 (12), -0.06631 (12), -0.06549 (12), 
Length of domains: 277
Time: pickout 0.0165    decision 0.0228    set_bounds 0.0174    solve 0.1529    add 0.1015    
Accumulated time: pickout 0.0401    decision 0.6279    set_bounds 0.1045    solve 0.8573    add 0.7072    
Current (lb-rhs): -0.0854698121547699
614 domains visited
Cumulative time: 3.052478790283203

BaB round 4
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 1314] [/input-8, 1700] [/input-8, 629] [/input-8, 1314] [/input-8, 629] [/input-8, 1700] [/input-8, 1268] [/input-8, 629] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08278036117553711
10 lb beta sum: 0.5164451003074646, worst -0.08081251382827759
Time: prepare 0.0123    bound 0.1754    transfer 0.0061    finalize 0.0045    func 0.2020    
Accumulated time: func 1.2330    prepare 0.0721    bound 1.1024    transfer 0.0315    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.02190113) min lb tensor(-0.08075511)
Number of Verified Splits: 140 of 554
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 15
#cuts 4-6: 27
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.04514193534851074 
BICCOS Cumulative time: 0.47217488288879395
Preprocessing time: 0.017926692962646484 Inference time: 0.020547151565551758 Add cuts time: 0.003760099411010742 Cut analysis time: 0.002907991409301758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08076 (13), -0.07899 (13), -0.07415 (13), -0.07335 (13), -0.07304 (13), -0.07237 (13), -0.07127 (13), -0.07124 (13), -0.07090 (13), -0.06913 (13), -0.06676 (13), -0.06675 (13), -0.06641 (13), -0.06541 (13), -0.06521 (13), -0.06468 (13), -0.06463 (13), -0.06439 (13), -0.06426 (13), -0.06354 (13), 
Length of domains: 414
Time: pickout 0.0207    decision 0.0301    set_bounds 0.2974    solve 0.2022    add 0.0993    
Accumulated time: pickout 0.0608    decision 0.6580    set_bounds 0.4019    solve 1.0595    add 0.8065    
Current (lb-rhs): -0.08075511455535889
1028 domains visited
Cumulative time: 3.759594678878784

BaB round 5
batch: 414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1314] [/input-8, 1964] [/input-8, 1314] [/input-8, 1314] [/input-8, 1314] [/input-8, 1314] [/input-8, 1967] [/input-8, 1964] [/input-8, 1268] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07593321800231934
10 lb beta sum: 0.520636796951294, worst -0.0739959180355072
Time: prepare 0.0198    bound 0.1679    transfer 0.0095    finalize 0.0041    func 0.2068    
Accumulated time: func 1.4398    prepare 0.0922    bound 1.2702    transfer 0.0409    finalize 0.0269    
all_split False
======================Cut inference begins======================
max lb tensor(0.01468211) min lb tensor(-0.07395470)
Number of Verified Splits: 186 of 828
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 17
#cuts 4-6: 34
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.06462955474853516 
BICCOS Cumulative time: 0.5368044376373291
Preprocessing time: 0.026398658752441406 Inference time: 0.028947114944458008 Add cuts time: 0.0059337615966796875 Cut analysis time: 0.0033500194549560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07395 (14), -0.07297 (14), -0.07220 (14), -0.07121 (14), -0.06750 (14), -0.06654 (14), -0.06620 (14), -0.06617 (14), -0.06573 (14), -0.06555 (14), -0.06522 (14), -0.06444 (14), -0.06444 (14), -0.06441 (14), -0.06416 (14), -0.06346 (14), -0.06346 (14), -0.06318 (14), -0.06240 (14), -0.06142 (14), 
Length of domains: 642
Time: pickout 0.0486    decision 0.0374    set_bounds 0.0401    solve 0.2071    add 0.0971    
Accumulated time: pickout 0.1095    decision 0.6954    set_bounds 0.4419    solve 1.2666    add 0.9037    
Current (lb-rhs): -0.07395470142364502
1670 domains visited
Cumulative time: 4.2617878913879395

BaB round 6
batch: 642
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1964] [/input-8, 1700] [/input-8, 1964] [/input-8, 1964] [/input-8, 506] [/input-8, 1700] [/input-8, 1964] [/input-8, 1789] [/input-8, 1700] [/input-8, 1964] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07149314880371094
10 lb beta sum: 0.5322662591934204, worst -0.06961187720298767
Time: prepare 0.0287    bound 0.1858    transfer 0.0142    finalize 0.0064    func 0.2447    
Accumulated time: func 1.6845    prepare 0.1212    bound 1.4561    transfer 0.0552    finalize 0.0333    
all_split False
======================Cut inference begins======================
max lb tensor(0.01907834) min lb tensor(-0.06960475)
Number of Verified Splits: 291 of 1284
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 75.
#cuts 1-3: 20
#cuts 4-6: 43
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.09882450103759766 
BICCOS Cumulative time: 0.6356289386749268
Preprocessing time: 0.04475045204162598 Inference time: 0.040409088134765625 Add cuts time: 0.00963902473449707 Cut analysis time: 0.004025936126708984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06960 (15), -0.06867 (15), -0.06776 (15), -0.06683 (15), -0.06300 (15), -0.06216 (15), -0.06182 (15), -0.06168 (15), -0.06123 (15), -0.06114 (15), -0.06089 (15), -0.05997 (15), -0.05997 (15), -0.05983 (15), -0.05983 (15), -0.05904 (15), -0.05904 (15), -0.05890 (15), -0.05798 (15), -0.05705 (15), 
Length of domains: 993
Time: pickout 0.0217    decision 0.0533    set_bounds 0.0628    solve 0.2452    add 0.1310    
Accumulated time: pickout 0.1312    decision 0.7487    set_bounds 0.5047    solve 1.5117    add 1.0347    
Current (lb-rhs): -0.06960475444793701
2663 domains visited
Cumulative time: 4.886977434158325

BaB round 7
batch: 993
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1306] [/input-8, 1306] [/input-8, 1268] [/input-8, 1306] [/input-8, 1967] [/input-8, 1306] [/input-8, 1714] [/input-8, 1306] [/input-8, 1973] [/input-8, 1306] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06561613082885742
10 lb beta sum: 0.5393009781837463, worst -0.0634840726852417
Time: prepare 0.0437    bound 0.1995    transfer 0.0228    finalize 0.0108    func 0.2911    
Accumulated time: func 1.9756    prepare 0.1652    bound 1.6555    transfer 0.0779    finalize 0.0441    
all_split False
======================Cut inference begins======================
max lb tensor(0.01359677) min lb tensor(-0.06338727)
Number of Verified Splits: 346 of 1986
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 93.
#cuts 1-3: 25
#cuts 4-6: 48
#cuts 7-9: 20
#cuts >= 20: 0
BICCOS time: 0.1411118507385254 
BICCOS Cumulative time: 0.7767407894134521
Preprocessing time: 0.07142376899719238 Inference time: 0.05139350891113281 Add cuts time: 0.013426065444946289 Cut analysis time: 0.004868507385253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06339 (16), -0.06227 (16), -0.06175 (16), -0.06154 (16), -0.06106 (16), -0.06043 (16), -0.05990 (16), -0.05922 (16), -0.05677 (16), -0.05594 (16), -0.05560 (16), -0.05528 (16), -0.05505 (16), -0.05489 (16), -0.05483 (16), -0.05448 (16), -0.05430 (16), -0.05402 (16), -0.05397 (16), -0.05376 (16), 
Length of domains: 1640
Time: pickout 0.0892    decision 0.0729    set_bounds 0.0943    solve 0.2917    add 0.1166    
Accumulated time: pickout 0.2204    decision 0.8216    set_bounds 0.5990    solve 1.8034    add 1.1512    
Current (lb-rhs): -0.06338727474212646
4303 domains visited
Cumulative time: 5.709050416946411

BaB round 8
batch: 1640
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 1057] [/input-8, 1268] [/input-8, 1057] [/input-8, 1789] [/input-8, 1314] [/input-8, 1057] [/input-8, 1268] [/input-8, 1057] [/input-8, 1789] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06180572509765625
10 lb beta sum: 0.5175988078117371, worst -0.059913039207458496
Time: prepare 0.0755    bound 0.2667    transfer 0.0408    finalize 0.0211    func 0.4270    
Accumulated time: func 2.4025    prepare 0.2411    bound 1.9222    transfer 0.1188    finalize 0.0652    
all_split False
======================Cut inference begins======================
max lb tensor(0.03769836) min lb tensor(-0.05990303)
Number of Verified Splits: 768 of 3280
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 106.
#cuts 1-3: 21
#cuts 4-6: 71
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.28129076957702637 
BICCOS Cumulative time: 1.0580315589904785
Preprocessing time: 0.11742973327636719 Inference time: 0.12899136543273926 Add cuts time: 0.029549360275268555 Cut analysis time: 0.005320310592651367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05990 (17), -0.05890 (17), -0.05823 (17), -0.05806 (17), -0.05766 (17), -0.05705 (17), -0.05639 (17), -0.05582 (17), -0.05326 (17), -0.05244 (17), -0.05210 (17), -0.05188 (17), -0.05146 (17), -0.05142 (17), -0.05139 (17), -0.05109 (17), -0.05077 (17), -0.05056 (17), -0.05043 (17), -0.05026 (17), 
Length of domains: 2512
Time: pickout 0.0420    decision 0.2829    set_bounds 0.1614    solve 0.4282    add 0.1186    
Accumulated time: pickout 0.2623    decision 1.1045    set_bounds 0.7604    solve 2.2316    add 1.2698    
Current (lb-rhs): -0.05990302562713623
6815 domains visited
Cumulative time: 7.041280269622803

BaB round 9
batch: 2512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 506] [/input-8, 1268] [/input-8, 506] [/input-8, 1306] [/input-8, 506] [/input-8, 1306] [/input-8, 506] [/input-8, 1268] [/input-8, 1714] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05744290351867676
10 lb beta sum: 0.5114201903343201, worst -0.06310218572616577
Time: prepare 0.1318    bound 0.3665    transfer 0.0305    finalize 0.0320    func 0.5957    
Accumulated time: func 2.9983    prepare 0.3733    bound 2.2887    transfer 0.1493    finalize 0.0972    
all_split False
======================Cut inference begins======================
max lb tensor(0.01657027) min lb tensor(-0.05549109)
Number of Verified Splits: 1341 of 5024
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 136.
#cuts 1-3: 26
#cuts 4-6: 84
#cuts 7-9: 26
#cuts >= 20: 0
BICCOS time: 0.6938626766204834 
BICCOS Cumulative time: 1.751894235610962
Preprocessing time: 0.17677617073059082 Inference time: 0.4720323085784912 Add cuts time: 0.03799772262573242 Cut analysis time: 0.007056474685668945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05549 (18), -0.05448 (18), -0.05379 (18), -0.05365 (18), -0.05325 (18), -0.05277 (18), -0.05263 (18), -0.05195 (18), -0.05177 (18), -0.05140 (18), -0.05107 (18), -0.05092 (18), -0.05053 (18), -0.04992 (18), -0.04923 (18), -0.04883 (18), -0.04869 (18), -0.04801 (18), -0.04771 (18), -0.04741 (18), 
Length of domains: 3683
Time: pickout 0.0593    decision 0.1630    set_bounds 0.4147    solve 0.5972    add 0.2163    
Accumulated time: pickout 0.3216    decision 1.2676    set_bounds 1.1751    solve 2.8288    add 1.4861    
Current (lb-rhs): -0.055491089820861816
10498 domains visited
Cumulative time: 9.22627329826355

BaB round 10
batch: 3683
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 1068] [/input-8, 629] [/input-8, 1068] [/input-8, 1068] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05503988265991211
10 lb beta sum: 0.5017985701560974, worst -0.05317908525466919
Time: prepare 0.2114    bound 0.4984    transfer 0.1117    finalize 0.3310    func 1.2026    
Accumulated time: func 4.2009    prepare 0.5852    bound 2.7870    transfer 0.2610    finalize 0.4282    
all_split False
======================Cut inference begins======================
max lb tensor(0.02009261) min lb tensor(-0.05316862)
Number of Verified Splits: 3062 of 7366
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 197.
#cuts 1-3: 27
#cuts 4-6: 142
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.9073655605316162 
BICCOS Cumulative time: 2.659259796142578
Preprocessing time: 0.2559189796447754 Inference time: 0.5458323955535889 Add cuts time: 0.09545302391052246 Cut analysis time: 0.010161161422729492
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05317 (19), -0.05214 (19), -0.05147 (19), -0.05138 (19), -0.05091 (19), -0.05045 (19), -0.05035 (19), -0.04968 (19), -0.04944 (19), -0.04912 (19), -0.04876 (19), -0.04866 (19), -0.04821 (19), -0.04765 (19), -0.04697 (19), -0.04653 (19), -0.04642 (19), -0.04568 (19), -0.04537 (19), -0.04505 (19), 
Length of domains: 4304
Time: pickout 0.1580    decision 0.2398    set_bounds 0.4177    solve 1.2056    add 0.1666    
Accumulated time: pickout 0.4796    decision 1.5074    set_bounds 1.5928    solve 4.0344    add 1.6528    
Current (lb-rhs): -0.05316862463951111
14802 domains visited
Cumulative time: 12.367565393447876

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052579402923583984
10 lb beta sum: 0.49607065320014954, worst -0.050710976123809814
Time: prepare 0.2005    bound 0.5630    transfer 0.0608    finalize 0.0617    func 0.9402    
Accumulated time: func 5.1412    prepare 0.7862    bound 3.3500    transfer 0.3218    finalize 0.4899    
all_split False
======================Cut inference begins======================
max lb tensor(0.31080878) min lb tensor(-0.05069408)
Number of Verified Splits: 4217 of 8192
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts: total 464 constraints, 32076 nonzero elements
cuts preparing time: 0.0181
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 641.
#cuts 1-3: 128
#cuts 4-6: 148
#cuts 7-9: 10
#cuts 13-15: 11
#cuts 16-18: 18
#cuts 19-21: 17
#cuts >= 20: 309
BICCOS time: 1.4747917652130127 
BICCOS Cumulative time: 4.134051561355591
Preprocessing time: 0.28045153617858887 Inference time: 0.7826902866363525 Add cuts time: 0.11309337615966797 Cut analysis time: 0.2985565662384033
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05069 (20), -0.04967 (20), -0.04899 (20), -0.04891 (20), -0.04844 (20), -0.04798 (20), -0.04788 (20), -0.04721 (20), -0.04697 (20), -0.04666 (20), -0.04627 (20), -0.04619 (20), -0.04573 (20), -0.04518 (20), -0.04448 (20), -0.04405 (20), -0.04394 (20), -0.04321 (20), -0.04300 (20), -0.04254 (20), 
Length of domains: 4183
Time: pickout 0.1067    decision 0.4764    set_bounds 0.4170    solve 1.1507    add 0.1968    
Accumulated time: pickout 0.5863    decision 1.9837    set_bounds 2.0098    solve 5.1851    add 1.8496    
Current (lb-rhs): -0.05069407820701599
18777 domains visited
current_vram/total_varm: 11.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 16.26364779472351

BaB round 12
batch: 4183
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1622] [/input-8, 1068] [/input-8, 1622] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0511021614074707
10 lb beta sum: 2.3677501678466797, worst -0.016843408346176147
Time: prepare 0.2003    bound 1.7524    transfer 0.0529    finalize 0.0573    func 2.1193    
Accumulated time: func 7.2605    prepare 0.9869    bound 5.1024    transfer 0.3747    finalize 0.5473    
all_split False
======================Cut inference begins======================
max lb tensor(0.36027840) min lb tensor(4.05311584e-06)
Number of Verified Splits: 8366 of 8366
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0050
Total number of valid cuts: 641.
#cuts 1-3: 128
#cuts 4-6: 148
#cuts 7-9: 10
#cuts 13-15: 11
#cuts 16-18: 18
#cuts 19-21: 17
#cuts >= 20: 309
BICCOS time: 0.2923605442047119 
BICCOS Cumulative time: 4.426412105560303
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1579    decision 0.4613    set_bounds 0.4033    solve 2.3412    add 0.0002    
Accumulated time: pickout 0.7442    decision 2.4450    set_bounds 2.4131    solve 7.5264    add 1.8498    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
18777 domains visited
Cumulative time: 19.996686935424805

found process to kill: terminal indx = 5
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=5_26978138.log

Properties batch 8, size 1
Remaining timeout: 177.228994846344
Verifying property 8 with 1 instances.
##### Instance 66 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.55310130]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.25728035, -20.79345703, -15.69333935, -17.69227600, -15.08468628,
        -17.27866936, -15.87126160, -17.97873497, -18.71574402, -20.41540718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.55310130]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 550
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 867
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts: total 343 constraints, 29590 nonzero elements
cuts preparing time: 0.0118
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.26163530349731445
======================Cut verification ends======================
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5531001091003418
10 lb beta sum: 3.738905191421509, worst -0.5087611675262451
Time: prepare 0.0003    bound 0.3772    transfer 0.0002    finalize 0.0002    func 0.3778    
Accumulated time: func 0.3778    prepare 0.0003    bound 0.3772    transfer 0.0002    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 8] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 6] 
split level 5: [/input-12, 72] 
split level 6: [/input-12, 46] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 49] 
split level 9: [/input-12, 18] 
split level 10: [/input-8, 1726] 
split level 11: [/input-8, 1626] 
split level 12: [/input-12, 7] 
split level 13: [/input-8, 1692] 
split level 14: [/input-8, 1964] 
split level 15: [/input-8, 1693] 
split level 16: [/input-8, 1635] 
split level 17: [/input-12, 20] 
split level 18: [/input-8, 1708] 
split level 19: [/input-8, 420] 
split level 20: [/input-8, 1044] 
split level 21: [/input-8, 1700] 
split level 22: [/input-8, 1630] 
split level 23: [/input-8, 1636] 
split level 24: [/input-8, 1969] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 1658] 
split level 27: [/input-8, 468] 
split level 28: [/input-8, 459] 
split level 29: [/input-8, 490] 
split level 30: [/input-8, 1716] 
split level 31: [/input-8, 633] 
split level 32: [/input-8, 1650] 
split level 33: [/input-8, 1717] 
split level 34: [/input-8, 473] 
split level 35: [/input-8, 593] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 1403] 
split level 38: [/input-8, 425] 
split level 39: [/input-8, 795] 
split level 40: [/input-8, 466] 
split level 41: [/input-8, 1298] 
split level 42: [/input-8, 1686] 
split level 43: [/input-8, 497] 
split level 44: [/input-8, 458] 
split level 45: [/input-8, 505] 
split level 46: [/input-8, 1703] 
split level 47: [/input-8, 1633] 
split level 48: [/input-8, 1695] 
split level 49: [/input-8, 462] 
split level 50: [/input-8, 1268] 
split level 51: [/input-8, 1659] 
split level 52: [/input-8, 1660] 
split level 53: [/input-8, 1651] 
split level 54: [/input-8, 1714] 
split level 55: [/input-8, 1972] 
split level 56: [/input-8, 1929] 
split level 57: [/input-8, 498] 
split level 58: [/input-8, 433] 
split level 59: [/input-8, 1612] 
split level 60: [/input-8, 1339] 
split level 61: [/input-8, 92] 
split level 62: [/input-8, 1294] 
split level 63: [/input-8, 635] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 1226] 
split level 66: [/input-8, 939] 
split level 67: [/input, 394] 
split level 68: [/input-8, 1572] 
split level 69: [/input-8, 432] 
split level 70: [/input-8, 438] 
split level 71: [/input-8, 1310] 
split level 72: [/input-8, 1522] 
split level 73: [/input-8, 434] 
split level 74: [/input-8, 1713] 
split level 75: [/input, 2953] 
split level 76: [/input-8, 626] 
split level 77: [/input-8, 1306] 
split level 78: [/input-8, 1252] 
split level 79: [/input-8, 1683] 
split level 80: [/input-8, 1789] 
split level 81: [/input-8, 1588] 
split level 82: [/input, 2938] 
split level 83: [/input-8, 900] 
split level 84: [/input, 616] 
split level 85: [/input-8, 1657] 
split level 86: [/input-8, 1244] 
split level 87: [/input-8, 1314] 
split level 88: [/input-8, 1320] 
split level 89: [/input, 1418] 
split level 90: [/input-8, 931] 
split level 91: [/input-8, 439] 
split level 92: [/input-8, 636] 
split level 93: [/input, 385] 
split level 94: [/input-8, 392] 
split level 95: [/input-8, 413] 
split level 96: [/input, 2982] 
split level 97: [/input-8, 1580] 
split level 98: [/input, 2931] 
split level 99: [/input-8, 1676] 
split level 100: [/input-8, 1978] 
split level 101: [/input-8, 1973] 
split level 102: [/input-8, 76] 
split level 103: [/input-8, 1967] 
split level 104: [/input-8, 1267] 
split level 105: [/input-8, 1704] 
split level 106: [/input-8, 1790] 
split level 107: [/input, 2923] 
split level 108: [/input-8, 329] 
split level 109: [/input, 2906] 
split level 110: [/input-8, 918] 
split level 111: [/input-8, 803] 
split level 112: [/input-8, 1563] 
split level 113: [/input, 1649] 
split level 114: [/input-8, 1649] 
split level 115: [/input-8, 75] 
split level 116: [/input-8, 1531] 
split level 117: [/input, 1500] 
split level 118: [/input-8, 1337] 
split level 119: [/input-8, 1331] 
split level 120: [/input, 151] 
split level 121: [/input-8, 486] 
split level 122: [/input-8, 1604] 
split level 123: [/input-8, 410] 
split level 124: [/input-8, 453] 
split level 125: [/input-8, 629] 
split level 126: [/input-8, 442] 
split level 127: [/input-8, 416] 
split level 128: [/input-8, 83] 
split level 129: [/input-8, 53] 
split level 130: [/input-8, 785] 
split level 131: [/input-8, 229] 
split level 132: [/input, 2173] 
split level 133: [/input-8, 445] 
split level 134: [/input, 2547] 
split level 135: [/input, 4005] 
split level 136: [/input-8, 407] 
split level 137: [/input-8, 74] 
split level 138: [/input-8, 1668] 
split level 139: [/input, 4035] 
split level 140: [/input-8, 73] 
split level 141: [/input, 2186] 
split level 142: [/input, 2454] 
split level 143: [/input, 342] 
split level 144: [/input, 1126] 
split level 145: [/input-8, 15] 
split level 146: [/input, 2263] 
split level 147: [/input, 2555] 
split level 148: [/input, 328] 
split level 149: [/input-8, 400] 
split level 150: [/input-8, 319] 
split level 151: [/input-8, 153] 
split level 152: [/input-8, 1269] 
split level 153: [/input, 169] 
split level 154: [/input, 2538] 
split level 155: [/input, 2961] 
split level 156: [/input, 2189] 
split level 157: [/input-8, 805] 
split level 158: [/input-8, 1517] 
split level 159: [/input-8, 1775] 
split level 160: [/input, 2460] 
split level 161: [/input-8, 1336] 
split level 162: [/input-8, 899] 
split level 163: [/input-8, 311] 
split level 164: [/input-8, 1653] 
split level 165: [/input-8, 1773] 
split level 166: [/input, 3070] 
split level 167: [/input-8, 1289] 
split level 168: [/input-8, 1259] 
split level 169: [/input-8, 78] 
split level 170: [/input, 311] 
split level 171: [/input, 1512] 
split level 172: [/input-8, 1761] 
split level 173: [/input-8, 1765] 
split level 174: [/input, 344] 
split level 175: [/input, 2181] 
split level 176: [/input-8, 1921] 
split level 177: [/input, 2838] 
split level 178: [/input, 3922] 
split level 179: [/input, 3573] 
split level 180: [/input-8, 1776] 
split level 181: [/input, 3557] 
split level 182: [/input, 2165] 
split level 183: [/input, 2519] 
split level 184: [/input-8, 1770] 
split level 185: [/input, 2789] 
split level 186: [/input, 1478] 
split level 187: [/input, 1788] 
split level 188: [/input, 2550] 
split level 189: [/input, 4078] 
split level 190: [/input, 2252] 
split level 191: [/input, 2506] 
split level 192: [/input, 1961] 
split level 193: [/input, 3427] 
split level 194: [/input, 4021] 
split level 195: [/input, 2412] 
split level 196: [/input, 2261] 
split level 197: [/input, 2754] 
split level 198: [/input, 2977] 
split level 199: [/input, 2927] 
cut re-enabled after branching node selection
0 lb beta sum: 3.197009325027466, worst -0.5031580924987793
10 lb beta sum: 3.4016451835632324, worst -0.5080261826515198
Time: prepare 0.0160    bound 0.2186    transfer 0.0055    finalize 0.0039    func 0.2468    
Accumulated time: func 0.6246    prepare 0.0268    bound 0.5957    transfer 0.0057    finalize 0.0040    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01465768) min lb tensor(-0.50303948)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts: total 343 constraints, 29590 nonzero elements
cuts preparing time: 0.0132
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 343.
#cuts 1-3: 93
#cuts 7-9: 2
#cuts 10-12: 3
#cuts 13-15: 5
#cuts 16-18: 13
#cuts 19-21: 15
#cuts >= 20: 212
BICCOS time: 0.27542948722839355 
BICCOS Cumulative time: 0.27542948722839355
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.49074 (1), -0.49052 (1), -0.49025 (1), -0.49020 (1), -0.48941 (1), -0.48918 (1), -0.48909 (1), -0.48881 (1), -0.48862 (1), -0.48828 (1), -0.48792 (1), -0.48790 (1), -0.48693 (1), -0.48685 (1), -0.48617 (1), -0.48608 (1), -0.48523 (1), -0.48510 (1), -0.48419 (1), -0.48418 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5477    set_bounds 0.0091    solve 0.2468    add 0.2058    
Accumulated time: pickout 0.0004    decision 0.5477    set_bounds 0.0091    solve 0.2468    add 0.2058    
Current (lb-rhs): -0.490744948387146
50 domains visited
Cumulative time: 1.9474799633026123

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 53] 
split level 1: [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 69] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 69] 
split level 3: [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5116788148880005
10 lb beta sum: 3.289569854736328, worst -0.46856391429901123
Time: prepare 0.0070    bound 0.2133    transfer 0.0008    finalize 0.0023    func 0.2260    
Accumulated time: func 0.8505    prepare 0.0341    bound 0.8090    transfer 0.0065    finalize 0.0063    
all_split False
======================Cut inference begins======================
max lb tensor(0.19003928) min lb tensor(-0.46063277)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01564478874206543 
BICCOS Cumulative time: 0.291074275970459
Preprocessing time: 0.012003183364868164 Inference time: 0.0004451274871826172 Add cuts time: 0.00019407272338867188 Cut analysis time: 0.0030024051666259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24055 (2), -0.23970 (2), -0.23970 (2), -0.23954 (2), -0.23908 (2), -0.23725 (2), -0.23707 (2), -0.23663 (2), -0.23601 (2), -0.23545 (2), -0.23544 (2), -0.23467 (2), -0.23467 (2), -0.23452 (2), -0.23406 (2), -0.23287 (2), -0.23260 (2), -0.22985 (2), -0.22977 (2), -0.22353 (2), 
Length of domains: 50
Time: pickout 0.0085    decision 0.0213    set_bounds 0.0132    solve 0.2260    add 0.2096    
Accumulated time: pickout 0.0089    decision 0.5690    set_bounds 0.0223    solve 0.4729    add 0.4154    
Current (lb-rhs): -0.24055367708206177
100 domains visited
Cumulative time: 2.449291467666626

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 24] [/input-12, 53] [/input-12, 53] [/input-12, 8] [/input-12, 8] [/input-12, 53] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] 
split level 2: [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 69] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25358837842941284
10 lb beta sum: 0.23371440172195435, worst -0.25199994444847107
Time: prepare 0.0067    bound 0.1346    transfer 0.0012    finalize 0.0026    func 0.1478    
Accumulated time: func 0.9983    prepare 0.0410    bound 0.9436    transfer 0.0077    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.43188560) min lb tensor(-0.23466985)
Number of Verified Splits: 62 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.017966032028198242 
BICCOS Cumulative time: 0.3090403079986572
Preprocessing time: 0.012178182601928711 Inference time: 0.0029010772705078125 Add cuts time: 0.0009114742279052734 Cut analysis time: 0.0019752979278564453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06638 (3), -0.06595 (3), -0.06591 (3), -0.06590 (3), -0.06467 (3), -0.06446 (3), -0.06435 (3), -0.06177 (3), -0.05730 (3), -0.05728 (3), -0.05653 (3), -0.05635 (3), -0.05603 (3), -0.05602 (3), -0.05579 (3), -0.05426 (3), -0.05276 (3), -0.05223 (3), -0.05206 (3), -0.05103 (3), 
Length of domains: 50
Time: pickout 0.0074    decision 0.0226    set_bounds 0.1679    solve 0.1478    add 0.2266    
Accumulated time: pickout 0.0164    decision 0.5916    set_bounds 0.1902    solve 0.6207    add 0.6420    
Current (lb-rhs): -0.06637519598007202
150 domains visited
Cumulative time: 3.0466501712799072

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 8] [/input-12, 8] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1972] [/input-8, 1716] [/input-8, 1716] [/input-12, 12] [/input-8, 1692] [/input-8, 1692] [/input-12, 12] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06954646110534668
10 lb beta sum: 0.21722473204135895, worst -0.061360687017440796
Time: prepare 0.0066    bound 0.1417    transfer 0.0020    finalize 0.0026    func 0.1556    
Accumulated time: func 1.1539    prepare 0.0479    bound 1.0853    transfer 0.0097    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.23223674) min lb tensor(-0.02541313)
Number of Verified Splits: 374 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts: total 522 constraints, 46749 nonzero elements
cuts preparing time: 0.0196
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 533.
#cuts 1-3: 129
#cuts 4-6: 3
#cuts 7-9: 2
#cuts 10-12: 5
#cuts 13-15: 7
#cuts 16-18: 22
#cuts 19-21: 23
#cuts >= 20: 342
BICCOS time: 0.45623064041137695 
BICCOS Cumulative time: 0.7652709484100342
Preprocessing time: 0.012945175170898438 Inference time: 0.021380901336669922 Add cuts time: 0.005919456481933594 Cut analysis time: 0.415985107421875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0214    set_bounds 0.0188    solve 0.1558    add 0.0259    
Accumulated time: pickout 0.0241    decision 0.6130    set_bounds 0.2090    solve 0.7765    add 0.6679    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.36150137e-01, 1.31826743e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.36150137e-01, 8.04427117e-02, 4.36061323e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.36150137e-01, 8.04427117e-02, 1.09237328e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 7.46145248e-02, 1.21422753e-01, 4.07490730e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8, 69]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 7.46145248e-02, 1.21422753e-01, 1.02077663e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 7.46145248e-02, 8.90673399e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.00041632, 0.14031880]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([24, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([0.00041632, 0.07412545]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39963769912719727
10 lb beta sum: 3.0217652320861816, worst -0.33906638622283936
Time: prepare 0.0005    bound 0.2197    transfer 0.0003    finalize 0.0002    func 0.2209    
Accumulated time: func 1.3748    prepare 0.0485    bound 1.3050    transfer 0.0100    finalize 0.0118    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 69] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 72] [/input-12, 69] [/input-12, 69] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 18] [/input-12, 49] [/input-12, 18] 
split level 5: [/input-12, 49] [/input-12, 18] [/input-12, 49] 
split level 6: [/input-8, 1969] [/input-8, 1626] [/input-8, 1626] 
cut re-enabled after branching node selection
0 lb beta sum: 4.75830602645874, worst -0.12954944372177124
10 lb beta sum: 4.684882164001465, worst -0.11564069986343384
Time: prepare 0.0176    bound 0.2204    transfer 0.0050    finalize 0.0027    func 0.2492    
Accumulated time: func 1.6240    prepare 0.0665    bound 1.5254    transfer 0.0150    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.66198975) min lb tensor(-0.10591555)
Number of Verified Splits: 351 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 4.715562343597412, worst -0.4066779911518097
10 lb beta sum: 4.727178573608398, worst -0.39417633414268494
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 92.
#cuts 1-3: 10
#cuts 4-6: 33
#cuts 7-9: 49
#cuts >= 20: 0
BICCOS time: 0.6265578269958496 
BICCOS Cumulative time: 1.3918287754058838
Preprocessing time: 0.011460304260253906 Inference time: 0.5830743312835693 Add cuts time: 0.02446579933166504 Cut analysis time: 0.007557392120361328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (7), -0.09948 (7), -0.09678 (7), -0.08909 (7), -0.07801 (7), -0.07667 (7), -0.07124 (7), -0.07013 (7), -0.06859 (7), -0.06443 (7), -0.05818 (7), -0.05452 (7), -0.04818 (7), -0.04126 (7), -0.04036 (7), -0.03748 (7), -0.03342 (7), -0.02886 (7), -0.02778 (7), -0.02776 (7), 
Length of domains: 33
Time: pickout 0.0007    decision 0.0217    set_bounds 0.0363    solve 0.2493    add 0.0627    
Accumulated time: pickout 0.0248    decision 0.6347    set_bounds 0.2453    solve 1.0259    add 0.7306    
Current (lb-rhs): -0.10591554641723633
183 domains visited
Cumulative time: 5.052450656890869

BaB round 2
batch: 33
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1692] [/input-8, 1692] [/input-8, 1700] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1692] [/input-8, 1635] [/input-8, 1692] 
split level 2: [/input-8, 1716] [/input-8, 1700] [/input-8, 1716] [/input-8, 1700] [/input-8, 468] [/input-8, 1700] [/input-8, 1716] [/input-8, 1700] [/input-8, 1700] [/input-8, 1700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14217424392700195
10 lb beta sum: 0.17360566556453705, worst -0.13956737518310547
Time: prepare 0.0054    bound 0.1551    transfer 0.0029    finalize 0.0019    func 0.1677    
Accumulated time: func 1.7917    prepare 0.0721    bound 1.6805    transfer 0.0178    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.59339041) min lb tensor(-0.10591555)
Number of Verified Splits: 138 of 264
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.026635408401489258 
BICCOS Cumulative time: 1.418464183807373
Preprocessing time: 0.00816655158996582 Inference time: 0.01325368881225586 Add cuts time: 0.0039713382720947266 Cut analysis time: 0.0012438297271728516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (10), -0.10592 (10), -0.10592 (10), -0.10592 (10), -0.09948 (10), -0.09948 (10), -0.09678 (10), -0.09678 (10), -0.09678 (10), -0.09678 (10), -0.09623 (10), -0.09606 (10), -0.08909 (10), -0.08909 (10), -0.08522 (10), -0.08484 (10), -0.07801 (10), -0.07801 (10), -0.07667 (10), -0.07667 (10), 
Length of domains: 126
Time: pickout 0.0058    decision 0.0166    set_bounds 0.0219    solve 0.1679    add 0.0805    
Accumulated time: pickout 0.0306    decision 0.6513    set_bounds 0.2672    solve 1.1937    add 0.8110    
Current (lb-rhs): -0.10591554641723633
309 domains visited
Cumulative time: 5.380063056945801

BaB round 3
batch: 126
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 7] [/input-12, 7] [/input-8, 1635] [/input-8, 1964] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13349732756614685
10 lb beta sum: 0.3771876096725464, worst -0.162458598613739
Time: prepare 0.0053    bound 0.1559    transfer 0.0028    finalize 0.0022    func 0.1679    
Accumulated time: func 1.9596    prepare 0.0776    bound 1.8364    transfer 0.0206    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.34344307) min lb tensor(-0.10591555)
Number of Verified Splits: 187 of 252
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.03036189079284668 
BICCOS Cumulative time: 1.4488260746002197
Preprocessing time: 0.007845163345336914 Inference time: 0.019049644470214844 Add cuts time: 0.002135038375854492 Cut analysis time: 0.0013320446014404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (11), -0.10592 (11), -0.10581 (11), -0.10017 (11), -0.09948 (11), -0.09948 (11), -0.09678 (11), -0.09678 (11), -0.09569 (11), -0.09032 (11), -0.08909 (11), -0.08909 (11), -0.08802 (11), -0.08784 (11), -0.08551 (11), -0.08133 (11), -0.07727 (11), -0.07699 (11), -0.07667 (11), -0.07667 (11), 
Length of domains: 65
Time: pickout 0.0132    decision 0.0190    set_bounds 0.0114    solve 0.1680    add 0.0764    
Accumulated time: pickout 0.0438    decision 0.6704    set_bounds 0.2786    solve 1.3617    add 0.8875    
Current (lb-rhs): -0.10591554641723633
374 domains visited
Cumulative time: 5.706579685211182

BaB round 4
batch: 65
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1716] [/input-12, 7] [/input-8, 1708] [/input-8, 1708] [/input-12, 7] [/input-8, 1708] [/input-8, 1708] [/input-8, 1716] [/input-12, 7] [/input-8, 1708] 
split level 1: [/input-8, 468] [/input-8, 468] [/input-8, 1716] [/input-8, 1716] [/input-8, 468] [/input-8, 1716] [/input-8, 1716] [/input-8, 468] [/input-8, 468] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11636704206466675
10 lb beta sum: 0.5693215727806091, worst -0.11436629295349121
Time: prepare 0.0061    bound 0.1577    transfer 0.0018    finalize 0.0018    func 0.1692    
Accumulated time: func 2.1288    prepare 0.0839    bound 1.9941    transfer 0.0224    finalize 0.0204    
all_split False
======================Cut inference begins======================
max lb tensor(0.30067629) min lb tensor(-0.10591555)
Number of Verified Splits: 151 of 260
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.028281450271606445 
BICCOS Cumulative time: 1.4771075248718262
Preprocessing time: 0.008131265640258789 Inference time: 0.017047882080078125 Add cuts time: 0.0018761157989501953 Cut analysis time: 0.001226186752319336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (13), -0.10592 (13), -0.10592 (13), -0.10592 (13), -0.10111 (13), -0.10020 (13), -0.09954 (13), -0.09948 (13), -0.09948 (13), -0.09880 (13), -0.09863 (13), -0.09650 (13), -0.09399 (13), -0.09169 (13), -0.09037 (13), -0.08930 (13), -0.08827 (13), -0.08796 (13), -0.08693 (13), -0.08552 (13), 
Length of domains: 109
Time: pickout 0.0143    decision 0.0187    set_bounds 0.0164    solve 0.1693    add 0.0766    
Accumulated time: pickout 0.0581    decision 0.6890    set_bounds 0.2950    solve 1.5310    add 0.9640    
Current (lb-rhs): -0.10591554641723633
483 domains visited
Cumulative time: 6.0379040241241455

BaB round 5
batch: 109
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1717] [/input-8, 468] [/input-8, 1726] [/input-8, 1708] [/input-8, 1717] [/input-8, 468] [/input-8, 1726] [/input-8, 1717] [/input-8, 468] [/input-8, 1726] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11304289102554321
10 lb beta sum: 0.5077504515647888, worst -0.11111937463283539
Time: prepare 0.0046    bound 0.1546    transfer 0.0023    finalize 0.0012    func 0.1641    
Accumulated time: func 2.2929    prepare 0.0887    bound 2.1487    transfer 0.0247    finalize 0.0216    
all_split False
======================Cut inference begins======================
max lb tensor(0.02683479) min lb tensor(-0.10591555)
Number of Verified Splits: 27 of 218
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.011896371841430664 
BICCOS Cumulative time: 1.4890038967132568
Preprocessing time: 0.006640434265136719 Inference time: 0.0031647682189941406 Add cuts time: 0.0005819797515869141 Cut analysis time: 0.0015091896057128906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (14), -0.10592 (14), -0.10592 (14), -0.10592 (14), -0.09948 (14), -0.09849 (14), -0.09758 (14), -0.09756 (14), -0.09664 (14), -0.09572 (14), -0.09516 (14), -0.09478 (14), -0.09268 (14), -0.09028 (14), -0.08906 (14), -0.08608 (14), -0.08548 (14), -0.08512 (14), -0.08470 (14), -0.08443 (14), 
Length of domains: 191
Time: pickout 0.0154    decision 0.0181    set_bounds 0.0095    solve 0.1642    add 0.0775    
Accumulated time: pickout 0.0736    decision 0.7071    set_bounds 0.3045    solve 1.6952    add 1.0415    
Current (lb-rhs): -0.10591554641723633
674 domains visited
Cumulative time: 6.341877222061157

BaB round 6
batch: 191
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1969] [/input-8, 1717] [/input-8, 1969] [/input-8, 1726] [/input-8, 1717] [/input-8, 1969] [/input-8, 1717] [/input-8, 1969] [/input-8, 1726] [/input-8, 1717] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6524893641471863, worst -0.10826361179351807
10 lb beta sum: 0.6524893641471863, worst -0.10822939872741699
Time: prepare 0.0172    bound 0.1548    transfer 0.0021    finalize 0.0019    func 0.1786    
Accumulated time: func 2.4715    prepare 0.1061    bound 2.3035    transfer 0.0268    finalize 0.0235    
all_split False
======================Cut inference begins======================
max lb tensor(0.02593899) min lb tensor(-0.10591555)
Number of Verified Splits: 65 of 382
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.022098064422607422 
BICCOS Cumulative time: 1.5111019611358643
Preprocessing time: 0.011217594146728516 Inference time: 0.00808858871459961 Add cuts time: 0.0009186267852783203 Cut analysis time: 0.0018732547760009766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (15), -0.10592 (15), -0.10592 (15), -0.10576 (15), -0.09792 (15), -0.09544 (15), -0.09452 (15), -0.09355 (15), -0.09300 (15), -0.09266 (15), -0.09241 (15), -0.09018 (15), -0.08995 (15), -0.08749 (15), -0.08527 (15), -0.08504 (15), -0.08456 (15), -0.08322 (15), -0.08227 (15), -0.08156 (15), 
Length of domains: 317
Time: pickout 0.0167    decision 0.0220    set_bounds 0.0167    solve 0.1787    add 0.0775    
Accumulated time: pickout 0.0902    decision 0.7291    set_bounds 0.3212    solve 1.8739    add 1.1190    
Current (lb-rhs): -0.10591554641723633
991 domains visited
Cumulative time: 6.683433532714844

BaB round 7
batch: 317
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1708] [/input-8, 1717] [/input-8, 468] [/input-8, 468] [/input-8, 1708] [/input-8, 1717] [/input-8, 468] [/input-8, 1969] [/input-8, 1630] [/input-8, 1717] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6326666474342346, worst -0.10714131593704224
10 lb beta sum: 0.6326666474342346, worst -0.10712182521820068
Time: prepare 0.0286    bound 0.1603    transfer 0.0028    finalize 0.0032    func 0.1990    
Accumulated time: func 2.6705    prepare 0.1349    bound 2.4638    transfer 0.0296    finalize 0.0268    
all_split False
======================Cut inference begins======================
max lb tensor(0.02577668) min lb tensor(-0.10591555)
Number of Verified Splits: 88 of 634
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 17
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03423810005187988 
BICCOS Cumulative time: 1.5453400611877441
Preprocessing time: 0.01886916160583496 Inference time: 0.011304616928100586 Add cuts time: 0.0027914047241210938 Cut analysis time: 0.0012729167938232422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10592 (16), -0.10592 (16), -0.10540 (16), -0.10459 (16), -0.09498 (16), -0.09433 (16), -0.09340 (16), -0.09239 (16), -0.09149 (16), -0.09005 (16), -0.08949 (16), -0.08730 (16), -0.08647 (16), -0.08489 (16), -0.08455 (16), -0.08238 (16), -0.08211 (16), -0.08166 (16), -0.08154 (16), -0.08114 (16), 
Length of domains: 546
Time: pickout 0.0186    decision 0.0293    set_bounds 0.0274    solve 0.1991    add 0.0998    
Accumulated time: pickout 0.1088    decision 0.7584    set_bounds 0.3486    solve 2.0730    add 1.2188    
Current (lb-rhs): -0.10591554641723633
1537 domains visited
Cumulative time: 7.100024223327637

BaB round 8
batch: 546
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 1714] [/input-8, 1630] [/input-8, 1714] [/input-8, 1726] [/input-8, 468] [/input-8, 1630] [/input-8, 1726] [/input-8, 468] [/input-8, 1726] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10254409909248352
10 lb beta sum: 0.5093966126441956, worst -0.10060976445674896
Time: prepare 0.0211    bound 0.1585    transfer 0.0113    finalize 0.0054    func 0.2034    
Accumulated time: func 2.8739    prepare 0.1562    bound 2.6223    transfer 0.0409    finalize 0.0321    
all_split False
======================Cut inference begins======================
max lb tensor(0.29507935) min lb tensor(-0.10057394)
Number of Verified Splits: 246 of 1092
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 18
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.0718376636505127 
BICCOS Cumulative time: 1.6171777248382568
Preprocessing time: 0.03411579132080078 Inference time: 0.03323984146118164 Add cuts time: 0.0030655860900878906 Cut analysis time: 0.0014164447784423828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10057 (17), -0.09976 (17), -0.09933 (17), -0.09851 (17), -0.09368 (17), -0.09286 (17), -0.08876 (17), -0.08784 (17), -0.08739 (17), -0.08645 (17), -0.08619 (17), -0.08540 (17), -0.08538 (17), -0.08437 (17), -0.08046 (17), -0.07991 (17), -0.07943 (17), -0.07888 (17), -0.07776 (17), -0.07664 (17), 
Length of domains: 846
Time: pickout 0.0573    decision 0.0457    set_bounds 0.0475    solve 0.2036    add 0.1216    
Accumulated time: pickout 0.1661    decision 0.8042    set_bounds 0.3961    solve 2.2767    add 1.3403    
Current (lb-rhs): -0.10057394206523895
2383 domains visited
Cumulative time: 7.656708478927612

BaB round 9
batch: 846
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1695] [/input-8, 1635] [/input-8, 1695] [/input-8, 1635] [/input-8, 468] [/input-8, 420] [/input-8, 1969] [/input-8, 420] [/input-8, 1969] [/input-8, 420] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09547758102416992
10 lb beta sum: 0.4801805317401886, worst -0.09350216388702393
Time: prepare 0.0341    bound 0.1749    transfer 0.0097    finalize 0.0089    func 0.2387    
Accumulated time: func 3.1126    prepare 0.1905    bound 2.7973    transfer 0.0505    finalize 0.0410    
all_split False
======================Cut inference begins======================
max lb tensor(0.02509284) min lb tensor(-0.09344079)
Number of Verified Splits: 447 of 1692
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 18
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.12497448921203613 
BICCOS Cumulative time: 1.742152214050293
Preprocessing time: 0.0552520751953125 Inference time: 0.06343269348144531 Add cuts time: 0.004817485809326172 Cut analysis time: 0.0014722347259521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09344 (18), -0.09262 (18), -0.09218 (18), -0.09136 (18), -0.09115 (18), -0.09034 (18), -0.08990 (18), -0.08908 (18), -0.08617 (18), -0.08535 (18), -0.08388 (18), -0.08307 (18), -0.08188 (18), -0.08164 (18), -0.08088 (18), -0.08071 (18), -0.08028 (18), -0.07935 (18), -0.07934 (18), -0.07867 (18), 
Length of domains: 1245
Time: pickout 0.0858    decision 0.0609    set_bounds 0.0776    solve 0.2392    add 0.0940    
Accumulated time: pickout 0.2519    decision 0.8650    set_bounds 0.4737    solve 2.5158    add 1.4343    
Current (lb-rhs): -0.09344078600406647
3628 domains visited
Cumulative time: 8.34947919845581

BaB round 10
batch: 1245
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 466] [/input-8, 506] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] [/input-8, 466] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0906902551651001
10 lb beta sum: 0.47055840492248535, worst -0.08868168294429779
Time: prepare 0.0484    bound 0.2065    transfer 0.0245    finalize 0.0115    func 0.3083    
Accumulated time: func 3.4209    prepare 0.2392    bound 3.0038    transfer 0.0750    finalize 0.0525    
all_split False
======================Cut inference begins======================
max lb tensor(0.02332699) min lb tensor(-0.08864452)
Number of Verified Splits: 513 of 2490
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 19
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.16821074485778809 
BICCOS Cumulative time: 1.910362958908081
Preprocessing time: 0.08436107635498047 Inference time: 0.07749509811401367 Add cuts time: 0.004801034927368164 Cut analysis time: 0.0015535354614257812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08864 (19), -0.08806 (19), -0.08782 (19), -0.08724 (19), -0.08636 (19), -0.08578 (19), -0.08554 (19), -0.08496 (19), -0.08335 (19), -0.08253 (19), -0.08107 (19), -0.08038 (19), -0.08025 (19), -0.07928 (19), -0.07809 (19), -0.07712 (19), -0.07700 (19), -0.07690 (19), -0.07687 (19), -0.07685 (19), 
Length of domains: 1977
Time: pickout 0.0351    decision 0.0795    set_bounds 0.2552    solve 0.3089    add 0.1403    
Accumulated time: pickout 0.2870    decision 0.9445    set_bounds 0.7289    solve 2.8247    add 1.5746    
Current (lb-rhs): -0.08864451944828033
5605 domains visited
Cumulative time: 9.349273204803467

BaB round 11
batch: 1977
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 506] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 438] [/input-8, 459] [/input-8, 506] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08518227934837341
10 lb beta sum: 0.46074190735816956, worst -0.08317223191261292
Time: prepare 0.2200    bound 0.2832    transfer 0.0249    finalize 0.0217    func 0.5764    
Accumulated time: func 3.9973    prepare 0.4594    bound 3.2870    transfer 0.0999    finalize 0.0742    
all_split False
======================Cut inference begins======================
max lb tensor(0.01445675) min lb tensor(-0.08310589)
Number of Verified Splits: 852 of 3954
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.27074623107910156 
BICCOS Cumulative time: 2.1811091899871826
Preprocessing time: 0.12627148628234863 Inference time: 0.13296890258789062 Add cuts time: 0.009810209274291992 Cut analysis time: 0.0016956329345703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08311 (20), -0.08252 (20), -0.08202 (20), -0.08144 (20), -0.08085 (20), -0.08027 (20), -0.07977 (20), -0.07960 (20), -0.07958 (20), -0.07918 (20), -0.07902 (20), -0.07900 (20), -0.07779 (20), -0.07735 (20), -0.07733 (20), -0.07677 (20), -0.07675 (20), -0.07671 (20), -0.07554 (20), -0.07445 (20), 
Length of domains: 3102
Time: pickout 0.1125    decision 0.1214    set_bounds 0.1756    solve 0.5777    add 0.1409    
Accumulated time: pickout 0.3995    decision 1.0659    set_bounds 0.9044    solve 3.4024    add 1.7155    
Current (lb-rhs): -0.0831058919429779
8707 domains visited
Cumulative time: 10.764795541763306

BaB round 12
batch: 3102
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 438] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1693] [/input-8, 1035] [/input-8, 1693] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07882732152938843
10 lb beta sum: 0.41027963161468506, worst -0.07688698172569275
Time: prepare 0.1360    bound 0.4061    transfer 0.0394    finalize 0.0306    func 0.6549    
Accumulated time: func 4.6522    prepare 0.5957    bound 3.6930    transfer 0.1394    finalize 0.1048    
all_split False
======================Cut inference begins======================
max lb tensor(0.02476859) min lb tensor(-0.07685044)
Number of Verified Splits: 2325 of 6204
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 22
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.6061878204345703 
BICCOS Cumulative time: 2.787297010421753
Preprocessing time: 0.1991431713104248 Inference time: 0.3849954605102539 Add cuts time: 0.019857406616210938 Cut analysis time: 0.002191781997680664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07685 (21), -0.07627 (21), -0.07577 (21), -0.07570 (21), -0.07518 (21), -0.07510 (21), -0.07462 (21), -0.07402 (21), -0.07394 (21), -0.07370 (21), -0.07335 (21), -0.07325 (21), -0.07324 (21), -0.07309 (21), -0.07285 (21), -0.07267 (21), -0.07265 (21), -0.07261 (21), -0.07227 (21), -0.07210 (21), 
Length of domains: 3879
Time: pickout 0.0626    decision 0.1827    set_bounds 0.4410    solve 0.6566    add 0.1849    
Accumulated time: pickout 0.4621    decision 1.2485    set_bounds 1.3454    solve 4.0590    add 1.9004    
Current (lb-rhs): -0.07685044407844543
12586 domains visited
Cumulative time: 12.92822813987732

BaB round 13
batch: 3879
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1630] [/input-8, 1717] [/input-8, 1630] [/input-8, 1717] [/input-8, 1717] [/input-8, 1630] [/input-8, 1717] [/input-8, 1969] [/input-8, 1695] [/input-8, 1695] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07611528038978577
10 lb beta sum: 0.5228564143180847, worst -0.0726458728313446
Time: prepare 0.1718    bound 0.4870    transfer 0.0196    finalize 0.0462    func 0.7773    
Accumulated time: func 5.4295    prepare 0.7678    bound 4.1800    transfer 0.1589    finalize 0.1510    
all_split False
======================Cut inference begins======================
max lb tensor(0.02788788) min lb tensor(-0.07262462)
Number of Verified Splits: 2250 of 7758
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts: total 715 constraints, 53745 nonzero elements
cuts preparing time: 0.0214
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 744.
#cuts 1-3: 178
#cuts 4-6: 9
#cuts 7-9: 1
#cuts 10-12: 4
#cuts 13-15: 22
#cuts 16-18: 32
#cuts 19-21: 31
#cuts >= 20: 467
BICCOS time: 1.137805700302124 
BICCOS Cumulative time: 3.925102710723877
Preprocessing time: 0.2517225742340088 Inference time: 0.38195371627807617 Add cuts time: 0.0356755256652832 Cut analysis time: 0.46845388412475586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07262 (22), -0.07205 (22), -0.07156 (22), -0.07149 (22), -0.07098 (22), -0.07088 (22), -0.07042 (22), -0.06982 (22), -0.06971 (22), -0.06946 (22), -0.06913 (22), -0.06897 (22), -0.06893 (22), -0.06885 (22), -0.06864 (22), -0.06840 (22), -0.06839 (22), -0.06835 (22), -0.06806 (22), -0.06783 (22), 
Length of domains: 5508
Time: pickout 0.1476    decision 0.3941    set_bounds 0.3582    solve 0.9468    add 0.1593    
Accumulated time: pickout 0.6096    decision 1.6426    set_bounds 1.7036    solve 5.0058    add 2.0597    
Current (lb-rhs): -0.07262462377548218
18094 domains visited
Cumulative time: 16.114195823669434

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1635] [/input-8, 1035] [/input-8, 459] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07301290333271027
10 lb beta sum: 3.5610508918762207, worst -0.041668325662612915
Time: prepare 0.1804    bound 1.8271    transfer 0.0337    finalize 0.0458    func 2.1412    
Accumulated time: func 7.5708    prepare 0.9485    bound 6.0071    transfer 0.1926    finalize 0.1968    
all_split False
======================Cut inference begins======================
max lb tensor(0.33500004) min lb tensor(-0.03265035)
Number of Verified Splits: 7413 of 8192
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 30
#cuts >= 20: 0
BICCOS time: 1.8485894203186035 
BICCOS Cumulative time: 5.7736921310424805
Preprocessing time: 0.4882996082305908 Inference time: 1.2939822673797607 Add cuts time: 0.06231689453125 Cut analysis time: 0.003990650177001953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06543 (22), -0.06485 (22), -0.06445 (22), -0.06429 (22), -0.06387 (22), -0.06368 (22), -0.06331 (22), -0.06271 (22), -0.06251 (22), -0.06226 (22), -0.06193 (22), -0.06187 (22), -0.06173 (22), -0.06165 (22), -0.06153 (22), -0.06129 (22), -0.06128 (22), -0.06115 (22), -0.06095 (22), -0.06067 (22), 
Length of domains: 2191
Time: pickout 0.0864    decision 0.4239    set_bounds 0.3836    solve 2.1436    add 0.0978    
Accumulated time: pickout 0.6961    decision 2.0666    set_bounds 2.0872    solve 7.1494    add 2.1575    
Current (lb-rhs): -0.06542730331420898
18873 domains visited
current_vram/total_varm: 13.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 21.191474199295044

BaB round 15
batch: 2191
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1035] [/input-8, 420] [/input-8, 1035] [/input-8, 420] [/input-8, 1635] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1035] [/input-8, 1630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0692613273859024
10 lb beta sum: 1.5898956060409546, worst -0.05443406105041504
Time: prepare 0.0977    bound 0.3076    transfer 0.0243    finalize 0.1682    func 0.6266    
Accumulated time: func 8.1974    prepare 1.0465    bound 6.3147    transfer 0.2169    finalize 0.3650    
all_split False
======================Cut inference begins======================
max lb tensor(0.94718909) min lb tensor(-0.05134952)
Number of Verified Splits: 3698 of 4382
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.7913329601287842 
BICCOS Cumulative time: 6.565025091171265
Preprocessing time: 0.14348196983337402 Inference time: 0.6178004741668701 Add cuts time: 0.028822898864746094 Cut analysis time: 0.0012276172637939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05135 (23), -0.05120 (23), -0.05072 (23), -0.05062 (23), -0.05037 (23), -0.05022 (23), -0.04973 (23), -0.04963 (23), -0.04628 (23), -0.04610 (23), -0.04532 (23), -0.04514 (23), -0.04200 (23), -0.04187 (23), -0.04154 (23), -0.04104 (23), -0.04091 (23), -0.04056 (23), -0.04009 (23), -0.03989 (23), 
Length of domains: 684
Time: pickout 0.0506    decision 0.1329    set_bounds 0.1983    solve 0.6274    add 0.0924    
Accumulated time: pickout 0.7466    decision 2.1994    set_bounds 2.2855    solve 7.7768    add 2.2499    
Current (lb-rhs): -0.051349520683288574
19557 domains visited
Cumulative time: 23.12581157684326

BaB round 16
batch: 684
splitting decisions: 
split level 0: [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 506] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0613044798374176

all verified at 2th iter
Time: prepare 0.0277    bound 0.0247    transfer 0.0121    finalize 0.0071    func 0.0800    
Accumulated time: func 8.2774    prepare 1.0744    bound 6.3394    transfer 0.2290    finalize 0.3721    
all_split False
======================Cut inference begins======================
max lb tensor(0.07751012) min lb tensor(0.02188800)
Number of Verified Splits: 1368 of 1368
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0019
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0439610481262207 
BICCOS Cumulative time: 6.608986139297485
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0293    decision 0.0502    set_bounds 0.0606    solve 0.0803    add 0.0001    
Accumulated time: pickout 0.7760    decision 2.2496    set_bounds 2.3460    solve 7.8571    add 2.2500    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
19557 domains visited
Cumulative time: 23.397379159927368

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=66_spec=2_26978138.log
found process to kill: terminal indx = 5
found process for pidx=2
kill process for pidx=2
found process for pidx=5
Result: safe in 46.5845 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1165]; unstable size 1165; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 1165] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 1165] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1165] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 250] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62490320,  8.33701801,  2.59462070, -0.24409157,  2.26730227,
          1.36074901,  2.49958372,  5.18873692,  7.07310247]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
         -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.74it/s]100%|██████████| 1/1 [00:00<00:00,  7.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.16810417, -25.43053436, -15.60754871, -19.06594658, -15.93624115,
          -18.74472427, -17.98241234, -19.17751884, -22.21742058, -24.08210182]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.32869244]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1322 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.29866027832031
alpha/beta optimization time: 1.356095790863037
initial alpha-crown bounds: tensor([[ 3.68976188,  8.44124222,  2.63029623, -0.18903548,  2.30742645,
          1.40437686,  2.56473923,  5.28525257,  7.16459990]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.18903547525405884
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6476 seconds.
lower bounds for all target labels: [3.6897597312927246, 8.441240310668945, 2.6302967071533203, -0.1890333890914917, 2.3074257373809814, 1.4043774604797363, 2.564739942550659, 5.285252571105957, 7.164600372314453]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
Process 41581 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 41581 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.35063529014587
Verifying property 0 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.441242218017578.

Properties batch 1, size 1
Remaining timeout: 198.1853313446045
Verifying property 1 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.164599895477295.

Properties batch 2, size 1
Remaining timeout: 198.08435368537903
Verifying property 2 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.285252571105957.

Properties batch 3, size 1
Remaining timeout: 197.98553705215454
Verifying property 3 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6897618770599365.

Properties batch 4, size 1
Remaining timeout: 197.88696789741516
Verifying property 4 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.630296230316162.

Properties batch 5, size 1
Remaining timeout: 197.78841948509216
Verifying property 5 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.564739227294922.

Properties batch 6, size 1
Remaining timeout: 197.68991041183472
Verifying property 6 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3074264526367188.

Properties batch 7, size 1
Remaining timeout: 197.59110188484192
Verifying property 7 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4043768644332886.

Properties batch 8, size 1
Remaining timeout: 197.49102640151978
Verifying property 8 with 1 instances.
##### Instance 67 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18903548]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.84048271, -25.05973816, -15.11311626, -18.68352318, -15.81582832,
        -18.42252541, -17.63798523, -19.13154984, -21.87983513, -23.72045708],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18903548]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1165
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 1435
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007281303405761719
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0905    transfer 0.0001    finalize 0.0002    func 0.0911    
Accumulated time: func 0.0911    prepare 0.0002    bound 0.0905    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 90] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 68] 
split level 8: [/input-12, 83] 
split level 9: [/input-12, 55] 
split level 10: [/input-8, 165] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 907] 
split level 13: [/input-8, 2010] 
split level 14: [/input-8, 877] 
split level 15: [/input-8, 182] 
split level 16: [/input-8, 1186] 
split level 17: [/input-12, 35] 
split level 18: [/input-8, 2017] 
split level 19: [/input-8, 173] 
split level 20: [/input-8, 2018] 
split level 21: [/input-8, 1178] 
split level 22: [/input-8, 1363] 
split level 23: [/input-8, 1193] 
split level 24: [/input-8, 2003] 
split level 25: [/input-8, 1354] 
split level 26: [/input-8, 1185] 
split level 27: [/input-8, 2026] 
split level 28: [/input-8, 140] 
split level 29: [/input-8, 2000] 
split level 30: [/input-8, 2002] 
split level 31: [/input-8, 1993] 
split level 32: [/input-8, 817] 
split level 33: [/input-8, 801] 
split level 34: [/input-8, 2014] 
split level 35: [/input-8, 1203] 
split level 36: [/input-8, 809] 
split level 37: [/input-8, 1356] 
split level 38: [/input-8, 1992] 
split level 39: [/input-8, 2027] 
split level 40: [/input-8, 175] 
split level 41: [/input-8, 1078] 
split level 42: [/input-8, 2033] 
split level 43: [/input-8, 149] 
split level 44: [/input-8, 810] 
split level 45: [/input, 3147] 
split level 46: [/input-8, 1372] 
split level 47: [/input, 955] 
split level 48: [/input-8, 1382] 
split level 49: [/input, 939] 
split level 50: [/input-8, 39] 
split level 51: [/input, 3131] 
split level 52: [/input-8, 1201] 
split level 53: [/input-8, 1204] 
split level 54: [/input-8, 2008] 
split level 55: [/input, 3548] 
split level 56: [/input, 891] 
split level 57: [/input, 3026] 
split level 58: [/input-8, 150] 
split level 59: [/input-8, 30] 
split level 60: [/input-8, 793] 
split level 61: [/input-8, 1172] 
split level 62: [/input, 947] 
split level 63: [/input, 963] 
split level 64: [/input, 923] 
split level 65: [/input-8, 47] 
split level 66: [/input-8, 591] 
split level 67: [/input-8, 1383] 
split level 68: [/input, 793] 
split level 69: [/input, 3515] 
split level 70: [/input-8, 19] 
split level 71: [/input, 901] 
split level 72: [/input-8, 1081] 
split level 73: [/input, 3522] 
split level 74: [/input, 3507] 
split level 75: [/input, 3097] 
split level 76: [/input, 1592] 
split level 77: [/input-8, 811] 
split level 78: [/input-8, 1177] 
split level 79: [/input, 917] 
split level 80: [/input, 3221] 
split level 81: [/input-8, 1567] 
split level 82: [/input-8, 167] 
split level 83: [/input, 3538] 
split level 84: [/input, 468] 
split level 85: [/input, 2584] 
split level 86: [/input, 907] 
split level 87: [/input, 3141] 
split level 88: [/input, 481] 
split level 89: [/input, 809] 
split level 90: [/input, 922] 
split level 91: [/input-8, 1357] 
split level 92: [/input, 3190] 
split level 93: [/input, 3491] 
split level 94: [/input-8, 2023] 
split level 95: [/input, 938] 
split level 96: [/input, 3523] 
split level 97: [/input, 3206] 
split level 98: [/input, 3539] 
split level 99: [/input, 3238] 
split level 100: [/input-8, 1381] 
split level 101: [/input, 3158] 
split level 102: [/input, 1340] 
split level 103: [/input, 3499] 
split level 104: [/input, 906] 
split level 105: [/input-8, 802] 
split level 106: [/input, 1357] 
split level 107: [/input, 1358] 
split level 108: [/input, 2637] 
split level 109: [/input, 937] 
split level 110: [/input-8, 623] 
split level 111: [/input, 2850] 
split level 112: [/input-8, 24] 
split level 113: [/input-8, 583] 
split level 114: [/input, 948] 
split level 115: [/input, 3386] 
split level 116: [/input, 846] 
split level 117: [/input, 54] 
split level 118: [/input, 3252] 
split level 119: [/input, 670] 
split level 120: [/input, 142] 
split level 121: [/input, 465] 
split level 122: [/input, 2638] 
split level 123: [/input, 2914] 
split level 124: [/input-8, 1347] 
split level 125: [/input, 158] 
split level 126: [/input, 3506] 
split level 127: [/input, 2913] 
split level 128: [/input, 885] 
split level 129: [/input, 3174] 
split level 130: [/input, 2853] 
split level 131: [/input, 1341] 
split level 132: [/input, 97] 
split level 133: [/input, 3483] 
split level 134: [/input, 2583] 
split level 135: [/input, 2427] 
split level 136: [/input, 2846] 
split level 137: [/input, 3157] 
split level 138: [/input, 65] 
split level 139: [/input, 979] 
split level 140: [/input, 2654] 
split level 141: [/input, 869] 
split level 142: [/input, 3058] 
split level 143: [/input, 3459] 
split level 144: [/input, 876] 
split level 145: [/input, 2851] 
split level 146: [/input, 2087] 
split level 147: [/input, 964] 
split level 148: [/input, 2670] 
split level 149: [/input, 2837] 
split level 150: [/input, 334] 
split level 151: [/input, 78] 
split level 152: [/input, 33] 
split level 153: [/input, 3948] 
split level 154: [/input, 21] 
split level 155: [/input, 3259] 
split level 156: [/input, 791] 
split level 157: [/input-8, 1197] 
split level 158: [/input, 3027] 
split level 159: [/input, 2577] 
split level 160: [/input, 46] 
split level 161: [/input-8, 324] 
split level 162: [/input, 341] 
split level 163: [/input-8, 1268] 
split level 164: [/input, 2881] 
split level 165: [/input, 2882] 
split level 166: [/input, 38] 
split level 167: [/input, 34] 
split level 168: [/input, 53] 
split level 169: [/input, 62] 
split level 170: [/input, 2606] 
split level 171: [/input, 980] 
split level 172: [/input, 836] 
split level 173: [/input, 20] 
split level 174: [/input, 3124] 
split level 175: [/input, 2836] 
split level 176: [/input, 113] 
split level 177: [/input, 3269] 
split level 178: [/input, 2897] 
split level 179: [/input, 87] 
split level 180: [/input, 3140] 
split level 181: [/input, 342] 
split level 182: [/input, 3243] 
split level 183: [/input, 114] 
split level 184: [/input, 36] 
split level 185: [/input, 2578] 
split level 186: [/input, 2661] 
split level 187: [/input, 2110] 
split level 188: [/input, 2898] 
split level 189: [/input, 1486] 
split level 190: [/input, 3475] 
split level 191: [/input, 17] 
split level 192: [/input, 3125] 
split level 193: [/input, 2845] 
split level 194: [/input, 30] 
split level 195: [/input, 1470] 
split level 196: [/input, 951] 
split level 197: [/input, 29] 
split level 198: [/input, 2134] 
split level 199: [/input, 2835] 
Time: prepare 0.0063    bound 0.0989    transfer 0.0175    finalize 0.0063    func 0.1291    
Accumulated time: func 0.2202    prepare 0.0169    bound 0.1894    transfer 0.0177    finalize 0.0065    
all_split False
======================Cut inference begins======================
max lb tensor(0.23746914) min lb tensor(-0.18894264)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.015192031860351562 
BICCOS Cumulative time: 0.015192031860351562
Preprocessing time: 0.01282358169555664 Inference time: 0.0003314018249511719 Add cuts time: 0.0003008842468261719 Cut analysis time: 0.0017361640930175781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18312 (1), -0.18308 (1), -0.18300 (1), -0.18290 (1), -0.18271 (1), -0.18260 (1), -0.18215 (1), -0.18210 (1), -0.18173 (1), -0.18166 (1), -0.18164 (1), -0.18145 (1), -0.18105 (1), -0.18101 (1), -0.18095 (1), -0.18090 (1), -0.18089 (1), -0.18062 (1), -0.18051 (1), -0.18028 (1), 
Length of domains: 50
Time: pickout 0.0017    decision 0.5223    set_bounds 0.0114    solve 0.1293    add 0.2258    
Accumulated time: pickout 0.0017    decision 0.5223    set_bounds 0.0114    solve 0.1293    add 0.2258    
Current (lb-rhs): -0.18312370777130127
50 domains visited
Cumulative time: 1.0217020511627197

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16106754541397095
10 lb beta sum: 1.0347520112991333, worst -0.11166411638259888
Time: prepare 0.0074    bound 0.1358    transfer 0.0010    finalize 0.0035    func 0.1504    
Accumulated time: func 0.3706    prepare 0.0245    bound 0.3251    transfer 0.0186    finalize 0.0099    
all_split False
======================Cut inference begins======================
max lb tensor(0.39295405) min lb tensor(-0.11152369)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.02519536018371582 
BICCOS Cumulative time: 0.04038739204406738
Preprocessing time: 0.014280080795288086 Inference time: 0.007409334182739258 Add cuts time: 0.0022394657135009766 Cut analysis time: 0.0012664794921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05646 (2), -0.05447 (2), -0.05428 (2), -0.05422 (2), -0.05421 (2), -0.05405 (2), -0.05404 (2), -0.05105 (2), -0.05027 (2), -0.04870 (2), -0.04842 (2), -0.04812 (2), -0.04793 (2), -0.04779 (2), -0.04762 (2), -0.04739 (2), -0.04719 (2), -0.04648 (2), -0.04641 (2), -0.04612 (2), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0227    set_bounds 0.0153    solve 0.1506    add 0.2451    
Accumulated time: pickout 0.0101    decision 0.5450    set_bounds 0.0267    solve 0.2799    add 0.4709    
Current (lb-rhs): -0.056458115577697754
100 domains visited
Cumulative time: 1.4960691928863525

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 10] [/input-12, 10] [/input-12, 90] 
split level 2: [/input-12, 90] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 90] [/input-12, 90] [/input-12, 10] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 90] [/input-12, 90] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12349390983581543

all verified at 2th iter
Time: prepare 0.0099    bound 0.0215    transfer 0.0018    finalize 0.0037    func 0.0395    
Accumulated time: func 0.4101    prepare 0.0347    bound 0.3467    transfer 0.0204    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(0.35966218) min lb tensor(0.01185098)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 56
#cuts >= 20: 0
BICCOS time: 0.04160332679748535 
BICCOS Cumulative time: 0.08199071884155273
Preprocessing time: 0.013016223907470703 Inference time: 0.01698470115661621 Add cuts time: 0.009987115859985352 Cut analysis time: 0.001615285873413086
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0221    set_bounds 0.0169    solve 0.0396    add 0.0237    
Accumulated time: pickout 0.0179    decision 0.5671    set_bounds 0.0436    solve 0.3196    add 0.4946    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.13765886e-10, 7.82870799e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.13765886e-10, 2.09925964e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.13765886e-10, 7.87750632e-02, 1.19702742e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58, 59]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.13765886e-10, 7.87750632e-02, 6.61080927e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([1.13765886e-10, 2.22904578e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08072325587272644

all verified at 1th iter
Time: prepare 0.0004    bound 0.0244    transfer 0.0002    finalize 0.0002    func 0.0253    
Accumulated time: func 0.4354    prepare 0.0351    bound 0.3711    transfer 0.0207    finalize 0.0138    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.8060 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.55639648, -33.09785080, -28.00553131, -27.40239906, -25.07222748,
         -27.10820198, -28.42906952, -22.25778961, -33.87366104, -32.03707886]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 701] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 701] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 288] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.60428238, 8.63137341, 4.23884344, 3.83983803, 1.92058897, 3.60424948,
         4.34731722, 9.57411575, 7.57268620]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0696 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.15664101, -31.39657593, -29.82341003, -30.75438118, -29.41454315,
         -31.94305992, -31.96259689, -30.53670311, -26.03734589, -29.66164589]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 659] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 659] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 197] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.00890595, 3.93032026, 2.37446499, 3.40709305, 1.97647095, 4.41568279,
         4.39016819, 2.74542379, 2.46872377]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.57001877, -21.33278465, -16.48242188, -17.88305855, -15.84688187,
         -18.45724487, -14.43099213, -19.91347122, -21.41075134, -23.09995651]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [825]; unstable size 825; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 238, 1, 825] with unstable size 237 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 825] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 825] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [237]; unstable size 237; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 237] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.65802479, 4.90856361, 1.05104470, 2.50940728, 0.27425575, 2.85676813,
         3.60879064, 4.98580980, 6.49914980]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.83767509, -29.44007301, -28.61532784, -29.34156609, -28.70956039,
         -30.31670189, -29.03779984, -30.47285080, -29.20039749, -29.62815285]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 642] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 206] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.54947042, 1.96131420, 2.40498400, 1.83005667, 3.13335967, 2.10148096,
         3.19824505, 2.43338394, 2.73391485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0661 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 654] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 215] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.30025935,  2.79075527, -0.64696014, -0.28283525, -0.00568276,
          0.09187192,  0.48905247,  0.94048786,  1.32147813]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.50596523, -18.77488327, -14.69626808, -14.34110641, -15.01922321,
         -14.73676872, -15.22504807, -16.18593597, -16.79512215, -17.35581017]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.16070747, -18.60272026, -14.32037830, -14.41568756, -14.80318546,
          -14.87370014, -15.22083282, -16.08508301, -16.55334473, -17.22670746],
         [-15.16070747, -18.60272026, -14.32037830, -14.41568756, -14.80318546,
          -14.87370014, -15.22083282, -16.08508301, -16.55334473, -17.22670746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74501991, -0.09530926,  0.38749790,  0.45801258]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0613 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.66821480, -25.16157913, -20.16737556, -19.99334526, -19.84637260,
         -20.53302574, -17.62543488, -22.75561523, -24.62155914, -24.01429939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [562]; unstable size 562; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 562] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 562] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 562] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 328] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44212151, 5.09512997, 1.39435589, 1.28885603, 0.93852150, 1.63264418,
         3.03026319, 4.88076591, 3.91813159]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.91881180, -32.59530640, -30.29003906, -30.00774956, -29.24390221,
         -30.22264290, -30.82009125, -25.47676849, -32.91277695, -30.89614296]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [668]; unstable size 668; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 668] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 668] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 668] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 226] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83449793, 5.22893524, 3.33997321, 3.20848703, 2.84958315, 3.43617344,
         3.74271822, 5.64434576, 3.49464083]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0660 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-31.62759590, -34.41730499, -33.84094238, -35.56791306, -34.24832153,
         -36.28593826, -34.87154770, -35.38038635, -33.02691269, -33.01538467]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [642]; unstable size 642; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 642] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 642] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 642] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 208] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.30125904, 1.11236966, 2.63641596, 1.30713153, 3.22894764, 1.90847647,
         2.05579519, 0.40490296, 0.05632377]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0484 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 579] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 579] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 231] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71136498,  4.01701736, -0.51415682,  0.11190534,  0.39652205,
          0.75778323,  1.25336564,  4.93491983,  2.87650180]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
         -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.70it/s]100%|██████████| 1/1 [00:00<00:00,  7.69it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.90902328, -21.90532684, -16.25102234, -16.58778763, -17.33627510,
          -16.20533562, -17.73783112, -18.40386963, -22.94217110, -20.61736488]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04568672]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1328 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.178876876831055
alpha/beta optimization time: 1.3856420516967773
initial alpha-crown bounds: tensor([[ 2.79542232,  4.10366631, -0.45930839,  0.13562948,  0.45598078,
          0.80009282,  1.31134105,  5.06682539,  2.96922851]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.459308385848999
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6374 seconds.
lower bounds for all target labels: [2.7954201698303223, 4.103664398193359, -0.45930933952331543, 0.13562935590744019, 0.4559788703918457, 0.8000936508178711, 1.3113411664962769, 5.066827774047852, 2.9692230224609375]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 42810 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.32106924057007
Verifying property 0 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.0668253898620605.

Properties batch 1, size 1
Remaining timeout: 198.05335354804993
Verifying property 1 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.103666305541992.

Properties batch 2, size 1
Remaining timeout: 197.94707703590393
Verifying property 2 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.969228506088257.

Properties batch 3, size 1
Remaining timeout: 197.85430335998535
Verifying property 3 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.795422315597534.

Properties batch 4, size 1
Remaining timeout: 197.76138997077942
Verifying property 4 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3113410472869873.

Properties batch 5, size 1
Remaining timeout: 197.6697072982788
Verifying property 5 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8000928163528442.

Properties batch 6, size 1
Remaining timeout: 197.57781648635864
Verifying property 6 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4559807777404785.

Properties batch 7, size 1
Remaining timeout: 197.48589539527893
Verifying property 7 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13562947511672974.

Properties batch 8, size 1
Remaining timeout: 197.39324069023132
Verifying property 8 with 1 instances.
##### Instance 76 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.45930839]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.32204628, -22.13885498, -16.85369110, -16.62333870, -17.79144096,
        -16.11716270, -17.99398041, -18.48896027, -23.38971329, -20.77302933],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.45930839]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 579
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 226
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 825
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008788108825683594
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0653    transfer 0.0001    finalize 0.0002    func 0.0658    
Accumulated time: func 0.0658    prepare 0.0002    bound 0.0653    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 72] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 7] 
split level 5: [/input-12, 17] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 64] 
split level 8: [/input-8, 1699] 
split level 9: [/input-8, 1949] 
split level 10: [/input-12, 71] 
split level 11: [/input-8, 226] 
split level 12: [/input-8, 1684] 
split level 13: [/input-8, 217] 
split level 14: [/input-8, 1946] 
split level 15: [/input-8, 437] 
split level 16: [/input-8, 1579] 
split level 17: [/input-8, 219] 
split level 18: [/input-8, 1637] 
split level 19: [/input-8, 254] 
split level 20: [/input-8, 427] 
split level 21: [/input-8, 428] 
split level 22: [/input-8, 253] 
split level 23: [/input-8, 209] 
split level 24: [/input-8, 212] 
split level 25: [/input-8, 434] 
split level 26: [/input-8, 410] 
split level 27: [/input-8, 733] 
split level 28: [/input-8, 47] 
split level 29: [/input-8, 249] 
split level 30: [/input-8, 250] 
split level 31: [/input-8, 55] 
split level 32: [/input-8, 1711] 
split level 33: [/input, 3543] 
split level 34: [/input-8, 423] 
split level 35: [/input-8, 435] 
split level 36: [/input-8, 1107] 
split level 37: [/input-8, 415] 
split level 38: [/input-8, 1686] 
split level 39: [/input-8, 1583] 
split level 40: [/input-8, 438] 
split level 41: [/input-8, 366] 
split level 42: [/input-8, 1316] 
split level 43: [/input-8, 227] 
split level 44: [/input, 985] 
split level 45: [/input, 3285] 
split level 46: [/input-8, 237] 
split level 47: [/input-8, 224] 
split level 48: [/input-8, 402] 
split level 49: [/input-8, 218] 
split level 50: [/input-8, 213] 
split level 51: [/input-8, 216] 
split level 52: [/input-8, 929] 
split level 53: [/input-8, 1338] 
split level 54: [/input-8, 281] 
split level 55: [/input-8, 229] 
split level 56: [/input, 1691] 
split level 57: [/input-8, 204] 
split level 58: [/input-8, 222] 
split level 59: [/input, 2789] 
split level 60: [/input, 473] 
split level 61: [/input-8, 198] 
split level 62: [/input-8, 1938] 
split level 63: [/input-8, 407] 
split level 64: [/input-8, 228] 
split level 65: [/input, 3130] 
split level 66: [/input-8, 195] 
split level 67: [/input, 1001] 
split level 68: [/input-8, 412] 
split level 69: [/input-8, 44] 
split level 70: [/input-8, 1389] 
split level 71: [/input-8, 248] 
split level 72: [/input, 2794] 
split level 73: [/input-8, 232] 
split level 74: [/input, 3305] 
split level 75: [/input-8, 578] 
split level 76: [/input, 2865] 
split level 77: [/input, 3233] 
split level 78: [/input-8, 1669] 
split level 79: [/input, 2793] 
split level 80: [/input, 2755] 
split level 81: [/input-8, 923] 
split level 82: [/input-8, 371] 
split level 83: [/input-8, 61] 
split level 84: [/input, 2713] 
split level 85: [/input, 2714] 
split level 86: [/input-8, 252] 
split level 87: [/input-8, 146] 
split level 88: [/input-8, 262] 
split level 89: [/input, 1996] 
split level 90: [/input-8, 240] 
split level 91: [/input-8, 255] 
split level 92: [/input, 2762] 
split level 93: [/input-8, 295] 
split level 94: [/input-8, 251] 
split level 95: [/input, 3302] 
split level 96: [/input-8, 401] 
split level 97: [/input, 2792] 
split level 98: [/input, 3198] 
split level 99: [/input-8, 1743] 
split level 100: [/input, 984] 
split level 101: [/input, 1948] 
split level 102: [/input-8, 1759] 
split level 103: [/input-8, 1517] 
split level 104: [/input, 987] 
split level 105: [/input-8, 1337] 
split level 106: [/input, 2759] 
split level 107: [/input, 3544] 
split level 108: [/input, 2739] 
split level 109: [/input, 167] 
split level 110: [/input, 2805] 
split level 111: [/input, 3268] 
split level 112: [/input, 2265] 
split level 113: [/input, 2722] 
split level 114: [/input, 471] 
split level 115: [/input, 2760] 
split level 116: [/input, 1507] 
split level 117: [/input, 2738] 
split level 118: [/input-8, 193] 
split level 119: [/input, 2249] 
split level 120: [/input-8, 239] 
split level 121: [/input, 3269] 
split level 122: [/input, 1964] 
split level 123: [/input, 3218] 
split level 124: [/input, 3235] 
split level 125: [/input, 2867] 
split level 126: [/input, 1411] 
split level 127: [/input-8, 207] 
split level 128: [/input, 2779] 
split level 129: [/input-8, 0] 
split level 130: [/input, 3306] 
split level 131: [/input, 2774] 
split level 132: [/input, 2806] 
split level 133: [/input, 3307] 
split level 134: [/input, 1675] 
split level 135: [/input, 2741] 
split level 136: [/input, 1978] 
split level 137: [/input, 824] 
split level 138: [/input, 974] 
split level 139: [/input, 147] 
split level 140: [/input-8, 1762] 
split level 141: [/input-8, 142] 
split level 142: [/input-8, 981] 
split level 143: [/input, 3989] 
split level 144: [/input, 2537] 
split level 145: [/input-8, 1272] 
split level 146: [/input, 2233] 
split level 147: [/input, 2723] 
split level 148: [/input, 2522] 
split level 149: [/input-8, 1786] 
split level 150: [/input, 1003] 
split level 151: [/input, 1398] 
split level 152: [/input, 18] 
split level 153: [/input, 1382] 
split level 154: [/input, 2490] 
split level 155: [/input, 3131] 
split level 156: [/input, 684] 
split level 157: [/input, 1997] 
split level 158: [/input, 152] 
split level 159: [/input, 1474] 
split level 160: [/input, 1316] 
split level 161: [/input, 235] 
split level 162: [/input, 3103] 
split level 163: [/input, 811] 
split level 164: [/input, 2473] 
split level 165: [/input, 291] 
split level 166: [/input, 2436] 
split level 167: [/input, 2179] 
split level 168: [/input, 97] 
split level 169: [/input, 277] 
split level 170: [/input, 17] 
split level 171: [/input, 3371] 
split level 172: [/input, 2780] 
split level 173: [/input, 2488] 
split level 174: [/input, 2692] 
split level 175: [/input, 1177] 
split level 176: [/input, 1162] 
split level 177: [/input, 278] 
split level 178: [/input, 2733] 
split level 179: [/input, 215] 
split level 180: [/input, 2781] 
split level 181: [/input, 1980] 
split level 182: [/input, 2217] 
split level 183: [/input, 478] 
split level 184: [/input, 236] 
split level 185: [/input, 2854] 
split level 186: [/input-8, 335] 
split level 187: [/input, 2523] 
split level 188: [/input, 4050] 
split level 189: [/input, 2770] 
split level 190: [/input, 1178] 
split level 191: [/input, 1194] 
split level 192: [/input, 2195] 
split level 193: [/input, 2539] 
split level 194: [/input, 3368] 
split level 195: [/input, 210] 
split level 196: [/input, 3549] 
split level 197: [/input, 2450] 
split level 198: [/input, 2635] 
split level 199: [/input, 793] 
Time: prepare 0.0063    bound 0.1143    transfer 0.0279    finalize 0.0054    func 0.1540    
Accumulated time: func 0.2197    prepare 0.0170    bound 0.1795    transfer 0.0280    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.08568859) min lb tensor(-0.45927024)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.014256715774536133 
BICCOS Cumulative time: 0.014256715774536133
Preprocessing time: 0.012028217315673828 Inference time: 0.00017762184143066406 Add cuts time: 8.749961853027344e-05 Cut analysis time: 0.001963376998901367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.44584 (1), -0.44482 (1), -0.44480 (1), -0.44427 (1), -0.44414 (1), -0.44397 (1), -0.44395 (1), -0.44355 (1), -0.44226 (1), -0.44224 (1), -0.44213 (1), -0.44194 (1), -0.44129 (1), -0.44062 (1), -0.43977 (1), -0.43804 (1), -0.43702 (1), -0.43640 (1), -0.43586 (1), -0.43536 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5493    set_bounds 0.0122    solve 0.1541    add 0.2233    
Accumulated time: pickout 0.0004    decision 0.5493    set_bounds 0.0122    solve 0.1541    add 0.2233    
Current (lb-rhs): -0.4458434581756592
50 domains visited
Cumulative time: 1.043858289718628

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 7] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-8, 929] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4309580326080322
10 lb beta sum: 0.16623170673847198, worst -0.4308435916900635
Time: prepare 0.0078    bound 0.1247    transfer 0.0011    finalize 0.0035    func 0.1398    
Accumulated time: func 0.3595    prepare 0.0251    bound 0.3042    transfer 0.0291    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.20923221) min lb tensor(-0.43080664)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.018838167190551758 
BICCOS Cumulative time: 0.03309488296508789
Preprocessing time: 0.013795852661132812 Inference time: 0.002514362335205078 Add cuts time: 0.0017955303192138672 Cut analysis time: 0.000732421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17822 (2), -0.17755 (2), -0.17655 (2), -0.17640 (2), -0.17576 (2), -0.17473 (2), -0.17471 (2), -0.17469 (2), -0.17371 (2), -0.17167 (2), -0.17104 (2), -0.17068 (2), -0.16905 (2), -0.16892 (2), -0.16855 (2), -0.16706 (2), -0.16687 (2), -0.16657 (2), -0.16366 (2), -0.16282 (2), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0222    set_bounds 0.0161    solve 0.1399    add 0.2609    
Accumulated time: pickout 0.0088    decision 0.5716    set_bounds 0.0283    solve 0.2941    add 0.4842    
Current (lb-rhs): -0.17821602523326874
100 domains visited
Cumulative time: 1.518763780593872

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 24] [/input-12, 24] [/input-12, 7] [/input-12, 7] [/input-12, 24] [/input-12, 24] [/input-12, 72] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1810016632080078
10 lb beta sum: 0.5780531167984009, worst -0.14108610153198242
Time: prepare 0.0081    bound 0.1263    transfer 0.0030    finalize 0.0031    func 0.1431    
Accumulated time: func 0.5026    prepare 0.0335    bound 0.4304    transfer 0.0321    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.38406920) min lb tensor(-0.13903770)
Number of Verified Splits: 280 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03442716598510742 
BICCOS Cumulative time: 0.06752204895019531
Preprocessing time: 0.013550519943237305 Inference time: 0.014419317245483398 Add cuts time: 0.0057375431060791016 Cut analysis time: 0.0007197856903076172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11754 (3), -0.11740 (3), -0.11676 (3), -0.11402 (3), -0.11397 (3), -0.10944 (3), -0.10941 (3), -0.10869 (3), -0.10776 (3), -0.10684 (3), -0.10636 (3), -0.10585 (3), -0.10466 (3), -0.10408 (3), -0.10359 (3), -0.10356 (3), -0.09835 (3), -0.09827 (3), -0.09816 (3), -0.09811 (3), 
Length of domains: 50
Time: pickout 0.0055    decision 0.0216    set_bounds 0.0196    solve 0.1433    add 0.2534    
Accumulated time: pickout 0.0143    decision 0.5931    set_bounds 0.0478    solve 0.4373    add 0.7376    
Current (lb-rhs): -0.11754299700260162
150 domains visited
Cumulative time: 2.003617525100708

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 7] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-8, 1699] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15088462829589844
10 lb beta sum: 0.5791546106338501, worst -0.11268700659275055
Time: prepare 0.0074    bound 0.1362    transfer 0.0012    finalize 0.0028    func 0.1505    
Accumulated time: func 0.6532    prepare 0.0420    bound 0.5666    transfer 0.0334    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.40095088) min lb tensor(-0.11160043)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.02952885627746582 
BICCOS Cumulative time: 0.09705090522766113
Preprocessing time: 0.014681100845336914 Inference time: 0.010366201400756836 Add cuts time: 0.0032510757446289062 Cut analysis time: 0.001230478286743164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04091 (4), -0.04066 (4), -0.04060 (4), -0.03920 (4), -0.03751 (4), -0.03743 (4), -0.03667 (4), -0.03517 (4), -0.03488 (4), -0.03485 (4), -0.03259 (4), -0.03259 (4), -0.03240 (4), -0.03217 (4), -0.03149 (4), -0.03143 (4), -0.03036 (4), -0.02791 (4), -0.02763 (4), -0.02762 (4), 
Length of domains: 50
Time: pickout 0.0108    decision 0.0294    set_bounds 0.0170    solve 0.1508    add 0.5449    
Accumulated time: pickout 0.0251    decision 0.6225    set_bounds 0.0648    solve 0.5881    add 1.2826    
Current (lb-rhs): -0.040912434458732605
200 domains visited
Cumulative time: 2.793818712234497

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-8, 1699] [/input-8, 1699] [/input-12, 17] [/input-8, 1699] [/input-8, 1699] [/input-12, 7] [/input-12, 17] [/input-12, 7] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 64] [/input-12, 4] [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-8, 1699] [/input-8, 1699] [/input-8, 1699] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08553433418273926
10 lb beta sum: 0.702625036239624, worst -0.04811778664588928
Time: prepare 0.0077    bound 0.1594    transfer 0.0030    finalize 0.0028    func 0.1756    
Accumulated time: func 0.8287    prepare 0.0500    bound 0.7261    transfer 0.0363    finalize 0.0178    
all_split False
======================Cut inference begins======================
max lb tensor(0.28789485) min lb tensor(-0.04014730)
Number of Verified Splits: 287 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.03629279136657715 
BICCOS Cumulative time: 0.13334369659423828
Preprocessing time: 0.012276172637939453 Inference time: 0.014966249465942383 Add cuts time: 0.006396055221557617 Cut analysis time: 0.0026543140411376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02277 (5), -0.02277 (5), -0.02277 (5), -0.02261 (5), -0.02259 (5), -0.02258 (5), -0.02256 (5), -0.02254 (5), -0.02249 (5), -0.02099 (5), -0.02075 (5), -0.02056 (5), -0.01985 (5), -0.01922 (5), -0.01846 (5), -0.01770 (5), -0.01765 (5), -0.01701 (5), -0.01618 (5), -0.01592 (5), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0227    set_bounds 0.0184    solve 0.1756    add 0.2557    
Accumulated time: pickout 0.0334    decision 0.6451    set_bounds 0.0832    solve 0.7637    add 1.5382    
Current (lb-rhs): -0.02277350425720215
250 domains visited
Cumulative time: 3.318593978881836

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 4.23917621e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 2.63913155e-01, 4.06023145e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 72, 29]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 2.63913155e-01, 1.51978821e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 1.79870844e-01, 6.71088696e-02, 6.75855428e-02,
        2.74607897e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 1.79870844e-01, 6.71088696e-02, 6.75855428e-02,
        3.46051296e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 1.79870844e-01, 6.71088696e-02, 6.18582517e-02,
        2.74835825e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 17, 29]), tensor([ 1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 1.79870844e-01, 6.71088696e-02, 6.18582517e-02,
        5.30021032e-04]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.79870844e-01, 2.26791818e-02, 2.91953743e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24,  4, 29]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.79870844e-01, 2.26791818e-02, 3.20056379e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.87038854e-01, 7.54891485e-02, 6.78744465e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 1.87038854e-01, 7.54891485e-02, 2.18971837e-02,
        2.47587159e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 7, 24, 17,  4, 29]), tensor([ 1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 1.87038854e-01, 7.54891485e-02, 2.18971837e-02,
        1.22950245e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [0.0004327637143433094], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.87038854e-01, 6.10350817e-02, 2.39410281e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1699], [-1.0], [0], [0.0004327637143433094], [3]), '/input-12': (tensor([ 7, 24, 17, 29]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 1.87038854e-01, 6.10350817e-02, 2.83648986e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1699]), tensor([1.]), tensor([0]), tensor([2.69049305e-43]), tensor([3])), '/input-12': ([7, 24, 17], [1.0, 1.0, 1.0], [0, 0, 0], [1.6302364677503274e+30, 0.187038853764534, 0.06103508174419403], [0, 1, 2])}
Shallow branching resets to n domains:  15
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41503214836120605
10 lb beta sum: 0.6853752732276917, worst -0.3909760117530823
Time: prepare 0.0008    bound 0.1541    transfer 0.0005    finalize 0.0003    func 0.1559    
Accumulated time: func 0.9846    prepare 0.0508    bound 0.8802    transfer 0.0368    finalize 0.0182    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 29] 
split level 1: [/input-12, 24] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] 
split level 2: [/input-12, 17] [/input-12, 64] [/input-12, 17] [/input-8, 1699] [/input-12, 59] 
split level 3: [/input-12, 4] [/input-8, 1699] [/input-12, 64] [/input-12, 64] [/input-12, 4] 
split level 4: [/input-12, 64] [/input-8, 438] [/input-8, 1699] [/input-8, 1686] [/input-12, 64] 
split level 5: [/input-8, 1699] [/input-8, 1686] [/input-8, 1316] [/input-8, 1724] [/input-8, 1686] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1720961332321167, worst -0.20630091428756714
10 lb beta sum: 1.1752742528915405, worst -0.20585840940475464
Time: prepare 0.0145    bound 0.1501    transfer 0.0056    finalize 0.0023    func 0.1746    
Accumulated time: func 1.1592    prepare 0.0657    bound 1.0303    transfer 0.0423    finalize 0.0204    
all_split False
======================Cut inference begins======================
max lb tensor(0.87604117) min lb tensor(-0.20565790)
Number of Verified Splits: 282 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.210927963256836, worst -1.3234381675720215
10 lb beta sum: 1.2465605735778809, worst -0.2683906555175781
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.3556346893310547 
BICCOS Cumulative time: 0.48897838592529297
Preprocessing time: 0.009017467498779297 Inference time: 0.3343331813812256 Add cuts time: 0.00957179069519043 Cut analysis time: 0.002712249755859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20566 (6), -0.19991 (6), -0.19510 (6), -0.18650 (6), -0.18254 (6), -0.17749 (6), -0.17465 (6), -0.16690 (6), -0.10566 (6), -0.10433 (6), -0.10166 (6), -0.09652 (6), -0.09069 (6), -0.07917 (6), -0.07649 (6), -0.07329 (6), -0.06853 (6), -0.06821 (6), -0.06370 (6), -0.06037 (6), 
Length of domains: 38
Time: pickout 0.0008    decision 0.0194    set_bounds 0.0300    solve 0.1747    add 0.0622    
Accumulated time: pickout 0.0342    decision 0.6645    set_bounds 0.1132    solve 0.9385    add 1.6005    
Current (lb-rhs): -0.20565789937973022
288 domains visited
Cumulative time: 4.276744842529297

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 71] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-8, 227] [/input-12, 59] 
split level 1: [/input-8, 1949] [/input-8, 435] [/input-8, 1949] [/input-8, 929] [/input-8, 410] [/input-8, 1949] [/input-8, 410] [/input-8, 410] [/input-8, 929] [/input-8, 410] 
split level 2: [/input-8, 435] [/input-8, 1686] [/input-8, 435] [/input-8, 923] [/input-8, 435] [/input-8, 410] [/input-8, 435] [/input-8, 1316] [/input-8, 1316] [/input-8, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1987149715423584
10 lb beta sum: 0.2328546941280365, worst -0.19460129737854004
Time: prepare 0.0062    bound 0.1592    transfer 0.0050    finalize 0.0031    func 0.1754    
Accumulated time: func 1.3346    prepare 0.0721    bound 1.1895    transfer 0.0473    finalize 0.0236    
all_split False
======================Cut inference begins======================
max lb tensor(0.31355852) min lb tensor(-0.19454980)
Number of Verified Splits: 172 of 304
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 7
#cuts 4-6: 8
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.0301358699798584 
BICCOS Cumulative time: 0.5191142559051514
Preprocessing time: 0.009053230285644531 Inference time: 0.016683340072631836 Add cuts time: 0.0027081966400146484 Cut analysis time: 0.0016911029815673828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19455 (9), -0.19188 (9), -0.18862 (9), -0.18544 (9), -0.18380 (9), -0.18104 (9), -0.17608 (9), -0.17388 (9), -0.17341 (9), -0.17110 (9), -0.17034 (9), -0.16978 (9), -0.16893 (9), -0.16670 (9), -0.16646 (9), -0.16632 (9), -0.16600 (9), -0.16535 (9), -0.16350 (9), -0.16327 (9), 
Length of domains: 132
Time: pickout 0.0062    decision 0.0167    set_bounds 0.0234    solve 0.1755    add 0.0829    
Accumulated time: pickout 0.0404    decision 0.6812    set_bounds 0.1366    solve 1.1139    add 1.6834    
Current (lb-rhs): -0.1945497989654541
420 domains visited
Cumulative time: 4.61989426612854

BaB round 3
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-12, 71] [/input-8, 1949] [/input-8, 1949] [/input-8, 1949] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.194549560546875
10 lb beta sum: 0.21583901345729828, worst -0.1944878101348877
Time: prepare 0.0055    bound 0.1573    transfer 0.0033    finalize 0.0016    func 0.1695    
Accumulated time: func 1.5041    prepare 0.0778    bound 1.3468    transfer 0.0506    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.61058187) min lb tensor(-0.19446421)
Number of Verified Splits: 161 of 264
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.028667211532592773 
BICCOS Cumulative time: 0.5477814674377441
Preprocessing time: 0.00834202766418457 Inference time: 0.016774654388427734 Add cuts time: 0.0022161006927490234 Cut analysis time: 0.0013344287872314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19446 (10), -0.19177 (10), -0.18850 (10), -0.18524 (10), -0.18368 (10), -0.18090 (10), -0.17539 (10), -0.17365 (10), -0.17269 (10), -0.17083 (10), -0.16881 (10), -0.16601 (10), -0.16595 (10), -0.16543 (10), -0.16534 (10), -0.16504 (10), -0.16429 (10), -0.16326 (10), -0.16230 (10), -0.16097 (10), 
Length of domains: 103
Time: pickout 0.0146    decision 0.0194    set_bounds 0.0115    solve 0.1695    add 0.0792    
Accumulated time: pickout 0.0550    decision 0.7006    set_bounds 0.1481    solve 1.2835    add 1.7626    
Current (lb-rhs): -0.19446420669555664
523 domains visited
Cumulative time: 4.955780744552612

BaB round 4
batch: 103
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 410] [/input-8, 410] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19096946716308594
10 lb beta sum: 0.43988192081451416, worst -0.17952409386634827
Time: prepare 0.0046    bound 0.1585    transfer 0.0023    finalize 0.0015    func 0.1684    
Accumulated time: func 1.6724    prepare 0.0825    bound 1.5054    transfer 0.0529    finalize 0.0267    
all_split False
======================Cut inference begins======================
max lb tensor(0.53561676) min lb tensor(-0.17949061)
Number of Verified Splits: 87 of 206
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 11
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.019368410110473633 
BICCOS Cumulative time: 0.5671498775482178
Preprocessing time: 0.006365299224853516 Inference time: 0.009935379028320312 Add cuts time: 0.0018718242645263672 Cut analysis time: 0.0011959075927734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17949 (11), -0.17677 (11), -0.17253 (11), -0.16914 (11), -0.16747 (11), -0.16471 (11), -0.16182 (11), -0.16020 (11), -0.15939 (11), -0.15878 (11), -0.15710 (11), -0.15688 (11), -0.15666 (11), -0.15571 (11), -0.15513 (11), -0.15508 (11), -0.15410 (11), -0.15249 (11), -0.15237 (11), -0.15110 (11), 
Length of domains: 119
Time: pickout 0.0142    decision 0.0200    set_bounds 0.0094    solve 0.1684    add 0.0793    
Accumulated time: pickout 0.0692    decision 0.7206    set_bounds 0.1575    solve 1.4519    add 1.8419    
Current (lb-rhs): -0.1794906109571457
642 domains visited
Cumulative time: 5.274229049682617

BaB round 5
batch: 119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-8, 1579] [/input-8, 1107] [/input-8, 435] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18512296676635742
10 lb beta sum: 0.7513192296028137, worst -0.17195886373519897
Time: prepare 0.0049    bound 0.1551    transfer 0.0012    finalize 0.0012    func 0.1643    
Accumulated time: func 1.8368    prepare 0.0877    bound 1.6604    transfer 0.0541    finalize 0.0280    
all_split False
======================Cut inference begins======================
max lb tensor(0.50293773) min lb tensor(-0.17191751)
Number of Verified Splits: 54 of 238
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.015589714050292969 
BICCOS Cumulative time: 0.5827395915985107
Preprocessing time: 0.007248640060424805 Inference time: 0.005715847015380859 Add cuts time: 0.000926971435546875 Cut analysis time: 0.0016982555389404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17192 (12), -0.17148 (12), -0.16916 (12), -0.16872 (12), -0.16484 (12), -0.16143 (12), -0.15942 (12), -0.15880 (12), -0.15659 (12), -0.15599 (12), -0.15165 (12), -0.15121 (12), -0.15019 (12), -0.14891 (12), -0.14854 (12), -0.14847 (12), -0.14745 (12), -0.14723 (12), -0.14575 (12), -0.14561 (12), 
Length of domains: 184
Time: pickout 0.0154    decision 0.0185    set_bounds 0.0108    solve 0.1644    add 0.0796    
Accumulated time: pickout 0.0846    decision 0.7391    set_bounds 0.1683    solve 1.6163    add 1.9214    
Current (lb-rhs): -0.17191751301288605
826 domains visited
Cumulative time: 5.585997104644775

BaB round 6
batch: 184
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1107] [/input-8, 1316] [/input-8, 1316] [/input-8, 1107] [/input-8, 438] [/input-8, 218] [/input-8, 1107] [/input-8, 1316] [/input-8, 438] [/input-8, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18071222305297852
10 lb beta sum: 0.9948168396949768, worst -0.16740578413009644
Time: prepare 0.0075    bound 0.1580    transfer 0.0043    finalize 0.0019    func 0.1742    
Accumulated time: func 2.0110    prepare 0.0954    bound 1.8185    transfer 0.0584    finalize 0.0299    
all_split False
======================Cut inference begins======================
max lb tensor(0.53914124) min lb tensor(-0.16738708)
Number of Verified Splits: 208 of 368
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.03966474533081055 
BICCOS Cumulative time: 0.6224043369293213
Preprocessing time: 0.010785579681396484 Inference time: 0.024529218673706055 Add cuts time: 0.0029947757720947266 Cut analysis time: 0.0013551712036132812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16739 (13), -0.16695 (13), -0.16554 (13), -0.16510 (13), -0.16478 (13), -0.16461 (13), -0.16418 (13), -0.16389 (13), -0.16295 (13), -0.16251 (13), -0.16134 (13), -0.16034 (13), -0.15865 (13), -0.15805 (13), -0.15585 (13), -0.15526 (13), -0.14936 (13), -0.14768 (13), -0.14723 (13), -0.14612 (13), 
Length of domains: 160
Time: pickout 0.0167    decision 0.0233    set_bounds 0.0164    solve 0.1743    add 0.0799    
Accumulated time: pickout 0.1013    decision 0.7624    set_bounds 0.1848    solve 1.7906    add 2.0013    
Current (lb-rhs): -0.16738708317279816
986 domains visited
Cumulative time: 5.944581031799316

BaB round 7
batch: 160
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1686] [/input-8, 438] [/input-8, 227] [/input-8, 237] [/input-8, 1686] [/input-8, 227] [/input-8, 1316] [/input-8, 237] [/input-8, 1686] [/input-8, 929] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17761754989624023
10 lb beta sum: 0.8258432745933533, worst -0.16737103462219238
Time: prepare 0.0065    bound 0.1554    transfer 0.0018    finalize 0.0019    func 0.1678    
Accumulated time: func 2.1788    prepare 0.1021    bound 1.9739    transfer 0.0601    finalize 0.0318    
all_split False
======================Cut inference begins======================
max lb tensor(0.29669297) min lb tensor(-0.16736364)
Number of Verified Splits: 60 of 320
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.01976776123046875 
BICCOS Cumulative time: 0.64217209815979
Preprocessing time: 0.00981593132019043 Inference time: 0.006749391555786133 Add cuts time: 0.0016570091247558594 Cut analysis time: 0.0015454292297363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16736 (14), -0.16693 (14), -0.16550 (14), -0.16507 (14), -0.16458 (14), -0.16415 (14), -0.16290 (14), -0.16247 (14), -0.16241 (14), -0.16197 (14), -0.16100 (14), -0.16056 (14), -0.16011 (14), -0.15999 (14), -0.15964 (14), -0.15919 (14), -0.15852 (14), -0.15814 (14), -0.15795 (14), -0.15795 (14), 
Length of domains: 260
Time: pickout 0.0148    decision 0.0208    set_bounds 0.0138    solve 0.1679    add 0.0882    
Accumulated time: pickout 0.1161    decision 0.7832    set_bounds 0.1986    solve 1.9585    add 2.0895    
Current (lb-rhs): -0.16736364364624023
1246 domains visited
Cumulative time: 6.277613639831543

BaB round 8
batch: 260
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 438] [/input-8, 227] [/input-8, 209] [/input-8, 438] [/input-8, 209] [/input-8, 438] [/input-8, 227] [/input-8, 415] [/input-8, 438] [/input-8, 415] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9248193502426147, worst -0.17144209146499634
10 lb beta sum: 1.3624365329742432, worst -0.1658528447151184
Time: prepare 0.0234    bound 0.1608    transfer 0.0095    finalize 0.0024    func 0.2003    
Accumulated time: func 2.3791    prepare 0.1258    bound 2.1347    transfer 0.0697    finalize 0.0342    
all_split False
======================Cut inference begins======================
max lb tensor(0.42859948) min lb tensor(-0.16584760)
Number of Verified Splits: 254 of 520
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.053206682205200195 
BICCOS Cumulative time: 0.6953787803649902
Preprocessing time: 0.015433311462402344 Inference time: 0.03215909004211426 Add cuts time: 0.004160881042480469 Cut analysis time: 0.001453399658203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16585 (15), -0.16542 (15), -0.16404 (15), -0.16361 (15), -0.16309 (15), -0.16266 (15), -0.16144 (15), -0.16101 (15), -0.16073 (15), -0.16029 (15), -0.15893 (15), -0.15849 (15), -0.15800 (15), -0.15756 (15), -0.15697 (15), -0.15635 (15), -0.15634 (15), -0.15591 (15), -0.15418 (15), -0.15360 (15), 
Length of domains: 266
Time: pickout 0.0413    decision 0.0275    set_bounds 0.0236    solve 0.2005    add 0.0799    
Accumulated time: pickout 0.1574    decision 0.8107    set_bounds 0.2221    solve 2.1589    add 2.1694    
Current (lb-rhs): -0.16584759950637817
1512 domains visited
Cumulative time: 6.71202826499939

BaB round 9
batch: 266
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 218] [/input-8, 415] [/input-8, 218] [/input-8, 415] [/input-8, 218] [/input-8, 218] [/input-8, 438] [/input-8, 218] [/input-8, 415] [/input-8, 218] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17368388175964355
10 lb beta sum: 2.17999267578125, worst -0.1515079140663147
Time: prepare 0.0104    bound 0.1565    transfer 0.0013    finalize 0.0024    func 0.1741    
Accumulated time: func 2.5532    prepare 0.1364    bound 2.2912    transfer 0.0710    finalize 0.0366    
all_split False
======================Cut inference begins======================
max lb tensor(0.70818400) min lb tensor(-0.15148652)
Number of Verified Splits: 375 of 532
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.07190465927124023 
BICCOS Cumulative time: 0.7672834396362305
Preprocessing time: 0.015270233154296875 Inference time: 0.04907107353210449 Add cuts time: 0.006192684173583984 Cut analysis time: 0.0013706684112548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15149 (16), -0.15106 (16), -0.14971 (16), -0.14928 (16), -0.14872 (16), -0.14830 (16), -0.14710 (16), -0.14667 (16), -0.14646 (16), -0.14602 (16), -0.14467 (16), -0.14423 (16), -0.14368 (16), -0.14324 (16), -0.14257 (16), -0.14206 (16), -0.14197 (16), -0.14161 (16), -0.13979 (16), -0.13920 (16), 
Length of domains: 157
Time: pickout 0.0198    decision 0.0263    set_bounds 0.0239    solve 0.1742    add 0.0766    
Accumulated time: pickout 0.1771    decision 0.8371    set_bounds 0.2460    solve 2.3332    add 2.2459    
Current (lb-rhs): -0.15148651599884033
1669 domains visited
Cumulative time: 7.11339259147644

BaB round 10
batch: 157
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 438] [/input-8, 438] [/input-8, 237] [/input-8, 218] [/input-8, 237] [/input-8, 437] [/input-8, 237] [/input-8, 218] [/input-8, 438] [/input-8, 237] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16844463348388672
10 lb beta sum: 2.149045467376709, worst -0.14908838272094727
Time: prepare 0.0068    bound 0.1581    transfer 0.0008    finalize 0.0016    func 0.1694    
Accumulated time: func 2.7225    prepare 0.1434    bound 2.4494    transfer 0.0717    finalize 0.0382    
all_split False
======================Cut inference begins======================
max lb tensor(0.30534124) min lb tensor(-0.14906925)
Number of Verified Splits: 63 of 314
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.021448612213134766 
BICCOS Cumulative time: 0.7887320518493652
Preprocessing time: 0.00985574722290039 Inference time: 0.008301734924316406 Add cuts time: 0.0019202232360839844 Cut analysis time: 0.0013709068298339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14907 (17), -0.14864 (17), -0.14729 (17), -0.14686 (17), -0.14637 (17), -0.14595 (17), -0.14469 (17), -0.14426 (17), -0.14396 (17), -0.14353 (17), -0.14216 (17), -0.14174 (17), -0.14126 (17), -0.14083 (17), -0.13956 (17), -0.13913 (17), -0.13667 (17), -0.13608 (17), -0.13566 (17), -0.13509 (17), 
Length of domains: 251
Time: pickout 0.0150    decision 0.0209    set_bounds 0.1638    solve 0.1694    add 0.0799    
Accumulated time: pickout 0.1921    decision 0.8580    set_bounds 0.4098    solve 2.5026    add 2.3259    
Current (lb-rhs): -0.14906924962997437
1920 domains visited
Cumulative time: 7.59128475189209

BaB round 11
batch: 251
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 437] [/input-8, 237] [/input-8, 437] [/input-8, 237] [/input-8, 437] [/input-8, 237] [/input-8, 437] [/input-8, 437] [/input-8, 237] [/input-8, 437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16745924949645996
10 lb beta sum: 2.348275899887085, worst -0.14836478233337402
Time: prepare 0.0101    bound 0.1586    transfer 0.0010    finalize 0.0023    func 0.1752    
Accumulated time: func 2.8977    prepare 0.1537    bound 2.6079    transfer 0.0727    finalize 0.0405    
all_split False
======================Cut inference begins======================
max lb tensor(0.55429566) min lb tensor(-0.14835376)
Number of Verified Splits: 272 of 502
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 0.06302857398986816 
BICCOS Cumulative time: 0.8517606258392334
Preprocessing time: 0.014566421508789062 Inference time: 0.04254937171936035 Add cuts time: 0.004366874694824219 Cut analysis time: 0.0015459060668945312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (18), -0.14793 (18), -0.14570 (18), -0.14527 (18), -0.14316 (18), -0.14270 (18), -0.14052 (18), -0.14007 (18), -0.13493 (18), -0.13433 (18), -0.13207 (18), -0.13148 (18), -0.13015 (18), -0.12965 (18), -0.12730 (18), -0.12675 (18), -0.12639 (18), -0.12597 (18), -0.12584 (18), -0.12427 (18), 
Length of domains: 230
Time: pickout 0.0184    decision 0.0262    set_bounds 0.0243    solve 0.1753    add 0.1093    
Accumulated time: pickout 0.2105    decision 0.8842    set_bounds 0.4341    solve 2.6779    add 2.4352    
Current (lb-rhs): -0.14835375547409058
2150 domains visited
Cumulative time: 8.01763653755188

BaB round 12
batch: 230
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 733] [/input-8, 209] [/input-8, 733] [/input-8, 733] [/input-8, 209] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5672659873962402, worst -0.14835375547409058
10 lb beta sum: 2.5672659873962402, worst -0.14835232496261597
Time: prepare 0.0208    bound 0.1594    transfer 0.0028    finalize 0.0029    func 0.1890    
Accumulated time: func 3.0867    prepare 0.1748    bound 2.7673    transfer 0.0755    finalize 0.0435    
all_split False
======================Cut inference begins======================
max lb tensor(0.17061722) min lb tensor(-0.14835042)
Number of Verified Splits: 115 of 460
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.03368997573852539 
BICCOS Cumulative time: 0.8854506015777588
Preprocessing time: 0.013350963592529297 Inference time: 0.017113447189331055 Add cuts time: 0.0018188953399658203 Cut analysis time: 0.0014066696166992188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (19), -0.14793 (19), -0.14570 (19), -0.14527 (19), -0.14310 (19), -0.14265 (19), -0.14048 (19), -0.14000 (19), -0.13493 (19), -0.13433 (19), -0.13206 (19), -0.13148 (19), -0.13014 (19), -0.12965 (19), -0.12730 (19), -0.12675 (19), -0.12638 (19), -0.12596 (19), -0.12425 (19), -0.12358 (19), 
Length of domains: 345
Time: pickout 0.0600    decision 0.0254    set_bounds 0.0204    solve 0.1891    add 0.0909    
Accumulated time: pickout 0.2705    decision 0.9096    set_bounds 0.4545    solve 2.8670    add 2.5261    
Current (lb-rhs): -0.14835041761398315
2495 domains visited
Cumulative time: 8.445550203323364

BaB round 13
batch: 345
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 209] [/input-8, 733] [/input-8, 209] [/input-8, 209] [/input-8, 733] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16173362731933594
10 lb beta sum: 2.2145843505859375, worst -0.14835381507873535
Time: prepare 0.0135    bound 0.1594    transfer 0.0090    finalize 0.0036    func 0.1901    
Accumulated time: func 3.2768    prepare 0.1885    bound 2.9267    transfer 0.0845    finalize 0.0471    
all_split False
======================Cut inference begins======================
max lb tensor(0.29288268) min lb tensor(-0.14834905)
Number of Verified Splits: 171 of 690
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.05265378952026367 
BICCOS Cumulative time: 0.9381043910980225
Preprocessing time: 0.019847631454467773 Inference time: 0.028252363204956055 Add cuts time: 0.0030486583709716797 Cut analysis time: 0.001505136489868164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (20), -0.14793 (20), -0.14569 (20), -0.14527 (20), -0.14306 (20), -0.14263 (20), -0.14043 (20), -0.13999 (20), -0.13493 (20), -0.13433 (20), -0.13206 (20), -0.13148 (20), -0.13014 (20), -0.12963 (20), -0.12728 (20), -0.12675 (20), -0.12638 (20), -0.12595 (20), -0.12359 (20), -0.12358 (20), 
Length of domains: 519
Time: pickout 0.0185    decision 0.0309    set_bounds 0.0305    solve 0.1902    add 0.0896    
Accumulated time: pickout 0.2890    decision 0.9405    set_bounds 0.4850    solve 3.0573    add 2.6157    
Current (lb-rhs): -0.14834904670715332
3014 domains visited
Cumulative time: 8.86668848991394

BaB round 14
batch: 519
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 434] [/input-8, 213] [/input-8, 434] [/input-8, 213] [/input-8, 434] [/input-8, 227] [/input-8, 213] [/input-8, 227] [/input-8, 213] [/input-8, 227] 
cut re-enabled after branching node selection
0 lb beta sum: 2.555927038192749, worst -0.14835000038146973
10 lb beta sum: 2.555927038192749, worst -0.14835119247436523
Time: prepare 0.0487    bound 0.1605    transfer 0.0067    finalize 0.0044    func 0.2277    
Accumulated time: func 3.5045    prepare 0.2375    bound 3.0872    transfer 0.0912    finalize 0.0515    
all_split False
======================Cut inference begins======================
max lb tensor(0.23994386) min lb tensor(-0.14834857)
Number of Verified Splits: 296 of 1038
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.08613157272338867 
BICCOS Cumulative time: 1.0242359638214111
Preprocessing time: 0.03223705291748047 Inference time: 0.04760384559631348 Add cuts time: 0.004875898361206055 Cut analysis time: 0.0014147758483886719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (21), -0.14792 (21), -0.14569 (21), -0.14527 (21), -0.14306 (21), -0.14263 (21), -0.14043 (21), -0.13998 (21), -0.13493 (21), -0.13433 (21), -0.13206 (21), -0.13148 (21), -0.13014 (21), -0.12963 (21), -0.12725 (21), -0.12675 (21), -0.12637 (21), -0.12594 (21), -0.12357 (21), -0.12356 (21), 
Length of domains: 742
Time: pickout 0.0214    decision 0.0409    set_bounds 0.0461    solve 0.2281    add 0.1161    
Accumulated time: pickout 0.3104    decision 0.9814    set_bounds 0.5311    solve 3.2853    add 2.7317    
Current (lb-rhs): -0.14834856986999512
3756 domains visited
Cumulative time: 9.415635347366333

BaB round 15
batch: 742
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 1686] [/input-8, 227] [/input-8, 227] [/input-8, 1686] [/input-8, 227] [/input-8, 227] [/input-8, 227] [/input-8, 227] [/input-8, 227] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4946272373199463, worst -0.14834880828857422
10 lb beta sum: 2.4946272373199463, worst -0.14835000038146973
Time: prepare 0.0671    bound 0.1707    transfer 0.0110    finalize 0.0079    func 0.2663    
Accumulated time: func 3.7708    prepare 0.3048    bound 3.2579    transfer 0.1022    finalize 0.0595    
all_split False
======================Cut inference begins======================
max lb tensor(0.23961198) min lb tensor(-0.14834762)
Number of Verified Splits: 635 of 1484
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.16161084175109863 
BICCOS Cumulative time: 1.1858468055725098
Preprocessing time: 0.04730653762817383 Inference time: 0.10399103164672852 Add cuts time: 0.008612871170043945 Cut analysis time: 0.0017004013061523438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (22), -0.14792 (22), -0.14569 (22), -0.14527 (22), -0.14306 (22), -0.14262 (22), -0.14041 (22), -0.13997 (22), -0.13493 (22), -0.13433 (22), -0.13206 (22), -0.13147 (22), -0.13014 (22), -0.12963 (22), -0.12725 (22), -0.12675 (22), -0.12636 (22), -0.12594 (22), -0.12356 (22), -0.12356 (22), 
Length of domains: 849
Time: pickout 0.0681    decision 0.0550    set_bounds 0.0650    solve 0.2675    add 0.1201    
Accumulated time: pickout 0.3785    decision 1.0363    set_bounds 0.5961    solve 3.5528    add 2.8518    
Current (lb-rhs): -0.1483476161956787
4605 domains visited
Cumulative time: 10.165800094604492

BaB round 16
batch: 849
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 227] [/input-8, 227] [/input-8, 1938] [/input-8, 1938] [/input-8, 1686] [/input-8, 213] [/input-8, 1938] [/input-8, 434] [/input-8, 1938] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4950034618377686, worst -0.1483471393585205
10 lb beta sum: 2.4950034618377686, worst -0.14835119247436523
Time: prepare 0.0807    bound 0.1848    transfer 0.0304    finalize 0.0113    func 0.3183    
Accumulated time: func 4.0892    prepare 0.3857    bound 3.4427    transfer 0.1326    finalize 0.0708    
all_split False
======================Cut inference begins======================
max lb tensor(0.23951948) min lb tensor(-0.14834714)
Number of Verified Splits: 593 of 1698
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.16794896125793457 
BICCOS Cumulative time: 1.3537957668304443
Preprocessing time: 0.054700613021850586 Inference time: 0.10308027267456055 Add cuts time: 0.008569002151489258 Cut analysis time: 0.0015990734100341797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (23), -0.14792 (23), -0.14569 (23), -0.14527 (23), -0.14306 (23), -0.14262 (23), -0.14041 (23), -0.13997 (23), -0.13493 (23), -0.13433 (23), -0.13206 (23), -0.13146 (23), -0.13014 (23), -0.12963 (23), -0.12725 (23), -0.12675 (23), -0.12636 (23), -0.12594 (23), -0.12355 (23), -0.12313 (23), 
Length of domains: 1105
Time: pickout 0.0793    decision 0.0608    set_bounds 0.2234    solve 0.3187    add 0.1017    
Accumulated time: pickout 0.4578    decision 1.0971    set_bounds 0.8195    solve 3.8715    add 2.9535    
Current (lb-rhs): -0.1483471393585205
5710 domains visited
Cumulative time: 11.129998683929443

BaB round 17
batch: 1105
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2741] [/input, 2741] [/input-8, 578] [/input-8, 578] [/input, 2741] [/input, 2759] [/input, 2759] [/input, 2741] [/input, 2741] [/input, 2759] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4756784439086914, worst -0.1483478546142578
10 lb beta sum: 2.4756784439086914, worst -0.14835143089294434
Time: prepare 0.1137    bound 0.2010    transfer 0.0274    finalize 0.0144    func 0.3716    
Accumulated time: func 4.4608    prepare 0.4997    bound 3.6437    transfer 0.1600    finalize 0.0852    
all_split False
======================Cut inference begins======================
max lb tensor(0.23897946) min lb tensor(-0.14834714)
Number of Verified Splits: 648 of 2210
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.19851040840148926 
BICCOS Cumulative time: 1.5523061752319336
Preprocessing time: 0.07161664962768555 Inference time: 0.11538839340209961 Add cuts time: 0.009807109832763672 Cut analysis time: 0.0016982555389404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14835 (24), -0.14792 (24), -0.14569 (24), -0.14527 (24), -0.14306 (24), -0.14262 (24), -0.14041 (24), -0.13997 (24), -0.13493 (24), -0.13433 (24), -0.13206 (24), -0.13146 (24), -0.13014 (24), -0.12963 (24), -0.12725 (24), -0.12675 (24), -0.12636 (24), -0.12594 (24), -0.12355 (24), -0.12313 (24), 
Length of domains: 1562
Time: pickout 0.0426    decision 0.0736    set_bounds 0.0888    solve 0.3722    add 0.1324    
Accumulated time: pickout 0.5003    decision 1.1707    set_bounds 0.9083    solve 4.2437    add 3.0860    
Current (lb-rhs): -0.1483471393585205
7272 domains visited
Cumulative time: 12.051897525787354

BaB round 18
batch: 1562
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 578] [/input-8, 578] [/input-12, 57] [/input-12, 57] [/input, 3268] [/input, 2741] [/input, 3268] [/input, 3268] [/input, 3268] [/input, 3268] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4892656803131104, worst -0.1459977626800537
10 lb beta sum: 2.4892656803131104, worst -0.14600110054016113
Time: prepare 0.1615    bound 0.2492    transfer 0.0431    finalize 0.0222    func 0.4973    
Accumulated time: func 4.9581    prepare 0.6615    bound 3.8929    transfer 0.2031    finalize 0.1073    
all_split False
======================Cut inference begins======================
max lb tensor(0.23998868) min lb tensor(-0.14599776)
Number of Verified Splits: 510 of 3124
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.208404541015625 
BICCOS Cumulative time: 1.7607107162475586
Preprocessing time: 0.10238003730773926 Inference time: 0.09471869468688965 Add cuts time: 0.009790420532226562 Cut analysis time: 0.0015153884887695312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14600 (25), -0.14557 (25), -0.14443 (25), -0.14401 (25), -0.14334 (25), -0.14292 (25), -0.14179 (25), -0.14136 (25), -0.14071 (25), -0.14027 (25), -0.13915 (25), -0.13873 (25), -0.13805 (25), -0.13762 (25), -0.13649 (25), -0.13606 (25), -0.13258 (25), -0.13199 (25), -0.13103 (25), -0.13044 (25), 
Length of domains: 2614
Time: pickout 0.1027    decision 0.0990    set_bounds 0.2918    solve 0.4979    add 0.1221    
Accumulated time: pickout 0.6030    decision 1.2697    set_bounds 1.2002    solve 4.7417    add 3.2081    
Current (lb-rhs): -0.1459977626800537
9886 domains visited
Cumulative time: 13.390543460845947

BaB round 19
batch: 2614
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 57] [/input-12, 57] [/input, 2759] [/input, 2759] [/input-8, 578] [/input-8, 578] [/input-8, 578] [/input-8, 578] [/input-8, 578] [/input-8, 578] 
cut re-enabled after branching node selection
0 lb beta sum: 2.474266529083252, worst -0.14480900764465332
10 lb beta sum: 2.474266529083252, worst -0.14481282234191895
Time: prepare 0.2705    bound 0.3551    transfer 0.0338    finalize 0.0350    func 0.8985    
Accumulated time: func 5.8565    prepare 0.9322    bound 4.2480    transfer 0.2368    finalize 0.1424    
all_split False
======================Cut inference begins======================
max lb tensor(0.23677063) min lb tensor(-0.14480901)
Number of Verified Splits: 555 of 5228
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.29413866996765137 
BICCOS Cumulative time: 2.05484938621521
Preprocessing time: 0.17000269889831543 Inference time: 0.11362028121948242 Add cuts time: 0.00892186164855957 Cut analysis time: 0.0015938282012939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14481 (26), -0.14439 (26), -0.14324 (26), -0.14282 (26), -0.14216 (26), -0.14173 (26), -0.14058 (26), -0.14016 (26), -0.13953 (26), -0.13908 (26), -0.13796 (26), -0.13753 (26), -0.13686 (26), -0.13643 (26), -0.13530 (26), -0.13487 (26), -0.13127 (26), -0.13068 (26), -0.12969 (26), -0.12912 (26), 
Length of domains: 4673
Time: pickout 0.0628    decision 0.1581    set_bounds 0.2319    solve 0.8996    add 0.1650    
Accumulated time: pickout 0.6658    decision 1.4278    set_bounds 1.4321    solve 5.6412    add 3.3731    
Current (lb-rhs): -0.14480900764465332
14559 domains visited
Cumulative time: 15.218078374862671

BaB round 20
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3268] [/input, 3268] [/input, 3268] [/input, 3268] [/input-8, 213] [/input, 3268] [/input-8, 213] [/input-8, 213] [/input, 3268] [/input-8, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 2.4538326263427734, worst -0.14175200462341309
10 lb beta sum: 2.4538326263427734, worst -0.1417527198791504
Time: prepare 0.4249    bound 0.5058    transfer 0.1266    finalize 0.0608    func 1.1720    
Accumulated time: func 7.0285    prepare 1.3574    bound 4.7538    transfer 0.3635    finalize 0.2032    
all_split False
======================Cut inference begins======================
max lb tensor(0.24032211) min lb tensor(-0.14175153)
Number of Verified Splits: 1587 of 8192
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 484 constraints, 32293 nonzero elements
cuts preparing time: 0.2222
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 512.
#cuts 1-3: 126
#cuts 10-12: 2
#cuts 13-15: 4
#cuts 16-18: 7
#cuts 19-21: 21
#cuts >= 20: 352
BICCOS time: 1.134484052658081 
BICCOS Cumulative time: 3.189333438873291
Preprocessing time: 0.2731339931488037 Inference time: 0.32267189025878906 Add cuts time: 0.04137086868286133 Cut analysis time: 0.49730730056762695
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14175 (27), -0.14133 (27), -0.14098 (27), -0.14056 (27), -0.14018 (27), -0.13976 (27), -0.13942 (27), -0.13904 (27), -0.13899 (27), -0.13861 (27), -0.13850 (27), -0.13807 (27), -0.13747 (27), -0.13705 (27), -0.13693 (27), -0.13650 (27), -0.13647 (27), -0.13602 (27), -0.13570 (27), -0.13529 (27), 
Length of domains: 7182
Time: pickout 0.0865    decision 0.2374    set_bounds 0.5590    solve 1.1746    add 0.2172    
Accumulated time: pickout 0.7523    decision 1.6652    set_bounds 1.9911    solve 6.8159    add 3.5903    
Current (lb-rhs): -0.14175152778625488
21164 domains visited
current_vram/total_varm: 9.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 18.65586757659912

BaB round 21
batch: 7182
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 578] [/input, 2755] [/input-8, 578] [/input-8, 578] [/input, 2739] [/input, 2739] [/input, 3268] [/input, 3268] [/input-8, 578] [/input-8, 578] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14299535751342773
10 lb beta sum: 7.505856990814209, worst -0.07007384300231934
Time: prepare 0.3880    bound 2.5592    transfer 0.0776    finalize 0.1086    func 3.2279    
Accumulated time: func 10.2564    prepare 1.7458    bound 7.3130    transfer 0.4411    finalize 0.3117    
all_split False
======================Cut inference begins======================
max lb tensor(0.38073373) min lb tensor(-0.05474091)
Number of Verified Splits: 12708 of 14364
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 29
#cuts >= 20: 0
BICCOS time: 3.5785024166107178 
BICCOS Cumulative time: 6.767835855484009
Preprocessing time: 0.4882700443267822 Inference time: 2.8590762615203857 Add cuts time: 0.22713971138000488 Cut analysis time: 0.004016399383544922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05474 (28), -0.05458 (28), -0.05446 (28), -0.05424 (28), -0.05314 (28), -0.05305 (28), -0.05285 (28), -0.05280 (28), -0.05268 (28), -0.05261 (28), -0.05249 (28), -0.05236 (28), -0.05176 (28), -0.05160 (28), -0.05160 (28), -0.05155 (28), -0.05129 (28), -0.05114 (28), -0.05059 (28), -0.05029 (28), 
Length of domains: 1656
Time: pickout 0.2373    decision 0.4136    set_bounds 0.9014    solve 3.2323    add 0.1108    
Accumulated time: pickout 0.9896    decision 2.0788    set_bounds 2.8925    solve 10.0481    add 3.7011    
Current (lb-rhs): -0.05474090576171875
22820 domains visited
Cumulative time: 27.270031213760376

BaB round 22
batch: 1656
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2865] [/input-8, 733] [/input-8, 1938] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input, 2865] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1410081386566162
10 lb beta sum: 1.148727297782898, worst -0.1363030970096588
Time: prepare 0.0920    bound 0.2575    transfer 0.0159    finalize 0.0217    func 0.4087    
Accumulated time: func 10.6652    prepare 1.8380    bound 7.5705    transfer 0.4570    finalize 0.3334    
all_split False
======================Cut inference begins======================
max lb tensor(0.46869051) min lb tensor(-0.05474091)
Number of Verified Splits: 520 of 3312
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.22923851013183594 
BICCOS Cumulative time: 6.997074365615845
Preprocessing time: 0.10837125778198242 Inference time: 0.11026811599731445 Add cuts time: 0.008820295333862305 Cut analysis time: 0.0017788410186767578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05474 (29), -0.05474 (29), -0.05458 (29), -0.05458 (29), -0.05446 (29), -0.05446 (29), -0.05424 (29), -0.05424 (29), -0.05314 (29), -0.05314 (29), -0.05305 (29), -0.05305 (29), -0.05285 (29), -0.05285 (29), -0.05280 (29), -0.05280 (29), -0.05268 (29), -0.05268 (29), -0.05261 (29), -0.05261 (29), 
Length of domains: 2792
Time: pickout 0.0497    decision 0.1040    set_bounds 0.1449    solve 0.4092    add 0.1084    
Accumulated time: pickout 1.0393    decision 2.1828    set_bounds 3.0374    solve 10.4574    add 3.8095    
Current (lb-rhs): -0.05474090576171875
25612 domains visited
Cumulative time: 28.329982042312622

BaB round 23
batch: 2792
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 204] [/input-8, 204] [/input-8, 204] [/input, 2865] [/input, 2865] [/input, 2865] [/input, 2865] [/input, 2865] [/input, 2865] [/input-8, 204] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1383228302001953
10 lb beta sum: 1.5357627868652344, worst -0.13284863531589508
Time: prepare 0.1516    bound 0.3745    transfer 0.0328    finalize 0.0339    func 0.6289    
Accumulated time: func 11.2940    prepare 1.9899    bound 7.9450    transfer 0.4899    finalize 0.3673    
all_split False
======================Cut inference begins======================
max lb tensor(0.28175199) min lb tensor(-0.05474091)
Number of Verified Splits: 485 of 5584
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 778 constraints, 47027 nonzero elements
cuts preparing time: 0.1867
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 811.
#cuts 1-3: 204
#cuts 7-9: 1
#cuts 10-12: 5
#cuts 13-15: 8
#cuts 16-18: 29
#cuts 19-21: 29
#cuts >= 20: 535
BICCOS time: 0.8844747543334961 
BICCOS Cumulative time: 7.881549119949341
Preprocessing time: 0.1852254867553711 Inference time: 0.09960675239562988 Add cuts time: 0.007828474044799805 Cut analysis time: 0.5918140411376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05474 (30), -0.05474 (30), -0.05474 (30), -0.05474 (30), -0.05458 (30), -0.05458 (30), -0.05458 (30), -0.05458 (30), -0.05446 (30), -0.05446 (30), -0.05446 (30), -0.05446 (30), -0.05424 (30), -0.05424 (30), -0.05424 (30), -0.05424 (30), -0.05314 (30), -0.05314 (30), -0.05314 (30), -0.05314 (30), 
Length of domains: 5099
Time: pickout 0.0669    decision 0.3274    set_bounds 0.2447    solve 0.6304    add 0.2011    
Accumulated time: pickout 1.1063    decision 2.5102    set_bounds 3.2821    solve 11.0878    add 4.0106    
Current (lb-rhs): -0.05474090576171875
30711 domains visited
Cumulative time: 30.706250429153442

BaB round 24
batch: 5099
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input-8, 929] [/input, 2759] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13661527633666992
10 lb beta sum: 11.211271286010742, worst -0.04839742183685303
Time: prepare 0.2878    bound 2.4190    transfer 0.0487    finalize 0.0623    func 2.8857    
Accumulated time: func 14.1798    prepare 2.2780    bound 10.3640    transfer 0.5385    finalize 0.4296    
all_split False
======================Cut inference begins======================
max lb tensor(0.59026057) min lb tensor(-0.03232825)
Number of Verified Splits: 8147 of 10198
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 2.38370680809021 
BICCOS Cumulative time: 10.26525592803955
Preprocessing time: 0.3544919490814209 Inference time: 1.9556777477264404 Add cuts time: 0.06881976127624512 Cut analysis time: 0.004717350006103516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03233 (31), -0.03218 (31), -0.03181 (31), -0.03177 (31), -0.03137 (31), -0.03126 (31), -0.03115 (31), -0.03100 (31), -0.03098 (31), -0.03093 (31), -0.03059 (31), -0.03056 (31), -0.03039 (31), -0.03024 (31), -0.03022 (31), -0.02993 (31), -0.02990 (31), -0.02920 (31), -0.02913 (31), -0.02890 (31), 
Length of domains: 2051
Time: pickout 0.2060    decision 0.2946    set_bounds 0.6505    solve 2.8883    add 0.1083    
Accumulated time: pickout 1.3122    decision 2.8048    set_bounds 3.9326    solve 13.9761    add 4.1189    
Current (lb-rhs): -0.032328248023986816
32762 domains visited
Cumulative time: 37.31632089614868

BaB round 25
batch: 2051
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 929] [/input-8, 929] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13535761833190918
10 lb beta sum: 1.241320252418518, worst -0.13133078813552856
Time: prepare 0.1144    bound 0.2976    transfer 0.0189    finalize 0.0247    func 0.4829    
Accumulated time: func 14.6626    prepare 2.3926    bound 10.6616    transfer 0.5574    finalize 0.4543    
all_split False
======================Cut inference begins======================
max lb tensor(0.30097663) min lb tensor(-0.03232825)
Number of Verified Splits: 452 of 4102
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.23877215385437012 
BICCOS Cumulative time: 10.504028081893921
Preprocessing time: 0.13713860511779785 Inference time: 0.09444117546081543 Add cuts time: 0.00517725944519043 Cut analysis time: 0.0020151138305664062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03233 (32), -0.03233 (32), -0.03218 (32), -0.03218 (32), -0.03181 (32), -0.03181 (32), -0.03177 (32), -0.03177 (32), -0.03137 (32), -0.03137 (32), -0.03126 (32), -0.03126 (32), -0.03115 (32), -0.03115 (32), -0.03100 (32), -0.03100 (32), -0.03098 (32), -0.03098 (32), -0.03093 (32), -0.03093 (32), 
Length of domains: 3650
Time: pickout 0.0588    decision 0.1260    set_bounds 0.1877    solve 0.4841    add 0.1837    
Accumulated time: pickout 1.3710    decision 2.9308    set_bounds 4.1203    solve 14.4602    add 4.3026    
Current (lb-rhs): -0.032328248023986816
36412 domains visited
Cumulative time: 38.608622312545776

BaB round 26
batch: 3650
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4443923234939575, worst -0.12986502051353455
10 lb beta sum: 1.4443923234939575, worst -0.12980493903160095
Time: prepare 0.3928    bound 0.4669    transfer 0.0371    finalize 0.2338    func 1.1787    
Accumulated time: func 15.8413    prepare 2.7857    bound 11.1285    transfer 0.5946    finalize 0.6881    
all_split False
======================Cut inference begins======================
max lb tensor(0.15426683) min lb tensor(-0.03232825)
Number of Verified Splits: 163 of 7300
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 933 constraints, 55006 nonzero elements
cuts preparing time: 0.0220
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 965.
#cuts 1-3: 233
#cuts 7-9: 1
#cuts 10-12: 4
#cuts 13-15: 9
#cuts 16-18: 35
#cuts 19-21: 44
#cuts >= 20: 639
BICCOS time: 0.7692065238952637 
BICCOS Cumulative time: 11.273234605789185
Preprocessing time: 0.24273896217346191 Inference time: 0.04113197326660156 Add cuts time: 0.0020568370819091797 Cut analysis time: 0.483278751373291
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03233 (33), -0.03233 (33), -0.03233 (33), -0.03233 (33), -0.03218 (33), -0.03218 (33), -0.03218 (33), -0.03218 (33), -0.03181 (33), -0.03181 (33), -0.03181 (33), -0.03181 (33), -0.03177 (33), -0.03177 (33), -0.03177 (33), -0.03177 (33), -0.03137 (33), -0.03137 (33), -0.03137 (33), -0.03137 (33), 
Length of domains: 7137
Time: pickout 0.1575    decision 0.2171    set_bounds 0.3294    solve 1.1807    add 0.2056    
Accumulated time: pickout 1.5285    decision 3.1479    set_bounds 4.4497    solve 15.6409    add 4.5082    
Current (lb-rhs): -0.032328248023986816
43549 domains visited
Cumulative time: 41.48464560508728

BaB round 27
batch: 7137
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2865] [/input, 2865] [/input, 2865] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13176751136779785
10 lb beta sum: 10.298260688781738, worst -0.04989421367645264
Time: prepare 0.3928    bound 3.7316    transfer 0.0862    finalize 0.1055    func 4.4113    
Accumulated time: func 20.2526    prepare 3.1788    bound 14.8601    transfer 0.6808    finalize 0.7937    
all_split False
======================Cut inference begins======================
max lb tensor(0.33439839) min lb tensor(-0.03232825)
Number of Verified Splits: 7292 of 14274
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 32
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 2.4396231174468994 
BICCOS Cumulative time: 13.712857723236084
Preprocessing time: 0.48096513748168945 Inference time: 1.8944120407104492 Add cuts time: 0.06023740768432617 Cut analysis time: 0.00400853157043457
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03233 (34), -0.03129 (34), -0.03123 (34), -0.03091 (34), -0.03085 (34), -0.03050 (34), -0.03040 (34), -0.02993 (34), -0.02989 (34), -0.02971 (34), -0.02967 (34), -0.02964 (34), -0.02964 (34), -0.02955 (34), -0.02947 (34), -0.02945 (34), -0.02928 (34), -0.02921 (34), -0.02921 (34), -0.02910 (34), 
Length of domains: 6982
Time: pickout 0.2485    decision 0.5962    set_bounds 0.8798    solve 4.4146    add 0.1571    
Accumulated time: pickout 1.7770    decision 3.7441    set_bounds 5.3295    solve 20.0555    add 4.6653    
Current (lb-rhs): -0.032328248023986816
50531 domains visited
Cumulative time: 50.30323815345764

BaB round 28
batch: 6982
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 412] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] [/input-8, 434] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12993359565734863
10 lb beta sum: 1.1023807525634766, worst -0.1278790831565857
Time: prepare 0.3907    bound 0.8187    transfer 0.0519    finalize 0.2921    func 1.6452    
Accumulated time: func 21.8978    prepare 3.5697    bound 15.6788    transfer 0.7326    finalize 1.0858    
all_split False
======================Cut inference begins======================
max lb tensor(0.26296067) min lb tensor(-0.03232825)
Number of Verified Splits: 857 of 13964
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 987 constraints, 59872 nonzero elements
cuts preparing time: 0.2680
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1020.
#cuts 1-3: 241
#cuts 4-6: 1
#cuts 7-9: 1
#cuts 10-12: 5
#cuts 13-15: 11
#cuts 16-18: 50
#cuts 19-21: 50
#cuts >= 20: 661
BICCOS time: 1.50388765335083 
BICCOS Cumulative time: 15.216745376586914
Preprocessing time: 0.4728360176086426 Inference time: 0.22092294692993164 Add cuts time: 0.02167510986328125 Cut analysis time: 0.7884535789489746
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03233 (35), -0.03233 (35), -0.03129 (35), -0.03129 (35), -0.03123 (35), -0.03123 (35), -0.03091 (35), -0.03091 (35), -0.03085 (35), -0.03085 (35), -0.03050 (35), -0.03050 (35), -0.03040 (35), -0.03040 (35), -0.02993 (35), -0.02993 (35), -0.02989 (35), -0.02989 (35), -0.02971 (35), -0.02971 (35), 
Length of domains: 13107
Time: pickout 0.1555    decision 0.4010    set_bounds 0.6640    solve 1.6491    add 0.1821    
Accumulated time: pickout 1.9325    decision 4.1451    set_bounds 5.9935    solve 21.7046    add 4.8474    
Current (lb-rhs): -0.032328248023986816
63638 domains visited
Cumulative time: 54.891740798950195

BaB round 29
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1389] [/input-8, 1389] [/input, 3544] [/input, 3544] [/input-8, 923] [/input-8, 923] [/input, 3544] [/input, 3544] [/input-8, 1389] [/input-8, 1389] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1290147304534912
10 lb beta sum: 12.333230018615723, worst -0.046011924743652344
Time: prepare 0.4584    bound 4.3444    transfer 0.0937    finalize 0.1160    func 5.1196    
Accumulated time: func 27.0174    prepare 4.0285    bound 20.0232    transfer 0.8263    finalize 1.2017    
all_split False
======================Cut inference begins======================
max lb tensor(0.26913607) min lb tensor(-0.02992868)
Number of Verified Splits: 8690 of 16384
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 995 constraints, 64095 nonzero elements
cuts preparing time: 0.0276
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1031.
#cuts 1-3: 238
#cuts 4-6: 4
#cuts 7-9: 1
#cuts 10-12: 5
#cuts 13-15: 12
#cuts 16-18: 47
#cuts 19-21: 53
#cuts >= 20: 671
BICCOS time: 3.6583657264709473 
BICCOS Cumulative time: 18.87511110305786
Preprocessing time: 0.5599980354309082 Inference time: 2.450038433074951 Add cuts time: 0.07858538627624512 Cut analysis time: 0.5697438716888428
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03129 (35), -0.03050 (35), -0.03040 (35), -0.02993 (36), -0.02993 (35), -0.02989 (35), -0.02971 (35), -0.02964 (35), -0.02964 (35), -0.02947 (35), -0.02945 (35), -0.02921 (35), -0.02914 (36), -0.02910 (35), -0.02904 (35), -0.02903 (36), -0.02895 (36), -0.02893 (36), -0.02883 (35), -0.02874 (35), 
Length of domains: 12609
Time: pickout 0.1823    decision 0.4750    set_bounds 1.0623    solve 5.1231    add 0.1981    
Accumulated time: pickout 2.1148    decision 4.6201    set_bounds 7.0558    solve 26.8277    add 5.0455    
Current (lb-rhs): -0.03128957748413086
71332 domains visited
current_vram/total_varm: 27.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 65.78044652938843

BaB round 30
batch: 12609
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1583] [/input-8, 366] [/input-8, 1583] [/input-8, 1583] [/input-8, 1583] [/input-8, 1583] [/input-8, 1583] [/input-8, 1583] [/input-8, 1583] [/input-8, 1583] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1271355152130127
10 lb beta sum: 12.329228401184082, worst -0.05176377296447754
Time: prepare 0.7126    bound 6.8604    transfer 0.1309    finalize 0.5560    func 8.4255    
Accumulated time: func 35.4429    prepare 4.7415    bound 26.8836    transfer 0.9573    finalize 1.7578    
all_split False
======================Cut inference begins======================
max lb tensor(0.32961625) min lb tensor(-0.02992892)
Number of Verified Splits: 7021 of 25218
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 1001 constraints, 69034 nonzero elements
cuts preparing time: 0.0239
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1038.
#cuts 1-3: 234
#cuts 4-6: 5
#cuts 7-9: 1
#cuts 10-12: 5
#cuts 13-15: 14
#cuts 16-18: 50
#cuts 19-21: 53
#cuts >= 20: 676
BICCOS time: 3.6007938385009766 
BICCOS Cumulative time: 22.475904941558838
Preprocessing time: 0.868161678314209 Inference time: 2.051097869873047 Add cuts time: 0.07208108901977539 Cut analysis time: 0.6094532012939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02993 (36), -0.02964 (36), -0.02957 (36), -0.02944 (36), -0.02930 (36), -0.02904 (36), -0.02903 (37), -0.02896 (36), -0.02868 (36), -0.02864 (37), -0.02863 (37), -0.02860 (37), -0.02852 (37), -0.02841 (36), -0.02839 (37), -0.02837 (36), -0.02830 (37), -0.02828 (36), -0.02803 (36), -0.02797 (37), 
Length of domains: 18197
Time: pickout 0.4473    decision 1.1466    set_bounds 1.2738    solve 8.4321    add 0.2203    
Accumulated time: pickout 2.5622    decision 5.7667    set_bounds 8.3296    solve 35.2598    add 5.2658    
Current (lb-rhs): -0.029928922653198242
89529 domains visited
Cumulative time: 81.00369954109192

BaB round 31
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 923] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input, 3268] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12607431411743164
10 lb beta sum: 12.389912605285645, worst -0.04997968673706055
Time: prepare 1.2864    bound 8.8295    transfer 0.1587    finalize 0.2579    func 10.7545    
Accumulated time: func 46.1975    prepare 6.0284    bound 35.7131    transfer 1.1159    finalize 2.0156    
all_split False
======================Cut inference begins======================
max lb tensor(0.32563904) min lb tensor(-0.02992892)
Number of Verified Splits: 6132 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 1000 constraints, 76785 nonzero elements
cuts preparing time: 0.0277
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1041.
#cuts 1-3: 230
#cuts 4-6: 8
#cuts 7-9: 2
#cuts 10-12: 7
#cuts 13-15: 19
#cuts 16-18: 52
#cuts 19-21: 53
#cuts >= 20: 670
BICCOS time: 3.8606438636779785 
BICCOS Cumulative time: 26.336548805236816
Preprocessing time: 1.5708637237548828 Inference time: 1.5478057861328125 Add cuts time: 0.06619048118591309 Cut analysis time: 0.6757838726043701
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02993 (37), -0.02964 (37), -0.02957 (37), -0.02939 (37), -0.02904 (37), -0.02903 (38), -0.02903 (38), -0.02896 (37), -0.02868 (37), -0.02864 (38), -0.02863 (38), -0.02860 (38), -0.02852 (38), -0.02842 (37), -0.02841 (37), -0.02837 (37), -0.02832 (38), -0.02830 (38), -0.02828 (37), -0.02822 (38), 
Length of domains: 28449
Time: pickout 0.3672    decision 1.8003    set_bounds 1.5982    solve 10.7625    add 0.2696    
Accumulated time: pickout 2.9293    decision 7.5670    set_bounds 9.9278    solve 46.0223    add 5.5355    
Current (lb-rhs): -0.029928922653198242
116165 domains visited
current_vram/total_varm: 41.3GB/99.9GB, batch_size increase to 32768
Cumulative time: 99.76863503456116

BaB round 32
batch: 28449
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3269] [/input, 3269] [/input, 2722] [/input, 3218] [/input, 2722] [/input, 2722] [/input, 3269] [/input-8, 366] [/input-8, 1583] [/input, 2722] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12476563453674316
10 lb beta sum: 11.86191177368164, worst -0.05983781814575195
Time: prepare 1.6119    bound 15.0852    transfer 0.3225    finalize 0.4945    func 17.8938    
Accumulated time: func 64.0912    prepare 7.6407    bound 50.7983    transfer 1.4384    finalize 2.5102    
all_split False
======================Cut inference begins======================
max lb tensor(0.31928611) min lb tensor(-0.02992892)
Number of Verified Splits: 11754 of 56898
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 1014 constraints, 85634 nonzero elements
cuts preparing time: 0.7020
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1056.
#cuts 1-3: 218
#cuts 4-6: 8
#cuts 7-9: 2
#cuts 10-12: 4
#cuts 13-15: 21
#cuts 16-18: 61
#cuts 19-21: 55
#cuts >= 20: 687
BICCOS time: 6.810308218002319 
BICCOS Cumulative time: 33.146857023239136
Preprocessing time: 2.024463176727295 Inference time: 2.9327688217163086 Add cuts time: 0.4242732524871826 Cut analysis time: 1.4288029670715332
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02993 (38), -0.02993 (38), -0.02964 (38), -0.02964 (38), -0.02957 (38), -0.02957 (38), -0.02939 (38), -0.02904 (38), -0.02904 (38), -0.02903 (39), -0.02903 (39), -0.02896 (38), -0.02896 (38), -0.02868 (38), -0.02868 (38), -0.02864 (39), -0.02863 (39), -0.02860 (39), -0.02852 (39), -0.02842 (38), 
Length of domains: 45144
Time: pickout 0.8263    decision 3.3965    set_bounds 3.7869    solve 18.4803    add 0.3648    
Accumulated time: pickout 3.7556    decision 10.9635    set_bounds 13.7147    solve 64.5026    add 5.9003    
Current (lb-rhs): -0.029928922653198242
161309 domains visited
Cumulative time: 133.66471910476685

BaB round 33
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2713] [/input-8, 366] [/input, 3302] [/input-8, 1583] [/input, 3218] [/input, 3302] [/input-8, 366] [/input, 3218] [/input-8, 195] [/input-8, 195] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12294554710388184
10 lb beta sum: 12.21496295928955, worst -0.055472493171691895
Time: prepare 1.9103    bound 22.3762    transfer 0.4110    finalize 0.5925    func 25.7264    
Accumulated time: func 89.8176    prepare 9.5514    bound 73.1744    transfer 1.8494    finalize 3.1026    
all_split False
======================Cut inference begins======================
max lb tensor(0.33590284) min lb tensor(-0.02992892)
Number of Verified Splits: 10422 of 65536
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 1030 constraints, 85733 nonzero elements
cuts preparing time: 0.0288
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1073.
#cuts 1-3: 217
#cuts 4-6: 9
#cuts 7-9: 2
#cuts 10-12: 5
#cuts 13-15: 23
#cuts 16-18: 65
#cuts 19-21: 57
#cuts >= 20: 695
BICCOS time: 7.262918949127197 
BICCOS Cumulative time: 40.40977597236633
Preprocessing time: 3.2590136528015137 Inference time: 3.100123643875122 Add cuts time: 0.14124250411987305 Cut analysis time: 0.7625391483306885
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02993 (39), -0.02993 (39), -0.02964 (39), -0.02964 (39), -0.02957 (39), -0.02957 (39), -0.02939 (39), -0.02904 (39), -0.02904 (39), -0.02903 (40), -0.02903 (39), -0.02896 (39), -0.02896 (39), -0.02868 (39), -0.02868 (39), -0.02864 (40), -0.02863 (40), -0.02860 (40), -0.02860 (40), -0.02852 (40), 
Length of domains: 67490
Time: pickout 0.7511    decision 3.3805    set_bounds 4.6431    solve 25.7420    add 0.6081    
Accumulated time: pickout 4.5068    decision 14.3441    set_bounds 18.3578    solve 90.2446    add 6.5083    
Current (lb-rhs): -0.029928922653198242
216423 domains visited
Cumulative time: 176.32071328163147

BaB round 34
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 195] [/input-8, 402] [/input-8, 402] [/input, 2722] [/input-8, 402] [/input-8, 402] [/input-8, 402] [/input-8, 402] [/input-8, 402] [/input-8, 402] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12102580070495605
10 lb beta sum: 12.183021545410156, worst -0.06150209903717041
Time: prepare 1.8758    bound 22.8098    transfer 0.4162    finalize 0.6300    func 27.1365    
Accumulated time: func 116.9542    prepare 11.4277    bound 95.9842    transfer 2.2656    finalize 3.7327    
all_split False
======================Cut inference begins======================
max lb tensor(0.32396764) min lb tensor(-0.02903080)
Number of Verified Splits: 12827 of 65536
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts: total 1035 constraints, 85888 nonzero elements
cuts preparing time: 0.0312
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1078.
#cuts 1-3: 216
#cuts 4-6: 9
#cuts 7-9: 2
#cuts 10-12: 5
#cuts 13-15: 24
#cuts 16-18: 64
#cuts 19-21: 58
#cuts >= 20: 700
BICCOS time: 8.179771661758423 
BICCOS Cumulative time: 48.589547634124756
Preprocessing time: 2.588894844055176 Inference time: 4.65545654296875 Add cuts time: 0.15826678276062012 Cut analysis time: 0.777153491973877
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02993 (39), -0.02993 (39), -0.02964 (39), -0.02964 (39), -0.02957 (39), -0.02957 (39), -0.02939 (39), -0.02904 (39), -0.02904 (39), -0.02903 (40), -0.02903 (40), -0.02896 (39), -0.02896 (39), -0.02868 (39), -0.02868 (39), -0.02864 (40), -0.02863 (40), -0.02860 (41), -0.02860 (40), -0.02860 (41), 
Length of domains: 87431
Time: pickout 0.7590    decision 4.1820    set_bounds 4.3109    solve 27.1497    add 0.4474    
Accumulated time: pickout 5.2657    decision 18.5260    set_bounds 22.6687    solve 117.3943    add 6.9557    
Current (lb-rhs): -0.029928922653198242
269132 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=76_spec=2_26983329.log
found process for pidx=2
kill process for pidx=2
Result: unknown in 225.6538 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [679]; unstable size 679; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 679] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 679] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 679] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 185] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.08787775,  0.95483601,  4.05660629,  3.03147173,  3.64727974,
          3.09590149,  4.17433357,  4.76398945, -0.51713562]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
         -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.68it/s]100%|██████████| 1/1 [00:00<00:00,  7.67it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.81932449, -25.24547768, -28.96639633, -27.77052689, -28.75254059,
          -27.98299408, -28.93449783, -30.10167694, -23.77865982, -23.70247650]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07618332]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1336 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.717321395874023
alpha/beta optimization time: 1.3725872039794922
initial alpha-crown bounds: tensor([[ 2.13841963,  0.97674763,  4.10324001,  3.07848239,  3.70226908,
          3.14509654,  4.22430468,  4.82284546, -0.47408342]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.47408342361450195
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6445 seconds.
lower bounds for all target labels: [2.1384177207946777, 0.9767465591430664, 4.103240966796875, 3.078482151031494, 3.702268600463867, 3.1450953483581543, 4.224305152893066, 4.822844982147217, -0.47408342361450195]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 44237 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.33084416389465
Verifying property 0 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.822845458984375.

Properties batch 1, size 1
Remaining timeout: 198.07720184326172
Verifying property 1 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.224304676055908.

Properties batch 2, size 1
Remaining timeout: 197.93691658973694
Verifying property 2 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.103240013122559.

Properties batch 3, size 1
Remaining timeout: 197.80482029914856
Verifying property 3 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.7022690773010254.

Properties batch 4, size 1
Remaining timeout: 197.6727249622345
Verifying property 4 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.14509654045105.

Properties batch 5, size 1
Remaining timeout: 197.5352427959442
Verifying property 5 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.0784823894500732.

Properties batch 6, size 1
Remaining timeout: 197.38808059692383
Verifying property 6 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1384196281433105.

Properties batch 7, size 1
Remaining timeout: 197.23656058311462
Verifying property 7 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9767476320266724.

Properties batch 8, size 1
Remaining timeout: 197.0887005329132
Verifying property 8 with 1 instances.
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47408342]], device='cuda:0') need to verify.
Model prediction is: tensor([-27.36557198, -25.52762604, -29.49477196, -28.19241905, -29.34058571,
        -28.33413696, -29.46609688, -30.40150452, -24.56089783, -23.80018806],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47408342]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 679
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 875
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008351802825927734
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0604    transfer 0.0001    finalize 0.0002    func 0.0609    
Accumulated time: func 0.0609    prepare 0.0002    bound 0.0604    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 6] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 24] 
split level 3: [/input-8, 1973] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 56] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 46] 
split level 8: [/input-8, 1971] 
split level 9: [/input-12, 34] 
split level 10: [/input-8, 940] 
split level 11: [/input-8, 1706] 
split level 12: [/input-8, 1965] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1967] 
split level 15: [/input-8, 1950] 
split level 16: [/input-8, 1379] 
split level 17: [/input-8, 1647] 
split level 18: [/input-12, 90] 
split level 19: [/input-8, 766] 
split level 20: [/input-8, 1655] 
split level 21: [/input-8, 354] 
split level 22: [/input, 4071] 
split level 23: [/input-8, 891] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 1391] 
split level 26: [/input-8, 1399] 
split level 27: [/input-8, 253] 
split level 28: [/input, 3315] 
split level 29: [/input-8, 1502] 
split level 30: [/input-8, 363] 
split level 31: [/input-8, 158] 
split level 32: [/input-8, 255] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3571] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 733] 
split level 37: [/input-8, 1595] 
split level 38: [/input-8, 1510] 
split level 39: [/input-8, 510] 
split level 40: [/input-8, 1812] 
split level 41: [/input-8, 1981] 
split level 42: [/input, 2744] 
split level 43: [/input-8, 243] 
split level 44: [/input, 1012] 
split level 45: [/input-8, 1704] 
split level 46: [/input-8, 254] 
split level 47: [/input, 1250] 
split level 48: [/input, 646] 
split level 49: [/input, 1251] 
split level 50: [/input-8, 752] 
split level 51: [/input, 1445] 
split level 52: [/input-8, 1955] 
split level 53: [/input-8, 764] 
split level 54: [/input-8, 285] 
split level 55: [/input, 1491] 
split level 56: [/input-8, 246] 
split level 57: [/input, 1252] 
split level 58: [/input, 2637] 
split level 59: [/input-8, 149] 
split level 60: [/input-8, 429] 
split level 61: [/input, 3165] 
split level 62: [/input, 1271] 
split level 63: [/input-8, 598] 
split level 64: [/input, 2195] 
split level 65: [/input-8, 142] 
split level 66: [/input, 2467] 
split level 67: [/input-8, 313] 
split level 68: [/input, 1234] 
split level 69: [/input, 2708] 
split level 70: [/input, 2005] 
split level 71: [/input-8, 1551] 
split level 72: [/input, 3272] 
split level 73: [/input, 1021] 
split level 74: [/input-8, 1527] 
split level 75: [/input, 1490] 
split level 76: [/input, 166] 
split level 77: [/input-8, 1633] 
split level 78: [/input, 4089] 
split level 79: [/input, 2451] 
split level 80: [/input, 2787] 
split level 81: [/input, 386] 
split level 82: [/input, 2026] 
split level 83: [/input-8, 1662] 
split level 84: [/input, 2021] 
split level 85: [/input, 1480] 
split level 86: [/input, 2006] 
split level 87: [/input, 3416] 
split level 88: [/input-8, 1598] 
split level 89: [/input-8, 1154] 
split level 90: [/input, 2020] 
split level 91: [/input, 385] 
split level 92: [/input, 2470] 
split level 93: [/input, 195] 
split level 94: [/input, 2785] 
split level 95: [/input, 2214] 
split level 96: [/input, 645] 
split level 97: [/input, 1398] 
split level 98: [/input, 1272] 
split level 99: [/input, 152] 
split level 100: [/input, 2022] 
split level 101: [/input, 2458] 
split level 102: [/input, 387] 
split level 103: [/input-8, 605] 
split level 104: [/input, 356] 
split level 105: [/input-12, 79] 
split level 106: [/input, 2212] 
split level 107: [/input, 1233] 
split level 108: [/input-8, 591] 
split level 109: [/input, 2422] 
split level 110: [/input, 168] 
split level 111: [/input, 1263] 
split level 112: [/input, 2004] 
split level 113: [/input, 193] 
split level 114: [/input, 2670] 
split level 115: [/input, 2452] 
split level 116: [/input, 843] 
split level 117: [/input, 1691] 
split level 118: [/input, 2211] 
split level 119: [/input, 3256] 
split level 120: [/input, 723] 
split level 121: [/input-8, 240] 
split level 122: [/input, 194] 
split level 123: [/input, 2438] 
split level 124: [/input, 2023] 
split level 125: [/input, 2024] 
split level 126: [/input, 3151] 
split level 127: [/input, 2216] 
split level 128: [/input, 2760] 
split level 129: [/input, 2450] 
split level 130: [/input, 185] 
split level 131: [/input, 899] 
split level 132: [/input-8, 379] 
split level 133: [/input-8, 1155] 
split level 134: [/input, 1275] 
split level 135: [/input, 401] 
split level 136: [/input, 2025] 
split level 137: [/input, 2724] 
split level 138: [/input, 897] 
split level 139: [/input-8, 1529] 
split level 140: [/input, 2392] 
split level 141: [/input, 884] 
split level 142: [/input, 2484] 
split level 143: [/input-8, 1631] 
split level 144: [/input, 148] 
split level 145: [/input, 915] 
split level 146: [/input-8, 248] 
split level 147: [/input, 2930] 
split level 148: [/input, 827] 
split level 149: [/input, 1274] 
split level 150: [/input, 2639] 
split level 151: [/input, 2455] 
split level 152: [/input, 828] 
split level 153: [/input, 388] 
split level 154: [/input-8, 1211] 
split level 155: [/input, 436] 
split level 156: [/input, 1789] 
split level 157: [/input, 2437] 
split level 158: [/input-8, 1770] 
split level 159: [/input-8, 1156] 
split level 160: [/input, 2914] 
split level 161: [/input, 1986] 
split level 162: [/input-8, 893] 
split level 163: [/input, 3491] 
split level 164: [/input-8, 1934] 
split level 165: [/input, 1273] 
split level 166: [/input-8, 1530] 
split level 167: [/input, 857] 
split level 168: [/input, 1023] 
split level 169: [/input, 165] 
split level 170: [/input, 3417] 
split level 171: [/input, 3441] 
split level 172: [/input, 3220] 
split level 173: [/input, 2029] 
split level 174: [/input-8, 1172] 
split level 175: [/input-8, 1702] 
split level 176: [/input, 420] 
split level 177: [/input, 694] 
split level 178: [/input, 2393] 
split level 179: [/input, 856] 
split level 180: [/input, 913] 
split level 181: [/input-8, 263] 
split level 182: [/input, 1900] 
split level 183: [/input, 2742] 
split level 184: [/input, 2408] 
split level 185: [/input, 435] 
split level 186: [/input, 1990] 
split level 187: [/input, 1989] 
split level 188: [/input, 662] 
split level 189: [/input, 3028] 
split level 190: [/input, 2846] 
split level 191: [/input-8, 1158] 
split level 192: [/input, 1020] 
split level 193: [/input, 3402] 
split level 194: [/input, 3135] 
split level 195: [/input, 2913] 
split level 196: [/input, 2232] 
split level 197: [/input, 2465] 
split level 198: [/input, 2420] 
split level 199: [/input, 2623] 
Time: prepare 0.0060    bound 0.1122    transfer 0.0056    finalize 0.0041    func 0.1280    
Accumulated time: func 0.1889    prepare 0.0165    bound 0.1726    transfer 0.0057    finalize 0.0043    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11546183) min lb tensor(-0.47403002)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012311697006225586 
BICCOS Cumulative time: 0.012311697006225586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46135 (1), -0.46118 (1), -0.46105 (1), -0.46090 (1), -0.46057 (1), -0.46045 (1), -0.46033 (1), -0.46029 (1), -0.46026 (1), -0.45984 (1), -0.45952 (1), -0.45948 (1), -0.45906 (1), -0.45901 (1), -0.45819 (1), -0.45792 (1), -0.45765 (1), -0.45639 (1), -0.45627 (1), -0.45387 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5481    set_bounds 0.0112    solve 0.1281    add 0.1659    
Accumulated time: pickout 0.0004    decision 0.5481    set_bounds 0.0112    solve 0.1281    add 0.1659    
Current (lb-rhs): -0.4613485336303711
50 domains visited
Cumulative time: 0.9439384937286377

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 46] [/input-12, 92] [/input-12, 92] [/input-8, 1973] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
Time: prepare 0.0072    bound 0.1074    transfer 0.0008    finalize 0.0033    func 0.1189    
Accumulated time: func 0.3078    prepare 0.0240    bound 0.2800    transfer 0.0065    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.17790127) min lb tensor(-0.43820333)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.015429019927978516 
BICCOS Cumulative time: 0.0277407169342041
Preprocessing time: 0.013480901718139648 Inference time: 0.00031948089599609375 Add cuts time: 0.00015020370483398438 Cut analysis time: 0.001478433609008789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24606 (2), -0.24071 (2), -0.24061 (2), -0.23983 (2), -0.23977 (2), -0.23746 (2), -0.23516 (2), -0.23450 (2), -0.22776 (2), -0.22639 (2), -0.22418 (2), -0.22264 (2), -0.21656 (2), -0.20665 (2), -0.20590 (2), -0.20349 (2), -0.20307 (2), -0.20271 (2), -0.20175 (2), -0.20137 (2), 
Length of domains: 50
Time: pickout 0.0019    decision 0.0225    set_bounds 0.0132    solve 0.1190    add 0.2062    
Accumulated time: pickout 0.0023    decision 0.5706    set_bounds 0.0244    solve 0.2472    add 0.3721    
Current (lb-rhs): -0.24605989456176758
100 domains visited
Cumulative time: 1.3293731212615967

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 6] [/input-12, 6] 
split level 1: [/input-12, 24] [/input-12, 85] [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 24] [/input-12, 92] [/input-12, 92] [/input-12, 85] [/input-12, 24] 
split level 2: [/input-12, 92] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 92] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-12, 46] [/input-8, 1706] [/input-8, 1706] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22733306884765625
10 lb beta sum: 0.28940677642822266, worst -0.22281789779663086
Time: prepare 0.0067    bound 0.1347    transfer 0.0023    finalize 0.0025    func 0.1489    
Accumulated time: func 0.4568    prepare 0.0310    bound 0.4147    transfer 0.0088    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.19769260) min lb tensor(-0.22190714)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.021570920944213867 
BICCOS Cumulative time: 0.04931163787841797
Preprocessing time: 0.012597799301147461 Inference time: 0.005156755447387695 Add cuts time: 0.0029144287109375 Cut analysis time: 0.0009019374847412109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06647 (3), -0.06631 (3), -0.06619 (3), -0.06572 (3), -0.06528 (3), -0.06466 (3), -0.06376 (3), -0.06303 (3), -0.06114 (3), -0.06058 (3), -0.06023 (3), -0.06015 (3), -0.06003 (3), -0.05711 (3), -0.05642 (3), -0.05553 (3), -0.05552 (3), -0.05390 (3), -0.05353 (3), -0.05302 (3), 
Length of domains: 50
Time: pickout 0.0051    decision 0.0210    set_bounds 0.0165    solve 0.1490    add 0.1685    
Accumulated time: pickout 0.0074    decision 0.5915    set_bounds 0.0409    solve 0.3962    add 0.5405    
Current (lb-rhs): -0.06647105515003204
150 domains visited
Cumulative time: 1.711313009262085

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 85] [/input-12, 85] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 6] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 24] [/input-12, 92] [/input-12, 92] 
split level 2: [/input-12, 38] [/input-12, 46] [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-8, 1971] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 46] [/input-8, 1971] [/input-8, 1971] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1965] [/input-8, 1971] [/input-8, 1971] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06524372100830078
10 lb beta sum: 0.731212317943573, worst -0.05069069191813469
Time: prepare 0.0074    bound 0.1538    transfer 0.0009    finalize 0.0035    func 0.1683    
Accumulated time: func 0.6251    prepare 0.0386    bound 0.5685    transfer 0.0097    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(0.47189116) min lb tensor(-0.04472434)
Number of Verified Splits: 370 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 13
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.04193282127380371 
BICCOS Cumulative time: 0.09124445915222168
Preprocessing time: 0.013142585754394531 Inference time: 0.018916606903076172 Add cuts time: 0.008836030960083008 Cut analysis time: 0.00103759765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02443 (4), -0.01066 (4), -0.00437 (4), -0.00217 (4), 
Length of domains: 4
Time: pickout 0.0010    decision 0.0205    set_bounds 0.0159    solve 0.1684    add 0.2803    
Accumulated time: pickout 0.0084    decision 0.6120    set_bounds 0.0568    solve 0.5646    add 0.8208    
Current (lb-rhs): -0.024431228637695312
154 domains visited
Cumulative time: 2.247225046157837

Shallow-BaB round 5
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-8, 1973] 
split level 1: [/input-8, 1973] [/input-8, 1973] [/input-8, 1973] [/input-12, 92] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 56] [/input-12, 56] 
split level 3: [/input-12, 56] [/input-12, 56] [/input-12, 46] [/input-8, 1971] 
split level 4: [/input-8, 1971] [/input-12, 46] [/input-8, 1971] [/input-12, 46] 
split level 5: [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
split level 6: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 7: [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] [/input-8, 1706] 
split level 8: [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] [/input-8, 1965] 
split level 9: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] 
split level 10: [/input-8, 766] [/input-8, 766] [/input-8, 766] [/input-8, 766] 
split level 11: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 12: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 13: [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] [/input-8, 1647] 
split level 14: [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] [/input-8, 1955] 
split level 15: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
split level 16: [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] [/input-8, 1655] 
split level 17: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
split level 18: [/input-8, 764] [/input-8, 764] [/input-8, 764] [/input-8, 764] 
split level 19: [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 20: [/input-8, 752] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] 
split level 21: [/input-8, 1981] [/input-8, 752] [/input-8, 752] [/input-8, 1981] 
split level 22: [/input-8, 1388] [/input-8, 1981] [/input-8, 1981] [/input-8, 752] 
split level 23: [/input-8, 1510] [/input-8, 1510] [/input-8, 1399] [/input-8, 1510] 
split level 24: [/input-8, 1399] [/input-8, 1399] [/input-8, 1510] [/input-8, 1399] 
split level 25: [/input-8, 1502] [/input-8, 1704] [/input-8, 1704] [/input-8, 1502] 
split level 26: [/input-8, 1704] [/input-8, 1502] [/input-8, 1502] [/input, 3571] 
split level 27: [/input, 3571] [/input, 3571] [/input, 3571] [/input-8, 1704] 
split level 28: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
split level 29: [/input-8, 1633] [/input-8, 1633] [/input-8, 149] [/input-8, 510] 
split level 30: [/input-8, 1700] [/input-8, 1700] [/input-8, 1700] [/input-8, 149] 
split level 31: [/input-8, 510] [/input-8, 1691] [/input-8, 1633] [/input-8, 1633] 
split level 32: [/input-8, 285] [/input-8, 149] [/input-8, 285] [/input-8, 285] 
split level 33: [/input-8, 149] [/input-8, 285] [/input-8, 1691] [/input-8, 1691] 
split level 34: [/input-8, 1691] [/input-8, 510] [/input-8, 510] [/input-8, 1700] 
split level 35: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
split level 36: [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3417] 
split level 37: [/input-8, 1527] [/input-8, 1527] [/input, 3417] [/input, 3165] 
split level 38: [/input, 3417] [/input, 3417] [/input-8, 1527] [/input-8, 341] 
split level 39: [/input-8, 313] [/input-8, 341] [/input-8, 313] [/input-8, 1527] 
split level 40: [/input, 359] [/input-8, 313] [/input, 2438] [/input-8, 313] 
split level 41: [/input-8, 341] [/input, 2438] [/input-8, 341] [/input, 2438] 
split level 42: [/input-8, 1631] [/input, 359] [/input, 359] [/input-8, 1629] 
split level 43: [/input-8, 1629] [/input-8, 1631] [/input-8, 1631] [/input-8, 1631] 
split level 44: [/input-8, 1211] [/input-8, 1629] [/input-8, 1629] [/input, 359] 
split level 45: [/input, 4066] [/input-8, 1211] [/input-8, 1211] [/input-8, 1211] 
split level 46: [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] [/input-8, 1934] 
split level 47: [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] [/input-8, 1702] 
split level 48: [/input-8, 605] [/input-8, 605] [/input-8, 605] [/input-8, 605] 
split level 49: [/input-8, 379] [/input-8, 379] [/input-8, 379] [/input-8, 379] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.056964874267578125

all verified at 1th iter
Time: prepare 0.0081    bound 0.0150    transfer 0.0008    finalize 0.0025    func 0.0289    
Accumulated time: func 0.6540    prepare 0.0494    bound 0.5835    transfer 0.0105    finalize 0.0161    
all_split False
======================Cut inference begins======================
max lb tensor(0.21514893) min lb tensor(0.00628853)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0025
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 13
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.04864931106567383 
BICCOS Cumulative time: 0.1398937702178955
Preprocessing time: 0.011542797088623047 Inference time: 0.020311594009399414 Add cuts time: 0.013331413269042969 Cut analysis time: 0.0034635066986083984
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.1463    set_bounds 0.0129    solve 0.0291    add 0.0336    
Accumulated time: pickout 0.0092    decision 0.7583    set_bounds 0.0697    solve 0.5937    add 0.8545    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38]), tensor([-1.]), tensor([0]), tensor([1.54365453e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.02935549e-10, 1.41734168e-01, 2.05452010e-01, 4.26683277e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.02935549e-10, 1.41734168e-01, 2.05452010e-01, 1.08569190e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.02935549e-10, 1.41734168e-01, 6.86479062e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.02935549e-10, 2.40648791e-01, 1.56200454e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([-1.]), tensor([0]), tensor([1.11102683e-10]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [1.0293554897344848e-10, 0.2406487911939621, 0.07532462477684021, 0.04204082489013672], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1973]), tensor([1.]), tensor([0]), tensor([5.17692555e-11]), tensor([4])), '/input-12': ([38, 6, 85, 24], [1.0, 1.0, 1.0, -1.0], [0, 0, 0, 0], [1.0293554897344848e-10, 0.2406487911939621, 0.07532462477684021, 0.04204082489013672], [0, 1, 2, 3])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([38,  6, 85, 24]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.02935549e-10, 2.40648791e-01, 7.53246248e-02, 9.91611481e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.46251440048217773
10 lb beta sum: 1.0369421243667603, worst -0.4538273513317108
Time: prepare 0.0005    bound 0.1406    transfer 0.0002    finalize 0.0002    func 0.1417    
Accumulated time: func 0.7957    prepare 0.0499    bound 0.7242    transfer 0.0107    finalize 0.0163    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 24] 
split level 1: [/input-12, 85] [/input-8, 1973] 
split level 2: [/input-12, 24] [/input-12, 46] 
split level 3: [/input-8, 1973] [/input-8, 1971] 
split level 4: [/input-12, 46] [/input-8, 1965] 
split level 5: [/input-8, 1971] [/input-12, 2] 
split level 6: [/input-8, 1965] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5046195983886719, worst -0.2414032518863678
10 lb beta sum: 0.5736884474754333, worst -0.14685773849487305
Time: prepare 0.0118    bound 0.1506    transfer 0.0038    finalize 0.0023    func 0.1702    
Accumulated time: func 0.9659    prepare 0.0621    bound 0.8748    transfer 0.0145    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.25618425) min lb tensor(-0.14647913)
Number of Verified Splits: 185 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.502206563949585, worst -0.31435441970825195
10 lb beta sum: 1.283703088760376, worst -0.20843687653541565
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 13
#cuts 4-6: 26
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.3024144172668457 
BICCOS Cumulative time: 0.4423081874847412
Preprocessing time: 0.007985591888427734 Inference time: 0.27815866470336914 Add cuts time: 0.01277017593383789 Cut analysis time: 0.0034999847412109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14648 (7), -0.14347 (7), -0.13696 (7), -0.13475 (7), -0.13373 (7), -0.13002 (7), -0.12777 (7), -0.12318 (7), -0.07314 (7), -0.07268 (7), -0.07041 (7), -0.07015 (7), -0.06371 (7), -0.06341 (7), -0.06322 (7), -0.06278 (7), -0.06193 (7), -0.06188 (7), -0.06112 (7), -0.06015 (7), 
Length of domains: 71
Time: pickout 0.0006    decision 0.0213    set_bounds 0.0254    solve 0.1703    add 0.0695    
Accumulated time: pickout 0.0098    decision 0.7796    set_bounds 0.0951    solve 0.7640    add 0.9240    
Current (lb-rhs): -0.14647912979125977
225 domains visited
Cumulative time: 3.325488328933716

BaB round 2
batch: 71
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 2] [/input-8, 1950] [/input-8, 1655] [/input-12, 2] [/input-12, 2] [/input-8, 1950] [/input-8, 1706] [/input-8, 1706] [/input-8, 1655] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.129119873046875
10 lb beta sum: 0.33917397260665894, worst -0.12214994430541992
Time: prepare 0.0062    bound 0.1507    transfer 0.0041    finalize 0.0023    func 0.1652    
Accumulated time: func 1.1311    prepare 0.0686    bound 1.0255    transfer 0.0185    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.31641608) min lb tensor(-0.12188625)
Number of Verified Splits: 162 of 284
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 11
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.030466794967651367 
BICCOS Cumulative time: 0.4727749824523926
Preprocessing time: 0.00913095474243164 Inference time: 0.0159454345703125 Add cuts time: 0.0036313533782958984 Cut analysis time: 0.0017590522766113281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12189 (9), -0.11830 (9), -0.11250 (9), -0.11228 (9), -0.11053 (9), -0.11027 (9), -0.10849 (9), -0.10536 (9), -0.10429 (9), -0.10329 (9), -0.10177 (9), -0.10131 (9), -0.09844 (9), -0.09754 (9), -0.09507 (9), -0.09145 (9), -0.06412 (9), -0.06365 (9), -0.06133 (9), -0.06098 (9), 
Length of domains: 122
Time: pickout 0.0067    decision 0.0205    set_bounds 0.0212    solve 0.1653    add 0.0787    
Accumulated time: pickout 0.0166    decision 0.8001    set_bounds 0.1164    solve 0.9293    add 1.0027    
Current (lb-rhs): -0.1218862533569336
347 domains visited
Cumulative time: 3.658884048461914

BaB round 3
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1655] [/input-8, 1950] [/input-12, 56] [/input-8, 1706] [/input-8, 1655] [/input-8, 1950] [/input-8, 1950] [/input-8, 1655] [/input-12, 56] [/input-8, 1706] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12187385559082031
10 lb beta sum: 0.4790993928909302, worst -0.1150960922241211
Time: prepare 0.0055    bound 0.1427    transfer 0.0027    finalize 0.0028    func 0.4927    
Accumulated time: func 1.6238    prepare 0.0743    bound 1.1682    transfer 0.0213    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.41487241) min lb tensor(-0.11494970)
Number of Verified Splits: 112 of 244
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 14
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.023452281951904297 
BICCOS Cumulative time: 0.4962272644042969
Preprocessing time: 0.008185863494873047 Inference time: 0.010911226272583008 Add cuts time: 0.0026373863220214844 Cut analysis time: 0.0017178058624267578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11495 (10), -0.11139 (10), -0.11029 (10), -0.10675 (10), -0.10616 (10), -0.10524 (10), -0.10438 (10), -0.10376 (10), -0.10151 (10), -0.10020 (10), -0.09939 (10), -0.09927 (10), -0.09870 (10), -0.09786 (10), -0.09705 (10), -0.09654 (10), -0.09639 (10), -0.09541 (10), -0.09540 (10), -0.09434 (10), 
Length of domains: 132
Time: pickout 0.0142    decision 0.0172    set_bounds 0.0113    solve 0.4928    add 0.0814    
Accumulated time: pickout 0.0308    decision 0.8172    set_bounds 0.1277    solve 1.4221    add 1.0840    
Current (lb-rhs): -0.11494970321655273
479 domains visited
Cumulative time: 4.306867361068726

BaB round 4
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 56] [/input-8, 1399] [/input-12, 2] [/input-8, 1399] [/input-12, 56] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1178584098815918
10 lb beta sum: 1.0101110935211182, worst -0.10418349504470825
Time: prepare 0.0058    bound 0.1519    transfer 0.0039    finalize 0.0020    func 0.1656    
Accumulated time: func 1.7894    prepare 0.0803    bound 1.3201    transfer 0.0252    finalize 0.0257    
all_split False
======================Cut inference begins======================
max lb tensor(0.66745692) min lb tensor(-0.10408887)
Number of Verified Splits: 228 of 264
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 15
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.035471439361572266 
BICCOS Cumulative time: 0.5316987037658691
Preprocessing time: 0.008576154708862305 Inference time: 0.02310466766357422 Add cuts time: 0.002160787582397461 Cut analysis time: 0.0016298294067382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10409 (11), -0.10046 (11), -0.09935 (11), -0.09577 (11), -0.09461 (11), -0.09440 (11), -0.09215 (11), -0.09061 (11), -0.08930 (11), -0.08711 (11), -0.08664 (11), -0.08556 (11), -0.08451 (11), -0.08398 (11), -0.07912 (11), -0.07642 (11), -0.04974 (11), -0.04919 (11), -0.03965 (11), -0.03929 (11), 
Length of domains: 36
Time: pickout 0.0152    decision 0.0179    set_bounds 0.0124    solve 0.1657    add 0.0655    
Accumulated time: pickout 0.0460    decision 0.8351    set_bounds 0.1401    solve 1.5878    add 1.1496    
Current (lb-rhs): -0.10408887267112732
515 domains visited
Cumulative time: 4.629560708999634

BaB round 5
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1950] [/input-8, 1950] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] [/input-8, 1950] [/input-12, 2] 
split level 1: [/input-8, 1399] [/input-8, 1399] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] [/input-8, 1655] [/input-8, 1955] 
split level 2: [/input-8, 1704] [/input-8, 1704] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] [/input-8, 1399] [/input-8, 1655] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10178565979003906
10 lb beta sum: 0.9083743691444397, worst -0.09877967834472656
Time: prepare 0.0059    bound 0.1610    transfer 0.0041    finalize 0.0023    func 0.1752    
Accumulated time: func 1.9646    prepare 0.0864    bound 1.4811    transfer 0.0294    finalize 0.0280    
all_split False
======================Cut inference begins======================
max lb tensor(0.26131564) min lb tensor(-0.09869432)
Number of Verified Splits: 175 of 288
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.033182621002197266 
BICCOS Cumulative time: 0.5648813247680664
Preprocessing time: 0.00925445556640625 Inference time: 0.020521879196166992 Add cuts time: 0.0019567012786865234 Cut analysis time: 0.0014495849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09869 (14), -0.09722 (14), -0.09512 (14), -0.09397 (14), -0.09359 (14), -0.09250 (14), -0.09246 (14), -0.09230 (14), -0.09091 (14), -0.09081 (14), -0.09043 (14), -0.08918 (14), -0.08900 (14), -0.08890 (14), -0.08860 (14), -0.08774 (14), -0.08761 (14), -0.08758 (14), -0.08750 (14), -0.08704 (14), 
Length of domains: 113
Time: pickout 0.0055    decision 0.0185    set_bounds 0.0207    solve 0.1753    add 0.0797    
Accumulated time: pickout 0.0515    decision 0.8536    set_bounds 0.1608    solve 1.7631    add 1.2293    
Current (lb-rhs): -0.0986943244934082
628 domains visited
Cumulative time: 4.9711997509002686

BaB round 6
batch: 113
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-8, 1967] [/input-12, 34] [/input-12, 34] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] [/input-8, 1967] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0986943244934082
10 lb beta sum: 0.569223940372467, worst -0.09859275817871094
Time: prepare 0.0050    bound 0.1568    transfer 0.0024    finalize 0.0023    func 0.1680    
Accumulated time: func 2.1326    prepare 0.0917    bound 1.6379    transfer 0.0318    finalize 0.0303    
all_split False
======================Cut inference begins======================
max lb tensor(0.39701825) min lb tensor(-0.09851885)
Number of Verified Splits: 120 of 226
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.024626970291137695 
BICCOS Cumulative time: 0.5895082950592041
Preprocessing time: 0.0073888301849365234 Inference time: 0.014276742935180664 Add cuts time: 0.0012524127960205078 Cut analysis time: 0.001708984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09852 (15), -0.09706 (15), -0.09500 (15), -0.09381 (15), -0.09348 (15), -0.09235 (15), -0.09223 (15), -0.09206 (15), -0.09074 (15), -0.09059 (15), -0.09029 (15), -0.08900 (15), -0.08881 (15), -0.08876 (15), -0.08837 (15), -0.08752 (15), -0.08747 (15), -0.08737 (15), -0.08734 (15), -0.08682 (15), 
Length of domains: 106
Time: pickout 0.0157    decision 0.0200    set_bounds 0.0105    solve 0.1681    add 0.0796    
Accumulated time: pickout 0.0672    decision 0.8736    set_bounds 0.1713    solve 1.9312    add 1.3089    
Current (lb-rhs): -0.09851884841918945
734 domains visited
Cumulative time: 5.2981226444244385

BaB round 7
batch: 106
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] [/input-8, 429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09513568878173828
10 lb beta sum: 0.9195281863212585, worst -0.09214431047439575
Time: prepare 0.0047    bound 0.1560    transfer 0.0025    finalize 0.0015    func 0.1662    
Accumulated time: func 2.2988    prepare 0.0966    bound 1.7939    transfer 0.0343    finalize 0.0318    
all_split False
======================Cut inference begins======================
max lb tensor(0.03320569) min lb tensor(-0.09213120)
Number of Verified Splits: 101 of 212
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.023370981216430664 
BICCOS Cumulative time: 0.6128792762756348
Preprocessing time: 0.006969451904296875 Inference time: 0.01250457763671875 Add cuts time: 0.002449512481689453 Cut analysis time: 0.001447439193725586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09213 (16), -0.09077 (16), -0.08859 (16), -0.08742 (16), -0.08717 (16), -0.08640 (16), -0.08606 (16), -0.08560 (16), -0.08482 (16), -0.08423 (16), -0.08391 (16), -0.08310 (16), -0.08248 (16), -0.08234 (16), -0.08193 (16), -0.08171 (16), -0.08149 (16), -0.08097 (16), -0.08092 (16), -0.08044 (16), 
Length of domains: 111
Time: pickout 0.0149    decision 0.0190    set_bounds 0.0099    solve 0.1663    add 0.0772    
Accumulated time: pickout 0.0821    decision 0.8927    set_bounds 0.1813    solve 2.0975    add 1.3861    
Current (lb-rhs): -0.09213119745254517
845 domains visited
Cumulative time: 5.617079734802246

BaB round 8
batch: 111
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09394264221191406
10 lb beta sum: 1.0274219512939453, worst -0.09020066261291504
Time: prepare 0.0048    bound 0.1556    transfer 0.0006    finalize 0.0021    func 0.1647    
Accumulated time: func 2.4634    prepare 0.1017    bound 1.9495    transfer 0.0349    finalize 0.0339    
all_split False
======================Cut inference begins======================
max lb tensor(0.00868547) min lb tensor(-0.09018725)
Number of Verified Splits: 51 of 222
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.016442298889160156 
BICCOS Cumulative time: 0.6293215751647949
Preprocessing time: 0.00722193717956543 Inference time: 0.006388664245605469 Add cuts time: 0.0013949871063232422 Cut analysis time: 0.0014367103576660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09019 (17), -0.08888 (17), -0.08626 (17), -0.08547 (17), -0.08489 (17), -0.08418 (17), -0.08368 (17), -0.08361 (17), -0.08231 (17), -0.08195 (17), -0.08160 (17), -0.08036 (17), -0.08023 (17), -0.08010 (17), -0.07957 (17), -0.07904 (17), -0.07896 (17), -0.07893 (17), -0.07831 (17), -0.07812 (17), 
Length of domains: 171
Time: pickout 0.0155    decision 0.0193    set_bounds 0.0103    solve 0.1647    add 0.0819    
Accumulated time: pickout 0.0976    decision 0.9119    set_bounds 0.1915    solve 2.2622    add 1.4680    
Current (lb-rhs): -0.09018725156784058
1016 domains visited
Cumulative time: 5.9329681396484375

BaB round 9
batch: 171
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1660418510437012, worst -0.08790081739425659
10 lb beta sum: 1.1660418510437012, worst -0.08786839246749878
Time: prepare 0.0158    bound 0.1513    transfer 0.0039    finalize 0.0028    func 0.1761    
Accumulated time: func 2.6396    prepare 0.1177    bound 2.1008    transfer 0.0388    finalize 0.0366    
all_split False
======================Cut inference begins======================
max lb tensor(0.25466186) min lb tensor(-0.08786172)
Number of Verified Splits: 43 of 342
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.018899202346801758 
BICCOS Cumulative time: 0.6482207775115967
Preprocessing time: 0.010851860046386719 Inference time: 0.0053806304931640625 Add cuts time: 0.0005376338958740234 Cut analysis time: 0.002129077911376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08786 (18), -0.08656 (18), -0.08396 (18), -0.08315 (18), -0.08258 (18), -0.08185 (18), -0.08149 (18), -0.08136 (18), -0.08018 (18), -0.07962 (18), -0.07928 (18), -0.07804 (18), -0.07792 (18), -0.07780 (18), -0.07742 (18), -0.07678 (18), -0.07671 (18), -0.07667 (18), -0.07599 (18), -0.07599 (18), 
Length of domains: 299
Time: pickout 0.0321    decision 0.0205    set_bounds 0.0165    solve 0.1763    add 0.0785    
Accumulated time: pickout 0.1296    decision 0.9324    set_bounds 0.2080    solve 2.4385    add 1.5465    
Current (lb-rhs): -0.08786171674728394
1315 domains visited
Cumulative time: 6.2848405838012695

BaB round 10
batch: 299
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] [/input-8, 1388] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08792638778686523
10 lb beta sum: 1.1279923915863037, worst -0.08405900001525879
Time: prepare 0.0124    bound 0.1599    transfer 0.0075    finalize 0.0037    func 0.1874    
Accumulated time: func 2.8270    prepare 0.1304    bound 2.2607    transfer 0.0463    finalize 0.0404    
all_split False
======================Cut inference begins======================
max lb tensor(0.27877313) min lb tensor(-0.08403414)
Number of Verified Splits: 315 of 598
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.07050609588623047 
BICCOS Cumulative time: 0.7187268733978271
Preprocessing time: 0.020119190216064453 Inference time: 0.04577779769897461 Add cuts time: 0.003098011016845703 Cut analysis time: 0.0015110969543457031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08403 (19), -0.08273 (19), -0.08060 (19), -0.07930 (19), -0.07919 (19), -0.07799 (19), -0.07764 (19), -0.07752 (19), -0.07631 (19), -0.07593 (19), -0.07576 (19), -0.07454 (19), -0.07441 (19), -0.07400 (19), -0.07399 (19), -0.07291 (19), -0.07279 (19), -0.07264 (19), -0.07258 (19), -0.07258 (19), 
Length of domains: 283
Time: pickout 0.0200    decision 0.0315    set_bounds 0.0275    solve 0.1877    add 0.0859    
Accumulated time: pickout 0.1496    decision 0.9639    set_bounds 0.2355    solve 2.6262    add 1.6324    
Current (lb-rhs): -0.08403414487838745
1598 domains visited
Cumulative time: 6.714973449707031

BaB round 11
batch: 283
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] [/input-8, 1399] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.083740234375
10 lb beta sum: 1.2134768962860107, worst -0.07889580726623535
Time: prepare 0.0115    bound 0.1599    transfer 0.0065    finalize 0.0045    func 0.1862    
Accumulated time: func 3.0132    prepare 0.1421    bound 2.4206    transfer 0.0528    finalize 0.0449    
all_split False
======================Cut inference begins======================
max lb tensor(0.00231504) min lb tensor(-0.07886577)
Number of Verified Splits: 4 of 566
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.02067399024963379 
BICCOS Cumulative time: 0.7394008636474609
Preprocessing time: 0.017133235931396484 Inference time: 0.0007977485656738281 Add cuts time: 0.0004210472106933594 Cut analysis time: 0.002321958541870117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07887 (20), -0.07757 (20), -0.07571 (20), -0.07555 (20), -0.07439 (20), -0.07416 (20), -0.07413 (20), -0.07283 (20), -0.07236 (20), -0.07234 (20), -0.07215 (20), -0.07103 (20), -0.07097 (20), -0.07088 (20), -0.07075 (20), -0.07063 (20), -0.06967 (20), -0.06949 (20), -0.06937 (20), -0.06924 (20), 
Length of domains: 562
Time: pickout 0.0165    decision 0.0288    set_bounds 0.0254    solve 0.1863    add 0.1213    
Accumulated time: pickout 0.1661    decision 0.9927    set_bounds 0.2609    solve 2.8125    add 1.7537    
Current (lb-rhs): -0.07886576652526855
2160 domains visited
Cumulative time: 7.118444442749023

BaB round 12
batch: 562
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4338074922561646, worst -0.07504153251647949
10 lb beta sum: 1.4338074922561646, worst -0.07502102851867676
Time: prepare 0.0509    bound 0.1608    transfer 0.0088    finalize 0.0072    func 0.2351    
Accumulated time: func 3.2483    prepare 0.1932    bound 2.5814    transfer 0.0616    finalize 0.0520    
all_split False
======================Cut inference begins======================
max lb tensor(0.24533692) min lb tensor(-0.07500577)
Number of Verified Splits: 75 of 1124
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.05232977867126465 
BICCOS Cumulative time: 0.7917306423187256
Preprocessing time: 0.03794717788696289 Inference time: 0.01166677474975586 Add cuts time: 0.001293182373046875 Cut analysis time: 0.0014226436614990234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07501 (21), -0.07370 (21), -0.07363 (21), -0.07231 (21), -0.07176 (21), -0.07164 (21), -0.07044 (21), -0.07038 (21), -0.07027 (21), -0.07022 (21), -0.07019 (21), -0.06904 (21), -0.06897 (21), -0.06891 (21), -0.06876 (21), -0.06849 (21), -0.06846 (21), -0.06813 (21), -0.06760 (21), -0.06713 (21), 
Length of domains: 1049
Time: pickout 0.0775    decision 0.0435    set_bounds 0.0512    solve 0.2355    add 0.1015    
Accumulated time: pickout 0.2436    decision 1.0362    set_bounds 0.3122    solve 3.0480    add 1.8552    
Current (lb-rhs): -0.07500576972961426
3209 domains visited
Cumulative time: 7.689111709594727

BaB round 13
batch: 1049
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] [/input, 3571] 
cut re-enabled after branching node selection
0 lb beta sum: 1.467777132987976, worst -0.0739295482635498
10 lb beta sum: 1.467777132987976, worst -0.07385420799255371
Time: prepare 0.1091    bound 0.1941    transfer 0.0296    finalize 0.0133    func 0.3605    
Accumulated time: func 3.6088    prepare 0.3026    bound 2.7756    transfer 0.0911    finalize 0.0653    
all_split False
======================Cut inference begins======================
max lb tensor(0.00931275) min lb tensor(-0.07385182)
Number of Verified Splits: 191 of 2098
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 20
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.10255742073059082 
BICCOS Cumulative time: 0.8942880630493164
Preprocessing time: 0.06877541542053223 Inference time: 0.029350757598876953 Add cuts time: 0.002787351608276367 Cut analysis time: 0.0016438961029052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07385 (22), -0.07255 (22), -0.07188 (22), -0.07056 (22), -0.07056 (22), -0.07048 (22), -0.06925 (22), -0.06911 (22), -0.06907 (22), -0.06858 (22), -0.06843 (22), -0.06782 (22), -0.06734 (22), -0.06731 (22), -0.06726 (22), -0.06716 (22), -0.06700 (22), -0.06693 (22), -0.06598 (22), -0.06588 (22), 
Length of domains: 1907
Time: pickout 0.0396    decision 0.0730    set_bounds 0.0571    solve 0.5170    add 0.1545    
Accumulated time: pickout 0.2833    decision 1.1092    set_bounds 0.3693    solve 3.5650    add 2.0097    
Current (lb-rhs): -0.0738518238067627
5116 domains visited
Cumulative time: 8.642645597457886

BaB round 14
batch: 1907
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] [/input, 4071] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07551813125610352
10 lb beta sum: 1.2172729969024658, worst -0.07073372602462769
Time: prepare 0.1092    bound 0.3666    transfer 0.0312    finalize 0.0247    func 0.5572    
Accumulated time: func 4.1660    prepare 0.4121    bound 3.1422    transfer 0.1223    finalize 0.0900    
all_split False
======================Cut inference begins======================
max lb tensor(0.00795281) min lb tensor(-0.07072484)
Number of Verified Splits: 429 of 3814
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 22
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.20802664756774902 
BICCOS Cumulative time: 1.1023147106170654
Preprocessing time: 0.12674617767333984 Inference time: 0.07252097129821777 Add cuts time: 0.007059574127197266 Cut analysis time: 0.0016999244689941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07072 (23), -0.06940 (23), -0.06937 (23), -0.06933 (23), -0.06806 (23), -0.06802 (23), -0.06742 (23), -0.06729 (23), -0.06609 (23), -0.06606 (23), -0.06601 (23), -0.06600 (23), -0.06592 (23), -0.06591 (23), -0.06586 (23), -0.06476 (23), -0.06471 (23), -0.06462 (23), -0.06461 (23), -0.06460 (23), 
Length of domains: 3385
Time: pickout 0.1087    decision 0.1197    set_bounds 0.1788    solve 0.5582    add 0.1548    
Accumulated time: pickout 0.3920    decision 1.2289    set_bounds 0.5481    solve 4.1232    add 2.1645    
Current (lb-rhs): -0.07072484493255615
8501 domains visited
Cumulative time: 9.984880447387695

BaB round 15
batch: 3385
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] [/input-8, 285] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07275581359863281
10 lb beta sum: 1.5181455612182617, worst -0.06728613376617432
Time: prepare 0.1969    bound 0.5901    transfer 0.0273    finalize 0.0463    func 0.9054    
Accumulated time: func 5.0714    prepare 0.6093    bound 3.7323    transfer 0.1496    finalize 0.1363    
all_split False
======================Cut inference begins======================
max lb tensor(0.47010460) min lb tensor(-0.06725144)
Number of Verified Splits: 3602 of 6770
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 1.031017780303955 
BICCOS Cumulative time: 2.1333324909210205
Preprocessing time: 0.22655129432678223 Inference time: 0.7636368274688721 Add cuts time: 0.03886890411376953 Cut analysis time: 0.00196075439453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06725 (24), -0.06724 (24), -0.06595 (24), -0.06592 (24), -0.06553 (24), -0.06550 (24), -0.06421 (24), -0.06416 (24), -0.06395 (24), -0.06389 (24), -0.06355 (24), -0.06355 (24), -0.06254 (24), -0.06251 (24), -0.06250 (24), -0.06248 (24), -0.06225 (24), -0.06224 (24), -0.06218 (24), -0.06208 (24), 
Length of domains: 3168
Time: pickout 0.0854    decision 0.3639    set_bounds 0.3023    solve 0.9072    add 0.1870    
Accumulated time: pickout 0.4774    decision 1.5928    set_bounds 0.8504    solve 5.0303    add 2.3516    
Current (lb-rhs): -0.06725144386291504
11669 domains visited
Cumulative time: 12.898651123046875

BaB round 16
batch: 3168
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 1704] [/input-8, 1704] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06918191909790039
10 lb beta sum: 1.6726831197738647, worst -0.06354498863220215
Time: prepare 0.1834    bound 0.5620    transfer 0.0276    finalize 0.0456    func 0.8606    
Accumulated time: func 5.9320    prepare 0.7930    bound 4.2942    transfer 0.1772    finalize 0.1819    
all_split False
======================Cut inference begins======================
max lb tensor(0.27910739) min lb tensor(-0.06349027)
Number of Verified Splits: 3469 of 6336
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts: total 542 constraints, 33360 nonzero elements
Warning: varlay/16_8 not in pre_relu_layer_names ['/input', '/input-8', '/input-12'], skip this constraint!
cuts preparing time: 0.0167
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 568.
#cuts 1-3: 173
#cuts 10-12: 3
#cuts 13-15: 12
#cuts 16-18: 17
#cuts 19-21: 23
#cuts >= 20: 340
BICCOS time: 1.2736542224884033 
BICCOS Cumulative time: 3.406986713409424
Preprocessing time: 0.21032452583312988 Inference time: 0.7745413780212402 Add cuts time: 0.03271842002868652 Cut analysis time: 0.2560698986053467
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06349 (25), -0.06348 (25), -0.06284 (25), -0.06284 (25), -0.06220 (25), -0.06219 (25), -0.06153 (25), -0.06150 (25), -0.06025 (25), -0.06024 (25), -0.06001 (25), -0.05978 (25), -0.05976 (25), -0.05952 (25), -0.05945 (25), -0.05913 (25), -0.05913 (25), -0.05901 (25), -0.05886 (25), -0.05884 (25), 
Length of domains: 2867
Time: pickout 0.1465    decision 0.1891    set_bounds 0.2871    solve 0.8626    add 0.1571    
Accumulated time: pickout 0.6239    decision 1.7819    set_bounds 1.1375    solve 5.8929    add 2.5086    
Current (lb-rhs): -0.06349027156829834
14536 domains visited
Cumulative time: 15.854472398757935

BaB round 17
batch: 2867
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1967] [/input-8, 1967] [/input-8, 1704] [/input-8, 1704] [/input-8, 1967] [/input-8, 1967] [/input-8, 1704] [/input-8, 1967] [/input-8, 510] [/input-8, 510] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06738138198852539
10 lb beta sum: 6.131174087524414, worst -0.013770341873168945
Time: prepare 0.1563    bound 1.1244    transfer 0.0437    finalize 0.0445    func 1.4072    
Accumulated time: func 7.3393    prepare 0.9496    bound 5.4186    transfer 0.2210    finalize 0.2264    
all_split False
======================Cut inference begins======================
max lb tensor(0.41402149) min lb tensor(-0.00410342)
Number of Verified Splits: 5709 of 5734
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 1.377044916152954 
BICCOS Cumulative time: 4.784031629562378
Preprocessing time: 0.3841562271118164 Inference time: 0.9477880001068115 Add cuts time: 0.04120683670043945 Cut analysis time: 0.0038938522338867188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00410 (26), -0.00357 (26), -0.00338 (26), -0.00320 (26), -0.00257 (26), -0.00252 (26), -0.00240 (26), -0.00218 (26), -0.00200 (26), -0.00190 (26), -0.00185 (26), -0.00154 (26), -0.00149 (26), -0.00142 (26), -0.00132 (26), -0.00123 (26), -0.00119 (26), -0.00088 (26), -0.00076 (26), -0.00073 (26), 
Length of domains: 25
Time: pickout 0.1477    decision 0.1716    set_bounds 0.2642    solve 1.4096    add 0.0549    
Accumulated time: pickout 0.7715    decision 1.9536    set_bounds 1.4017    solve 7.3025    add 2.5635    
Current (lb-rhs): -0.004103422164916992
14561 domains visited
Cumulative time: 19.343939542770386

BaB round 18
batch: 25
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 510] [/input-8, 510] [/input, 1463] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input-8, 510] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 1: [/input, 1463] [/input, 1463] [/input-8, 510] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] [/input-8, 1704] [/input-8, 510] [/input-8, 1704] 
split level 2: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
split level 3: [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3165] [/input, 3165] [/input-8, 142] [/input, 3165] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.060614585876464844
10 lb beta sum: 0.981547474861145, worst -0.05723738670349121
Time: prepare 0.0102    bound 0.1790    transfer 0.0038    finalize 0.0029    func 0.1985    
Accumulated time: func 7.5378    prepare 0.9602    bound 5.5976    transfer 0.2248    finalize 0.2294    
all_split False
======================Cut inference begins======================
max lb tensor(0.43240952) min lb tensor(-0.00410342)
Number of Verified Splits: 236 of 400
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.06126880645751953 
BICCOS Cumulative time: 4.8453004360198975
Preprocessing time: 0.012058734893798828 Inference time: 0.044487714767456055 Add cuts time: 0.003206968307495117 Cut analysis time: 0.0015153884887695312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00410 (30), -0.00410 (30), -0.00410 (30), -0.00410 (30), -0.00410 (30), -0.00410 (30), -0.00410 (30), -0.00410 (30), -0.00357 (30), -0.00357 (30), -0.00357 (30), -0.00357 (30), -0.00338 (30), -0.00338 (30), -0.00338 (30), -0.00338 (30), -0.00320 (30), -0.00320 (30), -0.00320 (30), -0.00320 (30), 
Length of domains: 164
Time: pickout 0.0073    decision 0.0216    set_bounds 0.0379    solve 0.1986    add 0.0795    
Accumulated time: pickout 0.7788    decision 1.9751    set_bounds 1.4396    solve 7.5011    add 2.6430    
Current (lb-rhs): -0.004103422164916992
14725 domains visited
Cumulative time: 19.7580349445343

BaB round 19
batch: 164
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] [/input, 3315] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0081156492233276, worst -0.056090474128723145
10 lb beta sum: 1.0081156492233276, worst -0.0560837984085083
Time: prepare 0.0167    bound 0.1736    transfer 0.0022    finalize 0.0025    func 0.1972    
Accumulated time: func 7.7350    prepare 0.9771    bound 5.7712    transfer 0.2270    finalize 0.2318    
all_split False
======================Cut inference begins======================
max lb tensor(0.19958401) min lb tensor(-0.00410342)
Number of Verified Splits: 24 of 328
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.01684260368347168 
BICCOS Cumulative time: 4.862143039703369
Preprocessing time: 0.00986170768737793 Inference time: 0.004233360290527344 Add cuts time: 0.0007519721984863281 Cut analysis time: 0.001995563507080078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00410 (31), -0.00357 (31), -0.00357 (31), -0.00357 (31), -0.00357 (31), 
Length of domains: 304
Time: pickout 0.0187    decision 0.0211    set_bounds 0.0142    solve 0.1972    add 0.0780    
Accumulated time: pickout 0.7975    decision 1.9962    set_bounds 1.4538    solve 7.6983    add 2.7210    
Current (lb-rhs): -0.004103422164916992
15029 domains visited
Cumulative time: 20.111608505249023

BaB round 20
batch: 304
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 254] [/input-8, 149] [/input-8, 149] [/input-8, 149] [/input-8, 149] [/input-8, 254] [/input-8, 149] [/input-8, 149] [/input-8, 149] [/input-8, 149] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0014537572860718, worst -0.054592251777648926
10 lb beta sum: 1.0014537572860718, worst -0.05457603931427002
Time: prepare 0.0305    bound 0.1869    transfer 0.0060    finalize 0.0044    func 0.2319    
Accumulated time: func 7.9669    prepare 1.0078    bound 5.9581    transfer 0.2330    finalize 0.2362    
all_split False
======================Cut inference begins======================
max lb tensor(0.20425451) min lb tensor(-0.00410342)
Number of Verified Splits: 48 of 608
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.030515193939208984 
BICCOS Cumulative time: 4.892658233642578
Preprocessing time: 0.017937421798706055 Inference time: 0.008475303649902344 Add cuts time: 0.002580404281616211 Cut analysis time: 0.001522064208984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), -0.00410 (32), 
Length of domains: 560
Time: pickout 0.0212    decision 0.0279    set_bounds 0.0261    solve 0.2321    add 0.0876    
Accumulated time: pickout 0.8188    decision 2.0241    set_bounds 1.4798    solve 7.9304    add 2.8086    
Current (lb-rhs): -0.004103422164916992
15589 domains visited
Cumulative time: 20.544284343719482

BaB round 21
batch: 560
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 149] [/input, 857] [/input, 857] [/input, 857] [/input, 857] [/input-8, 149] [/input, 857] [/input, 857] [/input, 857] [/input, 857] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05572175979614258
10 lb beta sum: 1.310463786125183, worst -0.05007869005203247
Time: prepare 0.0279    bound 0.1937    transfer 0.0105    finalize 0.0069    func 0.2462    
Accumulated time: func 8.2131    prepare 1.0359    bound 6.1518    transfer 0.2435    finalize 0.2431    
all_split False
======================Cut inference begins======================
max lb tensor(0.93734908) min lb tensor(-0.00410342)
Number of Verified Splits: 982 of 1120
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 36
#cuts >= 20: 0
BICCOS time: 0.23140716552734375 
BICCOS Cumulative time: 5.124065399169922
Preprocessing time: 0.03577446937561035 Inference time: 0.18465971946716309 Add cuts time: 0.009248018264770508 Cut analysis time: 0.0017249584197998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00410 (33), -0.00410 (33), -0.00410 (33), -0.00410 (33), -0.00410 (33), -0.00410 (33), -0.00410 (33), -0.00410 (33), -0.00357 (33), -0.00357 (33), -0.00357 (33), -0.00357 (33), -0.00338 (33), -0.00338 (33), -0.00338 (33), -0.00338 (33), -0.00320 (33), -0.00320 (33), -0.00320 (33), -0.00320 (33), 
Length of domains: 138
Time: pickout 0.0247    decision 0.0429    set_bounds 0.0476    solve 0.2465    add 0.0794    
Accumulated time: pickout 0.8435    decision 2.0671    set_bounds 1.5275    solve 8.1769    add 2.8880    
Current (lb-rhs): -0.004103422164916992
15727 domains visited
Cumulative time: 21.22900128364563

BaB round 22
batch: 138
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3402] [/input, 3402] [/input, 857] [/input, 857] [/input, 3402] [/input, 857] [/input, 3417] [/input, 3417] [/input, 857] [/input, 3417] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05379772186279297
10 lb beta sum: 1.534138560295105, worst -0.04807591438293457
Time: prepare 0.0072    bound 0.1742    transfer 0.0008    finalize 0.0024    func 0.1864    
Accumulated time: func 8.3995    prepare 1.0433    bound 6.3259    transfer 0.2442    finalize 0.2455    
all_split False
======================Cut inference begins======================
max lb tensor(0.45480025) min lb tensor(-0.00410342)
Number of Verified Splits: 219 of 276
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts: total 955 constraints, 47180 nonzero elements
Warning: varlay/16_8 not in pre_relu_layer_names ['/input', '/input-8', '/input-12'], skip this constraint!
cuts preparing time: 0.0208
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 990.
#cuts 1-3: 297
#cuts 7-9: 2
#cuts 10-12: 7
#cuts 13-15: 29
#cuts 16-18: 40
#cuts 19-21: 37
#cuts >= 20: 578
BICCOS time: 0.42868518829345703 
BICCOS Cumulative time: 5.552750587463379
Preprocessing time: 0.008447408676147461 Inference time: 0.04269599914550781 Add cuts time: 0.0025925636291503906 Cut analysis time: 0.37494921684265137
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00410 (34), -0.00410 (34), -0.00357 (34), -0.00357 (34), -0.00338 (34), -0.00338 (34), -0.00320 (34), -0.00320 (34), -0.00257 (34), -0.00257 (34), -0.00252 (34), -0.00252 (34), -0.00240 (34), -0.00240 (34), -0.00218 (34), -0.00218 (34), -0.00200 (34), -0.00200 (34), -0.00190 (34), -0.00190 (34), 
Length of domains: 57
Time: pickout 0.0145    decision 0.0201    set_bounds 0.0121    solve 0.1865    add 0.0621    
Accumulated time: pickout 0.8580    decision 2.0872    set_bounds 1.5396    solve 8.3634    add 2.9501    
Current (lb-rhs): -0.004103422164916992
15784 domains visited
Cumulative time: 21.961230039596558

BaB round 23
batch: 57
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1510] [/input-8, 1510] [/input-8, 1981] [/input-8, 243] [/input-8, 1510] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] [/input-8, 891] 
split level 1: [/input-8, 254] [/input-8, 254] [/input-8, 254] [/input, 3256] [/input-8, 254] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05035591125488281
10 lb beta sum: 6.206389427185059, worst -0.018402814865112305
Time: prepare 0.0060    bound 0.2196    transfer 0.0023    finalize 0.0021    func 0.3772    
Accumulated time: func 8.7767    prepare 1.0496    bound 6.5455    transfer 0.2465    finalize 0.2476    
all_split False
======================Cut inference begins======================
max lb tensor(0.37577975) min lb tensor(0.00021315)
Number of Verified Splits: 228 of 228
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
Total number of valid cuts: 990.
#cuts 1-3: 297
#cuts 7-9: 2
#cuts 10-12: 7
#cuts 13-15: 29
#cuts 16-18: 40
#cuts 19-21: 37
#cuts >= 20: 578
BICCOS time: 0.009771585464477539 
BICCOS Cumulative time: 5.5625221729278564
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0179    set_bounds 0.0119    solve 0.3772    add 0.0001    
Accumulated time: pickout 0.8657    decision 2.1051    set_bounds 1.5514    solve 8.7407    add 2.9502    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
15784 domains visited
Cumulative time: 22.387715101242065

found process to kill: terminal indx = 8
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=77_spec=8_27005896.log
found process for pidx=8
kill process for pidx=8
Result: safe in 25.7418 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 329, 1, 632] with unstable size 328 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 632] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [328]; unstable size 328; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 328] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 328] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.01773727,  1.41905212, -0.42905188, -0.71989632,  0.09239107,
         -1.24160290,  0.88482070,  2.33327007,  1.89770031]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.75459862, -19.03087234, -15.81020927, -15.02808094, -15.45583725,
         -15.58429432, -14.96899986, -17.89657974, -19.61580658, -19.36780739]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930],
         [-17.75459862, -19.03087234, -15.81020832, -15.02808094, -15.45583725,
          -15.58429337, -14.96900177, -17.89657784, -19.61580658, -19.36780930]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78212738,  0.42775631, -0.05907917]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0824 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.35046577, -23.71506119, -23.35945511, -21.45649910, -20.70935822,
         -20.53724480, -22.38616753, -16.30188179, -26.53351212, -22.39307404]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [460]; unstable size 460; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 460] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 460] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 460] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 247] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23471165, 4.94442558, 5.38546562, 3.64118981, 3.33296204, 2.72332478,
         4.26009798, 8.15480995, 3.82787895]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [899]; unstable size 899; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 311, 1, 899] with unstable size 310 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 899] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 899] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [310]; unstable size 310; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 310] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 310] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97617054, -1.48784256,  0.95436382, -1.87956285,  0.93106532,
         -1.03131628, -0.85329711, -0.83899224,  0.88107014]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.09100723, -29.06959343, -25.09518623, -27.86755753, -24.83033943,
         -28.04232597, -26.05955124, -26.36453247, -25.66234589, -27.72757912]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912],
         [-25.09101105, -29.06959724, -25.09518623, -27.86755753, -24.83034134,
          -28.04232597, -26.05955315, -26.36453438, -25.66234589, -27.72757912]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00417519, -0.26066971,  0.96854210,  1.27352333,  0.57133484]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0782 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.78340530, -27.09945488, -17.72372437, -21.88307762, -18.28152275,
         -20.99545860, -20.59827042, -22.34070778, -24.70541382, -26.47000694]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [950]; unstable size 950; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 950] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 950] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 950] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 208] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.15953612, 7.92398405, 3.57421255, 0.07925250, 2.58815289, 1.97291231,
         3.73509598, 5.73443413, 7.39504910]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0675 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 306, 1, 743] with unstable size 305 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 743] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [305]; unstable size 305; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 305] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 305] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.55621243,  2.72794247, -0.34306383, -0.31645536, -0.10541511,
         -0.28819227,  1.26013136,  2.92124987,  1.60254765]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.82749367, -26.77242661, -22.68888855, -21.92727852, -23.00431252,
         -21.88382530, -22.72205544, -24.54189873, -26.69390106, -25.28289032]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.17584038, -27.13981628, -23.11540031, -22.38797569, -23.44976807,
          -22.53939438, -23.10030365, -25.11281586, -26.95533371, -25.84247017],
         [-25.17584038, -27.13981628, -23.11540031, -22.38797569, -23.44976807,
          -22.53939438, -23.10030365, -25.11281586, -26.95533371, -25.84247017]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.57600594, -0.15141869,  0.91037369,  0.56090927]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0724 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 573] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 573] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 256] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.53955317,  0.16099817,  2.22247696,  1.41359806,  1.53142834,
          1.82894993,  2.34312391,  1.67316437, -0.55014038]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
         -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.56it/s]100%|██████████| 1/1 [00:00<00:00,  7.56it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.72954750, -25.00329971, -27.98002243, -26.96814156, -27.40962029,
          -27.52673721, -28.15061378, -27.60468102, -24.36431122, -24.20353508]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.16077614]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1351 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.869608879089355
alpha/beta optimization time: 1.3697104454040527
initial alpha-crown bounds: tensor([[ 0.62231731,  0.20234007,  2.31166744,  1.48120975,  1.62453079,
          1.90319967,  2.41159010,  1.76273012, -0.44997644]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.44997644424438477
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6442 seconds.
lower bounds for all target labels: [0.622316837310791, 0.2023376226425171, 2.3116703033447266, 1.4812088012695312, 1.6245288848876953, 1.9031982421875, 2.411587715148926, 1.7627315521240234, -0.4499778747558594]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 44950 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.32805156707764
Verifying property 0 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.411590099334717.

Properties batch 1, size 1
Remaining timeout: 198.1438331604004
Verifying property 1 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3116674423217773.

Properties batch 2, size 1
Remaining timeout: 198.03647589683533
Verifying property 2 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9031996726989746.

Properties batch 3, size 1
Remaining timeout: 197.93132853507996
Verifying property 3 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7627301216125488.

Properties batch 4, size 1
Remaining timeout: 197.82772159576416
Verifying property 4 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6245307922363281.

Properties batch 5, size 1
Remaining timeout: 197.72496104240417
Verifying property 5 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4812097549438477.

Properties batch 6, size 1
Remaining timeout: 197.62307739257812
Verifying property 6 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6223173141479492.

Properties batch 7, size 1
Remaining timeout: 197.52055859565735
Verifying property 7 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.20234006643295288.

Properties batch 8, size 1
Remaining timeout: 197.40113592147827
Verifying property 8 with 1 instances.
##### Instance 83 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44997644]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.01862907, -24.96064758, -28.10244751, -27.03785515, -27.65390778,
        -27.54524422, -28.22773170, -27.61219788, -25.01158905, -23.89872360],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44997644]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 573
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 251
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 843
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006043910980224609
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0607    transfer 0.0001    finalize 0.0002    func 0.0612    
Accumulated time: func 0.0612    prepare 0.0002    bound 0.0607    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 55] 
split level 1: [/input-12, 85] 
split level 2: [/input-12, 49] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 69] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 38] 
split level 7: [/input-12, 34] 
split level 8: [/input-12, 56] 
split level 9: [/input-8, 715] 
split level 10: [/input-8, 883] 
split level 11: [/input-8, 1392] 
split level 12: [/input-8, 885] 
split level 13: [/input-8, 884] 
split level 14: [/input-8, 1649] 
split level 15: [/input-12, 50] 
split level 16: [/input-8, 117] 
split level 17: [/input-8, 1240] 
split level 18: [/input-8, 493] 
split level 19: [/input-8, 1389] 
split level 20: [/input-8, 1402] 
split level 21: [/input-8, 500] 
split level 22: [/input-8, 1395] 
split level 23: [/input-8, 1388] 
split level 24: [/input-8, 886] 
split level 25: [/input-8, 1965] 
split level 26: [/input-8, 1384] 
split level 27: [/input-8, 116] 
split level 28: [/input-8, 819] 
split level 29: [/input-8, 424] 
split level 30: [/input-8, 1396] 
split level 31: [/input-12, 42] 
split level 32: [/input-8, 881] 
split level 33: [/input-8, 1393] 
split level 34: [/input-8, 1398] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 1397] 
split level 37: [/input-8, 742] 
split level 38: [/input-8, 1185] 
split level 39: [/input-8, 433] 
split level 40: [/input-8, 1955] 
split level 41: [/input-8, 1394] 
split level 42: [/input-8, 417] 
split level 43: [/input-8, 1958] 
split level 44: [/input-8, 246] 
split level 45: [/input-8, 638] 
split level 46: [/input, 2422] 
split level 47: [/input-8, 1097] 
split level 48: [/input, 509] 
split level 49: [/input-8, 1390] 
split level 50: [/input-8, 931] 
split level 51: [/input-8, 1705] 
split level 52: [/input, 1430] 
split level 53: [/input-8, 891] 
split level 54: [/input-8, 1403] 
split level 55: [/input-8, 139] 
split level 56: [/input-8, 1654] 
split level 57: [/input-8, 1376] 
split level 58: [/input-8, 1325] 
split level 59: [/input, 1006] 
split level 60: [/input-8, 420] 
split level 61: [/input-8, 1713] 
split level 62: [/input-8, 1650] 
split level 63: [/input-8, 1698] 
split level 64: [/input, 1018] 
split level 65: [/input-8, 1383] 
split level 66: [/input-8, 893] 
split level 67: [/input-8, 401] 
split level 68: [/input, 167] 
split level 69: [/input, 697] 
split level 70: [/input, 1479] 
split level 71: [/input-8, 1380] 
split level 72: [/input-8, 1168] 
split level 73: [/input, 699] 
split level 74: [/input, 1021] 
split level 75: [/input-8, 1385] 
split level 76: [/input, 505] 
split level 77: [/input, 491] 
split level 78: [/input, 1005] 
split level 79: [/input-8, 1697] 
split level 80: [/input-8, 1372] 
split level 81: [/input, 990] 
split level 82: [/input, 1004] 
split level 83: [/input-8, 1641] 
split level 84: [/input, 1384] 
split level 85: [/input-8, 1938] 
split level 86: [/input, 1015] 
split level 87: [/input-8, 251] 
split level 88: [/input-8, 1663] 
split level 89: [/input, 1013] 
split level 90: [/input, 507] 
split level 91: [/input, 1020] 
split level 92: [/input, 494] 
split level 93: [/input-8, 488] 
split level 94: [/input-8, 1377] 
split level 95: [/input, 1768] 
split level 96: [/input-8, 241] 
split level 97: [/input-8, 242] 
split level 98: [/input-8, 485] 
split level 99: [/input, 493] 
split level 100: [/input-8, 1597] 
split level 101: [/input-8, 1940] 
split level 102: [/input, 1707] 
split level 103: [/input, 3194] 
split level 104: [/input, 1476] 
split level 105: [/input-8, 1583] 
split level 106: [/input, 1003] 
split level 107: [/input-8, 823] 
split level 108: [/input-8, 815] 
split level 109: [/input, 1016] 
split level 110: [/input-8, 1379] 
split level 111: [/input-8, 409] 
split level 112: [/input, 120] 
split level 113: [/input, 1366] 
split level 114: [/input-8, 361] 
split level 115: [/input, 1466] 
split level 116: [/input, 2678] 
split level 117: [/input, 1002] 
split level 118: [/input-8, 1184] 
split level 119: [/input, 3571] 
split level 120: [/input-8, 890] 
split level 121: [/input, 1478] 
split level 122: [/input-8, 1528] 
split level 123: [/input, 681] 
split level 124: [/input, 183] 
split level 125: [/input, 103] 
split level 126: [/input-8, 1378] 
split level 127: [/input-8, 364] 
split level 128: [/input-8, 250] 
split level 129: [/input-8, 1760] 
split level 130: [/input-8, 1925] 
split level 131: [/input-8, 876] 
split level 132: [/input-8, 191] 
split level 133: [/input, 806] 
split level 134: [/input, 682] 
split level 135: [/input, 2181] 
split level 136: [/input, 121] 
split level 137: [/input-8, 295] 
split level 138: [/input, 989] 
split level 139: [/input-8, 1368] 
split level 140: [/input, 3366] 
split level 141: [/input, 2426] 
split level 142: [/input, 3113] 
split level 143: [/input-8, 399] 
split level 144: [/input-8, 1505] 
split level 145: [/input, 822] 
split level 146: [/input, 2442] 
split level 147: [/input, 135] 
split level 148: [/input, 2728] 
split level 149: [/input-8, 1783] 
split level 150: [/input, 988] 
split level 151: [/input, 1755] 
split level 152: [/input-8, 431] 
split level 153: [/input, 3129] 
split level 154: [/input, 185] 
split level 155: [/input, 891] 
split level 156: [/input, 3521] 
split level 157: [/input-8, 2044] 
split level 158: [/input, 2438] 
split level 159: [/input, 700] 
split level 160: [/input, 2557] 
split level 161: [/input, 117] 
split level 162: [/input-8, 2033] 
split level 163: [/input-8, 1371] 
split level 164: [/input, 3552] 
split level 165: [/input, 890] 
split level 166: [/input-8, 504] 
split level 167: [/input, 3054] 
split level 168: [/input, 489] 
split level 169: [/input, 1367] 
split level 170: [/input, 3053] 
split level 171: [/input, 1477] 
split level 172: [/input-8, 877] 
split level 173: [/input, 2865] 
split level 174: [/input, 995] 
split level 175: [/input-8, 238] 
split level 176: [/input, 2428] 
split level 177: [/input, 2027] 
split level 178: [/input, 892] 
split level 179: [/input, 236] 
split level 180: [/input-8, 38] 
split level 181: [/input-8, 402] 
split level 182: [/input, 2545] 
split level 183: [/input, 2554] 
split level 184: [/input-8, 1369] 
split level 185: [/input, 213] 
split level 186: [/input, 196] 
split level 187: [/input, 663] 
split level 188: [/input, 3195] 
split level 189: [/input, 3446] 
split level 190: [/input, 2435] 
split level 191: [/input, 809] 
split level 192: [/input, 2300] 
split level 193: [/input, 2555] 
split level 194: [/input, 1183] 
split level 195: [/input, 3299] 
split level 196: [/input, 2179] 
split level 197: [/input, 2797] 
split level 198: [/input, 2782] 
split level 199: [/input, 2635] 
Time: prepare 0.0060    bound 0.1076    transfer 0.0115    finalize 0.0046    func 0.1299    
Accumulated time: func 0.1911    prepare 0.0177    bound 0.1683    transfer 0.0116    finalize 0.0048    
all_split False
======================Cut inference begins======================
max lb tensor(0.26740932) min lb tensor(-0.44989538)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013350725173950195 
BICCOS Cumulative time: 0.013350725173950195
Preprocessing time: 0.011910200119018555 Inference time: 0.00018334388732910156 Add cuts time: 7.319450378417969e-05 Cut analysis time: 0.0011839866638183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.43550 (1), -0.43517 (1), -0.43457 (1), -0.43381 (1), -0.43299 (1), -0.43276 (1), -0.43243 (1), -0.43082 (1), -0.42960 (1), -0.42943 (1), -0.42917 (1), -0.42846 (1), -0.42766 (1), -0.42722 (1), -0.42716 (1), -0.42674 (1), -0.42618 (1), -0.42587 (1), -0.42544 (1), -0.42437 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5499    set_bounds 0.0110    solve 0.1301    add 0.1693    
Accumulated time: pickout 0.0004    decision 0.5499    set_bounds 0.0110    solve 0.1301    add 0.1693    
Current (lb-rhs): -0.4355039596557617
50 domains visited
Cumulative time: 0.951833963394165

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 4] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 49] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 29] [/input-12, 4] [/input-12, 29] [/input-12, 29] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4070267677307129
10 lb beta sum: 0.6506527066230774, worst -0.3831099569797516
Time: prepare 0.0074    bound 0.1363    transfer 0.0008    finalize 0.0029    func 0.1501    
Accumulated time: func 0.3412    prepare 0.0253    bound 0.3046    transfer 0.0124    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.39271536) min lb tensor(-0.38295847)
Number of Verified Splits: 109 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.020089387893676758 
BICCOS Cumulative time: 0.03344011306762695
Preprocessing time: 0.012867927551269531 Inference time: 0.005128145217895508 Add cuts time: 0.001416921615600586 Cut analysis time: 0.0006763935089111328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08641 (2), -0.08632 (2), -0.08369 (2), -0.08367 (2), -0.07787 (2), -0.07516 (2), -0.07145 (2), -0.06909 (2), -0.06907 (2), -0.06723 (2), -0.06690 (2), -0.06518 (2), -0.06469 (2), -0.06148 (2), -0.06096 (2), -0.06047 (2), -0.06032 (2), -0.06022 (2), -0.06008 (2), -0.05900 (2), 
Length of domains: 50
Time: pickout 0.0021    decision 0.0253    set_bounds 0.0130    solve 0.1502    add 0.2284    
Accumulated time: pickout 0.0025    decision 0.5752    set_bounds 0.0241    solve 0.2802    add 0.3977    
Current (lb-rhs): -0.08640855550765991
100 domains visited
Cumulative time: 1.396000623703003

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 1: [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] [/input-12, 85] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 49] [/input-12, 4] [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1229243278503418
10 lb beta sum: 0.7748569846153259, worst -0.020462334156036377
Time: prepare 0.0078    bound 0.1397    transfer 0.0022    finalize 0.0028    func 0.1552    
Accumulated time: func 0.4965    prepare 0.0334    bound 0.4443    transfer 0.0146    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.37298489) min lb tensor(-0.00629085)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.03986001014709473 
BICCOS Cumulative time: 0.07330012321472168
Preprocessing time: 0.013369321823120117 Inference time: 0.01832723617553711 Add cuts time: 0.007510662078857422 Cut analysis time: 0.0006527900695800781
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0085    decision 0.0223    set_bounds 0.0182    solve 0.1554    add 0.0216    
Accumulated time: pickout 0.0110    decision 0.5975    set_bounds 0.0422    solve 0.4356    add 0.4194    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.46518990e-01, 2.80859768e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.46518990e-01, 7.73255080e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.10040352e-01, 2.56445825e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 29, 55]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.10040352e-01, 8.18973035e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 3.44377100e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 55]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 6.59499019e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30565357208251953
10 lb beta sum: 0.6098556518554688, worst -0.23232847452163696
Time: prepare 0.0004    bound 0.1275    transfer 0.0003    finalize 0.0002    func 0.1284    
Accumulated time: func 0.6249    prepare 0.0338    bound 0.5718    transfer 0.0149    finalize 0.0108    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 85] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 69] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 56] 
split level 6: [/input-8, 1392] 
split level 7: [/input-8, 1397] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4001803398132324, worst -0.12693548202514648
10 lb beta sum: 1.4001803398132324, worst -0.12609434127807617
Time: prepare 0.0116    bound 0.1329    transfer 0.0049    finalize 0.0032    func 0.1543    
Accumulated time: func 0.7792    prepare 0.0459    bound 0.7047    transfer 0.0197    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.57592773) min lb tensor(-0.12584162)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4001802206039429, worst -0.37954187393188477
10 lb beta sum: 1.4855626821517944, worst -0.23198473453521729
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts 7-9: 3
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3383617401123047 
BICCOS Cumulative time: 0.41166186332702637
Preprocessing time: 0.007782459259033203 Inference time: 0.31925272941589355 Add cuts time: 0.009015560150146484 Cut analysis time: 0.0023109912872314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12584 (8), -0.12467 (8), -0.11729 (8), -0.11679 (8), -0.11318 (8), -0.11201 (8), -0.10507 (8), -0.10453 (8), -0.00346 (8), -0.00135 (8), 
Length of domains: 10
Time: pickout 0.0005    decision 0.0234    set_bounds 0.0259    solve 0.1545    add 0.0396    
Accumulated time: pickout 0.0115    decision 0.6209    set_bounds 0.0681    solve 0.5900    add 0.4590    
Current (lb-rhs): -0.12584161758422852
110 domains visited
Cumulative time: 2.443333625793457

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1395] [/input-8, 1388] [/input-8, 1388] [/input-8, 1395] 
split level 1: [/input-8, 1389] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] [/input-8, 1384] [/input-8, 1388] [/input-8, 1389] [/input-8, 1395] [/input-8, 1388] 
split level 2: [/input-8, 1396] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1396] [/input-8, 1396] [/input-8, 1389] 
split level 3: [/input-8, 1384] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1384] [/input-8, 116] [/input-8, 1396] 
split level 4: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 1398] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09413909912109375
10 lb beta sum: 0.157846137881279, worst -0.092675119638443
Time: prepare 0.0064    bound 0.1526    transfer 0.0056    finalize 0.0035    func 0.1705    
Accumulated time: func 0.9497    prepare 0.0526    bound 0.8574    transfer 0.0253    finalize 0.0175    
all_split False
======================Cut inference begins======================
max lb tensor(0.05355549) min lb tensor(-0.09245019)
Number of Verified Splits: 64 of 320
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.019649744033813477 
BICCOS Cumulative time: 0.43131160736083984
Preprocessing time: 0.010233402252197266 Inference time: 0.006930112838745117 Add cuts time: 0.0012955665588378906 Cut analysis time: 0.0011906623840332031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09245 (13), -0.09084 (13), -0.08667 (13), -0.08558 (13), -0.08366 (13), -0.08188 (13), -0.08154 (13), -0.08079 (13), -0.07961 (13), -0.07936 (13), -0.07880 (13), -0.07843 (13), -0.07830 (13), -0.07825 (13), -0.07822 (13), -0.07806 (13), -0.07801 (13), -0.07801 (13), -0.07750 (13), -0.07747 (13), 
Length of domains: 256
Time: pickout 0.0019    decision 0.0175    set_bounds 0.0215    solve 0.1706    add 0.0548    
Accumulated time: pickout 0.0134    decision 0.6384    set_bounds 0.0896    solve 0.7606    add 0.5138    
Current (lb-rhs): -0.09245018661022186
366 domains visited
Cumulative time: 2.7300243377685547

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1395] [/input-12, 50] [/input-8, 1395] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-8, 1395] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08737945556640625
10 lb beta sum: 0.19730767607688904, worst -0.08664312958717346
Time: prepare 0.0133    bound 0.1359    transfer 0.0064    finalize 0.0036    func 0.1626    
Accumulated time: func 1.1123    prepare 0.0661    bound 0.9933    transfer 0.0317    finalize 0.0211    
all_split False
======================Cut inference begins======================
max lb tensor(0.05947797) min lb tensor(-0.08658032)
Number of Verified Splits: 155 of 512
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.042983293533325195 
BICCOS Cumulative time: 0.47429490089416504
Preprocessing time: 0.016190290451049805 Inference time: 0.022243261337280273 Add cuts time: 0.00308990478515625 Cut analysis time: 0.0014598369598388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08658 (14), -0.08495 (14), -0.08067 (14), -0.07932 (14), -0.07871 (14), -0.07670 (14), -0.07594 (14), -0.07454 (14), -0.07380 (14), -0.07367 (14), -0.07316 (14), -0.07258 (14), -0.07233 (14), -0.07208 (14), -0.07206 (14), -0.07196 (14), -0.07186 (14), -0.07184 (14), -0.07165 (14), -0.07148 (14), 
Length of domains: 357
Time: pickout 0.0083    decision 0.0238    set_bounds 0.0243    solve 0.1628    add 0.0962    
Accumulated time: pickout 0.0217    decision 0.6622    set_bounds 0.1139    solve 0.9234    add 0.6100    
Current (lb-rhs): -0.0865803211927414
723 domains visited
Cumulative time: 3.0973336696624756

BaB round 4
batch: 357
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08179283142089844
10 lb beta sum: 0.25312861800193787, worst -0.08108416199684143
Time: prepare 0.0159    bound 0.1466    transfer 0.0111    finalize 0.0037    func 0.1820    
Accumulated time: func 1.2943    prepare 0.0822    bound 1.1399    transfer 0.0428    finalize 0.0249    
all_split False
======================Cut inference begins======================
max lb tensor(0.29109374) min lb tensor(-0.08103469)
Number of Verified Splits: 202 of 714
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.05982565879821777 
BICCOS Cumulative time: 0.5341205596923828
Preprocessing time: 0.024693012237548828 Inference time: 0.03033757209777832 Add cuts time: 0.0034530162811279297 Cut analysis time: 0.0013420581817626953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08103 (15), -0.07941 (15), -0.07508 (15), -0.07377 (15), -0.07296 (15), -0.07093 (15), -0.07037 (15), -0.06984 (15), -0.06896 (15), -0.06838 (15), -0.06821 (15), -0.06784 (15), -0.06757 (15), -0.06683 (15), -0.06677 (15), -0.06664 (15), -0.06640 (15), -0.06637 (15), -0.06612 (15), -0.06604 (15), 
Length of domains: 512
Time: pickout 0.0200    decision 0.0340    set_bounds 0.2919    solve 0.1822    add 0.1123    
Accumulated time: pickout 0.0417    decision 0.6962    set_bounds 0.4058    solve 1.1056    add 0.7223    
Current (lb-rhs): -0.08103469014167786
1235 domains visited
Cumulative time: 3.8085639476776123

BaB round 5
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] [/input-8, 1393] [/input-8, 1384] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23520375788211823, worst -0.07407668232917786
10 lb beta sum: 0.23520375788211823, worst -0.07396414875984192
Time: prepare 0.0476    bound 0.1420    transfer 0.0176    finalize 0.0078    func 0.2217    
Accumulated time: func 1.5160    prepare 0.1300    bound 1.2819    transfer 0.0604    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.00044791) min lb tensor(-0.07390884)
Number of Verified Splits: 1 of 1024
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.03642845153808594 
BICCOS Cumulative time: 0.5705490112304688
Preprocessing time: 0.03435969352722168 Inference time: 0.00042247772216796875 Add cuts time: 0.0002892017364501953 Cut analysis time: 0.0013570785522460938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07391 (16), -0.07228 (16), -0.06937 (16), -0.06797 (16), -0.06771 (16), -0.06726 (16), -0.06663 (16), -0.06520 (16), -0.06345 (16), -0.06324 (16), -0.06286 (16), -0.06210 (16), -0.06194 (16), -0.06185 (16), -0.06124 (16), -0.06123 (16), -0.06108 (16), -0.06043 (16), -0.06033 (16), -0.05994 (16), 
Length of domains: 1023
Time: pickout 0.0655    decision 0.0430    set_bounds 0.0468    solve 0.2220    add 0.1376    
Accumulated time: pickout 0.1072    decision 0.7392    set_bounds 0.4526    solve 1.3276    add 0.8599    
Current (lb-rhs): -0.07390883564949036
2258 domains visited
Cumulative time: 4.368266820907593

BaB round 6
batch: 1023
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06980037689208984
10 lb beta sum: 0.19431816041469574, worst -0.06915466487407684
Time: prepare 0.0450    bound 0.1901    transfer 0.0252    finalize 0.0111    func 0.2849    
Accumulated time: func 1.8009    prepare 0.1753    bound 1.4720    transfer 0.0856    finalize 0.0438    
all_split False
======================Cut inference begins======================
max lb tensor(0.00853634) min lb tensor(-0.06910807)
Number of Verified Splits: 47 of 2046
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 9
#cuts 7-9: 16
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.08436107635498047 
BICCOS Cumulative time: 0.6549100875854492
Preprocessing time: 0.0698707103729248 Inference time: 0.008788585662841797 Add cuts time: 0.002748727798461914 Cut analysis time: 0.002953052520751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06911 (17), -0.06574 (17), -0.06437 (17), -0.06380 (17), -0.06270 (17), -0.06219 (17), -0.06184 (17), -0.06175 (17), -0.06100 (17), -0.05907 (17), -0.05871 (17), -0.05758 (17), -0.05751 (17), -0.05746 (17), -0.05745 (17), -0.05712 (17), -0.05702 (17), -0.05701 (17), -0.05656 (17), -0.05643 (17), 
Length of domains: 1999
Time: pickout 0.0896    decision 0.0718    set_bounds 0.0942    solve 0.2854    add 0.1174    
Accumulated time: pickout 0.1967    decision 0.8111    set_bounds 0.5469    solve 1.6130    add 0.9773    
Current (lb-rhs): -0.06910806894302368
4257 domains visited
Cumulative time: 5.12064266204834

BaB round 7
batch: 1999
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] [/input-12, 42] [/input-8, 742] [/input-8, 1398] [/input-8, 1398] [/input-8, 742] [/input-8, 742] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06249237060546875
10 lb beta sum: 0.18518134951591492, worst -0.06188574433326721
Time: prepare 0.1036    bound 0.2890    transfer 0.0650    finalize 0.0255    func 0.5098    
Accumulated time: func 2.3107    prepare 0.2791    bound 1.7610    transfer 0.1506    finalize 0.0693    
all_split False
======================Cut inference begins======================
max lb tensor(0.01048033) min lb tensor(-0.06185059)
Number of Verified Splits: 449 of 3998
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 130.
#cuts 1-3: 9
#cuts 4-6: 4
#cuts 7-9: 110
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 0.2645843029022217 
BICCOS Cumulative time: 0.9194943904876709
Preprocessing time: 0.1357884407043457 Inference time: 0.07960271835327148 Add cuts time: 0.04014396667480469 Cut analysis time: 0.009049177169799805
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06185 (18), -0.06093 (18), -0.06016 (18), -0.05743 (18), -0.05699 (18), -0.05691 (18), -0.05641 (18), -0.05606 (18), -0.05580 (18), -0.05562 (18), -0.05530 (18), -0.05486 (18), -0.05458 (18), -0.05378 (18), -0.05271 (18), -0.05271 (18), -0.05269 (18), -0.05256 (18), -0.05221 (18), -0.05217 (18), 
Length of domains: 3549
Time: pickout 0.0453    decision 0.1262    set_bounds 0.3532    solve 0.5113    add 0.1798    
Accumulated time: pickout 0.2420    decision 0.9373    set_bounds 0.9000    solve 2.1243    add 1.1570    
Current (lb-rhs): -0.061850592494010925
7806 domains visited
Cumulative time: 6.616766452789307

BaB round 8
batch: 3549
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1394] [/input-12, 42] [/input-12, 42] [/input-8, 1394] [/input-8, 819] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05587482452392578
10 lb beta sum: 0.1553082913160324, worst -0.05529108643531799
Time: prepare 0.1673    bound 0.4745    transfer 0.0618    finalize 0.0424    func 0.7933    
Accumulated time: func 3.1040    prepare 0.4468    bound 2.2355    transfer 0.2124    finalize 0.1117    
all_split False
======================Cut inference begins======================
max lb tensor(0.02966610) min lb tensor(-0.05525640)
Number of Verified Splits: 2565 of 7098
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 336.
#cuts 1-3: 11
#cuts 4-6: 99
#cuts 7-9: 225
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 1.1193199157714844 
BICCOS Cumulative time: 2.0388143062591553
Preprocessing time: 0.2526113986968994 Inference time: 0.6571862697601318 Add cuts time: 0.19022464752197266 Cut analysis time: 0.01929759979248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05526 (19), -0.05434 (19), -0.05355 (19), -0.05082 (19), -0.05054 (19), -0.05028 (19), -0.04980 (19), -0.04935 (19), -0.04903 (19), -0.04898 (19), -0.04878 (19), -0.04856 (19), -0.04843 (19), -0.04796 (19), -0.04760 (19), -0.04725 (19), -0.04629 (19), -0.04621 (19), -0.04585 (19), -0.04567 (19), 
Length of domains: 4533
Time: pickout 0.0671    decision 0.3951    set_bounds 0.3286    solve 0.7952    add 0.1689    
Accumulated time: pickout 0.3091    decision 1.3324    set_bounds 1.2286    solve 2.9195    add 1.3259    
Current (lb-rhs): -0.055256396532058716
12339 domains visited
Cumulative time: 9.535685777664185

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04998970031738281
10 lb beta sum: 0.21576963365077972, worst -0.0772799551486969
Time: prepare 0.2016    bound 0.5980    transfer 0.0562    finalize 0.0694    func 0.9804    
Accumulated time: func 4.0844    prepare 0.6488    bound 2.8335    transfer 0.2686    finalize 0.1811    
all_split False
======================Cut inference begins======================
max lb tensor(0.04040106) min lb tensor(-0.04932244)
Number of Verified Splits: 4257 of 8192
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 444.
#cuts 1-3: 11
#cuts 4-6: 205
#cuts 7-9: 228
#cuts >= 20: 0
BICCOS time: 1.6931769847869873 
BICCOS Cumulative time: 3.7319912910461426
Preprocessing time: 0.2844810485839844 Inference time: 0.7854654788970947 Add cuts time: 0.5999858379364014 Cut analysis time: 0.023244619369506836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04932 (20), -0.04840 (20), -0.04796 (19), -0.04763 (20), -0.04570 (20), -0.04520 (19), -0.04489 (20), -0.04449 (20), -0.04429 (20), -0.04388 (20), -0.04385 (20), -0.04336 (20), -0.04303 (20), -0.04299 (19), -0.04299 (20), -0.04260 (20), -0.04237 (20), -0.04193 (20), -0.04185 (19), -0.04170 (20), 
Length of domains: 4372
Time: pickout 0.0885    decision 0.2446    set_bounds 0.6192    solve 0.9836    add 0.1912    
Accumulated time: pickout 0.3976    decision 1.5770    set_bounds 1.8478    solve 3.9031    add 1.5172    
Current (lb-rhs): -0.04932244122028351
16274 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.42192792892456

BaB round 10
batch: 4372
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04665565490722656
10 lb beta sum: 0.1601654291152954, worst -0.09486326575279236
Time: prepare 0.2063    bound 0.6777    transfer 0.0584    finalize 0.2919    func 1.2924    
Accumulated time: func 5.3768    prepare 0.8555    bound 3.5112    transfer 0.3270    finalize 0.4731    
all_split False
======================Cut inference begins======================
max lb tensor(0.23596293) min lb tensor(-0.04601796)
Number of Verified Splits: 4918 of 8744
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts: total 282 constraints, 25412 nonzero elements
cuts preparing time: 0.2734
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 581.
#cuts 1-3: 56
#cuts 4-6: 232
#cuts 7-9: 53
#cuts 10-12: 1
#cuts 13-15: 2
#cuts 16-18: 15
#cuts 19-21: 7
#cuts >= 20: 215
BICCOS time: 2.0387959480285645 
BICCOS Cumulative time: 5.770787239074707
Preprocessing time: 0.2978365421295166 Inference time: 0.9310076236724854 Add cuts time: 0.30883145332336426 Cut analysis time: 0.5011203289031982
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04602 (21), -0.04509 (21), -0.04432 (21), -0.04202 (20), -0.04155 (21), -0.04118 (21), -0.04094 (21), -0.04057 (21), -0.04000 (21), -0.03992 (21), -0.03968 (21), -0.03921 (21), -0.03915 (20), -0.03910 (21), -0.03855 (20), -0.03853 (21), -0.03828 (21), -0.03808 (21), -0.03799 (21), -0.03719 (21), 
Length of domains: 3826
Time: pickout 0.1580    decision 0.2776    set_bounds 0.4371    solve 1.2949    add 0.1545    
Accumulated time: pickout 0.5557    decision 1.8546    set_bounds 2.2850    solve 5.1980    add 1.6717    
Current (lb-rhs): -0.04601795971393585
20100 domains visited
Cumulative time: 17.85058093070984

BaB round 11
batch: 3826
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] [/input-8, 883] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042626380920410156
10 lb beta sum: 3.1284031867980957, worst -0.005703568458557129
Time: prepare 0.1706    bound 1.5513    transfer 0.0859    finalize 0.0624    func 1.9242    
Accumulated time: func 7.3009    prepare 1.0264    bound 5.0624    transfer 0.4129    finalize 0.5355    
all_split False
======================Cut inference begins======================
max lb tensor(0.38148707) min lb tensor(6.67572021e-06)
Number of Verified Splits: 7652 of 7652
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0038
Total number of valid cuts: 581.
#cuts 1-3: 56
#cuts 4-6: 232
#cuts 7-9: 53
#cuts 10-12: 1
#cuts 13-15: 2
#cuts 16-18: 15
#cuts 19-21: 7
#cuts >= 20: 215
BICCOS time: 0.2608299255371094 
BICCOS Cumulative time: 6.031617164611816
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0776    decision 0.2279    set_bounds 0.3621    solve 2.1319    add 0.0004    
Accumulated time: pickout 0.6332    decision 2.0825    set_bounds 2.6470    solve 7.3298    add 1.6721    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
20100 domains visited
Cumulative time: 20.977807760238647

found process to kill: terminal indx = 8
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=83_spec=8_27008508.log
found process for pidx=8
kill process for pidx=8
Result: safe in 23.9677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 230, 1, 686] with unstable size 229 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 686] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [229]; unstable size 229; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 229] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 229] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.50022221,  8.58374882,  0.05487373,  2.84900141,  1.87417769,
         -0.72468829,  3.40504479,  7.17037439,  7.46117973]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.62381744, -28.09670830, -18.92805672, -21.62400627, -18.04868507,
         -20.67170334, -18.38792801, -22.29936600, -26.56884384, -27.05737495]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.62763786, -27.96693420, -18.82089806, -21.58105659, -18.18916893,
          -20.65969467, -17.92498779, -22.51766396, -26.59140778, -26.94355965]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26418114]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0734 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.05389786, -20.54568100, -25.38948441, -26.07571030, -24.92573357,
         -26.81814766, -25.31372643, -25.39832497, -22.18379402, -23.40080070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 595] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 232] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.74438715, 2.89176798, 3.72229576, 2.51304722, 4.30712175, 2.80102015,
         3.10480404, 0.20504284, 1.77497411]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.32361412, -25.52174950, -20.63148117, -22.61431122, -22.40266609,
         -22.09627724, -23.98217392, -22.95088196, -26.26723480, -25.69747353]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [912]; unstable size 912; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 912] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 912] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 912] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 239] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.74784970, 3.37162113, 1.17322993, 0.89480489, 0.68540329, 2.25614309,
         1.51441860, 4.23806047, 3.34960699]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0668 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 223, 1, 484] with unstable size 222 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 484] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 222] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.12594318,  2.36834145,  0.02151203, -0.42955112, -0.99394369,
         -0.44192934, -1.36476994,  4.78464127,  1.58999228]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.69555855, -19.83600044, -17.26213837, -16.53295326, -15.76759911,
         -16.55274010, -15.97445679, -15.69591236, -22.56094933, -18.99766541]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.89224243, -20.05119324, -17.43051529, -16.67961121, -15.76606178,
          -16.74633598, -15.92820740, -16.27584839, -22.73025513, -19.33327484],
         [-21.89224243, -20.05119324, -17.43051529, -16.67961121, -15.76606178,
          -16.74633598, -15.92820740, -16.27584839, -22.73025513, -19.33327484]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.40376282, -0.50978661,  0.47048759, -0.34764099]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0703 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [399]; unstable size 399; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 176, 1, 399] with unstable size 175 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 399] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 399] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [175]; unstable size 175; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 175] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 175] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71335745,  3.37155747, -1.61985385, -0.57951510, -1.65425408,
         -0.81910729, -2.40787196,  3.42854500, -0.36425400]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.74517250, -27.26931763, -22.31864548, -21.42955971, -22.42046928,
         -21.44980049, -22.51526642, -20.76612473, -26.78885269, -23.30550575]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766],
         [-25.74517059, -27.26931572, -22.31864166, -21.42955780, -22.42046738,
          -21.44979858, -22.51526833, -20.76612663, -26.78884697, -23.30550766]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.88908386,  0.10182571, -0.86884308,  0.19662666, -1.55251503,
           0.98686600]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.06668091, -12.17250633, -18.19817734, -17.74991226, -18.22573662,
         -18.83922386, -18.43832207, -18.79791641, -13.75891685, -14.38429832]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [591]; unstable size 591; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 591] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 591] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 591] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.43584061, 4.09200811, 4.03862047, 4.51079702, 5.00952911, 4.46496439,
         5.03483009, 0.23301840, 1.42504883]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0614 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [859]; unstable size 859; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 248, 1, 859] with unstable size 247 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 859] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 859] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [247]; unstable size 247; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 247] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.60208207, -0.84271955, -2.06193995, -2.20308495, -2.22541571,
         -1.86848962, -1.36994255, -0.36857569, -1.56844473]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.34238243, -16.93456459, -14.43105412, -14.20242596, -14.38679028,
         -14.68807125, -15.41123962, -15.82969379, -17.16383553, -15.87702465]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370],
         [-16.34238243, -16.93456650, -14.43105221, -14.20242500, -14.38679028,
          -14.68807125, -15.41123772, -15.82969379, -17.16383553, -15.87702370]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.93114471,  1.52332878, -0.98018551, -1.20881271, -1.02444744,
          -0.72316647,  0.41845608,  1.75259781,  0.46578598]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0795 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 740] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 244] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.38111258,  5.21995354,  5.14613438,  3.91153765,  5.43957043,
          6.09781647,  3.61251163,  3.57682610, -0.52638102]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.16949272, -23.99048996, -31.56820297, -31.41168404, -30.28091240,
         -31.78048897, -32.67536545, -30.17310143, -29.00139236, -24.21942329]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.39106178, -23.67284584, -30.69213867, -30.40574837, -29.33213806,
          -30.76441956, -31.73852158, -29.12598610, -28.38734436, -23.48725510]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18559074]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [669]; unstable size 669; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 669] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 669] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 669] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 240] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.66332388,  4.03361607,  0.93628383, -0.12254727,  0.23944330,
          1.05922604,  0.79270166,  7.63720131,  2.90536690]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87058258, -22.74460030, -18.83897781, -17.07898903, -18.22540092,
         -16.89878654, -19.11079788, -18.79213715, -26.21196175, -21.30853462]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.51282120, -22.28214264, -18.49987793, -16.76547241, -17.89261055,
          -16.77055550, -18.66166306, -18.61735344, -25.76009750, -20.99545097]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00508308]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0072 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0712 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [740]; unstable size 740; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 740] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 740] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 740] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 265] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.72773457,  3.26004648,  3.78023887,  3.84159517,  3.89679337,
          4.82130051,  3.72940350, -0.13638735,  0.71589297]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
         -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.73it/s]100%|██████████| 1/1 [00:00<00:00,  7.73it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.77746010, -17.05466080, -21.88848305, -22.15901375, -22.44706535,
          -22.50233269, -23.34392357, -22.66395569, -17.36938095, -18.43949699]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31472015]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1323 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.383888244628906
alpha/beta optimization time: 1.3817265033721924
initial alpha-crown bounds: tensor([[ 1.80881143,  3.35405779,  3.86240506,  3.93695259,  3.99371767,
          4.90125418,  3.85100222, -0.08674717,  0.76243532]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0867471694946289
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6745 seconds.
lower bounds for all target labels: [1.8088083267211914, 3.3540587425231934, 3.8624014854431152, 3.93695068359375, 3.9937167167663574, 4.901246070861816, 3.8510026931762695, -0.0867471694946289, 0.7624330520629883]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [7]
start creating model mps for candidates: ['lay/16_7']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.32268977165222
Verifying property 0 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.901254177093506.

Properties batch 1, size 1
Remaining timeout: 198.1605327129364
Verifying property 1 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.993717670440674.

Properties batch 2, size 1
Remaining timeout: 198.04955291748047
Verifying property 2 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.936952590942383.

Properties batch 3, size 1
Remaining timeout: 197.93920516967773
Verifying property 3 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.8624050617218018.

Properties batch 4, size 1
Remaining timeout: 197.83179879188538
Verifying property 4 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.8510022163391113.

Properties batch 5, size 1
Remaining timeout: 197.72400832176208
Verifying property 5 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.354057788848877.

Properties batch 6, size 1
Remaining timeout: 197.6020758152008
Verifying property 6 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8088114261627197.

Properties batch 7, size 1
Remaining timeout: 197.49195742607117
Verifying property 7 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7624353170394897.

Properties batch 8, size 1
Remaining timeout: 197.38041257858276
Verifying property 8 with 1 instances.
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08674717]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.02754021, -16.85969925, -22.22765350, -22.47852516, -22.75400734,
        -22.81135941, -23.67437744, -22.92312431, -17.78327179, -18.35700417],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08674717]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 740
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 1015
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006265640258789062
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0638    transfer 0.0001    finalize 0.0002    func 0.0643    
Accumulated time: func 0.0643    prepare 0.0002    bound 0.0638    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 64] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 42] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 69] 
split level 9: [/input-12, 12] 
split level 10: [/input-8, 1973] 
split level 11: [/input-12, 61] 
split level 12: [/input-8, 1392] 
split level 13: [/input-8, 940] 
split level 14: [/input-8, 1971] 
split level 15: [/input-8, 717] 
split level 16: [/input-8, 1490] 
split level 17: [/input-8, 1641] 
split level 18: [/input-8, 821] 
split level 19: [/input-8, 746] 
split level 20: [/input, 887] 
split level 21: [/input-8, 1704] 
split level 22: [/input-8, 1697] 
split level 23: [/input-8, 1974] 
split level 24: [/input-8, 923] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 757] 
split level 27: [/input, 2698] 
split level 28: [/input-8, 916] 
split level 29: [/input-8, 337] 
split level 30: [/input-8, 758] 
split level 31: [/input-8, 1333] 
split level 32: [/input-8, 1649] 
split level 33: [/input-8, 1505] 
split level 34: [/input-8, 825] 
split level 35: [/input, 3578] 
split level 36: [/input-8, 827] 
split level 37: [/input-8, 1593] 
split level 38: [/input, 1218] 
split level 39: [/input-8, 355] 
split level 40: [/input-8, 755] 
split level 41: [/input-8, 934] 
split level 42: [/input-8, 742] 
split level 43: [/input-8, 1677] 
split level 44: [/input-8, 1390] 
split level 45: [/input, 4035] 
split level 46: [/input-8, 1184] 
split level 47: [/input, 3449] 
split level 48: [/input-8, 715] 
split level 49: [/input, 2762] 
split level 50: [/input, 661] 
split level 51: [/input, 3448] 
split level 52: [/input-8, 330] 
split level 53: [/input-8, 1975] 
split level 54: [/input, 886] 
split level 55: [/input-8, 415] 
split level 56: [/input-8, 331] 
split level 57: [/input, 2758] 
split level 58: [/input-8, 1594] 
split level 59: [/input-8, 589] 
split level 60: [/input-8, 250] 
split level 61: [/input-8, 1686] 
split level 62: [/input, 1015] 
split level 63: [/input-8, 580] 
split level 64: [/input-8, 1678] 
split level 65: [/input, 326] 
split level 66: [/input, 949] 
split level 67: [/input, 1016] 
split level 68: [/input-8, 251] 
split level 69: [/input, 1014] 
split level 70: [/input-8, 1655] 
split level 71: [/input-8, 1176] 
split level 72: [/input, 1217] 
split level 73: [/input-8, 1027] 
split level 74: [/input, 2408] 
split level 75: [/input-8, 1688] 
split level 76: [/input-8, 753] 
split level 77: [/input, 2389] 
split level 78: [/input-8, 413] 
split level 79: [/input-8, 1987] 
split level 80: [/input, 2151] 
split level 81: [/input-8, 732] 
split level 82: [/input, 2152] 
split level 83: [/input, 1019] 
split level 84: [/input, 3572] 
split level 85: [/input, 679] 
split level 86: [/input, 1012] 
split level 87: [/input, 2136] 
split level 88: [/input, 4012] 
split level 89: [/input, 667] 
split level 90: [/input, 2425] 
split level 91: [/input-8, 1707] 
split level 92: [/input-8, 241] 
split level 93: [/input-8, 756] 
split level 94: [/input-8, 1647] 
split level 95: [/input, 1085] 
split level 96: [/input-8, 1034] 
split level 97: [/input, 885] 
split level 98: [/input, 856] 
split level 99: [/input, 666] 
split level 100: [/input, 2153] 
split level 101: [/input, 2150] 
split level 102: [/input-8, 838] 
split level 103: [/input-8, 254] 
split level 104: [/input, 2407] 
split level 105: [/input, 681] 
split level 106: [/input, 1228] 
split level 107: [/input, 1278] 
split level 108: [/input, 1469] 
split level 109: [/input-8, 819] 
split level 110: [/input, 346] 
split level 111: [/input, 730] 
split level 112: [/input, 3194] 
split level 113: [/input, 2555] 
split level 114: [/input, 874] 
split level 115: [/input, 869] 
split level 116: [/input, 1260] 
split level 117: [/input, 677] 
split level 118: [/input-8, 246] 
split level 119: [/input, 4039] 
split level 120: [/input, 2137] 
split level 121: [/input-8, 24] 
split level 122: [/input, 1102] 
split level 123: [/input, 2405] 
split level 124: [/input, 682] 
split level 125: [/input-8, 1381] 
split level 126: [/input, 1453] 
split level 127: [/input, 2749] 
split level 128: [/input, 2406] 
split level 129: [/input-8, 1663] 
split level 130: [/input, 2553] 
split level 131: [/input, 193] 
split level 132: [/input, 2409] 
split level 133: [/input-8, 406] 
split level 134: [/input, 2149] 
split level 135: [/input, 1250] 
split level 136: [/input-8, 6] 
split level 137: [/input, 3195] 
split level 138: [/input, 2549] 
split level 139: [/input, 116] 
split level 140: [/input, 2931] 
split level 141: [/input, 2550] 
split level 142: [/input-8, 1098] 
split level 143: [/input, 2102] 
split level 144: [/input, 1266] 
split level 145: [/input, 2133] 
split level 146: [/input, 1006] 
split level 147: [/input, 3445] 
split level 148: [/input, 854] 
split level 149: [/input, 2932] 
split level 150: [/input, 1045] 
split level 151: [/input, 372] 
split level 152: [/input-8, 752] 
split level 153: [/input, 2118] 
split level 154: [/input-8, 958] 
split level 155: [/input, 2376] 
split level 156: [/input, 2404] 
split level 157: [/input, 2884] 
split level 158: [/input, 1245] 
split level 159: [/input, 2552] 
split level 160: [/input, 2551] 
split level 161: [/input-8, 1986] 
split level 162: [/input, 728] 
split level 163: [/input, 678] 
split level 164: [/input, 1244] 
split level 165: [/input, 2216] 
split level 166: [/input, 2419] 
split level 167: [/input-8, 399] 
split level 168: [/input, 2296] 
split level 169: [/input-8, 1613] 
split level 170: [/input, 2295] 
split level 171: [/input, 2867] 
split level 172: [/input, 727] 
split level 173: [/input, 329] 
split level 174: [/input, 857] 
split level 175: [/input, 1058] 
split level 176: [/input, 1676] 
split level 177: [/input, 2784] 
split level 178: [/input, 209] 
split level 179: [/input, 2010] 
split level 180: [/input, 1277] 
split level 181: [/input, 1457] 
split level 182: [/input, 115] 
split level 183: [/input, 3495] 
split level 184: [/input, 2768] 
split level 185: [/input, 900] 
split level 186: [/input-8, 1158] 
split level 187: [/input, 852] 
split level 188: [/input, 1105] 
split level 189: [/input, 2171] 
split level 190: [/input, 67] 
split level 191: [/input, 2012] 
split level 192: [/input, 1133] 
split level 193: [/input, 2132] 
split level 194: [/input-8, 7] 
split level 195: [/input, 2298] 
split level 196: [/input, 1134] 
split level 197: [/input, 3869] 
split level 198: [/input, 2545] 
split level 199: [/input, 1216] 
Time: prepare 0.0061    bound 0.1127    transfer 0.0070    finalize 0.0045    func 0.1304    
Accumulated time: func 0.1947    prepare 0.0168    bound 0.1765    transfer 0.0071    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.35328722) min lb tensor(-0.08670855)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.015372991561889648 
BICCOS Cumulative time: 0.015372991561889648
Preprocessing time: 0.01262211799621582 Inference time: 0.0004253387451171875 Add cuts time: 0.00017189979553222656 Cut analysis time: 0.002153635025024414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07826 (1), -0.07810 (1), -0.07780 (1), -0.07775 (1), -0.07746 (1), -0.07703 (1), -0.07690 (1), -0.07689 (1), -0.07677 (1), -0.07633 (1), -0.07632 (1), -0.07620 (1), -0.07588 (1), -0.07571 (1), -0.07553 (1), -0.07549 (1), -0.07548 (1), -0.07512 (1), -0.07476 (1), -0.07432 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5601    set_bounds 0.0138    solve 0.1305    add 0.2113    
Accumulated time: pickout 0.0004    decision 0.5601    set_bounds 0.0138    solve 0.1305    add 0.2113    
Current (lb-rhs): -0.0782613754272461
50 domains visited
Cumulative time: 1.0193586349487305

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 64] [/input-12, 24] [/input-12, 31] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 42] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 42] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06420707702636719

all verified at 1th iter
Time: prepare 0.0076    bound 0.0140    transfer 0.0010    finalize 0.0033    func 0.0285    
Accumulated time: func 0.2232    prepare 0.0247    bound 0.1906    transfer 0.0081    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.16278762) min lb tensor(0.00337267)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03659224510192871 
BICCOS Cumulative time: 0.05196523666381836
Preprocessing time: 0.013110160827636719 Inference time: 0.015189886093139648 Add cuts time: 0.0077667236328125 Cut analysis time: 0.0005254745483398438
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0086    decision 0.0223    set_bounds 0.0125    solve 0.0286    add 0.0168    
Accumulated time: pickout 0.0090    decision 0.5824    set_bounds 0.0263    solve 0.1591    add 0.2280    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.01710912e-11, 1.29331335e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.01710912e-11, 1.34328410e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.09635201e-14, 1.08508334e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([1.09635201e-14, 1.34303138e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01758575439453125

all verified at 1th iter
Time: prepare 0.0003    bound 0.0117    transfer 0.0002    finalize 0.0002    func 0.0125    
Accumulated time: func 0.2357    prepare 0.0251    bound 0.2023    transfer 0.0083    finalize 0.0081    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.1935 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 511] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 511] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 148] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.11264598,  7.84995270,  2.51627040,  2.42221284,  2.71285629,
          2.42410803,  5.54274845,  0.54273701,  7.53125143]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
         -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.95301628, -37.16675568, -28.61315918, -31.63938332, -31.43132591,
          -31.90670967, -31.58338928, -34.70899582, -29.83979225, -36.90626907]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66014290]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1592 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [545]; unstable size 545; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 545] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 545] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 545] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.09797263,  0.63166380,  0.38092327,  0.26649189,  0.20289660,
          0.00656366,  2.20104074,  2.04292107,  2.05919981]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.89297295, -27.33354378, -29.85372162, -29.49278831, -29.63881493,
         -29.50118065, -28.79456902, -32.01272583, -30.67852783, -30.54553604]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.34124565, -27.52548599, -29.41050339, -29.07751274, -29.21006012,
          -29.12439346, -28.47667313, -31.67535019, -30.41997719, -30.50797653]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.18424034]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0726 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [473]; unstable size 473; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 473] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 473] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 473] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 261] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.13220119,  5.32813597, -1.68543828,  0.95246196, -1.03167844,
         -0.07594621,  0.28766167,  5.26238632,  4.65756130]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.40174294, -21.80084610, -13.97534084, -16.28988266, -14.66720581,
         -15.45098114, -14.34288788, -16.27135849, -21.38418579, -20.94428825]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825],
         [-17.40174294, -21.80084610, -13.97533989, -16.28988647, -14.66720772,
          -15.45098114, -14.34288788, -16.27136040, -21.38418961, -20.94428825]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.36754799,  0.32431984,  1.10809326]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1135]; unstable size 1135; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 418, 1, 1135] with unstable size 417 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1135] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1135] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [417]; unstable size 417; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 417] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 417] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.41564417,  4.65418434,  0.18066597, -0.18956995,  0.62921107,
         -0.03981167,  1.17114019,  2.01148939,  3.41380882]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
         -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.67it/s]100%|██████████| 1/1 [00:00<00:00,  7.66it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.83646393, -22.39689064, -14.86150932, -16.11657333, -15.43437386,
          -16.66946793, -16.04981232, -17.15288162, -19.10764885, -20.77401161],
         [-17.83646393, -22.39689064, -14.86150932, -16.11657333, -15.43437386,
          -16.66946793, -16.04981232, -17.15288162, -19.10764885, -20.77401161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.57286453, 1.18830299]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1334 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.512426376342773
alpha/beta optimization time: 1.3849966526031494
initial alpha-crown bounds: tensor([[ 1.54290366,  4.87704659,  0.28550032, -0.07817441,  0.74323380,
          0.05854970,  1.29010916,  2.20426583,  3.58899212]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0781744122505188
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6731 seconds.
lower bounds for all target labels: [1.5429039001464844, 4.877047061920166, 0.28549760580062866, -0.07817506790161133, 0.7432320713996887, 0.05854952335357666, 1.2901098728179932, 2.2042665481567383, 3.588991165161133]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.31437182426453
Verifying property 0 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.877046585083008.

Properties batch 1, size 1
Remaining timeout: 198.02355909347534
Verifying property 1 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.588992118835449.

Properties batch 2, size 1
Remaining timeout: 197.90311765670776
Verifying property 2 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.204265832901001.

Properties batch 3, size 1
Remaining timeout: 197.8088846206665
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5429036617279053.

Properties batch 4, size 1
Remaining timeout: 197.7169234752655
Verifying property 4 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2901091575622559.

Properties batch 5, size 1
Remaining timeout: 197.6248607635498
Verifying property 5 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7432337999343872.

Properties batch 6, size 1
Remaining timeout: 197.51542901992798
Verifying property 6 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.28550031781196594.

Properties batch 7, size 1
Remaining timeout: 197.42140173912048
Verifying property 7 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.058549702167510986.

Properties batch 8, size 1
Remaining timeout: 197.32701706886292
Verifying property 8 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.07817441]], device='cuda:0') need to verify.
Model prediction is: tensor([-18.44726753, -23.07283783, -15.31714439, -16.86220932, -16.37182045,
        -17.43654442, -16.84148979, -17.91537094, -19.79871750, -21.47072220],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07817441]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1135
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 400
Node /15 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 1562
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008981227874755859
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0002    func 0.0555    
Accumulated time: func 0.0555    prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 67] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 14] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 55] 
split level 9: [/input-8, 173] 
split level 10: [/input-8, 1186] 
split level 11: [/input-12, 86] 
split level 12: [/input-8, 2018] 
split level 13: [/input-8, 163] 
split level 14: [/input-8, 1187] 
split level 15: [/input-8, 1069] 
split level 16: [/input-8, 164] 
split level 17: [/input-8, 2010] 
split level 18: [/input-8, 1178] 
split level 19: [/input-8, 1070] 
split level 20: [/input-8, 1378] 
split level 21: [/input-8, 2025] 
split level 22: [/input-8, 2009] 
split level 23: [/input-8, 132] 
split level 24: [/input-8, 141] 
split level 25: [/input-8, 874] 
split level 26: [/input-8, 877] 
split level 27: [/input-8, 130] 
split level 28: [/input-8, 1185] 
split level 29: [/input-8, 156] 
split level 30: [/input, 631] 
split level 31: [/input-8, 1361] 
split level 32: [/input-8, 869] 
split level 33: [/input, 2798] 
split level 34: [/input-12, 35] 
split level 35: [/input-8, 1370] 
split level 36: [/input, 2781] 
split level 37: [/input-8, 1386] 
split level 38: [/input-8, 1268] 
split level 39: [/input-8, 878] 
split level 40: [/input-8, 2019] 
split level 41: [/input-8, 1382] 
split level 42: [/input-8, 906] 
split level 43: [/input-8, 876] 
split level 44: [/input-8, 33] 
split level 45: [/input, 823] 
split level 46: [/input-8, 866] 
split level 47: [/input-8, 1379] 
split level 48: [/input, 3913] 
split level 49: [/input-8, 865] 
split level 50: [/input-8, 1383] 
split level 51: [/input, 3164] 
split level 52: [/input-8, 1390] 
split level 53: [/input-8, 189] 
split level 54: [/input-8, 1179] 
split level 55: [/input-8, 291] 
split level 56: [/input, 3147] 
split level 57: [/input-8, 857] 
split level 58: [/input-8, 1385] 
split level 59: [/input-8, 1251] 
split level 60: [/input-8, 884] 
split level 61: [/input, 3197] 
split level 62: [/input, 825] 
split level 63: [/input-8, 1253] 
split level 64: [/input, 1345] 
split level 65: [/input-8, 2011] 
split level 66: [/input-8, 868] 
split level 67: [/input-8, 1763] 
split level 68: [/input-8, 362] 
split level 69: [/input-8, 1391] 
split level 70: [/input-8, 219] 
split level 71: [/input-8, 2020] 
split level 72: [/input-8, 34] 
split level 73: [/input-8, 881] 
split level 74: [/input-8, 851] 
split level 75: [/input-8, 32] 
split level 76: [/input-8, 290] 
split level 77: [/input-8, 1375] 
split level 78: [/input, 824] 
split level 79: [/input, 826] 
split level 80: [/input, 2834] 
split level 81: [/input, 2763] 
split level 82: [/input, 954] 
split level 83: [/input-8, 1561] 
split level 84: [/input-8, 1269] 
split level 85: [/input, 3277] 
split level 86: [/input-8, 1078] 
split level 87: [/input-8, 1748] 
split level 88: [/input-8, 1396] 
split level 89: [/input, 2669] 
split level 90: [/input, 3279] 
split level 91: [/input, 2765] 
split level 92: [/input, 3097] 
split level 93: [/input-8, 867] 
split level 94: [/input-8, 216] 
split level 95: [/input-8, 210] 
split level 96: [/input-8, 323] 
split level 97: [/input-8, 1358] 
split level 98: [/input-8, 217] 
split level 99: [/input, 2779] 
split level 100: [/input-8, 220] 
split level 101: [/input-8, 862] 
split level 102: [/input, 2634] 
split level 103: [/input, 2635] 
split level 104: [/input-8, 218] 
split level 105: [/input, 807] 
split level 106: [/input, 3295] 
split level 107: [/input, 2780] 
split level 108: [/input-8, 1177] 
split level 109: [/input, 3366] 
split level 110: [/input-8, 209] 
split level 111: [/input-8, 883] 
split level 112: [/input, 3323] 
split level 113: [/input, 3269] 
split level 114: [/input, 2818] 
split level 115: [/input, 839] 
split level 116: [/input-8, 1233] 
split level 117: [/input, 2652] 
split level 118: [/input, 2585] 
split level 119: [/input-12, 43] 
split level 120: [/input-8, 820] 
split level 121: [/input-8, 1347] 
split level 122: [/input, 2685] 
split level 123: [/input-8, 1562] 
split level 124: [/input-8, 886] 
split level 125: [/input, 2686] 
split level 126: [/input, 842] 
split level 127: [/input-8, 201] 
split level 128: [/input, 1927] 
split level 129: [/input, 1911] 
split level 130: [/input, 923] 
split level 131: [/input-8, 1181] 
split level 132: [/input-8, 1373] 
split level 133: [/input, 956] 
split level 134: [/input-8, 599] 
split level 135: [/input, 775] 
split level 136: [/input, 907] 
split level 137: [/input, 2921] 
split level 138: [/input-8, 1514] 
split level 139: [/input, 3270] 
split level 140: [/input, 679] 
split level 141: [/input-8, 1765] 
split level 142: [/input, 792] 
split level 143: [/input, 67] 
split level 144: [/input-8, 604] 
split level 145: [/input, 2087] 
split level 146: [/input, 2653] 
split level 147: [/input, 105] 
split level 148: [/input-8, 1189] 
split level 149: [/input, 581] 
split level 150: [/input, 805] 
split level 151: [/input, 3381] 
split level 152: [/input, 2839] 
split level 153: [/input-8, 1995] 
split level 154: [/input-8, 843] 
split level 155: [/input, 3383] 
split level 156: [/input, 937] 
split level 157: [/input, 840] 
split level 158: [/input-8, 1252] 
split level 159: [/input-8, 1750] 
split level 160: [/input, 2748] 
split level 161: [/input, 986] 
split level 162: [/input, 2870] 
split level 163: [/input, 972] 
split level 164: [/input-8, 863] 
split level 165: [/input, 3081] 
split level 166: [/input, 939] 
split level 167: [/input, 1405] 
split level 168: [/input, 3384] 
split level 169: [/input-8, 208] 
split level 170: [/input, 791] 
split level 171: [/input-8, 238] 
split level 172: [/input, 315] 
split level 173: [/input, 2665] 
split level 174: [/input, 1356] 
split level 175: [/input-8, 1384] 
split level 176: [/input-8, 887] 
split level 177: [/input, 113] 
split level 178: [/input, 3043] 
split level 179: [/input, 659] 
split level 180: [/input-8, 810] 
split level 181: [/input, 77] 
split level 182: [/input, 3096] 
split level 183: [/input, 87] 
split level 184: [/input-8, 792] 
split level 185: [/input, 3468] 
split level 186: [/input-8, 242] 
split level 187: [/input-8, 1495] 
split level 188: [/input, 801] 
split level 189: [/input, 116] 
split level 190: [/input, 178] 
split level 191: [/input-8, 1349] 
split level 192: [/input, 820] 
split level 193: [/input-8, 1773] 
split level 194: [/input-8, 895] 
split level 195: [/input-8, 858] 
split level 196: [/input, 2126] 
split level 197: [/input, 450] 
split level 198: [/input-8, 364] 
split level 199: [/input, 177] 
Time: prepare 0.0063    bound 0.1012    transfer 0.0282    finalize 0.0074    func 0.1432    
Accumulated time: func 0.1987    prepare 0.0166    bound 0.1561    transfer 0.0283    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.16974872) min lb tensor(-0.07807493)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.020096540451049805 
BICCOS Cumulative time: 0.020096540451049805
Preprocessing time: 0.018182039260864258 Inference time: 0.0004210472106933594 Add cuts time: 0.0001354217529296875 Cut analysis time: 0.0013580322265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06938 (1), -0.06922 (1), -0.06872 (1), -0.06861 (1), -0.06856 (1), -0.06854 (1), -0.06785 (1), -0.06722 (1), -0.06717 (1), -0.06715 (1), -0.06694 (1), -0.06679 (1), -0.06658 (1), -0.06618 (1), -0.06564 (1), -0.06563 (1), -0.06563 (1), -0.06492 (1), -0.06462 (1), -0.06376 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5384    set_bounds 0.0202    solve 0.1434    add 0.2371    
Accumulated time: pickout 0.0003    decision 0.5384    set_bounds 0.0202    solve 0.1434    add 0.2371    
Current (lb-rhs): -0.06938153505325317
50 domains visited
Cumulative time: 1.0386908054351807

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 59] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] 
split level 2: [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 67] [/input-12, 4] [/input-12, 67] [/input-12, 4] 
split level 3: [/input-12, 67] [/input-12, 97] [/input-12, 67] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 97] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03169816732406616

all verified at 1th iter
Time: prepare 0.0078    bound 0.0143    transfer 0.0011    finalize 0.0036    func 0.0294    
Accumulated time: func 0.2281    prepare 0.0246    bound 0.1704    transfer 0.0294    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.24257255) min lb tensor(0.00017661)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03873419761657715 
BICCOS Cumulative time: 0.05883073806762695
Preprocessing time: 0.013770580291748047 Inference time: 0.016337871551513672 Add cuts time: 0.007986307144165039 Cut analysis time: 0.0006394386291503906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0154    decision 0.0230    set_bounds 0.0155    solve 0.0295    add 0.0182    
Accumulated time: pickout 0.0157    decision 0.5614    set_bounds 0.0357    solve 0.1728    add 0.2553    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.50046849e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 5.85425943e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.44831368e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 5.94202131e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03265571594238281

all verified at 0th iter
Time: prepare 0.0004    bound 0.0051    transfer 0.0002    finalize 0.0002    func 0.0059    
Accumulated time: func 0.2340    prepare 0.0250    bound 0.1755    transfer 0.0296    finalize 0.0115    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.2632 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [821]; unstable size 821; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 821] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 821] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 821] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 267] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.66440105,  3.63743782,  1.26127362,  0.04986423, -0.05376530,
          0.98363996,  0.99622262,  2.72314119,  4.88065529]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.06963348, -22.13847923, -19.43040848, -17.05935478, -17.91039848,
         -16.70587921, -18.83517647, -19.20193481, -21.40512085, -23.21081352]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.14386940, -22.24015808, -19.51546097, -17.41148949, -17.76541138,
          -17.10868263, -19.04941940, -19.17812157, -21.50530815, -23.38755035]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.65672874]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1162 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 3th iter
best_l after optimization: 16.604549407958984
alpha/beta optimization time: 0.045375823974609375
initial alpha-crown bounds: tensor([[1.72636914e+00, 3.70138025e+00, 1.30631149e+00, 6.20777607e-02,
         6.07013702e-04, 1.02092135e+00, 1.04711533e+00, 2.80543804e+00,
         4.93432808e+00]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.0006070137023925781
verified with init bound!
Result: safe-incomplete in 0.4186 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1104]; unstable size 1104; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 266, 1, 1104] with unstable size 265 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 1104] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1104] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [265]; unstable size 265; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 265] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 265] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.64230895,  2.91880131, -0.80557775,  0.38735634, -0.40144253,
          1.09796894,  1.71821117,  2.96996188,  2.98997831]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.15164471, -15.32303524, -10.34104061, -11.69358635, -11.02870369,
         -12.56815910, -10.29522896, -13.35671329, -14.96125889, -15.40310478]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.88836288, -15.24282074,  -9.95007992, -11.49615860, -10.75760651,
          -12.33977604, -10.26209450, -13.06920719, -14.77008438, -15.26176357],
         [-13.88836288, -15.24282074,  -9.95007992, -11.49615860, -10.75760651,
          -12.33977604, -10.26209450, -13.06920719, -14.77008438, -15.26176357]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31201458,  0.49551201]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0086 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1010 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 775] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 775] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 275] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.33888197,  3.17010045, -0.78345811, -1.16919327, -0.99560726,
          1.16705453, -0.86630487,  3.00003242,  1.93420291]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-18.15521240, -20.46267700, -15.48517609, -15.11612129, -15.12829685,
         -14.53323936, -17.56829453, -16.12021637, -20.15639496, -18.95636940]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940],
         [-18.15521240, -20.46267509, -15.48517513, -15.11611938, -15.12829590,
          -14.53323841, -17.56829262, -16.12021637, -20.15639305, -18.95636940]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36905575,  0.01217651, -0.58288097,  1.00409698]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0874 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1007]; unstable size 1007; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 1007] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 1007] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1007] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 260] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62466067,  2.95583367,  3.49480176,  5.00074387,  3.80081749,
          5.96756935,  6.38276482,  5.76929712,  2.46701241]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-32.25936890, -36.14345932, -37.27095795, -38.62052536, -37.58951950,
         -39.79058075, -40.22500229, -39.67473602, -32.04320145, -35.54521942]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-31.95611572, -35.97737122, -36.92116928, -38.44849014, -37.25425720,
          -39.54434204, -39.96480942, -39.30963898, -32.26206589, -35.37592697]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.30595016]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [744]; unstable size 744; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 744] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 744] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 744] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 272] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79987323,  5.21834850, -1.55336547, -0.28184438, -0.22590327,
          0.73269272,  0.47210938,  3.03185987,  3.45756865]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.35278130, -31.36741257, -23.66108131, -25.04328346, -24.10462570,
         -25.23495674, -26.15161133, -25.66592026, -29.01111603, -29.58918571]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571],
         [-27.35277939, -31.36741257, -23.66108322, -25.04328346, -24.10462570,
          -25.23495865, -26.15161514, -25.66592407, -29.01112175, -29.58918571]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44354248,  0.93865776,  1.13033295]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0794 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.22183990, -23.66624069, -16.29309082, -19.27029610, -15.39398766,
         -19.13426781, -17.66785431, -19.55938721, -21.54466057, -23.50271797]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1067]; unstable size 1067; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 1067] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 1067] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1067] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 266] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72265244, 6.91143370, 0.00909689, 2.97993946, 2.78059340, 0.93534493,
         3.08999920, 4.73980522, 6.88012981]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0639 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [905]; unstable size 905; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 307, 1, 905] with unstable size 306 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 905] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 905] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [306]; unstable size 306; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 306] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 306] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.86118579,  2.95259523, -0.24725580,  1.06830430,  0.89491701,
          1.90242505,  0.80980372,  3.26965952,  2.34717941]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
         -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6466 seconds.
lower bounds for all target labels: [1.7263691425323486, 3.7013802528381348, 1.3063114881515503, 0.06207776069641113, 0.0006070137023925781, 1.0209213495254517, 1.0471153259277344, 2.8054380416870117, 4.934328079223633]
Number of cpus: 96  Number of subproblems: 0
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: []
start creating model mps for candidates: []
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.15029907, -24.19763947, -19.80143929, -20.63853264, -21.10856056,
          -19.26048470, -22.10736084, -21.32276344, -24.41694641, -23.30249786]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.54095459]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1365 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.521695137023926
alpha/beta optimization time: 1.4192068576812744
initial alpha-crown bounds: tensor([[ 1.94473159,  3.04444027, -0.17711711,  1.08993304,  0.95973682,
          1.94066250,  0.88277924,  3.39136481,  2.44516444]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.17711710929870605
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.7023 seconds.
lower bounds for all target labels: [1.944731593132019, 3.044440269470215, -0.17711710929870605, 1.0899330377578735, 0.9597368240356445, 1.9406625032424927, 0.8827792406082153, 3.391364812850952, 2.4451637268066406]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.27647304534912
Verifying property 0 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.391364812850952.

Properties batch 1, size 1
Remaining timeout: 197.84049701690674
Verifying property 1 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.044440269470215.

Properties batch 2, size 1
Remaining timeout: 197.73496651649475
Verifying property 2 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.445164442062378.

Properties batch 3, size 1
Remaining timeout: 197.63112711906433
Verifying property 3 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.944731593132019.

Properties batch 4, size 1
Remaining timeout: 197.53537845611572
Verifying property 4 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9406625032424927.

Properties batch 5, size 1
Remaining timeout: 197.41461873054504
Verifying property 5 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0899330377578735.

Properties batch 6, size 1
Remaining timeout: 197.28754043579102
Verifying property 6 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9597368240356445.

Properties batch 7, size 1
Remaining timeout: 197.16040134429932
Verifying property 7 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8827792406082153.

Properties batch 8, size 1
Remaining timeout: 197.05146980285645
Verifying property 8 with 1 instances.
##### Instance 104 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17711711]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.31546021, -24.12434387, -20.03258896, -20.35837746, -21.19475365,
        -18.88838959, -21.96802902, -21.15868759, -24.55088043, -23.12867355],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17711711]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 905
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 297
Node /15 input 0: size torch.Size([100]) unstable 22
-----------------
# of unstable neurons: 1224
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007193088531494141
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0585    transfer 0.0001    finalize 0.0002    func 0.0592    
Accumulated time: func 0.0592    prepare 0.0003    bound 0.0585    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 24] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 7] 
split level 6: [/input-12, 59] 
split level 7: [/input-12, 50] 
split level 8: [/input-8, 421] 
split level 9: [/input-8, 403] 
split level 10: [/input-8, 218] 
split level 11: [/input-8, 1709] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 1651] 
split level 14: [/input-8, 414] 
split level 15: [/input-8, 1636] 
split level 16: [/input-8, 220] 
split level 17: [/input-8, 1659] 
split level 18: [/input-8, 400] 
split level 19: [/input-8, 1684] 
split level 20: [/input-8, 410] 
split level 21: [/input-8, 725] 
split level 22: [/input-8, 1644] 
split level 23: [/input-8, 1971] 
split level 24: [/input-8, 232] 
split level 25: [/input-8, 1661] 
split level 26: [/input-8, 747] 
split level 27: [/input-8, 406] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1716] 
split level 30: [/input-8, 1949] 
split level 31: [/input-8, 217] 
split level 32: [/input-8, 233] 
split level 33: [/input, 1401] 
split level 34: [/input-8, 1972] 
split level 35: [/input-8, 930] 
split level 36: [/input-8, 415] 
split level 37: [/input-8, 430] 
split level 38: [/input-8, 210] 
split level 39: [/input-8, 1206] 
split level 40: [/input-12, 6] 
split level 41: [/input-8, 240] 
split level 42: [/input-8, 1365] 
split level 43: [/input-8, 225] 
split level 44: [/input-8, 408] 
split level 45: [/input-8, 1332] 
split level 46: [/input-8, 431] 
split level 47: [/input-8, 1388] 
split level 48: [/input-8, 423] 
split level 49: [/input-8, 980] 
split level 50: [/input-8, 424] 
split level 51: [/input-8, 241] 
split level 52: [/input-8, 202] 
split level 53: [/input-8, 1957] 
split level 54: [/input-8, 224] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1953] 
split level 57: [/input-8, 1198] 
split level 58: [/input-8, 1396] 
split level 59: [/input-8, 1650] 
split level 60: [/input-8, 248] 
split level 61: [/input-8, 1707] 
split level 62: [/input, 1385] 
split level 63: [/input-8, 1404] 
split level 64: [/input-8, 292] 
split level 65: [/input-8, 416] 
split level 66: [/input-8, 1395] 
split level 67: [/input-8, 1669] 
split level 68: [/input-8, 230] 
split level 69: [/input-8, 1973] 
split level 70: [/input-8, 309] 
split level 71: [/input-8, 216] 
split level 72: [/input-8, 1525] 
split level 73: [/input, 3557] 
split level 74: [/input-8, 1325] 
split level 75: [/input-8, 227] 
split level 76: [/input-8, 1658] 
split level 77: [/input-8, 212] 
split level 78: [/input-8, 236] 
split level 79: [/input-8, 271] 
split level 80: [/input-8, 1519] 
split level 81: [/input-8, 1978] 
split level 82: [/input-8, 16] 
split level 83: [/input-8, 249] 
split level 84: [/input-8, 214] 
split level 85: [/input-8, 1782] 
split level 86: [/input-8, 1961] 
split level 87: [/input-8, 811] 
split level 88: [/input-8, 963] 
split level 89: [/input-8, 209] 
split level 90: [/input-8, 1648] 
split level 91: [/input-8, 285] 
split level 92: [/input-8, 290] 
split level 93: [/input-8, 203] 
split level 94: [/input, 1406] 
split level 95: [/input-8, 244] 
split level 96: [/input, 2983] 
split level 97: [/input-8, 1100] 
split level 98: [/input-8, 1386] 
split level 99: [/input-8, 439] 
split level 100: [/input-8, 828] 
split level 101: [/input-8, 1497] 
split level 102: [/input-8, 912] 
split level 103: [/input-12, 56] 
split level 104: [/input, 2014] 
split level 105: [/input-8, 1621] 
split level 106: [/input-8, 286] 
split level 107: [/input, 1997] 
split level 108: [/input-8, 829] 
split level 109: [/input, 2013] 
split level 110: [/input, 2622] 
split level 111: [/input, 1998] 
split level 112: [/input, 1965] 
split level 113: [/input, 507] 
split level 114: [/input, 1332] 
split level 115: [/input, 2030] 
split level 116: [/input, 1421] 
split level 117: [/input-8, 1230] 
split level 118: [/input, 2684] 
split level 119: [/input-8, 1335] 
split level 120: [/input, 153] 
split level 121: [/input, 2869] 
split level 122: [/input, 1022] 
split level 123: [/input-8, 197] 
split level 124: [/input, 1980] 
split level 125: [/input, 1966] 
split level 126: [/input-8, 1690] 
split level 127: [/input-8, 196] 
split level 128: [/input-8, 397] 
split level 129: [/input-8, 946] 
split level 130: [/input, 509] 
split level 131: [/input, 68] 
split level 132: [/input, 124] 
split level 133: [/input, 2029] 
split level 134: [/input-8, 964] 
split level 135: [/input, 1996] 
split level 136: [/input, 2046] 
split level 137: [/input, 1434] 
split level 138: [/input, 1964] 
split level 139: [/input, 1316] 
split level 140: [/input-8, 1656] 
split level 141: [/input, 141] 
split level 142: [/input-8, 208] 
split level 143: [/input-8, 962] 
split level 144: [/input, 2666] 
split level 145: [/input, 1982] 
split level 146: [/input, 3150] 
split level 147: [/input, 117] 
split level 148: [/input, 1981] 
split level 149: [/input, 2028] 
split level 150: [/input, 2034] 
split level 151: [/input, 109] 
split level 152: [/input, 81] 
split level 153: [/input, 3406] 
split level 154: [/input, 65] 
split level 155: [/input, 2897] 
split level 156: [/input, 1732] 
split level 157: [/input, 1373] 
split level 158: [/input-8, 394] 
split level 159: [/input, 1006] 
split level 160: [/input, 142] 
split level 161: [/input, 1812] 
split level 162: [/input-8, 1262] 
split level 163: [/input, 2649] 
split level 164: [/input-8, 586] 
split level 165: [/input, 2673] 
split level 166: [/input, 98] 
split level 167: [/input, 122] 
split level 168: [/input, 113] 
split level 169: [/input, 2913] 
split level 170: [/input, 21] 
split level 171: [/input, 2012] 
split level 172: [/input, 731] 
split level 173: [/input, 2278] 
split level 174: [/input, 2008] 
split level 175: [/input, 123] 
split level 176: [/input, 1017] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 37] 
split level 179: [/input, 2644] 
split level 180: [/input-8, 636] 
split level 181: [/input, 790] 
split level 182: [/input-8, 1518] 
split level 183: [/input-8, 1552] 
split level 184: [/input, 2589] 
split level 185: [/input-8, 1640] 
split level 186: [/input, 84] 
split level 187: [/input, 3578] 
split level 188: [/input, 635] 
split level 189: [/input, 2045] 
split level 190: [/input, 23] 
split level 191: [/input, 36] 
split level 192: [/input, 2945] 
split level 193: [/input, 1979] 
split level 194: [/input, 2898] 
split level 195: [/input, 2753] 
split level 196: [/input, 2946] 
split level 197: [/input, 1723] 
split level 198: [/input, 2926] 
split level 199: [/input, 1328] 
Time: prepare 0.0072    bound 0.0999    transfer 0.0061    finalize 0.0050    func 0.1183    
Accumulated time: func 0.1775    prepare 0.0179    bound 0.1584    transfer 0.0062    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.24898648) min lb tensor(-0.17703009)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.013993978500366211 
BICCOS Cumulative time: 0.013993978500366211
Preprocessing time: 0.012340545654296875 Inference time: 0.0002448558807373047 Add cuts time: 0.0001239776611328125 Cut analysis time: 0.0012845993041992188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16366 (1), -0.16340 (1), -0.16283 (1), -0.16248 (1), -0.16180 (1), -0.16066 (1), -0.16018 (1), -0.16015 (1), -0.15940 (1), -0.15937 (1), -0.15912 (1), -0.15893 (1), -0.15881 (1), -0.15875 (1), -0.15875 (1), -0.15862 (1), -0.15845 (1), -0.15827 (1), -0.15796 (1), -0.15775 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5307    set_bounds 0.0118    solve 0.1184    add 0.1914    
Accumulated time: pickout 0.0004    decision 0.5307    set_bounds 0.0118    solve 0.1184    add 0.1914    
Current (lb-rhs): -0.16365647315979004
50 domains visited
Cumulative time: 0.9468169212341309

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 24] [/input-12, 8] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 1: [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13065528869628906

all verified at 6th iter
Time: prepare 0.0076    bound 0.0435    transfer 0.0010    finalize 0.0039    func 0.0587    
Accumulated time: func 0.2362    prepare 0.0257    bound 0.2019    transfer 0.0073    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.38207266) min lb tensor(0.00023103)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.038460731506347656 
BICCOS Cumulative time: 0.05245471000671387
Preprocessing time: 0.013818740844726562 Inference time: 0.01652050018310547 Add cuts time: 0.007468461990356445 Cut analysis time: 0.0006530284881591797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0029    decision 0.0208    set_bounds 0.0140    solve 0.0588    add 0.0170    
Accumulated time: pickout 0.0033    decision 0.5514    set_bounds 0.0257    solve 0.1773    add 0.2084    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.32575318e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.02129886e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.29804179e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 24]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.03496978e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03467559814453125

all verified at 0th iter
Time: prepare 0.0004    bound 0.0051    transfer 0.0002    finalize 0.0002    func 0.0060    
Accumulated time: func 0.2422    prepare 0.0261    bound 0.2071    transfer 0.0074    finalize 0.0093    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.5489 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [811]; unstable size 811; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 309, 1, 811] with unstable size 308 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 811] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 811] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [308]; unstable size 308; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 308] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 308] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.88940120,  0.17124438, -2.58539438, -1.63983202, -1.31378007,
         -1.55795729, -0.86024141, -1.02569294, -0.27762079]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.51308250, -22.43931961, -18.50501633, -19.17534065, -19.69705963,
         -19.25070381, -20.29491043, -19.66059494, -20.88692856, -21.50129509]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509],
         [-19.51308632, -22.43931770, -18.50501251, -19.17533684, -19.69705772,
          -19.25070381, -20.29491043, -19.66059494, -20.88693047, -21.50129509]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.14750862, -1.15558243, -0.48525810,  0.03646278, -0.40989113,
           0.63431549,  1.22633553,  1.84070015]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1258 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [794]; unstable size 794; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 794] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 794] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 794] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 220] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78699064,  3.17528534,  2.83466196,  2.43643284,  3.92167807,
          3.64071035,  3.01096869, -1.71907997,  0.30822122]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
         -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.87668610, -20.48638916, -25.85806274, -25.13366127, -24.85799789,
          -26.38156319, -26.31613541, -25.62492752, -20.27039146, -21.82055855]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21599770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.74126989,  0.74126989,  0.77301592,  ...,  0.36031753,
             0.31269848,  0.28095245],
           [ 0.72539687,  0.70952386,  0.74126989,  ...,  0.32857150,
             0.29682547,  0.24920642],
           [ 0.70952386,  0.70952386,  0.72539687,  ...,  0.34444451,
             0.31269848,  0.28095245],
           ...,
           [-0.89365077, -0.89365077, -0.87777776,  ..., -1.43333328,
            -1.30634916, -1.22698402],
           [-0.95714283, -0.94126981, -0.90952379,  ..., -1.33809519,
            -1.24285710, -1.22698402],
           [-1.00476182, -0.94126981, -0.94126981,  ..., -1.24285710,
            -1.21111107, -1.19523799]],

          [[ 0.99838978,  0.99838978,  1.03059590,  ...,  0.67632860,
             0.62801939,  0.59581327],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.64412248,
             0.59581327,  0.56360716],
           [ 0.96618366,  0.96618366,  0.99838978,  ...,  0.61191636,
             0.57971025,  0.53140104],
           ...,
           [-0.78904986, -0.80515295, -0.78904986,  ..., -1.35265696,
            -1.22383249, -1.14331722],
           [-0.86956519, -0.85346210, -0.82125598,  ..., -1.25603855,
            -1.15942025, -1.14331722],
           [-0.90177131, -0.85346210, -0.85346210,  ..., -1.14331722,
            -1.12721407, -1.11111104]],

          [[ 1.21589243,  1.18590748,  1.18590748,  ...,  0.90104967,
             0.87106466,  0.84107965],
           [ 1.18590748,  1.15592217,  1.14092970,  ...,  0.87106466,
             0.84107965,  0.79610211],
           [ 1.15592217,  1.12593722,  1.09595215,  ...,  0.82608712,
             0.79610211,  0.76611710],
           ...,
           [-0.58320838, -0.59820086, -0.58320838,  ..., -1.13793111,
            -1.01799107, -0.94302845],
           [-0.68815589, -0.65817088, -0.64317840,  ..., -1.09295356,
            -0.97301346, -0.92803597],
           [-0.73313338, -0.67316341, -0.67316341,  ..., -1.01799107,
            -0.94302845, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0582 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.65453911, -28.29750824, -25.45104980, -28.11194038, -25.15310860,
         -28.19610023, -28.02035522, -26.93565750, -23.93723679, -27.98169518]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [701]; unstable size 701; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 241, 1, 701] with unstable size 240 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 701] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 701] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [240]; unstable size 240; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 240] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 240] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.39394474, 1.70092034, 3.99040174, 1.13504958, 3.87649202, 3.90128279,
         2.66181850, 0.08498091, 3.97777319]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [800]; unstable size 800; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 364, 1, 800] with unstable size 363 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 800] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 800] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [363]; unstable size 363; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 363] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 363] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.67310381,  1.51413083, -0.13763952, -0.79897356,  0.29746610,
         -1.22556412,  0.01225722,  2.61003351,  1.46175098]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.15261269, -17.94160461, -14.95448303, -13.92990398, -14.40570259,
         -14.65692043, -13.89788246, -15.86449909, -18.80389977, -17.83309364]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174],
         [-17.15261078, -17.94160461, -14.95448208, -13.92990494, -14.40570354,
          -14.65692043, -13.89788151, -15.86450100, -18.80390167, -17.83309174]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.02457714,  0.47579861, -0.03202343]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0852 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.79030228, -30.41434669, -27.64798355, -28.61847115, -28.48152161,
         -29.57408333, -29.43395233, -30.51341820, -29.47771645, -30.12065697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 497] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 497] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 139] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.35675859, 3.17424965, 3.96514440, 3.89233947, 4.75903225, 4.93405819,
         5.60336399, 4.77322054, 5.42915201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0667 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93199348, -23.69929504, -17.71457291, -17.07846260, -17.30852318,
         -18.18094444, -14.50052071, -20.42077255, -23.73473549, -24.23317528]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 358, 1, 523] with unstable size 357 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [357]; unstable size 357; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 357] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 357] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54994011, 6.75454903, 1.88174200, 1.26384282, 1.37097144, 2.10497618,
         3.85746646, 6.81311607, 7.42777729]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [707]; unstable size 707; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 707] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 707] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 707] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 285] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.54880261,  4.78813887, -0.27670097,  2.23500395,  2.02165794,
          1.09089065,  1.08386612,  4.23047352,  4.55613422]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
         -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.40it/s]100%|██████████| 1/1 [00:00<00:00,  7.39it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.62423515, -22.64641190, -16.24180603, -18.99898338, -15.90926933,
          -18.73514366, -18.09658813, -18.31100082, -22.13391876, -22.22410011]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33253670]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1384 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.334932327270508
alpha/beta optimization time: 1.396240234375
initial alpha-crown bounds: tensor([[ 2.69250298,  4.96834612, -0.15371263,  2.31067252,  2.06917858,
          1.21068370,  1.12954354,  4.43741512,  4.67030334]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.15371263027191162
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6438 seconds.
lower bounds for all target labels: [2.692502975463867, 4.968346118927002, -0.15371263027191162, 2.3106725215911865, 2.069178581237793, 1.2106837034225464, 1.1295435428619385, 4.43741512298584, 4.6703033447265625]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.30678868293762
Verifying property 0 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.968346118927002.

Properties batch 1, size 1
Remaining timeout: 198.06018614768982
Verifying property 1 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.6703033447265625.

Properties batch 2, size 1
Remaining timeout: 197.94058418273926
Verifying property 2 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.43741512298584.

Properties batch 3, size 1
Remaining timeout: 197.85472130775452
Verifying property 3 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.692502975463867.

Properties batch 4, size 1
Remaining timeout: 197.77195811271667
Verifying property 4 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3106725215911865.

Properties batch 5, size 1
Remaining timeout: 197.6717803478241
Verifying property 5 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.069178581237793.

Properties batch 6, size 1
Remaining timeout: 197.58724975585938
Verifying property 6 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2106837034225464.

Properties batch 7, size 1
Remaining timeout: 197.504563331604
Verifying property 7 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1295435428619385.

Properties batch 8, size 1
Remaining timeout: 197.41492772102356
Verifying property 8 with 1 instances.
##### Instance 111 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.15371263]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.98239326, -22.89222527, -16.59890175, -19.05320930, -15.75452042,
        -18.76253128, -18.17463303, -18.00091171, -22.45012093, -22.38698578],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15371263]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 707
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 281
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1014
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008347034454345703
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0623    transfer 0.0001    finalize 0.0002    func 0.0629    
Accumulated time: func 0.0629    prepare 0.0003    bound 0.0623    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 24] 
split level 4: [/input-12, 6] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 32] 
split level 9: [/input-8, 1700] 
split level 10: [/input-12, 38] 
split level 11: [/input-8, 1701] 
split level 12: [/input-12, 49] 
split level 13: [/input-8, 1628] 
split level 14: [/input-8, 929] 
split level 15: [/input-8, 1627] 
split level 16: [/input-8, 1630] 
split level 17: [/input-8, 476] 
split level 18: [/input-12, 7] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 930] 
split level 21: [/input-8, 939] 
split level 22: [/input-8, 1637] 
split level 23: [/input-8, 474] 
split level 24: [/input-12, 57] 
split level 25: [/input-8, 1622] 
split level 26: [/input-8, 468] 
split level 27: [/input-8, 1261] 
split level 28: [/input-8, 795] 
split level 29: [/input-8, 1638] 
split level 30: [/input-8, 484] 
split level 31: [/input-8, 285] 
split level 32: [/input-8, 490] 
split level 33: [/input-8, 577] 
split level 34: [/input-8, 1614] 
split level 35: [/input-8, 1710] 
split level 36: [/input-8, 1708] 
split level 37: [/input-8, 1678] 
split level 38: [/input-8, 1970] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 1957] 
split level 41: [/input-8, 794] 
split level 42: [/input-8, 1053] 
split level 43: [/input-8, 788] 
split level 44: [/input-8, 596] 
split level 45: [/input-8, 1260] 
split level 46: [/input-8, 1684] 
split level 47: [/input-8, 1958] 
split level 48: [/input-8, 1716] 
split level 49: [/input-8, 1717] 
split level 50: [/input-8, 274] 
split level 51: [/input-8, 1949] 
split level 52: [/input-8, 1922] 
split level 53: [/input-8, 1035] 
split level 54: [/input-8, 90] 
split level 55: [/input-8, 492] 
split level 56: [/input-8, 1259] 
split level 57: [/input-8, 1052] 
split level 58: [/input-8, 1250] 
split level 59: [/input-8, 949] 
split level 60: [/input-8, 1713] 
split level 61: [/input-8, 1338] 
split level 62: [/input-8, 1262] 
split level 63: [/input-8, 1337] 
split level 64: [/input-8, 604] 
split level 65: [/input-8, 1313] 
split level 66: [/input-8, 460] 
split level 67: [/input-8, 401] 
split level 68: [/input-8, 1978] 
split level 69: [/input-8, 1643] 
split level 70: [/input-8, 422] 
split level 71: [/input-8, 1633] 
split level 72: [/input-8, 1617] 
split level 73: [/input-8, 1578] 
split level 74: [/input-8, 798] 
split level 75: [/input-8, 423] 
split level 76: [/input-8, 1659] 
split level 77: [/input-8, 108] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1030] 
split level 80: [/input-8, 1951] 
split level 81: [/input-8, 493] 
split level 82: [/input-8, 1292] 
split level 83: [/input-8, 51] 
split level 84: [/input-8, 828] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 1305] 
split level 87: [/input-8, 1623] 
split level 88: [/input-8, 811] 
split level 89: [/input-8, 98] 
split level 90: [/input-8, 829] 
split level 91: [/input-8, 1721] 
split level 92: [/input, 1163] 
split level 93: [/input-8, 413] 
split level 94: [/input-8, 45] 
split level 95: [/input-8, 330] 
split level 96: [/input, 183] 
split level 97: [/input-8, 50] 
split level 98: [/input-8, 505] 
split level 99: [/input-8, 82] 
split level 100: [/input-8, 1932] 
split level 101: [/input-8, 441] 
split level 102: [/input-8, 106] 
split level 103: [/input-8, 365] 
split level 104: [/input-8, 905] 
split level 105: [/input-8, 402] 
split level 106: [/input-8, 1615] 
split level 107: [/input-8, 830] 
split level 108: [/input-8, 1754] 
split level 109: [/input-8, 1595] 
split level 110: [/input-8, 1606] 
split level 111: [/input-8, 1712] 
split level 112: [/input-8, 627] 
split level 113: [/input, 1416] 
split level 114: [/input-8, 812] 
split level 115: [/input, 185] 
split level 116: [/input-8, 1646] 
split level 117: [/input-8, 498] 
split level 118: [/input-8, 1334] 
split level 119: [/input-8, 793] 
split level 120: [/input-8, 941] 
split level 121: [/input, 184] 
split level 122: [/input-8, 372] 
split level 123: [/input, 2949] 
split level 124: [/input, 2951] 
split level 125: [/input-8, 116] 
split level 126: [/input, 152] 
split level 127: [/input, 186] 
split level 128: [/input-8, 1609] 
split level 129: [/input, 3005] 
split level 130: [/input, 2504] 
split level 131: [/input-8, 446] 
split level 132: [/input, 3021] 
split level 133: [/input-8, 137] 
split level 134: [/input, 1435] 
split level 135: [/input-8, 958] 
split level 136: [/input-8, 1654] 
split level 137: [/input, 2475] 
split level 138: [/input-8, 777] 
split level 139: [/input-8, 1736] 
split level 140: [/input-8, 306] 
split level 141: [/input, 138] 
split level 142: [/input-8, 1762] 
split level 143: [/input, 1180] 
split level 144: [/input-8, 104] 
split level 145: [/input, 1607] 
split level 146: [/input-8, 1607] 
split level 147: [/input-8, 1297] 
split level 148: [/input, 1514] 
split level 149: [/input, 2440] 
split level 150: [/input, 151] 
split level 151: [/input-8, 1265] 
split level 152: [/input, 2489] 
split level 153: [/input, 2474] 
split level 154: [/input-8, 115] 
split level 155: [/input, 2491] 
split level 156: [/input-8, 117] 
split level 157: [/input, 3019] 
split level 158: [/input-8, 21] 
split level 159: [/input-8, 1251] 
split level 160: [/input, 3541] 
split level 161: [/input, 2522] 
split level 162: [/input-8, 1603] 
split level 163: [/input-8, 1108] 
split level 164: [/input-8, 447] 
split level 165: [/input-12, 36] 
split level 166: [/input, 2217] 
split level 167: [/input-8, 97] 
split level 168: [/input, 494] 
split level 169: [/input-8, 22] 
split level 170: [/input, 88] 
split level 171: [/input-8, 1746] 
split level 172: [/input-8, 1624] 
split level 173: [/input, 1015] 
split level 174: [/input-8, 500] 
split level 175: [/input, 217] 
split level 176: [/input, 199] 
split level 177: [/input, 2487] 
split level 178: [/input, 3301] 
split level 179: [/input, 2248] 
split level 180: [/input, 2408] 
split level 181: [/input, 1317] 
split level 182: [/input-8, 1027] 
split level 183: [/input-8, 956] 
split level 184: [/input, 2183] 
split level 185: [/input, 2455] 
split level 186: [/input, 3052] 
split level 187: [/input, 232] 
split level 188: [/input-8, 452] 
split level 189: [/input-8, 126] 
split level 190: [/input, 2792] 
split level 191: [/input, 1014] 
split level 192: [/input, 3038] 
split level 193: [/input, 1195] 
split level 194: [/input, 2791] 
split level 195: [/input, 1515] 
split level 196: [/input, 2250] 
split level 197: [/input-12, 92] 
split level 198: [/input, 2153] 
split level 199: [/input-8, 908] 
Time: prepare 0.0066    bound 0.1201    transfer 0.0231    finalize 0.0072    func 0.1571    
Accumulated time: func 0.2200    prepare 0.0173    bound 0.1824    transfer 0.0232    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.17703781) min lb tensor(-0.15360188)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.015389204025268555 
BICCOS Cumulative time: 0.015389204025268555
Preprocessing time: 0.013411283493041992 Inference time: 0.0004153251647949219 Add cuts time: 0.00011682510375976562 Cut analysis time: 0.001445770263671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13946 (1), -0.13899 (1), -0.13871 (1), -0.13871 (1), -0.13858 (1), -0.13771 (1), -0.13699 (1), -0.13661 (1), -0.13640 (1), -0.13609 (1), -0.13552 (1), -0.13469 (1), -0.13451 (1), -0.13432 (1), -0.13412 (1), -0.13407 (1), -0.13332 (1), -0.13254 (1), -0.13219 (1), -0.13146 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5790    set_bounds 0.0174    solve 0.1572    add 0.1512    
Accumulated time: pickout 0.0004    decision 0.5790    set_bounds 0.0174    solve 0.1572    add 0.1512    
Current (lb-rhs): -0.13945651054382324
50 domains visited
Cumulative time: 1.0049021244049072

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13810324668884277
10 lb beta sum: 0.730224072933197, worst -0.0608198344707489
Time: prepare 0.0075    bound 0.1405    transfer 0.0008    finalize 0.0043    func 0.1561    
Accumulated time: func 0.3761    prepare 0.0253    bound 0.3229    transfer 0.0240    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.29600072) min lb tensor(-0.06070578)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.03464865684509277 
BICCOS Cumulative time: 0.05003786087036133
Preprocessing time: 0.01879262924194336 Inference time: 0.01109004020690918 Add cuts time: 0.003601551055908203 Cut analysis time: 0.0011644363403320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01174 (2), -0.01157 (2), -0.01129 (2), -0.01123 (2), -0.01109 (2), -0.01104 (2), -0.01089 (2), -0.01070 (2), -0.01060 (2), -0.01046 (2), -0.00998 (2), -0.00978 (2), -0.00953 (2), -0.00942 (2), -0.00933 (2), -0.00930 (2), -0.00913 (2), -0.00885 (2), -0.00848 (2), -0.00830 (2), 
Length of domains: 50
Time: pickout 0.0088    decision 0.0246    set_bounds 0.0146    solve 0.1562    add 0.2539    
Accumulated time: pickout 0.0093    decision 0.6036    set_bounds 0.0320    solve 0.3135    add 0.4051    
Current (lb-rhs): -0.011741280555725098
100 domains visited
Cumulative time: 1.5018763542175293

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 3: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 49] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.108681321144104

all verified at 6th iter
Time: prepare 0.0079    bound 0.0561    transfer 0.0009    finalize 0.0034    func 0.0708    
Accumulated time: func 0.4469    prepare 0.0335    bound 0.3790    transfer 0.0249    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.24588972) min lb tensor(0.04230961)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04705166816711426 
BICCOS Cumulative time: 0.09708952903747559
Preprocessing time: 0.014730691909790039 Inference time: 0.017733097076416016 Add cuts time: 0.013796329498291016 Cut analysis time: 0.0007915496826171875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0116    decision 0.0226    set_bounds 0.0182    solve 0.0709    add 0.0224    
Accumulated time: pickout 0.0208    decision 0.6262    set_bounds 0.0502    solve 0.3844    add 0.4276    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.22077867e-01, 2.36569747e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.22077867e-01, 6.10365123e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.25405714e-01, 2.34755784e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.25405714e-01, 6.15426749e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.22245595e-01, 2.38444969e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.22245595e-01, 6.19615763e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.25943348e-01, 2.36674681e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49, 32,  8]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.25943348e-01, 6.14446849e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09815073013305664

all verified at 2th iter
Time: prepare 0.0005    bound 0.0183    transfer 0.0003    finalize 0.0002    func 0.0194    
Accumulated time: func 0.4663    prepare 0.0340    bound 0.3972    transfer 0.0252    finalize 0.0152    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.7426 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 654] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 654] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.94611096,  1.33183837,  1.31211519,  0.27194262,  2.35654354,
          1.27423763,  2.06728649,  0.98784995, -0.88770485]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.02572250, -27.23712921, -27.95742416, -26.55063438, -28.86597252,
         -27.63702202, -28.59363937, -27.52897644, -25.43346977, -24.92130852]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-27.50359154, -27.88374138, -28.51186180, -27.05513573, -29.40580559,
          -28.19179726, -29.20458603, -28.14871597, -25.54721451, -25.68577957]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13856506]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0097 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1857 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [904]; unstable size 904; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 904] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 904] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 904] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 246] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46684694,  3.44482780,  0.77367628,  1.71358061, -0.53734136,
          2.20122457,  1.18286538,  4.27326107,  2.94509697]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
         -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.26823807, -20.68097305, -17.33302307, -15.71412659, -18.33230782,
          -15.48265743, -18.94750595, -17.71434212, -21.22698212, -20.08721161]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23146915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.03265953, -29.80158615, -28.01462746, -29.49231339, -27.82477570,
         -29.74157143, -29.00487137, -29.65236473, -26.56688309, -30.04109955]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 952] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 952] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.56631374, 3.00716305, 4.34157372, 2.61966324, 4.48081493, 3.68361425,
         4.35380077, 1.53697228, 5.00381374]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0338 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-18.37767220, -22.63599205, -16.68470383, -17.56246567, -14.84348488,
         -17.98977852, -17.40301132, -16.78604507, -20.68542862, -22.37132454]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [762]; unstable size 762; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 332, 1, 762] with unstable size 331 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 762] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 762] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [331]; unstable size 331; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 331] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 331] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.03614426, 5.42467785, 1.01491499, 1.54336715, 1.87700105, 1.22836065,
         1.06106329, 4.09441233, 4.97289801]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0466 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.56104851, -25.43757248, -22.30799866, -20.47185135, -22.67837715,
         -19.94359779, -23.14790916, -21.03846169, -23.14024353, -23.94003487]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [756]; unstable size 756; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 262, 1, 756] with unstable size 261 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 756] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 756] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [261]; unstable size 261; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 261] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01937962, 3.41801023, 1.25207281, 0.18682456, 1.56868887, 2.03725863,
         0.10003185, 1.46886134, 2.03972745]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.62328815, -18.18186188, -18.71482468, -19.00971794, -17.99854279,
         -20.46262550, -20.13095474, -20.09570503, -10.99292850, -16.95243645]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [626]; unstable size 626; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 626] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 626] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 626] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 200] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.72617173, 5.95293808, 6.50314236, 6.90349817, 5.91612148, 8.26207638,
         7.94433451, 7.78404760, 4.84170914]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0250 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57911682, -18.01341438, -21.32861328, -22.58253288, -23.55420685,
         -22.23183250, -24.82959557, -22.38050079, -21.57038307, -21.39789391]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 445] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 445] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 172] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.14326215, 1.50191164, 2.99028349, 3.75916862, 2.42487907, 5.00067997,
         2.60955667, 1.96376419, 2.50974631]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0352 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [875]; unstable size 875; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 356, 1, 875] with unstable size 355 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 875] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 875] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [355]; unstable size 355; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 355] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 355] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.85499263,  3.47037888, -0.90604115, -0.95058942, -0.23341933,
         -0.53099966, -0.42522985,  1.47124863,  1.91838467]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.73344231, -25.29462242, -19.50235748, -18.98530388, -19.31733131,
         -19.14581299, -19.42850494, -19.97113991, -22.87136459, -23.31713867]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.94274139, -25.66132355, -19.52083969, -19.54301643, -19.51924324,
          -19.72516251, -19.77233505, -20.36951065, -23.25295830, -23.81954956],
         [-21.94274139, -25.66132355, -19.52083969, -19.54301643, -19.51924324,
          -19.72516251, -19.77233505, -20.36951065, -23.25295830, -23.81954956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.02217674, -0.02377319,  0.18214607,  0.22931862,  0.82649422]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0156 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0887 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [867]; unstable size 867; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 867] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 867] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 867] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 165] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.32720089, -0.10789108,  0.04068542,  2.53268123,  0.74327826,
          2.51675296,  1.46775699,  8.13148308,  8.55004883]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
         -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.50it/s]100%|██████████| 1/1 [00:00<00:00,  7.49it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-35.14986801, -45.41040802, -35.38068390, -35.74518204, -38.33306503,
          -36.46290207, -38.23206711, -37.45825958, -43.79046249, -44.53758621]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23081589]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1364 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.40303421020508
alpha/beta optimization time: 1.3953425884246826
initial alpha-crown bounds: tensor([[ 9.34874249, -0.09103346,  0.06384540,  2.55859995,  0.76943398,
          2.53152847,  1.50653601,  8.14646816,  8.56891346]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.0910334587097168
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6543 seconds.
lower bounds for all target labels: [9.348742485046387, -0.0910346508026123, 0.06384611129760742, 2.5585994720458984, 0.7694344520568848, 2.5315279960632324, 1.5065357685089111, 8.146465301513672, 8.5689115524292]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [1]
start creating model mps for candidates: ['lay/16_1']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3010070323944
Verifying property 0 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 9.348742485046387.

Properties batch 1, size 1
Remaining timeout: 198.05726981163025
Verifying property 1 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.568913459777832.

Properties batch 2, size 1
Remaining timeout: 197.95524978637695
Verifying property 2 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 8.146468162536621.

Properties batch 3, size 1
Remaining timeout: 197.8643798828125
Verifying property 3 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5585999488830566.

Properties batch 4, size 1
Remaining timeout: 197.75772762298584
Verifying property 4 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5315284729003906.

Properties batch 5, size 1
Remaining timeout: 197.66803765296936
Verifying property 5 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5065360069274902.

Properties batch 6, size 1
Remaining timeout: 197.57851004600525
Verifying property 6 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7694339752197266.

Properties batch 7, size 1
Remaining timeout: 197.48828983306885
Verifying property 7 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.06384539604187012.

Properties batch 8, size 1
Remaining timeout: 197.3967137336731
Verifying property 8 with 1 instances.
##### Instance 120 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09103346]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.14804459, -45.50294495, -35.78569031, -36.05693054, -38.71368027,
        -36.82321548, -38.53306961, -37.81744385, -43.85329437, -44.71561813],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09103346]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 867
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 10
-----------------
# of unstable neurons: 1036
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006108283996582031
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0589    transfer 0.0001    finalize 0.0002    func 0.0595    
Accumulated time: func 0.0595    prepare 0.0003    bound 0.0589    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 5] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 59] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 90] 
split level 7: [/input-8, 217] 
split level 8: [/input-8, 225] 
split level 9: [/input-8, 226] 
split level 10: [/input-8, 1835] 
split level 11: [/input-8, 209] 
split level 12: [/input-8, 1188] 
split level 13: [/input-8, 233] 
split level 14: [/input-8, 1815] 
split level 15: [/input-8, 1029] 
split level 16: [/input-8, 234] 
split level 17: [/input-8, 1817] 
split level 18: [/input-8, 241] 
split level 19: [/input-8, 201] 
split level 20: [/input-8, 239] 
split level 21: [/input-8, 803] 
split level 22: [/input-8, 250] 
split level 23: [/input-8, 1371] 
split level 24: [/input, 3124] 
split level 25: [/input, 648] 
split level 26: [/input, 477] 
split level 27: [/input-8, 249] 
split level 28: [/input, 631] 
split level 29: [/input-8, 1834] 
split level 30: [/input-8, 428] 
split level 31: [/input-8, 1816] 
split level 32: [/input-8, 1826] 
split level 33: [/input-8, 247] 
split level 34: [/input, 3242] 
split level 35: [/input, 953] 
split level 36: [/input, 969] 
split level 37: [/input-8, 253] 
split level 38: [/input-8, 1847] 
split level 39: [/input-8, 902] 
split level 40: [/input-8, 635] 
split level 41: [/input-8, 508] 
split level 42: [/input, 3256] 
split level 43: [/input, 1002] 
split level 44: [/input, 917] 
split level 45: [/input-8, 901] 
split level 46: [/input-8, 634] 
split level 47: [/input, 933] 
split level 48: [/input-8, 60] 
split level 49: [/input, 3272] 
split level 50: [/input-8, 1808] 
split level 51: [/input-8, 1844] 
split level 52: [/input-8, 181] 
split level 53: [/input, 2907] 
split level 54: [/input-8, 202] 
split level 55: [/input, 3257] 
split level 56: [/input-8, 507] 
split level 57: [/input, 1004] 
split level 58: [/input-8, 586] 
split level 59: [/input-8, 576] 
split level 60: [/input, 3016] 
split level 61: [/input, 3052] 
split level 62: [/input-8, 246] 
split level 63: [/input, 3105] 
split level 64: [/input-8, 1622] 
split level 65: [/input-8, 192] 
split level 66: [/input-8, 235] 
split level 67: [/input, 3022] 
split level 68: [/input, 3676] 
split level 69: [/input, 2215] 
split level 70: [/input-8, 1379] 
split level 71: [/input, 919] 
split level 72: [/input, 3692] 
split level 73: [/input-8, 821] 
split level 74: [/input, 2600] 
split level 75: [/input, 3691] 
split level 76: [/input, 2263] 
split level 77: [/input, 2248] 
split level 78: [/input, 230] 
split level 79: [/input, 3006] 
split level 80: [/input-8, 1800] 
split level 81: [/input-8, 2004] 
split level 82: [/input, 2520] 
split level 83: [/input, 3496] 
split level 84: [/input-8, 911] 
split level 85: [/input-8, 452] 
split level 86: [/input-8, 193] 
split level 87: [/input, 2247] 
split level 88: [/input, 3379] 
split level 89: [/input, 3273] 
split level 90: [/input, 2199] 
split level 91: [/input, 2231] 
split level 92: [/input, 2844] 
split level 93: [/input, 3051] 
split level 94: [/input, 3287] 
split level 95: [/input, 229] 
split level 96: [/input, 2615] 
split level 97: [/input, 216] 
split level 98: [/input, 2519] 
split level 99: [/input, 3122] 
split level 100: [/input, 228] 
split level 101: [/input-8, 943] 
split level 102: [/input-8, 1833] 
split level 103: [/input, 2631] 
split level 104: [/input-8, 1843] 
split level 105: [/input, 2517] 
split level 106: [/input, 3268] 
split level 107: [/input, 614] 
split level 108: [/input, 2261] 
split level 109: [/input, 1336] 
split level 110: [/input, 2535] 
split level 111: [/input, 301] 
split level 112: [/input-8, 1596] 
split level 113: [/input, 199] 
split level 114: [/input, 222] 
split level 115: [/input, 699] 
split level 116: [/input, 227] 
split level 117: [/input-8, 205] 
split level 118: [/input, 2486] 
split level 119: [/input, 200] 
split level 120: [/input, 231] 
split level 121: [/input, 2616] 
split level 122: [/input, 214] 
split level 123: [/input-8, 1825] 
split level 124: [/input, 212] 
split level 125: [/input, 2471] 
split level 126: [/input-8, 190] 
split level 127: [/input, 3300] 
split level 128: [/input, 2244] 
split level 129: [/input-8, 506] 
split level 130: [/input, 213] 
split level 131: [/input, 2198] 
split level 132: [/input, 2265] 
split level 133: [/input, 232] 
split level 134: [/input, 215] 
split level 135: [/input, 2230] 
split level 136: [/input, 2502] 
split level 137: [/input, 1963] 
split level 138: [/input, 653] 
split level 139: [/input, 2213] 
split level 140: [/input, 2246] 
split level 141: [/input, 206] 
split level 142: [/input, 2232] 
split level 143: [/input, 2843] 
split level 144: [/input, 3121] 
split level 145: [/input, 3579] 
split level 146: [/input, 2534] 
split level 147: [/input, 715] 
split level 148: [/input, 2280] 
split level 149: [/input, 2277] 
split level 150: [/input, 2846] 
split level 151: [/input-8, 951] 
split level 152: [/input, 177] 
split level 153: [/input, 1964] 
split level 154: [/input-8, 1848] 
split level 155: [/input, 3301] 
split level 156: [/input, 2542] 
split level 157: [/input, 843] 
split level 158: [/input, 331] 
split level 159: [/input, 2845] 
split level 160: [/input, 217] 
split level 161: [/input, 3580] 
split level 162: [/input, 1979] 
split level 163: [/input, 198] 
split level 164: [/input, 2228] 
split level 165: [/input, 193] 
split level 166: [/input, 3675] 
split level 167: [/input, 3578] 
split level 168: [/input, 226] 
split level 169: [/input, 1833] 
split level 170: [/input, 196] 
split level 171: [/input, 2501] 
split level 172: [/input, 3380] 
split level 173: [/input, 238] 
split level 174: [/input, 210] 
split level 175: [/input, 2485] 
split level 176: [/input, 184] 
split level 177: [/input, 183] 
split level 178: [/input, 1948] 
split level 179: [/input, 46] 
split level 180: [/input, 1811] 
split level 181: [/input, 197] 
split level 182: [/input, 3708] 
split level 183: [/input, 2521] 
split level 184: [/input, 3383] 
split level 185: [/input, 1862] 
split level 186: [/input, 683] 
split level 187: [/input, 195] 
split level 188: [/input, 2455] 
split level 189: [/input, 3299] 
split level 190: [/input, 27] 
split level 191: [/input, 537] 
split level 192: [/input, 194] 
split level 193: [/input, 598] 
split level 194: [/input, 3581] 
split level 195: [/input, 28] 
split level 196: [/input, 29] 
split level 197: [/input, 2059] 
split level 198: [/input, 3577] 
split level 199: [/input, 536] 
Time: prepare 0.0067    bound 0.1112    transfer 0.0353    finalize 0.0082    func 0.1617    
Accumulated time: func 0.2212    prepare 0.0177    bound 0.1700    transfer 0.0354    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.13613558) min lb tensor(-0.09093833)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01708197593688965 
BICCOS Cumulative time: 0.01708197593688965
Preprocessing time: 0.014972209930419922 Inference time: 0.0003707408905029297 Add cuts time: 0.00014209747314453125 Cut analysis time: 0.0015969276428222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08741 (1), -0.08731 (1), -0.08717 (1), -0.08697 (1), -0.08685 (1), -0.08680 (1), -0.08672 (1), -0.08632 (1), -0.08619 (1), -0.08608 (1), -0.08579 (1), -0.08555 (1), -0.08544 (1), -0.08543 (1), -0.08529 (1), -0.08499 (1), -0.08465 (1), -0.08457 (1), -0.08454 (1), -0.08446 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5715    set_bounds 0.0229    solve 0.1621    add 0.2256    
Accumulated time: pickout 0.0005    decision 0.5715    set_bounds 0.0229    solve 0.1621    add 0.2256    
Current (lb-rhs): -0.08740806579589844
50 domains visited
Cumulative time: 1.0840191841125488

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 50] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] [/input-12, 5] 
split level 1: [/input-12, 42] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] [/input-12, 50] 
split level 2: [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 59] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07099127769470215
10 lb beta sum: 0.4434264898300171, worst -0.003885120153427124

all verified at 13th iter
Time: prepare 0.0081    bound 0.1026    transfer 0.0011    finalize 0.0038    func 0.1183    
Accumulated time: func 0.3394    prepare 0.0262    bound 0.2726    transfer 0.0365    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.28336847) min lb tensor(0.00103855)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03884720802307129 
BICCOS Cumulative time: 0.05592918395996094
Preprocessing time: 0.014000177383422852 Inference time: 0.015722990036010742 Add cuts time: 0.007843732833862305 Cut analysis time: 0.0012803077697753906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0063    decision 0.0256    set_bounds 0.0163    solve 0.1184    add 0.0181    
Accumulated time: pickout 0.0067    decision 0.5971    set_bounds 0.0392    solve 0.2805    add 0.2437    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.36446664e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 5.22401780e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.22717091e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59,  5]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.13031849e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.003376007080078125

all verified at 1th iter
Time: prepare 0.0003    bound 0.0141    transfer 0.0002    finalize 0.0002    func 0.0149    
Accumulated time: func 0.3543    prepare 0.0265    bound 0.2867    transfer 0.0367    finalize 0.0124    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.3875 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40458870, -23.24298668, -27.73333549, -27.90799141, -27.40376663,
         -28.05864906, -28.91640854, -27.54826736, -27.30009651, -25.52873611]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [684]; unstable size 684; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 684] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 684] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 684] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 285] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.35218525, 2.28642654, 2.51820374, 1.68908215, 2.53085232, 3.30504608,
         2.17191410, 2.28330183, 1.35116124]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1597 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 206, 1, 595] with unstable size 205 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 595] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [205]; unstable size 205; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 205] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 205] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.96349525,  1.88203335,  2.57148838,  2.24077988,  2.77335358,
          4.53415489,  2.59828901, -0.94698799,  1.90783048]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.14629936, -20.71539307, -24.46714020, -24.97179604, -24.83234215,
         -25.31670189, -27.17220497, -25.32540894, -20.97597122, -23.65787697]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.84978294, -20.93986130, -24.20811844, -24.78613472, -24.63944435,
          -25.15346718, -27.01600456, -25.25593185, -20.52700806, -23.77411842]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.41285324]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0534 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [448]; unstable size 448; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 448] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 448] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 448] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 263] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.72115159,  3.32613230,  0.34109974,  2.45504904,  2.08227682,
          2.35139227,  1.41229248,  3.91198707,  5.09997892]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
         -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-30.12747383, -35.12327194, -32.50504303, -34.70817566, -34.61371613,
          -34.77191544, -33.63956833, -36.66131973, -30.60513496, -36.99544525]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.47766113]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-3.53968143e-01, -6.82538673e-02, -3.65078375e-02,  ...,
             1.11112073e-02, -2.11111009e-01, -5.23808524e-02],
           [-1.15872920e-01, -1.47618949e-01, -1.63491964e-01,  ...,
            -5.23808524e-02, -3.69841158e-01, -1.63491964e-01],
           [-2.42857039e-01, -1.15872920e-01, -2.26984024e-01,  ...,
             1.22222304e-01,  2.49206424e-01, -2.42857039e-01],
           ...,
           [ 1.22222304e-01,  4.28572372e-02,  2.65079439e-01,  ...,
            -7.03174591e-01, -2.11111009e-01, -2.26984024e-01],
           [ 1.53968334e-01,  3.76190543e-01, -2.26984024e-01,  ...,
            -4.17460203e-01, -4.80952382e-01, -2.26984024e-01],
           [ 3.44444513e-01,  5.19047678e-01,  3.92063558e-01,  ...,
            -3.65078375e-02, -2.74603069e-01, -2.11111009e-01]],

          [[ 1.61031820e-02,  2.25442946e-01,  2.73752123e-01,  ...,
             4.02576596e-01,  8.05154145e-02,  2.89855182e-01],
           [ 2.41546005e-01,  1.77133769e-01,  1.93236828e-01,  ...,
             3.86473536e-01, -3.22059989e-02,  1.44927651e-01],
           [ 1.12721533e-01,  2.57649064e-01,  1.61030710e-01,  ...,
             4.99194920e-01,  8.21256101e-01,  1.77133769e-01],
           ...,
           [ 7.56843865e-01,  5.79710245e-01,  6.92431629e-01,  ...,
            -3.86473298e-01,  1.61030710e-01,  2.25442946e-01],
           [ 5.95813274e-01,  7.72946954e-01,  2.09339887e-01,  ...,
             8.05154145e-02, -1.77133530e-01,  1.44927651e-01],
           [ 6.28019392e-01,  8.21256101e-01,  8.37359190e-01,  ...,
             5.31401038e-01,  1.22934580e-07,  9.66184735e-02]],

          [[ 4.51274544e-01,  7.36132085e-01,  7.36132085e-01,  ...,
             8.56072128e-01,  5.56222081e-01,  7.51124620e-01],
           [ 7.21139610e-01,  7.21139610e-01,  6.31184578e-01,  ...,
             7.96102107e-01,  3.46327007e-01,  6.01199567e-01],
           [ 5.26237071e-01,  6.76162124e-01,  6.61169589e-01,  ...,
             9.16042149e-01,  9.76012170e-01,  5.71214557e-01],
           ...,
           [ 1.05097473e+00,  8.86057138e-01,  1.09595215e+00,  ...,
             1.66416958e-01,  5.86207092e-01,  6.16192102e-01],
           [ 1.03598225e+00,  1.08095968e+00,  5.86207092e-01,  ...,
             4.96252000e-01,  3.46327007e-01,  6.31184578e-01],
           [ 1.08095968e+00,  1.15592217e+00,  1.09595215e+00,  ...,
             8.26087117e-01,  5.26237071e-01,  6.61169589e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 326, 1, 799] with unstable size 325 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 799] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [325]; unstable size 325; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 325] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 325] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.38908529, -1.18870044, -2.95449877, -2.60739803, -3.34873295,
         -1.96987033, -3.07361507, -3.06156182, -1.16480970]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.54057121, -21.40389442, -20.55339050, -20.58682060, -20.08682251,
         -21.26310730, -20.37835312, -20.33173752, -21.91990280, -21.46942329]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520],
         [-21.54056931, -21.40389061, -20.55338860, -20.58681679, -20.08682060,
          -21.26310539, -20.37835312, -20.33173943, -21.91990280, -21.46942520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07114410, -0.06553459, -0.91603661, -0.88260841, -1.38260460,
          -0.20631981, -1.09107208, -1.13768578,  0.45047760]]],
       device='cuda:0')
number of violation:  7
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0815 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 703] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 703] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 221] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.52273893, -0.96111488, -0.21341228, -0.24194860,  0.79662275,
         -0.12263918,  1.94755077,  1.67940474, -2.02313375]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.34185982, -18.34316826, -19.90431023, -19.60602570, -20.92833138,
         -19.82821465, -22.19347191, -21.69088936, -18.03870010, -18.59241867]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676],
         [-19.34185982, -18.34316635, -19.90431023, -19.60602379, -20.92833138,
          -19.82821274, -22.19347000, -21.69088745, -18.03870010, -18.59241676]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.74944305, -0.24925041,  1.31189346,  1.01360703,  1.23579597,
          -0.55371666]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0772 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 640] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 640] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29259658,  3.78634977, -0.83907080,  0.12916976, -0.20247686,
         -0.06445074, -0.28860712,  3.43385959,  1.86539793]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.60500145, -24.89141464, -19.17918777, -20.05367851, -18.86228371,
         -19.76714134, -19.96246719, -19.42761040, -24.32711601, -22.82327843]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.97348404, -25.25050926, -19.38525391, -20.47401237, -19.55496788,
          -20.18207741, -20.31973648, -20.18347740, -24.64109039, -23.26975060],
         [-22.97348404, -25.25050926, -19.38525391, -20.47401237, -19.55496788,
          -20.18207741, -20.31973648, -20.18347740, -24.64109039, -23.26975060]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16971397,  0.62710953,  0.76476860,  0.62850952]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0826 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [953]; unstable size 953; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 953] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 953] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 953] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 255] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.24769044,  1.62967813, -0.30106115, -0.63823313, -0.46131349,
          0.13329822,  1.71760392,  0.29797381,  0.64501786]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
         -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.54it/s]100%|██████████| 1/1 [00:00<00:00,  7.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.69080544, -28.02049828, -25.76778221, -25.07657433, -25.68251801,
          -26.00996780, -27.59398842, -26.61277580, -24.82239151, -26.61855125],
         [-25.69080544, -28.02049828, -25.76778221, -25.07657433, -25.68251801,
          -26.00996780, -27.59398842, -26.61277580, -24.82239151, -26.61855125]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.86841393, 0.94539070, 0.25418282, 0.86012650]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1357 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.304443836212158
alpha/beta optimization time: 1.402231216430664
initial alpha-crown bounds: tensor([[-0.19642836,  1.68688905, -0.24070203, -0.57431948, -0.39791679,
          0.20313472,  1.77232790,  0.36443293,  0.68702602]], device='cuda:0')
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.5743194818496704
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6951 seconds.
lower bounds for all target labels: [-0.1964283585548401, 1.6868890523910522, -0.24070203304290771, -0.5743194818496704, -0.397918701171875, 0.20313453674316406, 1.7723278999328613, 0.36443203687667847, 0.6870260238647461]
Number of cpus: 96  Number of subproblems: 4
Reassign each subproblems with number of thread: 24
Starting MIP solver for these labels: [0, 2, 3, 4]
start creating model mps for candidates: ['lay/16_0', 'lay/16_2', 'lay/16_3', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=0_27013477.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=2_27013477.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=0_27013477.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=2_27013477.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 49371 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 49375 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 49376 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 49377 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.34167528152466
Verifying property 0 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7723278999328613.

Properties batch 1, size 1
Remaining timeout: 198.10844683647156
Verifying property 1 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6868890523910522.

Properties batch 2, size 1
Remaining timeout: 198.0114188194275
Verifying property 2 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6870260238647461.

Properties batch 3, size 1
Remaining timeout: 197.91879558563232
Verifying property 3 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3644329309463501.

Properties batch 4, size 1
Remaining timeout: 197.82480764389038
Verifying property 4 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2031347155570984.

Properties batch 5, size 1
Remaining timeout: 197.7322564125061
Verifying property 5 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19642836]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19642836]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008819103240966797
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0559    transfer 0.0001    finalize 0.0002    func 0.0565    
Accumulated time: func 0.0565    prepare 0.0003    bound 0.0559    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 34] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 79] 
split level 5: [/input-12, 4] 
split level 6: [/input-8, 913] 
split level 7: [/input-12, 2] 
split level 8: [/input-8, 1697] 
split level 9: [/input-8, 1764] 
split level 10: [/input-12, 29] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 1724] 
split level 13: [/input-12, 71] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 1715] 
split level 16: [/input-8, 1690] 
split level 17: [/input-8, 1943] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1707] 
split level 20: [/input-8, 1762] 
split level 21: [/input-8, 1935] 
split level 22: [/input-8, 1716] 
split level 23: [/input-8, 1765] 
split level 24: [/input-8, 371] 
split level 25: [/input, 2679] 
split level 26: [/input-8, 1953] 
split level 27: [/input-12, 35] 
split level 28: [/input-8, 932] 
split level 29: [/input-8, 1626] 
split level 30: [/input-8, 179] 
split level 31: [/input-12, 58] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 625] 
split level 34: [/input, 2455] 
split level 35: [/input-8, 1053] 
split level 36: [/input-8, 439] 
split level 37: [/input-8, 1756] 
split level 38: [/input-8, 1980] 
split level 39: [/input-8, 1634] 
split level 40: [/input-8, 1947] 
split level 41: [/input, 920] 
split level 42: [/input, 921] 
split level 43: [/input-8, 1034] 
split level 44: [/input, 2388] 
split level 45: [/input, 936] 
split level 46: [/input-8, 1310] 
split level 47: [/input-8, 933] 
split level 48: [/input, 2456] 
split level 49: [/input, 3016] 
split level 50: [/input-8, 2034] 
split level 51: [/input-8, 610] 
split level 52: [/input, 904] 
split level 53: [/input-8, 302] 
split level 54: [/input-8, 939] 
split level 55: [/input, 938] 
split level 56: [/input, 2439] 
split level 57: [/input, 2457] 
split level 58: [/input, 2474] 
split level 59: [/input, 2485] 
split level 60: [/input-8, 1084] 
split level 61: [/input, 2195] 
split level 62: [/input-8, 1618] 
split level 63: [/input, 2167] 
split level 64: [/input, 923] 
split level 65: [/input-8, 1520] 
split level 66: [/input, 3433] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 1043] 
split level 69: [/input, 2440] 
split level 70: [/input, 2473] 
split level 71: [/input, 2371] 
split level 72: [/input, 2180] 
split level 73: [/input, 393] 
split level 74: [/input, 2230] 
split level 75: [/input, 135] 
split level 76: [/input, 2535] 
split level 77: [/input, 907] 
split level 78: [/input-8, 377] 
split level 79: [/input-8, 1757] 
split level 80: [/input, 2203] 
split level 81: [/input, 905] 
split level 82: [/input, 2406] 
split level 83: [/input, 1941] 
split level 84: [/input, 903] 
split level 85: [/input, 919] 
split level 86: [/input, 889] 
split level 87: [/input-8, 361] 
split level 88: [/input, 2148] 
split level 89: [/input, 3193] 
split level 90: [/input, 2471] 
split level 91: [/input, 2217] 
split level 92: [/input-8, 180] 
split level 93: [/input-8, 186] 
split level 94: [/input, 1350] 
split level 95: [/input, 2201] 
split level 96: [/input-8, 416] 
split level 97: [/input, 2231] 
split level 98: [/input, 3179] 
split level 99: [/input, 2168] 
split level 100: [/input, 3420] 
split level 101: [/input-8, 241] 
split level 102: [/input, 2441] 
split level 103: [/input-8, 1598] 
split level 104: [/input, 2472] 
split level 105: [/input, 2883] 
split level 106: [/input, 2475] 
split level 107: [/input, 3390] 
split level 108: [/input-8, 1523] 
split level 109: [/input-8, 604] 
split level 110: [/input, 3018] 
split level 111: [/input, 2185] 
split level 112: [/input, 2218] 
split level 113: [/input, 117] 
split level 114: [/input, 2897] 
split level 115: [/input, 2141] 
split level 116: [/input, 3466] 
split level 117: [/input, 1470] 
split level 118: [/input, 2419] 
split level 119: [/input, 2125] 
split level 120: [/input, 2170] 
split level 121: [/input, 2232] 
split level 122: [/input-8, 1227] 
split level 123: [/input, 3000] 
split level 124: [/input-8, 1780] 
split level 125: [/input-8, 446] 
split level 126: [/input, 404] 
split level 127: [/input, 2680] 
split level 128: [/input, 2169] 
split level 129: [/input, 2196] 
split level 130: [/input, 952] 
split level 131: [/input, 2697] 
split level 132: [/input-8, 934] 
split level 133: [/input, 2220] 
split level 134: [/input, 3180] 
split level 135: [/input, 85] 
split level 136: [/input-8, 1369] 
split level 137: [/input-8, 422] 
split level 138: [/input, 2154] 
split level 139: [/input, 420] 
split level 140: [/input, 2184] 
split level 141: [/input, 3017] 
split level 142: [/input, 2153] 
split level 143: [/input, 759] 
split level 144: [/input-8, 1377] 
split level 145: [/input, 435] 
split level 146: [/input-8, 1149] 
split level 147: [/input, 891] 
split level 148: [/input-8, 409] 
split level 149: [/input, 2468] 
split level 150: [/input, 2476] 
split level 151: [/input, 2205] 
split level 152: [/input, 2186] 
split level 153: [/input, 925] 
split level 154: [/input, 3192] 
split level 155: [/input-8, 1265] 
split level 156: [/input, 3181] 
split level 157: [/input, 2204] 
split level 158: [/input, 2426] 
split level 159: [/input, 3207] 
split level 160: [/input, 1349] 
split level 161: [/input, 712] 
split level 162: [/input, 474] 
split level 163: [/input, 2489] 
split level 164: [/input, 69] 
split level 165: [/input, 2219] 
split level 166: [/input, 2694] 
split level 167: [/input, 2390] 
split level 168: [/input, 2156] 
split level 169: [/input, 506] 
split level 170: [/input, 2155] 
split level 171: [/input, 3422] 
split level 172: [/input, 2433] 
split level 173: [/input, 3191] 
split level 174: [/input, 2393] 
split level 175: [/input, 2682] 
split level 176: [/input, 2442] 
split level 177: [/input, 2467] 
split level 178: [/input, 2488] 
split level 179: [/input, 2412] 
split level 180: [/input, 3468] 
split level 181: [/input-8, 212] 
split level 182: [/input, 2937] 
split level 183: [/input-8, 235] 
split level 184: [/input, 2461] 
split level 185: [/input-8, 959] 
split level 186: [/input, 714] 
split level 187: [/input, 2696] 
split level 188: [/input, 138] 
split level 189: [/input, 758] 
split level 190: [/input, 2211] 
split level 191: [/input, 713] 
split level 192: [/input, 3389] 
split level 193: [/input-8, 1317] 
split level 194: [/input, 2206] 
split level 195: [/input, 730] 
split level 196: [/input, 165] 
split level 197: [/input, 909] 
split level 198: [/input, 2416] 
split level 199: [/input, 3209] 
Time: prepare 0.0063    bound 0.0985    transfer 0.0077    finalize 0.0056    func 0.1183    
Accumulated time: func 0.1747    prepare 0.0169    bound 0.1544    transfer 0.0078    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.14749038) min lb tensor(-0.19640332)
Number of Verified Splits: 4 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015260934829711914 
BICCOS Cumulative time: 0.015260934829711914
Preprocessing time: 0.012954235076904297 Inference time: 0.00028252601623535156 Add cuts time: 0.00023293495178222656 Cut analysis time: 0.001791238784790039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18764 (1), -0.18735 (1), -0.18734 (1), -0.18724 (1), -0.18632 (1), -0.18625 (1), -0.18619 (1), -0.18599 (1), -0.18594 (1), -0.18585 (1), -0.18516 (1), -0.18475 (1), -0.18457 (1), -0.18408 (1), -0.18330 (1), -0.18134 (1), -0.18113 (1), -0.18051 (1), -0.18039 (1), -0.17943 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5297    set_bounds 0.0121    solve 0.1185    add 0.2189    
Accumulated time: pickout 0.0004    decision 0.5297    set_bounds 0.0121    solve 0.1185    add 0.2189    
Current (lb-rhs): -0.1876351237297058
50 domains visited
Cumulative time: 0.9756507873535156

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 2: [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 2] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15661126375198364
10 lb beta sum: 0.5408634543418884, worst -0.10000631213188171
Time: prepare 0.0075    bound 0.1384    transfer 0.0010    finalize 0.0035    func 0.1532    
Accumulated time: func 0.3279    prepare 0.0248    bound 0.2927    transfer 0.0089    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.31405592) min lb tensor(-0.09976566)
Number of Verified Splits: 268 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.031139135360717773 
BICCOS Cumulative time: 0.04640007019042969
Preprocessing time: 0.013958930969238281 Inference time: 0.01190805435180664 Add cuts time: 0.004628896713256836 Cut analysis time: 0.0006432533264160156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0084    decision 0.0224    set_bounds 0.0153    solve 0.1533    add 0.0162    
Accumulated time: pickout 0.0088    decision 0.5521    set_bounds 0.0274    solve 0.2718    add 0.2351    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 3.59128594e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 9.46071148e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.10577555e-10, 3.35261106e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 34]), tensor([1., 1.]), tensor([0, 0]), tensor([2.10577555e-10, 9.94949490e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06354427337646484

all verified at 2th iter
Time: prepare 0.0004    bound 0.0170    transfer 0.0002    finalize 0.0002    func 0.0179    
Accumulated time: func 0.3458    prepare 0.0252    bound 0.3097    transfer 0.0090    finalize 0.0095    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 196.29293370246887
Verifying property 6 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24070203]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24070203]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00026035308837890625
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0002    func 0.0554    
Accumulated time: func 0.0554    prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 29] 
split level 1: [/input-12, 8] 
split level 2: [/input-12, 42] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 79] 
split level 9: [/input-12, 34] 
split level 10: [/input-12, 90] 
split level 11: [/input-8, 932] 
split level 12: [/input-8, 1697] 
split level 13: [/input-12, 58] 
split level 14: [/input-8, 939] 
split level 15: [/input-8, 913] 
split level 16: [/input-8, 1953] 
split level 17: [/input-8, 1716] 
split level 18: [/input-8, 354] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1052] 
split level 22: [/input-8, 1707] 
split level 23: [/input-8, 1764] 
split level 24: [/input-8, 1053] 
split level 25: [/input-8, 933] 
split level 26: [/input-8, 1939] 
split level 27: [/input-8, 937] 
split level 28: [/input-8, 1948] 
split level 29: [/input-8, 797] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 1626] 
split level 32: [/input-8, 1947] 
split level 33: [/input-8, 946] 
split level 34: [/input-8, 1762] 
split level 35: [/input, 952] 
split level 36: [/input, 2231] 
split level 37: [/input, 2485] 
split level 38: [/input-8, 1690] 
split level 39: [/input, 936] 
split level 40: [/input, 938] 
split level 41: [/input, 2474] 
split level 42: [/input, 954] 
split level 43: [/input-8, 1206] 
split level 44: [/input-8, 934] 
split level 45: [/input, 966] 
split level 46: [/input, 2455] 
split level 47: [/input, 3016] 
split level 48: [/input, 2248] 
split level 49: [/input, 2230] 
split level 50: [/input, 921] 
split level 51: [/input, 506] 
split level 52: [/input-8, 49] 
split level 53: [/input-8, 232] 
split level 54: [/input-8, 241] 
split level 55: [/input, 2473] 
split level 56: [/input, 2488] 
split level 57: [/input-8, 1310] 
split level 58: [/input, 2202] 
split level 59: [/input, 2459] 
split level 60: [/input, 2232] 
split level 61: [/input, 923] 
split level 62: [/input-8, 186] 
split level 63: [/input, 2456] 
split level 64: [/input, 2535] 
split level 65: [/input, 2471] 
split level 66: [/input, 2472] 
split level 67: [/input, 2490] 
split level 68: [/input, 920] 
split level 69: [/input-8, 1523] 
split level 70: [/input, 2489] 
split level 71: [/input, 1941] 
split level 72: [/input, 2180] 
split level 73: [/input-8, 1765] 
split level 74: [/input, 3509] 
split level 75: [/input-8, 179] 
split level 76: [/input, 2218] 
split level 77: [/input-8, 1598] 
split level 78: [/input-8, 1780] 
split level 79: [/input, 393] 
split level 80: [/input, 2201] 
split level 81: [/input, 905] 
split level 82: [/input, 3516] 
split level 83: [/input, 904] 
split level 84: [/input, 2217] 
split level 85: [/input, 2203] 
split level 86: [/input-8, 610] 
split level 87: [/input, 2457] 
split level 88: [/input, 2219] 
split level 89: [/input, 2167] 
split level 90: [/input, 2439] 
split level 91: [/input, 955] 
split level 92: [/input, 2475] 
split level 93: [/input-8, 57] 
split level 94: [/input, 907] 
split level 95: [/input, 2388] 
split level 96: [/input, 2440] 
split level 97: [/input-8, 1920] 
split level 98: [/input, 2184] 
split level 99: [/input, 2220] 
split level 100: [/input, 2371] 
split level 101: [/input, 3533] 
split level 102: [/input-8, 897] 
split level 103: [/input, 2186] 
split level 104: [/input-8, 1807] 
split level 105: [/input-8, 625] 
split level 106: [/input, 2185] 
split level 107: [/input, 2406] 
split level 108: [/input, 2188] 
split level 109: [/input-8, 439] 
split level 110: [/input-8, 2001] 
split level 111: [/input, 2249] 
split level 112: [/input, 949] 
split level 113: [/input, 2115] 
split level 114: [/input, 971] 
split level 115: [/input, 2476] 
split level 116: [/input, 3000] 
split level 117: [/input-8, 959] 
split level 118: [/input, 404] 
split level 119: [/input, 2491] 
split level 120: [/input, 2169] 
split level 121: [/input-8, 56] 
split level 122: [/input, 2441] 
split level 123: [/input-8, 240] 
split level 124: [/input, 474] 
split level 125: [/input, 797] 
split level 126: [/input, 2505] 
split level 127: [/input, 1978] 
split level 128: [/input, 2236] 
split level 129: [/input, 946] 
split level 130: [/input, 2168] 
split level 131: [/input, 2204] 
split level 132: [/input-8, 209] 
split level 133: [/input-8, 337] 
split level 134: [/input, 1979] 
split level 135: [/input, 3466] 
split level 136: [/input, 2254] 
split level 137: [/input-8, 1084] 
split level 138: [/input, 889] 
split level 139: [/input-8, 1943] 
split level 140: [/input, 2542] 
split level 141: [/input, 1980] 
split level 142: [/input, 2762] 
split level 143: [/input, 3017] 
split level 144: [/input, 3518] 
split level 145: [/input-8, 217] 
split level 146: [/input, 2253] 
split level 147: [/input, 2148] 
split level 148: [/input-8, 940] 
split level 149: [/input, 1015] 
split level 150: [/input, 963] 
split level 151: [/input-8, 1980] 
split level 152: [/input, 2484] 
split level 153: [/input, 420] 
split level 154: [/input, 435] 
split level 155: [/input, 501] 
split level 156: [/input, 1954] 
split level 157: [/input, 1981] 
split level 158: [/input, 3517] 
split level 159: [/input, 2419] 
split level 160: [/input, 2273] 
split level 161: [/input, 730] 
split level 162: [/input, 2250] 
split level 163: [/input, 2509] 
split level 164: [/input, 1013] 
split level 165: [/input, 2251] 
split level 166: [/input, 2196] 
split level 167: [/input-8, 196] 
split level 168: [/input, 2764] 
split level 169: [/input, 2499] 
split level 170: [/input, 2078] 
split level 171: [/input-8, 41] 
split level 172: [/input-8, 242] 
split level 173: [/input, 3411] 
split level 174: [/input, 2284] 
split level 175: [/input, 1965] 
split level 176: [/input, 2468] 
split level 177: [/input, 714] 
split level 178: [/input, 2412] 
split level 179: [/input, 2189] 
split level 180: [/input, 2156] 
split level 181: [/input, 925] 
split level 182: [/input, 713] 
split level 183: [/input, 2332] 
split level 184: [/input, 2170] 
split level 185: [/input, 2270] 
split level 186: [/input, 2524] 
split level 187: [/input, 2461] 
split level 188: [/input, 3582] 
split level 189: [/input, 2442] 
split level 190: [/input, 2444] 
split level 191: [/input, 3468] 
split level 192: [/input, 2157] 
split level 193: [/input-8, 204] 
split level 194: [/input, 891] 
split level 195: [/input, 2349] 
split level 196: [/input, 699] 
split level 197: [/input, 2269] 
split level 198: [/input, 2268] 
split level 199: [/input, 2390] 
Time: prepare 0.0060    bound 0.0953    transfer 0.0032    finalize 0.0036    func 0.1082    
Accumulated time: func 0.1636    prepare 0.0165    bound 0.1502    transfer 0.0033    finalize 0.0039    
all_split False
======================Cut inference begins======================
max lb tensor(0.28610212) min lb tensor(-0.24044859)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012557029724121094 
BICCOS Cumulative time: 0.012557029724121094
Preprocessing time: 0.011058807373046875 Inference time: 0.0006167888641357422 Add cuts time: 0.00013828277587890625 Cut analysis time: 0.0007431507110595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23033 (1), -0.23025 (1), -0.22942 (1), -0.22935 (1), -0.22913 (1), -0.22873 (1), -0.22870 (1), -0.22857 (1), -0.22843 (1), -0.22782 (1), -0.22774 (1), -0.22767 (1), -0.22656 (1), -0.22510 (1), -0.22455 (1), -0.22430 (1), -0.22407 (1), -0.22402 (1), -0.22296 (1), -0.22046 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5304    set_bounds 0.0110    solve 0.1083    add 0.2873    
Accumulated time: pickout 0.0005    decision 0.5304    set_bounds 0.0110    solve 0.1083    add 0.2873    
Current (lb-rhs): -0.23032796382904053
50 domains visited
Cumulative time: 1.0318694114685059

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 8] [/input-12, 29] [/input-12, 29] [/input-12, 29] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 46] [/input-12, 8] [/input-12, 46] [/input-12, 8] 
split level 2: [/input-12, 46] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 32] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
split level 3: [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 12] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1717088222503662
10 lb beta sum: 0.8103345036506653, worst -0.048758432269096375
Time: prepare 0.0079    bound 0.1946    transfer 0.0011    finalize 0.0037    func 0.2102    
Accumulated time: func 0.3738    prepare 0.0248    bound 0.3448    transfer 0.0043    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.30051535) min lb tensor(-0.04845339)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03729605674743652 
BICCOS Cumulative time: 0.04985308647155762
Preprocessing time: 0.015465021133422852 Inference time: 0.014817237854003906 Add cuts time: 0.006269931793212891 Cut analysis time: 0.000743865966796875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0217    decision 0.0248    set_bounds 0.0177    solve 0.2104    add 0.0209    
Accumulated time: pickout 0.0223    decision 0.5552    set_bounds 0.0287    solve 0.3187    add 0.3082    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.18985982e-11, 1.00050911e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.18985982e-11, 2.65644968e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.18985982e-11, 1.92207202e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 29]), tensor([1., 1.]), tensor([0, 0]), tensor([7.18985982e-11, 2.83924162e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04298532009124756

all verified at 1th iter
Time: prepare 0.0005    bound 0.0125    transfer 0.0001    finalize 0.0003    func 0.0134    
Accumulated time: func 0.3872    prepare 0.0253    bound 0.3572    transfer 0.0045    finalize 0.0078    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=0_27013477.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=0_27013477.log
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=2_27013477.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=2_27013477.log

Properties batch 7, size 1
Remaining timeout: 194.55237483978271
Verifying property 7 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39791679]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39791679]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
Cut time: 0.0008373260498046875
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    func 0.0557    
Accumulated time: func 0.0557    prepare 0.0002    bound 0.0553    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 90] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 32] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 8] 
split level 12: [/input-8, 913] 
split level 13: [/input-12, 29] 
split level 14: [/input-8, 1697] 
split level 15: [/input-8, 171] 
split level 16: [/input-8, 1953] 
split level 17: [/input, 966] 
split level 18: [/input-8, 933] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1716] 
split level 21: [/input-8, 942] 
split level 22: [/input-8, 934] 
split level 23: [/input, 949] 
split level 24: [/input, 3509] 
split level 25: [/input-8, 180] 
split level 26: [/input-8, 1707] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 1642] 
split level 29: [/input, 2485] 
split level 30: [/input-8, 1634] 
split level 31: [/input-8, 179] 
split level 32: [/input-8, 1724] 
split level 33: [/input, 952] 
split level 34: [/input-8, 1626] 
split level 35: [/input-8, 939] 
split level 36: [/input-8, 241] 
split level 37: [/input-8, 1206] 
split level 38: [/input, 938] 
split level 39: [/input-8, 1053] 
split level 40: [/input-8, 181] 
split level 41: [/input, 2474] 
split level 42: [/input, 936] 
split level 43: [/input-8, 1052] 
split level 44: [/input-8, 1947] 
split level 45: [/input, 2459] 
split level 46: [/input, 2231] 
split level 47: [/input-8, 1780] 
split level 48: [/input-8, 337] 
split level 49: [/input, 923] 
split level 50: [/input-8, 361] 
split level 51: [/input, 2455] 
split level 52: [/input, 3533] 
split level 53: [/input-8, 2001] 
split level 54: [/input-8, 338] 
split level 55: [/input, 3518] 
split level 56: [/input-8, 345] 
split level 57: [/input, 1941] 
split level 58: [/input, 506] 
split level 59: [/input, 2488] 
split level 60: [/input, 3016] 
split level 61: [/input, 2456] 
split level 62: [/input-8, 1765] 
split level 63: [/input-8, 1084] 
split level 64: [/input, 2230] 
split level 65: [/input, 2202] 
split level 66: [/input, 2473] 
split level 67: [/input, 2471] 
split level 68: [/input, 3516] 
split level 69: [/input-8, 1939] 
split level 70: [/input, 957] 
split level 71: [/input, 2232] 
split level 72: [/input, 2490] 
split level 73: [/input-8, 186] 
split level 74: [/input, 2388] 
split level 75: [/input, 2535] 
split level 76: [/input-8, 232] 
split level 77: [/input, 2472] 
split level 78: [/input, 2476] 
split level 79: [/input, 2220] 
split level 80: [/input, 2489] 
split level 81: [/input, 958] 
split level 82: [/input, 420] 
split level 83: [/input, 2475] 
split level 84: [/input-8, 959] 
split level 85: [/input, 2203] 
split level 86: [/input, 2218] 
split level 87: [/input, 941] 
split level 88: [/input, 404] 
split level 89: [/input, 2494] 
split level 90: [/input, 904] 
split level 91: [/input, 2406] 
split level 92: [/input-8, 330] 
split level 93: [/input-8, 299] 
split level 94: [/input-8, 1943] 
split level 95: [/input-8, 951] 
split level 96: [/input, 907] 
split level 97: [/input, 2219] 
split level 98: [/input, 3517] 
split level 99: [/input, 2180] 
split level 100: [/input, 2201] 
split level 101: [/input, 393] 
split level 102: [/input, 2217] 
split level 103: [/input-8, 950] 
split level 104: [/input, 963] 
split level 105: [/input, 2371] 
split level 106: [/input-8, 1598] 
split level 107: [/input, 946] 
split level 108: [/input, 2167] 
split level 109: [/input-8, 1523] 
split level 110: [/input, 2148] 
split level 111: [/input, 955] 
split level 112: [/input, 2254] 
split level 113: [/input, 971] 
split level 114: [/input, 920] 
split level 115: [/input-8, 1980] 
split level 116: [/input, 2184] 
split level 117: [/input, 2491] 
split level 118: [/input, 2457] 
split level 119: [/input, 1316] 
split level 120: [/input, 2238] 
split level 121: [/input, 2188] 
split level 122: [/input-8, 897] 
split level 123: [/input, 905] 
split level 124: [/input, 435] 
split level 125: [/input, 2835] 
split level 126: [/input, 2439] 
split level 127: [/input, 2186] 
split level 128: [/input, 2204] 
split level 129: [/input-8, 1807] 
split level 130: [/input-8, 240] 
split level 131: [/input, 1333] 
split level 132: [/input, 2253] 
split level 133: [/input, 474] 
split level 134: [/input, 2744] 
split level 135: [/input, 2542] 
split level 136: [/input, 2169] 
split level 137: [/input, 2509] 
split level 138: [/input, 2236] 
split level 139: [/input, 1978] 
split level 140: [/input, 2221] 
split level 141: [/input, 501] 
split level 142: [/input, 2185] 
split level 143: [/input, 2168] 
split level 144: [/input, 1013] 
split level 145: [/input-8, 242] 
split level 146: [/input, 1349] 
split level 147: [/input, 421] 
split level 148: [/input, 3411] 
split level 149: [/input, 925] 
split level 150: [/input, 3017] 
split level 151: [/input, 2484] 
split level 152: [/input, 2505] 
split level 153: [/input-8, 209] 
split level 154: [/input, 2493] 
split level 155: [/input, 2477] 
split level 156: [/input, 1015] 
split level 157: [/input, 730] 
split level 158: [/input-8, 217] 
split level 159: [/input, 1979] 
split level 160: [/input, 2205] 
split level 161: [/input, 2270] 
split level 162: [/input, 344] 
split level 163: [/input, 2239] 
split level 164: [/input, 2251] 
split level 165: [/input, 1350] 
split level 166: [/input, 2196] 
split level 167: [/input, 2206] 
split level 168: [/input, 2762] 
split level 169: [/input, 2255] 
split level 170: [/input-8, 204] 
split level 171: [/input-8, 213] 
split level 172: [/input, 2156] 
split level 173: [/input, 3468] 
split level 174: [/input, 3582] 
split level 175: [/input, 2390] 
split level 176: [/input, 2444] 
split level 177: [/input, 2883] 
split level 178: [/input, 2250] 
split level 179: [/input, 2468] 
split level 180: [/input, 2764] 
split level 181: [/input, 2189] 
split level 182: [/input, 2153] 
split level 183: [/input, 714] 
split level 184: [/input, 2170] 
split level 185: [/input, 2442] 
split level 186: [/input, 2412] 
split level 187: [/input-8, 212] 
split level 188: [/input-8, 941] 
split level 189: [/input, 2524] 
split level 190: [/input, 69] 
split level 191: [/input, 985] 
split level 192: [/input, 3466] 
split level 193: [/input-8, 196] 
split level 194: [/input, 2284] 
split level 195: [/input, 713] 
split level 196: [/input, 2269] 
split level 197: [/input, 2426] 
split level 198: [/input, 1317] 
split level 199: [/input, 2461] 
Time: prepare 0.0060    bound 0.0954    transfer 0.0030    finalize 0.0036    func 0.1082    
Accumulated time: func 0.1639    prepare 0.0163    bound 0.1506    transfer 0.0032    finalize 0.0038    
all_split False
======================Cut inference begins======================
max lb tensor(0.31647527) min lb tensor(-0.39779925)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013119697570800781 
BICCOS Cumulative time: 0.013119697570800781
Preprocessing time: 0.01081085205078125 Inference time: 0.0001697540283203125 Add cuts time: 8.273124694824219e-05 Cut analysis time: 0.0020563602447509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38674 (1), -0.38674 (1), -0.38668 (1), -0.38634 (1), -0.38617 (1), -0.38610 (1), -0.38575 (1), -0.38535 (1), -0.38523 (1), -0.38440 (1), -0.38420 (1), -0.38388 (1), -0.38387 (1), -0.38365 (1), -0.38343 (1), -0.38311 (1), -0.38193 (1), -0.38098 (1), -0.38006 (1), -0.37950 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5227    set_bounds 0.0100    solve 0.1083    add 0.2193    
Accumulated time: pickout 0.0003    decision 0.5227    set_bounds 0.0100    solve 0.1083    add 0.2193    
Current (lb-rhs): -0.38673853874206543
50 domains visited
Cumulative time: 0.9529714584350586

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 58] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 90] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3332233428955078
10 lb beta sum: 0.5662729740142822, worst -0.30741721391677856
Time: prepare 0.0072    bound 0.1196    transfer 0.0010    finalize 0.0032    func 0.1337    
Accumulated time: func 0.2976    prepare 0.0239    bound 0.2702    transfer 0.0041    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.15882301) min lb tensor(-0.30725253)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.016670942306518555 
BICCOS Cumulative time: 0.029790639877319336
Preprocessing time: 0.01296687126159668 Inference time: 0.0009646415710449219 Add cuts time: 0.0003542900085449219 Cut analysis time: 0.0023851394653320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11357 (2), -0.11341 (2), -0.11322 (2), -0.11193 (2), -0.11029 (2), -0.11015 (2), -0.10999 (2), -0.10957 (2), -0.10901 (2), -0.10530 (2), -0.10117 (2), -0.09838 (2), -0.09653 (2), -0.09401 (2), -0.09350 (2), -0.09350 (2), -0.09193 (2), -0.09116 (2), -0.09087 (2), -0.08940 (2), 
Length of domains: 50
Time: pickout 0.0121    decision 0.0216    set_bounds 0.0138    solve 0.1338    add 0.3070    
Accumulated time: pickout 0.0125    decision 0.5443    set_bounds 0.0238    solve 0.2421    add 0.5263    
Current (lb-rhs): -0.11356604099273682
100 domains visited
Cumulative time: 1.465519666671753

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 46] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 46] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11405706405639648
10 lb beta sum: 0.7808092832565308, worst -0.03161001205444336
Time: prepare 0.0064    bound 0.1233    transfer 0.0023    finalize 0.0026    func 0.1374    
Accumulated time: func 0.4351    prepare 0.0306    bound 0.3935    transfer 0.0065    finalize 0.0096    
all_split False
======================Cut inference begins======================
max lb tensor(0.19251937) min lb tensor(-0.02890366)
Number of Verified Splits: 390 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.04185652732849121 
BICCOS Cumulative time: 0.07164716720581055
Preprocessing time: 0.013828754425048828 Inference time: 0.02124166488647461 Add cuts time: 0.00545954704284668 Cut analysis time: 0.0013265609741210938
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0083    decision 0.0206    set_bounds 0.0167    solve 0.1375    add 0.0211    
Accumulated time: pickout 0.0208    decision 0.5649    set_bounds 0.0405    solve 0.3797    add 0.5474    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.11813021e-05, 2.14381412e-01, 1.12841502e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.11813021e-05, 2.14381412e-01, 8.70404392e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.11813021e-05, 1.19286224e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.98124632e-01, 1.07338056e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.98124632e-01, 1.50147546e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.24942705e-01, 9.74427909e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  2, 90]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.24942705e-01, 9.76687074e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20906686782836914
10 lb beta sum: 0.7455818057060242, worst -0.12259572744369507
Time: prepare 0.0004    bound 0.1280    transfer 0.0004    finalize 0.0002    func 0.1291    
Accumulated time: func 0.5641    prepare 0.0311    bound 0.5215    transfer 0.0068    finalize 0.0099    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5397398471832275, worst 0.061812400817871094

all verified at 0th iter
Time: prepare 0.0097    bound 0.0050    transfer 0.0044    finalize 0.0033    func 0.0241    
Accumulated time: func 0.5883    prepare 0.0412    bound 0.5265    transfer 0.0112    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(1.16300106) min lb tensor(0.06181240)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.007846832275390625 
BICCOS Cumulative time: 0.07949399948120117
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0220    set_bounds 0.0210    solve 0.0242    add 0.0001    
Accumulated time: pickout 0.0213    decision 0.5869    set_bounds 0.0615    solve 0.4039    add 0.5474    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.982175350189209

found process to kill: terminal indx = 0
found process to kill: terminal indx = 2
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=4_27013477.log

Properties batch 8, size 1
Remaining timeout: 192.35080194473267
Verifying property 8 with 1 instances.
##### Instance 127 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.57431948]], device='cuda:0') need to verify.
Model prediction is: tensor([-26.40610313, -28.64339638, -26.76308441, -26.38432884, -26.76462173,
        -27.38529396, -28.83926201, -27.71152496, -25.29835510, -27.33741188],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.57431948]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 953
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 248
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 1222
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
Cut time: 0.001089334487915039
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0504    transfer 0.0001    finalize 0.0001    func 0.0508    
Accumulated time: func 0.0508    prepare 0.0002    bound 0.0504    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 2] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 79] 
split level 7: [/input-12, 58] 
split level 8: [/input-8, 1697] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 1618] 
split level 11: [/input-8, 1610] 
split level 12: [/input-8, 1973] 
split level 13: [/input-8, 1953] 
split level 14: [/input-8, 1660] 
split level 15: [/input-12, 29] 
split level 16: [/input-8, 1707] 
split level 17: [/input-8, 913] 
split level 18: [/input-8, 1698] 
split level 19: [/input-8, 1642] 
split level 20: [/input-8, 1724] 
split level 21: [/input-8, 1626] 
split level 22: [/input-8, 946] 
split level 23: [/input-8, 1716] 
split level 24: [/input-8, 1052] 
split level 25: [/input-8, 1713] 
split level 26: [/input-8, 509] 
split level 27: [/input-8, 1690] 
split level 28: [/input-8, 490] 
split level 29: [/input-8, 461] 
split level 30: [/input, 346] 
split level 31: [/input-8, 1053] 
split level 32: [/input, 3433] 
split level 33: [/input, 3016] 
split level 34: [/input-8, 1634] 
split level 35: [/input-8, 1943] 
split level 36: [/input-8, 934] 
split level 37: [/input, 2248] 
split level 38: [/input-8, 959] 
split level 39: [/input-8, 1611] 
split level 40: [/input, 936] 
split level 41: [/input, 2535] 
split level 42: [/input-8, 1641] 
split level 43: [/input-8, 1149] 
split level 44: [/input, 2485] 
split level 45: [/input-8, 933] 
split level 46: [/input-8, 932] 
split level 47: [/input-8, 1980] 
split level 48: [/input-8, 956] 
split level 49: [/input-8, 510] 
split level 50: [/input-8, 822] 
split level 51: [/input-8, 338] 
split level 52: [/input-8, 337] 
split level 53: [/input, 2456] 
split level 54: [/input-8, 897] 
split level 55: [/input, 938] 
split level 56: [/input-8, 1935] 
split level 57: [/input, 393] 
split level 58: [/input, 2231] 
split level 59: [/input-8, 467] 
split level 60: [/input, 952] 
split level 61: [/input-8, 1084] 
split level 62: [/input-8, 798] 
split level 63: [/input, 923] 
split level 64: [/input, 2455] 
split level 65: [/input, 905] 
split level 66: [/input, 907] 
split level 67: [/input, 2202] 
split level 68: [/input-8, 595] 
split level 69: [/input-8, 1649] 
split level 70: [/input, 889] 
split level 71: [/input, 2169] 
split level 72: [/input-8, 625] 
split level 73: [/input, 3533] 
split level 74: [/input, 2440] 
split level 75: [/input, 904] 
split level 76: [/input, 2471] 
split level 77: [/input, 2230] 
split level 78: [/input-8, 942] 
split level 79: [/input, 2472] 
split level 80: [/input, 2488] 
split level 81: [/input-8, 460] 
split level 82: [/input, 3466] 
split level 83: [/input, 2388] 
split level 84: [/input, 506] 
split level 85: [/input, 2186] 
split level 86: [/input, 2474] 
split level 87: [/input-8, 1780] 
split level 88: [/input, 3509] 
split level 89: [/input-8, 1310] 
split level 90: [/input, 2201] 
split level 91: [/input-8, 939] 
split level 92: [/input, 2167] 
split level 93: [/input, 2473] 
split level 94: [/input-8, 377] 
split level 95: [/input, 2441] 
split level 96: [/input, 920] 
split level 97: [/input, 2185] 
split level 98: [/input, 2168] 
split level 99: [/input-8, 604] 
split level 100: [/input, 2217] 
split level 101: [/input, 2188] 
split level 102: [/input, 2232] 
split level 103: [/input, 3000] 
split level 104: [/input, 2203] 
split level 105: [/input-8, 1523] 
split level 106: [/input, 3518] 
split level 107: [/input, 2153] 
split level 108: [/input-8, 1034] 
split level 109: [/input, 2457] 
split level 110: [/input, 2195] 
split level 111: [/input, 2184] 
split level 112: [/input, 2489] 
split level 113: [/input-8, 951] 
split level 114: [/input, 2180] 
split level 115: [/input, 949] 
split level 116: [/input, 404] 
split level 117: [/input, 2406] 
split level 118: [/input, 946] 
split level 119: [/input, 3468] 
split level 120: [/input, 2476] 
split level 121: [/input, 3017] 
split level 122: [/input-8, 330] 
split level 123: [/input-8, 179] 
split level 124: [/input, 420] 
split level 125: [/input, 2439] 
split level 126: [/input, 344] 
split level 127: [/input-8, 1043] 
split level 128: [/input, 2426] 
split level 129: [/input, 2155] 
split level 130: [/input, 2220] 
split level 131: [/input, 3516] 
split level 132: [/input-8, 345] 
split level 133: [/input, 435] 
split level 134: [/input, 2475] 
split level 135: [/input, 1350] 
split level 136: [/input, 2170] 
split level 137: [/input, 3517] 
split level 138: [/input-8, 1920] 
split level 139: [/input, 2154] 
split level 140: [/input, 3452] 
split level 141: [/input, 2218] 
split level 142: [/input, 375] 
split level 143: [/input, 2156] 
split level 144: [/input, 474] 
split level 145: [/input, 871] 
split level 146: [/input, 2490] 
split level 147: [/input, 2762] 
split level 148: [/input, 2204] 
split level 149: [/input, 891] 
split level 150: [/input, 2427] 
split level 151: [/input, 2172] 
split level 152: [/input, 2219] 
split level 153: [/input, 1331] 
split level 154: [/input-12, 32] 
split level 155: [/input, 797] 
split level 156: [/input, 2371] 
split level 157: [/input, 2442] 
split level 158: [/input, 875] 
split level 159: [/input, 955] 
split level 160: [/input, 2390] 
split level 161: [/input-8, 361] 
split level 162: [/input, 421] 
split level 163: [/input, 725] 
split level 164: [/input-8, 1598] 
split level 165: [/input, 2419] 
split level 166: [/input, 2238] 
split level 167: [/input, 2225] 
split level 168: [/input, 2505] 
split level 169: [/input, 2254] 
split level 170: [/input, 2509] 
split level 171: [/input, 971] 
split level 172: [/input, 2206] 
split level 173: [/input, 2130] 
split level 174: [/input, 2412] 
split level 175: [/input, 501] 
split level 176: [/input, 3411] 
split level 177: [/input, 2173] 
split level 178: [/input, 1317] 
split level 179: [/input-8, 459] 
split level 180: [/input, 2189] 
split level 181: [/input, 713] 
split level 182: [/input, 2468] 
split level 183: [/input, 2428] 
split level 184: [/input, 2444] 
split level 185: [/input, 2253] 
split level 186: [/input, 2250] 
split level 187: [/input, 2196] 
split level 188: [/input, 2764] 
split level 189: [/input, 925] 
split level 190: [/input, 2484] 
split level 191: [/input, 2493] 
split level 192: [/input, 3582] 
split level 193: [/input, 963] 
split level 194: [/input, 2157] 
split level 195: [/input, 3443] 
split level 196: [/input, 2236] 
split level 197: [/input, 2467] 
split level 198: [/input, 2255] 
split level 199: [/input, 2251] 
Time: prepare 0.0059    bound 0.0929    transfer 0.0017    finalize 0.0031    func 0.1036    
Accumulated time: func 0.1544    prepare 0.0160    bound 0.1433    transfer 0.0018    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.22041750) min lb tensor(-0.57407236)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012288331985473633 
BICCOS Cumulative time: 0.012288331985473633
Preprocessing time: 0.010368585586547852 Inference time: 0.00012254714965820312 Add cuts time: 7.05718994140625e-05 Cut analysis time: 0.0017266273498535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.56484 (1), -0.56425 (1), -0.56396 (1), -0.56342 (1), -0.56291 (1), -0.56264 (1), -0.56260 (1), -0.56250 (1), -0.56241 (1), -0.56209 (1), -0.56182 (1), -0.56142 (1), -0.56140 (1), -0.56131 (1), -0.56109 (1), -0.56050 (1), -0.56041 (1), -0.56019 (1), -0.55935 (1), -0.55920 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5193    set_bounds 0.0088    solve 0.1038    add 0.2065    
Accumulated time: pickout 0.0003    decision 0.5193    set_bounds 0.0088    solve 0.1038    add 0.2065    
Current (lb-rhs): -0.5648447275161743
50 domains visited
Cumulative time: 0.9253783226013184

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 90] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 2: [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5382399559020996
10 lb beta sum: 0.42580825090408325, worst -0.5346448421478271
Time: prepare 0.0073    bound 0.1179    transfer 0.0010    finalize 0.0025    func 0.1313    
Accumulated time: func 0.2857    prepare 0.0236    bound 0.2611    transfer 0.0027    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.32642323) min lb tensor(-0.53447443)
Number of Verified Splits: 49 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.016314029693603516 
BICCOS Cumulative time: 0.02860236167907715
Preprocessing time: 0.011920452117919922 Inference time: 0.0017867088317871094 Add cuts time: 0.0013172626495361328 Cut analysis time: 0.0012896060943603516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30146 (2), -0.30141 (2), -0.30124 (2), -0.30105 (2), -0.30074 (2), -0.29957 (2), -0.29836 (2), -0.29754 (2), -0.29735 (2), -0.29699 (2), -0.29550 (2), -0.29414 (2), -0.29314 (2), -0.29302 (2), -0.29098 (2), -0.28964 (2), -0.28949 (2), -0.28700 (2), -0.28547 (2), -0.27915 (2), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0211    set_bounds 0.0129    solve 0.1313    add 0.2216    
Accumulated time: pickout 0.0086    decision 0.5404    set_bounds 0.0217    solve 0.2351    add 0.4281    
Current (lb-rhs): -0.3014579117298126
100 domains visited
Cumulative time: 1.344297170639038

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 12] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 90] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 58] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5579450130462646, worst -0.30145886540412903
10 lb beta sum: 0.5579450130462646, worst -0.30225232243537903
Time: prepare 0.0165    bound 0.1213    transfer 0.0022    finalize 0.0030    func 0.1456    
Accumulated time: func 0.4313    prepare 0.0404    bound 0.3824    transfer 0.0049    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.25812441) min lb tensor(-0.29965690)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01857161521911621 
BICCOS Cumulative time: 0.04717397689819336
Preprocessing time: 0.013079643249511719 Inference time: 0.002755880355834961 Add cuts time: 0.0014638900756835938 Cut analysis time: 0.0012722015380859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13395 (3), -0.13366 (3), -0.13339 (3), -0.13300 (3), -0.13293 (3), -0.13230 (3), -0.12640 (3), -0.12623 (3), -0.12623 (3), -0.12470 (3), -0.12406 (3), -0.12318 (3), -0.12305 (3), -0.12285 (3), -0.12277 (3), -0.11954 (3), -0.11952 (3), -0.11563 (3), -0.11501 (3), -0.11400 (3), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0204    set_bounds 0.0166    solve 0.1457    add 0.2339    
Accumulated time: pickout 0.0166    decision 0.5608    set_bounds 0.0382    solve 0.3808    add 0.6621    
Current (lb-rhs): -0.1339481770992279
150 domains visited
Cumulative time: 1.7913954257965088

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 8] [/input-12, 2] 
split level 3: [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 58] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14554941654205322
10 lb beta sum: 0.5328778028488159, worst -0.12745362520217896
Time: prepare 0.0066    bound 0.1173    transfer 0.0016    finalize 0.0024    func 0.1305    
Accumulated time: func 0.5618    prepare 0.0472    bound 0.4997    transfer 0.0065    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.27742994) min lb tensor(-0.12104279)
Number of Verified Splits: 165 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02669548988342285 
BICCOS Cumulative time: 0.07386946678161621
Preprocessing time: 0.012607336044311523 Inference time: 0.00955820083618164 Add cuts time: 0.0018270015716552734 Cut analysis time: 0.002702951431274414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03300 (4), -0.03208 (4), -0.03201 (4), -0.03173 (4), -0.03168 (4), -0.03136 (4), -0.03044 (4), -0.02474 (4), -0.02266 (4), -0.02258 (4), -0.02217 (4), -0.02204 (4), -0.02187 (4), -0.02186 (4), -0.02184 (4), -0.02182 (4), -0.02123 (4), -0.02086 (4), -0.02068 (4), -0.01977 (4), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0198    set_bounds 0.0162    solve 0.1306    add 0.4012    
Accumulated time: pickout 0.0244    decision 0.5806    set_bounds 0.0544    solve 0.5114    add 1.0632    
Current (lb-rhs): -0.03299903869628906
200 domains visited
Cumulative time: 2.400811195373535

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 2] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 46] [/input-12, 2] [/input-12, 46] [/input-12, 46] [/input-12, 58] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1611] [/input-12, 46] [/input-12, 46] [/input-8, 1698] [/input-12, 46] [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06480234861373901
10 lb beta sum: 0.48310279846191406, worst -0.36167359352111816
Time: prepare 0.0069    bound 0.1350    transfer 0.0010    finalize 0.0030    func 0.1485    
Accumulated time: func 0.7103    prepare 0.0544    bound 0.6347    transfer 0.0075    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.49457222) min lb tensor(-0.00991961)
Number of Verified Splits: 371 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 5
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.040590763092041016 
BICCOS Cumulative time: 0.11446022987365723
Preprocessing time: 0.012101411819458008 Inference time: 0.020476102828979492 Add cuts time: 0.006071329116821289 Cut analysis time: 0.0019419193267822266
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0198    set_bounds 0.0153    solve 0.1486    add 0.0290    
Accumulated time: pickout 0.0322    decision 0.6004    set_bounds 0.0698    solve 0.6600    add 1.0922    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.34866612e-11, 1.66293398e-01, 8.28496665e-02, 3.39244157e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([7.34866612e-11, 1.66293398e-01, 8.28496665e-02, 9.06951576e-02,
        2.99728751e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([7.34866612e-11, 1.66293398e-01, 8.28496665e-02, 9.06951576e-02,
        1.70559827e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([7.34866612e-11, 1.66293398e-01, 5.50302714e-02, 3.34291905e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([7.34866612e-11, 1.66293398e-01, 5.50302714e-02, 1.03609607e-01,
        2.98136443e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8,  2, 58, 42]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([7.34866612e-11, 1.66293398e-01, 5.50302714e-02, 1.03609607e-01,
        2.12992672e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.34866612e-11, 5.35255224e-02, 3.18673790e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([7.34866612e-11, 5.35255224e-02, 8.20861896e-04]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.96857765e-01, 3.21853578e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8, 42]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.96857765e-01, 2.56107911e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 5.11560887e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  11
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44652366638183594
10 lb beta sum: 0.3564888536930084, worst -0.4155578911304474
Time: prepare 0.0006    bound 0.1378    transfer 0.0004    finalize 0.0003    func 0.1392    
Accumulated time: func 0.8495    prepare 0.0550    bound 0.7725    transfer 0.0079    finalize 0.0144    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 42] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 46] [/input-12, 2] [/input-12, 2] [/input-12, 90] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-8, 1698] [/input-12, 79] [/input-12, 58] [/input-12, 2] 
split level 3: [/input-12, 46] [/input-12, 46] [/input-8, 1690] [/input-12, 58] [/input-12, 46] [/input-12, 79] 
split level 4: [/input-8, 1698] [/input-8, 1698] [/input-8, 1611] [/input-12, 46] [/input-8, 1698] [/input-12, 58] 
split level 5: [/input-8, 1611] [/input-8, 1611] [/input-8, 1943] [/input-8, 337] [/input-8, 1611] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5198927521705627, worst -0.28809577226638794
10 lb beta sum: 0.5158848166465759, worst -0.2671511769294739
Time: prepare 0.0164    bound 0.1305    transfer 0.0072    finalize 0.0040    func 0.1607    
Accumulated time: func 1.0101    prepare 0.0717    bound 0.9030    transfer 0.0150    finalize 0.0184    
all_split False
======================Cut inference begins======================
max lb tensor(0.58029640) min lb tensor(-0.26701951)
Number of Verified Splits: 314 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5378631949424744, worst -0.3450172543525696
10 lb beta sum: 0.6286177039146423, worst -0.305765300989151
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 5
#cuts 4-6: 24
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.3457634449005127 
BICCOS Cumulative time: 0.4602236747741699
Preprocessing time: 0.0106658935546875 Inference time: 0.3204371929168701 Add cuts time: 0.011724472045898438 Cut analysis time: 0.0029358863830566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26702 (6), -0.25414 (6), -0.24629 (6), -0.23347 (6), -0.22579 (6), -0.21932 (6), -0.21374 (6), -0.20568 (6), -0.19180 (6), -0.17875 (6), -0.15378 (6), -0.14882 (6), -0.14789 (6), -0.14110 (6), -0.14021 (6), -0.13489 (6), -0.12462 (6), -0.12280 (6), -0.11992 (6), -0.11974 (6), 
Length of domains: 70
Time: pickout 0.0009    decision 0.0185    set_bounds 0.0317    solve 0.1608    add 0.0736    
Accumulated time: pickout 0.0331    decision 0.6189    set_bounds 0.1015    solve 0.8208    add 1.1659    
Current (lb-rhs): -0.26701951026916504
270 domains visited
Cumulative time: 3.5516297817230225

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1698] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 79] [/input-8, 1698] [/input-12, 29] [/input-12, 29] [/input-8, 1698] [/input-12, 79] 
split level 1: [/input-8, 338] [/input-8, 1618] [/input-8, 1052] [/input-8, 338] [/input-8, 1618] [/input-8, 1053] [/input-8, 1698] [/input-8, 1698] [/input-8, 338] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.256977379322052
10 lb beta sum: 0.15758217871189117, worst -0.2531660795211792
Time: prepare 0.0059    bound 0.1322    transfer 0.0037    finalize 0.0031    func 0.1467    
Accumulated time: func 1.1568    prepare 0.0778    bound 1.0352    transfer 0.0187    finalize 0.0215    
all_split False
======================Cut inference begins======================
max lb tensor(0.28090680) min lb tensor(-0.25310606)
Number of Verified Splits: 124 of 280
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 9
#cuts 4-6: 8
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.023674964904785156 
BICCOS Cumulative time: 0.4838986396789551
Preprocessing time: 0.008529901504516602 Inference time: 0.01155400276184082 Add cuts time: 0.001988649368286133 Cut analysis time: 0.0016024112701416016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25311 (8), -0.23314 (8), -0.22959 (8), -0.22423 (8), -0.22222 (8), -0.22105 (8), -0.20942 (8), -0.20695 (8), -0.20579 (8), -0.20519 (8), -0.20309 (8), -0.20040 (8), -0.19593 (8), -0.19553 (8), -0.19133 (8), -0.19022 (8), -0.18910 (8), -0.18803 (8), -0.18687 (8), -0.18552 (8), 
Length of domains: 156
Time: pickout 0.0127    decision 0.0151    set_bounds 0.0178    solve 0.1468    add 0.0834    
Accumulated time: pickout 0.0458    decision 0.6340    set_bounds 0.1193    solve 0.9675    add 1.2492    
Current (lb-rhs): -0.2531060576438904
426 domains visited
Cumulative time: 3.861290454864502

BaB round 3
batch: 156
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 29] [/input-12, 29] [/input-8, 934] [/input-12, 29] [/input-8, 1626] [/input-8, 1690] [/input-12, 29] [/input-12, 29] [/input-8, 1713] [/input-12, 29] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24481827020645142
10 lb beta sum: 0.19604288041591644, worst -0.24096202850341797
Time: prepare 0.0064    bound 0.1334    transfer 0.0021    finalize 0.0024    func 0.1463    
Accumulated time: func 1.3031    prepare 0.0845    bound 1.1685    transfer 0.0208    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.06092107) min lb tensor(-0.24088112)
Number of Verified Splits: 90 of 312
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 9
#cuts 4-6: 14
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.021938323974609375 
BICCOS Cumulative time: 0.5058369636535645
Preprocessing time: 0.009240388870239258 Inference time: 0.00872182846069336 Add cuts time: 0.0014696121215820312 Cut analysis time: 0.0025064945220947266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24088 (9), -0.24016 (9), -0.22760 (9), -0.22512 (9), -0.21539 (9), -0.21311 (9), -0.21311 (9), -0.21019 (9), -0.20834 (9), -0.20205 (9), -0.19983 (9), -0.19909 (9), -0.19625 (9), -0.19589 (9), -0.19546 (9), -0.19458 (9), -0.19250 (9), -0.19004 (9), -0.18970 (9), -0.18648 (9), 
Length of domains: 222
Time: pickout 0.0155    decision 0.0225    set_bounds 0.0148    solve 0.1464    add 0.0837    
Accumulated time: pickout 0.0613    decision 0.6566    set_bounds 0.1341    solve 1.1139    add 1.3329    
Current (lb-rhs): -0.24088111519813538
648 domains visited
Cumulative time: 4.173876523971558

BaB round 4
batch: 222
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1698] [/input-8, 1690] [/input-8, 1052] [/input-8, 1053] [/input-8, 338] [/input-8, 1618] [/input-8, 1698] [/input-8, 934] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24017903208732605
10 lb beta sum: 0.20862410962581635, worst -0.23639991879463196
Time: prepare 0.0103    bound 0.1368    transfer 0.0077    finalize 0.0042    func 0.1620    
Accumulated time: func 1.4650    prepare 0.0950    bound 1.3053    transfer 0.0285    finalize 0.0281    
all_split False
======================Cut inference begins======================
max lb tensor(0.05524778) min lb tensor(-0.23636907)
Number of Verified Splits: 69 of 444
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 11
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.024414539337158203 
BICCOS Cumulative time: 0.5302515029907227
Preprocessing time: 0.013259410858154297 Inference time: 0.007066011428833008 Add cuts time: 0.002399444580078125 Cut analysis time: 0.0016896724700927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23637 (10), -0.23536 (10), -0.22334 (10), -0.22139 (10), -0.22053 (10), -0.21796 (10), -0.21044 (10), -0.20797 (10), -0.20509 (10), -0.20509 (10), -0.20500 (10), -0.20436 (10), -0.20274 (10), -0.20269 (10), -0.20206 (10), -0.19973 (10), -0.19754 (10), -0.19691 (10), -0.18947 (10), -0.18863 (10), 
Length of domains: 375
Time: pickout 0.0177    decision 0.0241    set_bounds 0.0195    solve 0.1621    add 0.1091    
Accumulated time: pickout 0.0789    decision 0.6806    set_bounds 0.1536    solve 1.2760    add 1.4420    
Current (lb-rhs): -0.2363690733909607
1023 domains visited
Cumulative time: 4.538534879684448

BaB round 5
batch: 375
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1626] [/input-8, 1034] [/input-8, 1611] [/input-8, 1618] [/input-8, 933] [/input-8, 1943] [/input-8, 1034] [/input-8, 1618] [/input-8, 1611] [/input-8, 338] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2329566478729248
10 lb beta sum: 0.22006751596927643, worst -0.2290976345539093
Time: prepare 0.0149    bound 0.1414    transfer 0.0126    finalize 0.0051    func 0.1789    
Accumulated time: func 1.6440    prepare 0.1101    bound 1.4467    transfer 0.0411    finalize 0.0331    
all_split False
======================Cut inference begins======================
max lb tensor(0.07608652) min lb tensor(-0.22906616)
Number of Verified Splits: 89 of 750
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.038194894790649414 
BICCOS Cumulative time: 0.5684463977813721
Preprocessing time: 0.02270817756652832 Inference time: 0.009936094284057617 Add cuts time: 0.0035026073455810547 Cut analysis time: 0.002048015594482422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22907 (11), -0.22787 (11), -0.22708 (11), -0.22248 (11), -0.21594 (11), -0.21541 (11), -0.21351 (11), -0.21344 (11), -0.21273 (11), -0.21109 (11), -0.20576 (11), -0.20481 (11), -0.20311 (11), -0.20023 (11), -0.19766 (11), -0.19563 (11), -0.19422 (11), -0.19422 (11), -0.19397 (11), -0.19393 (11), 
Length of domains: 661
Time: pickout 0.0635    decision 0.0328    set_bounds 0.0338    solve 0.1792    add 0.0885    
Accumulated time: pickout 0.1424    decision 0.7135    set_bounds 0.1874    solve 1.4552    add 1.5306    
Current (lb-rhs): -0.2290661633014679
1684 domains visited
Cumulative time: 4.983016014099121

BaB round 6
batch: 661
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1713] [/input-8, 933] [/input-8, 1690] [/input-8, 1052] [/input-8, 913] [/input-8, 1713] [/input-8, 1943] [/input-8, 1953] [/input-8, 1716] [/input-8, 1713] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23024344444274902
10 lb beta sum: 0.2010696530342102, worst -0.3385259509086609
Time: prepare 0.0273    bound 0.1485    transfer 0.0261    finalize 0.0081    func 0.2195    
Accumulated time: func 1.8635    prepare 0.1376    bound 1.5952    transfer 0.0672    finalize 0.0413    
all_split False
======================Cut inference begins======================
max lb tensor(0.57682610) min lb tensor(-0.22651514)
Number of Verified Splits: 264 of 1322
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 6
#cuts 4-6: 26
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.08339762687683105 
BICCOS Cumulative time: 0.6518440246582031
Preprocessing time: 0.04467630386352539 Inference time: 0.03219175338745117 Add cuts time: 0.004040718078613281 Cut analysis time: 0.002488851547241211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22652 (12), -0.22526 (12), -0.22116 (12), -0.22019 (12), -0.21321 (12), -0.21259 (12), -0.21083 (12), -0.21080 (12), -0.21041 (12), -0.20995 (12), -0.20880 (12), -0.20828 (12), -0.20736 (12), -0.20301 (12), -0.20049 (12), -0.19981 (12), -0.19718 (12), -0.19574 (12), -0.19496 (12), -0.19372 (12), 
Length of domains: 1058
Time: pickout 0.0267    decision 0.0504    set_bounds 0.0581    solve 0.2199    add 0.1178    
Accumulated time: pickout 0.1692    decision 0.7639    set_bounds 0.2455    solve 1.6751    add 1.6484    
Current (lb-rhs): -0.22651514410972595
2742 domains visited
Cumulative time: 5.550673246383667

BaB round 7
batch: 1058
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1618] [/input-8, 1053] [/input-8, 1713] [/input-12, 61] [/input-8, 1626] [/input-8, 1953] [/input-8, 1943] [/input-8, 956] [/input-8, 1034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2284497618675232
10 lb beta sum: 0.18172568082809448, worst -0.22474315762519836
Time: prepare 0.0434    bound 0.1806    transfer 0.0386    finalize 0.0169    func 0.2935    
Accumulated time: func 2.1569    prepare 0.1814    bound 1.7758    transfer 0.1058    finalize 0.0582    
all_split False
======================Cut inference begins======================
max lb tensor(0.78015041) min lb tensor(-0.22473228)
Number of Verified Splits: 458 of 2116
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.1390068531036377 
BICCOS Cumulative time: 0.7908508777618408
Preprocessing time: 0.07212448120117188 Inference time: 0.05809140205383301 Add cuts time: 0.006405353546142578 Cut analysis time: 0.0023856163024902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22473 (13), -0.22341 (13), -0.21938 (13), -0.21764 (13), -0.21136 (13), -0.20971 (13), -0.20892 (13), -0.20889 (13), -0.20774 (13), -0.20707 (13), -0.20674 (13), -0.20563 (13), -0.20523 (13), -0.20114 (13), -0.19978 (13), -0.19855 (13), -0.19682 (13), -0.19398 (13), -0.19311 (13), -0.19168 (13), 
Length of domains: 1658
Time: pickout 0.0330    decision 0.2327    set_bounds 0.1006    solve 0.2947    add 0.1472    
Accumulated time: pickout 0.2022    decision 0.9966    set_bounds 0.3461    solve 1.9698    add 1.7956    
Current (lb-rhs): -0.22473227977752686
4400 domains visited
Cumulative time: 6.511294364929199

BaB round 8
batch: 1658
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1149] [/input-8, 1953] [/input-8, 1713] [/input-8, 1953] [/input-12, 61] [/input-8, 1611] [/input-8, 1713] [/input-12, 61] [/input-12, 61] [/input-8, 1149] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22238510847091675
10 lb beta sum: 0.22024738788604736, worst -0.21867677569389343
Time: prepare 0.0747    bound 0.2473    transfer 0.0351    finalize 0.0236    func 0.4029    
Accumulated time: func 2.5598    prepare 0.2564    bound 2.0231    transfer 0.1409    finalize 0.0818    
all_split False
======================Cut inference begins======================
max lb tensor(0.76266193) min lb tensor(-0.21866828)
Number of Verified Splits: 1202 of 3316
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 7
#cuts 4-6: 14
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.4568514823913574 
BICCOS Cumulative time: 1.2477023601531982
Preprocessing time: 0.11262631416320801 Inference time: 0.32784271240234375 Add cuts time: 0.01359248161315918 Cut analysis time: 0.0027899742126464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21867 (14), -0.21729 (14), -0.21684 (14), -0.21152 (14), -0.21033 (14), -0.20785 (14), -0.20634 (14), -0.20371 (14), -0.20246 (14), -0.20189 (14), -0.20174 (14), -0.20098 (14), -0.20081 (14), -0.20064 (14), -0.20001 (14), -0.19959 (14), -0.19912 (14), -0.19906 (14), -0.19584 (14), -0.19492 (14), 
Length of domains: 2114
Time: pickout 0.0993    decision 0.1084    set_bounds 0.1478    solve 0.4037    add 0.0978    
Accumulated time: pickout 0.3014    decision 1.1049    set_bounds 0.4939    solve 2.3735    add 1.8934    
Current (lb-rhs): -0.21866828203201294
6514 domains visited
Cumulative time: 7.850296497344971

BaB round 9
batch: 2114
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 345] [/input-8, 934] [/input-8, 934] [/input-8, 345] [/input-8, 1053] [/input-8, 1707] [/input-8, 1716] [/input, 3016] [/input-8, 939] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21657788753509521
10 lb beta sum: 0.28051215410232544, worst -0.21285876631736755
Time: prepare 0.0981    bound 0.3964    transfer 0.0623    finalize 0.0344    func 0.6194    
Accumulated time: func 3.1793    prepare 0.3547    bound 2.4195    transfer 0.2032    finalize 0.1162    
all_split False
======================Cut inference begins======================
max lb tensor(0.52747285) min lb tensor(-0.21284848)
Number of Verified Splits: 663 of 4228
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 7
#cuts 4-6: 25
#cuts 7-9: 24
#cuts >= 20: 0
BICCOS time: 0.25959038734436035 
BICCOS Cumulative time: 1.5072927474975586
Preprocessing time: 0.14320707321166992 Inference time: 0.09742140769958496 Add cuts time: 0.01522517204284668 Cut analysis time: 0.003736734390258789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21285 (15), -0.21102 (15), -0.20984 (15), -0.20806 (15), -0.20571 (15), -0.20534 (15), -0.20441 (15), -0.20352 (15), -0.20121 (15), -0.20046 (15), -0.19837 (15), -0.19781 (15), -0.19719 (15), -0.19697 (15), -0.19657 (15), -0.19598 (15), -0.19582 (15), -0.19403 (15), -0.19371 (15), -0.19349 (15), 
Length of domains: 3565
Time: pickout 0.0567    decision 0.1282    set_bounds 0.1993    solve 0.6212    add 0.1947    
Accumulated time: pickout 0.3581    decision 1.2331    set_bounds 0.6932    solve 2.9947    add 2.0881    
Current (lb-rhs): -0.2128484845161438
10079 domains visited
Cumulative time: 9.325435400009155

BaB round 10
batch: 3565
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1707] [/input-8, 932] [/input-8, 1716] [/input-8, 1713] [/input-8, 1690] [/input-8, 1626] [/input, 2231] [/input-8, 1690] [/input-8, 1707] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2083868384361267
10 lb beta sum: 0.27077463269233704, worst -0.3047422170639038
Time: prepare 0.1750    bound 0.6231    transfer 0.0856    finalize 0.2398    func 1.1709    
Accumulated time: func 4.3502    prepare 0.5300    bound 3.0427    transfer 0.2888    finalize 0.3560    
all_split False
======================Cut inference begins======================
max lb tensor(0.54430342) min lb tensor(-0.20454112)
Number of Verified Splits: 1146 of 7130
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 91.
#cuts 1-3: 8
#cuts 4-6: 57
#cuts 7-9: 26
#cuts >= 20: 0
BICCOS time: 0.4624297618865967 
BICCOS Cumulative time: 1.9697225093841553
Preprocessing time: 0.2484583854675293 Inference time: 0.17885303497314453 Add cuts time: 0.029616117477416992 Cut analysis time: 0.005502223968505859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20402 (16), -0.20345 (16), -0.20275 (16), -0.20226 (16), -0.20163 (16), -0.19834 (16), -0.19698 (16), -0.19653 (16), -0.19649 (16), -0.19599 (16), -0.19594 (16), -0.19532 (16), -0.19523 (16), -0.19499 (16), -0.19477 (16), -0.19419 (16), -0.19198 (16), -0.19131 (16), -0.19107 (16), 
Length of domains: 5984
Time: pickout 0.1416    decision 0.3849    set_bounds 0.3243    solve 1.1734    add 0.1750    
Accumulated time: pickout 0.4996    decision 1.6180    set_bounds 1.0175    solve 4.1681    add 2.2630    
Current (lb-rhs): -0.20454111695289612
16063 domains visited
Cumulative time: 12.013659954071045

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1953] [/input-8, 1943] [/input-8, 1943] [/input, 3016] [/input-12, 61] [/input, 2471] [/input-12, 61] [/input-8, 1610] [/input, 393] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2040247917175293
10 lb beta sum: 0.25704851746559143, worst -0.3065784275531769
Time: prepare 0.2104    bound 0.7157    transfer 0.0605    finalize 0.0724    func 1.1139    
Accumulated time: func 5.4640    prepare 0.7406    bound 3.7584    transfer 0.3493    finalize 0.4284    
all_split False
======================Cut inference begins======================
max lb tensor(0.62587017) min lb tensor(-0.20398584)
Number of Verified Splits: 1642 of 8192
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts: total 680 constraints, 30876 nonzero elements
cuts preparing time: 0.2558
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 781.
#cuts 1-3: 114
#cuts 4-6: 49
#cuts 7-9: 45
#cuts 10-12: 6
#cuts 13-15: 23
#cuts 16-18: 32
#cuts 19-21: 38
#cuts >= 20: 474
BICCOS time: 1.1158111095428467 
BICCOS Cumulative time: 3.085533618927002
Preprocessing time: 0.28441643714904785 Inference time: 0.25554347038269043 Add cuts time: 0.05739021301269531 Cut analysis time: 0.5184609889984131
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20454 (16), -0.20399 (17), -0.20334 (17), -0.20275 (16), -0.20226 (16), -0.20153 (17), -0.19830 (17), -0.19694 (17), -0.19653 (16), -0.19642 (17), -0.19594 (16), -0.19590 (17), -0.19523 (17), -0.19519 (17), -0.19493 (17), -0.19469 (17), -0.19408 (17), -0.19198 (16), -0.19131 (16), -0.19096 (17), 
Length of domains: 8438
Time: pickout 0.0773    decision 0.2350    set_bounds 0.5731    solve 1.1168    add 0.2064    
Accumulated time: pickout 0.5770    decision 1.8530    set_bounds 1.5907    solve 5.2849    add 2.4695    
Current (lb-rhs): -0.20454111695289612
22613 domains visited
current_vram/total_varm: 13.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 15.381330728530884

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1943] [/input-8, 1610] [/input-8, 1943] [/input-8, 1943] [/input, 3017] [/input-8, 1716] [/input-8, 939] [/input, 2231] [/input-8, 604] [/input-8, 1943] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2045406997203827
10 lb beta sum: 9.154866218566895, worst -0.23663926124572754
Time: prepare 0.4270    bound 3.7330    transfer 0.1083    finalize 0.1522    func 4.8161    
Accumulated time: func 10.2801    prepare 1.1680    bound 7.4914    transfer 0.4576    finalize 0.5806    
all_split False
======================Cut inference begins======================
max lb tensor(0.81012964) min lb tensor(-0.04917282)
Number of Verified Splits: 15967 of 16384
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts: total 1227 constraints, 46123 nonzero elements
cuts preparing time: 0.0258
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1264.
#cuts 1-3: 203
#cuts 4-6: 21
#cuts 7-9: 11
#cuts 10-12: 8
#cuts 13-15: 53
#cuts 16-18: 95
#cuts 19-21: 79
#cuts >= 20: 794
BICCOS time: 4.074127674102783 
BICCOS Cumulative time: 7.159661293029785
Preprocessing time: 0.5732502937316895 Inference time: 2.8264083862304688 Add cuts time: 0.2748448848724365 Cut analysis time: 0.3996241092681885
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19523 (17), -0.17781 (17), -0.17130 (17), -0.16883 (17), -0.16731 (17), -0.16649 (17), -0.16523 (17), -0.16200 (17), -0.16108 (17), -0.16070 (17), -0.15996 (17), -0.15844 (17), -0.15529 (17), -0.15492 (17), -0.15270 (17), -0.15137 (17), -0.15067 (17), -0.14482 (17), -0.14472 (17), -0.14142 (17), 
Length of domains: 663
Time: pickout 0.1396    decision 0.4694    set_bounds 0.9965    solve 4.8202    add 0.0866    
Accumulated time: pickout 0.7166    decision 2.3225    set_bounds 2.5872    solve 10.1051    add 2.5561    
Current (lb-rhs): -0.1952325701713562
23030 domains visited
current_vram/total_varm: 22.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 26.157763242721558

BaB round 13
batch: 663
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1724] [/input-8, 1611] [/input-8, 1713] [/input-8, 1634] [/input-8, 1943] [/input-8, 1716] [/input, 2471] [/input-8, 1716] [/input-8, 1707] [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20069465041160583
10 lb beta sum: 15.915538787841797, worst -0.11976581811904907
Time: prepare 0.0321    bound 0.4622    transfer 0.0112    finalize 0.0089    func 0.5239    
Accumulated time: func 10.8040    prepare 1.2003    bound 7.9536    transfer 0.4688    finalize 0.5895    
all_split False
======================Cut inference begins======================
max lb tensor(1.18725419) min lb tensor(0.00013238)
Number of Verified Splits: 1326 of 1326
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
Total number of valid cuts: 1264.
#cuts 1-3: 203
#cuts 4-6: 21
#cuts 7-9: 11
#cuts 10-12: 8
#cuts 13-15: 53
#cuts 16-18: 95
#cuts 19-21: 79
#cuts >= 20: 794
BICCOS time: 0.04862499237060547 
BICCOS Cumulative time: 7.208286285400391
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0241    decision 0.0492    set_bounds 0.0621    solve 0.5242    add 0.0001    
Accumulated time: pickout 0.7407    decision 2.3717    set_bounds 2.6493    solve 10.6293    add 2.5561    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
23030 domains visited
Cumulative time: 26.87858271598816

found process to kill: terminal indx = 0
found process to kill: terminal indx = 2
found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=127_spec=3_27013477.log
found process to kill: terminal indx = 4
found process for pidx=0
found process for pidx=2
found process for pidx=3
kill process for pidx=3
found process for pidx=4
Result: safe in 34.9801 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 277, 1, 566] with unstable size 276 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 566] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [276]; unstable size 276; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 276] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.08655143,  2.27971554, -0.70720398,  0.21668977, -1.24121785,
          0.14262736, -0.35904771,  2.26373243,  0.64331388]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.50119209, -19.03553009, -15.22840977, -15.80129242, -14.75272465,
         -15.83410263, -14.41858292, -16.04555511, -18.78121948, -17.07835579]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.99808788, -18.69559097, -14.74748039, -15.45328903, -14.09618664,
          -15.44491768, -14.31151581, -15.40262127, -18.31984901, -16.73563576],
         [-15.99808788, -18.69559097, -14.74748039, -15.45328903, -14.09618664,
          -15.44491768, -14.31151581, -15.40262127, -18.31984901, -16.73563576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43596458, -0.21532917,  1.09110546]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0746 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [589]; unstable size 589; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 589] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 589] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 589] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 278] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90512013,  2.61772966, -0.68264663, -0.29089308, -1.19851422,
          0.45634884,  0.37348223, -0.85104138,  1.92439842]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.34526443, -29.08344650, -25.10714531, -24.64510918, -24.53378105,
         -24.57837105, -26.13238144, -26.32098007, -25.42654800, -28.22369576]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576],
         [-25.34526443, -29.08345222, -25.10714912, -24.64510918, -24.53377914,
          -24.57837105, -26.13237953, -26.32098007, -25.42654991, -28.22369576]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76689339,  0.52877808,  0.06673813, -0.04459190,  0.84817886]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]],


         [[[-1.16349196, -0.29047608,  0.40793657,  ...,  0.47142863,
             0.53492069,  0.82063496],
           [-1.16349196, -0.24285704,  0.37619054,  ...,  1.20158756,
             1.13809550,  1.26507962],
           [-0.92539680,  0.07460327,  0.24920642,  ...,  1.36031771,
             1.34444475,  1.18571460],
           ...,
           [-0.29047608, -0.35396814, -0.33809513,  ...,  0.37619054,
             0.42380959,  0.12222230],
           [-0.56031746, -0.60793650, -0.46507925,  ...,  0.04285724,
            -0.09999990, -0.05238085],
           [-0.68730158, -0.67142856, -0.43333322,  ..., -0.24285704,
            -0.36984116, -0.32222211]],

          [[-1.27214170, -0.33816412,  0.33816436,  ...,  0.35426742,
             0.45088577,  0.78904998],
           [-1.27214170, -0.28985494,  0.32206130,  ...,  1.07890511,
             0.99838978,  1.19162667],
           [-1.03059578,  0.03220624,  0.20933989,  ...,  1.23993587,
             1.15942061,  1.06280196],
           ...,
           [-0.30595800, -0.38647330, -0.37037024,  ...,  0.45088577,
             0.53140104,  0.24154601],
           [-0.57971013, -0.62801927, -0.48309177,  ...,  0.12882459,
             0.01610318,  0.06441236],
           [-0.70853460, -0.69243151, -0.45088565,  ..., -0.19323659,
            -0.30595800, -0.22544271]],

          [[-1.19790113, -0.07346311,  0.88605714,  ...,  0.52623707,
             0.63118458,  0.97601217],
           [-1.06296861,  0.07646193,  0.87106466,  ...,  1.23088503,
             1.15592217,  1.33583248],
           [-0.71814090,  0.49625200,  0.72113961,  ...,  1.41079497,
             1.33583248,  1.23088503],
           ...,
           [ 0.10644694,  0.03148442,  0.04647692,  ...,  0.93103468,
             0.99100471,  0.69115460],
           [-0.14842562, -0.19340314, -0.05847061,  ...,  0.66116959,
             0.55622208,  0.60119957],
           [-0.28335828, -0.26836565, -0.04347810,  ...,  0.28635699,
             0.18140946,  0.25637197]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [482]; unstable size 482; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 210, 1, 482] with unstable size 209 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 482] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 482] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [209]; unstable size 209; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 209] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 209] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.94138575,  2.94850707, -1.16203499,  0.27302718, -2.38051224,
         -0.17814445, -2.52197599,  5.83368540,  2.26016092]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-25.30639458, -26.81990623, -22.08092117, -22.72490120, -20.55580521,
         -22.10051918, -22.94018555, -20.62528801, -29.47222137, -25.84111977]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358],
         [-25.30639648, -26.81990433, -22.08091927, -22.72489929, -20.55580711,
          -22.10051918, -22.94018173, -20.62528992, -29.47222328, -25.84112358]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01959991, -1.54471207,  0.83966255, -1.47522926]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.38834953, -31.51884651, -29.35291672, -31.02542496, -30.66601372,
         -31.39447021, -32.53964615, -32.87446594, -24.85302734, -31.34247780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 208, 1, 590] with unstable size 207 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 590] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [207]; unstable size 207; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 207] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.28638148, 5.51830292, 2.94133282, 4.63216496, 3.96261168, 4.82937813,
         6.07474327, 5.84654808, 5.52136803]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0369 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 233, 1, 595] with unstable size 232 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 595] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [232]; unstable size 232; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 232] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.10743713,  5.94193077,  6.68529749,  5.16697359,  7.68069839,
          6.76295090,  6.25848007,  0.80630016, -0.04625964]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
         -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-34.74093628, -32.63446808, -39.92547989, -40.66252518, -39.21731186,
          -41.79864883, -40.77612686, -40.37427521, -34.67422867, -33.05698013]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.42251205]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1124 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 41.18775177001953
alpha/beta optimization time: 1.2031950950622559
initial alpha-crown bounds: tensor([[ 1.18385601,  6.04057837,  6.78337240,  5.29151726,  7.78996515,
          6.85149240,  6.37167454,  0.88482237, -0.00952506]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.009525060653686523
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6578 seconds.
lower bounds for all target labels: [1.1838536262512207, 6.040576934814453, 6.7833709716796875, 5.291519641876221, 7.789966106414795, 6.851492404937744, 6.37167501449585, 0.8848199844360352, -0.009524703025817871]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52806520462036
Verifying property 0 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.7899651527404785.

Properties batch 1, size 1
Remaining timeout: 198.29678583145142
Verifying property 1 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.851492404937744.

Properties batch 2, size 1
Remaining timeout: 198.1603569984436
Verifying property 2 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.783372402191162.

Properties batch 3, size 1
Remaining timeout: 198.02744722366333
Verifying property 3 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.371674537658691.

Properties batch 4, size 1
Remaining timeout: 197.89140701293945
Verifying property 4 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.040578365325928.

Properties batch 5, size 1
Remaining timeout: 197.75322127342224
Verifying property 5 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.29151725769043.

Properties batch 6, size 1
Remaining timeout: 197.60572409629822
Verifying property 6 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1838560104370117.

Properties batch 7, size 1
Remaining timeout: 197.47103357315063
Verifying property 7 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8848223686218262.

Properties batch 8, size 1
Remaining timeout: 197.33371996879578
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00952506]], device='cuda:0') need to verify.
Model prediction is: tensor([-35.68236923, -33.13178635, -40.98384094, -41.72174835, -40.35508347,
        -42.91672897, -41.79254532, -41.54734802, -35.50236130, -34.07597733],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00952506]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 595
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 227
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 838
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009360313415527344
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0552    transfer 0.0001    finalize 0.0002    func 0.0557    
Accumulated time: func 0.0557    prepare 0.0002    bound 0.0552    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 59] 
split level 2: [/input-8, 156] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 15] 
split level 5: [/input-8, 1123] 
split level 6: [/input-8, 1122] 
split level 7: [/input-8, 157] 
split level 8: [/input-12, 89] 
split level 9: [/input-12, 36] 
split level 10: [/input-8, 1971] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 1763] 
split level 13: [/input-12, 2] 
split level 14: [/input-8, 1627] 
split level 15: [/input-8, 164] 
split level 16: [/input-8, 1628] 
split level 17: [/input-8, 147] 
split level 18: [/input-8, 793] 
split level 19: [/input-8, 1626] 
split level 20: [/input-8, 1755] 
split level 21: [/input-8, 1050] 
split level 22: [/input-8, 1067] 
split level 23: [/input-8, 1762] 
split level 24: [/input, 3177] 
split level 25: [/input, 904] 
split level 26: [/input-8, 598] 
split level 27: [/input-8, 814] 
split level 28: [/input-8, 747] 
split level 29: [/input-8, 308] 
split level 30: [/input, 3467] 
split level 31: [/input, 3210] 
split level 32: [/input-8, 748] 
split level 33: [/input-12, 13] 
split level 34: [/input-8, 1756] 
split level 35: [/input, 3146] 
split level 36: [/input-12, 8] 
split level 37: [/input-8, 1386] 
split level 38: [/input-12, 24] 
split level 39: [/input-8, 806] 
split level 40: [/input, 876] 
split level 41: [/input-8, 1500] 
split level 42: [/input-8, 1963] 
split level 43: [/input-8, 1517] 
split level 44: [/input-8, 749] 
split level 45: [/input-8, 1969] 
split level 46: [/input-8, 1968] 
split level 47: [/input-8, 1387] 
split level 48: [/input, 3464] 
split level 49: [/input-8, 1683] 
split level 50: [/input-8, 1119] 
split level 51: [/input-8, 1498] 
split level 52: [/input, 150] 
split level 53: [/input-8, 1561] 
split level 54: [/input-8, 588] 
split level 55: [/input-8, 1085] 
split level 56: [/input, 980] 
split level 57: [/input-8, 1943] 
split level 58: [/input, 3211] 
split level 59: [/input-8, 628] 
split level 60: [/input-8, 1395] 
split level 61: [/input, 4001] 
split level 62: [/input, 923] 
split level 63: [/input, 1671] 
split level 64: [/input, 3181] 
split level 65: [/input, 3499] 
split level 66: [/input-8, 973] 
split level 67: [/input-8, 1086] 
split level 68: [/input, 3441] 
split level 69: [/input, 380] 
split level 70: [/input-8, 1388] 
split level 71: [/input-8, 478] 
split level 72: [/input-8, 949] 
split level 73: [/input, 3196] 
split level 74: [/input-8, 1314] 
split level 75: [/input, 3302] 
split level 76: [/input, 857] 
split level 77: [/input-8, 1333] 
split level 78: [/input-8, 1390] 
split level 79: [/input-8, 1620] 
split level 80: [/input, 369] 
split level 81: [/input-8, 213] 
split level 82: [/input, 454] 
split level 83: [/input, 2266] 
split level 84: [/input, 3539] 
split level 85: [/input, 1442] 
split level 86: [/input, 2267] 
split level 87: [/input-8, 482] 
split level 88: [/input-8, 828] 
split level 89: [/input-8, 1033] 
split level 90: [/input, 882] 
split level 91: [/input, 2489] 
split level 92: [/input-8, 1385] 
split level 93: [/input-8, 1389] 
split level 94: [/input, 387] 
split level 95: [/input, 2278] 
split level 96: [/input, 2788] 
split level 97: [/input, 874] 
split level 98: [/input-8, 1929] 
split level 99: [/input, 2261] 
split level 100: [/input-8, 1393] 
split level 101: [/input, 883] 
split level 102: [/input, 839] 
split level 103: [/input, 833] 
split level 104: [/input, 983] 
split level 105: [/input, 2538] 
split level 106: [/input, 3483] 
split level 107: [/input, 2277] 
split level 108: [/input-8, 902] 
split level 109: [/input, 899] 
split level 110: [/input-8, 214] 
split level 111: [/input, 2518] 
split level 112: [/input, 2724] 
split level 113: [/input, 151] 
split level 114: [/input, 996] 
split level 115: [/input-8, 975] 
split level 116: [/input-8, 1973] 
split level 117: [/input, 3545] 
split level 118: [/input, 840] 
split level 119: [/input-8, 901] 
split level 120: [/input, 866] 
split level 121: [/input-8, 1820] 
split level 122: [/input-8, 1397] 
split level 123: [/input, 2534] 
split level 124: [/input-8, 1952] 
split level 125: [/input-8, 1214] 
split level 126: [/input, 982] 
split level 127: [/input, 3044] 
split level 128: [/input-8, 1644] 
split level 129: [/input, 2523] 
split level 130: [/input, 2274] 
split level 131: [/input, 314] 
split level 132: [/input, 2264] 
split level 133: [/input, 999] 
split level 134: [/input-8, 1315] 
split level 135: [/input-8, 1641] 
split level 136: [/input, 4039] 
split level 137: [/input, 175] 
split level 138: [/input-8, 1621] 
split level 139: [/input, 2725] 
split level 140: [/input, 2275] 
split level 141: [/input, 2260] 
split level 142: [/input-8, 1115] 
split level 143: [/input, 421] 
split level 144: [/input, 2487] 
split level 145: [/input, 2262] 
split level 146: [/input, 2281] 
split level 147: [/input, 978] 
split level 148: [/input, 2259] 
split level 149: [/input-8, 1757] 
split level 150: [/input, 2537] 
split level 151: [/input, 313] 
split level 152: [/input, 3041] 
split level 153: [/input, 2279] 
split level 154: [/input-8, 141] 
split level 155: [/input, 2282] 
split level 156: [/input, 405] 
split level 157: [/input, 2471] 
split level 158: [/input-8, 153] 
split level 159: [/input, 422] 
split level 160: [/input, 2244] 
split level 161: [/input, 1004] 
split level 162: [/input, 2143] 
split level 163: [/input-8, 911] 
split level 164: [/input-8, 202] 
split level 165: [/input, 2127] 
split level 166: [/input, 893] 
split level 167: [/input, 2215] 
split level 168: [/input, 822] 
split level 169: [/input-8, 1049] 
split level 170: [/input, 2539] 
split level 171: [/input-8, 201] 
split level 172: [/input, 3299] 
split level 173: [/input, 2752] 
split level 174: [/input, 2257] 
split level 175: [/input, 933] 
split level 176: [/input-8, 359] 
split level 177: [/input, 2542] 
split level 178: [/input, 3303] 
split level 179: [/input, 886] 
split level 180: [/input, 2273] 
split level 181: [/input, 2541] 
split level 182: [/input, 2533] 
split level 183: [/input, 2284] 
split level 184: [/input, 817] 
split level 185: [/input, 323] 
split level 186: [/input, 28] 
split level 187: [/input, 3480] 
split level 188: [/input, 819] 
split level 189: [/input, 76] 
split level 190: [/input, 2470] 
split level 191: [/input, 2519] 
split level 192: [/input, 2545] 
split level 193: [/input, 2706] 
split level 194: [/input, 3421] 
split level 195: [/input, 2111] 
split level 196: [/input-8, 1579] 
split level 197: [/input, 901] 
split level 198: [/input, 2228] 
split level 199: [/input, 1329] 
Time: prepare 0.0060    bound 0.0956    transfer 0.0173    finalize 0.0064    func 0.1254    
Accumulated time: func 0.1811    prepare 0.0161    bound 0.1508    transfer 0.0174    finalize 0.0065    
all_split False
======================Cut inference begins======================
max lb tensor(0.24686593) min lb tensor(-0.00941122)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01615309715270996 
BICCOS Cumulative time: 0.01615309715270996
Preprocessing time: 0.012089729309082031 Inference time: 0.0025839805603027344 Add cuts time: 0.0011360645294189453 Cut analysis time: 0.00034332275390625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5198    set_bounds 0.0115    solve 0.1255    add 0.0105    
Accumulated time: pickout 0.0004    decision 0.5198    set_bounds 0.0115    solve 0.1255    add 0.0105    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([-1.]), tensor([0]), tensor([1.63023647e+30]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71]), tensor([1.]), tensor([0]), tensor([1.63023647e+30]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.08087211847305298

all verified at 0th iter
Time: prepare 0.0003    bound 0.0045    transfer 0.0002    finalize 0.0001    func 0.0052    
Accumulated time: func 0.1863    prepare 0.0164    bound 0.1553    transfer 0.0176    finalize 0.0067    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 3.8560 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-36.45841980, -44.35070419, -34.18724823, -36.62807846, -41.51102829,
         -36.81817245, -39.17654037, -38.88699341, -42.89539719, -42.96294785]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [414]; unstable size 414; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 108, 1, 414] with unstable size 107 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 414] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 414] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [107]; unstable size 107; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 107] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 107] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.80952752, 9.28115177, 1.87684751, 6.70495224, 2.04463577, 4.42981768,
         4.07691669, 7.95990849, 7.91283607]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [952]; unstable size 952; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 268, 1, 952] with unstable size 267 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 952] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 952] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [267]; unstable size 267; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 267] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86406374,  0.76336527,  2.41063452,  2.30971551,  3.50218773,
          1.55449748,  4.16273117, -1.88281870,  0.94847727]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
         -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.47599602, -23.78956413, -23.91806030, -25.75347519, -25.58520699,
          -27.02601433, -25.19198990, -27.62649536, -20.75136948, -23.69546700]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.72462654]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0807 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 503] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 503] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 221] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.14191866,  3.64040279,  2.98625946,  2.87868166,  3.34063005,
          4.70360136,  3.04852581,  1.37090302, -0.29452491]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
         -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.27663136, -10.99063969, -16.15567589, -15.54304314, -15.45358086,
          -16.03116608, -17.35605240, -15.81715107, -13.23739529, -11.18209076]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.19145107]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1161 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 25.241050720214844
alpha/beta optimization time: 1.2186470031738281
initial alpha-crown bounds: tensor([[ 3.18642378,  3.68983459,  3.03233385,  2.93258381,  3.39427853,
          4.75412846,  3.10958862,  1.40875006, -0.26687241]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2668724060058594
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6344 seconds.
lower bounds for all target labels: [3.1864233016967773, 3.6898345947265625, 3.0323333740234375, 2.932581901550293, 3.3942785263061523, 4.754128456115723, 3.109588146209717, 1.408750057220459, -0.2668724060058594]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=135_spec=8_27017389.mps
Process 50263 received signal 15. Terminate pool <multiprocessing.pool.Pool state=CLOSE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54018831253052
Verifying property 0 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.754128456115723.

Properties batch 1, size 1
Remaining timeout: 198.2000551223755
Verifying property 1 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6898345947265625.

Properties batch 2, size 1
Remaining timeout: 198.0603380203247
Verifying property 2 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3942785263061523.

Properties batch 3, size 1
Remaining timeout: 197.97742867469788
Verifying property 3 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1864237785339355.

Properties batch 4, size 1
Remaining timeout: 197.89856362342834
Verifying property 4 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.109588623046875.

Properties batch 5, size 1
Remaining timeout: 197.79344296455383
Verifying property 5 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.0323338508605957.

Properties batch 6, size 1
Remaining timeout: 197.66139769554138
Verifying property 6 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.932583808898926.

Properties batch 7, size 1
Remaining timeout: 197.57154655456543
Verifying property 7 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.408750057220459.

Properties batch 8, size 1
Remaining timeout: 197.4538538455963
Verifying property 8 with 1 instances.
##### Instance 135 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26687241]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.20746422, -11.40287113, -17.07642365, -16.43939400, -16.29893875,
        -16.93239021, -18.25842094, -16.83162689, -14.06174088, -12.06176949],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26687241]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 503
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 219
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 745
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007538795471191406
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0568    transfer 0.0001    finalize 0.0002    func 0.0574    
Accumulated time: func 0.0574    prepare 0.0003    bound 0.0568    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 71] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 32] 
split level 4: [/input-12, 89] 
split level 5: [/input-8, 164] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 97] 
split level 8: [/input-8, 156] 
split level 9: [/input-12, 36] 
split level 10: [/input-12, 2] 
split level 11: [/input-8, 163] 
split level 12: [/input-12, 79] 
split level 13: [/input-12, 10] 
split level 14: [/input-8, 419] 
split level 15: [/input, 406] 
split level 16: [/input-12, 24] 
split level 17: [/input-8, 313] 
split level 18: [/input-8, 1626] 
split level 19: [/input-8, 1634] 
split level 20: [/input-8, 469] 
split level 21: [/input-8, 1321] 
split level 22: [/input, 3478] 
split level 23: [/input-8, 166] 
split level 24: [/input-8, 403] 
split level 25: [/input, 391] 
split level 26: [/input-8, 1618] 
split level 27: [/input, 936] 
split level 28: [/input, 407] 
split level 29: [/input-12, 13] 
split level 30: [/input-8, 477] 
split level 31: [/input-8, 915] 
split level 32: [/input-8, 1068] 
split level 33: [/input-8, 592] 
split level 34: [/input-8, 405] 
split level 35: [/input-8, 932] 
split level 36: [/input, 916] 
split level 37: [/input, 886] 
split level 38: [/input-8, 906] 
split level 39: [/input-8, 269] 
split level 40: [/input-8, 745] 
split level 41: [/input-8, 1610] 
split level 42: [/input-8, 942] 
split level 43: [/input-8, 844] 
split level 44: [/input-8, 1298] 
split level 45: [/input, 3496] 
split level 46: [/input-8, 802] 
split level 47: [/input-8, 1677] 
split level 48: [/input-8, 1069] 
split level 49: [/input, 3493] 
split level 50: [/input-8, 1651] 
split level 51: [/input-8, 1355] 
split level 52: [/input-8, 1625] 
split level 53: [/input, 887] 
split level 54: [/input-8, 1590] 
split level 55: [/input-8, 46] 
split level 56: [/input-8, 1614] 
split level 57: [/input-8, 1572] 
split level 58: [/input, 932] 
split level 59: [/input-8, 783] 
split level 60: [/input-8, 474] 
split level 61: [/input, 3464] 
split level 62: [/input-8, 1554] 
split level 63: [/input-8, 1658] 
split level 64: [/input-8, 951] 
split level 65: [/input, 3556] 
split level 66: [/input-8, 1040] 
split level 67: [/input-8, 1230] 
split level 68: [/input, 358] 
split level 69: [/input, 3494] 
split level 70: [/input-8, 843] 
split level 71: [/input-8, 1779] 
split level 72: [/input, 1942] 
split level 73: [/input-8, 406] 
split level 74: [/input, 996] 
split level 75: [/input-8, 1599] 
split level 76: [/input, 501] 
split level 77: [/input-8, 1393] 
split level 78: [/input, 931] 
split level 79: [/input-8, 286] 
split level 80: [/input-8, 777] 
split level 81: [/input, 1012] 
split level 82: [/input-8, 810] 
split level 83: [/input-8, 1678] 
split level 84: [/input-8, 910] 
split level 85: [/input, 1304] 
split level 86: [/input-8, 1356] 
split level 87: [/input-8, 489] 
split level 88: [/input, 504] 
split level 89: [/input, 2952] 
split level 90: [/input-8, 846] 
split level 91: [/input-8, 948] 
split level 92: [/input-8, 1497] 
split level 93: [/input-8, 1296] 
split level 94: [/input-8, 957] 
split level 95: [/input-8, 1666] 
split level 96: [/input-8, 909] 
split level 97: [/input, 87] 
split level 98: [/input-8, 1498] 
split level 99: [/input, 1303] 
split level 100: [/input-8, 1367] 
split level 101: [/input-8, 1315] 
split level 102: [/input, 506] 
split level 103: [/input, 3002] 
split level 104: [/input-8, 1780] 
split level 105: [/input, 510] 
split level 106: [/input, 2709] 
split level 107: [/input, 3221] 
split level 108: [/input-8, 395] 
split level 109: [/input, 3021] 
split level 110: [/input, 982] 
split level 111: [/input-8, 1360] 
split level 112: [/input, 2327] 
split level 113: [/input, 3570] 
split level 114: [/input, 3576] 
split level 115: [/input, 3577] 
split level 116: [/input, 1926] 
split level 117: [/input, 3572] 
split level 118: [/input-8, 1935] 
split level 119: [/input, 1013] 
split level 120: [/input, 1912] 
split level 121: [/input, 2278] 
split level 122: [/input-8, 1306] 
split level 123: [/input, 921] 
split level 124: [/input, 997] 
split level 125: [/input, 2916] 
split level 126: [/input, 2885] 
split level 127: [/input-8, 1170] 
split level 128: [/input, 4035] 
split level 129: [/input, 2887] 
split level 130: [/input, 1014] 
split level 131: [/input-8, 219] 
split level 132: [/input, 505] 
split level 133: [/input, 998] 
split level 134: [/input, 2215] 
split level 135: [/input-8, 1696] 
split level 136: [/input, 2715] 
split level 137: [/input, 2275] 
split level 138: [/input-8, 301] 
split level 139: [/input, 508] 
split level 140: [/input, 2214] 
split level 141: [/input-8, 371] 
split level 142: [/input, 1925] 
split level 143: [/input, 2072] 
split level 144: [/input, 2264] 
split level 145: [/input, 4034] 
split level 146: [/input-8, 33] 
split level 147: [/input-8, 1743] 
split level 148: [/input-8, 812] 
split level 149: [/input, 2707] 
split level 150: [/input, 509] 
split level 151: [/input-8, 913] 
split level 152: [/input, 1990] 
split level 153: [/input, 507] 
split level 154: [/input-8, 329] 
split level 155: [/input-8, 263] 
split level 156: [/input, 23] 
split level 157: [/input-8, 1091] 
split level 158: [/input, 2550] 
split level 159: [/input, 2549] 
split level 160: [/input-8, 39] 
split level 161: [/input, 2087] 
split level 162: [/input, 3020] 
split level 163: [/input, 1883] 
split level 164: [/input, 2535] 
split level 165: [/input-8, 1504] 
split level 166: [/input, 2263] 
split level 167: [/input, 3252] 
split level 168: [/input, 1334] 
split level 169: [/input, 206] 
split level 170: [/input, 2231] 
split level 171: [/input, 3582] 
split level 172: [/input, 1460] 
split level 173: [/input, 2519] 
split level 174: [/input-8, 835] 
split level 175: [/input, 2280] 
split level 176: [/input, 1867] 
split level 177: [/input, 3436] 
split level 178: [/input, 1989] 
split level 179: [/input, 873] 
split level 180: [/input-8, 1687] 
split level 181: [/input, 281] 
split level 182: [/input, 2959] 
split level 183: [/input, 2233] 
split level 184: [/input, 1851] 
split level 185: [/input, 1924] 
split level 186: [/input, 853] 
split level 187: [/input, 113] 
split level 188: [/input-8, 775] 
split level 189: [/input, 2281] 
split level 190: [/input-8, 496] 
split level 191: [/input, 2830] 
split level 192: [/input, 648] 
split level 193: [/input, 3578] 
split level 194: [/input, 2056] 
split level 195: [/input-8, 210] 
split level 196: [/input, 875] 
split level 197: [/input, 2893] 
split level 198: [/input, 2213] 
split level 199: [/input-8, 326] 
Time: prepare 0.0062    bound 0.1057    transfer 0.0159    finalize 0.0069    func 0.1348    
Accumulated time: func 0.1922    prepare 0.0167    bound 0.1625    transfer 0.0160    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07024950) min lb tensor(-0.26677918)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.014440774917602539 
BICCOS Cumulative time: 0.014440774917602539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25838 (1), -0.25774 (1), -0.25718 (1), -0.25708 (1), -0.25700 (1), -0.25652 (1), -0.25638 (1), -0.25605 (1), -0.25590 (1), -0.25549 (1), -0.25533 (1), -0.25421 (1), -0.25330 (1), -0.25261 (1), -0.25239 (1), -0.25139 (1), -0.25081 (1), -0.25010 (1), -0.25007 (1), -0.24905 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5489    set_bounds 0.0192    solve 0.1349    add 0.2173    
Accumulated time: pickout 0.0004    decision 0.5489    set_bounds 0.0192    solve 0.1349    add 0.2173    
Current (lb-rhs): -0.25838208198547363
50 domains visited
Cumulative time: 1.0163614749908447

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 71] [/input-12, 20] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 71] [/input-12, 68] [/input-12, 71] [/input-12, 71] [/input-12, 71] 
split level 1: [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 32] [/input-12, 20] [/input-12, 20] [/input-12, 20] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 12] [/input-12, 32] [/input-12, 12] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
Time: prepare 0.0074    bound 0.0988    transfer 0.0010    finalize 0.0043    func 0.1117    
Accumulated time: func 0.3039    prepare 0.0244    bound 0.2613    transfer 0.0170    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.11847281) min lb tensor(-0.24003863)
Number of Verified Splits: 26 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.018116474151611328 
BICCOS Cumulative time: 0.03255724906921387
Preprocessing time: 0.01415395736694336 Inference time: 0.0013511180877685547 Add cuts time: 0.0004582405090332031 Cut analysis time: 0.002153158187866211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07131 (2), -0.07064 (2), -0.07049 (2), -0.07038 (2), -0.07000 (2), -0.06965 (2), -0.06955 (2), -0.06910 (2), -0.06897 (2), -0.06893 (2), -0.06755 (2), -0.06706 (2), -0.06704 (2), -0.06643 (2), -0.06605 (2), -0.06561 (2), -0.06427 (2), -0.06400 (2), -0.06399 (2), -0.06116 (2), 
Length of domains: 50
Time: pickout 0.0088    decision 0.0219    set_bounds 0.0178    solve 0.1120    add 0.2299    
Accumulated time: pickout 0.0092    decision 0.5708    set_bounds 0.0370    solve 0.2468    add 0.4472    
Current (lb-rhs): -0.0713050365447998
100 domains visited
Cumulative time: 1.4318952560424805

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 20] 
split level 1: [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 20] [/input-12, 68] [/input-12, 20] [/input-12, 20] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 89] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 89] [/input-12, 89] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05367124080657959
10 lb beta sum: 0.5872474908828735, worst -0.020369768142700195
Time: prepare 0.0073    bound 0.1225    transfer 0.0015    finalize 0.0027    func 0.1366    
Accumulated time: func 0.4405    prepare 0.0321    bound 0.3838    transfer 0.0185    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.29137880) min lb tensor(-0.01566267)
Number of Verified Splits: 395 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.04348492622375488 
BICCOS Cumulative time: 0.07604217529296875
Preprocessing time: 0.013291120529174805 Inference time: 0.02005600929260254 Add cuts time: 0.00850057601928711 Cut analysis time: 0.0016372203826904297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0081    decision 0.0241    set_bounds 0.0169    solve 0.1368    add 0.0210    
Accumulated time: pickout 0.0172    decision 0.5948    set_bounds 0.0539    solve 0.3836    add 0.4682    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.81496614e-05, 4.44174260e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.81496614e-05, 1.21495768e-01, 1.13125846e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 20, 68]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.81496614e-05, 1.21495768e-01, 5.40113002e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.81496614e-05, 4.10550088e-02, 9.10207480e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.81496614e-05, 4.10550088e-02, 1.15993902e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.81496614e-05, 2.54617203e-02, 1.02482677e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([71, 12, 20]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.81496614e-05, 2.54617203e-02, 1.19366691e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13281404972076416
10 lb beta sum: 0.582409143447876, worst -0.08267420530319214
Time: prepare 0.0005    bound 0.1485    transfer 0.0004    finalize 0.0002    func 0.1497    
Accumulated time: func 0.5902    prepare 0.0326    bound 0.5322    transfer 0.0189    finalize 0.0144    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 32] 
split level 2: [/input-12, 89] 
split level 3: [/input-12, 12] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 36] 
split level 6: [/input-8, 163] 
split level 7: [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9493062496185303, worst 0.0011345744132995605

all verified at 0th iter
Time: prepare 0.0117    bound 0.0064    transfer 0.0049    finalize 0.0024    func 0.0281    
Accumulated time: func 0.6183    prepare 0.0448    bound 0.5386    transfer 0.0238    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.44128519) min lb tensor(0.00113457)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.008995771408081055 
BICCOS Cumulative time: 0.0850379467010498
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0246    set_bounds 0.0290    solve 0.0282    add 0.0001    
Accumulated time: pickout 0.0179    decision 0.6194    set_bounds 0.0829    solve 0.4118    add 0.4683    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 2.0240299701690674

the mip building process is not terminated yet, kill it
Result: safe in 4.9416 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.03878975, -27.34531403, -23.53932953, -24.00347710, -23.92297554,
         -24.22077560, -25.12296104, -25.69461441, -24.00042725, -27.72712517]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 585] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 585] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 195] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.34309196, 0.87681007, 1.16530991, 1.17494845, 1.34177268, 2.16514802,
         2.73782206, 1.01523066, 4.69900179]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0596 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [438]; unstable size 438; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 438] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 438] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 438] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 275] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.22114491,  4.09420586, -0.54178739,  0.56779742, -0.32674569,
          0.62577605,  1.91951942,  3.76403689,  3.22747231]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
         -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.78it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.04311180, -21.13624954, -15.83210659, -16.94238091, -16.04538727,
          -17.10531425, -15.73818588, -18.64249992, -21.03587151, -20.26518440],
         [-20.04311180, -21.13624954, -15.83210659, -16.94238091, -16.04538727,
          -17.10531425, -15.73818588, -18.64249992, -21.03587151, -20.26518440]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.09392071, 0.30720139]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1171 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.213314056396484
alpha/beta optimization time: 1.2215256690979004
initial alpha-crown bounds: tensor([[ 3.30038786,  4.16773224, -0.48484540,  0.61480695, -0.26430172,
          0.68667209,  2.01555824,  3.85170579,  3.32559872]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4848453998565674
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6249 seconds.
lower bounds for all target labels: [3.300389289855957, 4.167730808258057, -0.484844446182251, 0.61480313539505, -0.2643023729324341, 0.6866692304611206, 2.015556812286377, 3.8517069816589355, 3.325601100921631]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 4]
start creating model mps for candidates: ['lay/16_2', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 51458 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 51461 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51990056037903
Verifying property 0 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.167732238769531.

Properties batch 1, size 1
Remaining timeout: 198.27671599388123
Verifying property 1 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.85170578956604.

Properties batch 2, size 1
Remaining timeout: 198.14286541938782
Verifying property 2 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.32559871673584.

Properties batch 3, size 1
Remaining timeout: 198.05850458145142
Verifying property 3 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3003878593444824.

Properties batch 4, size 1
Remaining timeout: 197.97819709777832
Verifying property 4 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0155582427978516.

Properties batch 5, size 1
Remaining timeout: 197.89843606948853
Verifying property 5 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6866720914840698.

Properties batch 6, size 1
Remaining timeout: 197.81793022155762
Verifying property 6 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6148069500923157.

Properties batch 7, size 1
Remaining timeout: 197.7380096912384
Verifying property 7 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.26430172]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.26430172]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006043910980224609
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.1063    transfer 0.0002    finalize 0.0002    func 0.1068    
Accumulated time: func 0.1068    prepare 0.0002    bound 0.1063    transfer 0.0002    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 56] 
split level 2: [/input-12, 97] 
split level 3: [/input-12, 61] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 31] 
split level 6: [/input-12, 34] 
split level 7: [/input-8, 1249] 
split level 8: [/input-8, 1939] 
split level 9: [/input-12, 7] 
split level 10: [/input-8, 157] 
split level 11: [/input-8, 44] 
split level 12: [/input-8, 1259] 
split level 13: [/input-8, 612] 
split level 14: [/input-8, 804] 
split level 15: [/input-8, 811] 
split level 16: [/input-8, 1241] 
split level 17: [/input-8, 1258] 
split level 18: [/input-8, 38] 
split level 19: [/input-8, 1635] 
split level 20: [/input-8, 790] 
split level 21: [/input-8, 347] 
split level 22: [/input-8, 1581] 
split level 23: [/input-8, 139] 
split level 24: [/input-8, 166] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 1580] 
split level 27: [/input-8, 146] 
split level 28: [/input-8, 42] 
split level 29: [/input-8, 43] 
split level 30: [/input-8, 757] 
split level 31: [/input-8, 1242] 
split level 32: [/input-8, 2030] 
split level 33: [/input-12, 8] 
split level 34: [/input-8, 54] 
split level 35: [/input-8, 803] 
split level 36: [/input-8, 25] 
split level 37: [/input, 3149] 
split level 38: [/input-8, 28] 
split level 39: [/input-8, 161] 
split level 40: [/input-8, 2017] 
split level 41: [/input-8, 1636] 
split level 42: [/input-8, 132] 
split level 43: [/input-8, 153] 
split level 44: [/input-8, 406] 
split level 45: [/input, 3054] 
split level 46: [/input-8, 1644] 
split level 47: [/input-8, 1193] 
split level 48: [/input-8, 755] 
split level 49: [/input-8, 588] 
split level 50: [/input, 3176] 
split level 51: [/input-8, 491] 
split level 52: [/input-8, 1187] 
split level 53: [/input, 3167] 
split level 54: [/input-8, 2018] 
split level 55: [/input-8, 1382] 
split level 56: [/input-8, 441] 
split level 57: [/input, 3165] 
split level 58: [/input-12, 72] 
split level 59: [/input, 3161] 
split level 60: [/input, 3382] 
split level 61: [/input-8, 40] 
split level 62: [/input, 2602] 
split level 63: [/input-8, 41] 
split level 64: [/input-8, 932] 
split level 65: [/input-8, 145] 
split level 66: [/input-8, 2016] 
split level 67: [/input-8, 404] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 1579] 
split level 70: [/input, 3113] 
split level 71: [/input-8, 1248] 
split level 72: [/input-8, 1931] 
split level 73: [/input-8, 204] 
split level 74: [/input-8, 134] 
split level 75: [/input-8, 1164] 
split level 76: [/input, 2603] 
split level 77: [/input, 3162] 
split level 78: [/input, 2601] 
split level 79: [/input-8, 785] 
split level 80: [/input, 873] 
split level 81: [/input-8, 138] 
split level 82: [/input-8, 1240] 
split level 83: [/input, 3146] 
split level 84: [/input, 2680] 
split level 85: [/input-8, 914] 
split level 86: [/input, 2652] 
split level 87: [/input, 476] 
split level 88: [/input-8, 1556] 
split level 89: [/input, 3166] 
split level 90: [/input-8, 1238] 
split level 91: [/input-8, 171] 
split level 92: [/input, 3125] 
split level 93: [/input-8, 342] 
split level 94: [/input-8, 922] 
split level 95: [/input-8, 1214] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 1224] 
split level 98: [/input-8, 1645] 
split level 99: [/input-8, 63] 
split level 100: [/input, 2586] 
split level 101: [/input, 3038] 
split level 102: [/input-8, 175] 
split level 103: [/input, 1124] 
split level 104: [/input-8, 397] 
split level 105: [/input-8, 357] 
split level 106: [/input-8, 248] 
split level 107: [/input, 2637] 
split level 108: [/input-8, 589] 
split level 109: [/input-8, 465] 
split level 110: [/input-8, 931] 
split level 111: [/input, 682] 
split level 112: [/input-8, 2009] 
split level 113: [/input-8, 1165] 
split level 114: [/input-8, 722] 
split level 115: [/input-8, 1376] 
split level 116: [/input, 669] 
split level 117: [/input, 3383] 
split level 118: [/input, 3222] 
split level 119: [/input-8, 326] 
split level 120: [/input, 2649] 
split level 121: [/input, 2988] 
split level 122: [/input-8, 1393] 
split level 123: [/input, 748] 
split level 124: [/input-8, 1399] 
split level 125: [/input, 1652] 
split level 126: [/input-8, 1383] 
split level 127: [/input-8, 2047] 
split level 128: [/input-8, 98] 
split level 129: [/input-8, 1529] 
split level 130: [/input-8, 91] 
split level 131: [/input, 2572] 
split level 132: [/input-8, 1665] 
split level 133: [/input, 2666] 
split level 134: [/input, 3034] 
split level 135: [/input-8, 312] 
split level 136: [/input-8, 333] 
split level 137: [/input, 3973] 
split level 138: [/input-8, 418] 
split level 139: [/input-8, 238] 
split level 140: [/input-8, 899] 
split level 141: [/input-8, 1993] 
split level 142: [/input, 3286] 
split level 143: [/input, 3419] 
split level 144: [/input, 2896] 
split level 145: [/input, 1565] 
split level 146: [/input, 1599] 
split level 147: [/input-8, 401] 
split level 148: [/input, 875] 
split level 149: [/input, 823] 
split level 150: [/input, 4068] 
split level 151: [/input, 3354] 
split level 152: [/input-8, 1375] 
split level 153: [/input, 839] 
split level 154: [/input, 3235] 
split level 155: [/input-8, 1619] 
split level 156: [/input, 2880] 
split level 157: [/input, 745] 
split level 158: [/input, 1021] 
split level 159: [/input, 788] 
split level 160: [/input-8, 1331] 
split level 161: [/input, 1748] 
split level 162: [/input, 276] 
split level 163: [/input, 1615] 
split level 164: [/input-8, 1545] 
split level 165: [/input-8, 177] 
split level 166: [/input-8, 1718] 
split level 167: [/input-8, 749] 
split level 168: [/input-8, 395] 
split level 169: [/input-8, 865] 
split level 170: [/input, 837] 
split level 171: [/input, 1400] 
split level 172: [/input, 2571] 
split level 173: [/input, 1581] 
split level 174: [/input-8, 169] 
split level 175: [/input, 1686] 
split level 176: [/input-8, 440] 
split level 177: [/input, 1490] 
split level 178: [/input, 2645] 
split level 179: [/input-8, 2008] 
split level 180: [/input, 986] 
split level 181: [/input-8, 490] 
split level 182: [/input-8, 1929] 
split level 183: [/input-8, 1963] 
split level 184: [/input, 974] 
split level 185: [/input, 3281] 
split level 186: [/input, 1018] 
split level 187: [/input, 2613] 
split level 188: [/input, 853] 
split level 189: [/input-8, 2001] 
split level 190: [/input-8, 334] 
split level 191: [/input-8, 107] 
split level 192: [/input, 2028] 
split level 193: [/input, 275] 
split level 194: [/input, 681] 
split level 195: [/input, 790] 
split level 196: [/input, 903] 
split level 197: [/input-8, 587] 
split level 198: [/input, 209] 
split level 199: [/input, 773] 
Time: prepare 0.0064    bound 0.1020    transfer 0.0073    finalize 0.0066    func 0.1225    
Accumulated time: func 0.2293    prepare 0.0170    bound 0.2083    transfer 0.0074    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.11695075) min lb tensor(-0.26429516)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.015148401260375977 
BICCOS Cumulative time: 0.015148401260375977
Preprocessing time: 0.013107061386108398 Inference time: 0.00037670135498046875 Add cuts time: 0.0001342296600341797 Cut analysis time: 0.0015304088592529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25035 (1), -0.25029 (1), -0.25001 (1), -0.24989 (1), -0.24984 (1), -0.24972 (1), -0.24953 (1), -0.24941 (1), -0.24936 (1), -0.24912 (1), -0.24890 (1), -0.24852 (1), -0.24845 (1), -0.24807 (1), -0.24656 (1), -0.24620 (1), -0.24565 (1), -0.24526 (1), -0.24488 (1), -0.24445 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5451    set_bounds 0.0130    solve 0.1226    add 0.2116    
Accumulated time: pickout 0.0004    decision 0.5451    set_bounds 0.0130    solve 0.1226    add 0.2116    
Current (lb-rhs): -0.2503542900085449
50 domains visited
Cumulative time: 1.0419731140136719

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 56] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 56] [/input-12, 56] [/input-12, 97] [/input-12, 97] [/input-12, 97] [/input-12, 56] [/input-12, 97] [/input-12, 97] [/input-12, 56] [/input-12, 97] 
split level 2: [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 97] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 61] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2308904528617859
10 lb beta sum: 1.161550760269165, worst -0.1642627716064453
Time: prepare 0.0081    bound 0.1313    transfer 0.0010    finalize 0.0039    func 0.1472    
Accumulated time: func 0.3765    prepare 0.0255    bound 0.3396    transfer 0.0085    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.45590091) min lb tensor(-0.16405386)
Number of Verified Splits: 122 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.023712635040283203 
BICCOS Cumulative time: 0.03886103630065918
Preprocessing time: 0.014018774032592773 Inference time: 0.006635427474975586 Add cuts time: 0.0020949840545654297 Cut analysis time: 0.0009634494781494141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05229 (2), -0.04797 (2), -0.04223 (2), -0.04183 (2), -0.04128 (2), -0.04121 (2), -0.03833 (2), -0.03722 (2), -0.03566 (2), -0.03409 (2), -0.03236 (2), -0.03235 (2), -0.03210 (2), -0.03204 (2), -0.03143 (2), -0.02993 (2), -0.02851 (2), -0.02815 (2), -0.02772 (2), -0.02711 (2), 
Length of domains: 50
Time: pickout 0.0099    decision 0.0274    set_bounds 0.0206    solve 0.1474    add 0.2648    
Accumulated time: pickout 0.0103    decision 0.5725    set_bounds 0.0335    solve 0.2700    add 0.4764    
Current (lb-rhs): -0.05229151248931885
100 domains visited
Cumulative time: 1.5430264472961426

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 34] [/input-12, 31] [/input-12, 34] [/input-12, 31] [/input-12, 31] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1415988802909851
10 lb beta sum: 2.5315029621124268, worst -0.02580273151397705
Time: prepare 0.0081    bound 0.1627    transfer 0.0019    finalize 0.0033    func 0.1798    
Accumulated time: func 0.5563    prepare 0.0339    bound 0.5023    transfer 0.0104    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.62370127) min lb tensor(-0.02521455)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.04687833786010742 
BICCOS Cumulative time: 0.0857393741607666
Preprocessing time: 0.015311002731323242 Inference time: 0.01958179473876953 Add cuts time: 0.010831832885742188 Cut analysis time: 0.001153707504272461
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0083    decision 0.0236    set_bounds 0.0196    solve 0.1809    add 0.0227    
Accumulated time: pickout 0.0186    decision 0.5961    set_bounds 0.0531    solve 0.4509    add 0.4991    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.00311384e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.40901336e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59, 56]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.01569876e-01, 5.65083474e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59, 56]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.01569876e-01, 8.29765648e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([97, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.50103056e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15130364894866943
10 lb beta sum: 0.6458916664123535, worst -0.10090404748916626
Time: prepare 0.0005    bound 0.1532    transfer 0.0003    finalize 0.0002    func 0.1543    
Accumulated time: func 0.7106    prepare 0.0343    bound 0.6555    transfer 0.0107    finalize 0.0142    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] 
split level 1: [/input-12, 61] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 34] 
split level 4: [/input-8, 1249] 
split level 5: [/input-8, 1259] 
split level 6: [/input-8, 1241] 
split level 7: [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8986124992370605, worst -0.047614097595214844
10 lb beta sum: 1.933295488357544, worst -0.04713165760040283
Time: prepare 0.0116    bound 0.1417    transfer 0.0046    finalize 0.0059    func 0.1657    
Accumulated time: func 0.8763    prepare 0.0464    bound 0.7972    transfer 0.0153    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.67279470) min lb tensor(-0.04697132)
Number of Verified Splits: 232 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.8986124992370605, worst -0.21521258354187012
10 lb beta sum: 1.9991787672042847, worst -0.10059976577758789
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 13
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.32252955436706543 
BICCOS Cumulative time: 0.40826892852783203
Preprocessing time: 0.008311748504638672 Inference time: 0.30539965629577637 Add cuts time: 0.007634639739990234 Cut analysis time: 0.0011835098266601562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04697 (8), -0.04603 (8), -0.04327 (8), -0.04233 (8), -0.03957 (8), -0.03863 (8), -0.03587 (8), -0.03493 (8), -0.01933 (8), -0.01843 (8), -0.01663 (8), -0.01559 (8), -0.01512 (8), -0.01422 (8), -0.01404 (8), -0.01310 (8), -0.01208 (8), -0.01167 (8), -0.01105 (8), -0.01073 (8), 
Length of domains: 24
Time: pickout 0.0006    decision 0.0240    set_bounds 0.0261    solve 0.1658    add 0.1050    
Accumulated time: pickout 0.0192    decision 0.6201    set_bounds 0.0792    solve 0.6168    add 0.6041    
Current (lb-rhs): -0.04697132110595703
124 domains visited
Cumulative time: 2.6805405616760254

BaB round 2
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] [/input-8, 44] [/input-8, 166] [/input-8, 44] 
split level 2: [/input-8, 166] [/input-8, 166] [/input-8, 1644] [/input-8, 166] [/input-8, 166] [/input-8, 803] [/input-8, 166] [/input-8, 166] [/input-8, 1644] [/input-8, 166] 
split level 3: [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 1644] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03813362121582031
10 lb beta sum: 0.24612075090408325, worst -0.03315693140029907
Time: prepare 0.0079    bound 0.1427    transfer 0.0076    finalize 0.0044    func 0.1653    
Accumulated time: func 1.0415    prepare 0.0546    bound 0.9399    transfer 0.0230    finalize 0.0245    
all_split False
======================Cut inference begins======================
max lb tensor(0.06718209) min lb tensor(-0.03303319)
Number of Verified Splits: 327 of 384
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.05315399169921875 
BICCOS Cumulative time: 0.4614229202270508
Preprocessing time: 0.012516498565673828 Inference time: 0.03610539436340332 Add cuts time: 0.002166271209716797 Cut analysis time: 0.0023658275604248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03303 (12), -0.03263 (12), -0.03197 (12), -0.03152 (12), -0.02931 (12), -0.02879 (12), -0.02861 (12), -0.02825 (12), -0.02820 (12), -0.02782 (12), -0.02769 (12), -0.02737 (12), -0.02518 (12), -0.02505 (12), -0.02489 (12), -0.02437 (12), -0.02410 (12), -0.02407 (12), -0.02398 (12), -0.02354 (12), 
Length of domains: 57
Time: pickout 0.0023    decision 0.0206    set_bounds 0.0370    solve 0.1655    add 0.0622    
Accumulated time: pickout 0.0214    decision 0.6407    set_bounds 0.1162    solve 0.7822    add 0.6663    
Current (lb-rhs): -0.03303319215774536
181 domains visited
Cumulative time: 3.0309970378875732

BaB round 3
batch: 57
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] [/input-8, 1258] 
split level 1: [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02999657392501831
10 lb beta sum: 0.6845191717147827, worst -0.025090038776397705
Time: prepare 0.0048    bound 0.1413    transfer 0.0038    finalize 0.0016    func 0.1532    
Accumulated time: func 1.1948    prepare 0.0596    bound 1.0812    transfer 0.0268    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.01745886) min lb tensor(-0.02502966)
Number of Verified Splits: 129 of 228
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.025787830352783203 
BICCOS Cumulative time: 0.487210750579834
Preprocessing time: 0.007529497146606445 Inference time: 0.015926122665405273 Add cuts time: 0.0009794235229492188 Cut analysis time: 0.0013527870178222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02503 (14), -0.02441 (14), -0.02395 (14), -0.02326 (14), -0.02130 (14), -0.02061 (14), -0.02060 (14), -0.02023 (14), -0.02001 (14), -0.01980 (14), -0.01946 (14), -0.01912 (14), -0.01888 (14), -0.01865 (14), -0.01850 (14), -0.01832 (14), -0.01820 (14), -0.01818 (14), -0.01778 (14), -0.01750 (14), 
Length of domains: 99
Time: pickout 0.0064    decision 0.0148    set_bounds 0.0113    solve 0.1533    add 0.0813    
Accumulated time: pickout 0.0278    decision 0.6555    set_bounds 0.1275    solve 0.9356    add 0.7477    
Current (lb-rhs): -0.025029659271240234
280 domains visited
Cumulative time: 3.338876724243164

BaB round 4
batch: 99
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] [/input-8, 491] 
split level 1: [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] [/input-8, 1636] [/input-8, 755] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1307485103607178, worst -0.02163839340209961
10 lb beta sum: 1.5258620977401733, worst -0.018684327602386475
Time: prepare 0.0184    bound 0.2091    transfer 0.0082    finalize 0.0042    func 0.2428    
Accumulated time: func 1.4376    prepare 0.0783    bound 1.2903    transfer 0.0350    finalize 0.0304    
all_split False
======================Cut inference begins======================
max lb tensor(0.00708026) min lb tensor(-0.01863480)
Number of Verified Splits: 155 of 396
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.044065237045288086 
BICCOS Cumulative time: 0.5312759876251221
Preprocessing time: 0.015148162841796875 Inference time: 0.02490997314453125 Add cuts time: 0.0017733573913574219 Cut analysis time: 0.002233743667602539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01863 (16), -0.01761 (16), -0.01754 (16), -0.01642 (16), -0.01621 (16), -0.01599 (16), -0.01500 (16), -0.01492 (16), -0.01489 (16), -0.01423 (16), -0.01419 (16), -0.01388 (16), -0.01384 (16), -0.01343 (16), -0.01337 (16), -0.01318 (16), -0.01310 (16), -0.01268 (16), -0.01247 (16), -0.01228 (16), 
Length of domains: 241
Time: pickout 0.0160    decision 0.0286    set_bounds 0.0221    solve 0.2430    add 0.0805    
Accumulated time: pickout 0.0439    decision 0.6841    set_bounds 0.1496    solve 1.1785    add 0.8282    
Current (lb-rhs): -0.018634796142578125
521 domains visited
Cumulative time: 3.786170482635498

BaB round 5
batch: 241
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] [/input-8, 612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021862387657165527
10 lb beta sum: 0.567771315574646, worst -0.017084777355194092
Time: prepare 0.0107    bound 0.1548    transfer 0.0065    finalize 0.0039    func 0.1792    
Accumulated time: func 1.6168    prepare 0.0893    bound 1.4451    transfer 0.0415    finalize 0.0343    
all_split False
======================Cut inference begins======================
max lb tensor(0.25241995) min lb tensor(-0.01705173)
Number of Verified Splits: 335 of 482
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.0709066390991211 
BICCOS Cumulative time: 0.6021826267242432
Preprocessing time: 0.01627802848815918 Inference time: 0.049285173416137695 Add cuts time: 0.0032863616943359375 Cut analysis time: 0.0020570755004882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01705 (17), -0.01605 (17), -0.01589 (17), -0.01478 (17), -0.01468 (17), -0.01449 (17), -0.01340 (17), -0.01335 (17), -0.01332 (17), -0.01254 (17), -0.01243 (17), -0.01232 (17), -0.01220 (17), -0.01171 (17), -0.01167 (17), -0.01152 (17), -0.01127 (17), -0.01106 (17), -0.01095 (17), -0.01078 (17), 
Length of domains: 147
Time: pickout 0.0173    decision 0.2415    set_bounds 0.0245    solve 0.1794    add 0.0910    
Accumulated time: pickout 0.0611    decision 0.9255    set_bounds 0.1741    solve 1.3579    add 0.9192    
Current (lb-rhs): -0.017051726579666138
668 domains visited
Cumulative time: 4.418149709701538

BaB round 6
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] [/input-8, 1644] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017433255910873413
10 lb beta sum: 1.0594958066940308, worst -0.012733817100524902
Time: prepare 0.0064    bound 0.1564    transfer 0.0020    finalize 0.0018    func 0.1696    
Accumulated time: func 1.7863    prepare 0.0959    bound 1.6015    transfer 0.0436    finalize 0.0361    
all_split False
======================Cut inference begins======================
max lb tensor(0.23937398) min lb tensor(-0.01271820)
Number of Verified Splits: 177 of 294
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.037596702575683594 
BICCOS Cumulative time: 0.6397793292999268
Preprocessing time: 0.009473085403442383 Inference time: 0.024854183197021484 Add cuts time: 0.0017552375793457031 Cut analysis time: 0.0015141963958740234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01272 (18), -0.01211 (18), -0.01182 (18), -0.01170 (18), -0.01105 (18), -0.01084 (18), -0.01071 (18), -0.01054 (18), -0.01035 (18), -0.00981 (18), -0.00950 (18), -0.00942 (18), -0.00930 (18), -0.00918 (18), -0.00902 (18), -0.00900 (18), -0.00842 (18), -0.00822 (18), -0.00809 (18), -0.00801 (18), 
Length of domains: 117
Time: pickout 0.0151    decision 0.0215    set_bounds 0.0134    solve 0.1697    add 0.0805    
Accumulated time: pickout 0.0763    decision 0.9470    set_bounds 0.1875    solve 1.5275    add 0.9997    
Current (lb-rhs): -0.01271820068359375
785 domains visited
Cumulative time: 4.764278888702393

BaB round 7
batch: 117
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 790] [/input-8, 790] [/input, 3161] [/input, 3161] [/input, 3161] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input, 3161] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014573335647583008
10 lb beta sum: 1.10542893409729, worst -0.009145379066467285
Time: prepare 0.0053    bound 0.1342    transfer 0.0007    finalize 0.0016    func 0.1434    
Accumulated time: func 1.9298    prepare 0.1014    bound 1.7357    transfer 0.0443    finalize 0.0377    
all_split False
======================Cut inference begins======================
max lb tensor(0.01435590) min lb tensor(-0.00912833)
Number of Verified Splits: 165 of 234
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.03466629981994629 
BICCOS Cumulative time: 0.674445629119873
Preprocessing time: 0.007793426513671875 Inference time: 0.023264169692993164 Add cuts time: 0.001735687255859375 Cut analysis time: 0.001873016357421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00913 (19), -0.00875 (19), -0.00792 (19), -0.00762 (19), -0.00714 (19), -0.00647 (19), -0.00627 (19), -0.00581 (19), -0.00563 (19), -0.00553 (19), -0.00544 (19), -0.00533 (19), -0.00510 (19), -0.00506 (19), -0.00454 (19), -0.00453 (19), -0.00435 (19), -0.00434 (19), -0.00425 (19), -0.00423 (19), 
Length of domains: 69
Time: pickout 0.0187    decision 0.0188    set_bounds 0.0100    solve 0.1435    add 0.0763    
Accumulated time: pickout 0.0949    decision 0.9659    set_bounds 0.1976    solve 1.6711    add 1.0759    
Current (lb-rhs): -0.009128332138061523
854 domains visited
Cumulative time: 5.074432373046875

BaB round 8
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-8, 790] [/input-8, 790] [/input-12, 8] [/input-8, 790] [/input-8, 790] [/input-8, 790] [/input-12, 8] [/input-8, 790] [/input-8, 790] 
split level 1: [/input-8, 1644] [/input, 3161] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1644] [/input, 3161] [/input-8, 1644] [/input, 3161] [/input-8, 1242] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010033577680587769
10 lb beta sum: 0.6562624573707581, worst -0.004185318946838379
Time: prepare 0.0066    bound 0.1351    transfer 0.0035    finalize 0.0033    func 0.1503    
Accumulated time: func 2.0801    prepare 0.1082    bound 1.8707    transfer 0.0478    finalize 0.0409    
all_split False
======================Cut inference begins======================
max lb tensor(0.33073568) min lb tensor(-0.00413895)
Number of Verified Splits: 253 of 276
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.05161786079406738 
BICCOS Cumulative time: 0.7260634899139404
Preprocessing time: 0.01037144660949707 Inference time: 0.03777956962585449 Add cuts time: 0.001898050308227539 Cut analysis time: 0.0015687942504882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00414 (21), -0.00346 (21), -0.00314 (21), -0.00292 (21), -0.00256 (21), -0.00244 (21), -0.00242 (21), -0.00231 (21), -0.00196 (21), -0.00182 (21), -0.00153 (21), -0.00137 (21), -0.00126 (21), -0.00124 (21), -0.00088 (21), -0.00072 (21), -0.00063 (21), -0.00063 (21), -0.00062 (21), -0.00032 (21), 
Length of domains: 23
Time: pickout 0.0137    decision 0.0156    set_bounds 0.0183    solve 0.1505    add 0.0479    
Accumulated time: pickout 0.1086    decision 0.9815    set_bounds 0.2159    solve 1.8216    add 1.1238    
Current (lb-rhs): -0.004138946533203125
877 domains visited
Cumulative time: 5.380892753601074

BaB round 9
batch: 23
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-8, 1242] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-8, 1644] 
split level 1: [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input, 3161] [/input-8, 1242] [/input-8, 1644] [/input-8, 1242] [/input, 3161] 
split level 2: [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] [/input-8, 1248] 
split level 3: [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] [/input-8, 1579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0005577206611633301

all verified at 1th iter
Time: prepare 0.0097    bound 0.0140    transfer 0.0029    finalize 0.0027    func 0.0315    
Accumulated time: func 2.1116    prepare 0.1181    bound 1.8847    transfer 0.0507    finalize 0.0436    
all_split False
======================Cut inference begins======================
max lb tensor(0.05214331) min lb tensor(0.00015962)
Number of Verified Splits: 368 of 368
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.01361393928527832 
BICCOS Cumulative time: 0.7396774291992188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0023    decision 0.0199    set_bounds 0.0351    solve 0.0317    add 0.0001    
Accumulated time: pickout 0.1109    decision 1.0013    set_bounds 0.2509    solve 1.8532    add 1.1239    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
877 domains visited
Cumulative time: 5.4860804080963135

found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=4_27017892.log

Properties batch 8, size 1
Remaining timeout: 192.07755875587463
Verifying property 8 with 1 instances.
##### Instance 137 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.48484540]], device='cuda:0') need to verify.
Model prediction is: tensor([-20.16277122, -21.12893295, -16.04788589, -16.93409729, -16.10508919,
        -17.10481453, -15.34734917, -18.76787186, -21.06470108, -20.31587410],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.48484540]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 438
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 724
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
Cut time: 0.0010447502136230469
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0506    transfer 0.0001    finalize 0.0001    func 0.0510    
Accumulated time: func 0.0510    prepare 0.0002    bound 0.0506    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 56] 
split level 5: [/input-12, 61] 
split level 6: [/input-12, 12] 
split level 7: [/input-12, 7] 
split level 8: [/input-12, 34] 
split level 9: [/input-12, 6] 
split level 10: [/input-8, 1635] 
split level 11: [/input-12, 68] 
split level 12: [/input-8, 474] 
split level 13: [/input-8, 1619] 
split level 14: [/input-8, 811] 
split level 15: [/input-8, 157] 
split level 16: [/input-8, 1636] 
split level 17: [/input-8, 91] 
split level 18: [/input-8, 1249] 
split level 19: [/input-8, 804] 
split level 20: [/input-8, 1259] 
split level 21: [/input-8, 1939] 
split level 22: [/input-8, 476] 
split level 23: [/input-8, 1725] 
split level 24: [/input-8, 44] 
split level 25: [/input-8, 1580] 
split level 26: [/input-12, 20] 
split level 27: [/input-8, 99] 
split level 28: [/input-8, 1718] 
split level 29: [/input-8, 1963] 
split level 30: [/input-8, 803] 
split level 31: [/input-8, 418] 
split level 32: [/input-8, 161] 
split level 33: [/input-8, 92] 
split level 34: [/input-8, 269] 
split level 35: [/input-12, 97] 
split level 36: [/input-8, 932] 
split level 37: [/input-8, 757] 
split level 38: [/input-8, 1954] 
split level 39: [/input-8, 406] 
split level 40: [/input-8, 98] 
split level 41: [/input-8, 54] 
split level 42: [/input-8, 1644] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 428] 
split level 45: [/input-8, 146] 
split level 46: [/input-8, 481] 
split level 47: [/input-8, 1645] 
split level 48: [/input-8, 1581] 
split level 49: [/input-8, 1258] 
split level 50: [/input-8, 43] 
split level 51: [/input-8, 482] 
split level 52: [/input-8, 914] 
split level 53: [/input-8, 38] 
split level 54: [/input-8, 153] 
split level 55: [/input-8, 284] 
split level 56: [/input-8, 107] 
split level 57: [/input-8, 1241] 
split level 58: [/input-8, 426] 
split level 59: [/input-8, 755] 
split level 60: [/input-8, 28] 
split level 61: [/input-8, 1929] 
split level 62: [/input-8, 483] 
split level 63: [/input-8, 922] 
split level 64: [/input-8, 1568] 
split level 65: [/input, 2988] 
split level 66: [/input-8, 785] 
split level 67: [/input-8, 347] 
split level 68: [/input-8, 441] 
split level 69: [/input-8, 1650] 
split level 70: [/input-8, 491] 
split level 71: [/input-8, 1556] 
split level 72: [/input-8, 790] 
split level 73: [/input-8, 1579] 
split level 74: [/input, 3054] 
split level 75: [/input-8, 40] 
split level 76: [/input-8, 401] 
split level 77: [/input-8, 465] 
split level 78: [/input-8, 404] 
split level 79: [/input-8, 931] 
split level 80: [/input, 172] 
split level 81: [/input-8, 722] 
split level 82: [/input-8, 166] 
split level 83: [/input-8, 899] 
split level 84: [/input-8, 66] 
split level 85: [/input-8, 505] 
split level 86: [/input-8, 1614] 
split level 87: [/input-8, 588] 
split level 88: [/input-8, 1187] 
split level 89: [/input-8, 397] 
split level 90: [/input-8, 333] 
split level 91: [/input-8, 145] 
split level 92: [/input-8, 1027] 
split level 93: [/input-8, 1936] 
split level 94: [/input-8, 186] 
split level 95: [/input-8, 749] 
split level 96: [/input-8, 41] 
split level 97: [/input-8, 490] 
split level 98: [/input-8, 65] 
split level 99: [/input-8, 913] 
split level 100: [/input-8, 357] 
split level 101: [/input-8, 1248] 
split level 102: [/input-8, 612] 
split level 103: [/input-8, 1931] 
split level 104: [/input-8, 63] 
split level 105: [/input-8, 1283] 
split level 106: [/input, 378] 
split level 107: [/input-8, 1603] 
split level 108: [/input-8, 25] 
split level 109: [/input-8, 1242] 
split level 110: [/input-8, 312] 
split level 111: [/input-8, 1238] 
split level 112: [/input-8, 449] 
split level 113: [/input, 3383] 
split level 114: [/input, 3034] 
split level 115: [/input-8, 1193] 
split level 116: [/input-8, 342] 
split level 117: [/input-8, 1395] 
split level 118: [/input, 3038] 
split level 119: [/input-8, 1706] 
split level 120: [/input, 3167] 
split level 121: [/input-8, 1602] 
split level 122: [/input, 1124] 
split level 123: [/input-8, 177] 
split level 124: [/input-8, 1240] 
split level 125: [/input, 3300] 
split level 126: [/input, 1332] 
split level 127: [/input-8, 1596] 
split level 128: [/input-8, 1243] 
split level 129: [/input-8, 101] 
split level 130: [/input-8, 1224] 
split level 131: [/input-8, 1693] 
split level 132: [/input, 3161] 
split level 133: [/input-8, 1529] 
split level 134: [/input-8, 1642] 
split level 135: [/input-8, 1214] 
split level 136: [/input, 1196] 
split level 137: [/input-8, 236] 
split level 138: [/input-8, 326] 
split level 139: [/input-8, 169] 
split level 140: [/input-8, 2018] 
split level 141: [/input-8, 716] 
split level 142: [/input-8, 138] 
split level 143: [/input-8, 1167] 
split level 144: [/input-8, 587] 
split level 145: [/input-8, 1545] 
split level 146: [/input-8, 139] 
split level 147: [/input, 1450] 
split level 148: [/input-8, 175] 
split level 149: [/input-8, 1331] 
split level 150: [/input, 1080] 
split level 151: [/input, 669] 
split level 152: [/input, 476] 
split level 153: [/input-8, 248] 
split level 154: [/input, 501] 
split level 155: [/input-8, 1164] 
split level 156: [/input, 1400] 
split level 157: [/input-8, 2047] 
split level 158: [/input-8, 440] 
split level 159: [/input-8, 589] 
split level 160: [/input-8, 1694] 
split level 161: [/input, 1334] 
split level 162: [/input-8, 1175] 
split level 163: [/input, 1021] 
split level 164: [/input, 4068] 
split level 165: [/input, 1686] 
split level 166: [/input, 2613] 
split level 167: [/input-8, 204] 
split level 168: [/input, 3286] 
split level 169: [/input-8, 238] 
split level 170: [/input-8, 1699] 
split level 171: [/input, 377] 
split level 172: [/input, 974] 
split level 173: [/input-8, 395] 
split level 174: [/input-8, 1225] 
split level 175: [/input, 218] 
split level 176: [/input, 3926] 
split level 177: [/input, 3125] 
split level 178: [/input, 1599] 
split level 179: [/input, 1565] 
split level 180: [/input, 1652] 
split level 181: [/input, 1018] 
split level 182: [/input-8, 334] 
split level 183: [/input, 748] 
split level 184: [/input-8, 1705] 
split level 185: [/input, 1615] 
split level 186: [/input-8, 1775] 
split level 187: [/input-8, 1165] 
split level 188: [/input, 1180] 
split level 189: [/input-8, 865] 
split level 190: [/input-8, 1154] 
split level 191: [/input, 3541] 
split level 192: [/input-8, 1714] 
split level 193: [/input-8, 134] 
split level 194: [/input, 209] 
split level 195: [/input, 3166] 
split level 196: [/input-8, 227] 
split level 197: [/input, 3437] 
split level 198: [/input, 1490] 
split level 199: [/input, 2645] 
Time: prepare 0.0060    bound 0.0946    transfer 0.0036    finalize 0.0031    func 0.1074    
Accumulated time: func 0.1584    prepare 0.0161    bound 0.1452    transfer 0.0037    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05249542) min lb tensor(-0.48483217)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.011771440505981445 
BICCOS Cumulative time: 0.011771440505981445
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.46542 (1), -0.46539 (1), -0.46526 (1), -0.46516 (1), -0.46444 (1), -0.46420 (1), -0.46408 (1), -0.46403 (1), -0.46206 (1), -0.46177 (1), -0.46133 (1), -0.46098 (1), -0.46044 (1), -0.45939 (1), -0.45896 (1), -0.45891 (1), -0.45799 (1), -0.45754 (1), -0.45753 (1), -0.45485 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5187    set_bounds 0.0090    solve 0.1075    add 0.1942    
Accumulated time: pickout 0.0004    decision 0.5187    set_bounds 0.0090    solve 0.1075    add 0.1942    
Current (lb-rhs): -0.46542125940322876
50 domains visited
Cumulative time: 0.9156861305236816

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 31] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 8] [/input-12, 59] [/input-12, 8] 
split level 2: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 3: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 6] [/input-12, 72] [/input-12, 6] [/input-12, 6] 
Time: prepare 0.0069    bound 0.0926    transfer 0.0010    finalize 0.0023    func 0.1028    
Accumulated time: func 0.2612    prepare 0.0232    bound 0.2378    transfer 0.0047    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.24742889) min lb tensor(-0.44515133)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.01633310317993164 
BICCOS Cumulative time: 0.028104543685913086
Preprocessing time: 0.012209415435791016 Inference time: 0.0011708736419677734 Add cuts time: 0.0007150173187255859 Cut analysis time: 0.0022377967834472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19721 (2), -0.19663 (2), -0.19512 (2), -0.19194 (2), -0.18706 (2), -0.18079 (2), -0.18070 (2), -0.17756 (2), -0.17713 (2), -0.17694 (2), -0.17566 (2), -0.17544 (2), -0.16937 (2), -0.15780 (2), -0.15107 (2), -0.14526 (2), -0.14252 (2), -0.14146 (2), -0.13971 (2), -0.13862 (2), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0207    set_bounds 0.0132    solve 0.1029    add 0.2066    
Accumulated time: pickout 0.0082    decision 0.5393    set_bounds 0.0222    solve 0.2104    add 0.4008    
Current (lb-rhs): -0.1972140073776245
100 domains visited
Cumulative time: 1.290400505065918

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 8] [/input-12, 31] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 31] [/input-12, 72] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 6] [/input-12, 61] [/input-12, 72] [/input-12, 72] [/input-12, 6] 
split level 3: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17550718784332275
10 lb beta sum: 0.7714958190917969, worst -0.14859819412231445
Time: prepare 0.0061    bound 0.1184    transfer 0.0011    finalize 0.0023    func 0.1305    
Accumulated time: func 0.3917    prepare 0.0296    bound 0.3562    transfer 0.0058    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.73487496) min lb tensor(-0.14463884)
Number of Verified Splits: 250 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 15
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.03242778778076172 
BICCOS Cumulative time: 0.060532331466674805
Preprocessing time: 0.011913776397705078 Inference time: 0.01314091682434082 Add cuts time: 0.0057642459869384766 Cut analysis time: 0.0016088485717773438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11632 (3), -0.11607 (3), -0.11481 (3), -0.11201 (3), -0.11144 (3), -0.11024 (3), -0.11016 (3), -0.10989 (3), -0.10925 (3), -0.10795 (3), -0.10681 (3), -0.10649 (3), -0.10524 (3), -0.10361 (3), -0.10191 (3), -0.10186 (3), -0.09926 (3), -0.09781 (3), -0.09188 (3), -0.09027 (3), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0197    set_bounds 0.0157    solve 0.1306    add 0.2460    
Accumulated time: pickout 0.0162    decision 0.5590    set_bounds 0.0379    solve 0.3410    add 0.6468    
Current (lb-rhs): -0.11632005870342255
150 domains visited
Cumulative time: 1.7501018047332764

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 59] [/input-12, 31] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 31] 
split level 1: [/input-12, 61] [/input-12, 61] [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] 
split level 2: [/input-12, 6] [/input-12, 6] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 6] 
split level 3: [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-8, 1619] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.16184651851654053
10 lb beta sum: 1.7259042263031006, worst -0.04894542694091797
Time: prepare 0.0072    bound 0.1417    transfer 0.0086    finalize 0.0038    func 0.1640    
Accumulated time: func 0.5557    prepare 0.0371    bound 0.4980    transfer 0.0143    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.50891650) min lb tensor(-0.04643649)
Number of Verified Splits: 312 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 12
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.03877568244934082 
BICCOS Cumulative time: 0.09930801391601562
Preprocessing time: 0.012744665145874023 Inference time: 0.015832901000976562 Add cuts time: 0.008616209030151367 Cut analysis time: 0.0015819072723388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04644 (4), -0.04642 (4), -0.04641 (4), -0.04639 (4), -0.04636 (4), -0.04634 (4), -0.04560 (4), -0.04550 (4), -0.04486 (4), -0.04486 (4), -0.04483 (4), -0.04479 (4), -0.03941 (4), -0.03940 (4), -0.03836 (4), -0.03815 (4), -0.03063 (4), -0.03061 (4), -0.03043 (4), -0.02889 (4), 
Length of domains: 48
Time: pickout 0.0102    decision 0.0241    set_bounds 0.0214    solve 0.1641    add 0.4081    
Accumulated time: pickout 0.0264    decision 0.5831    set_bounds 0.0593    solve 0.5051    add 1.0549    
Current (lb-rhs): -0.04643648862838745
198 domains visited
Cumulative time: 2.4239299297332764

Shallow-BaB round 5
batch: 48
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 59] [/input-12, 72] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 72] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-8, 1636] [/input-8, 1636] [/input-12, 6] [/input-12, 6] [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] 
split level 3: [/input-12, 12] [/input-12, 12] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1259] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8460382223129272, worst -0.5160462260246277
10 lb beta sum: 2.360417366027832, worst -0.014735639095306396
Time: prepare 0.0161    bound 0.1339    transfer 0.0027    finalize 0.0026    func 0.1577    
Accumulated time: func 0.7134    prepare 0.0535    bound 0.6319    transfer 0.0170    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.64480138) min lb tensor(-0.01285380)
Number of Verified Splits: 354 of 384
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts: total 248 constraints, 24781 nonzero elements
cuts preparing time: 0.0146
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 260.
#cuts 1-3: 86
#cuts 4-6: 2
#cuts 7-9: 1
#cuts 10-12: 2
#cuts 13-15: 4
#cuts 16-18: 8
#cuts 19-21: 5
#cuts >= 20: 152
BICCOS time: 0.24839162826538086 
BICCOS Cumulative time: 0.3476996421813965
Preprocessing time: 0.011538028717041016 Inference time: 0.01884007453918457 Add cuts time: 0.006551504135131836 Cut analysis time: 0.21146202087402344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0082    decision 0.0235    set_bounds 0.0150    solve 0.1579    add 0.0267    
Accumulated time: pickout 0.0346    decision 0.6067    set_bounds 0.0743    solve 0.6629    add 1.0816    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
198 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.14946990e-11, 7.51467496e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [0.055427804589271545], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.14946990e-11, 2.18504712e-01, 5.38514405e-02, 3.77167910e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [-1.0], [0], [0.055427804589271545], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.14946990e-11, 2.18504712e-01, 5.38514405e-02, 5.56581467e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [1.6302678998216374e+30], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.14946990e-11, 2.18504712e-01, 5.38514405e-02, 1.09861657e-01]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1636], [1.0], [0], [1.6302678998216374e+30], [3]), '/input-12': (tensor([31,  8, 59, 72]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.14946990e-11, 2.18504712e-01, 5.38514405e-02, 5.49138039e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([7.14946990e-11, 2.18504712e-01, 2.20906809e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.35266515e-14, 7.29673356e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.35266515e-14, 2.58246958e-01, 2.93163527e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31,  8, 59]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.35266515e-14, 2.58246958e-01, 1.05128571e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28430044651031494
10 lb beta sum: 4.4247050285339355, worst -0.15864449739456177
Time: prepare 0.0006    bound 0.1766    transfer 0.0003    finalize 0.0003    func 0.1779    
Accumulated time: func 0.8913    prepare 0.0540    bound 0.8085    transfer 0.0173    finalize 0.0144    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 12] [/input-12, 12] 
split level 4: [/input-12, 6] [/input-12, 6] 
split level 5: [/input-8, 1619] [/input-8, 1619] 
split level 6: [/input-8, 1636] [/input-8, 1636] 
cut re-enabled after branching node selection
0 lb beta sum: 5.42405891418457, worst -0.1228187084197998
10 lb beta sum: 5.466061592102051, worst -0.12416160106658936
Time: prepare 0.0112    bound 0.1793    transfer 0.0040    finalize 0.0014    func 0.1976    
Accumulated time: func 1.0889    prepare 0.0656    bound 0.9878    transfer 0.0213    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(1.02420926) min lb tensor(-0.12038255)
Number of Verified Splits: 244 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 5.4243268966674805, worst -0.7327033281326294
10 lb beta sum: 6.283749103546143, worst -0.27913498878479004
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 10
#cuts 4-6: 17
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.33931469917297363 
BICCOS Cumulative time: 0.6870143413543701
Preprocessing time: 0.007254838943481445 Inference time: 0.3219029903411865 Add cuts time: 0.007405757904052734 Cut analysis time: 0.0027511119842529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12038 (7), -0.11514 (7), -0.10084 (7), -0.09930 (7), -0.09534 (7), -0.09454 (7), -0.07806 (7), -0.07328 (7), -0.05094 (7), -0.04454 (7), -0.02722 (7), -0.02077 (7), 
Length of domains: 12
Time: pickout 0.0005    decision 0.0200    set_bounds 0.0231    solve 0.1976    add 0.0431    
Accumulated time: pickout 0.0351    decision 0.6267    set_bounds 0.0974    solve 0.8606    add 1.1247    
Current (lb-rhs): -0.12038254737854004
210 domains visited
Cumulative time: 3.7981412410736084

BaB round 2
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] [/input-12, 56] 
split level 1: [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] [/input-12, 34] 
split level 2: [/input-8, 1259] [/input-8, 1249] [/input-8, 1259] [/input-8, 1259] [/input-8, 1249] [/input-8, 1259] [/input-8, 1259] [/input-8, 1249] [/input-8, 1259] [/input-8, 1259] 
split level 3: [/input-8, 476] [/input-8, 99] [/input-8, 476] [/input-8, 476] [/input-8, 99] [/input-8, 476] [/input-8, 476] [/input-8, 1644] [/input-8, 476] [/input-8, 476] 
split level 4: [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 1718] [/input-8, 1644] [/input-8, 1718] [/input-8, 1718] [/input-8, 99] [/input-8, 1718] [/input-8, 1718] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13926935195922852
10 lb beta sum: 0.6093930006027222, worst -0.13323333859443665
Time: prepare 0.0076    bound 0.1329    transfer 0.0010    finalize 0.0027    func 0.1468    
Accumulated time: func 1.2356    prepare 0.0734    bound 1.1207    transfer 0.0223    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.91737425) min lb tensor(-0.12038255)
Number of Verified Splits: 288 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3430413007736206
10 lb beta sum: 1.1768466234207153, worst -0.2766371965408325
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 10
#cuts 4-6: 17
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.3567836284637451 
BICCOS Cumulative time: 1.0437979698181152
Preprocessing time: 0.011594772338867188 Inference time: 0.33026766777038574 Add cuts time: 0.013051033020019531 Cut analysis time: 0.0018701553344726562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12038 (12), -0.12038 (12), -0.12038 (12), -0.12038 (12), -0.12038 (12), -0.12038 (12), -0.11699 (12), -0.11552 (12), -0.11514 (12), -0.11514 (12), -0.11514 (12), -0.11514 (12), -0.11514 (12), -0.11514 (12), -0.11258 (12), -0.11110 (12), -0.10084 (12), -0.10084 (12), -0.10084 (12), -0.10020 (12), 
Length of domains: 96
Time: pickout 0.0016    decision 0.0167    set_bounds 0.0358    solve 0.1469    add 0.0774    
Accumulated time: pickout 0.0367    decision 0.6434    set_bounds 0.1332    solve 1.0075    add 1.2021    
Current (lb-rhs): -0.12038254737854004
306 domains visited
Cumulative time: 4.442922353744507

BaB round 3
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 91] [/input-8, 91] [/input-8, 428] [/input-8, 91] [/input-8, 91] [/input-8, 428] [/input-8, 1249] [/input-8, 91] [/input-8, 428] [/input-8, 91] 
split level 1: [/input-8, 1249] [/input-8, 428] [/input-8, 99] [/input-8, 1249] [/input-8, 1241] [/input-8, 99] [/input-8, 91] [/input-8, 1241] [/input-8, 99] [/input-8, 1249] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7058531641960144, worst -0.12502193450927734
10 lb beta sum: 0.7058531641960144, worst -0.12482106685638428
Time: prepare 0.0166    bound 0.1321    transfer 0.0024    finalize 0.0021    func 0.1558    
Accumulated time: func 1.3915    prepare 0.0903    bound 1.2528    transfer 0.0247    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(0.02175492) min lb tensor(-0.12038255)
Number of Verified Splits: 54 of 384
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 11
#cuts 4-6: 22
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.022988319396972656 
BICCOS Cumulative time: 1.066786289215088
Preprocessing time: 0.011382818222045898 Inference time: 0.0066585540771484375 Add cuts time: 0.0028829574584960938 Cut analysis time: 0.0020639896392822266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12038 (14), -0.12038 (14), -0.11774 (14), -0.11624 (14), -0.11525 (14), -0.11514 (14), -0.11514 (14), -0.11375 (14), -0.11267 (14), -0.11118 (14), -0.10901 (14), -0.10885 (14), -0.10835 (14), -0.10752 (14), -0.10729 (14), -0.10673 (14), -0.10598 (14), -0.10449 (14), -0.10429 (14), -0.10372 (14), 
Length of domains: 330
Time: pickout 0.0176    decision 0.0174    set_bounds 0.0182    solve 0.1559    add 0.0892    
Accumulated time: pickout 0.0543    decision 0.6608    set_bounds 0.1514    solve 1.1634    add 1.2913    
Current (lb-rhs): -0.12038254737854004
636 domains visited
Cumulative time: 4.771862268447876

BaB round 4
batch: 330
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 99] [/input-8, 757] [/input-8, 1249] [/input-8, 99] [/input-8, 1249] [/input-8, 99] [/input-8, 757] [/input-8, 1249] [/input-8, 99] [/input-8, 1249] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12312984466552734
10 lb beta sum: 0.6528967618942261, worst -0.11730489134788513
Time: prepare 0.0130    bound 0.1407    transfer 0.0100    finalize 0.1556    func 0.3238    
Accumulated time: func 1.7153    prepare 0.1035    bound 1.3935    transfer 0.0347    finalize 0.1763    
all_split False
======================Cut inference begins======================
max lb tensor(0.28482372) min lb tensor(-0.11723983)
Number of Verified Splits: 145 of 660
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 13
#cuts 4-6: 24
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.04685330390930176 
BICCOS Cumulative time: 1.1136395931243896
Preprocessing time: 0.020081281661987305 Inference time: 0.020306110382080078 Add cuts time: 0.004058361053466797 Cut analysis time: 0.002407550811767578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11724 (15), -0.11598 (15), -0.11572 (15), -0.11445 (15), -0.11267 (15), -0.11112 (15), -0.10976 (15), -0.10931 (15), -0.10897 (15), -0.10838 (15), -0.10823 (15), -0.10779 (15), -0.10747 (15), -0.10686 (15), -0.10592 (15), -0.10500 (15), -0.10439 (15), -0.10383 (15), -0.10344 (15), -0.10230 (15), 
Length of domains: 515
Time: pickout 0.0186    decision 0.0311    set_bounds 0.0289    solve 0.3240    add 0.1218    
Accumulated time: pickout 0.0729    decision 0.6920    set_bounds 0.1803    solve 1.4874    add 1.4131    
Current (lb-rhs): -0.11723983287811279
1151 domains visited
Cumulative time: 5.351845741271973

BaB round 5
batch: 515
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1580] [/input-8, 1241] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] [/input-8, 428] [/input-8, 1580] [/input-8, 1580] [/input-8, 1580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11825978755950928
10 lb beta sum: 0.6850349307060242, worst -0.11252671480178833
Time: prepare 0.0199    bound 0.1414    transfer 0.0128    finalize 0.0053    func 0.1863    
Accumulated time: func 1.9015    prepare 0.1237    bound 1.5349    transfer 0.0475    finalize 0.1816    
all_split False
======================Cut inference begins======================
max lb tensor(0.29978788) min lb tensor(-0.11248833)
Number of Verified Splits: 139 of 1030
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 15
#cuts 4-6: 26
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.05937957763671875 
BICCOS Cumulative time: 1.1730191707611084
Preprocessing time: 0.03290963172912598 Inference time: 0.019492149353027344 Add cuts time: 0.004329204559326172 Cut analysis time: 0.002648591995239258
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11249 (16), -0.11117 (16), -0.11095 (16), -0.10962 (16), -0.10772 (16), -0.10616 (16), -0.10484 (16), -0.10455 (16), -0.10445 (16), -0.10436 (16), -0.10427 (16), -0.10398 (16), -0.10330 (16), -0.10301 (16), -0.10282 (16), -0.10281 (16), -0.10264 (16), -0.10245 (16), -0.10138 (16), -0.10051 (16), 
Length of domains: 891
Time: pickout 0.0713    decision 0.0425    set_bounds 0.0456    solve 0.1865    add 0.0988    
Accumulated time: pickout 0.1442    decision 0.7344    set_bounds 0.2259    solve 1.6739    add 1.5120    
Current (lb-rhs): -0.11248832941055298
2042 domains visited
Cumulative time: 5.865138292312622

BaB round 6
batch: 891
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 428] [/input-8, 28] [/input-8, 1954] [/input-8, 428] [/input-8, 428] [/input-8, 1929] [/input-8, 428] [/input-8, 428] [/input-8, 28] [/input-8, 1954] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11152645945549011
10 lb beta sum: 0.7130092978477478, worst -0.10580739378929138
Time: prepare 0.0348    bound 0.1631    transfer 0.0217    finalize 0.0101    func 0.2414    
Accumulated time: func 2.1429    prepare 0.1587    bound 1.6980    transfer 0.0693    finalize 0.1917    
all_split False
======================Cut inference begins======================
max lb tensor(0.30843818) min lb tensor(-0.10579693)
Number of Verified Splits: 221 of 1782
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 78.
#cuts 1-3: 15
#cuts 4-6: 50
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.1096959114074707 
BICCOS Cumulative time: 1.282715082168579
Preprocessing time: 0.05968022346496582 Inference time: 0.03601217269897461 Add cuts time: 0.009922027587890625 Cut analysis time: 0.0040814876556396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10580 (17), -0.10566 (17), -0.10431 (17), -0.10425 (17), -0.10411 (17), -0.10286 (17), -0.10277 (17), -0.10132 (17), -0.10026 (17), -0.10013 (17), -0.10001 (17), -0.09959 (17), -0.09955 (17), -0.09906 (17), -0.09864 (17), -0.09851 (17), -0.09845 (17), -0.09801 (17), -0.09800 (17), -0.09752 (17), 
Length of domains: 1561
Time: pickout 0.0541    decision 0.0628    set_bounds 0.0780    solve 0.2418    add 0.1138    
Accumulated time: pickout 0.1983    decision 0.7973    set_bounds 0.3038    solve 1.9157    add 1.6257    
Current (lb-rhs): -0.1057969331741333
3603 domains visited
Cumulative time: 6.5372841358184814

BaB round 7
batch: 1561
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1635] [/input-8, 1929] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 1635] [/input-8, 476] [/input-8, 1963] [/input-8, 1635] [/input-8, 1929] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10950762033462524
10 lb beta sum: 0.7082008123397827, worst -0.10380396246910095
Time: prepare 0.0704    bound 0.2380    transfer 0.0482    finalize 0.0164    func 0.3944    
Accumulated time: func 2.5373    prepare 0.2293    bound 1.9360    transfer 0.1175    finalize 0.2081    
all_split False
======================Cut inference begins======================
max lb tensor(0.30608875) min lb tensor(-0.10378096)
Number of Verified Splits: 796 of 3122
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts: total 647 constraints, 40983 nonzero elements
cuts preparing time: 0.0208
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 744.
#cuts 1-3: 192
#cuts 4-6: 75
#cuts 7-9: 4
#cuts 10-12: 1
#cuts 13-15: 10
#cuts 16-18: 18
#cuts 19-21: 21
#cuts >= 20: 423
BICCOS time: 0.5987107753753662 
BICCOS Cumulative time: 1.8814258575439453
Preprocessing time: 0.10174131393432617 Inference time: 0.12369966506958008 Add cuts time: 0.023368358612060547 Cut analysis time: 0.3499014377593994
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10378 (18), -0.10352 (18), -0.10224 (18), -0.10209 (18), -0.10197 (18), -0.10076 (18), -0.10054 (18), -0.09921 (18), -0.09843 (18), -0.09834 (18), -0.09778 (18), -0.09723 (18), -0.09721 (18), -0.09682 (18), -0.09678 (18), -0.09673 (18), -0.09621 (18), -0.09567 (18), -0.09567 (18), -0.09541 (18), 
Length of domains: 2326
Time: pickout 0.0414    decision 0.1010    set_bounds 0.3048    solve 0.3953    add 0.1310    
Accumulated time: pickout 0.2397    decision 0.8982    set_bounds 0.6087    solve 2.3110    add 1.7568    
Current (lb-rhs): -0.10378095507621765
5929 domains visited
Cumulative time: 8.124994039535522

BaB round 8
batch: 2326
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 803] [/input-8, 476] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 803] [/input-8, 1929] [/input-8, 803] [/input-8, 803] [/input-8, 28] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10385164618492126
10 lb beta sum: 4.408669471740723, worst -0.07642015814781189
Time: prepare 0.1025    bound 1.0697    transfer 0.0530    finalize 0.0291    func 1.2851    
Accumulated time: func 3.8224    prepare 0.3321    bound 3.0057    transfer 0.1705    finalize 0.2372    
all_split False
======================Cut inference begins======================
max lb tensor(0.37769243) min lb tensor(-0.06692815)
Number of Verified Splits: 2419 of 4652
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 21
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.5787637233734131 
BICCOS Cumulative time: 2.4601895809173584
Preprocessing time: 0.15617895126342773 Inference time: 0.3756837844848633 Add cuts time: 0.04182839393615723 Cut analysis time: 0.005072593688964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06693 (19), -0.06648 (19), -0.06565 (19), -0.06545 (19), -0.06525 (19), -0.06520 (19), -0.06447 (19), -0.06433 (19), -0.06389 (19), -0.06387 (19), -0.06382 (19), -0.06377 (19), -0.06351 (19), -0.06321 (19), -0.06296 (19), -0.06265 (19), -0.06255 (19), -0.06236 (19), -0.06235 (19), -0.06189 (19), 
Length of domains: 2233
Time: pickout 0.0512    decision 0.1383    set_bounds 0.3858    solve 1.2867    add 0.1440    
Accumulated time: pickout 0.2909    decision 1.0366    set_bounds 0.9944    solve 3.5977    add 1.9008    
Current (lb-rhs): -0.06692814826965332
8162 domains visited
Cumulative time: 10.739176034927368

BaB round 9
batch: 2233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] [/input-8, 28] [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] [/input-8, 1954] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09985876083374023
10 lb beta sum: 1.8536345958709717, worst -0.08424019813537598
Time: prepare 0.0982    bound 0.3055    transfer 0.0226    finalize 0.0242    func 0.4808    
Accumulated time: func 4.3032    prepare 0.4305    bound 3.3112    transfer 0.1931    finalize 0.2613    
all_split False
======================Cut inference begins======================
max lb tensor(0.68877959) min lb tensor(-0.06544796)
Number of Verified Splits: 4030 of 4466
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.0293903350830078 
BICCOS Cumulative time: 3.489579916000366
Preprocessing time: 0.14276790618896484 Inference time: 0.6383068561553955 Add cuts time: 0.24675536155700684 Cut analysis time: 0.001560211181640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06545 (20), -0.06545 (20), -0.06520 (20), -0.06520 (20), -0.06382 (20), -0.06382 (20), -0.06377 (20), -0.06377 (20), -0.06351 (20), -0.06351 (20), -0.06296 (20), -0.06296 (20), -0.06255 (20), -0.06255 (20), -0.06189 (20), -0.06189 (20), -0.05953 (20), -0.05953 (20), -0.05945 (20), -0.05945 (20), 
Length of domains: 436
Time: pickout 0.1146    decision 0.1348    set_bounds 0.3880    solve 0.4825    add 0.0887    
Accumulated time: pickout 0.4055    decision 1.1714    set_bounds 1.3824    solve 4.0802    add 1.9895    
Current (lb-rhs): -0.06544795632362366
8598 domains visited
Cumulative time: 13.023119449615479

BaB round 10
batch: 436
splitting decisions: 
split level 0: [/input-8, 803] [/input-8, 803] [/input-8, 44] [/input-8, 44] [/input-8, 44] [/input-8, 803] [/input-8, 44] [/input-8, 44] [/input-8, 44] [/input-8, 44] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0930471420288086

all verified at 6th iter
Time: prepare 0.0177    bound 0.0432    transfer 0.0062    finalize 0.0056    func 0.0782    
Accumulated time: func 4.3813    prepare 0.4484    bound 3.3544    transfer 0.1993    finalize 0.2669    
all_split False
======================Cut inference begins======================
max lb tensor(0.17955813) min lb tensor(0.05198917)
Number of Verified Splits: 872 of 872
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts: total 765 constraints, 49727 nonzero elements
cuts preparing time: 0.0224
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 766.
#cuts 1-3: 189
#cuts 13-15: 11
#cuts 16-18: 25
#cuts 19-21: 32
#cuts >= 20: 509
BICCOS time: 0.4419834613800049 
BICCOS Cumulative time: 3.931563377380371
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0197    decision 0.0356    set_bounds 0.0389    solve 0.0783    add 0.0001    
Accumulated time: pickout 0.4252    decision 1.2070    set_bounds 1.4213    solve 4.1586    add 1.9896    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
8598 domains visited
Cumulative time: 13.646930694580078

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=137_spec=2_27017892.log
found process to kill: terminal indx = 4
found process for pidx=2
kill process for pidx=2
found process for pidx=4
Result: safe in 21.9938 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [598]; unstable size 598; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 213, 1, 598] with unstable size 212 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 598] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 598] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [212]; unstable size 212; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 212] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 212] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.89664280,  0.67908692,  0.19554472,  0.18955255,  0.73444796,
          0.71419168,  0.94188857,  0.96517789, -1.17427933]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
         -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.17530060, -23.26024055, -22.88537025, -22.34073830, -22.57217026,
          -22.95246124, -23.25955200, -23.61799812, -23.03639603, -21.12484741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05045319]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0733 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.98194313, -18.68232346, -13.41521168, -15.12617874, -13.36238766,
         -15.23961639, -11.65827942, -15.93192387, -18.96205139, -18.87558174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 486] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 486] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 298] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.17125010, 4.88726807, 0.27177000, 2.09688020, 0.18416500, 2.01368856,
         2.31736946, 5.04107523, 4.79337215]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0744 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.01308823, -19.76593781, -25.22100067, -25.57647514, -25.42583656,
         -26.01211357, -25.51028061, -24.41519165, -23.07863426, -17.48029327]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 532] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 532] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 203] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.27216339, 1.49679089, 6.10778570, 6.38268900, 6.18334293, 6.67019939,
         6.18721390, 4.92642689, 4.46745014]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0659 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [703]; unstable size 703; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 270, 1, 703] with unstable size 269 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 703] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 703] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [269]; unstable size 269; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 269] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 269] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.32847285,  0.70178199,  0.40967345,  0.70709419,  1.10043907,
          0.47019577,  0.52032375, -0.85370135, -1.78019536]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.90496635, -15.11729813, -17.63558197, -17.40718079, -18.01904297,
         -18.32819939, -17.60610199, -17.95012093, -15.46633625, -14.21533680]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775],
         [-16.90496635, -15.11729908, -17.63558006, -17.40718079, -18.01904488,
          -18.32819939, -17.60610390, -17.95012093, -15.46633720, -14.21533775]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.34903812, -0.90196133]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-25.14345169, -26.23081017, -22.50061417, -23.41731834, -23.96586800,
         -24.21544456, -20.18602753, -25.76428032, -26.53347778, -25.24602318]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [390]; unstable size 390; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 390] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 390] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 390] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 311] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16251516, 3.85129452, 1.07807183, 2.04974055, 2.45816183, 2.71345639,
         3.85838246, 4.14238644, 3.23237801]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0297 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [519]; unstable size 519; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 519] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 519] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 519] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 219] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02097797,  5.33160686, -0.73743284,  1.28090405,  0.87938416,
          0.03270638,  0.89394522,  6.65467310,  4.26477242]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.55906677, -26.64030838, -19.33113098, -21.43922997, -19.03748703,
         -20.97289085, -20.39774704, -20.86362457, -27.58946419, -25.17458534]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.90825081, -26.12090302, -18.51591682, -20.78538132, -18.67061234,
          -20.35578346, -19.77608490, -20.64961624, -26.99978256, -24.73842430]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15469551]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.72182465, -25.40373611, -21.20227242, -20.08390617, -21.28728104,
         -19.64896584, -22.07214165, -21.57941437, -23.54422569, -23.66501617]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 553] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 553] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 224] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.95499563, 4.21736193, 0.73983395, 0.09517527, 0.76654387, 1.38522887,
         0.98252285, 2.42742348, 2.46281314]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0436 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [771]; unstable size 771; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 771] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 771] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 771] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 252] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.21118402,  4.10176992, -1.16934407, -0.72179759,  0.25676215,
          0.67854691,  1.19206476,  4.31922340,  3.50376463]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.44517517, -24.66761017, -18.86577606, -18.69302559, -20.38499641,
         -19.18245506, -20.75661469, -21.50863075, -24.90008926, -24.19531822]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822],
         [-21.44517326, -24.66760826, -18.86577415, -18.69302559, -20.38499451,
          -19.18245316, -20.75661469, -21.50863075, -24.90009117, -24.19531822]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31667900, -0.48942757]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]],


         [[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0540 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.38232803, -35.89345551, -38.77233124, -38.86247635, -39.62222672,
         -39.86164474, -39.87382126, -39.40642929, -30.93457031, -36.03558350]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 499] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 197] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.37971139, 3.87611628, 6.40737152, 6.38697529, 7.03272963, 7.19149971,
         7.20581627, 6.50212860, 4.14408016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0625 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-34.24032974, -37.65886307, -32.76491928, -35.87559128, -36.34276581,
         -36.02743912, -34.61969757, -36.23526382, -36.62348938, -40.18959427]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [734]; unstable size 734; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 734] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 734] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 734] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 228] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.42341971, 3.43717360, 2.28934193, 2.53784919, 2.29687023, 0.88679004,
         1.92648399, 2.44576836, 5.71752787]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.79258919, -17.99694252, -16.45632553, -15.40058136, -16.56349564,
         -14.87314796, -17.80143356, -13.41994190, -19.54096222, -16.64786148]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [937]; unstable size 937; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 937] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 937] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 937] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.73422527, 2.70791578, 1.68733311, 0.95580482, 2.14770651, 0.50132132,
         2.85892677, 3.87416124, 1.62221146]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [720]; unstable size 720; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 334, 1, 720] with unstable size 333 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 720] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 720] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [333]; unstable size 333; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 333] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.70876288,  4.66763496,  1.06026256, -0.11882302,  0.88787556,
         -0.96121311,  2.31396747,  4.62897253,  4.35728979]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.01166153, -22.78888702, -15.86253738, -18.02544975, -16.82504082,
         -17.96582985, -15.98325729, -20.20303345, -22.22256470, -22.36408424]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.39785576, -22.92395973, -16.30167580, -18.20151138, -17.08473396,
          -18.17427635, -15.85140800, -20.40995026, -22.59860229, -22.46858406],
         [-20.39785576, -22.92395973, -16.30167580, -18.20151138, -17.08473396,
          -18.17427635, -15.85140800, -20.40995026, -22.59860229, -22.46858406]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.78305817, -0.45026779]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0689 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 788] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 788] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 259] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.16784859,  2.02646685,  3.53692198,  1.20165062,  4.52165127,
          3.78477240,  1.66250515, -2.21134424, -1.22387242]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-33.39692688, -33.50623703, -38.63787079, -39.79333878, -37.69999313,
         -41.03482437, -40.31786346, -38.34481812, -33.13186264, -33.37991333]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952],
         [-33.39692307, -33.50624084, -38.63787079, -39.79333115, -37.69999313,
          -41.03482437, -40.31786346, -38.34482574, -33.13185501, -33.37990952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.10931778, -0.37438583, -0.12633133]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0529 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 654] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 654] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 260] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.18142772,  4.33078861, -0.50892019, -0.65947896,  0.37091124,
          1.13457870, -0.94743353,  4.42701197,  2.60953641]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.86795235, -23.21092606, -17.76663589, -16.98049545, -18.63553619,
         -17.40380287, -19.50118446, -17.26604271, -23.47448921, -21.17066383]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383],
         [-21.86795235, -23.21092987, -17.76663589, -16.98049545, -18.63553619,
          -17.40380287, -19.50118637, -17.26604462, -23.47449112, -21.17066383]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36283302, -0.42330742, -0.13775826]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0726 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [494]; unstable size 494; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 494] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 494] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 494] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 270] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.14928651,  4.51440239,  1.64132655, -1.13099456,  1.91445684,
          0.33408695,  1.53952110,  3.79073143,  4.14098501]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
         -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.97657204, -24.17541313, -17.49859619, -20.07994652, -17.44471931,
          -20.39148903, -18.74324608, -20.42260742, -22.87066269, -23.45691490]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05387688]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-9.41269815e-01, -9.09523785e-01, -1.33809519e+00,  ...,
            -6.39682531e-01,  7.46032670e-02,  1.85714364e-01],
           [-5.28571427e-01, -7.98412681e-01, -1.25873005e+00,  ...,
            -5.76190472e-01, -2.42857039e-01,  1.06349289e-01],
           [-4.65079248e-01, -4.01587188e-01, -7.66666651e-01,  ...,
            -3.85714173e-01, -3.53968143e-01, -1.63491964e-01],
           ...,
           [ 1.97936535e+00,  1.10634947e+00,  1.42380977e+00,  ...,
             1.94761932e+00,  1.94761932e+00,  1.97936535e+00],
           [ 1.94761932e+00,  1.47142887e+00,  1.37619078e+00,  ...,
             1.96349227e+00,  1.82063520e+00,  1.80476213e+00],
           [ 1.99523830e+00,  1.78888917e+00,  1.85238123e+00,  ...,
             1.99523830e+00,  1.99523830e+00,  1.94761932e+00]],

          [[-1.12721294e-01, -1.44927412e-01, -6.28019273e-01,  ...,
            -2.25442708e-01,  3.54267418e-01,  6.28019392e-01],
           [ 2.09339887e-01, -1.12721294e-01, -5.47504008e-01,  ...,
            -2.89854944e-01,  1.22934580e-07,  5.47504127e-01],
           [ 1.93236828e-01,  2.25442946e-01, -1.61029361e-02,  ...,
            -8.05151686e-02, -8.05151686e-02,  2.89855182e-01],
           ...,
           [ 1.70692456e+00,  8.37359190e-01,  1.14331758e+00,  ...,
             1.75523376e+00,  1.73913074e+00,  1.78743994e+00],
           [ 1.73913074e+00,  1.20772982e+00,  1.04669893e+00,  ...,
             1.72302771e+00,  1.57810009e+00,  1.61030626e+00],
           [ 1.85185218e+00,  1.57810009e+00,  1.56199706e+00,  ...,
             1.75523376e+00,  1.75523376e+00,  1.73913074e+00]],

          [[-1.39280367e+00, -1.30284870e+00, -1.61769128e+00,  ...,
            -1.27286363e+00, -7.48125911e-01, -3.73313308e-01],
           [-1.19790113e+00, -1.39280367e+00, -1.60269880e+00,  ...,
            -1.25787115e+00, -1.03298354e+00, -4.33283329e-01],
           [-1.13793111e+00, -1.21289361e+00, -1.45277369e+00,  ...,
            -1.18290865e+00, -1.03298354e+00, -7.18140900e-01],
           ...,
           [ 1.84557760e+00,  9.76012170e-01,  1.24587750e+00,  ...,
             1.87556267e+00,  1.84557760e+00,  1.87556267e+00],
           [ 1.87556267e+00,  1.33583248e+00,  1.15592217e+00,  ...,
             1.83058512e+00,  1.69565260e+00,  1.69565260e+00],
           [ 1.96551764e+00,  1.69565260e+00,  1.68066013e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.84557760e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0661 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.82804489, -23.63042831, -29.23712158, -28.24177551, -29.14320946,
         -29.41248703, -29.22246933, -29.10352325, -24.23150253, -21.39186287]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [726]; unstable size 726; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 726] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 726] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 726] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 264] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.64157295, 1.36549687, 5.86060524, 5.40555191, 5.76025772, 6.48044920,
         6.13686466, 6.01794577, 1.13634586]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0453 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 942] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 942] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 241] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.41716480,  5.54713631,  0.52021480, -0.06935596, -0.04526973,
          0.63125217,  1.37135744,  2.56105900,  5.77544641]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
         -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]100%|██████████| 1/1 [00:00<00:00,  8.94it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.30881500, -30.56450272, -25.00361443, -23.76336479, -24.40058708,
          -23.71853256, -24.78523254, -26.12451744, -27.38202095, -30.68591499],
         [-29.30881500, -30.56450272, -25.00361443, -23.76336479, -24.40058708,
          -23.71853256, -24.78523254, -26.12451744, -27.38202095, -30.68591499]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04483223, 0.68205452]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1146 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.083850860595703
alpha/beta optimization time: 1.2278988361358643
initial alpha-crown bounds: tensor([[ 4.47513914,  5.59848642,  0.56283116, -0.05797213, -0.01270843,
          0.67102230,  1.41879344,  2.60586119,  5.82239676]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.05797213315963745
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6847 seconds.
lower bounds for all target labels: [4.475139617919922, 5.598485946655273, 0.5628324747085571, -0.05797255039215088, -0.012709617614746094, 0.6710230112075806, 1.4187952280044556, 2.6058621406555176, 5.8223958015441895]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [3, 4]
start creating model mps for candidates: ['lay/16_3', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=4_27020207.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=4_27020207.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 52324 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 52327 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51447701454163
Verifying property 0 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.822396755218506.

Properties batch 1, size 1
Remaining timeout: 198.299387216568
Verifying property 1 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.598486423492432.

Properties batch 2, size 1
Remaining timeout: 198.17389965057373
Verifying property 2 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.475139141082764.

Properties batch 3, size 1
Remaining timeout: 198.0571587085724
Verifying property 3 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.605861186981201.

Properties batch 4, size 1
Remaining timeout: 197.9408347606659
Verifying property 4 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4187934398651123.

Properties batch 5, size 1
Remaining timeout: 197.82423043251038
Verifying property 5 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6710222959518433.

Properties batch 6, size 1
Remaining timeout: 197.70746517181396
Verifying property 6 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5628311634063721.

Properties batch 7, size 1
Remaining timeout: 197.5893590450287
Verifying property 7 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01270843]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
        -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01270843]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 942
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 235
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008175373077392578
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0911    transfer 0.0001    finalize 0.0002    func 0.0916    
Accumulated time: func 0.0916    prepare 0.0002    bound 0.0911    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 59] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 97] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 56] 
split level 9: [/input-12, 31] 
split level 10: [/input-8, 1379] 
split level 11: [/input-8, 1699] 
split level 12: [/input-8, 1731] 
split level 13: [/input-8, 1371] 
split level 14: [/input-8, 1834] 
split level 15: [/input-8, 1057] 
split level 16: [/input-8, 1250] 
split level 17: [/input-8, 218] 
split level 18: [/input-8, 771] 
split level 19: [/input-8, 1388] 
split level 20: [/input-8, 225] 
split level 21: [/input-8, 1380] 
split level 22: [/input-8, 1842] 
split level 23: [/input-8, 403] 
split level 24: [/input-8, 32] 
split level 25: [/input-8, 770] 
split level 26: [/input-8, 772] 
split level 27: [/input-8, 235] 
split level 28: [/input-8, 1171] 
split level 29: [/input-8, 226] 
split level 30: [/input-8, 141] 
split level 31: [/input-8, 418] 
split level 32: [/input-8, 1773] 
split level 33: [/input-8, 956] 
split level 34: [/input, 2662] 
split level 35: [/input-8, 1361] 
split level 36: [/input, 3228] 
split level 37: [/input, 2968] 
split level 38: [/input-8, 1733] 
split level 39: [/input-8, 1325] 
split level 40: [/input, 2897] 
split level 41: [/input-8, 56] 
split level 42: [/input-8, 994] 
split level 43: [/input-8, 2039] 
split level 44: [/input-8, 140] 
split level 45: [/input-8, 2038] 
split level 46: [/input-8, 731] 
split level 47: [/input, 2923] 
split level 48: [/input, 489] 
split level 49: [/input-8, 1372] 
split level 50: [/input, 825] 
split level 51: [/input, 2882] 
split level 52: [/input-8, 2026] 
split level 53: [/input, 2929] 
split level 54: [/input, 56] 
split level 55: [/input-8, 1265] 
split level 56: [/input-8, 1593] 
split level 57: [/input, 3001] 
split level 58: [/input, 73] 
split level 59: [/input, 130] 
split level 60: [/input-8, 1066] 
split level 61: [/input, 3688] 
split level 62: [/input, 3351] 
split level 63: [/input, 424] 
split level 64: [/input-8, 1774] 
split level 65: [/input, 1002] 
split level 66: [/input, 168] 
split level 67: [/input-8, 1765] 
split level 68: [/input-8, 202] 
split level 69: [/input, 1912] 
split level 70: [/input, 797] 
split level 71: [/input, 488] 
split level 72: [/input-8, 1729] 
split level 73: [/input, 859] 
split level 74: [/input, 129] 
split level 75: [/input, 1449] 
split level 76: [/input, 1352] 
split level 77: [/input-8, 582] 
split level 78: [/input, 1913] 
split level 79: [/input-8, 1782] 
split level 80: [/input, 1396] 
split level 81: [/input-8, 1576] 
split level 82: [/input-8, 209] 
split level 83: [/input-8, 1737] 
split level 84: [/input-8, 454] 
split level 85: [/input, 3217] 
split level 86: [/input-8, 57] 
split level 87: [/input, 131] 
split level 88: [/input, 177] 
split level 89: [/input, 97] 
split level 90: [/input, 961] 
split level 91: [/input-8, 243] 
split level 92: [/input, 81] 
split level 93: [/input, 792] 
split level 94: [/input, 99] 
split level 95: [/input, 2921] 
split level 96: [/input-8, 1730] 
split level 97: [/input, 3283] 
split level 98: [/input-8, 245] 
split level 99: [/input, 3265] 
split level 100: [/input, 2660] 
split level 101: [/input, 2106] 
split level 102: [/input, 2900] 
split level 103: [/input, 145] 
split level 104: [/input, 1355] 
split level 105: [/input, 2663] 
split level 106: [/input, 2411] 
split level 107: [/input, 1371] 
split level 108: [/input, 2103] 
split level 109: [/input, 3180] 
split level 110: [/input, 2849] 
split level 111: [/input, 74] 
split level 112: [/input, 2765] 
split level 113: [/input, 581] 
split level 114: [/input, 92] 
split level 115: [/input, 2139] 
split level 116: [/input, 2730] 
split level 117: [/input, 791] 
split level 118: [/input, 44] 
split level 119: [/input, 139] 
split level 120: [/input-8, 1996] 
split level 121: [/input, 2772] 
split level 122: [/input, 2905] 
split level 123: [/input, 40] 
split level 124: [/input, 55] 
split level 125: [/input-8, 1261] 
split level 126: [/input, 940] 
split level 127: [/input, 2837] 
split level 128: [/input, 2378] 
split level 129: [/input, 2749] 
split level 130: [/input, 141] 
split level 131: [/input, 806] 
split level 132: [/input, 2755] 
split level 133: [/input-8, 351] 
split level 134: [/input, 1388] 
split level 135: [/input-8, 199] 
split level 136: [/input, 2121] 
split level 137: [/input, 1202] 
split level 138: [/input, 2686] 
split level 139: [/input-8, 204] 
split level 140: [/input, 456] 
split level 141: [/input, 140] 
split level 142: [/input, 979] 
split level 143: [/input, 2850] 
split level 144: [/input, 1322] 
split level 145: [/input, 2857] 
split level 146: [/input, 875] 
split level 147: [/input, 958] 
split level 148: [/input, 91] 
split level 149: [/input, 2007] 
split level 150: [/input, 2838] 
split level 151: [/input, 2138] 
split level 152: [/input, 346] 
split level 153: [/input, 807] 
split level 154: [/input, 892] 
split level 155: [/input, 2122] 
split level 156: [/input, 1218] 
split level 157: [/input-8, 1815] 
split level 158: [/input, 2123] 
split level 159: [/input, 2834] 
split level 160: [/input-8, 198] 
split level 161: [/input, 50] 
split level 162: [/input, 2881] 
split level 163: [/input, 995] 
split level 164: [/input, 2124] 
split level 165: [/input, 2875] 
split level 166: [/input, 934] 
split level 167: [/input, 183] 
split level 168: [/input, 787] 
split level 169: [/input, 2932] 
split level 170: [/input, 2668] 
split level 171: [/input, 2377] 
split level 172: [/input, 3146] 
split level 173: [/input, 2833] 
split level 174: [/input, 1489] 
split level 175: [/input, 2154] 
split level 176: [/input, 1186] 
split level 177: [/input, 3279] 
split level 178: [/input-8, 1740] 
split level 179: [/input-8, 216] 
split level 180: [/input, 2873] 
split level 181: [/input, 1019] 
split level 182: [/input, 3164] 
split level 183: [/input, 2652] 
split level 184: [/input, 2409] 
split level 185: [/input, 2363] 
split level 186: [/input, 200] 
split level 187: [/input, 2866] 
split level 188: [/input, 3419] 
split level 189: [/input, 3357] 
split level 190: [/input, 362] 
split level 191: [/input, 1996] 
split level 192: [/input, 785] 
split level 193: [/input, 2013] 
split level 194: [/input, 1874] 
split level 195: [/input, 1881] 
split level 196: [/input, 348] 
split level 197: [/input, 45] 
split level 198: [/input, 1009] 
split level 199: [/input, 788] 
Time: prepare 0.0061    bound 0.0962    transfer 0.0075    finalize 0.0049    func 0.1148    
Accumulated time: func 0.2065    prepare 0.0163    bound 0.1873    transfer 0.0076    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.19957924) min lb tensor(-0.01254845)
Number of Verified Splits: 29 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.014998197555541992 
BICCOS Cumulative time: 0.014998197555541992
Preprocessing time: 0.012339115142822266 Inference time: 0.001417398452758789 Add cuts time: 0.0003714561462402344 Cut analysis time: 0.0008702278137207031
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5177    set_bounds 0.0114    solve 0.1149    add 0.0104    
Accumulated time: pickout 0.0004    decision 0.5177    set_bounds 0.0114    solve 0.1149    add 0.0104    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([-1.]), tensor([0]), tensor([5.95019665e-05]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([1.]), tensor([0]), tensor([5.95019665e-05]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.026322364807128906

all verified at 0th iter
Time: prepare 0.0003    bound 0.0043    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.2114    prepare 0.0167    bound 0.1916    transfer 0.0077    finalize 0.0052    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.5993766784668
Verifying property 8 with 1 instances.
##### Instance 154 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.05797213]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.78194427, -31.17414474, -25.47965050, -24.27825546, -24.95229912,
        -24.05517769, -25.49534607, -26.49033356, -27.99845505, -31.18796158],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.05797213]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 942
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 235
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00020933151245117188
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0510    transfer 0.0001    finalize 0.0001    func 0.0515    
Accumulated time: func 0.0515    prepare 0.0002    bound 0.0510    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 72] 
split level 3: [/input-8, 1699] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 403] 
split level 6: [/input-8, 770] 
split level 7: [/input-8, 1732] 
split level 8: [/input-8, 1722] 
split level 9: [/input-8, 140] 
split level 10: [/input-8, 1706] 
split level 11: [/input-8, 1731] 
split level 12: [/input-8, 1713] 
split level 13: [/input-8, 405] 
split level 14: [/input-8, 141] 
split level 15: [/input-8, 771] 
split level 16: [/input-8, 418] 
split level 17: [/input-8, 592] 
split level 18: [/input-8, 1301] 
split level 19: [/input-8, 1716] 
split level 20: [/input-8, 779] 
split level 21: [/input-8, 453] 
split level 22: [/input-8, 443] 
split level 23: [/input-8, 1325] 
split level 24: [/input-8, 138] 
split level 25: [/input-8, 1499] 
split level 26: [/input-8, 906] 
split level 27: [/input-8, 1834] 
split level 28: [/input-8, 1701] 
split level 29: [/input, 1510] 
split level 30: [/input-8, 1171] 
split level 31: [/input-8, 1028] 
split level 32: [/input-8, 588] 
split level 33: [/input, 1448] 
split level 34: [/input-8, 580] 
split level 35: [/input, 2968] 
split level 36: [/input-8, 1261] 
split level 37: [/input, 2662] 
split level 38: [/input-8, 731] 
split level 39: [/input-8, 772] 
split level 40: [/input-8, 87] 
split level 41: [/input-8, 56] 
split level 42: [/input-8, 1089] 
split level 43: [/input-8, 1029] 
split level 44: [/input-8, 582] 
split level 45: [/input-8, 994] 
split level 46: [/input-8, 1733] 
split level 47: [/input-8, 1782] 
split level 48: [/input-8, 1147] 
split level 49: [/input-8, 382] 
split level 50: [/input, 1499] 
split level 51: [/input-8, 406] 
split level 52: [/input-8, 579] 
split level 53: [/input-8, 1337] 
split level 54: [/input-8, 397] 
split level 55: [/input-8, 1662] 
split level 56: [/input-8, 97] 
split level 57: [/input-8, 595] 
split level 58: [/input-8, 75] 
split level 59: [/input-8, 1270] 
split level 60: [/input-8, 578] 
split level 61: [/input-8, 1265] 
split level 62: [/input-8, 1730] 
split level 63: [/input-8, 454] 
split level 64: [/input-8, 1302] 
split level 65: [/input, 581] 
split level 66: [/input-8, 1342] 
split level 67: [/input-8, 105] 
split level 68: [/input, 1913] 
split level 69: [/input, 1449] 
split level 70: [/input-8, 1953] 
split level 71: [/input-8, 993] 
split level 72: [/input-8, 95] 
split level 73: [/input-8, 235] 
split level 74: [/input-8, 1593] 
split level 75: [/input-8, 374] 
split level 76: [/input, 3262] 
split level 77: [/input-8, 142] 
split level 78: [/input-8, 91] 
split level 79: [/input, 3010] 
split level 80: [/input-8, 1576] 
split level 81: [/input-8, 1294] 
split level 82: [/input, 1912] 
split level 83: [/input-8, 218] 
split level 84: [/input-8, 945] 
split level 85: [/input-8, 57] 
split level 86: [/input-8, 1842] 
split level 87: [/input-8, 32] 
split level 88: [/input-8, 956] 
split level 89: [/input-8, 226] 
split level 90: [/input-8, 1752] 
split level 91: [/input, 1396] 
split level 92: [/input, 1491] 
split level 93: [/input, 2730] 
split level 94: [/input, 2742] 
split level 95: [/input, 131] 
split level 96: [/input, 3347] 
split level 97: [/input, 56] 
split level 98: [/input-8, 149] 
split level 99: [/input-8, 379] 
split level 100: [/input-8, 1293] 
split level 101: [/input, 2516] 
split level 102: [/input, 292] 
split level 103: [/input, 2660] 
split level 104: [/input, 1497] 
split level 105: [/input, 3345] 
split level 106: [/input, 1478] 
split level 107: [/input, 3637] 
split level 108: [/input-8, 103] 
split level 109: [/input-8, 1791] 
split level 110: [/input-8, 1965] 
split level 111: [/input, 803] 
split level 112: [/input-8, 424] 
split level 113: [/input-8, 584] 
split level 114: [/input, 3351] 
split level 115: [/input, 787] 
split level 116: [/input-8, 79] 
split level 117: [/input-8, 1959] 
split level 118: [/input, 2474] 
split level 119: [/input-8, 432] 
split level 120: [/input, 2765] 
split level 121: [/input-8, 1283] 
split level 122: [/input, 807] 
split level 123: [/input-8, 1310] 
split level 124: [/input-8, 423] 
split level 125: [/input, 3228] 
split level 126: [/input, 2663] 
split level 127: [/input-8, 150] 
split level 128: [/input-8, 1284] 
split level 129: [/input, 940] 
split level 130: [/input-8, 143] 
split level 131: [/input-8, 236] 
split level 132: [/input, 424] 
split level 133: [/input, 819] 
split level 134: [/input, 2498] 
split level 135: [/input, 2750] 
split level 136: [/input-8, 1591] 
split level 137: [/input, 168] 
split level 138: [/input-8, 1758] 
split level 139: [/input, 177] 
split level 140: [/input, 2897] 
split level 141: [/input, 55] 
split level 142: [/input, 141] 
split level 143: [/input-8, 1971] 
split level 144: [/input, 179] 
split level 145: [/input, 2502] 
split level 146: [/input, 3566] 
split level 147: [/input, 282] 
split level 148: [/input, 791] 
split level 149: [/input, 792] 
split level 150: [/input-8, 151] 
split level 151: [/input-8, 1729] 
split level 152: [/input, 1706] 
split level 153: [/input, 2851] 
split level 154: [/input-8, 442] 
split level 155: [/input-8, 1851] 
split level 156: [/input-8, 1774] 
split level 157: [/input, 293] 
split level 158: [/input, 2282] 
split level 159: [/input, 3123] 
split level 160: [/input, 2540] 
split level 161: [/input, 308] 
split level 162: [/input, 2749] 
split level 163: [/input, 3279] 
split level 164: [/input, 809] 
split level 165: [/input, 934] 
split level 166: [/input-8, 1735] 
split level 167: [/input, 1525] 
split level 168: [/input, 467] 
split level 169: [/input, 2547] 
split level 170: [/input, 1489] 
split level 171: [/input, 1714] 
split level 172: [/input, 2103] 
split level 173: [/input, 2686] 
split level 174: [/input, 283] 
split level 175: [/input, 3116] 
split level 176: [/input-8, 2038] 
split level 177: [/input, 3419] 
split level 178: [/input, 194] 
split level 179: [/input, 215] 
split level 180: [/input-12, 61] 
split level 181: [/input, 924] 
split level 182: [/input, 811] 
split level 183: [/input, 810] 
split level 184: [/input, 348] 
split level 185: [/input, 296] 
split level 186: [/input, 3361] 
split level 187: [/input, 362] 
split level 188: [/input-8, 1271] 
split level 189: [/input, 298] 
split level 190: [/input, 2269] 
split level 191: [/input, 785] 
split level 192: [/input, 2481] 
split level 193: [/input, 346] 
split level 194: [/input, 2852] 
split level 195: [/input, 3311] 
split level 196: [/input, 2246] 
split level 197: [/input, 3511] 
split level 198: [/input, 769] 
split level 199: [/input, 140] 
Time: prepare 0.0060    bound 0.0982    transfer 0.0014    finalize 0.0033    func 0.1090    
Accumulated time: func 0.1605    prepare 0.0160    bound 0.1492    transfer 0.0015    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.09599486) min lb tensor(-0.05793124)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01620936393737793 
BICCOS Cumulative time: 0.01620936393737793
Preprocessing time: 0.01115274429321289 Inference time: 0.0001392364501953125 Add cuts time: 8.797645568847656e-05 Cut analysis time: 0.00482940673828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05414 (1), -0.05390 (1), -0.05389 (1), -0.05389 (1), -0.05380 (1), -0.05375 (1), -0.05374 (1), -0.05365 (1), -0.05364 (1), -0.05345 (1), -0.05333 (1), -0.05316 (1), -0.05313 (1), -0.05309 (1), -0.05307 (1), -0.05298 (1), -0.05287 (1), -0.05277 (1), -0.05267 (1), -0.05249 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5105    set_bounds 0.0087    solve 0.1091    add 0.3014    
Accumulated time: pickout 0.0004    decision 0.5105    set_bounds 0.0087    solve 0.1091    add 0.3014    
Current (lb-rhs): -0.054138779640197754
50 domains visited
Cumulative time: 1.0152909755706787

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0527876615524292
10 lb beta sum: 0.36995184421539307, worst -0.050803184509277344
Time: prepare 0.0079    bound 0.1413    transfer 0.0011    finalize 0.0037    func 0.1568    
Accumulated time: func 0.3173    prepare 0.0244    bound 0.2905    transfer 0.0025    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.06797958) min lb tensor(-0.05075210)
Number of Verified Splits: 50 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0025
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.02936530113220215 
BICCOS Cumulative time: 0.04557466506958008
Preprocessing time: 0.0179445743560791 Inference time: 0.0033941268920898438 Add cuts time: 0.005057096481323242 Cut analysis time: 0.002969503402709961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03597 (2), -0.03593 (2), -0.03589 (2), -0.03582 (2), -0.03577 (2), -0.03567 (2), -0.03545 (2), -0.03529 (2), -0.03526 (2), -0.03491 (2), -0.03488 (2), -0.03487 (2), -0.03479 (2), -0.03462 (2), -0.03448 (2), -0.03437 (2), -0.03434 (2), -0.03422 (2), -0.03415 (2), -0.03399 (2), 
Length of domains: 50
Time: pickout 0.0035    decision 0.0253    set_bounds 0.0162    solve 0.1570    add 0.2660    
Accumulated time: pickout 0.0038    decision 0.5358    set_bounds 0.0249    solve 0.2661    add 0.5674    
Current (lb-rhs): -0.03597325086593628
100 domains visited
Cumulative time: 1.52085542678833

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 72] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] [/input-12, 72] [/input-12, 72] [/input-12, 31] 
split level 2: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-12, 31] [/input-8, 403] [/input-8, 403] 
split level 3: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46296262741088867, worst -0.03597348928451538
10 lb beta sum: 0.46296262741088867, worst -0.036066994071006775
Time: prepare 0.0189    bound 0.1509    transfer 0.0074    finalize 0.0054    func 0.1854    
Accumulated time: func 0.5027    prepare 0.0435    bound 0.4414    transfer 0.0099    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.07995319) min lb tensor(-0.03591648)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.02098226547241211 
BICCOS Cumulative time: 0.06655693054199219
Preprocessing time: 0.015137434005737305 Inference time: 0.0023605823516845703 Add cuts time: 0.002181529998779297 Cut analysis time: 0.0013027191162109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01576 (3), -0.01572 (3), -0.01567 (3), -0.01543 (3), -0.01542 (3), -0.01539 (3), -0.01484 (3), -0.01437 (3), -0.01435 (3), -0.01358 (3), -0.01357 (3), -0.01348 (3), -0.01348 (3), -0.01303 (3), -0.01299 (3), -0.01253 (3), -0.01252 (3), -0.01245 (3), -0.01244 (3), -0.01239 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0227    set_bounds 0.0179    solve 0.1856    add 0.2569    
Accumulated time: pickout 0.0115    decision 0.5585    set_bounds 0.0428    solve 0.4517    add 0.8243    
Current (lb-rhs): -0.015763506293296814
150 domains visited
Cumulative time: 2.0403077602386475

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 140] [/input-8, 403] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4651600420475006, worst -0.015763089060783386
10 lb beta sum: 0.4651600420475006, worst -0.015368148684501648
Time: prepare 0.0181    bound 0.1266    transfer 0.0011    finalize 0.0028    func 0.1515    
Accumulated time: func 0.6542    prepare 0.0619    bound 0.5681    transfer 0.0111    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.08399484) min lb tensor(-0.01530081)
Number of Verified Splits: 56 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 2
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.021682262420654297 
BICCOS Cumulative time: 0.08823919296264648
Preprocessing time: 0.015407085418701172 Inference time: 0.002740144729614258 Add cuts time: 0.0008683204650878906 Cut analysis time: 0.0026667118072509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00274 (4), -0.00274 (4), -0.00274 (4), -0.00273 (4), -0.00272 (4), -0.00272 (4), -0.00271 (4), -0.00270 (4), -0.00259 (4), -0.00259 (4), -0.00241 (4), -0.00238 (4), -0.00216 (4), -0.00205 (4), -0.00203 (4), -0.00201 (4), -0.00201 (4), -0.00191 (4), -0.00180 (4), -0.00175 (4), 
Length of domains: 50
Time: pickout 0.0087    decision 0.0221    set_bounds 0.0185    solve 0.1517    add 0.3919    
Accumulated time: pickout 0.0202    decision 0.5806    set_bounds 0.0613    solve 0.6034    add 1.2162    
Current (lb-rhs): -0.0027440786361694336
200 domains visited
Cumulative time: 2.6620614528656006

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 140] [/input-8, 140] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 140] [/input-8, 403] [/input-8, 1713] [/input-8, 140] [/input-8, 140] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 140] [/input-8, 771] [/input-8, 771] 
split level 3: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 771] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005370914936065674
10 lb beta sum: 0.36074966192245483, worst -0.007921159267425537
Time: prepare 0.0080    bound 0.1362    transfer 0.0012    finalize 0.0021    func 0.1507    
Accumulated time: func 0.8049    prepare 0.0702    bound 0.7042    transfer 0.0122    finalize 0.0175    
all_split False
======================Cut inference begins======================
max lb tensor(0.37536407) min lb tensor(-0.00250924)
Number of Verified Splits: 330 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.035247087478637695 
BICCOS Cumulative time: 0.12348628044128418
Preprocessing time: 0.012800455093383789 Inference time: 0.016608715057373047 Add cuts time: 0.0045015811920166016 Cut analysis time: 0.0013363361358642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00251 (5), -0.00250 (5), -0.00121 (5), -0.00120 (5), -0.00102 (5), -0.00101 (5), -0.00086 (5), -0.00084 (5), 
Length of domains: 8
Time: pickout 0.0116    decision 0.0198    set_bounds 0.0164    solve 0.1508    add 0.2402    
Accumulated time: pickout 0.0318    decision 0.6004    set_bounds 0.0777    solve 0.7542    add 1.4564    
Current (lb-rhs): -0.0025092363357543945
208 domains visited
Cumulative time: 3.1404685974121094

Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499]), tensor([-1.]), tensor([0]), tensor([0.00183797]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.16199261e-09, 1.87443360e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, -1.0], [0, 0], [1.6302485570085236e+30, 0.007436440791934729], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.005107568111270666], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63024856e+30, 7.43644079e-03, 1.40714217e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.005107568111270666], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63024856e+30, 7.43644079e-03, 4.94287742e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.16199261e-09, 1.99507340e-03]), tensor([0, 3])), '/input-12': ([72, 31], [-1.0, 1.0], [0, 0], [1.6302485570085236e+30, 0.007658050861209631], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.004824803676456213], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63024856e+30, 7.65805086e-03, 1.40136648e-02]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.004824803676456213], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63024856e+30, 7.65805086e-03, 4.77598442e-05]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1499,  403]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.16199261e-09, 1.80791481e-03]), tensor([0, 3])), '/input-12': ([72, 31], [1.0, -1.0], [0, 0], [0.019966961815953255, 0.0070596798323094845], [1, 2])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.005275593604892492], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.01996696, 0.00705968, 0.01432535]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 403], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.005275593604892492], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.99669618e-02, 7.05967983e-03, 9.99999997e-07]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [5.161992611135702e-09, 0.0021819935645908117], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.01996696, 0.00782918, 0.01434264]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, -1.0], [0, 0], [5.161992611135702e-09, 0.0021819935645908117], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.01996696, 0.00782918, 0.00288168]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.0027901993598788977], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.01996696, 0.00782918, 0.01443240]), tensor([1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1499, 418], [1.0, 1.0], [0, 0], [5.161992611135702e-09, 0.0027901993598788977], [0, 3]), '/input-12': (tensor([72, 31, 58]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.01996696, 0.00782918, 0.00257620]), tensor([1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.057880938053131104
10 lb beta sum: 0.7827003002166748, worst -0.05462571978569031
Time: prepare 0.0008    bound 0.1827    transfer 0.0005    finalize 0.0003    func 0.1845    
Accumulated time: func 0.9894    prepare 0.0710    bound 0.8869    transfer 0.0127    finalize 0.0179    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 72] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 2: [/input-12, 31] [/input-8, 140] [/input-8, 140] [/input-8, 140] 
split level 3: [/input-8, 403] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 4: [/input-8, 140] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
split level 5: [/input-8, 418] [/input-8, 418] [/input-8, 418] [/input-8, 418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.697033166885376, worst -0.03240059316158295
10 lb beta sum: 0.7101495265960693, worst -0.03224729001522064
Time: prepare 0.0125    bound 0.1836    transfer 0.0049    finalize 0.0029    func 0.2057    
Accumulated time: func 1.1951    prepare 0.0839    bound 1.0705    transfer 0.0177    finalize 0.0207    
all_split False
======================Cut inference begins======================
max lb tensor(0.06788608) min lb tensor(-0.03220557)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7288017868995667, worst -0.19212162494659424
10 lb beta sum: 0.8054349422454834, worst -0.03886035084724426
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 3
#cuts 4-6: 10
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.3203694820404053 
BICCOS Cumulative time: 0.44385576248168945
Preprocessing time: 0.008722305297851562 Inference time: 0.3036682605743408 Add cuts time: 0.005901813507080078 Cut analysis time: 0.0020771026611328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03221 (6), -0.03194 (6), -0.03128 (6), -0.03046 (6), -0.03041 (6), -0.03018 (6), -0.02950 (6), -0.02855 (6), -0.02758 (6), -0.02715 (6), -0.02664 (6), -0.02654 (6), -0.02645 (6), -0.02635 (6), -0.02582 (6), -0.02545 (6), -0.02523 (6), -0.02488 (6), -0.02479 (6), -0.02461 (6), 
Length of domains: 32
Time: pickout 0.0009    decision 0.0213    set_bounds 0.0318    solve 0.2059    add 0.0858    
Accumulated time: pickout 0.0326    decision 0.6217    set_bounds 0.1094    solve 0.9601    add 1.5422    
Current (lb-rhs): -0.03220556676387787
240 domains visited
Cumulative time: 4.122771978378296

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] [/input-8, 770] 
split level 1: [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] [/input-8, 1713] 
split level 2: [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] [/input-8, 771] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03057330846786499
10 lb beta sum: 0.24675017595291138, worst -0.029671847820281982
Time: prepare 0.0051    bound 0.1348    transfer 0.0008    finalize 0.0015    func 0.1440    
Accumulated time: func 1.3391    prepare 0.0892    bound 1.2053    transfer 0.0185    finalize 0.0222    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00393245) min lb tensor(-0.02964938)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
Total number of valid cuts: 16.
#cuts 1-3: 3
#cuts 4-6: 10
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.009623527526855469 
BICCOS Cumulative time: 0.4534792900085449
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02965 (9), -0.02942 (9), -0.02866 (9), -0.02786 (9), -0.02784 (9), -0.02761 (9), -0.02760 (9), -0.02734 (9), -0.02687 (9), -0.02668 (9), -0.02595 (9), -0.02583 (9), -0.02582 (9), -0.02553 (9), -0.02522 (9), -0.02492 (9), -0.02481 (9), -0.02465 (9), -0.02418 (9), -0.02415 (9), 
Length of domains: 256
Time: pickout 0.0097    decision 0.0184    set_bounds 0.0143    solve 0.1441    add 0.0858    
Accumulated time: pickout 0.0424    decision 0.6401    set_bounds 0.1237    solve 1.1042    add 1.6280    
Current (lb-rhs): -0.02964937686920166
496 domains visited
Cumulative time: 4.412289142608643

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2940583825111389, worst -0.029649317264556885
10 lb beta sum: 0.2940067648887634, worst -0.02962958812713623
Time: prepare 0.0227    bound 0.1338    transfer 0.0068    finalize 0.0041    func 0.1706    
Accumulated time: func 1.5097    prepare 0.1121    bound 1.3390    transfer 0.0253    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.26313651) min lb tensor(-0.02961743)
Number of Verified Splits: 103 of 512
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.02837514877319336 
BICCOS Cumulative time: 0.4818544387817383
Preprocessing time: 0.014976978302001953 Inference time: 0.009407281875610352 Add cuts time: 0.0028142929077148438 Cut analysis time: 0.001176595687866211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02962 (10), -0.02872 (10), -0.02865 (10), -0.02781 (10), -0.02757 (10), -0.02714 (10), -0.02689 (10), -0.02688 (10), -0.02667 (10), -0.02621 (10), -0.02579 (10), -0.02534 (10), -0.02505 (10), -0.02491 (10), -0.02479 (10), -0.02459 (10), -0.02444 (10), -0.02436 (10), -0.02413 (10), -0.02403 (10), 
Length of domains: 409
Time: pickout 0.0235    decision 0.0245    set_bounds 0.0239    solve 0.1715    add 0.0947    
Accumulated time: pickout 0.0659    decision 0.6646    set_bounds 0.1476    solve 1.2757    add 1.7227    
Current (lb-rhs): -0.02961742877960205
905 domains visited
Cumulative time: 4.794691324234009

BaB round 4
batch: 409
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-8, 1731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028963923454284668
10 lb beta sum: 0.47484469413757324, worst -0.028941750526428223
Time: prepare 0.0168    bound 0.1587    transfer 0.0063    finalize 0.0077    func 0.1951    
Accumulated time: func 1.7049    prepare 0.1291    bound 1.4978    transfer 0.0316    finalize 0.0341    
all_split False
======================Cut inference begins======================
max lb tensor(0.63869298) min lb tensor(-0.02892679)
Number of Verified Splits: 664 of 818
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.10294890403747559 
BICCOS Cumulative time: 0.5848033428192139
Preprocessing time: 0.026714801788330078 Inference time: 0.06744265556335449 Add cuts time: 0.007493257522583008 Cut analysis time: 0.0012981891632080078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02893 (11), -0.02870 (11), -0.02713 (11), -0.02709 (11), -0.02686 (11), -0.02686 (11), -0.02531 (11), -0.02503 (11), -0.02433 (11), -0.02393 (11), -0.02388 (11), -0.02371 (11), -0.02370 (11), -0.02334 (11), -0.02319 (11), -0.02291 (11), -0.02211 (11), -0.02209 (11), -0.02195 (11), -0.02187 (11), 
Length of domains: 154
Time: pickout 0.0231    decision 0.0373    set_bounds 0.0371    solve 0.1954    add 0.1040    
Accumulated time: pickout 0.0890    decision 0.7020    set_bounds 0.1848    solve 1.4711    add 1.8267    
Current (lb-rhs): -0.0289267897605896
1059 domains visited
Cumulative time: 5.313124895095825

BaB round 5
batch: 154
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028099417686462402
10 lb beta sum: 0.7551088333129883, worst -0.02656249701976776
Time: prepare 0.0075    bound 0.1881    transfer 0.0041    finalize 0.0031    func 0.2051    
Accumulated time: func 1.9100    prepare 0.1369    bound 1.6858    transfer 0.0357    finalize 0.0371    
all_split False
======================Cut inference begins======================
max lb tensor(0.30148894) min lb tensor(-0.02655166)
Number of Verified Splits: 214 of 308
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.04073953628540039 
BICCOS Cumulative time: 0.6255428791046143
Preprocessing time: 0.011738777160644531 Inference time: 0.025315284729003906 Add cuts time: 0.002096891403198242 Cut analysis time: 0.001588582992553711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02655 (12), -0.02623 (12), -0.02485 (12), -0.02471 (12), -0.02437 (12), -0.02310 (12), -0.02220 (12), -0.02151 (12), -0.02117 (12), -0.02116 (12), -0.02089 (12), -0.02073 (12), -0.02067 (12), -0.02052 (12), -0.02038 (12), -0.02016 (12), -0.01984 (12), -0.01937 (12), -0.01933 (12), -0.01932 (12), 
Length of domains: 94
Time: pickout 0.0514    decision 0.0275    set_bounds 0.0161    solve 0.2054    add 0.0708    
Accumulated time: pickout 0.1404    decision 0.7295    set_bounds 0.2009    solve 1.6764    add 1.8975    
Current (lb-rhs): -0.026551663875579834
1153 domains visited
Cumulative time: 5.735138893127441

BaB round 6
batch: 94
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1028] [/input-8, 1028] [/input-8, 772] [/input-8, 772] [/input-8, 1028] [/input-8, 1028] [/input-8, 772] [/input-8, 772] [/input-8, 1028] [/input-8, 772] 
split level 1: [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9303879141807556, worst -0.025674164295196533
10 lb beta sum: 0.9303879141807556, worst -0.02562934160232544
Time: prepare 0.0177    bound 0.1722    transfer 0.0060    finalize 0.0035    func 0.2019    
Accumulated time: func 2.1119    prepare 0.1550    bound 1.8580    transfer 0.0417    finalize 0.0406    
all_split False
======================Cut inference begins======================
max lb tensor(0.00258958) min lb tensor(-0.02560347)
Number of Verified Splits: 16 of 376
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0021
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.017467737197875977 
BICCOS Cumulative time: 0.6430106163024902
Preprocessing time: 0.012295246124267578 Inference time: 0.002160787582397461 Add cuts time: 0.0003631114959716797 Cut analysis time: 0.002648591995239258
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02560 (14), -0.02428 (14), -0.02404 (14), -0.02372 (14), -0.02325 (14), -0.02323 (14), -0.02288 (14), -0.02286 (14), -0.02271 (14), -0.02246 (14), -0.02216 (14), -0.02204 (14), -0.02202 (14), -0.02170 (14), -0.02168 (14), -0.02136 (14), -0.02134 (14), -0.02093 (14), -0.02090 (14), -0.02065 (14), 
Length of domains: 360
Time: pickout 0.0154    decision 0.0256    set_bounds 0.0212    solve 0.2021    add 0.0895    
Accumulated time: pickout 0.1558    decision 0.7551    set_bounds 0.2221    solve 1.8785    add 1.9870    
Current (lb-rhs): -0.02560347318649292
1513 domains visited
Cumulative time: 6.113835096359253

BaB round 7
batch: 360
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] [/input-8, 1261] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9135577082633972, worst -0.023969948291778564
10 lb beta sum: 0.9135577082633972, worst -0.02393442392349243
Time: prepare 0.0345    bound 0.1778    transfer 0.0046    finalize 0.0040    func 0.2257    
Accumulated time: func 2.3376    prepare 0.1899    bound 2.0358    transfer 0.0463    finalize 0.0446    
all_split False
======================Cut inference begins======================
max lb tensor(0.00133872) min lb tensor(-0.02392417)
Number of Verified Splits: 18 of 720
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0031
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.028914690017700195 
BICCOS Cumulative time: 0.6719253063201904
Preprocessing time: 0.022620201110839844 Inference time: 0.002363920211791992 Add cuts time: 0.0003542900085449219 Cut analysis time: 0.0035762786865234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02392 (15), -0.02383 (15), -0.02261 (15), -0.02253 (15), -0.02236 (15), -0.02233 (15), -0.02231 (15), -0.02223 (15), -0.02204 (15), -0.02199 (15), -0.02196 (15), -0.02195 (15), -0.02144 (15), -0.02143 (15), -0.02141 (15), -0.02114 (15), -0.02111 (15), -0.02106 (15), -0.02103 (15), -0.02099 (15), 
Length of domains: 702
Time: pickout 0.0222    decision 0.0367    set_bounds 0.0352    solve 0.2260    add 0.1200    
Accumulated time: pickout 0.1779    decision 0.7918    set_bounds 0.2573    solve 2.1045    add 2.1069    
Current (lb-rhs): -0.023924171924591064
2215 domains visited
Cumulative time: 6.5920820236206055

BaB round 8
batch: 702
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] [/input-8, 1701] 
cut re-enabled after branching node selection
0 lb beta sum: 0.902937114238739, worst -0.023359477519989014
10 lb beta sum: 0.902937114238739, worst -0.023343384265899658
Time: prepare 0.0683    bound 0.1787    transfer 0.0270    finalize 0.0098    func 0.2931    
Accumulated time: func 2.6307    prepare 0.2585    bound 2.2144    transfer 0.0733    finalize 0.0544    
all_split False
======================Cut inference begins======================
max lb tensor(0.01012135) min lb tensor(-0.02333778)
Number of Verified Splits: 251 of 1404
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.08997941017150879 
BICCOS Cumulative time: 0.7619047164916992
Preprocessing time: 0.05178070068359375 Inference time: 0.03410530090332031 Add cuts time: 0.0024132728576660156 Cut analysis time: 0.001680135726928711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02334 (16), -0.02323 (16), -0.02235 (16), -0.02232 (16), -0.02202 (16), -0.02197 (16), -0.02194 (16), -0.02192 (16), -0.02169 (16), -0.02160 (16), -0.02145 (16), -0.02142 (16), -0.02139 (16), -0.02134 (16), -0.02127 (16), -0.02126 (16), -0.02111 (16), -0.02109 (16), -0.02104 (16), -0.02101 (16), 
Length of domains: 1153
Time: pickout 0.0795    decision 0.2893    set_bounds 0.0730    solve 0.2946    add 0.1108    
Accumulated time: pickout 0.2575    decision 1.0810    set_bounds 0.3303    solve 2.3991    add 2.2177    
Current (lb-rhs): -0.02333778142929077
3368 domains visited
Cumulative time: 7.543075323104858

BaB round 9
batch: 1153
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] [/input-8, 1716] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022518038749694824
10 lb beta sum: 0.7520108819007874, worst -0.02251213788986206
Time: prepare 0.0559    bound 0.1933    transfer 0.0292    finalize 0.0136    func 0.3092    
Accumulated time: func 2.9400    prepare 0.3147    bound 2.4077    transfer 0.1025    finalize 0.0680    
all_split False
======================Cut inference begins======================
max lb tensor(0.22707099) min lb tensor(-0.02250618)
Number of Verified Splits: 950 of 2306
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.21346426010131836 
BICCOS Cumulative time: 0.9753689765930176
Preprocessing time: 0.07928323745727539 Inference time: 0.12633395195007324 Add cuts time: 0.006245136260986328 Cut analysis time: 0.0016019344329833984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02251 (17), -0.02240 (17), -0.02177 (17), -0.02173 (17), -0.02139 (17), -0.02139 (17), -0.02135 (17), -0.02127 (17), -0.02119 (17), -0.02108 (17), -0.02086 (17), -0.02084 (17), -0.02080 (17), -0.02077 (17), -0.02064 (17), -0.02063 (17), -0.02062 (17), -0.02052 (17), -0.02051 (17), -0.02048 (17), 
Length of domains: 1356
Time: pickout 0.0332    decision 0.0852    set_bounds 0.1172    solve 0.3100    add 0.1380    
Accumulated time: pickout 0.2906    decision 1.1663    set_bounds 0.4475    solve 2.7091    add 2.3557    
Current (lb-rhs): -0.02250617742538452
4724 domains visited
Cumulative time: 8.45912218093872

BaB round 10
batch: 1356
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 731] [/input-8, 731] [/input-8, 772] [/input-8, 731] [/input-8, 731] [/input-8, 731] [/input-8, 772] [/input-8, 731] [/input-8, 731] [/input-8, 731] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7601711750030518, worst -0.02125382423400879
10 lb beta sum: 0.7732667922973633, worst -0.021242976188659668
Time: prepare 0.1221    bound 0.2168    transfer 0.0236    finalize 0.0192    func 0.4003    
Accumulated time: func 3.3402    prepare 0.4371    bound 2.6245    transfer 0.1260    finalize 0.0872    
all_split False
======================Cut inference begins======================
max lb tensor(0.00183654) min lb tensor(-0.02123994)
Number of Verified Splits: 170 of 2712
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.12336564064025879 
BICCOS Cumulative time: 1.0987346172332764
Preprocessing time: 0.09235286712646484 Inference time: 0.028065204620361328 Add cuts time: 0.0014729499816894531 Cut analysis time: 0.001474618911743164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02124 (18), -0.02113 (18), -0.02110 (18), -0.02107 (18), -0.02086 (18), -0.02075 (18), -0.02072 (18), -0.02069 (18), -0.02017 (18), -0.02014 (18), -0.02011 (18), -0.02000 (18), -0.01999 (18), -0.01994 (18), -0.01992 (18), -0.01990 (18), -0.01983 (18), -0.01981 (18), -0.01979 (18), -0.01977 (18), 
Length of domains: 2542
Time: pickout 0.0916    decision 0.0902    set_bounds 0.3138    solve 0.4022    add 0.1215    
Accumulated time: pickout 0.3823    decision 1.2565    set_bounds 0.7613    solve 3.1112    add 2.4772    
Current (lb-rhs): -0.021239936351776123
7266 domains visited
Cumulative time: 9.613340139389038

BaB round 11
batch: 2542
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] [/input-8, 138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7460325956344604, worst -0.021096408367156982
10 lb beta sum: 0.7511554956436157, worst -0.02109658718109131
Time: prepare 0.4017    bound 0.3413    transfer 0.0577    finalize 0.0263    func 0.8605    
Accumulated time: func 4.2008    prepare 0.8391    bound 2.9659    transfer 0.1838    finalize 0.1135    
all_split False
======================Cut inference begins======================
max lb tensor(0.00975394) min lb tensor(-0.02109414)
Number of Verified Splits: 1802 of 5084
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts: total 660 constraints, 35720 nonzero elements
cuts preparing time: 0.0184
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 673.
#cuts 1-3: 160
#cuts 7-9: 1
#cuts 10-12: 2
#cuts 13-15: 11
#cuts 16-18: 29
#cuts 19-21: 42
#cuts >= 20: 428
BICCOS time: 0.793893575668335 
BICCOS Cumulative time: 1.8926281929016113
Preprocessing time: 0.17406225204467773 Inference time: 0.2988772392272949 Add cuts time: 0.014183282852172852 Cut analysis time: 0.30677080154418945
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02109 (19), -0.02106 (19), -0.02072 (19), -0.02069 (19), -0.02056 (19), -0.02045 (19), -0.02019 (19), -0.02016 (19), -0.02013 (19), -0.02008 (19), -0.01992 (19), -0.01989 (19), -0.01982 (19), -0.01980 (19), -0.01979 (19), -0.01976 (19), -0.01954 (19), -0.01953 (19), -0.01952 (19), -0.01949 (19), 
Length of domains: 3282
Time: pickout 0.0585    decision 0.1561    set_bounds 0.2338    solve 0.8624    add 0.2250    
Accumulated time: pickout 0.4408    decision 1.4126    set_bounds 0.9952    solve 3.9737    add 2.7022    
Current (lb-rhs): -0.021094143390655518
10548 domains visited
Cumulative time: 11.97816801071167

BaB round 12
batch: 3282
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] [/input-8, 582] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.020202696323394775
10 lb beta sum: 2.4393086433410645, worst -0.01025325059890747
Time: prepare 0.1393    bound 1.4508    transfer 0.0388    finalize 0.0475    func 1.7205    
Accumulated time: func 5.9212    prepare 0.9787    bound 4.4167    transfer 0.2226    finalize 0.1609    
all_split False
======================Cut inference begins======================
max lb tensor(0.01245785) min lb tensor(-0.00204587)
Number of Verified Splits: 6497 of 6564
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 1.573007583618164 
BICCOS Cumulative time: 3.4656357765197754
Preprocessing time: 0.2207777500152588 Inference time: 1.2994070053100586 Add cuts time: 0.04937911033630371 Cut analysis time: 0.0034437179565429688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (20), -0.00204 (20), -0.00187 (20), -0.00185 (20), -0.00172 (20), -0.00167 (20), -0.00161 (20), -0.00156 (20), -0.00151 (20), -0.00147 (20), -0.00140 (20), -0.00135 (20), -0.00128 (20), -0.00128 (20), -0.00124 (20), -0.00121 (20), -0.00119 (20), -0.00118 (20), -0.00118 (20), -0.00104 (20), 
Length of domains: 67
Time: pickout 0.1519    decision 0.3713    set_bounds 0.3035    solve 1.7226    add 0.0707    
Accumulated time: pickout 0.5927    decision 1.7839    set_bounds 1.2987    solve 5.6963    add 2.7729    
Current (lb-rhs): -0.002045869827270508
10615 domains visited
Cumulative time: 16.24204421043396

BaB round 13
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 580] [/input-8, 579] [/input-8, 580] [/input-8, 580] [/input-8, 579] [/input-8, 580] [/input-8, 582] [/input-8, 582] [/input-8, 1733] [/input-8, 1733] 
split level 1: [/input-8, 579] [/input-8, 1730] [/input-8, 579] [/input-8, 579] [/input-8, 1730] [/input-8, 579] [/input-8, 1730] [/input-8, 1730] [/input-8, 1730] [/input-8, 1730] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01827031373977661
10 lb beta sum: 0.1796383261680603, worst -0.018152594566345215
Time: prepare 0.0055    bound 0.1319    transfer 0.0035    finalize 0.0024    func 0.1452    
Accumulated time: func 6.0664    prepare 0.9845    bound 4.5486    transfer 0.2261    finalize 0.1633    
all_split False
======================Cut inference begins======================
max lb tensor(-2.72057950e-05) min lb tensor(-0.00204587)
Number of Verified Splits: 0 of 268
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.009757757186889648 
BICCOS Cumulative time: 3.475393533706665
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (22), -0.00205 (22), -0.00205 (22), -0.00205 (22), -0.00204 (22), -0.00204 (22), -0.00204 (22), -0.00204 (22), -0.00187 (22), -0.00187 (22), -0.00187 (22), -0.00187 (22), -0.00185 (22), -0.00185 (22), -0.00185 (22), -0.00185 (22), -0.00172 (22), -0.00172 (22), -0.00172 (22), -0.00172 (22), 
Length of domains: 268
Time: pickout 0.0078    decision 0.0161    set_bounds 0.0135    solve 0.1453    add 0.0782    
Accumulated time: pickout 0.6005    decision 1.8001    set_bounds 1.3122    solve 5.8415    add 2.8511    
Current (lb-rhs): -0.002045869827270508
10883 domains visited
Cumulative time: 16.520139694213867

BaB round 14
batch: 268
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1730] [/input-8, 580] [/input-8, 1730] [/input-8, 1730] [/input-8, 580] [/input-8, 1730] [/input-8, 580] [/input-8, 580] [/input-8, 579] [/input-8, 580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2119911164045334, worst -0.017311394214630127
10 lb beta sum: 0.2119911164045334, worst -0.017279744148254395
Time: prepare 0.0239    bound 0.1437    transfer 0.0043    finalize 0.0025    func 0.1779    
Accumulated time: func 6.2443    prepare 1.0087    bound 4.6923    transfer 0.2304    finalize 0.1658    
all_split False
======================Cut inference begins======================
max lb tensor(-2.72057950e-05) min lb tensor(-0.00204587)
Number of Verified Splits: 0 of 536
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0018
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.01807379722595215 
BICCOS Cumulative time: 3.493467330932617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (23), -0.00205 (23), -0.00205 (23), -0.00205 (23), -0.00205 (23), -0.00205 (23), -0.00205 (23), -0.00205 (23), -0.00204 (23), -0.00204 (23), -0.00204 (23), -0.00204 (23), -0.00204 (23), -0.00204 (23), -0.00204 (23), -0.00204 (23), -0.00187 (23), -0.00187 (23), -0.00187 (23), -0.00187 (23), 
Length of domains: 536
Time: pickout 0.0203    decision 0.0295    set_bounds 0.0251    solve 0.1781    add 0.0883    
Accumulated time: pickout 0.6207    decision 1.8296    set_bounds 1.3373    solve 6.0196    add 2.9394    
Current (lb-rhs): -0.002045869827270508
11419 domains visited
Cumulative time: 16.888087034225464

BaB round 15
batch: 536
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 1733] [/input-8, 579] [/input-8, 579] [/input-8, 580] [/input-8, 579] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2119911164045334, worst -0.01641547679901123
10 lb beta sum: 0.2119911164045334, worst -0.01639533042907715
Time: prepare 0.0471    bound 0.1484    transfer 0.0148    finalize 0.0073    func 0.2246    
Accumulated time: func 6.4690    prepare 1.0560    bound 4.8407    transfer 0.2452    finalize 0.1731    
all_split False
======================Cut inference begins======================
max lb tensor(-2.72057950e-05) min lb tensor(-0.00204587)
Number of Verified Splits: 0 of 1072
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.03619098663330078 
BICCOS Cumulative time: 3.529658317565918
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00205 (24), -0.00204 (24), -0.00204 (24), -0.00204 (24), -0.00204 (24), 
Length of domains: 1072
Time: pickout 0.0284    decision 0.0457    set_bounds 0.0484    solve 0.2248    add 0.1019    
Accumulated time: pickout 0.6491    decision 1.8753    set_bounds 1.3856    solve 6.2444    add 3.0413    
Current (lb-rhs): -0.002045869827270508
12491 domains visited
Cumulative time: 17.385287284851074

BaB round 16
batch: 1072
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 3351] [/input-8, 1593] [/input, 3351] [/input, 3351] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2119911164045334, worst -0.015814900398254395
10 lb beta sum: 0.2119911164045334, worst -0.015796124935150146
Time: prepare 0.1064    bound 0.1788    transfer 0.0191    finalize 0.0140    func 0.3324    
Accumulated time: func 6.8014    prepare 1.1626    bound 5.0194    transfer 0.2643    finalize 0.1871    
all_split False
======================Cut inference begins======================
max lb tensor(-2.72057950e-05) min lb tensor(-0.00204587)
Number of Verified Splits: 0 of 2144
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.07165026664733887 
BICCOS Cumulative time: 3.601308584213257
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), -0.00205 (25), 
Length of domains: 2144
Time: pickout 0.0317    decision 0.0736    set_bounds 0.0792    solve 0.3329    add 0.1373    
Accumulated time: pickout 0.6809    decision 1.9490    set_bounds 1.4649    solve 6.5773    add 3.1786    
Current (lb-rhs): -0.002045869827270508
14635 domains visited
Cumulative time: 18.120928287506104

BaB round 17
batch: 2144
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.21199113130569458, worst -0.015134811401367188
10 lb beta sum: 0.21199113130569458, worst -0.015132665634155273
Time: prepare 0.2208    bound 0.2977    transfer 0.0387    finalize 0.0312    func 0.6168    
Accumulated time: func 7.4182    prepare 1.3837    bound 5.3171    transfer 0.3030    finalize 0.2183    
all_split False
======================Cut inference begins======================
max lb tensor(-2.72057950e-05) min lb tensor(-0.00204587)
Number of Verified Splits: 0 of 4288
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0021
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.14437413215637207 
BICCOS Cumulative time: 3.745682716369629
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), -0.00205 (26), 
Length of domains: 4288
Time: pickout 0.1231    decision 0.3061    set_bounds 0.1678    solve 0.6183    add 0.1490    
Accumulated time: pickout 0.8040    decision 2.2551    set_bounds 1.6327    solve 7.1956    add 3.3276    
Current (lb-rhs): -0.002045869827270508
18923 domains visited
Cumulative time: 19.64125370979309

BaB round 18
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input, 2968] [/input, 2968] [/input, 2968] [/input, 2968] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2118554413318634, worst -0.014036238193511963
10 lb beta sum: 0.2118554413318634, worst -0.01400214433670044
Time: prepare 0.4221    bound 0.5052    transfer 0.0280    finalize 0.0515    func 1.0608    
Accumulated time: func 8.4789    prepare 1.8062    bound 5.8224    transfer 0.3310    finalize 0.2698    
all_split False
======================Cut inference begins======================
max lb tensor(5.26458025e-05) min lb tensor(-0.00204587)
Number of Verified Splits: 1 of 8192
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts: total 897 constraints, 54545 nonzero elements
cuts preparing time: 0.2546
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 913.
#cuts 1-3: 187
#cuts 4-6: 1
#cuts 7-9: 1
#cuts 10-12: 12
#cuts 13-15: 17
#cuts 16-18: 47
#cuts 19-21: 58
#cuts >= 20: 590
BICCOS time: 1.008551836013794 
BICCOS Cumulative time: 4.754234552383423
Preprocessing time: 0.29381656646728516 Inference time: 0.0025742053985595703 Add cuts time: 0.007882356643676758 Cut analysis time: 0.7042787075042725
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (26), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), -0.00205 (27), 
Length of domains: 8383
Time: pickout 0.0983    decision 0.2412    set_bounds 0.5404    solve 1.0629    add 0.1922    
Accumulated time: pickout 0.9023    decision 2.4963    set_bounds 2.1731    solve 8.2585    add 3.5198    
Current (lb-rhs): -0.002045869827270508
27114 domains visited
current_vram/total_varm: 12.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 22.79885506629944

BaB round 19
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 142] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.013515591621398926
10 lb beta sum: 3.616565465927124, worst -0.01504528522491455
Time: prepare 0.4573    bound 4.1286    transfer 0.1013    finalize 0.1184    func 4.9138    
Accumulated time: func 13.3928    prepare 2.2639    bound 9.9510    transfer 0.4323    finalize 0.3882    
all_split False
======================Cut inference begins======================
max lb tensor(0.01584756) min lb tensor(1.82390213e-05)
Number of Verified Splits: 16384 of 16384
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts: total 1257 constraints, 70332 nonzero elements
cuts preparing time: 0.0720
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1273.
#cuts 1-3: 252
#cuts 7-9: 2
#cuts 10-12: 17
#cuts 13-15: 33
#cuts 16-18: 71
#cuts 19-21: 83
#cuts >= 20: 815
BICCOS time: 1.207547903060913 
BICCOS Cumulative time: 5.961782455444336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00205 (27), -0.00205 (27), -0.00204 (27), -0.00204 (27), -0.00204 (27), -0.00187 (27), -0.00187 (27), -0.00185 (27), -0.00185 (27), -0.00185 (27), -0.00172 (27), -0.00172 (27), -0.00172 (27), -0.00167 (27), -0.00167 (27), -0.00161 (27), -0.00161 (27), -0.00156 (27), -0.00156 (27), -0.00156 (27), 
Length of domains: 191
Time: pickout 0.1785    decision 0.4905    set_bounds 1.0497    solve 5.1899    add 0.0081    
Accumulated time: pickout 1.0808    decision 2.9868    set_bounds 3.2228    solve 13.4484    add 3.5279    
Current (lb-rhs): -0.002045869827270508
27114 domains visited
current_vram/total_varm: 24.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 31.088359117507935

BaB round 20
batch: 191
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 382] [/input-8, 1576] [/input-8, 1593] [/input-8, 1576] [/input-8, 1576] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010763406753540039
10 lb beta sum: 3.756072759628296, worst -0.018399208784103394
Time: prepare 0.0099    bound 0.2085    transfer 0.0029    finalize 0.0036    func 0.2274    
Accumulated time: func 13.6202    prepare 2.2740    bound 10.1595    transfer 0.4352    finalize 0.3918    
all_split False
======================Cut inference begins======================
max lb tensor(0.01448160) min lb tensor(0.00609249)
Number of Verified Splits: 382 of 382
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0016
Total number of valid cuts: 1273.
#cuts 1-3: 252
#cuts 7-9: 2
#cuts 10-12: 17
#cuts 13-15: 33
#cuts 16-18: 71
#cuts 19-21: 83
#cuts >= 20: 815
BICCOS time: 0.014519929885864258 
BICCOS Cumulative time: 5.9763023853302
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0199    decision 0.0205    set_bounds 0.0173    solve 0.2275    add 0.0001    
Accumulated time: pickout 1.1007    decision 3.0073    set_bounds 3.2401    solve 13.6759    add 3.5280    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
27114 domains visited
Cumulative time: 31.390998125076294

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=3_27020207.log
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=4_27020207.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=4_27020207.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=4_27020207.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=154_spec=4_27020207.log
found process for pidx=3
kill process for pidx=3
found process for pidx=4
Result: safe in 35.3145 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 293, 1, 523] with unstable size 292 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 523] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [292]; unstable size 292; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 292] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 292] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.07341206,  0.02069998, -0.45618200, -0.75070477, -0.48273396,
         -0.58674031,  0.21641377, -1.83327818, -0.92162538]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.92134666, -14.68086624, -14.01877499, -12.96694374, -13.68891144,
         -13.29801559, -12.61456585, -14.58385181, -12.91630363, -13.61004829]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.51872063, -14.14559269, -13.69043827, -12.47999954, -13.32490540,
          -12.76778603, -12.69309044, -14.15062237, -12.40921497, -13.10730171],
         [-14.51872063, -14.14559269, -13.69043827, -12.47999954, -13.32490540,
          -12.76778603, -12.69309044, -14.15062237, -12.40921497, -13.10730171]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.99734783, -0.21309090,  0.63181496,  0.07469559, -0.28387547,
           0.41421127]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0141 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0619 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [789]; unstable size 789; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 789] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 789] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 789] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 259] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.47897100,  2.52675486,  0.01573086, -0.71339214, -0.73171186,
         -1.54283810,  0.69137228,  2.97468758,  2.91973925]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.54337883, -22.91224098, -19.67365646, -18.07358360, -18.92478752,
         -18.42077827, -18.27539825, -20.47289658, -23.38033676, -23.14374924]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733],
         [-22.54338074, -22.91224098, -19.67365646, -18.07358170, -18.92478561,
          -18.42077637, -18.27539635, -20.47289658, -23.38033676, -23.14374733]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.34719467,  0.50400925, -0.14538002]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0534 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.22789001, -20.43865013, -26.99475098, -25.86932182, -27.76927757,
         -27.09349632, -26.96388435, -26.58814430, -23.07920265, -18.19562912]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 462] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 462] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 182] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89370680, 1.38738203, 7.23277378, 6.41899061, 8.12875843, 7.56016397,
         7.36910820, 6.89902973, 3.88113165]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0422 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 235, 1, 584] with unstable size 234 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 584] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [234]; unstable size 234; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 234] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 234] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.98524356,  0.54466248,  1.17118835, -0.38150430,  1.88505125,
         -0.46537113,  0.44484568,  0.24631667,  3.03603697]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
         -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]100%|██████████| 1/1 [00:00<00:00,  8.81it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.40004921, -27.81439972, -28.63260841, -26.82824707, -29.46389771,
          -26.85524750, -27.88347054, -27.95292473, -26.49364471, -30.27164841],
         [-28.40004921, -27.81439972, -28.63260841, -26.82824707, -29.46389771,
          -26.85524750, -27.88347054, -27.95292473, -26.49364471, -30.27164841]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.33460236, 0.36160278]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1162 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.091227531433105
alpha/beta optimization time: 1.2082788944244385
initial alpha-crown bounds: tensor([[ 1.03688943,  0.59373116,  1.24077272, -0.31201363,  1.97173214,
         -0.38633871,  0.51818895,  0.33714437,  3.09112096]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.3863387107849121
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6389 seconds.
lower bounds for all target labels: [1.0368894338607788, 0.5937306880950928, 1.2407727241516113, -0.3120136260986328, 1.971731185913086, -0.3863387107849121, 0.5181889533996582, 0.3371443748474121, 3.091120958328247]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [3, 5]
start creating model mps for candidates: ['lay/16_3', 'lay/16_5']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=3_27023748.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=3_27023748.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 53159 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 53162 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52613306045532
Verifying property 0 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.091120958328247.

Properties batch 1, size 1
Remaining timeout: 198.24560022354126
Verifying property 1 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9717321395874023.

Properties batch 2, size 1
Remaining timeout: 198.13608074188232
Verifying property 2 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2407727241516113.

Properties batch 3, size 1
Remaining timeout: 198.033921957016
Verifying property 3 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0368894338607788.

Properties batch 4, size 1
Remaining timeout: 197.93208646774292
Verifying property 4 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.593731164932251.

Properties batch 5, size 1
Remaining timeout: 197.82828044891357
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5181889533996582.

Properties batch 6, size 1
Remaining timeout: 197.7258801460266
Verifying property 6 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3371443748474121.

Properties batch 7, size 1
Remaining timeout: 197.61868619918823
Verifying property 7 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.31201363]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.31201363]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007693767547607422
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0639    transfer 0.0001    finalize 0.0002    func 0.0645    
Accumulated time: func 0.0645    prepare 0.0003    bound 0.0639    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 8] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 172] 
split level 12: [/input-8, 171] 
split level 13: [/input, 456] 
split level 14: [/input, 439] 
split level 15: [/input, 3000] 
split level 16: [/input-8, 179] 
split level 17: [/input-8, 788] 
split level 18: [/input, 3017] 
split level 19: [/input, 442] 
split level 20: [/input, 3018] 
split level 21: [/input-8, 371] 
split level 22: [/input, 3032] 
split level 23: [/input, 2986] 
split level 24: [/input-8, 909] 
split level 25: [/input-8, 1287] 
split level 26: [/input-8, 1282] 
split level 27: [/input-8, 473] 
split level 28: [/input-8, 178] 
split level 29: [/input, 3066] 
split level 30: [/input, 2972] 
split level 31: [/input, 3002] 
split level 32: [/input-8, 380] 
split level 33: [/input, 954] 
split level 34: [/input-8, 892] 
split level 35: [/input-8, 372] 
split level 36: [/input-8, 1067] 
split level 37: [/input, 487] 
split level 38: [/input, 2955] 
split level 39: [/input, 3019] 
split level 40: [/input-8, 186] 
split level 41: [/input-8, 1780] 
split level 42: [/input-8, 1125] 
split level 43: [/input, 3031] 
split level 44: [/input-8, 381] 
split level 45: [/input-8, 1075] 
split level 46: [/input, 999] 
split level 47: [/input-8, 1732] 
split level 48: [/input, 506] 
split level 49: [/input-8, 1123] 
split level 50: [/input, 3013] 
split level 51: [/input-8, 1118] 
split level 52: [/input-8, 292] 
split level 53: [/input, 474] 
split level 54: [/input-8, 1772] 
split level 55: [/input-8, 1038] 
split level 56: [/input-8, 1773] 
split level 57: [/input-8, 508] 
split level 58: [/input, 1975] 
split level 59: [/input, 892] 
split level 60: [/input, 956] 
split level 61: [/input, 986] 
split level 62: [/input-8, 146] 
split level 63: [/input-8, 465] 
split level 64: [/input, 202] 
split level 65: [/input-8, 774] 
split level 66: [/input-8, 925] 
split level 67: [/input-8, 1035] 
split level 68: [/input-8, 592] 
split level 69: [/input, 200] 
split level 70: [/input-8, 871] 
split level 71: [/input-8, 1655] 
split level 72: [/input-8, 792] 
split level 73: [/input, 949] 
split level 74: [/input, 2871] 
split level 75: [/input, 3036] 
split level 76: [/input, 918] 
split level 77: [/input-8, 1643] 
split level 78: [/input, 298] 
split level 79: [/input-8, 1731] 
split level 80: [/input, 467] 
split level 81: [/input, 217] 
split level 82: [/input, 971] 
split level 83: [/input, 1993] 
split level 84: [/input, 932] 
split level 85: [/input-8, 2046] 
split level 86: [/input, 2997] 
split level 87: [/input, 618] 
split level 88: [/input, 2927] 
split level 89: [/input-8, 893] 
split level 90: [/input, 1977] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1180] 
split level 93: [/input, 1974] 
split level 94: [/input-8, 891] 
split level 95: [/input, 1017] 
split level 96: [/input-8, 1730] 
split level 97: [/input, 923] 
split level 98: [/input-8, 1625] 
split level 99: [/input-8, 843] 
split level 100: [/input, 1976] 
split level 101: [/input, 232] 
split level 102: [/input, 435] 
split level 103: [/input, 2947] 
split level 104: [/input, 903] 
split level 105: [/input-8, 888] 
split level 106: [/input, 1003] 
split level 107: [/input, 507] 
split level 108: [/input, 390] 
split level 109: [/input, 1012] 
split level 110: [/input-8, 1614] 
split level 111: [/input, 1960] 
split level 112: [/input-8, 165] 
split level 113: [/input, 1978] 
split level 114: [/input-8, 773] 
split level 115: [/input, 3554] 
split level 116: [/input-8, 820] 
split level 117: [/input, 1990] 
split level 118: [/input-8, 1407] 
split level 119: [/input, 597] 
split level 120: [/input, 924] 
split level 121: [/input, 633] 
split level 122: [/input, 3022] 
split level 123: [/input-8, 158] 
split level 124: [/input, 308] 
split level 125: [/input-8, 122] 
split level 126: [/input, 661] 
split level 127: [/input-8, 1790] 
split level 128: [/input-8, 1563] 
split level 129: [/input-8, 1233] 
split level 130: [/input, 884] 
split level 131: [/input, 185] 
split level 132: [/input-8, 1737] 
split level 133: [/input, 619] 
split level 134: [/input, 3037] 
split level 135: [/input, 203] 
split level 136: [/input, 219] 
split level 137: [/input-8, 879] 
split level 138: [/input, 1973] 
split level 139: [/input-8, 406] 
split level 140: [/input, 2887] 
split level 141: [/input, 283] 
split level 142: [/input-8, 334] 
split level 143: [/input, 1989] 
split level 144: [/input, 323] 
split level 145: [/input, 909] 
split level 146: [/input, 631] 
split level 147: [/input, 795] 
split level 148: [/input, 2024] 
split level 149: [/input, 3522] 
split level 150: [/input, 314] 
split level 151: [/input-8, 1548] 
split level 152: [/input, 1502] 
split level 153: [/input, 605] 
split level 154: [/input-8, 169] 
split level 155: [/input-8, 887] 
split level 156: [/input-8, 1613] 
split level 157: [/input, 222] 
split level 158: [/input-8, 890] 
split level 159: [/input, 632] 
split level 160: [/input, 2010] 
split level 161: [/input, 221] 
split level 162: [/input, 2526] 
split level 163: [/input, 187] 
split level 164: [/input-8, 1678] 
split level 165: [/input, 2092] 
split level 166: [/input, 973] 
split level 167: [/input, 1961] 
split level 168: [/input-8, 1384] 
split level 169: [/input, 2363] 
split level 170: [/input, 2021] 
split level 171: [/input, 820] 
split level 172: [/input, 2921] 
split level 173: [/input, 339] 
split level 174: [/input, 268] 
split level 175: [/input, 1996] 
split level 176: [/input, 2930] 
split level 177: [/input, 1944] 
split level 178: [/input, 588] 
split level 179: [/input, 1946] 
split level 180: [/input-8, 142] 
split level 181: [/input, 3478] 
split level 182: [/input, 2322] 
split level 183: [/input-8, 1669] 
split level 184: [/input, 617] 
split level 185: [/input, 779] 
split level 186: [/input-8, 1920] 
split level 187: [/input, 2862] 
split level 188: [/input, 70] 
split level 189: [/input, 125] 
split level 190: [/input, 2332] 
split level 191: [/input, 786] 
split level 192: [/input, 2349] 
split level 193: [/input, 803] 
split level 194: [/input-8, 1278] 
split level 195: [/input-8, 1785] 
split level 196: [/input, 72] 
split level 197: [/input, 260] 
split level 198: [/input, 3038] 
split level 199: [/input, 614] 
Time: prepare 0.0063    bound 0.1131    transfer 0.0082    finalize 0.0045    func 0.1321    
Accumulated time: func 0.1967    prepare 0.0181    bound 0.1770    transfer 0.0083    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.19403887) min lb tensor(-0.31195378)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013929605484008789 
BICCOS Cumulative time: 0.013929605484008789
Preprocessing time: 0.012459993362426758 Inference time: 0.00019812583923339844 Add cuts time: 8.702278137207031e-05 Cut analysis time: 0.0011844635009765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29670 (1), -0.29598 (1), -0.29591 (1), -0.29570 (1), -0.29544 (1), -0.29523 (1), -0.29453 (1), -0.29451 (1), -0.29406 (1), -0.29404 (1), -0.29383 (1), -0.29351 (1), -0.29273 (1), -0.29211 (1), -0.29185 (1), -0.29089 (1), -0.29040 (1), -0.29015 (1), -0.29007 (1), -0.29004 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5675    set_bounds 0.0134    solve 0.1322    add 0.2150    
Accumulated time: pickout 0.0004    decision 0.5675    set_bounds 0.0134    solve 0.1322    add 0.2150    
Current (lb-rhs): -0.29670190811157227
50 domains visited
Cumulative time: 1.0311689376831055

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2753450870513916
10 lb beta sum: 0.659247875213623, worst -0.20838260650634766
Time: prepare 0.0079    bound 0.1269    transfer 0.0011    finalize 0.0034    func 0.1420    
Accumulated time: func 0.3387    prepare 0.0264    bound 0.3039    transfer 0.0094    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.29780918) min lb tensor(-0.20817947)
Number of Verified Splits: 64 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.023247718811035156 
BICCOS Cumulative time: 0.037177324295043945
Preprocessing time: 0.016476154327392578 Inference time: 0.003586292266845703 Add cuts time: 0.0021440982818603516 Cut analysis time: 0.0010411739349365234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11036 (2), -0.10995 (2), -0.10935 (2), -0.10905 (2), -0.10900 (2), -0.10859 (2), -0.10841 (2), -0.10803 (2), -0.10690 (2), -0.10664 (2), -0.10652 (2), -0.10589 (2), -0.10525 (2), -0.10452 (2), -0.10276 (2), -0.10264 (2), -0.10227 (2), -0.10106 (2), -0.09940 (2), -0.09830 (2), 
Length of domains: 50
Time: pickout 0.0097    decision 0.0257    set_bounds 0.0182    solve 0.1422    add 0.2425    
Accumulated time: pickout 0.0101    decision 0.5932    set_bounds 0.0316    solve 0.2744    add 0.4575    
Current (lb-rhs): -0.11035645008087158
100 domains visited
Cumulative time: 1.503779411315918

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] 
split level 2: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 64] [/input-12, 64] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611502647399902
10 lb beta sum: 0.756119966506958, worst -0.09558391571044922
Time: prepare 0.0079    bound 0.1294    transfer 0.0013    finalize 0.0059    func 0.1483    
Accumulated time: func 0.4870    prepare 0.0349    bound 0.4333    transfer 0.0107    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.40660283) min lb tensor(-0.09285450)
Number of Verified Splits: 205 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 15
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03118133544921875 
BICCOS Cumulative time: 0.0683586597442627
Preprocessing time: 0.014920949935913086 Inference time: 0.010990619659423828 Add cuts time: 0.0036978721618652344 Cut analysis time: 0.0015718936920166016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02887 (3), -0.02777 (3), -0.02672 (3), -0.02671 (3), -0.02555 (3), -0.02539 (3), -0.02504 (3), -0.02333 (3), -0.02286 (3), -0.02179 (3), -0.02085 (3), -0.02083 (3), -0.02080 (3), -0.02028 (3), -0.02024 (3), -0.01916 (3), -0.01909 (3), -0.01869 (3), -0.01835 (3), -0.01826 (3), 
Length of domains: 50
Time: pickout 0.0057    decision 0.0261    set_bounds 0.0182    solve 0.1485    add 0.2474    
Accumulated time: pickout 0.0158    decision 0.6193    set_bounds 0.0498    solve 0.4228    add 0.7049    
Current (lb-rhs): -0.028867632150650024
150 domains visited
Cumulative time: 1.988187313079834

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 8] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 64] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1351642608642578
10 lb beta sum: 1.0161974430084229, worst -0.08978116512298584
Time: prepare 0.0077    bound 0.1502    transfer 0.0012    finalize 0.0027    func 0.1644    
Accumulated time: func 0.6515    prepare 0.0430    bound 0.5835    transfer 0.0119    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.68372941) min lb tensor(-0.01021142)
Number of Verified Splits: 376 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 8
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.04892587661743164 
BICCOS Cumulative time: 0.11728453636169434
Preprocessing time: 0.013408899307250977 Inference time: 0.02032017707824707 Add cuts time: 0.013519048690795898 Cut analysis time: 0.0016777515411376953
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0082    decision 0.0229    set_bounds 0.0169    solve 0.1646    add 0.0273    
Accumulated time: pickout 0.0240    decision 0.6421    set_bounds 0.0667    solve 0.5874    add 0.7322    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.43343315e-01, 1.06315240e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.43343315e-01, 5.76867014e-02, 1.48440734e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.43343315e-01, 5.76867014e-02, 1.81709547e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.52053460e-01, 1.04177520e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.52053460e-01, 5.66046089e-02, 1.50892541e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61,  2,  8, 42]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.52053460e-01, 5.66046089e-02, 1.81558151e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023889e+30, 5.72376370e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([61, 42]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023889e+30, 8.73802155e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22560644149780273
10 lb beta sum: 1.0109610557556152, worst -0.13295763731002808
Time: prepare 0.0008    bound 0.1942    transfer 0.0003    finalize 0.0003    func 0.1957    
Accumulated time: func 0.8472    prepare 0.0438    bound 0.7776    transfer 0.0122    finalize 0.0171    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-12, 8] 
split level 3: [/input-12, 64] [/input-12, 64] [/input-12, 2] 
split level 4: [/input-12, 79] [/input-12, 79] [/input-12, 64] 
split level 5: [/input-12, 46] [/input-12, 46] [/input-12, 79] 
split level 6: [/input-8, 179] [/input-8, 179] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4878228902816772, worst -0.0355151891708374
10 lb beta sum: 1.4960440397262573, worst -0.035329222679138184
Time: prepare 0.0169    bound 0.1674    transfer 0.0074    finalize 0.0035    func 0.1979    
Accumulated time: func 1.0451    prepare 0.0612    bound 0.9451    transfer 0.0195    finalize 0.0206    
all_split False
======================Cut inference begins======================
max lb tensor(0.99604964) min lb tensor(-0.03529680)
Number of Verified Splits: 380 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4886884689331055, worst -0.5126173496246338
10 lb beta sum: 1.7375200986862183, worst -0.13291287422180176
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=3_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0023
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.7188127040863037 
BICCOS Cumulative time: 0.836097240447998
Preprocessing time: 0.012085676193237305 Inference time: 0.6897139549255371 Add cuts time: 0.013667821884155273 Cut analysis time: 0.0033452510833740234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03530 (7), -0.03191 (7), -0.02938 (7), -0.02565 (7), 
Length of domains: 4
Time: pickout 0.0011    decision 0.0237    set_bounds 0.0380    solve 0.1981    add 0.0342    
Accumulated time: pickout 0.0250    decision 0.6659    set_bounds 0.1047    solve 0.7855    add 0.7664    
Current (lb-rhs): -0.03529679775238037
154 domains visited
Cumulative time: 3.650128126144409

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input-8, 171] [/input-8, 171] [/input-8, 171] 
split level 2: [/input, 3000] [/input, 3000] [/input, 3000] [/input, 3000] 
split level 3: [/input, 3017] [/input, 3017] [/input, 3017] [/input, 3017] 
split level 4: [/input, 3018] [/input, 3018] [/input, 3018] [/input, 3018] 
split level 5: [/input-8, 179] [/input-8, 179] [/input-8, 179] [/input-8, 179] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00426793098449707

all verified at 0th iter
Time: prepare 0.0068    bound 0.0061    transfer 0.0051    finalize 0.0020    func 0.0216    
Accumulated time: func 1.0667    prepare 0.0684    bound 0.9512    transfer 0.0246    finalize 0.0225    
all_split False
======================Cut inference begins======================
max lb tensor(0.09694672) min lb tensor(0.00426793)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=3_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
Total number of valid cuts: 25.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.00980520248413086 
BICCOS Cumulative time: 0.8459024429321289
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0025    decision 0.0210    set_bounds 0.0295    solve 0.0217    add 0.0001    
Accumulated time: pickout 0.0275    decision 0.6869    set_bounds 0.1342    solve 0.8072    add 0.7664    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
154 domains visited
Cumulative time: 3.7363853454589844

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=3_27023748.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=3_27023748.log

Properties batch 8, size 1
Remaining timeout: 193.66836166381836
Verifying property 8 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.38633871]], device='cuda:0') need to verify.
Model prediction is: tensor([-29.36944771, -28.77778244, -30.05463600, -28.34849167, -31.03860283,
        -28.43247223, -29.29167557, -29.50824356, -27.05603409, -31.43330383],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.38633871]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 584
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 230
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 829
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
Cut time: 0.0010156631469726562
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0569    transfer 0.0001    finalize 0.0001    func 0.0574    
Accumulated time: func 0.0574    prepare 0.0002    bound 0.0569    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 64] 
split level 7: [/input-12, 79] 
split level 8: [/input-12, 61] 
split level 9: [/input-12, 46] 
split level 10: [/input-8, 268] 
split level 11: [/input-8, 909] 
split level 12: [/input-8, 172] 
split level 13: [/input-8, 171] 
split level 14: [/input, 456] 
split level 15: [/input, 439] 
split level 16: [/input, 3000] 
split level 17: [/input-8, 1282] 
split level 18: [/input-8, 179] 
split level 19: [/input, 442] 
split level 20: [/input, 3032] 
split level 21: [/input, 2986] 
split level 22: [/input, 3017] 
split level 23: [/input, 3018] 
split level 24: [/input-8, 788] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1287] 
split level 28: [/input-8, 892] 
split level 29: [/input, 3066] 
split level 30: [/input-8, 178] 
split level 31: [/input, 487] 
split level 32: [/input, 2972] 
split level 33: [/input-8, 473] 
split level 34: [/input, 3002] 
split level 35: [/input, 954] 
split level 36: [/input, 2955] 
split level 37: [/input, 3031] 
split level 38: [/input-8, 925] 
split level 39: [/input-8, 1780] 
split level 40: [/input, 3019] 
split level 41: [/input-8, 372] 
split level 42: [/input-8, 186] 
split level 43: [/input-8, 1075] 
split level 44: [/input-8, 1038] 
split level 45: [/input-8, 1772] 
split level 46: [/input, 506] 
split level 47: [/input-8, 380] 
split level 48: [/input, 999] 
split level 49: [/input-8, 1773] 
split level 50: [/input-8, 774] 
split level 51: [/input-8, 1123] 
split level 52: [/input-8, 381] 
split level 53: [/input, 474] 
split level 54: [/input, 3013] 
split level 55: [/input-8, 1125] 
split level 56: [/input-8, 1035] 
split level 57: [/input-8, 508] 
split level 58: [/input-8, 1643] 
split level 59: [/input-8, 465] 
split level 60: [/input-8, 1732] 
split level 61: [/input, 892] 
split level 62: [/input, 986] 
split level 63: [/input-8, 146] 
split level 64: [/input, 202] 
split level 65: [/input-8, 871] 
split level 66: [/input, 949] 
split level 67: [/input-8, 1548] 
split level 68: [/input, 298] 
split level 69: [/input, 956] 
split level 70: [/input-8, 792] 
split level 71: [/input-8, 891] 
split level 72: [/input-8, 292] 
split level 73: [/input-8, 1118] 
split level 74: [/input-8, 1635] 
split level 75: [/input, 3036] 
split level 76: [/input-8, 893] 
split level 77: [/input, 923] 
split level 78: [/input, 467] 
split level 79: [/input, 200] 
split level 80: [/input, 1975] 
split level 81: [/input-8, 1180] 
split level 82: [/input, 918] 
split level 83: [/input-8, 2046] 
split level 84: [/input, 217] 
split level 85: [/input-8, 592] 
split level 86: [/input, 971] 
split level 87: [/input, 2927] 
split level 88: [/input, 1017] 
split level 89: [/input-8, 1076] 
split level 90: [/input-8, 1228] 
split level 91: [/input, 932] 
split level 92: [/input, 2997] 
split level 93: [/input-8, 843] 
split level 94: [/input, 924] 
split level 95: [/input, 232] 
split level 96: [/input-8, 1563] 
split level 97: [/input, 507] 
split level 98: [/input-8, 773] 
split level 99: [/input-8, 820] 
split level 100: [/input-8, 1614] 
split level 101: [/input, 618] 
split level 102: [/input, 1003] 
split level 103: [/input, 2947] 
split level 104: [/input, 1974] 
split level 105: [/input-8, 165] 
split level 106: [/input, 435] 
split level 107: [/input, 1012] 
split level 108: [/input, 2871] 
split level 109: [/input-8, 1731] 
split level 110: [/input, 1977] 
split level 111: [/input, 390] 
split level 112: [/input-8, 1243] 
split level 113: [/input, 1993] 
split level 114: [/input-8, 888] 
split level 115: [/input, 903] 
split level 116: [/input-8, 12] 
split level 117: [/input, 3022] 
split level 118: [/input-8, 1625] 
split level 119: [/input-8, 332] 
split level 120: [/input, 1976] 
split level 121: [/input-8, 158] 
split level 122: [/input, 283] 
split level 123: [/input, 1960] 
split level 124: [/input-8, 122] 
split level 125: [/input, 3554] 
split level 126: [/input, 811] 
split level 127: [/input, 633] 
split level 128: [/input, 2092] 
split level 129: [/input-8, 1233] 
split level 130: [/input-8, 890] 
split level 131: [/input-8, 1920] 
split level 132: [/input, 884] 
split level 133: [/input, 597] 
split level 134: [/input-8, 879] 
split level 135: [/input, 203] 
split level 136: [/input, 795] 
split level 137: [/input, 308] 
split level 138: [/input, 1978] 
split level 139: [/input, 1990] 
split level 140: [/input, 219] 
split level 141: [/input, 314] 
split level 142: [/input, 3037] 
split level 143: [/input, 185] 
split level 144: [/input-8, 334] 
split level 145: [/input-8, 1678] 
split level 146: [/input-8, 1407] 
split level 147: [/input-8, 1642] 
split level 148: [/input, 909] 
split level 149: [/input, 792] 
split level 150: [/input-8, 1737] 
split level 151: [/input, 2363] 
split level 152: [/input-8, 887] 
split level 153: [/input, 323] 
split level 154: [/input, 72] 
split level 155: [/input, 619] 
split level 156: [/input, 2887] 
split level 157: [/input, 1502] 
split level 158: [/input-8, 1384] 
split level 159: [/input, 222] 
split level 160: [/input, 3522] 
split level 161: [/input, 71] 
split level 162: [/input-8, 1669] 
split level 163: [/input-8, 169] 
split level 164: [/input-8, 1613] 
split level 165: [/input-8, 1730] 
split level 166: [/input, 339] 
split level 167: [/input, 973] 
split level 168: [/input, 221] 
split level 169: [/input, 605] 
split level 170: [/input, 70] 
split level 171: [/input, 632] 
split level 172: [/input, 631] 
split level 173: [/input, 2106] 
split level 174: [/input, 187] 
split level 175: [/input, 2930] 
split level 176: [/input, 2109] 
split level 177: [/input, 268] 
split level 178: [/input, 2862] 
split level 179: [/input, 2332] 
split level 180: [/input, 1335] 
split level 181: [/input, 2322] 
split level 182: [/input, 1996] 
split level 183: [/input, 1989] 
split level 184: [/input, 1944] 
split level 185: [/input-8, 1554] 
split level 186: [/input, 2091] 
split level 187: [/input, 1946] 
split level 188: [/input, 3038] 
split level 189: [/input, 779] 
split level 190: [/input, 260] 
split level 191: [/input-8, 1027] 
split level 192: [/input, 786] 
split level 193: [/input, 820] 
split level 194: [/input, 285] 
split level 195: [/input, 2349] 
split level 196: [/input, 1336] 
split level 197: [/input, 617] 
split level 198: [/input, 2021] 
split level 199: [/input, 588] 
Time: prepare 0.0061    bound 0.1077    transfer 0.0028    finalize 0.0034    func 0.1201    
Accumulated time: func 0.1775    prepare 0.0168    bound 0.1647    transfer 0.0029    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.17394590) min lb tensor(-0.38613582)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012997865676879883 
BICCOS Cumulative time: 0.012997865676879883
Preprocessing time: 0.010983467102050781 Inference time: 0.00014257431030273438 Add cuts time: 7.724761962890625e-05 Cut analysis time: 0.001794576644897461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36966 (1), -0.36948 (1), -0.36816 (1), -0.36791 (1), -0.36660 (1), -0.36599 (1), -0.36591 (1), -0.36571 (1), -0.36540 (1), -0.36503 (1), -0.36489 (1), -0.36479 (1), -0.36475 (1), -0.36415 (1), -0.36412 (1), -0.36401 (1), -0.36327 (1), -0.36227 (1), -0.36142 (1), -0.36122 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5499    set_bounds 0.0097    solve 0.1202    add 0.1948    
Accumulated time: pickout 0.0004    decision 0.5499    set_bounds 0.0097    solve 0.1202    add 0.1948    
Current (lb-rhs): -0.3696587085723877
50 domains visited
Cumulative time: 0.9694509506225586

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 68] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] 
split level 2: [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 8] 
split level 3: [/input-12, 2] [/input-12, 79] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3261857032775879
10 lb beta sum: 0.44768524169921875, worst -0.3038473129272461
Time: prepare 0.0076    bound 0.1387    transfer 0.0008    finalize 0.0026    func 0.1524    
Accumulated time: func 0.3299    prepare 0.0246    bound 0.3034    transfer 0.0037    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.26299477) min lb tensor(-0.30362892)
Number of Verified Splits: 96 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.019640445709228516 
BICCOS Cumulative time: 0.0326383113861084
Preprocessing time: 0.012577056884765625 Inference time: 0.0039751529693603516 Add cuts time: 0.0019893646240234375 Cut analysis time: 0.0010988712310791016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18671 (2), -0.18589 (2), -0.18566 (2), -0.18521 (2), -0.18403 (2), -0.18396 (2), -0.18362 (2), -0.18317 (2), -0.18291 (2), -0.18207 (2), -0.18149 (2), -0.18019 (2), -0.17817 (2), -0.17701 (2), -0.17697 (2), -0.17645 (2), -0.17562 (2), -0.17521 (2), -0.17486 (2), -0.17440 (2), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0244    set_bounds 0.0154    solve 0.1525    add 0.2291    
Accumulated time: pickout 0.0086    decision 0.5743    set_bounds 0.0251    solve 0.2727    add 0.4239    
Current (lb-rhs): -0.18671387434005737
100 domains visited
Cumulative time: 1.425952434539795

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 2] [/input-12, 8] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23699212074279785
10 lb beta sum: 0.7949886918067932, worst -0.15894007682800293
Time: prepare 0.0073    bound 0.1382    transfer 0.0024    finalize 0.0029    func 0.1543    
Accumulated time: func 0.4842    prepare 0.0322    bound 0.4416    transfer 0.0061    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.41907066) min lb tensor(-0.15693974)
Number of Verified Splits: 133 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.023542165756225586 
BICCOS Cumulative time: 0.056180477142333984
Preprocessing time: 0.012940645217895508 Inference time: 0.0072002410888671875 Add cuts time: 0.002041339874267578 Cut analysis time: 0.0013599395751953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04343 (3), -0.04210 (3), -0.04130 (3), -0.04106 (3), -0.03999 (3), -0.03920 (3), -0.03904 (3), -0.03805 (3), -0.03779 (3), -0.03728 (3), -0.03704 (3), -0.03676 (3), -0.03662 (3), -0.03650 (3), -0.03635 (3), -0.03521 (3), -0.03301 (3), -0.03144 (3), -0.03121 (3), -0.03005 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0205    set_bounds 0.0161    solve 0.1544    add 0.2289    
Accumulated time: pickout 0.0165    decision 0.5948    set_bounds 0.0412    solve 0.4271    add 0.6527    
Current (lb-rhs): -0.04342779517173767
150 domains visited
Cumulative time: 1.884516954421997

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] [/input-12, 79] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14962434768676758
10 lb beta sum: 0.8382898569107056, worst -0.019561946392059326
Time: prepare 0.0078    bound 0.1556    transfer 0.0008    finalize 0.0027    func 0.1695    
Accumulated time: func 0.6537    prepare 0.0403    bound 0.5972    transfer 0.0069    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.18233877) min lb tensor(-0.01798375)
Number of Verified Splits: 371 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.04656100273132324 
BICCOS Cumulative time: 0.10274147987365723
Preprocessing time: 0.012491226196289062 Inference time: 0.020064830780029297 Add cuts time: 0.011715888977050781 Cut analysis time: 0.0022890567779541016
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0084    decision 0.0207    set_bounds 0.0163    solve 0.1696    add 0.0252    
Accumulated time: pickout 0.0249    decision 0.6155    set_bounds 0.0575    solve 0.5966    add 0.6780    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1067]), tensor([-1.]), tensor([0]), tensor([1.63023889e+30]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([0.17003502, 0.16144489, 0.08077873]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.17003502, 0.16144489, 0.03789060]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.17003502, 0.12521423, 0.09721242]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([0.17003502, 0.12521423, 0.01881676]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([2, 8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.17358984, 0.16715167]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.17358984, 0.12683417, 0.10091232]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1067], [1.0], [0], [3.237003327519144e+21], [0]), '/input-12': (tensor([ 2,  8, 42]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.17358984, 0.12683417, 0.01888627]), tensor([1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38535642623901367
10 lb beta sum: 1.0865375995635986, worst -0.2450229525566101
Time: prepare 0.0007    bound 0.1650    transfer 0.0004    finalize 0.0002    func 0.1664    
Accumulated time: func 0.8201    prepare 0.0410    bound 0.7622    transfer 0.0072    finalize 0.0120    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 90] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 61] 
split level 7: [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4406967163085938, worst -0.05335038900375366
10 lb beta sum: 1.4641393423080444, worst -0.051962316036224365
Time: prepare 0.0116    bound 0.1681    transfer 0.0018    finalize 0.0022    func 0.1856    
Accumulated time: func 1.0057    prepare 0.0530    bound 0.9303    transfer 0.0091    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.98339468) min lb tensor(-0.05187434)
Number of Verified Splits: 249 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4406965970993042, worst -0.2459082007408142
10 lb beta sum: 1.55243718624115, worst -0.24493592977523804
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.5196053981781006 
BICCOS Cumulative time: 0.6223468780517578
Preprocessing time: 0.007988691329956055 Inference time: 0.5044736862182617 Add cuts time: 0.00521087646484375 Cut analysis time: 0.0019321441650390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05187 (8), -0.04826 (8), -0.04587 (8), -0.04135 (8), -0.00658 (8), -0.00383 (8), -0.00252 (8), 
Length of domains: 7
Time: pickout 0.0005    decision 0.0237    set_bounds 0.0189    solve 0.1858    add 0.0399    
Accumulated time: pickout 0.0254    decision 0.6392    set_bounds 0.0765    solve 0.7824    add 0.7179    
Current (lb-rhs): -0.05187433958053589
157 domains visited
Cumulative time: 3.208953619003296

BaB round 2
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input, 3000] [/input-8, 171] [/input-8, 268] [/input, 3000] [/input-8, 171] [/input-8, 171] [/input-8, 268] 
split level 2: [/input-8, 179] [/input, 3000] [/input-8, 171] [/input-8, 179] [/input, 3000] [/input-8, 179] [/input-8, 171] 
split level 3: [/input, 3017] [/input-8, 179] [/input-8, 179] [/input, 3017] [/input-8, 179] [/input, 3017] [/input-8, 179] 
split level 4: [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] [/input, 3017] [/input, 3018] [/input, 3018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.020013093948364258
10 lb beta sum: 0.0431610532104969, worst -0.01454615592956543
Time: prepare 0.0062    bound 0.1733    transfer 0.0043    finalize 0.0023    func 0.1876    
Accumulated time: func 1.1934    prepare 0.0596    bound 1.1036    transfer 0.0134    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.08728027) min lb tensor(-0.01448250)
Number of Verified Splits: 195 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26329684257507324
10 lb beta sum: 0.9346413016319275, worst -0.17956030368804932
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3442060947418213 
BICCOS Cumulative time: 0.9665529727935791
Preprocessing time: 0.0078084468841552734 Inference time: 0.33090877532958984 Add cuts time: 0.0034325122833251953 Cut analysis time: 0.0020563602447509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01448 (13), -0.01268 (13), -0.01267 (13), -0.01071 (13), -0.00978 (13), -0.00903 (13), -0.00876 (13), -0.00856 (13), -0.00836 (13), -0.00807 (13), -0.00741 (13), -0.00616 (13), -0.00548 (13), -0.00482 (13), -0.00465 (13), -0.00462 (13), -0.00458 (13), -0.00427 (13), -0.00356 (13), -0.00331 (13), 
Length of domains: 29
Time: pickout 0.0017    decision 0.0176    set_bounds 0.0289    solve 0.1877    add 0.0559    
Accumulated time: pickout 0.0271    decision 0.6568    set_bounds 0.1054    solve 0.9701    add 0.7738    
Current (lb-rhs): -0.014482498168945312
186 domains visited
Cumulative time: 3.854616403579712

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 171] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] [/input, 3018] [/input-8, 171] [/input, 3018] 
split level 2: [/input, 3002] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3032] [/input, 3002] [/input, 3002] [/input, 3002] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.001104593276977539
10 lb beta sum: 0.0, worst -0.001028299331665039
Time: prepare 0.0065    bound 0.1766    transfer 0.0020    finalize 0.0029    func 0.1897    
Accumulated time: func 1.3830    prepare 0.0663    bound 1.2802    transfer 0.0154    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.06577158) min lb tensor(-0.00097346)
Number of Verified Splits: 231 of 232
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 24
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03608202934265137 
BICCOS Cumulative time: 1.0026350021362305
Preprocessing time: 0.007987022399902344 Inference time: 0.024311542510986328 Add cuts time: 0.0018939971923828125 Cut analysis time: 0.0018894672393798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00097 (16), 
Length of domains: 1
Time: pickout 0.0059    decision 0.0174    set_bounds 0.0265    solve 0.1898    add 0.0042    
Accumulated time: pickout 0.0330    decision 0.6741    set_bounds 0.1319    solve 1.1599    add 0.7780    
Current (lb-rhs): -0.0009734630584716797
187 domains visited
Cumulative time: 4.1369147300720215

BaB round 4
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 268] 
split level 1: [/input, 456] 
split level 2: [/input-8, 172] 
split level 3: [/input-8, 372] 
split level 4: [/input-8, 178] 
split level 5: [/input, 3002] 
split level 6: [/input, 3031] 
split level 7: [/input-8, 1125] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03751254081726074

all verified at 0th iter
Time: prepare 0.0066    bound 0.0063    transfer 0.0017    finalize 0.0015    func 0.0178    
Accumulated time: func 1.4008    prepare 0.0734    bound 1.2865    transfer 0.0171    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.11207485) min lb tensor(0.03751254)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
Total number of valid cuts: 29.
#cuts 1-3: 24
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.009574413299560547 
BICCOS Cumulative time: 1.012209415435791
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0239    set_bounds 0.0312    solve 0.0179    add 0.0001    
Accumulated time: pickout 0.0345    decision 0.6980    set_bounds 0.1630    solve 1.1777    add 0.7781    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
187 domains visited
Cumulative time: 4.222337007522583

found process to kill: terminal indx = 3
found process to kill: terminal indx = 5
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=158_spec=5_27023748.log
found process for pidx=3
found process for pidx=5
kill process for pidx=5
Result: safe in 10.9916 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.30548668, -31.13262558, -30.14710617, -29.36580276, -31.43879890,
         -30.41797447, -28.40415192, -33.04300690, -32.20061874, -30.97929573]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 616] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 616] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 173] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89829922, 1.27482843, 1.03844333, 0.41801417, 2.17892432, 1.35105944,
         3.53787756, 2.40265870, 1.21200275]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0689 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1027]; unstable size 1027; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 1027] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 1027] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1027] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 298] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02182817,  4.76163769, -0.19650865,  1.45338273,  1.88351476,
          0.29130304,  1.95355988,  2.40450501,  4.61817598]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
         -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.77it/s]100%|██████████| 1/1 [00:00<00:00,  7.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.21202469, -18.84812546, -12.25920391, -14.25386429, -11.70048809,
          -14.80021286, -13.11516190, -14.94994068, -16.33413696, -18.77376938]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.55871582]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1320 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.154895782470703
alpha/beta optimization time: 1.3807170391082764
initial alpha-crown bounds: tensor([[ 2.14901805,  4.91513824, -0.11741772,  1.51492667,  1.96165800,
          0.36733073,  2.03420496,  2.56606054,  4.76397753]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11741772294044495
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6629 seconds.
lower bounds for all target labels: [2.149017095565796, 4.915138244628906, -0.11741772294044495, 1.5149266719818115, 1.9616577625274658, 0.36733072996139526, 2.0342044830322266, 2.5660605430603027, 4.763977527618408]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.31806683540344
Verifying property 0 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.915138244628906.

Properties batch 1, size 1
Remaining timeout: 198.15404868125916
Verifying property 1 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.763977527618408.

Properties batch 2, size 1
Remaining timeout: 198.0565538406372
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5660605430603027.

Properties batch 3, size 1
Remaining timeout: 197.96071481704712
Verifying property 3 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1490180492401123.

Properties batch 4, size 1
Remaining timeout: 197.85111951828003
Verifying property 4 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0342049598693848.

Properties batch 5, size 1
Remaining timeout: 197.75755739212036
Verifying property 5 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.961658000946045.

Properties batch 6, size 1
Remaining timeout: 197.66310954093933
Verifying property 6 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5149266719818115.

Properties batch 7, size 1
Remaining timeout: 197.56922435760498
Verifying property 7 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.36733072996139526.

Properties batch 8, size 1
Remaining timeout: 197.4673843383789
Verifying property 8 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11741772]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.07235527, -18.64887428, -12.18960285, -14.05477905, -11.31740856,
        -14.56902885, -12.93454456, -14.51499081, -16.24306488, -18.54707718],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11741772]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1027
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 30
-----------------
# of unstable neurons: 1350
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008580684661865234
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0573    transfer 0.0001    finalize 0.0002    func 0.0579    
Accumulated time: func 0.0579    prepare 0.0003    bound 0.0573    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 24] 
split level 2: [/input-12, 53] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 96] 
split level 5: [/input-12, 6] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 12] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 0] 
split level 10: [/input-8, 1955] 
split level 11: [/input-12, 18] 
split level 12: [/input-12, 49] 
split level 13: [/input-12, 15] 
split level 14: [/input-12, 38] 
split level 15: [/input-8, 1628] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 275] 
split level 18: [/input-8, 1962] 
split level 19: [/input-8, 481] 
split level 20: [/input-8, 484] 
split level 21: [/input-8, 1954] 
split level 22: [/input-8, 274] 
split level 23: [/input-8, 1705] 
split level 24: [/input-8, 1678] 
split level 25: [/input-8, 477] 
split level 26: [/input-8, 1945] 
split level 27: [/input-8, 1710] 
split level 28: [/input-8, 1938] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 1946] 
split level 31: [/input-8, 1626] 
split level 32: [/input-12, 20] 
split level 33: [/input-8, 1716] 
split level 34: [/input-8, 1963] 
split level 35: [/input-8, 1618] 
split level 36: [/input-8, 1300] 
split level 37: [/input-8, 797] 
split level 38: [/input-8, 1931] 
split level 39: [/input-8, 469] 
split level 40: [/input-12, 57] 
split level 41: [/input-8, 1630] 
split level 42: [/input-8, 1318] 
split level 43: [/input-8, 1301] 
split level 44: [/input-8, 1953] 
split level 45: [/input-8, 592] 
split level 46: [/input-8, 1660] 
split level 47: [/input-8, 285] 
split level 48: [/input-8, 461] 
split level 49: [/input-8, 804] 
split level 50: [/input-8, 1363] 
split level 51: [/input-8, 779] 
split level 52: [/input-8, 100] 
split level 53: [/input-8, 438] 
split level 54: [/input-8, 1638] 
split level 55: [/input-8, 1621] 
split level 56: [/input-8, 453] 
split level 57: [/input-8, 1230] 
split level 58: [/input-8, 1338] 
split level 59: [/input-8, 578] 
split level 60: [/input-8, 1939] 
split level 61: [/input-8, 1961] 
split level 62: [/input-8, 433] 
split level 63: [/input-8, 1340] 
split level 64: [/input-8, 777] 
split level 65: [/input-8, 1940] 
split level 66: [/input-8, 1941] 
split level 67: [/input-8, 75] 
split level 68: [/input-8, 1029] 
split level 69: [/input-8, 108] 
split level 70: [/input-8, 1372] 
split level 71: [/input-8, 1290] 
split level 72: [/input-8, 1364] 
split level 73: [/input-8, 1652] 
split level 74: [/input-8, 298] 
split level 75: [/input-8, 434] 
split level 76: [/input-8, 478] 
split level 77: [/input-8, 1054] 
split level 78: [/input-8, 778] 
split level 79: [/input-8, 1329] 
split level 80: [/input-8, 1226] 
split level 81: [/input-8, 918] 
split level 82: [/input-8, 624] 
split level 83: [/input-8, 1790] 
split level 84: [/input-8, 441] 
split level 85: [/input, 2710] 
split level 86: [/input-8, 814] 
split level 87: [/input-8, 830] 
split level 88: [/input-8, 91] 
split level 89: [/input-8, 603] 
split level 90: [/input-8, 465] 
split level 91: [/input-8, 577] 
split level 92: [/input-8, 785] 
split level 93: [/input-8, 595] 
split level 94: [/input-8, 829] 
split level 95: [/input-8, 1613] 
split level 96: [/input-8, 1646] 
split level 97: [/input-8, 1260] 
split level 98: [/input-8, 28] 
split level 99: [/input-8, 73] 
split level 100: [/input-8, 1229] 
split level 101: [/input-8, 1337] 
split level 102: [/input-8, 798] 
split level 103: [/input-8, 409] 
split level 104: [/input-8, 83] 
split level 105: [/input, 1446] 
split level 106: [/input-8, 813] 
split level 107: [/input-8, 82] 
split level 108: [/input-8, 76] 
split level 109: [/input-8, 1596] 
split level 110: [/input-8, 1297] 
split level 111: [/input-8, 955] 
split level 112: [/input-8, 1597] 
split level 113: [/input-8, 74] 
split level 114: [/input-8, 1225] 
split level 115: [/input-8, 958] 
split level 116: [/input-8, 492] 
split level 117: [/input-8, 1764] 
split level 118: [/input-8, 1773] 
split level 119: [/input-8, 1595] 
split level 120: [/input-8, 293] 
split level 121: [/input-8, 1762] 
split level 122: [/input, 612] 
split level 123: [/input-8, 109] 
split level 124: [/input-8, 1593] 
split level 125: [/input-8, 446] 
split level 126: [/input-8, 21] 
split level 127: [/input-8, 85] 
split level 128: [/input, 2725] 
split level 129: [/input-8, 1227] 
split level 130: [/input, 3460] 
split level 131: [/input-8, 1321] 
split level 132: [/input-8, 81] 
split level 133: [/input-8, 1657] 
split level 134: [/input-8, 486] 
split level 135: [/input-8, 22] 
split level 136: [/input, 3208] 
split level 137: [/input-8, 78] 
split level 138: [/input-8, 452] 
split level 139: [/input, 508] 
split level 140: [/input, 610] 
split level 141: [/input, 884] 
split level 142: [/input, 885] 
split level 143: [/input-8, 1594] 
split level 144: [/input, 597] 
split level 145: [/input-8, 626] 
split level 146: [/input-8, 812] 
split level 147: [/input-8, 1365] 
split level 148: [/input-8, 345] 
split level 149: [/input, 1223] 
split level 150: [/input-8, 1252] 
split level 151: [/input, 3239] 
split level 152: [/input-8, 1228] 
split level 153: [/input, 2164] 
split level 154: [/input, 3224] 
split level 155: [/input-8, 1222] 
split level 156: [/input, 1209] 
split level 157: [/input, 1012] 
split level 158: [/input, 1019] 
split level 159: [/input, 551] 
split level 160: [/input-8, 86] 
split level 161: [/input-8, 488] 
split level 162: [/input, 593] 
split level 163: [/input-8, 92] 
split level 164: [/input-8, 278] 
split level 165: [/input-8, 116] 
split level 166: [/input, 900] 
split level 167: [/input-8, 1781] 
split level 168: [/input, 2786] 
split level 169: [/input, 611] 
split level 170: [/input, 3492] 
split level 171: [/input, 3446] 
split level 172: [/input, 2787] 
split level 173: [/input, 2163] 
split level 174: [/input-8, 1761] 
split level 175: [/input, 1020] 
split level 176: [/input, 2181] 
split level 177: [/input-8, 384] 
split level 178: [/input, 3578] 
split level 179: [/input, 1210] 
split level 180: [/input, 1179] 
split level 181: [/input-8, 442] 
split level 182: [/input, 2772] 
split level 183: [/input, 3048] 
split level 184: [/input, 2196] 
split level 185: [/input, 387] 
split level 186: [/input, 557] 
split level 187: [/input, 1208] 
split level 188: [/input, 3498] 
split level 189: [/input, 2789] 
split level 190: [/input, 552] 
split level 191: [/input, 3020] 
split level 192: [/input, 3541] 
split level 193: [/input, 2792] 
split level 194: [/input, 956] 
split level 195: [/input, 444] 
split level 196: [/input, 2556] 
split level 197: [/input, 3532] 
split level 198: [/input, 1194] 
split level 199: [/input, 2660] 
Time: prepare 0.0061    bound 0.1009    transfer 0.0076    finalize 0.0056    func 0.1204    
Accumulated time: func 0.1783    prepare 0.0168    bound 0.1582    transfer 0.0077    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.13228059) min lb tensor(-0.11736289)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.014268875122070312 
BICCOS Cumulative time: 0.014268875122070312
Preprocessing time: 0.012853384017944336 Inference time: 0.0002655982971191406 Add cuts time: 0.00010824203491210938 Cut analysis time: 0.0010416507720947266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10714 (1), -0.10711 (1), -0.10689 (1), -0.10673 (1), -0.10671 (1), -0.10634 (1), -0.10629 (1), -0.10602 (1), -0.10580 (1), -0.10580 (1), -0.10568 (1), -0.10532 (1), -0.10527 (1), -0.10511 (1), -0.10451 (1), -0.10420 (1), -0.10398 (1), -0.10324 (1), -0.10305 (1), -0.10300 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5287    set_bounds 0.0130    solve 0.1205    add 0.2324    
Accumulated time: pickout 0.0004    decision 0.5287    set_bounds 0.0130    solve 0.1205    add 0.2324    
Current (lb-rhs): -0.10714361071586609
50 domains visited
Cumulative time: 0.9903652667999268

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 53] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0809607207775116

all verified at 6th iter
Time: prepare 0.0072    bound 0.0472    transfer 0.0010    finalize 0.0031    func 0.0615    
Accumulated time: func 0.2398    prepare 0.0248    bound 0.2054    transfer 0.0088    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.17981692) min lb tensor(0.00162533)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.041391611099243164 
BICCOS Cumulative time: 0.05566048622131348
Preprocessing time: 0.014867305755615234 Inference time: 0.017311811447143555 Add cuts time: 0.007924079895019531 Cut analysis time: 0.0012884140014648438
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0093    decision 0.0278    set_bounds 0.0144    solve 0.0616    add 0.0183    
Accumulated time: pickout 0.0097    decision 0.5565    set_bounds 0.0274    solve 0.1822    add 0.2507    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.21369945e-09, 1.88219965e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.21369945e-09, 2.04026297e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.93639264e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.88830346e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05777290463447571

all verified at 2th iter
Time: prepare 0.0004    bound 0.0153    transfer 0.0004    finalize 0.0003    func 0.0165    
Accumulated time: func 0.2563    prepare 0.0252    bound 0.2207    transfer 0.0092    finalize 0.0092    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.1372 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-30.26904869, -33.04354858, -25.95203400, -25.30147362, -26.82607079,
         -23.58791351, -27.02210999, -26.74736023, -30.97900772, -31.80931664]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [497]; unstable size 497; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 497] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 497] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 497] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 235] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.07312441, 7.09390211, 1.17368269, 1.32954621, 1.97332060, 2.09624052,
         2.19010592, 5.61076880, 6.28059912]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1397 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [914]; unstable size 914; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 914] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 914] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 914] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50396180,  4.56140280,  1.59753525,  0.26819646,  2.21705413,
         -0.30545187,  3.74951553,  1.75252223,  5.38511610]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
         -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.42it/s]100%|██████████| 1/1 [00:00<00:00,  7.41it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.61605644, -26.34099007, -20.08775520, -22.38736916, -20.89388466,
          -23.12874413, -20.31867599, -24.87288857, -23.20222473, -27.22626305]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.23092079]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1382 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 21.216480255126953
alpha/beta optimization time: 1.4144108295440674
initial alpha-crown bounds: tensor([[ 1.54622114,  4.63079405,  1.64909160,  0.31041050,  2.27289963,
         -0.27205837,  3.81806374,  1.79653990,  5.46451855]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.272058367729187
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6556 seconds.
lower bounds for all target labels: [1.5462217330932617, 4.630793571472168, 1.649092674255371, 0.31041061878204346, 2.2728989124298096, -0.27205848693847656, 3.8180623054504395, 1.7965381145477295, 5.4645185470581055]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [5]
start creating model mps for candidates: ['lay/16_5']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 54364 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.31049823760986
Verifying property 0 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.4645185470581055.

Properties batch 1, size 1
Remaining timeout: 198.0555727481842
Verifying property 1 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.630794048309326.

Properties batch 2, size 1
Remaining timeout: 197.93169355392456
Verifying property 2 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.818063735961914.

Properties batch 3, size 1
Remaining timeout: 197.845121383667
Verifying property 3 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.272899627685547.

Properties batch 4, size 1
Remaining timeout: 197.7614438533783
Verifying property 4 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7965399026870728.

Properties batch 5, size 1
Remaining timeout: 197.6788170337677
Verifying property 5 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6490916013717651.

Properties batch 6, size 1
Remaining timeout: 197.59598898887634
Verifying property 6 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.546221137046814.

Properties batch 7, size 1
Remaining timeout: 197.51023721694946
Verifying property 7 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3104104995727539.

Properties batch 8, size 1
Remaining timeout: 197.42224717140198
Verifying property 8 with 1 instances.
##### Instance 162 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27205837]], device='cuda:0') need to verify.
Model prediction is: tensor([-22.48896790, -26.36515045, -19.88720322, -22.34896469, -20.88877678,
        -23.03698540, -20.63687515, -24.80028343, -23.16793442, -27.18689156],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27205837]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 914
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 259
Node /15 input 0: size torch.Size([100]) unstable 17
-----------------
# of unstable neurons: 1190
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006237030029296875
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0924    transfer 0.0001    finalize 0.0002    func 0.0929    
Accumulated time: func 0.0929    prepare 0.0002    bound 0.0924    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 83] 
split level 1: [/input-12, 36] 
split level 2: [/input-12, 96] 
split level 3: [/input-12, 89] 
split level 4: [/input-12, 43] 
split level 5: [/input-12, 15] 
split level 6: [/input-12, 18] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 90] 
split level 9: [/input, 2968] 
split level 10: [/input-8, 1772] 
split level 11: [/input-8, 173] 
split level 12: [/input-8, 1171] 
split level 13: [/input, 419] 
split level 14: [/input, 2984] 
split level 15: [/input-8, 953] 
split level 16: [/input-8, 1756] 
split level 17: [/input-8, 1755] 
split level 18: [/input, 2966] 
split level 19: [/input, 900] 
split level 20: [/input-8, 1236] 
split level 21: [/input, 3044] 
split level 22: [/input-8, 1762] 
split level 23: [/input, 901] 
split level 24: [/input-8, 1734] 
split level 25: [/input, 932] 
split level 26: [/input-8, 228] 
split level 27: [/input, 953] 
split level 28: [/input-8, 372] 
split level 29: [/input, 885] 
split level 30: [/input, 2935] 
split level 31: [/input-8, 954] 
split level 32: [/input, 137] 
split level 33: [/input-8, 1374] 
split level 34: [/input, 117] 
split level 35: [/input, 966] 
split level 36: [/input, 3028] 
split level 37: [/input-8, 1245] 
split level 38: [/input, 2920] 
split level 39: [/input-8, 1740] 
split level 40: [/input, 3235] 
split level 41: [/input, 962] 
split level 42: [/input-8, 1769] 
split level 43: [/input-8, 2015] 
split level 44: [/input, 869] 
split level 45: [/input, 647] 
split level 46: [/input, 140] 
split level 47: [/input-8, 1716] 
split level 48: [/input, 133] 
split level 49: [/input-8, 2006] 
split level 50: [/input-8, 1332] 
split level 51: [/input, 964] 
split level 52: [/input, 1912] 
split level 53: [/input, 118] 
split level 54: [/input, 948] 
split level 55: [/input-8, 1625] 
split level 56: [/input-8, 1618] 
split level 57: [/input, 853] 
split level 58: [/input, 2685] 
split level 59: [/input-8, 1649] 
split level 60: [/input-8, 1193] 
split level 61: [/input-8, 1748] 
split level 62: [/input, 949] 
split level 63: [/input, 1390] 
split level 64: [/input, 2936] 
split level 65: [/input, 1943] 
split level 66: [/input, 916] 
split level 67: [/input, 934] 
split level 68: [/input, 169] 
split level 69: [/input, 167] 
split level 70: [/input, 125] 
split level 71: [/input, 2988] 
split level 72: [/input, 450] 
split level 73: [/input-8, 1077] 
split level 74: [/input, 965] 
split level 75: [/input, 141] 
split level 76: [/input, 970] 
split level 77: [/input-8, 1331] 
split level 78: [/input, 164] 
split level 79: [/input, 213] 
split level 80: [/input-8, 1244] 
split level 81: [/input, 102] 
split level 82: [/input, 2972] 
split level 83: [/input, 968] 
split level 84: [/input, 1928] 
split level 85: [/input-8, 1996] 
split level 86: [/input, 884] 
split level 87: [/input-8, 1650] 
split level 88: [/input, 172] 
split level 89: [/input-8, 1633] 
split level 90: [/input, 871] 
split level 91: [/input, 2686] 
split level 92: [/input-8, 1781] 
split level 93: [/input, 2441] 
split level 94: [/input-8, 2032] 
split level 95: [/input, 852] 
split level 96: [/input, 631] 
split level 97: [/input, 698] 
split level 98: [/input, 3460] 
split level 99: [/input, 946] 
split level 100: [/input, 142] 
split level 101: [/input, 678] 
split level 102: [/input, 89] 
split level 103: [/input, 2211] 
split level 104: [/input, 2670] 
split level 105: [/input, 406] 
split level 106: [/input-8, 1157] 
split level 107: [/input-8, 2017] 
split level 108: [/input, 2964] 
split level 109: [/input-8, 181] 
split level 110: [/input, 2692] 
split level 111: [/input, 868] 
split level 112: [/input, 854] 
split level 113: [/input, 2963] 
split level 114: [/input, 823] 
split level 115: [/input, 2524] 
split level 116: [/input-8, 1366] 
split level 117: [/input, 375] 
split level 118: [/input, 1913] 
split level 119: [/input, 1897] 
split level 120: [/input, 855] 
split level 121: [/input-8, 229] 
split level 122: [/input, 211] 
split level 123: [/input-8, 771] 
split level 124: [/input, 2948] 
split level 125: [/input-8, 956] 
split level 126: [/input, 2691] 
split level 127: [/input, 156] 
split level 128: [/input-8, 1610] 
split level 129: [/input, 1927] 
split level 130: [/input, 1881] 
split level 131: [/input, 3531] 
split level 132: [/input, 3131] 
split level 133: [/input, 930] 
split level 134: [/input, 3291] 
split level 135: [/input, 3476] 
split level 136: [/input, 4007] 
split level 137: [/input, 2939] 
split level 138: [/input, 662] 
split level 139: [/input, 216] 
split level 140: [/input, 2248] 
split level 141: [/input-8, 1617] 
split level 142: [/input, 126] 
split level 143: [/input, 1898] 
split level 144: [/input, 3532] 
split level 145: [/input, 914] 
split level 146: [/input, 838] 
split level 147: [/input, 132] 
split level 148: [/input, 228] 
split level 149: [/input, 957] 
split level 150: [/input, 981] 
split level 151: [/input, 94] 
split level 152: [/input, 2425] 
split level 153: [/input, 3549] 
split level 154: [/input-8, 1284] 
split level 155: [/input, 2690] 
split level 156: [/input, 101] 
split level 157: [/input, 2156] 
split level 158: [/input, 2702] 
split level 159: [/input-8, 1749] 
split level 160: [/input, 158] 
split level 161: [/input, 2477] 
split level 162: [/input, 898] 
split level 163: [/input-8, 366] 
split level 164: [/input, 2142] 
split level 165: [/input, 974] 
split level 166: [/input, 2932] 
split level 167: [/input, 2706] 
split level 168: [/input, 87] 
split level 169: [/input, 2212] 
split level 170: [/input, 2931] 
split level 171: [/input, 2492] 
split level 172: [/input, 2676] 
split level 173: [/input, 2436] 
split level 174: [/input, 2659] 
split level 175: [/input, 214] 
split level 176: [/input, 2181] 
split level 177: [/input, 2660] 
split level 178: [/input, 2675] 
split level 179: [/input, 215] 
split level 180: [/input-8, 213] 
split level 181: [/input, 2504] 
split level 182: [/input, 2507] 
split level 183: [/input, 2180] 
split level 184: [/input, 2424] 
split level 185: [/input, 73] 
split level 186: [/input, 2661] 
split level 187: [/input, 1882] 
split level 188: [/input, 2254] 
split level 189: [/input, 3501] 
split level 190: [/input, 1498] 
split level 191: [/input, 2677] 
split level 192: [/input, 2163] 
split level 193: [/input, 2658] 
split level 194: [/input, 2206] 
split level 195: [/input, 2638] 
split level 196: [/input, 2398] 
split level 197: [/input, 3041] 
split level 198: [/input, 2674] 
split level 199: [/input, 2705] 
Time: prepare 0.0060    bound 0.0985    transfer 0.0075    finalize 0.0067    func 0.1188    
Accumulated time: func 0.2118    prepare 0.0162    bound 0.1909    transfer 0.0076    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.02811289) min lb tensor(-0.27181137)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.014445066452026367 
BICCOS Cumulative time: 0.014445066452026367
Preprocessing time: 0.01281118392944336 Inference time: 0.0007340908050537109 Add cuts time: 0.00012135505676269531 Cut analysis time: 0.0007784366607666016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26584 (1), -0.26582 (1), -0.26572 (1), -0.26563 (1), -0.26555 (1), -0.26530 (1), -0.26508 (1), -0.26495 (1), -0.26458 (1), -0.26443 (1), -0.26409 (1), -0.26402 (1), -0.26370 (1), -0.26369 (1), -0.26352 (1), -0.26338 (1), -0.26330 (1), -0.26329 (1), -0.26328 (1), -0.26313 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5202    set_bounds 0.0121    solve 0.1189    add 0.2116    
Accumulated time: pickout 0.0004    decision 0.5202    set_bounds 0.0121    solve 0.1189    add 0.2116    
Current (lb-rhs): -0.26584458351135254
50 domains visited
Cumulative time: 0.9977049827575684

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 96] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] 
split level 1: [/input-12, 89] [/input-12, 89] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 96] [/input-12, 89] 
split level 2: [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 43] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 18] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24264311790466309
10 lb beta sum: 0.5864970088005066, worst -0.23490548133850098
Time: prepare 0.0079    bound 0.1449    transfer 0.0036    finalize 0.0041    func 0.1633    
Accumulated time: func 0.3751    prepare 0.0245    bound 0.3358    transfer 0.0112    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.09619415) min lb tensor(-0.23489523)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.017484664916992188 
BICCOS Cumulative time: 0.031929731369018555
Preprocessing time: 0.014650106430053711 Inference time: 0.0017499923706054688 Add cuts time: 0.00022745132446289062 Cut analysis time: 0.0008571147918701172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07046 (2), -0.06988 (2), -0.06975 (2), -0.06923 (2), -0.06901 (2), -0.06897 (2), -0.06887 (2), -0.06887 (2), -0.06860 (2), -0.06843 (2), -0.06813 (2), -0.06783 (2), -0.06764 (2), -0.06752 (2), -0.06553 (2), -0.06551 (2), -0.06381 (2), -0.06255 (2), -0.06164 (2), -0.06137 (2), 
Length of domains: 50
Time: pickout 0.0087    decision 0.0235    set_bounds 0.0165    solve 0.1635    add 0.2084    
Accumulated time: pickout 0.0091    decision 0.5437    set_bounds 0.0286    solve 0.2824    add 0.4200    
Current (lb-rhs): -0.07045978307723999
100 domains visited
Cumulative time: 1.4427313804626465

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 83] [/input-12, 83] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 96] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 83] 
split level 1: [/input-12, 96] [/input-12, 96] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 89] [/input-12, 36] [/input-12, 89] [/input-12, 36] 
split level 2: [/input-12, 89] [/input-12, 89] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 43] [/input-12, 89] [/input-12, 43] [/input-12, 89] 
split level 3: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 43] [/input-12, 18] [/input-12, 43] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07522702217102051
10 lb beta sum: 0.798449695110321, worst -0.11702895164489746
Time: prepare 0.0076    bound 0.1374    transfer 0.0009    finalize 0.0032    func 0.1518    
Accumulated time: func 0.5269    prepare 0.0324    bound 0.4732    transfer 0.0121    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.29594731) min lb tensor(-0.03638268)
Number of Verified Splits: 378 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.043303728103637695 
BICCOS Cumulative time: 0.07523345947265625
Preprocessing time: 0.013303995132446289 Inference time: 0.02184772491455078 Add cuts time: 0.007214784622192383 Cut analysis time: 0.0009372234344482422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0241    set_bounds 0.0181    solve 0.1519    add 0.0214    
Accumulated time: pickout 0.0170    decision 0.5678    set_bounds 0.0467    solve 0.4343    add 0.4414    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.21514895e-09, 1.02740005e-01, 3.00510436e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.21514895e-09, 1.02740005e-01, 5.23409992e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.21514895e-09, 4.89214361e-02, 2.93958783e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 43, 83]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([2.21514895e-09, 4.89214361e-02, 4.19584513e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.00278753, 0.03729996]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.00278753, 0.18955541, 0.25851440]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([36, 96, 83]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.00278753, 0.18955541, 0.05950370]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2122185230255127
10 lb beta sum: 0.5384148359298706, worst -0.1947576403617859
Time: prepare 0.0005    bound 0.1452    transfer 0.0004    finalize 0.0002    func 0.1464    
Accumulated time: func 0.6733    prepare 0.0329    bound 0.6184    transfer 0.0125    finalize 0.0144    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 96] [/input-12, 83] 
split level 1: [/input-12, 89] [/input-12, 89] 
split level 2: [/input-12, 15] [/input-12, 43] 
split level 3: [/input-8, 1171] [/input-12, 18] 
split level 4: [/input, 2984] [/input-8, 1171] 
split level 5: [/input, 2966] [/input, 2984] 
split level 6: [/input-8, 1762] [/input, 2966] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0952558517456055, worst -0.10420222580432892
10 lb beta sum: 1.156914472579956, worst -0.10395653545856476
Time: prepare 0.0129    bound 0.1408    transfer 0.0048    finalize 0.0023    func 0.1635    
Accumulated time: func 0.8368    prepare 0.0462    bound 0.7592    transfer 0.0173    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.68826973) min lb tensor(-0.10389550)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.1161057949066162, worst -0.16704507172107697
10 lb beta sum: 1.2812408208847046, worst -0.056985706090927124
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 9
#cuts 4-6: 4
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.29300808906555176 
BICCOS Cumulative time: 0.368241548538208
Preprocessing time: 0.008394241333007812 Inference time: 0.27571868896484375 Add cuts time: 0.0062944889068603516 Cut analysis time: 0.0026006698608398438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10390 (7), -0.10013 (7), -0.09844 (7), -0.09761 (7), -0.09468 (7), -0.09388 (7), -0.09215 (7), -0.08842 (7), -0.08565 (7), -0.08236 (7), -0.08034 (7), -0.07971 (7), -0.07717 (7), -0.07651 (7), -0.07441 (7), -0.07130 (7), -0.04719 (7), -0.04480 (7), -0.04379 (7), -0.04180 (7), 
Length of domains: 32
Time: pickout 0.0008    decision 0.0215    set_bounds 0.0312    solve 0.1636    add 0.0628    
Accumulated time: pickout 0.0179    decision 0.5892    set_bounds 0.0779    solve 0.5979    add 0.5042    
Current (lb-rhs): -0.10389550030231476
132 domains visited
Cumulative time: 2.568180561065674

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 1: [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] [/input-8, 1650] [/input-12, 2] 
split level 2: [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] [/input-8, 1077] [/input-8, 1236] [/input-8, 1077] [/input-8, 1762] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10298991203308105
10 lb beta sum: 0.2682151198387146, worst -0.09982728958129883
Time: prepare 0.0066    bound 0.1529    transfer 0.0008    finalize 0.0019    func 0.1638    
Accumulated time: func 1.0006    prepare 0.0531    bound 0.9121    transfer 0.0181    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(1.11672926) min lb tensor(-0.09978485)
Number of Verified Splits: 187 of 256
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 9
#cuts 4-6: 5
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.029689311981201172 
BICCOS Cumulative time: 0.3979308605194092
Preprocessing time: 0.009212017059326172 Inference time: 0.01662898063659668 Add cuts time: 0.0022368431091308594 Cut analysis time: 0.001611471176147461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09978 (10), -0.09776 (10), -0.09604 (10), -0.09432 (10), -0.09407 (10), -0.09361 (10), -0.09230 (10), -0.09059 (10), -0.09023 (10), -0.08989 (10), -0.08862 (10), -0.08814 (10), -0.08653 (10), -0.08476 (10), -0.08443 (10), -0.08175 (10), -0.08106 (10), -0.07790 (10), -0.07650 (10), -0.07571 (10), 
Length of domains: 69
Time: pickout 0.0069    decision 0.0141    set_bounds 0.0234    solve 0.1639    add 0.0709    
Accumulated time: pickout 0.0248    decision 0.6033    set_bounds 0.1013    solve 0.7618    add 0.5751    
Current (lb-rhs): -0.09978485107421875
201 domains visited
Cumulative time: 2.8848257064819336

BaB round 3
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] [/input, 3028] [/input-8, 1772] [/input-12, 90] 
split level 1: [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] [/input-8, 1781] [/input-12, 90] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09798622131347656
10 lb beta sum: 0.32841968536376953, worst -0.0979313850402832
Time: prepare 0.0073    bound 0.1468    transfer 0.0026    finalize 0.0025    func 0.1610    
Accumulated time: func 1.1616    prepare 0.0605    bound 1.0589    transfer 0.0207    finalize 0.0211    
all_split False
======================Cut inference begins======================
max lb tensor(0.46020794) min lb tensor(-0.09790087)
Number of Verified Splits: 212 of 276
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 9
#cuts 4-6: 5
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.033194780349731445 
BICCOS Cumulative time: 0.4311256408691406
Preprocessing time: 0.00830078125 Inference time: 0.020977497100830078 Add cuts time: 0.0022635459899902344 Cut analysis time: 0.0016529560089111328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09790 (12), -0.09588 (12), -0.09421 (12), -0.09247 (12), -0.09223 (12), -0.09165 (12), -0.09045 (12), -0.08879 (12), -0.08805 (12), -0.08800 (12), -0.08681 (12), -0.08622 (12), -0.08447 (12), -0.08262 (12), -0.08257 (12), -0.07908 (12), -0.07902 (12), -0.07528 (12), -0.07375 (12), -0.07309 (12), 
Length of domains: 64
Time: pickout 0.0148    decision 0.0149    set_bounds 0.0213    solve 0.1610    add 0.0772    
Accumulated time: pickout 0.0396    decision 0.6182    set_bounds 0.1225    solve 0.9228    add 0.6523    
Current (lb-rhs): -0.0979008674621582
265 domains visited
Cumulative time: 3.2150394916534424

BaB round 4
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] [/input-8, 1772] [/input-8, 1762] 
split level 1: [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] [/input-8, 1236] [/input-8, 954] 
cut re-enabled after branching node selection
0 lb beta sum: 0.001058319117873907, worst -0.09166288375854492
10 lb beta sum: 0.0018231732537969947, worst -0.09162640571594238
Time: prepare 0.0124    bound 0.1446    transfer 0.0018    finalize 0.0015    func 0.1621    
Accumulated time: func 1.3237    prepare 0.0731    bound 1.2035    transfer 0.0225    finalize 0.0227    
all_split False
======================Cut inference begins======================
max lb tensor(0.00277529) min lb tensor(-0.09161091)
Number of Verified Splits: 5 of 256
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 9
#cuts 4-6: 6
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.011149168014526367 
BICCOS Cumulative time: 0.442274808883667
Preprocessing time: 0.007773876190185547 Inference time: 0.0006589889526367188 Add cuts time: 0.0007200241088867188 Cut analysis time: 0.001996278762817383
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09161 (14), -0.09027 (14), -0.08960 (14), -0.08825 (14), -0.08765 (14), -0.08630 (14), -0.08620 (14), -0.08571 (14), -0.08569 (14), -0.08531 (14), -0.08485 (14), -0.08437 (14), -0.08434 (14), -0.08418 (14), -0.08397 (14), -0.08382 (14), -0.08367 (14), -0.08284 (14), -0.08248 (14), -0.08234 (14), 
Length of domains: 251
Time: pickout 0.0155    decision 0.0141    set_bounds 0.0121    solve 0.1622    add 0.0826    
Accumulated time: pickout 0.0551    decision 0.6323    set_bounds 0.1346    solve 1.0850    add 0.7349    
Current (lb-rhs): -0.09161090850830078
516 domains visited
Cumulative time: 3.5197606086730957

BaB round 5
batch: 251
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] [/input-8, 1756] [/input-8, 1245] [/input-8, 1756] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08920621871948242
10 lb beta sum: 0.0013743700692430139, worst -0.08917355537414551
Time: prepare 0.0128    bound 0.1492    transfer 0.0067    finalize 0.0036    func 0.3849    
Accumulated time: func 1.7086    prepare 0.0861    bound 1.3527    transfer 0.0292    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.00837814) min lb tensor(-0.08915091)
Number of Verified Splits: 20 of 502
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.023218154907226562 
BICCOS Cumulative time: 0.46549296379089355
Preprocessing time: 0.01630234718322754 Inference time: 0.0027468204498291016 Add cuts time: 0.0011441707611083984 Cut analysis time: 0.0030248165130615234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08915 (15), -0.08780 (15), -0.08719 (15), -0.08584 (15), -0.08521 (15), -0.08387 (15), -0.08374 (15), -0.08328 (15), -0.08313 (15), -0.08276 (15), -0.08239 (15), -0.08193 (15), -0.08178 (15), -0.08177 (15), -0.08141 (15), -0.08130 (15), -0.08114 (15), -0.08043 (15), -0.07996 (15), -0.07981 (15), 
Length of domains: 482
Time: pickout 0.0188    decision 0.0234    set_bounds 0.0222    solve 0.3851    add 0.0956    
Accumulated time: pickout 0.0739    decision 0.6557    set_bounds 0.1569    solve 1.4700    add 0.8305    
Current (lb-rhs): -0.08915090560913086
998 domains visited
Cumulative time: 4.0960729122161865

BaB round 6
batch: 482
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] [/input-8, 1374] [/input, 2935] [/input, 2935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08748888969421387
10 lb beta sum: 0.0011607055785134435, worst -0.08746600151062012
Time: prepare 0.0276    bound 0.2024    transfer 0.0150    finalize 0.0103    func 0.2620    
Accumulated time: func 1.9705    prepare 0.1142    bound 1.5551    transfer 0.0443    finalize 0.0365    
all_split False
======================Cut inference begins======================
max lb tensor(0.00617837) min lb tensor(-0.08745837)
Number of Verified Splits: 31 of 964
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.0469818115234375 
BICCOS Cumulative time: 0.512474775314331
Preprocessing time: 0.03806328773498535 Inference time: 0.004326343536376953 Add cuts time: 0.001711130142211914 Cut analysis time: 0.0028810501098632812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08746 (16), -0.08611 (16), -0.08551 (16), -0.08416 (16), -0.08250 (16), -0.08230 (16), -0.08205 (16), -0.08196 (16), -0.08178 (16), -0.08116 (16), -0.08105 (16), -0.08071 (16), -0.08065 (16), -0.08043 (16), -0.08009 (16), -0.08004 (16), -0.07986 (16), -0.07985 (16), -0.07970 (16), -0.07930 (16), 
Length of domains: 933
Time: pickout 0.0254    decision 0.0476    set_bounds 0.0482    solve 0.2624    add 0.1104    
Accumulated time: pickout 0.0993    decision 0.7034    set_bounds 0.2050    solve 1.7324    add 0.9409    
Current (lb-rhs): -0.08745837211608887
1931 domains visited
Cumulative time: 4.645846128463745

BaB round 7
batch: 933
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1740] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1740] [/input-8, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08456611633300781
10 lb beta sum: 0.0011080262484028935, worst -0.08455896377563477
Time: prepare 0.0599    bound 0.2452    transfer 0.0298    finalize 0.0174    func 0.3657    
Accumulated time: func 2.3363    prepare 0.1743    bound 1.8003    transfer 0.0741    finalize 0.0540    
all_split False
======================Cut inference begins======================
max lb tensor(0.01453930) min lb tensor(-0.08455181)
Number of Verified Splits: 111 of 1866
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 9
#cuts 4-6: 15
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.09735536575317383 
BICCOS Cumulative time: 0.6098301410675049
Preprocessing time: 0.07310795783996582 Inference time: 0.01760697364807129 Add cuts time: 0.004018545150756836 Cut analysis time: 0.002621889114379883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08455 (17), -0.08420 (17), -0.08259 (17), -0.08226 (17), -0.08221 (17), -0.08090 (17), -0.08084 (17), -0.08049 (17), -0.08046 (17), -0.07958 (17), -0.07926 (17), -0.07915 (17), -0.07895 (17), -0.07886 (17), -0.07881 (17), -0.07853 (17), -0.07812 (17), -0.07780 (17), -0.07763 (17), -0.07735 (17), 
Length of domains: 1755
Time: pickout 0.0699    decision 0.0722    set_bounds 0.0893    solve 0.3664    add 0.1138    
Accumulated time: pickout 0.1693    decision 0.7756    set_bounds 0.2943    solve 2.0989    add 1.0547    
Current (lb-rhs): -0.08455181121826172
3686 domains visited
Cumulative time: 5.467106342315674

BaB round 8
batch: 1755
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] [/input-8, 228] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08177423477172852
10 lb beta sum: 0.0010482561774551868, worst -0.0817720890045166
Time: prepare 0.0997    bound 0.3480    transfer 0.0613    finalize 0.0267    func 0.7876    
Accumulated time: func 3.1238    prepare 0.2744    bound 2.1483    transfer 0.1354    finalize 0.0806    
all_split False
======================Cut inference begins======================
max lb tensor(0.00807294) min lb tensor(-0.08176851)
Number of Verified Splits: 266 of 3510
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 9
#cuts 4-6: 25
#cuts 7-9: 20
#cuts >= 20: 0
BICCOS time: 0.17890095710754395 
BICCOS Cumulative time: 0.7887310981750488
Preprocessing time: 0.1187739372253418 Inference time: 0.04854226112365723 Add cuts time: 0.007695436477661133 Cut analysis time: 0.003889322280883789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08177 (18), -0.08140 (18), -0.07978 (18), -0.07943 (18), -0.07936 (18), -0.07808 (18), -0.07802 (18), -0.07764 (18), -0.07761 (18), -0.07679 (18), -0.07644 (18), -0.07615 (18), -0.07610 (18), -0.07602 (18), -0.07590 (18), -0.07568 (18), -0.07556 (18), -0.07536 (18), -0.07499 (18), -0.07480 (18), 
Length of domains: 3244
Time: pickout 0.0512    decision 0.1222    set_bounds 0.1676    solve 0.7890    add 0.1559    
Accumulated time: pickout 0.2204    decision 0.8978    set_bounds 0.4619    solve 2.8878    add 1.2105    
Current (lb-rhs): -0.08176851272583008
6930 domains visited
Cumulative time: 6.947288751602173

BaB round 9
batch: 3244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] [/input, 3028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08099603652954102
10 lb beta sum: 0.0010194812202826142, worst -0.08099865913391113
Time: prepare 0.1890    bound 0.5747    transfer 0.1331    finalize 0.2732    func 1.2129    
Accumulated time: func 4.3367    prepare 0.4636    bound 2.7230    transfer 0.2685    finalize 0.3539    
all_split False
======================Cut inference begins======================
max lb tensor(0.01126575) min lb tensor(-0.08099413)
Number of Verified Splits: 478 of 6488
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 9
#cuts 4-6: 52
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.3134164810180664 
BICCOS Cumulative time: 1.1021475791931152
Preprocessing time: 0.21295905113220215 Inference time: 0.08411574363708496 Add cuts time: 0.011970281600952148 Cut analysis time: 0.0043714046478271484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08099 (19), -0.08063 (19), -0.07900 (19), -0.07865 (19), -0.07858 (19), -0.07731 (19), -0.07722 (19), -0.07685 (19), -0.07683 (19), -0.07602 (19), -0.07565 (19), -0.07538 (19), -0.07525 (19), -0.07513 (19), -0.07490 (19), -0.07478 (19), -0.07458 (19), -0.07422 (19), -0.07403 (19), -0.07372 (19), 
Length of domains: 6010
Time: pickout 0.0735    decision 0.2161    set_bounds 0.3215    solve 1.2151    add 0.1825    
Accumulated time: pickout 0.2939    decision 1.1139    set_bounds 0.7834    solve 4.1030    add 1.3930    
Current (lb-rhs): -0.0809941291809082
12940 domains visited
Cumulative time: 9.290765762329102

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] [/input, 1928] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07816863059997559
10 lb beta sum: 0.0009600947378203273, worst -0.07815957069396973
Time: prepare 0.2345    bound 0.7086    transfer 0.0657    finalize 0.0643    func 1.1291    
Accumulated time: func 5.4658    prepare 0.6984    bound 3.4316    transfer 0.3343    finalize 0.4182    
all_split False
======================Cut inference begins======================
max lb tensor(0.01067209) min lb tensor(-0.07815313)
Number of Verified Splits: 597 of 8192
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 81.
#cuts 1-3: 9
#cuts 4-6: 50
#cuts 7-9: 21
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.4068739414215088 
BICCOS Cumulative time: 1.509021520614624
Preprocessing time: 0.2833094596862793 Inference time: 0.10166764259338379 Add cuts time: 0.016505956649780273 Cut analysis time: 0.00539088249206543
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07815 (20), -0.07774 (20), -0.07615 (20), -0.07577 (20), -0.07573 (20), -0.07550 (20), -0.07536 (20), -0.07442 (20), -0.07436 (20), -0.07398 (20), -0.07395 (20), -0.07366 (20), -0.07359 (20), -0.07321 (19), -0.07318 (20), -0.07313 (20), -0.07277 (20), -0.07254 (20), -0.07240 (20), -0.07213 (20), 
Length of domains: 9509
Time: pickout 0.1184    decision 0.2436    set_bounds 0.5466    solve 1.1330    add 0.2217    
Accumulated time: pickout 0.4124    decision 1.3575    set_bounds 1.3300    solve 5.2360    add 1.6147    
Current (lb-rhs): -0.07815313339233398
20535 domains visited
current_vram/total_varm: 10.8GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.983722686767578

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 948] [/input, 948] [/input, 2935] [/input, 1912] [/input, 1943] [/input, 948] [/input, 2935] [/input, 1928] [/input, 1928] [/input-8, 1769] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0767507553100586
10 lb beta sum: 0.000937584787607193, worst -0.07670426368713379
Time: prepare 0.4687    bound 1.3445    transfer 0.0826    finalize 0.1182    func 2.1210    
Accumulated time: func 7.5868    prepare 1.1675    bound 4.7761    transfer 0.4169    finalize 0.5364    
all_split False
======================Cut inference begins======================
max lb tensor(0.01240569) min lb tensor(-0.07667160)
Number of Verified Splits: 1309 of 16384
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts: total 868 constraints, 25192 nonzero elements
cuts preparing time: 0.0127
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 975.
#cuts 1-3: 184
#cuts 4-6: 28
#cuts 7-9: 65
#cuts 10-12: 9
#cuts 13-15: 20
#cuts 16-18: 29
#cuts 19-21: 45
#cuts >= 20: 595
BICCOS time: 1.3153462409973145 
BICCOS Cumulative time: 2.8243677616119385
Preprocessing time: 0.5586540699005127 Inference time: 0.5014028549194336 Add cuts time: 0.03493094444274902 Cut analysis time: 0.22035837173461914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07667 (21), -0.07491 (21), -0.07468 (21), -0.07424 (21), -0.07389 (21), -0.07379 (21), -0.07291 (21), -0.07286 (21), -0.07251 (21), -0.07249 (21), -0.07243 (20), -0.07229 (21), -0.07196 (21), -0.07190 (21), -0.07170 (21), -0.07158 (21), -0.07146 (21), -0.07141 (21), -0.07110 (21), -0.07105 (21), 
Length of domains: 16392
Time: pickout 0.1581    decision 0.6985    set_bounds 0.9914    solve 2.1254    add 0.2300    
Accumulated time: pickout 0.5705    decision 2.0560    set_bounds 2.3214    solve 7.3614    add 1.8447    
Current (lb-rhs): -0.07667160034179688
35610 domains visited
current_vram/total_varm: 21.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 17.538244485855103

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1769] [/input, 1943] [/input, 1928] [/input-8, 1769] [/input, 2935] [/input-8, 1374] [/input-8, 1374] [/input-8, 1245] [/input-8, 1245] [/input, 1912] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0744943618774414
10 lb beta sum: 6.160725116729736, worst -0.03219270706176758
Time: prepare 0.9165    bound 7.7315    transfer 0.1705    finalize 0.2559    func 9.2925    
Accumulated time: func 16.8793    prepare 2.0844    bound 12.5076    transfer 0.5874    finalize 0.7923    
all_split False
======================Cut inference begins======================
max lb tensor(0.05909538) min lb tensor(2.98023224e-06)
Number of Verified Splits: 32768 of 32768
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts: total 1377 constraints, 36907 nonzero elements
cuts preparing time: 0.0946
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1484.
#cuts 1-3: 238
#cuts 4-6: 28
#cuts 7-9: 65
#cuts 10-12: 20
#cuts 13-15: 45
#cuts 16-18: 80
#cuts 19-21: 93
#cuts >= 20: 915
BICCOS time: 1.9461398124694824 
BICCOS Cumulative time: 4.770507574081421
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04656 (21), -0.04238 (21), -0.04138 (21), -0.03050 (21), -0.02860 (21), -0.02213 (21), -0.01917 (21), -0.00062 (21), 
Length of domains: 8
Time: pickout 0.2978    decision 1.7154    set_bounds 1.8984    solve 9.3003    add 0.0150    
Accumulated time: pickout 0.8682    decision 3.7714    set_bounds 4.2199    solve 16.6617    add 1.8597    
Current (lb-rhs): -0.046559810638427734
35610 domains visited
Cumulative time: 33.023762941360474

BaB round 13
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2006] [/input, 419] [/input-8, 2006] [/input-8, 2006] [/input-8, 2006] [/input-8, 2006] [/input, 2935] [/input-8, 1245] 
split level 1: [/input, 3028] [/input-8, 2006] [/input, 2936] [/input-8, 1769] [/input, 2936] [/input, 2936] [/input-8, 1769] [/input, 2935] 
split level 2: [/input, 1390] [/input, 2936] [/input, 3028] [/input, 2936] [/input, 1390] [/input, 3028] [/input, 855] [/input, 871] 
split level 3: [/input, 871] [/input, 3028] [/input, 871] [/input, 3028] [/input, 871] [/input, 1390] [/input, 4007] [/input, 855] 
split level 4: [/input, 2906] [/input, 1390] [/input, 1390] [/input, 1390] [/input, 2906] [/input, 871] [/input, 698] [/input, 884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03679680824279785
10 lb beta sum: 5.7088212966918945, worst -0.007373221218585968
Time: prepare 0.0065    bound 0.1737    transfer 0.0015    finalize 0.0015    func 0.1849    
Accumulated time: func 17.0642    prepare 2.0912    bound 12.6813    transfer 0.5889    finalize 0.7938    
all_split False
======================Cut inference begins======================
max lb tensor(0.06087679) min lb tensor(0.00593054)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0013
Total number of valid cuts: 1484.
#cuts 1-3: 238
#cuts 4-6: 28
#cuts 7-9: 65
#cuts 10-12: 20
#cuts 13-15: 45
#cuts 16-18: 80
#cuts 19-21: 93
#cuts >= 20: 915
BICCOS time: 0.010209798812866211 
BICCOS Cumulative time: 4.780717372894287
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0032    decision 0.0207    set_bounds 0.0268    solve 0.1850    add 0.0001    
Accumulated time: pickout 0.8714    decision 3.7921    set_bounds 4.2467    solve 16.8467    add 1.8597    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
35610 domains visited
Cumulative time: 33.2717866897583

found process to kill: terminal indx = 5
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=162_spec=5_27025309.log
found process for pidx=5
kill process for pidx=5
Result: safe in 36.3109 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 815] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 815] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.40899849, -1.25211000, -1.71174979, -1.47050440, -0.92382908,
         -2.03374076, -0.67183757,  0.06250179, -1.59028769]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.72241402, -24.34649849, -23.13090515, -23.33512688, -23.44177818,
         -22.72599030, -24.29437256, -23.28028107, -25.88602257, -23.95406342]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960],
         [-23.72241211, -24.34649277, -23.13090134, -23.33512497, -23.44177628,
          -22.72598839, -24.29437065, -23.28027916, -25.88602257, -23.95405960]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.44213295,  1.06621361, -0.14937782,  0.05484581,  0.16149712,
          -0.55429077,  1.01409149,  0.67378044]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         ...,


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]],


         [[[-0.32222211, -0.33809513, -0.41746020,  ..., -0.30634910,
            -0.22698402, -0.22698402],
           [-0.22698402, -0.27460307, -0.30634910,  ..., -0.40158719,
            -0.30634910, -0.29047608],
           [-0.17936498, -0.17936498, -0.21111101,  ..., -0.43333322,
            -0.35396814, -0.32222211],
           ...,
           [ 0.12222230,  0.21746039,  0.28095245,  ..., -0.41746020,
             0.16984135,  0.32857150],
           [ 0.32857150,  0.36031753,  0.37619054,  ...,  0.01111121,
             0.42380959,  0.42380959],
           [ 0.59841275,  0.55079371,  0.47142863,  ...,  0.07460327,
             0.37619054,  0.55079371]],

          [[-1.09500802, -1.11111104, -1.17552328,  ..., -1.03059578,
            -0.95008045, -0.93397743],
           [-0.96618354, -1.03059578, -1.04669881,  ..., -1.11111104,
            -1.01449275, -0.99838966],
           [-0.91787434, -0.91787434, -0.93397743,  ..., -1.14331722,
            -1.06280184, -1.03059578],
           ...,
           [-0.01610294,  0.08051541,  0.14492765,  ..., -0.28985494,
             0.14492765,  0.24154601],
           [ 0.19323683,  0.22544295,  0.24154601,  ...,  0.11272153,
             0.40257660,  0.35426742],
           [ 0.46698883,  0.41867965,  0.33816436,  ...,  0.16103071,
             0.35426742,  0.53140104]],

          [[-1.09295356, -1.12293863, -1.18290865,  ..., -1.16791618,
            -1.09295356, -1.09295356],
           [-1.03298354, -1.09295356, -1.10794616,  ..., -1.24287868,
            -1.15292358, -1.13793111],
           [-1.04797614, -1.04797614, -1.06296861,  ..., -1.27286363,
            -1.19790113, -1.16791618],
           ...,
           [-0.17841063, -0.08845562, -0.02848560,  ..., -0.31334329,
            -0.08845562,  0.06146942],
           [ 0.01649191,  0.04647692,  0.06146942,  ...,  0.06146942,
             0.18140946,  0.16641696],
           [ 0.27136448,  0.22638696,  0.15142445,  ...,  0.07646193,
             0.18140946,  0.33133450]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0809 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.75207901, -26.19200516, -21.51674461, -21.03239250, -21.79173470,
         -19.86995125, -22.43434525, -21.71803665, -25.64961243, -25.42793655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [834]; unstable size 834; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 834] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 834] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 834] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.31165791, 4.29574871, 0.41222411, 0.84093678, 0.84679615, 1.26739883,
         0.78366590, 3.96632385, 3.82774282]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0462 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [739]; unstable size 739; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 296, 1, 739] with unstable size 295 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 739] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 739] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [295]; unstable size 295; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 295] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 295] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56572270,  0.72621560, -1.85110521, -0.71412635, -0.72852230,
         -0.07062489,  0.71391797, -0.96604085,  0.12609494]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.22746849, -18.94099426, -15.30552959, -16.48309898, -16.57509995,
         -17.20245552, -18.03771782, -16.32104874, -17.03782463, -18.11646080]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080],
         [-17.22747231, -18.94099617, -15.30552959, -16.48309898, -16.57509995,
          -17.20245552, -18.03771782, -16.32104874, -17.03782654, -18.11646080]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.90642357, -1.01551914,  0.16205025,  0.25405121,  0.88140678,
           0.71677780]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.80888367, -17.65867996, -15.04872608, -14.86061478, -14.44957924,
         -15.80550385, -12.51641083, -16.93015480, -17.87636757, -16.77168083]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [527]; unstable size 527; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 527] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 527] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 527] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 299] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.97510839, 3.01688433, 0.83104944, 0.91215897, 0.13671112, 1.58025634,
         1.78175259, 2.71599054, 2.04945326]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0483 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [616]; unstable size 616; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 264, 1, 616] with unstable size 263 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 616] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 616] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [263]; unstable size 263; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 263] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 263] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55854058, -0.58302045, -0.01109004,  0.84704137,  0.37303162,
          1.41230488,  1.42802823, -0.66239846,  1.97629523]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61078835, -21.87978363, -18.13955688, -19.07592964, -19.79349327,
         -19.61386681, -20.54054451, -20.75547600, -18.17226410, -21.24487877]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-18.57255936, -22.56895828, -19.07548141, -19.82130051, -20.70000648,
          -20.37550545, -21.28920364, -21.48766518, -18.55050659, -21.83143806],
         [-18.57255936, -22.56895828, -19.07548141, -19.82130051, -20.70000648,
          -20.37550545, -21.28920364, -21.48766518, -18.55050659, -21.83143806]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.50292206,  1.24874115, -0.02205276]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.20258904, -28.97587204, -21.97974777, -26.12151527, -22.80328751,
         -24.79159355, -26.35929489, -25.88696289, -29.32278824, -27.97410202]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 81, 1, 659] with unstable size 80 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 659] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [80]; unstable size 80; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 80] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 80] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.61785376, 5.97946167, 3.68134069, 0.37307775, 2.26610637, 3.72874045,
         3.38983178, 6.45273161, 5.22464895]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [521]; unstable size 521; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 521] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 521] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 521] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 193] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.86727250,  3.52099156, -0.37071121,  2.10049057,  2.35707188,
          2.03269386,  1.03111458,  1.52145684,  3.31146646]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-22.22389221, -25.61617279, -20.58332062, -23.34521294, -20.21918297,
         -23.68240929, -23.30189896, -22.01793289, -23.25316620, -24.99141312]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.60668755, -25.99244308, -20.82368469, -23.81765366, -20.92040062,
          -24.20704651, -23.65490341, -22.70611763, -23.60986900, -25.38462639]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.09671593]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [620]; unstable size 620; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 620] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 620] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 620] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 180] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.75783110,  7.53109455, -0.86600590,  3.01546717,  1.56956518,
          3.31403446,  1.72679341,  7.39529610,  6.39896202]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.96089172, -27.30179405, -18.06871414, -21.83080864, -18.06796074,
         -20.49729729, -22.39441490, -20.41414833, -26.60469437, -25.81503868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.92412376, -27.24312210, -18.04008102, -21.79802132, -18.04256248,
          -20.46615982, -22.35789490, -20.38110733, -26.56587219, -25.76387596]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00248146]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0040 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.76115799, -29.22484970, -26.75863647, -27.30132103, -27.79590416,
         -27.84509468, -25.49637985, -28.66069603, -31.11473465, -27.50533867]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [617]; unstable size 617; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 617] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 617] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 617] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.97265565, 2.28189492, 0.24724329, 0.96132344, 1.16451240, 1.43096876,
         1.79910481, 3.81141162, 0.72075951]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [854]; unstable size 854; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 854] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 854] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 854] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 206] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99029946,  0.58493656,  2.75045776,  0.33922267,  3.42682886,
          3.47799683,  2.48519087, -0.45412534,  3.58810210]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
         -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]100%|██████████| 1/1 [00:00<00:00,  8.84it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.23924446, -26.22811508, -23.77366066, -25.95787048, -23.63902664,
          -26.79361343, -27.03306580, -26.44617844, -22.26940155, -26.84331894]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03015709]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1157 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.763309478759766
alpha/beta optimization time: 1.231442928314209
initial alpha-crown bounds: tensor([[ 3.05976820,  0.63149005,  2.80625153,  0.39776504,  3.48817921,
          3.54835081,  2.58086872, -0.39641094,  3.64704704]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3964109420776367
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6827 seconds.
lower bounds for all target labels: [3.0597681999206543, 0.6314900517463684, 2.8062515258789062, 0.39776408672332764, 3.488178014755249, 3.5483508110046387, 2.580868721008301, -0.3964109420776367, 3.6470470428466797]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [7]
start creating model mps for candidates: ['lay/16_7']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 55274 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.49156522750854
Verifying property 0 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6470470428466797.

Properties batch 1, size 1
Remaining timeout: 198.284029006958
Verifying property 1 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.5483508110046387.

Properties batch 2, size 1
Remaining timeout: 198.1591317653656
Verifying property 2 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.4881792068481445.

Properties batch 3, size 1
Remaining timeout: 198.0365378856659
Verifying property 3 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.0597681999206543.

Properties batch 4, size 1
Remaining timeout: 197.91897249221802
Verifying property 4 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.8062515258789062.

Properties batch 5, size 1
Remaining timeout: 197.79343104362488
Verifying property 5 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.580868721008301.

Properties batch 6, size 1
Remaining timeout: 197.67544531822205
Verifying property 6 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6314900517463684.

Properties batch 7, size 1
Remaining timeout: 197.5583152770996
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.39776504039764404.

Properties batch 8, size 1
Remaining timeout: 197.43650674819946
Verifying property 8 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.39641094]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.93356705, -26.18995857, -23.55833054, -25.85114861, -23.34313011,
        -26.63274956, -26.89310074, -26.08115768, -22.53829002, -26.71156120],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.39641094]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 854
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 201
Node /15 input 0: size torch.Size([100]) unstable 25
-----------------
# of unstable neurons: 1080
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008740425109863281
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0539    transfer 0.0001    finalize 0.0002    func 0.0544    
Accumulated time: func 0.0544    prepare 0.0002    bound 0.0539    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 36] 
split level 1: [/input-12, 92] 
split level 2: [/input-12, 24] 
split level 3: [/input-12, 0] 
split level 4: [/input-12, 20] 
split level 5: [/input-8, 819] 
split level 6: [/input-8, 817] 
split level 7: [/input-8, 818] 
split level 8: [/input-12, 83] 
split level 9: [/input-8, 443] 
split level 10: [/input-8, 1334] 
split level 11: [/input-8, 500] 
split level 12: [/input-8, 444] 
split level 13: [/input-8, 1196] 
split level 14: [/input-8, 1715] 
split level 15: [/input-12, 42] 
split level 16: [/input-8, 497] 
split level 17: [/input-12, 64] 
split level 18: [/input-8, 499] 
split level 19: [/input-8, 1650] 
split level 20: [/input-8, 1169] 
split level 21: [/input-8, 1515] 
split level 22: [/input-8, 442] 
split level 23: [/input-8, 1114] 
split level 24: [/input-8, 1612] 
split level 25: [/input-8, 1065] 
split level 26: [/input-8, 1660] 
split level 27: [/input, 2938] 
split level 28: [/input-8, 1399] 
split level 29: [/input-8, 1619] 
split level 30: [/input-8, 1324] 
split level 31: [/input-8, 157] 
split level 32: [/input-8, 498] 
split level 33: [/input-8, 1611] 
split level 34: [/input-8, 1661] 
split level 35: [/input-8, 748] 
split level 36: [/input-8, 1134] 
split level 37: [/input-8, 1613] 
split level 38: [/input, 873] 
split level 39: [/input, 2781] 
split level 40: [/input-8, 747] 
split level 41: [/input-8, 338] 
split level 42: [/input-12, 43] 
split level 43: [/input-8, 1516] 
split level 44: [/input-8, 1662] 
split level 45: [/input-12, 59] 
split level 46: [/input-8, 1646] 
split level 47: [/input-8, 1322] 
split level 48: [/input-8, 749] 
split level 49: [/input-8, 1653] 
split level 50: [/input-8, 1654] 
split level 51: [/input-8, 793] 
split level 52: [/input-8, 1618] 
split level 53: [/input-8, 1768] 
split level 54: [/input-8, 1174] 
split level 55: [/input-8, 1610] 
split level 56: [/input-8, 403] 
split level 57: [/input, 889] 
split level 58: [/input-8, 404] 
split level 59: [/input, 857] 
split level 60: [/input-8, 154] 
split level 61: [/input-8, 1071] 
split level 62: [/input-8, 1172] 
split level 63: [/input, 872] 
split level 64: [/input, 665] 
split level 65: [/input-8, 794] 
split level 66: [/input, 974] 
split level 67: [/input, 651] 
split level 68: [/input, 3549] 
split level 69: [/input, 3521] 
split level 70: [/input, 667] 
split level 71: [/input, 680] 
split level 72: [/input-8, 406] 
split level 73: [/input, 361] 
split level 74: [/input-8, 68] 
split level 75: [/input, 3221] 
split level 76: [/input-8, 1549] 
split level 77: [/input, 2766] 
split level 78: [/input-8, 105] 
split level 79: [/input, 946] 
split level 80: [/input, 2779] 
split level 81: [/input-8, 2022] 
split level 82: [/input, 332] 
split level 83: [/input, 434] 
split level 84: [/input-8, 21] 
split level 85: [/input-8, 69] 
split level 86: [/input-8, 1161] 
split level 87: [/input-8, 429] 
split level 88: [/input, 844] 
split level 89: [/input, 165] 
split level 90: [/input, 345] 
split level 91: [/input-8, 1231] 
split level 92: [/input-8, 1265] 
split level 93: [/input-8, 475] 
split level 94: [/input-8, 441] 
split level 95: [/input, 930] 
split level 96: [/input, 2747] 
split level 97: [/input, 2760] 
split level 98: [/input-8, 167] 
split level 99: [/input, 871] 
split level 100: [/input-8, 476] 
split level 101: [/input, 2663] 
split level 102: [/input, 3414] 
split level 103: [/input, 3288] 
split level 104: [/input, 2778] 
split level 105: [/input, 316] 
split level 106: [/input, 957] 
split level 107: [/input-8, 331] 
split level 108: [/input, 2877] 
split level 109: [/input-8, 1617] 
split level 110: [/input-8, 1341] 
split level 111: [/input-8, 1924] 
split level 112: [/input-8, 1342] 
split level 113: [/input, 990] 
split level 114: [/input, 855] 
split level 115: [/input, 3192] 
split level 116: [/input, 225] 
split level 117: [/input-8, 1609] 
split level 118: [/input, 3031] 
split level 119: [/input-8, 1614] 
split level 120: [/input, 331] 
split level 121: [/input-8, 410] 
split level 122: [/input, 3975] 
split level 123: [/input, 381] 
split level 124: [/input-8, 401] 
split level 125: [/input-8, 402] 
split level 126: [/input, 1511] 
split level 127: [/input, 3041] 
split level 128: [/input-8, 468] 
split level 129: [/input, 3418] 
split level 130: [/input, 1134] 
split level 131: [/input, 3043] 
split level 132: [/input, 1510] 
split level 133: [/input, 226] 
split level 134: [/input, 962] 
split level 135: [/input-8, 1375] 
split level 136: [/input, 3459] 
split level 137: [/input, 683] 
split level 138: [/input-8, 488] 
split level 139: [/input, 2136] 
split level 140: [/input, 3030] 
split level 141: [/input, 843] 
split level 142: [/input-8, 1783] 
split level 143: [/input-8, 973] 
split level 144: [/input, 403] 
split level 145: [/input, 840] 
split level 146: [/input, 1509] 
split level 147: [/input, 2664] 
split level 148: [/input, 2424] 
split level 149: [/input, 841] 
split level 150: [/input, 1719] 
split level 151: [/input-8, 953] 
split level 152: [/input, 3042] 
split level 153: [/input-8, 1520] 
split level 154: [/input-8, 70] 
split level 155: [/input, 317] 
split level 156: [/input, 899] 
split level 157: [/input, 3548] 
split level 158: [/input, 2393] 
split level 159: [/input, 3246] 
split level 160: [/input, 1216] 
split level 161: [/input, 376] 
split level 162: [/input, 224] 
split level 163: [/input-8, 1925] 
split level 164: [/input, 3457] 
split level 165: [/input, 1492] 
split level 166: [/input, 2391] 
split level 167: [/input, 1006] 
split level 168: [/input, 2409] 
split level 169: [/input, 300] 
split level 170: [/input, 3443] 
split level 171: [/input, 3111] 
split level 172: [/input, 122] 
split level 173: [/input, 1021] 
split level 174: [/input, 3099] 
split level 175: [/input-8, 990] 
split level 176: [/input, 1017] 
split level 177: [/input, 2392] 
split level 178: [/input, 979] 
split level 179: [/input, 2137] 
split level 180: [/input, 1512] 
split level 181: [/input, 1514] 
split level 182: [/input, 975] 
split level 183: [/input, 3114] 
split level 184: [/input-8, 1547] 
split level 185: [/input, 2135] 
split level 186: [/input, 329] 
split level 187: [/input, 568] 
split level 188: [/input, 357] 
split level 189: [/input, 218] 
split level 190: [/input, 341] 
split level 191: [/input, 3419] 
split level 192: [/input, 2152] 
split level 193: [/input, 333] 
split level 194: [/input, 3441] 
split level 195: [/input, 1099] 
split level 196: [/input, 1513] 
split level 197: [/input, 3113] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1519] 
Time: prepare 0.0061    bound 0.0958    transfer 0.0067    finalize 0.0046    func 0.1133    
Accumulated time: func 0.1676    prepare 0.0162    bound 0.1497    transfer 0.0068    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.07017088) min lb tensor(-0.39636785)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01349496841430664 
BICCOS Cumulative time: 0.01349496841430664
Preprocessing time: 0.012122631072998047 Inference time: 0.00017523765563964844 Add cuts time: 8.344650268554688e-05 Cut analysis time: 0.0011136531829833984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.38675 (1), -0.38674 (1), -0.38656 (1), -0.38642 (1), -0.38626 (1), -0.38588 (1), -0.38583 (1), -0.38573 (1), -0.38354 (1), -0.38254 (1), -0.38204 (1), -0.37946 (1), -0.37930 (1), -0.37873 (1), -0.37843 (1), -0.37808 (1), -0.37797 (1), -0.37730 (1), -0.37708 (1), -0.37684 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5191    set_bounds 0.0119    solve 0.1134    add 0.2154    
Accumulated time: pickout 0.0004    decision 0.5191    set_bounds 0.0119    solve 0.1134    add 0.2154    
Current (lb-rhs): -0.38675370812416077
50 domains visited
Cumulative time: 0.9515597820281982

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] 
split level 1: [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37260425090789795
10 lb beta sum: 0.580084502696991, worst -0.36853840947151184
Time: prepare 0.0074    bound 0.1219    transfer 0.0010    finalize 0.0029    func 0.1359    
Accumulated time: func 0.3036    prepare 0.0239    bound 0.2716    transfer 0.0078    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.14343321) min lb tensor(-0.36848330)
Number of Verified Splits: 16 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.0161740779876709 
BICCOS Cumulative time: 0.02966904640197754
Preprocessing time: 0.01332545280456543 Inference time: 0.0008649826049804688 Add cuts time: 0.00031185150146484375 Cut analysis time: 0.0016717910766601562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23975 (2), -0.23949 (2), -0.23885 (2), -0.23773 (2), -0.23733 (2), -0.23706 (2), -0.23682 (2), -0.23628 (2), -0.23563 (2), -0.23549 (2), -0.23546 (2), -0.23546 (2), -0.23510 (2), -0.23344 (2), -0.23259 (2), -0.23241 (2), -0.23231 (2), -0.23210 (2), -0.23201 (2), -0.22929 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0213    set_bounds 0.0133    solve 0.1360    add 0.2218    
Accumulated time: pickout 0.0085    decision 0.5404    set_bounds 0.0252    solve 0.2494    add 0.4372    
Current (lb-rhs): -0.23975268006324768
100 domains visited
Cumulative time: 1.3752360343933105

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 24] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 24] [/input-12, 0] [/input-12, 24] [/input-12, 92] [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 24] [/input-12, 24] [/input-12, 24] 
split level 2: [/input-12, 0] [/input-8, 819] [/input-12, 0] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23940858244895935
10 lb beta sum: 0.7652418613433838, worst -0.23561036586761475
Time: prepare 0.0075    bound 0.1174    transfer 0.0010    finalize 0.0027    func 0.1312    
Accumulated time: func 0.4348    prepare 0.0316    bound 0.3890    transfer 0.0088    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.48864233) min lb tensor(-0.23514134)
Number of Verified Splits: 51 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.017644405364990234 
BICCOS Cumulative time: 0.04731345176696777
Preprocessing time: 0.012768030166625977 Inference time: 0.0023717880249023438 Add cuts time: 0.0017404556274414062 Cut analysis time: 0.0007641315460205078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12185 (3), -0.11956 (3), -0.11954 (3), -0.11928 (3), -0.11908 (3), -0.11856 (3), -0.11796 (3), -0.11623 (3), -0.11411 (3), -0.11286 (3), -0.11168 (3), -0.11166 (3), -0.10858 (3), -0.10600 (3), -0.10471 (3), -0.10434 (3), -0.10281 (3), -0.10101 (3), -0.10089 (3), -0.09646 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0199    set_bounds 0.0154    solve 0.1313    add 0.4233    
Accumulated time: pickout 0.0164    decision 0.5603    set_bounds 0.0406    solve 0.3807    add 0.8605    
Current (lb-rhs): -0.1218523383140564
150 domains visited
Cumulative time: 2.021442174911499

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 92] [/input-12, 92] [/input-8, 818] [/input-12, 0] [/input-12, 0] [/input-12, 24] [/input-12, 24] [/input-8, 818] 
split level 2: [/input-8, 819] [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 1322] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 500] 
split level 3: [/input-8, 818] [/input-8, 818] [/input-8, 1516] [/input-8, 500] [/input-8, 21] [/input-8, 500] [/input-8, 500] [/input-8, 1058] [/input-8, 1058] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12624263763427734
10 lb beta sum: 0.735511302947998, worst -0.12132538110017776
Time: prepare 0.0081    bound 0.1228    transfer 0.0026    finalize 0.0031    func 0.1402    
Accumulated time: func 0.5750    prepare 0.0401    bound 0.5118    transfer 0.0114    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.50553370) min lb tensor(-0.11840267)
Number of Verified Splits: 88 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.021538734436035156 
BICCOS Cumulative time: 0.06885218620300293
Preprocessing time: 0.012831926345825195 Inference time: 0.0045490264892578125 Add cuts time: 0.001954793930053711 Cut analysis time: 0.0022029876708984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04699 (4), -0.04657 (4), -0.04620 (4), -0.04620 (4), -0.04556 (4), -0.04547 (4), -0.04474 (4), -0.04468 (4), -0.04451 (4), -0.04412 (4), -0.04400 (4), -0.04397 (4), -0.04390 (4), -0.04381 (4), -0.04307 (4), -0.04196 (4), -0.04162 (4), -0.03982 (4), -0.03943 (4), -0.03941 (4), 
Length of domains: 50
Time: pickout 0.0246    decision 0.0229    set_bounds 0.0185    solve 0.1403    add 0.2415    
Accumulated time: pickout 0.0410    decision 0.5832    set_bounds 0.0591    solve 0.5210    add 1.1020    
Current (lb-rhs): -0.046988070011138916
200 domains visited
Cumulative time: 2.498018264770508

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-8, 819] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-12, 0] 
split level 2: [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 818] 
split level 3: [/input-8, 500] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 157] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051648616790771484
10 lb beta sum: 0.6671108603477478, worst -0.10890495777130127
Time: prepare 0.0083    bound 0.1361    transfer 0.0010    finalize 0.0027    func 0.1507    
Accumulated time: func 0.7257    prepare 0.0486    bound 0.6479    transfer 0.0124    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.04273081) min lb tensor(-0.04522252)
Number of Verified Splits: 139 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.0251772403717041 
BICCOS Cumulative time: 0.09402942657470703
Preprocessing time: 0.012590885162353516 Inference time: 0.007869958877563477 Add cuts time: 0.0025615692138671875 Cut analysis time: 0.002154827117919922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00682 (5), -0.00681 (5), -0.00653 (5), -0.00651 (5), -0.00651 (5), -0.00634 (5), -0.00632 (5), -0.00591 (5), -0.00560 (5), -0.00539 (5), -0.00530 (5), -0.00487 (5), -0.00487 (5), -0.00470 (5), -0.00467 (5), -0.00458 (5), -0.00448 (5), -0.00437 (5), -0.00412 (5), -0.00409 (5), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0202    set_bounds 0.0161    solve 0.1509    add 0.5153    
Accumulated time: pickout 0.0488    decision 0.6034    set_bounds 0.0752    solve 0.6719    add 1.6173    
Current (lb-rhs): -0.006821951828896999
250 domains visited
Cumulative time: 3.24067759513855

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64]), tensor([-1.]), tensor([0]), tensor([7.63705765e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [8.220780306489317e-11], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.37509301e-01, 7.51474649e-02, 2.73031760e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [8.220780306489317e-11], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.37509301e-01, 7.51474649e-02, 5.65235764e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.01951916702091694], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.37509301e-01, 7.51474649e-02, 2.76320446e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.01951916702091694], [3]), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.37509301e-01, 7.51474649e-02, 5.60155958e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.37509301e-01, 3.57283205e-02, 5.23375114e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36,  0, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.37509301e-01, 3.57283205e-02, 4.99588549e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.017362194135785103], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.16705969e-01, 1.03368118e-01, 2.65602339e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [-1.0], [0], [0.017362194135785103], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.16705969e-01, 1.03368118e-01, 4.78348285e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.014235781505703926], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.16705969e-01, 1.03368118e-01, 2.77575422e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([818], [1.0], [0], [0.014235781505703926], [3]), '/input-12': (tensor([64, 36, 24, 92]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023889e+30, 1.16705969e-01, 1.03368118e-01, 4.83027846e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([64, 36, 24]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.63023889e+30, 1.16705969e-01, 3.52589935e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39359673857688904
10 lb beta sum: 0.8473874926567078, worst -0.38535791635513306
Time: prepare 0.0006    bound 0.1332    transfer 0.0003    finalize 0.0002    func 0.1346    
Accumulated time: func 0.8603    prepare 0.0493    bound 0.7811    transfer 0.0128    finalize 0.0163    
After pruning, left:  7

Back to Regular BaB

BaB round 1
batch: 7
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 36] [/input-12, 24] [/input-12, 24] [/input-12, 24] [/input-12, 0] [/input-12, 0] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-8, 819] [/input-12, 0] 
split level 2: [/input-12, 24] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] [/input-8, 500] [/input-8, 500] [/input-8, 819] 
split level 3: [/input-12, 0] [/input, 2938] [/input, 2938] [/input-8, 1334] [/input-8, 1334] [/input-8, 1334] [/input-8, 818] 
split level 4: [/input-8, 818] [/input-8, 1058] [/input-8, 1058] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 1334] 
cut re-enabled after branching node selection
0 lb beta sum: 0.852806806564331, worst -0.19487686455249786
10 lb beta sum: 0.8533708453178406, worst -0.19418121874332428
Time: prepare 0.0105    bound 0.1368    transfer 0.0038    finalize 0.0031    func 0.1556    
Accumulated time: func 1.0158    prepare 0.0601    bound 0.9179    transfer 0.0165    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.27959856) min lb tensor(-0.19391930)
Number of Verified Splits: 188 of 224
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.840469479560852, worst -0.2801862955093384
10 lb beta sum: 1.0047845840454102, worst -0.23681533336639404
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 4
#cuts 4-6: 21
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2731354236602783 
BICCOS Cumulative time: 0.36716485023498535
Preprocessing time: 0.0071752071380615234 Inference time: 0.25893187522888184 Add cuts time: 0.004811286926269531 Cut analysis time: 0.0022170543670654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19392 (5), -0.19245 (5), -0.17419 (5), -0.17049 (5), -0.15550 (5), -0.15311 (5), -0.14802 (5), -0.14683 (5), -0.13814 (5), -0.13502 (5), -0.11640 (5), -0.11215 (5), -0.06620 (5), -0.06600 (5), -0.05980 (5), -0.05739 (5), -0.05457 (5), -0.05438 (5), -0.04365 (5), -0.04237 (5), 
Length of domains: 36
Time: pickout 0.0008    decision 0.0158    set_bounds 0.0229    solve 0.1556    add 0.0618    
Accumulated time: pickout 0.0496    decision 0.6192    set_bounds 0.0981    solve 0.8275    add 1.6791    
Current (lb-rhs): -0.19391930103302002
286 domains visited
Cumulative time: 4.034509181976318

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 819] [/input-8, 500] [/input-8, 500] [/input-8, 817] [/input-8, 817] [/input-8, 819] [/input-8, 819] [/input-8, 817] [/input-8, 817] [/input-8, 819] 
split level 1: [/input-8, 500] [/input, 2938] [/input-8, 157] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] [/input-8, 500] 
split level 2: [/input-8, 157] [/input-8, 1058] [/input-8, 1662] [/input-8, 1516] [/input-8, 1516] [/input, 2938] [/input, 2938] [/input-8, 1516] [/input-8, 1516] [/input-8, 157] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1839473992586136
10 lb beta sum: 0.4658515751361847, worst -0.17968840897083282
Time: prepare 0.0065    bound 0.1472    transfer 0.0049    finalize 0.0029    func 0.1634    
Accumulated time: func 1.1792    prepare 0.0667    bound 1.0651    transfer 0.0214    finalize 0.0222    
all_split False
======================Cut inference begins======================
max lb tensor(0.03252465) min lb tensor(-0.17953852)
Number of Verified Splits: 98 of 288
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02072906494140625 
BICCOS Cumulative time: 0.3878939151763916
Preprocessing time: 0.008725404739379883 Inference time: 0.008341789245605469 Add cuts time: 0.0024220943450927734 Cut analysis time: 0.001239776611328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17954 (8), -0.17825 (8), -0.16862 (8), -0.16623 (8), -0.16403 (8), -0.16307 (8), -0.15937 (8), -0.15536 (8), -0.15380 (8), -0.15130 (8), -0.14883 (8), -0.14847 (8), -0.14610 (8), -0.14610 (8), -0.14394 (8), -0.13967 (8), -0.13816 (8), -0.13788 (8), -0.13724 (8), -0.13640 (8), 
Length of domains: 190
Time: pickout 0.0058    decision 0.0135    set_bounds 0.0166    solve 0.1635    add 0.0846    
Accumulated time: pickout 0.0555    decision 0.6327    set_bounds 0.1147    solve 0.9910    add 1.7637    
Current (lb-rhs): -0.1795385181903839
476 domains visited
Cumulative time: 4.346794128417969

BaB round 3
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2938] [/input-8, 1399] [/input-8, 1065] [/input-12, 20] [/input-8, 817] [/input-8, 817] [/input-8, 1065] [/input-8, 1334] [/input-8, 1334] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18100562691688538
10 lb beta sum: 0.5536284446716309, worst -0.1794060468673706
Time: prepare 0.0088    bound 0.1327    transfer 0.0059    finalize 0.0027    func 0.1526    
Accumulated time: func 1.3318    prepare 0.0758    bound 1.1978    transfer 0.0273    finalize 0.0249    
all_split False
======================Cut inference begins======================
max lb tensor(0.72082508) min lb tensor(-0.17933810)
Number of Verified Splits: 214 of 380
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03522849082946777 
BICCOS Cumulative time: 0.4231224060058594
Preprocessing time: 0.011286735534667969 Inference time: 0.019935131072998047 Add cuts time: 0.002657175064086914 Cut analysis time: 0.0013494491577148438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17934 (9), -0.17808 (9), -0.16794 (9), -0.16554 (9), -0.16308 (9), -0.16206 (9), -0.15522 (9), -0.15268 (9), -0.15110 (9), -0.14998 (9), -0.14433 (9), -0.14387 (9), -0.14346 (9), -0.14140 (9), -0.13938 (9), -0.13538 (9), -0.13394 (9), -0.13366 (9), -0.13356 (9), -0.13249 (9), 
Length of domains: 166
Time: pickout 0.0170    decision 0.0229    set_bounds 0.0167    solve 0.1534    add 0.0806    
Accumulated time: pickout 0.0724    decision 0.6557    set_bounds 0.1315    solve 1.1444    add 1.8443    
Current (lb-rhs): -0.17933809757232666
642 domains visited
Cumulative time: 4.680885314941406

BaB round 4
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1334] [/input-8, 1334] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] [/input-8, 1334] [/input-8, 1334] [/input-8, 1661] [/input-8, 1661] [/input-12, 20] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17684565484523773
10 lb beta sum: 1.349219799041748, worst -0.16878020763397217
Time: prepare 0.0076    bound 0.1561    transfer 0.0009    finalize 0.0021    func 0.1689    
Accumulated time: func 1.5007    prepare 0.0836    bound 1.3539    transfer 0.0282    finalize 0.0270    
all_split False
======================Cut inference begins======================
max lb tensor(1.02578640) min lb tensor(-0.16873157)
Number of Verified Splits: 268 of 332
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 12
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.0382387638092041 
BICCOS Cumulative time: 0.4613611698150635
Preprocessing time: 0.010094165802001953 Inference time: 0.023867130279541016 Add cuts time: 0.0030295848846435547 Cut analysis time: 0.0012478828430175781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16873 (10), -0.16788 (10), -0.15719 (10), -0.15519 (10), -0.15213 (10), -0.15133 (10), -0.14578 (10), -0.14177 (10), -0.14155 (10), -0.13930 (10), -0.13469 (10), -0.13418 (10), -0.13184 (10), -0.12984 (10), -0.12976 (10), -0.12853 (10), -0.12828 (10), -0.12690 (10), -0.12202 (10), -0.11910 (10), 
Length of domains: 64
Time: pickout 0.0161    decision 0.0209    set_bounds 0.0144    solve 0.1690    add 0.0715    
Accumulated time: pickout 0.0885    decision 0.6765    set_bounds 0.1458    solve 1.3134    add 1.9158    
Current (lb-rhs): -0.16873157024383545
706 domains visited
Cumulative time: 5.019320487976074

BaB round 5
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1661] [/input-8, 1516] [/input-8, 1661] [/input-8, 157] [/input-8, 1174] [/input-8, 157] [/input-8, 1174] [/input-8, 157] [/input-8, 1661] [/input-8, 157] 
split level 1: [/input-8, 1174] [/input-8, 157] [/input-8, 1174] [/input-8, 1516] [/input-8, 1661] [/input-8, 1516] [/input-8, 1661] [/input-8, 1516] [/input-8, 1174] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.325850009918213, worst -0.16505658626556396
10 lb beta sum: 1.3284060955047607, worst -0.16500937938690186
Time: prepare 0.0122    bound 0.1480    transfer 0.0019    finalize 0.0023    func 0.1660    
Accumulated time: func 1.6667    prepare 0.0959    bound 1.5019    transfer 0.0302    finalize 0.0292    
all_split False
======================Cut inference begins======================
max lb tensor(0.15885943) min lb tensor(-0.16498595)
Number of Verified Splits: 48 of 256
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.014611959457397461 
BICCOS Cumulative time: 0.47597312927246094
Preprocessing time: 0.008095979690551758 Inference time: 0.004225015640258789 Add cuts time: 0.00043129920959472656 Cut analysis time: 0.0018596649169921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16499 (12), -0.16455 (12), -0.16322 (12), -0.15958 (12), -0.15299 (12), -0.15178 (12), -0.15166 (12), -0.14818 (12), -0.14759 (12), -0.14688 (12), -0.14629 (12), -0.14570 (12), -0.14558 (12), -0.14169 (12), -0.14153 (12), -0.13752 (12), -0.13713 (12), -0.13582 (12), -0.13503 (12), -0.13447 (12), 
Length of domains: 208
Time: pickout 0.0073    decision 0.0146    set_bounds 0.0156    solve 0.1661    add 0.0799    
Accumulated time: pickout 0.0958    decision 0.6911    set_bounds 0.1615    solve 1.4795    add 1.9957    
Current (lb-rhs): -0.16498595476150513
914 domains visited
Cumulative time: 5.325538873672485

BaB round 6
batch: 208
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1662] [/input-8, 748] [/input-8, 1662] [/input-8, 817] [/input-8, 1662] [/input-8, 817] [/input-8, 1662] [/input-8, 748] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1666770726442337
10 lb beta sum: 1.266553282737732, worst -0.16455647349357605
Time: prepare 0.0096    bound 0.1568    transfer 0.0089    finalize 0.0038    func 0.1818    
Accumulated time: func 1.8485    prepare 0.1057    bound 1.6587    transfer 0.0391    finalize 0.0330    
all_split False
======================Cut inference begins======================
max lb tensor(0.84973621) min lb tensor(-0.16455184)
Number of Verified Splits: 129 of 416
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.029424428939819336 
BICCOS Cumulative time: 0.5053975582122803
Preprocessing time: 0.012750864028930664 Inference time: 0.01395726203918457 Add cuts time: 0.001493692398071289 Cut analysis time: 0.0012226104736328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16455 (13), -0.16321 (13), -0.16200 (13), -0.16083 (13), -0.16065 (13), -0.15949 (13), -0.15779 (13), -0.14992 (13), -0.14958 (13), -0.14823 (13), -0.14763 (13), -0.14714 (13), -0.14629 (13), -0.14579 (13), -0.14564 (13), -0.14384 (13), -0.14251 (13), -0.14162 (13), -0.14147 (13), -0.13745 (13), 
Length of domains: 287
Time: pickout 0.0166    decision 0.0250    set_bounds 0.0201    solve 0.1819    add 0.1149    
Accumulated time: pickout 0.1124    decision 0.7161    set_bounds 0.1815    solve 1.6614    add 2.1106    
Current (lb-rhs): -0.16455183923244476
1201 domains visited
Cumulative time: 5.722351551055908

BaB round 7
batch: 287
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4823992252349854, worst -0.16092990338802338
10 lb beta sum: 1.4986445903778076, worst -0.1608937829732895
Time: prepare 0.0260    bound 0.1565    transfer 0.0029    finalize 0.0046    func 0.1939    
Accumulated time: func 2.0424    prepare 0.1319    bound 1.8152    transfer 0.0420    finalize 0.0376    
all_split False
======================Cut inference begins======================
max lb tensor(0.22853380) min lb tensor(-0.16088779)
Number of Verified Splits: 170 of 574
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.041979074478149414 
BICCOS Cumulative time: 0.5473766326904297
Preprocessing time: 0.0174863338470459 Inference time: 0.021654605865478516 Add cuts time: 0.0016434192657470703 Cut analysis time: 0.0011947154998779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16089 (14), -0.15969 (14), -0.15955 (14), -0.15935 (14), -0.15896 (14), -0.15836 (14), -0.15801 (14), -0.15763 (14), -0.15560 (14), -0.15428 (14), -0.15359 (14), -0.15226 (14), -0.14985 (14), -0.14956 (14), -0.14851 (14), -0.14823 (14), -0.14700 (14), -0.14610 (14), -0.14567 (14), -0.14536 (14), 
Length of domains: 404
Time: pickout 0.0612    decision 0.0276    set_bounds 0.0262    solve 0.1941    add 0.0849    
Accumulated time: pickout 0.1736    decision 0.7437    set_bounds 0.2078    solve 1.8555    add 2.1955    
Current (lb-rhs): -0.16088779270648956
1605 domains visited
Cumulative time: 6.166582107543945

BaB round 8
batch: 404
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 889] [/input-8, 1516] [/input-12, 20] [/input-8, 1399] [/input, 2938] [/input-8, 747] [/input-8, 498] [/input-8, 1516] [/input-8, 748] [/input-8, 1399] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4457801580429077, worst -0.1608361005783081
10 lb beta sum: 1.8200966119766235, worst -0.15936005115509033
Time: prepare 0.0371    bound 0.1576    transfer 0.0129    finalize 0.0049    func 0.2187    
Accumulated time: func 2.2611    prepare 0.1693    bound 1.9728    transfer 0.0549    finalize 0.0424    
all_split False
======================Cut inference begins======================
max lb tensor(0.20745832) min lb tensor(-0.15935075)
Number of Verified Splits: 54 of 808
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03461623191833496 
BICCOS Cumulative time: 0.5819928646087646
Preprocessing time: 0.024326086044311523 Inference time: 0.0064465999603271484 Add cuts time: 0.0008258819580078125 Cut analysis time: 0.0030176639556884766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15935 (15), -0.15804 (15), -0.15801 (15), -0.15680 (15), -0.15670 (15), -0.15668 (15), -0.15605 (15), -0.15546 (15), -0.15534 (15), -0.15472 (15), -0.15358 (15), -0.15224 (15), -0.15183 (15), -0.15172 (15), -0.15102 (15), -0.15067 (15), -0.15050 (15), -0.15040 (15), -0.15036 (15), -0.14973 (15), 
Length of domains: 754
Time: pickout 0.0198    decision 0.0338    set_bounds 0.0353    solve 0.2190    add 0.1328    
Accumulated time: pickout 0.1934    decision 0.7775    set_bounds 0.2431    solve 2.0745    add 2.3283    
Current (lb-rhs): -0.15935075283050537
2359 domains visited
Cumulative time: 6.650581359863281

BaB round 9
batch: 754
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 20] [/input-8, 747] [/input-8, 748] [/input-8, 1324] [/input-8, 1399] [/input-8, 1399] [/input-8, 1324] [/input-8, 498] [/input-8, 748] [/input-8, 1134] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9036626815795898, worst -0.1562870740890503
10 lb beta sum: 1.9056153297424316, worst -0.15624278783798218
Time: prepare 0.0689    bound 0.1825    transfer 0.0230    finalize 0.0104    func 0.2948    
Accumulated time: func 2.5559    prepare 0.2384    bound 2.1553    transfer 0.0779    finalize 0.0528    
all_split False
======================Cut inference begins======================
max lb tensor(0.25652778) min lb tensor(-0.15621424)
Number of Verified Splits: 213 of 1508
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.07928705215454102 
BICCOS Cumulative time: 0.6612799167633057
Preprocessing time: 0.04911041259765625 Inference time: 0.026909828186035156 Add cuts time: 0.0019528865814208984 Cut analysis time: 0.001313924789428711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15621 (16), -0.15527 (16), -0.15488 (16), -0.15399 (16), -0.15392 (16), -0.15365 (16), -0.15331 (16), -0.15263 (16), -0.15231 (16), -0.15200 (16), -0.15194 (16), -0.15073 (16), -0.15066 (16), -0.14944 (16), -0.14938 (16), -0.14896 (16), -0.14869 (16), -0.14817 (16), -0.14810 (16), -0.14770 (16), 
Length of domains: 1295
Time: pickout 0.0821    decision 0.0548    set_bounds 0.0662    solve 0.2952    add 0.1057    
Accumulated time: pickout 0.2755    decision 0.8323    set_bounds 0.3093    solve 2.3696    add 2.4340    
Current (lb-rhs): -0.15621423721313477
3654 domains visited
Cumulative time: 7.344167947769165

BaB round 10
batch: 1295
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 498] [/input, 889] [/input-8, 1134] [/input-8, 1516] [/input-8, 748] [/input-8, 157] [/input-8, 1516] [/input, 889] [/input-8, 747] [/input-8, 748] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8693947792053223, worst -0.153511643409729
10 lb beta sum: 1.870973825454712, worst -0.15350252389907837
Time: prepare 0.1247    bound 0.2690    transfer 0.0514    finalize 0.0199    func 0.4845    
Accumulated time: func 3.0404    prepare 0.3634    bound 2.4243    transfer 0.1293    finalize 0.0727    
all_split False
======================Cut inference begins======================
max lb tensor(0.27459705) min lb tensor(-0.15349197)
Number of Verified Splits: 208 of 2590
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.11949396133422852 
BICCOS Cumulative time: 0.7807738780975342
Preprocessing time: 0.08630704879760742 Inference time: 0.029044151306152344 Add cuts time: 0.002598285675048828 Cut analysis time: 0.0015444755554199219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15349 (17), -0.15213 (17), -0.15194 (17), -0.15093 (17), -0.15075 (17), -0.15065 (17), -0.15057 (17), -0.14963 (17), -0.14956 (17), -0.14945 (17), -0.14940 (17), -0.14930 (17), -0.14903 (17), -0.14857 (17), -0.14827 (17), -0.14813 (17), -0.14802 (17), -0.14767 (17), -0.14721 (17), -0.14718 (17), 
Length of domains: 2382
Time: pickout 0.0401    decision 0.2533    set_bounds 0.1141    solve 0.4851    add 0.1219    
Accumulated time: pickout 0.3156    decision 1.0856    set_bounds 0.4234    solve 2.8548    add 2.5559    
Current (lb-rhs): -0.15349197387695312
6036 domains visited
Cumulative time: 8.489119529724121

BaB round 11
batch: 2382
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 747] [/input-8, 747] [/input-8, 794] [/input, 889] [/input, 2938] [/input-8, 794] [/input-8, 1174] [/input-8, 748] [/input-8, 1516] 
cut re-enabled after branching node selection
0 lb beta sum: 1.847481369972229, worst -0.1525670289993286
10 lb beta sum: 1.848546028137207, worst -0.15257024765014648
Time: prepare 0.4039    bound 0.4352    transfer 0.0647    finalize 0.0381    func 0.9732    
Accumulated time: func 4.0136    prepare 0.7676    bound 2.8595    transfer 0.1940    finalize 0.1108    
all_split False
======================Cut inference begins======================
max lb tensor(0.27520412) min lb tensor(-0.15256017)
Number of Verified Splits: 426 of 4764
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.2319021224975586 
BICCOS Cumulative time: 1.0126760005950928
Preprocessing time: 0.1581118106842041 Inference time: 0.0655527114868164 Add cuts time: 0.006592273712158203 Cut analysis time: 0.0016453266143798828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15256 (18), -0.15120 (18), -0.15010 (18), -0.14882 (18), -0.14875 (18), -0.14810 (18), -0.14788 (18), -0.14781 (18), -0.14777 (18), -0.14764 (18), -0.14746 (18), -0.14708 (18), -0.14699 (18), -0.14674 (18), -0.14664 (18), -0.14652 (18), -0.14646 (18), -0.14622 (18), -0.14589 (18), -0.14581 (18), 
Length of domains: 4338
Time: pickout 0.0546    decision 0.1476    set_bounds 0.2099    solve 0.9755    add 0.1865    
Accumulated time: pickout 0.3702    decision 1.2332    set_bounds 0.6333    solve 3.8303    add 2.7424    
Current (lb-rhs): -0.15256017446517944
10374 domains visited
Cumulative time: 10.308815956115723

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 1174] [/input-8, 748] [/input-8, 497] [/input-8, 1611] [/input-8, 748] [/input-8, 497] [/input-8, 1611] [/input-8, 498] [/input-8, 794] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8193079233169556, worst -0.14891588687896729
10 lb beta sum: 1.8197672367095947, worst -0.14888536930084229
Time: prepare 0.4138    bound 0.6826    transfer 0.0619    finalize 0.0607    func 1.2725    
Accumulated time: func 5.2861    prepare 1.1817    bound 3.5421    transfer 0.2559    finalize 0.1715    
all_split False
======================Cut inference begins======================
max lb tensor(0.28415561) min lb tensor(-0.14887953)
Number of Verified Splits: 796 of 8192
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.41734790802001953 
BICCOS Cumulative time: 1.4300239086151123
Preprocessing time: 0.27339959144592285 Inference time: 0.1286478042602539 Add cuts time: 0.013630151748657227 Cut analysis time: 0.0016703605651855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14888 (19), -0.14862 (19), -0.14788 (18), -0.14781 (19), -0.14752 (19), -0.14735 (19), -0.14727 (19), -0.14684 (19), -0.14645 (19), -0.14636 (19), -0.14599 (19), -0.14581 (19), -0.14564 (18), -0.14551 (19), -0.14515 (19), -0.14500 (19), -0.14470 (18), -0.14468 (19), -0.14446 (19), -0.14423 (19), 
Length of domains: 7638
Time: pickout 0.0845    decision 0.2354    set_bounds 0.5730    solve 1.2752    add 0.2217    
Accumulated time: pickout 0.4547    decision 1.4686    set_bounds 1.2063    solve 5.1055    add 2.9641    
Current (lb-rhs): -0.1488795280456543
17770 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.149206638336182

BaB round 13
batch: 7638
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1324] [/input-8, 748] [/input-12, 20] [/input-8, 748] [/input-8, 748] [/input-8, 748] [/input-8, 748] [/input-8, 1654] [/input-8, 498] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7957282066345215, worst -0.14706480503082275
10 lb beta sum: 1.7961245775222778, worst -0.14706438779830933
Time: prepare 0.7634    bound 1.2089    transfer 0.0815    finalize 0.1100    func 2.2616    
Accumulated time: func 7.5478    prepare 1.9454    bound 4.7510    transfer 0.3375    finalize 0.2814    
all_split False
======================Cut inference begins======================
max lb tensor(0.27108389) min lb tensor(-0.14705974)
Number of Verified Splits: 909 of 15276
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 477 constraints, 31144 nonzero elements
cuts preparing time: 0.0147
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 491.
#cuts 1-3: 99
#cuts 13-15: 4
#cuts 16-18: 10
#cuts 19-21: 23
#cuts >= 20: 355
BICCOS time: 1.2544636726379395 
BICCOS Cumulative time: 2.6844875812530518
Preprocessing time: 0.5359508991241455 Inference time: 0.4379305839538574 Add cuts time: 0.016668319702148438 Cut analysis time: 0.2639138698577881
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14706 (20), -0.14676 (20), -0.14604 (19), -0.14586 (20), -0.14570 (20), -0.14550 (20), -0.14541 (20), -0.14450 (20), -0.14448 (20), -0.14435 (20), -0.14414 (19), -0.14413 (20), -0.14397 (20), -0.14364 (20), -0.14327 (20), -0.14324 (19), -0.14318 (20), -0.14314 (20), -0.14298 (20), -0.14292 (19), 
Length of domains: 14367
Time: pickout 0.2391    decision 0.6524    set_bounds 0.9465    solve 2.2660    add 0.1910    
Accumulated time: pickout 0.6938    decision 2.1210    set_bounds 2.1528    solve 7.3715    add 3.1551    
Current (lb-rhs): -0.14705973863601685
32137 domains visited
Cumulative time: 18.729304552078247

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 747] [/input-8, 1654] [/input-8, 747] [/input-8, 747] [/input-8, 747] [/input-8, 1174] [/input-8, 747] [/input-8, 1324] [/input-8, 1169] [/input-8, 1654] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14759212732315063
10 lb beta sum: 5.928117752075195, worst -0.09947241842746735
Time: prepare 0.4326    bound 2.8268    transfer 0.0825    finalize 0.1280    func 3.5791    
Accumulated time: func 11.1269    prepare 2.3783    bound 7.5778    transfer 0.4199    finalize 0.4095    
all_split False
======================Cut inference begins======================
max lb tensor(0.03672618) min lb tensor(-0.08756733)
Number of Verified Splits: 9519 of 16384
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 914 constraints, 46865 nonzero elements
cuts preparing time: 0.0210
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 928.
#cuts 1-3: 205
#cuts 7-9: 2
#cuts 10-12: 4
#cuts 13-15: 12
#cuts 16-18: 30
#cuts 19-21: 56
#cuts >= 20: 619
BICCOS time: 3.034642219543457 
BICCOS Cumulative time: 5.719129800796509
Preprocessing time: 0.5810306072235107 Inference time: 1.9011602401733398 Add cuts time: 0.15584039688110352 Cut analysis time: 0.39661097526550293
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14435 (20), -0.14397 (20), -0.14318 (20), -0.14298 (20), -0.14278 (20), -0.14261 (20), -0.14240 (20), -0.14139 (20), -0.14124 (20), -0.14103 (20), -0.13990 (20), -0.13985 (20), -0.13979 (20), -0.13955 (20), -0.13949 (20), -0.13927 (20), -0.13854 (20), -0.13854 (20), -0.13851 (20), -0.13844 (20), 
Length of domains: 13040
Time: pickout 0.1475    decision 0.4665    set_bounds 1.0662    solve 3.5837    add 0.2136    
Accumulated time: pickout 0.8414    decision 2.5875    set_bounds 3.2190    solve 10.9552    add 3.3688    
Current (lb-rhs): -0.14435145258903503
39002 domains visited
current_vram/total_varm: 28.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 27.36333680152893

BaB round 15
batch: 13040
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1322] [/input-8, 1516] [/input-8, 497] [/input-8, 1516] [/input-8, 1516] [/input-8, 1134] [/input-8, 1516] [/input-8, 498] [/input-8, 1516] [/input, 2938] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1455751657485962
10 lb beta sum: 7.779049873352051, worst -0.10199744999408722
Time: prepare 0.6808    bound 6.5344    transfer 0.1402    finalize 0.2170    func 7.7466    
Accumulated time: func 18.8735    prepare 3.0596    bound 14.1122    transfer 0.5602    finalize 0.6265    
all_split False
======================Cut inference begins======================
max lb tensor(0.39856306) min lb tensor(-0.07992471)
Number of Verified Splits: 9325 of 26080
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1247 constraints, 63436 nonzero elements
cuts preparing time: 0.0237
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1266.
#cuts 1-3: 329
#cuts 4-6: 5
#cuts 7-9: 6
#cuts 10-12: 13
#cuts 13-15: 31
#cuts 16-18: 73
#cuts 19-21: 61
#cuts >= 20: 748
BICCOS time: 3.595184326171875 
BICCOS Cumulative time: 9.314314126968384
Preprocessing time: 1.3110120296478271 Inference time: 1.593268871307373 Add cuts time: 0.15970063209533691 Cut analysis time: 0.5312027931213379
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07992 (22), -0.07906 (21), -0.07878 (22), -0.07864 (22), -0.07827 (21), -0.07817 (21), -0.07809 (21), -0.07761 (22), -0.07734 (21), -0.07730 (21), -0.07726 (22), -0.07723 (22), -0.07705 (22), -0.07692 (22), -0.07676 (22), -0.07674 (21), -0.07664 (21), -0.07647 (22), -0.07642 (22), -0.07618 (21), 
Length of domains: 16755
Time: pickout 0.3668    decision 1.0872    set_bounds 1.6520    solve 7.7538    add 0.1955    
Accumulated time: pickout 1.2082    decision 3.6747    set_bounds 4.8710    solve 18.7090    add 3.5643    
Current (lb-rhs): -0.07992471009492874
55757 domains visited
Cumulative time: 42.16133785247803

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1169] [/input-8, 1662] [/input-8, 1661] [/input-8, 1661] [/input-8, 1322] [/input-8, 497] [/input-8, 1662] [/input-8, 1662] [/input-8, 1322] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14375290274620056
10 lb beta sum: 9.289652824401855, worst -0.10385340452194214
Time: prepare 0.8981    bound 10.1130    transfer 0.1705    finalize 0.2964    func 12.1041    
Accumulated time: func 30.9776    prepare 3.9580    bound 24.2251    transfer 0.7306    finalize 0.9230    
all_split False
======================Cut inference begins======================
max lb tensor(0.88294578) min lb tensor(-0.07489467)
Number of Verified Splits: 8237 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1373 constraints, 70490 nonzero elements
cuts preparing time: 0.0276
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1402.
#cuts 1-3: 350
#cuts 4-6: 11
#cuts 7-9: 12
#cuts 10-12: 24
#cuts 13-15: 31
#cuts 16-18: 87
#cuts 19-21: 75
#cuts >= 20: 812
BICCOS time: 3.798585891723633 
BICCOS Cumulative time: 13.112900018692017
Preprocessing time: 1.1224820613861084 Inference time: 1.928830862045288 Add cuts time: 0.15425467491149902 Cut analysis time: 0.5930182933807373
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07489 (22), -0.07294 (23), -0.07278 (22), -0.07270 (22), -0.07218 (23), -0.07204 (23), -0.07142 (23), -0.07135 (23), -0.07062 (22), -0.07035 (23), -0.07033 (23), -0.07018 (22), -0.07006 (23), -0.06980 (22), -0.06975 (22), -0.06954 (23), -0.06951 (23), -0.06949 (23), -0.06912 (22), -0.06892 (22), 
Length of domains: 24902
Time: pickout 0.2901    decision 2.0219    set_bounds 2.0065    solve 12.1110    add 0.2569    
Accumulated time: pickout 1.4983    decision 5.6967    set_bounds 6.8776    solve 30.8200    add 3.8213    
Current (lb-rhs): -0.07489467412233353
80288 domains visited
Cumulative time: 62.78102397918701

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 498] [/input-8, 1661] [/input-8, 1610] [/input-8, 1169] [/input-8, 1610] [/input-8, 1661] [/input-8, 1611] [/input-8, 1610] [/input-8, 747] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14189493656158447
10 lb beta sum: 9.612611770629883, worst -0.09428849816322327
Time: prepare 0.9138    bound 11.0481    transfer 0.1703    finalize 0.7728    func 13.1199    
Accumulated time: func 44.0975    prepare 4.8722    bound 35.2732    transfer 0.9009    finalize 1.6958    
all_split False
======================Cut inference begins======================
max lb tensor(1.94632339) min lb tensor(-0.07346302)
Number of Verified Splits: 7600 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1427 constraints, 71552 nonzero elements
cuts preparing time: 0.0276
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1465.
#cuts 1-3: 345
#cuts 4-6: 18
#cuts 7-9: 13
#cuts 10-12: 25
#cuts 13-15: 35
#cuts 16-18: 91
#cuts 19-21: 78
#cuts >= 20: 860
BICCOS time: 3.870824098587036 
BICCOS Cumulative time: 16.983724117279053
Preprocessing time: 1.153916358947754 Inference time: 1.9375410079956055 Add cuts time: 0.17589759826660156 Cut analysis time: 0.6034691333770752
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07346 (23), -0.07204 (23), -0.07135 (23), -0.07033 (23), -0.07013 (23), -0.07006 (23), -0.06954 (23), -0.06951 (23), -0.06932 (24), -0.06884 (24), -0.06863 (24), -0.06852 (23), -0.06851 (23), -0.06839 (23), -0.06837 (23), -0.06835 (23), -0.06805 (23), -0.06793 (23), -0.06793 (23), -0.06762 (22), 
Length of domains: 33686
Time: pickout 0.2932    decision 1.6803    set_bounds 2.0569    solve 13.1266    add 0.3609    
Accumulated time: pickout 1.7915    decision 7.3769    set_bounds 8.9344    solve 43.9466    add 4.1822    
Current (lb-rhs): -0.07346302270889282
105456 domains visited
Cumulative time: 84.34405565261841

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 157] [/input-8, 1324] [/input-8, 1662] [/input-8, 1324] [/input-8, 157] [/input-8, 1324] [/input-8, 1324] [/input-8, 1662] [/input-8, 1324] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1404527723789215
10 lb beta sum: 9.387280464172363, worst -0.09708397090435028
Time: prepare 0.9325    bound 11.5151    transfer 0.1692    finalize 0.8776    func 13.7118    
Accumulated time: func 57.8092    prepare 5.8052    bound 46.7883    transfer 1.0701    finalize 2.5734    
all_split False
======================Cut inference begins======================
max lb tensor(2.34327316) min lb tensor(-0.07135201)
Number of Verified Splits: 7583 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1425 constraints, 70864 nonzero elements
cuts preparing time: 0.0288
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1466.
#cuts 1-3: 344
#cuts 4-6: 23
#cuts 7-9: 15
#cuts 10-12: 27
#cuts 13-15: 38
#cuts 16-18: 93
#cuts 19-21: 84
#cuts >= 20: 842
BICCOS time: 4.041520595550537 
BICCOS Cumulative time: 21.02524471282959
Preprocessing time: 1.1959469318389893 Inference time: 2.0612406730651855 Add cuts time: 0.18113398551940918 Cut analysis time: 0.6031990051269531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07346 (23), -0.07135 (24), -0.07013 (23), -0.06932 (24), -0.06863 (24), -0.06851 (23), -0.06837 (23), -0.06835 (23), -0.06812 (24), -0.06710 (23), -0.06690 (24), -0.06685 (23), -0.06662 (25), -0.06650 (23), -0.06630 (23), -0.06619 (23), -0.06618 (24), -0.06614 (24), -0.06606 (24), -0.06600 (23), 
Length of domains: 42487
Time: pickout 0.3009    decision 1.6712    set_bounds 2.1944    solve 13.7195    add 0.2768    
Accumulated time: pickout 2.0924    decision 9.0481    set_bounds 11.1288    solve 57.6661    add 4.4591    
Current (lb-rhs): -0.07346302270889282
130641 domains visited
Cumulative time: 106.79742217063904

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1662] [/input-8, 497] [/input-8, 1662] [/input-8, 498] [/input, 889] [/input-8, 1610] [/input-8, 1169] [/input-8, 1662] [/input-8, 1661] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14037847518920898
10 lb beta sum: 9.4857177734375, worst -0.10297068953514099
Time: prepare 0.9612    bound 11.4918    transfer 0.1703    finalize 0.3471    func 13.1929    
Accumulated time: func 71.0021    prepare 6.7669    bound 58.2801    transfer 1.2404    finalize 2.9206    
all_split False
======================Cut inference begins======================
max lb tensor(1.87899590) min lb tensor(-0.07023416)
Number of Verified Splits: 7571 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1412 constraints, 70312 nonzero elements
cuts preparing time: 0.0286
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1440.
#cuts 1-3: 341
#cuts 4-6: 10
#cuts 7-9: 15
#cuts 10-12: 32
#cuts 13-15: 39
#cuts 16-18: 98
#cuts 19-21: 82
#cuts >= 20: 823
BICCOS time: 4.135179281234741 
BICCOS Cumulative time: 25.16042399406433
Preprocessing time: 1.8937065601348877 Inference time: 1.4578533172607422 Add cuts time: 0.17528605461120605 Cut analysis time: 0.6083333492279053
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07135 (24), -0.07023 (24), -0.06812 (24), -0.06685 (24), -0.06685 (24), -0.06662 (25), -0.06586 (24), -0.06577 (24), -0.06560 (24), -0.06554 (25), -0.06546 (23), -0.06531 (25), -0.06513 (24), -0.06513 (24), -0.06500 (24), -0.06494 (25), -0.06476 (24), -0.06468 (25), -0.06462 (24), -0.06460 (24), 
Length of domains: 51300
Time: pickout 0.3608    decision 1.7480    set_bounds 2.4637    solve 13.2029    add 0.3064    
Accumulated time: pickout 2.4532    decision 10.7962    set_bounds 13.5925    solve 70.8690    add 4.7655    
Current (lb-rhs): -0.07135200500488281
155838 domains visited
Cumulative time: 129.227792263031

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 748] [/input-8, 1324] [/input-8, 1324] [/input-8, 1662] [/input-8, 497] [/input-8, 747] [/input-8, 497] [/input-8, 748] [/input-8, 497] [/input-8, 1662] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1378694772720337
10 lb beta sum: 9.242781639099121, worst -0.09425394237041473
Time: prepare 0.9400    bound 11.1885    transfer 0.1711    finalize 0.3428    func 13.6712    
Accumulated time: func 84.6733    prepare 7.7074    bound 69.4686    transfer 1.4115    finalize 3.2634    
all_split False
======================Cut inference begins======================
max lb tensor(1.52823591) min lb tensor(-0.06510520)
Number of Verified Splits: 7837 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1421 constraints, 70046 nonzero elements
cuts preparing time: 0.0297
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1460.
#cuts 1-3: 342
#cuts 4-6: 13
#cuts 7-9: 26
#cuts 10-12: 36
#cuts 13-15: 44
#cuts 16-18: 104
#cuts 19-21: 82
#cuts >= 20: 813
BICCOS time: 3.5248334407806396 
BICCOS Cumulative time: 28.68525743484497
Preprocessing time: 1.1628179550170898 Inference time: 1.5446863174438477 Add cuts time: 0.2169935703277588 Cut analysis time: 0.6003355979919434
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07135 (24), -0.07023 (24), -0.06812 (24), -0.06685 (24), -0.06685 (24), -0.06662 (25), -0.06577 (24), -0.06560 (24), -0.06554 (25), -0.06531 (25), -0.06513 (24), -0.06511 (25), -0.06500 (24), -0.06494 (25), -0.06476 (24), -0.06468 (25), -0.06462 (24), -0.06460 (24), -0.06460 (24), -0.06446 (25), 
Length of domains: 59847
Time: pickout 0.3174    decision 2.1632    set_bounds 1.7472    solve 13.6795    add 0.2996    
Accumulated time: pickout 2.7707    decision 12.9594    set_bounds 15.3398    solve 84.5485    add 5.0650    
Current (lb-rhs): -0.07135200500488281
180769 domains visited
Cumulative time: 151.1837863922119

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1662] [/input-8, 497] [/input, 889] [/input-8, 1611] [/input-8, 1662] [/input-8, 1618] [/input-8, 497] [/input-8, 1662] [/input, 889] [/input-8, 1324] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13932563364505768
10 lb beta sum: 9.340616226196289, worst -0.09648284316062927
Time: prepare 0.9757    bound 11.4147    transfer 0.1683    finalize 1.1764    func 13.9531    
Accumulated time: func 98.6264    prepare 8.6835    bound 80.8833    transfer 1.5798    finalize 4.4398    
all_split False
======================Cut inference begins======================
max lb tensor(0.43624175) min lb tensor(-0.07127377)
Number of Verified Splits: 8103 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1423 constraints, 70002 nonzero elements
cuts preparing time: 0.0297
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1485.
#cuts 1-3: 343
#cuts 4-6: 28
#cuts 7-9: 30
#cuts 10-12: 47
#cuts 13-15: 46
#cuts 16-18: 99
#cuts 19-21: 81
#cuts >= 20: 811
BICCOS time: 3.626422882080078 
BICCOS Cumulative time: 32.31168031692505
Preprocessing time: 1.178555965423584 Inference time: 1.6195545196533203 Add cuts time: 0.22342443466186523 Cut analysis time: 0.6048879623413086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07127 (25), -0.07023 (24), -0.06685 (24), -0.06685 (24), -0.06640 (26), -0.06577 (24), -0.06560 (24), -0.06555 (25), -0.06554 (25), -0.06531 (25), -0.06513 (24), -0.06511 (25), -0.06500 (24), -0.06468 (25), -0.06462 (25), -0.06460 (24), -0.06460 (24), -0.06458 (25), -0.06446 (25), -0.06440 (25), 
Length of domains: 68128
Time: pickout 0.3197    decision 2.2273    set_bounds 1.7165    solve 13.9619    add 0.4524    
Accumulated time: pickout 3.0904    decision 15.1867    set_bounds 17.0563    solve 98.5104    add 5.5175    
Current (lb-rhs): -0.07127377390861511
205434 domains visited
Cumulative time: 173.74163722991943

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input-8, 1610] [/input-8, 748] [/input-8, 497] [/input-8, 1610] [/input-8, 497] [/input-8, 747] [/input-8, 497] [/input-8, 1618] [/input-8, 497] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13618667423725128
10 lb beta sum: 9.390480995178223, worst -0.09796492755413055
Time: prepare 0.9967    bound 11.6348    transfer 0.1675    finalize 1.2759    func 14.2982    
Accumulated time: func 112.9246    prepare 9.6805    bound 92.5181    transfer 1.7474    finalize 5.7157    
all_split False
======================Cut inference begins======================
max lb tensor(0.87510586) min lb tensor(-0.06592192)
Number of Verified Splits: 8966 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1431 constraints, 69914 nonzero elements
cuts preparing time: 0.0292
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1490.
#cuts 1-3: 343
#cuts 4-6: 18
#cuts 7-9: 37
#cuts 10-12: 43
#cuts 13-15: 50
#cuts 16-18: 101
#cuts 19-21: 85
#cuts >= 20: 813
BICCOS time: 3.7905659675598145 
BICCOS Cumulative time: 36.10224628448486
Preprocessing time: 1.1768755912780762 Inference time: 1.7594568729400635 Add cuts time: 0.23665595054626465 Cut analysis time: 0.6175775527954102
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07127 (25), -0.07023 (24), -0.06640 (26), -0.06592 (25), -0.06560 (24), -0.06555 (25), -0.06531 (26), -0.06513 (24), -0.06511 (25), -0.06500 (24), -0.06462 (25), -0.06460 (25), -0.06458 (25), -0.06446 (25), -0.06446 (25), -0.06425 (25), -0.06425 (25), -0.06419 (25), -0.06409 (25), -0.06387 (25), 
Length of domains: 75546
Time: pickout 0.3228    decision 2.5196    set_bounds 1.7175    solve 14.3080    add 0.2709    
Accumulated time: pickout 3.4132    decision 17.7063    set_bounds 18.7738    solve 112.8184    add 5.7884    
Current (lb-rhs): -0.07127377390861511
229236 domains visited
Cumulative time: 196.9207627773285

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 497] [/input, 889] [/input-8, 748] [/input-8, 497] [/input-8, 1618] [/input-8, 1610] [/input-8, 1611] [/input-8, 497] [/input-8, 748] [/input, 889] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13673222064971924
10 lb beta sum: 9.234758377075195, worst -0.10012775659561157
Time: prepare 0.9599    bound 11.6231    transfer 0.1682    finalize 1.3526    func 14.3176    
Accumulated time: func 127.2422    prepare 10.6409    bound 104.1412    transfer 1.9155    finalize 7.0683    
all_split False
======================Cut inference begins======================
max lb tensor(1.13128757) min lb tensor(-0.06679158)
Number of Verified Splits: 8737 of 32768
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts: total 1437 constraints, 69735 nonzero elements
cuts preparing time: 0.0298
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1500.
#cuts 1-3: 342
#cuts 4-6: 24
#cuts 7-9: 38
#cuts 10-12: 49
#cuts 13-15: 59
#cuts 16-18: 98
#cuts 19-21: 85
#cuts >= 20: 805
BICCOS time: 3.9204490184783936 
BICCOS Cumulative time: 40.02269530296326
Preprocessing time: 1.241184949874878 Inference time: 1.665977954864502 Add cuts time: 0.4103364944458008 Cut analysis time: 0.6029496192932129
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07127 (25), -0.06679 (25), -0.06640 (26), -0.06638 (25), -0.06592 (25), -0.06560 (25), -0.06555 (25), -0.06531 (26), -0.06496 (25), -0.06462 (25), -0.06460 (25), -0.06458 (25), -0.06446 (25), -0.06446 (25), -0.06425 (25), -0.06419 (25), -0.06409 (25), -0.06386 (25), -0.06382 (25), -0.06378 (25), 
Length of domains: 83193
Time: pickout 0.3379    decision 2.5862    set_bounds 1.7569    solve 14.3263    add 0.2750    
Accumulated time: pickout 3.7511    decision 20.2925    set_bounds 20.5307    solve 127.1447    add 6.0634    
Current (lb-rhs): -0.07127377390861511
253267 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 7
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=172_spec=7_27028986.log
found process for pidx=7
kill process for pidx=7
Result: unknown in 224.1106 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 775] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 775] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 291] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07465267,  0.67120790, -0.69678164, -0.40189314,  0.40541002,
         -1.27040458,  0.91171992,  1.11740494,  0.40299416]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.90053749, -18.83853912, -16.65795326, -15.93625736, -16.87875748,
         -16.65612221, -15.87883949, -18.48574829, -19.30859566, -18.32104874]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255],
         [-17.90053940, -18.83854103, -16.65795326, -15.93625832, -16.87875938,
          -16.65612030, -15.87884331, -18.48575401, -19.30859756, -18.32105255]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.96428108,  0.72169495,  0.94250107, -0.05741501]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0628 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 639] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 639] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 277] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.53353453,  4.77915478, -0.68763804,  0.12715703,  0.16958094,
          0.30826446,  0.61279374,  2.10399413,  3.39013553]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-27.01452446, -31.17614365, -24.06021309, -25.31211662, -23.70052147,
         -25.47224236, -25.36236954, -25.44280624, -27.95291138, -29.38704109]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-26.68732262, -30.89182281, -23.70902252, -25.04217339, -23.84836960,
          -25.24197197, -25.20918465, -25.61320114, -27.58542824, -29.12027931]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.13934708]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0065 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 291, 1, 770] with unstable size 290 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 770] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [290]; unstable size 290; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 290] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 290] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78770733,  1.03243494,  1.96444678,  0.51057148,  1.33818638,
          1.22204256,  0.09967974,  0.93596303, -0.07644725]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.88498878, -31.32757950, -31.15767288, -32.62705231, -31.05282402,
         -32.13772202, -32.09079361, -30.79269218, -31.35886765, -30.31673813]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-29.32188988, -31.04412079, -31.53003311, -32.73807144, -31.28199005,
          -32.20188904, -32.30758286, -30.94975662, -31.54997253, -30.02898026]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.70709038]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1123 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 23th iter
best_l after optimization: 8.505002975463867
alpha/beta optimization time: 0.29772090911865234
initial alpha-crown bounds: tensor([[8.78652096e-01, 1.08035851e+00, 2.04135489e+00, 5.90096474e-01,
         1.42439306e+00, 1.30015945e+00, 2.00366348e-01, 9.89597678e-01,
         2.43186951e-05]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 2.4318695068359375e-05
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
verified with init bound!
Result: safe-incomplete in 0.5593 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [710]; unstable size 710; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 710] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 710] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 710] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 187] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.05221057,  3.04186773, -1.68551707, -1.26099956, -0.22333628,
          0.06938851,  0.46372637,  0.85233903,  2.67835546]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.17542076, -27.76688576, -22.42221451, -23.23637009, -22.93698311,
         -23.34073257, -23.85361671, -24.75134850, -25.51817131, -27.31844711]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521],
         [-24.17541504, -27.76688766, -22.42221451, -23.23637199, -22.93698311,
          -23.34073448, -23.85361481, -24.75134277, -25.51817131, -27.31844521]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.81415749, -0.29938889,  0.10436249]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]],


         [[[0.01111121, 0.07460327, 0.07460327,  ..., 0.09047628,
            0.07460327, 0.05873025],
           [0.07460327, 0.07460327, 0.15396833,  ..., 0.15396833,
            0.15396833, 0.15396833],
           [0.01111121, 0.15396833, 0.75714290,  ..., 0.18571436,
            0.16984135, 0.20158738],
           ...,
           [0.93174607, 0.61428577, 1.37619078,  ..., 1.20158756,
            1.12222254, 1.09047651],
           [0.99523818, 0.50317466, 1.02698421,  ..., 1.28095269,
            1.20158756, 1.15396857],
           [0.93174607, 0.64603180, 0.56666672,  ..., 1.28095269,
            1.21746063, 1.16984153]],

          [[0.30595824, 0.35426742, 0.38647354,  ..., 0.46698883,
            0.46698883, 0.45088577],
           [0.35426742, 0.30595824, 0.33816436,  ..., 0.54750413,
            0.54750413, 0.56360716],
           [0.33816436, 0.40257660, 0.90177143,  ..., 0.57971025,
            0.56360716, 0.59581327],
           ...,
           [0.99838978, 0.62801939, 1.38486338,  ..., 1.33655429,
            1.25603890, 1.20772982],
           [1.07890511, 0.49919492, 1.01449287,  ..., 1.40096653,
            1.33655429, 1.27214205],
           [1.01449287, 0.64412248, 0.54750413,  ..., 1.41706955,
            1.33655429, 1.28824508]],

          [[0.30134949, 0.33133450, 0.34632701,  ..., 0.39130452,
            0.39130452, 0.39130452],
           [0.34632701, 0.28635699, 0.30134949,  ..., 0.46626705,
            0.46626705, 0.48125952],
           [0.28635699, 0.36131951, 0.81109464,  ..., 0.49625200,
            0.48125952, 0.52623707],
           ...,
           [1.08095968, 0.69115460, 1.38081002,  ..., 1.32084000,
            1.27586246, 1.24587750],
           [1.14092970, 0.58620709, 1.03598225,  ..., 1.39580250,
            1.35082495, 1.33583248],
           [1.06596720, 0.73613209, 0.64617711,  ..., 1.42578757,
            1.39580250, 1.35082495]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1012 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-45.55731201, -50.89083099, -42.06116486, -47.85534668, -48.62054062,
         -48.15819550, -49.32711411, -47.74969101, -49.46615982, -52.86323929]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [518]; unstable size 518; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 116, 1, 518] with unstable size 115 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 518] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 518] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [115]; unstable size 115; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 115] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 115] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.03216004, 7.96402073, 5.21769333, 5.94199753, 5.50237179, 6.70993805,
         5.09641933, 6.72968769, 9.94023228]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [770]; unstable size 770; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 770] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 770] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 770] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 149] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.97211361, -0.64362097,  1.92279100, -0.18267345,  2.60485077,
          3.75918460,  1.37062275,  7.21187878,  7.83291054]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-28.28612328, -36.58068848, -28.50667953, -31.36640739, -29.10656929,
         -32.13262939, -33.39686966, -30.94572258, -36.68356323, -37.42233658]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-28.55917931, -36.74974442, -28.28976250, -31.22921181, -28.91490173,
          -31.95692253, -33.20354462, -30.80590248, -36.83339310, -37.55273056],
         [-28.55917931, -36.74974442, -28.28976250, -31.22921181, -28.91490173,
          -31.95692253, -33.20354462, -30.80590248, -36.83339310, -37.55273056]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26941681,  0.35572243]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0777 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-22.31065178, -29.77011871, -24.73226166, -28.38901711, -26.21283531,
         -28.98853493, -28.51242447, -30.11011124, -25.90357208, -30.21725655]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [606]; unstable size 606; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 606] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 606] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 606] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 204] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.38776445, 1.62000203, 4.98641109, 2.86554313, 5.48513222, 5.11340475,
         6.28316832, 2.58398390, 6.84431124]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.24666405, -28.76270676, -23.26070213, -22.05362892, -20.50691032,
         -21.35376549, -23.01077271, -17.43795013, -27.58108521, -26.06879044]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 274, 1, 599] with unstable size 273 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 599] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [273]; unstable size 273; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 273] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 273] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.87904930, 8.74207497, 3.91814995, 3.03320599, 2.01956129, 2.34560633,
         3.41726971, 7.67006636, 6.18134117]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [694]; unstable size 694; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 694] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 694] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 694] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 259] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.01481485,  2.06576967, -0.04681420,  1.60054731, -0.07306194,
          1.60960853,  2.27459693,  1.25393081,  2.08621883]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
         -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.64it/s]100%|██████████| 1/1 [00:00<00:00,  8.63it/s]
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6537 seconds.
lower bounds for all target labels: [0.8786520957946777, 1.0803461074829102, 2.0413548946380615, 0.5900964736938477, 1.4243930578231812, 1.3001594543457031, 0.20036634802818298, 0.9895976781845093, 2.4318695068359375e-05]
Number of cpus: 96  Number of subproblems: 0
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: []
start creating model mps for candidates: []
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-17.10068130, -18.15259743, -14.30123043, -16.10068130, -14.55102730,
          -16.18155861, -13.98995590, -17.08901596, -16.75013351, -17.94500923],
         [-17.10068130, -18.15259743, -14.30123043, -16.10068130, -14.55102730,
          -16.18155861, -13.98995590, -17.08901596, -16.75013351, -17.94500923]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31127453, 0.56107140]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1187 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.356433868408203
alpha/beta optimization time: 1.3967714309692383
initial alpha-crown bounds: tensor([[ 2.11682534,  2.15421104, -0.00883794,  1.63260925, -0.03195739,
          1.64549255,  2.32464290,  1.34506536,  2.17838287]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.031957387924194336
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.7817 seconds.
lower bounds for all target labels: [2.1168253421783447, 2.1542110443115234, -0.008838891983032227, 1.6326075792312622, -0.031957387924194336, 1.6454918384552002, 2.3246428966522217, 1.3450653553009033, 2.1783828735351562]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 4]
start creating model mps for candidates: ['lay/16_2', 'lay/16_4']
parallel mps save finish
Process 56369 received signal 15. Terminate pool <multiprocessing.pool.Pool state=CLOSE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3042767047882
Verifying property 0 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3246428966522217.

Properties batch 1, size 1
Remaining timeout: 198.08187007904053
Verifying property 1 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1783828735351562.

Properties batch 2, size 1
Remaining timeout: 197.92044162750244
Verifying property 2 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1542110443115234.

Properties batch 3, size 1
Remaining timeout: 197.7630171775818
Verifying property 3 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1168253421783447.

Properties batch 4, size 1
Remaining timeout: 197.60796427726746
Verifying property 4 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6454925537109375.

Properties batch 5, size 1
Remaining timeout: 197.45230102539062
Verifying property 5 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.632609248161316.

Properties batch 6, size 1
Remaining timeout: 197.2732481956482
Verifying property 6 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3450653553009033.

Properties batch 7, size 1
Remaining timeout: 197.06365323066711
Verifying property 7 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.00883794]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00883794]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008928775787353516
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 61] 
split level 3: [/input-8, 1627] 
split level 4: [/input-8, 1635] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1954] 
split level 7: [/input-8, 1051] 
split level 8: [/input-8, 1628] 
split level 9: [/input-8, 924] 
split level 10: [/input-8, 1969] 
split level 11: [/input-8, 477] 
split level 12: [/input-12, 71] 
split level 13: [/input-8, 410] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 1961] 
split level 16: [/input-8, 1962] 
split level 17: [/input-8, 418] 
split level 18: [/input-12, 50] 
split level 19: [/input-8, 1380] 
split level 20: [/input-8, 1963] 
split level 21: [/input-8, 1570] 
split level 22: [/input-8, 1589] 
split level 23: [/input-8, 1973] 
split level 24: [/input-8, 306] 
split level 25: [/input-8, 466] 
split level 26: [/input-8, 1246] 
split level 27: [/input-8, 1590] 
split level 28: [/input-8, 300] 
split level 29: [/input-8, 930] 
split level 30: [/input-8, 424] 
split level 31: [/input-8, 1560] 
split level 32: [/input-8, 339] 
split level 33: [/input-8, 1371] 
split level 34: [/input-8, 435] 
split level 35: [/input-8, 307] 
split level 36: [/input-8, 36] 
split level 37: [/input-8, 741] 
split level 38: [/input-8, 161] 
split level 39: [/input-8, 458] 
split level 40: [/input-8, 1290] 
split level 41: [/input-8, 957] 
split level 42: [/input-8, 436] 
split level 43: [/input-8, 995] 
split level 44: [/input-8, 758] 
split level 45: [/input-8, 1598] 
split level 46: [/input-8, 869] 
split level 47: [/input-8, 738] 
split level 48: [/input-8, 408] 
split level 49: [/input-8, 1619] 
split level 50: [/input-8, 281] 
split level 51: [/input-8, 1561] 
split level 52: [/input-8, 150] 
split level 53: [/input-8, 459] 
split level 54: [/input-8, 159] 
split level 55: [/input-8, 149] 
split level 56: [/input-8, 1968] 
split level 57: [/input-8, 276] 
split level 58: [/input-8, 1680] 
split level 59: [/input-8, 625] 
split level 60: [/input-8, 177] 
split level 61: [/input-8, 1674] 
split level 62: [/input-8, 298] 
split level 63: [/input-12, 20] 
split level 64: [/input-8, 342] 
split level 65: [/input-8, 1038] 
split level 66: [/input-8, 243] 
split level 67: [/input-8, 102] 
split level 68: [/input-8, 299] 
split level 69: [/input-8, 349] 
split level 70: [/input-8, 908] 
split level 71: [/input-8, 770] 
split level 72: [/input-8, 1370] 
split level 73: [/input-8, 1638] 
split level 74: [/input-8, 357] 
split level 75: [/input-8, 1515] 
split level 76: [/input-8, 1701] 
split level 77: [/input-8, 1678] 
split level 78: [/input-8, 782] 
split level 79: [/input-8, 285] 
split level 80: [/input-8, 110] 
split level 81: [/input-8, 802] 
split level 82: [/input-8, 769] 
split level 83: [/input-8, 2036] 
split level 84: [/input-8, 771] 
split level 85: [/input-8, 85] 
split level 86: [/input-8, 494] 
split level 87: [/input-8, 244] 
split level 88: [/input-8, 1381] 
split level 89: [/input-8, 1945] 
split level 90: [/input-8, 997] 
split level 91: [/input, 1381] 
split level 92: [/input-8, 773] 
split level 93: [/input-8, 93] 
split level 94: [/input, 2787] 
split level 95: [/input-8, 1199] 
split level 96: [/input, 3314] 
split level 97: [/input-8, 245] 
split level 98: [/input-8, 1034] 
split level 99: [/input-8, 176] 
split level 100: [/input-8, 1210] 
split level 101: [/input-8, 169] 
split level 102: [/input-8, 1060] 
split level 103: [/input-8, 1947] 
split level 104: [/input, 4062] 
split level 105: [/input-8, 827] 
split level 106: [/input, 2804] 
split level 107: [/input, 1455] 
split level 108: [/input-8, 772] 
split level 109: [/input-8, 160] 
split level 110: [/input-8, 1656] 
split level 111: [/input-8, 411] 
split level 112: [/input, 2694] 
split level 113: [/input-8, 1227] 
split level 114: [/input-8, 1081] 
split level 115: [/input-8, 1225] 
split level 116: [/input, 2802] 
split level 117: [/input-8, 801] 
split level 118: [/input-8, 247] 
split level 119: [/input-8, 634] 
split level 120: [/input, 3463] 
split level 121: [/input-8, 246] 
split level 122: [/input-8, 71] 
split level 123: [/input-8, 449] 
split level 124: [/input, 1013] 
split level 125: [/input, 3991] 
split level 126: [/input, 85] 
split level 127: [/input-8, 1698] 
split level 128: [/input-8, 460] 
split level 129: [/input-8, 1937] 
split level 130: [/input-8, 1601] 
split level 131: [/input-8, 144] 
split level 132: [/input, 2941] 
split level 133: [/input-8, 1702] 
split level 134: [/input, 1382] 
split level 135: [/input, 832] 
split level 136: [/input-8, 488] 
split level 137: [/input, 3453] 
split level 138: [/input-8, 97] 
split level 139: [/input-8, 774] 
split level 140: [/input-8, 1609] 
split level 141: [/input-8, 1073] 
split level 142: [/input, 1668] 
split level 143: [/input, 1010] 
split level 144: [/input, 535] 
split level 145: [/input-8, 393] 
split level 146: [/input-8, 404] 
split level 147: [/input-8, 2037] 
split level 148: [/input-8, 1555] 
split level 149: [/input, 1488] 
split level 150: [/input, 2788] 
split level 151: [/input-8, 237] 
split level 152: [/input-8, 987] 
split level 153: [/input, 281] 
split level 154: [/input-8, 910] 
split level 155: [/input, 2012] 
split level 156: [/input-8, 251] 
split level 157: [/input-8, 1230] 
split level 158: [/input, 3234] 
split level 159: [/input, 844] 
split level 160: [/input-8, 1035] 
split level 161: [/input-8, 1688] 
split level 162: [/input, 841] 
split level 163: [/input, 621] 
split level 164: [/input-8, 37] 
split level 165: [/input-8, 1611] 
split level 166: [/input, 2908] 
split level 167: [/input, 3254] 
split level 168: [/input, 1252] 
split level 169: [/input, 610] 
split level 170: [/input, 3264] 
split level 171: [/input, 1305] 
split level 172: [/input, 509] 
split level 173: [/input-8, 1337] 
split level 174: [/input, 910] 
split level 175: [/input-8, 1789] 
split level 176: [/input-8, 451] 
split level 177: [/input, 1197] 
split level 178: [/input, 3049] 
split level 179: [/input, 2073] 
split level 180: [/input-8, 496] 
split level 181: [/input, 2843] 
split level 182: [/input, 857] 
split level 183: [/input-8, 407] 
split level 184: [/input, 1687] 
split level 185: [/input, 2009] 
split level 186: [/input-8, 255] 
split level 187: [/input, 2088] 
split level 188: [/input, 495] 
split level 189: [/input, 1148] 
split level 190: [/input, 2089] 
split level 191: [/input, 732] 
split level 192: [/input-8, 626] 
split level 193: [/input, 2013] 
split level 194: [/input-8, 391] 
split level 195: [/input, 514] 
split level 196: [/input, 3387] 
split level 197: [/input-8, 236] 
split level 198: [/input, 526] 
split level 199: [/input, 1017] 
Time: prepare 0.0061    bound 0.0953    transfer 0.0081    finalize 0.0045    func 0.1140    
Accumulated time: func 0.1691    prepare 0.0166    bound 0.1498    transfer 0.0082    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.19408154) min lb tensor(-0.00876808)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01773238182067871 
BICCOS Cumulative time: 0.01773238182067871
Preprocessing time: 0.012337923049926758 Inference time: 0.003509521484375 Add cuts time: 0.001338958740234375 Cut analysis time: 0.0005459785461425781
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5186    set_bounds 0.0113    solve 0.1141    add 0.0106    
Accumulated time: pickout 0.0004    decision 0.5186    set_bounds 0.0113    solve 0.1141    add 0.0106    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([1.61686886e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([2.42297560e-09]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.03352808952331543

all verified at 0th iter
Time: prepare 0.0003    bound 0.0042    transfer 0.0001    finalize 0.0001    func 0.0048    
Accumulated time: func 0.1739    prepare 0.0169    bound 0.1540    transfer 0.0083    finalize 0.0048    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.0657138824463
Verifying property 8 with 1 instances.
##### Instance 181 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03195739]], device='cuda:0') need to verify.
Model prediction is: tensor([-17.61829376, -18.38642883, -14.96894455, -16.51321602, -15.02400494,
        -16.66117096, -14.13184452, -17.61631203, -17.11466599, -18.21944618],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03195739]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 694
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 257
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 964
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00033736228942871094
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0856    transfer 0.0001    finalize 0.0001    func 0.0860    
Accumulated time: func 0.0860    prepare 0.0002    bound 0.0856    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 50] 
split level 2: [/input-12, 61] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 92] 
split level 6: [/input-8, 1051] 
split level 7: [/input-8, 155] 
split level 8: [/input-12, 71] 
split level 9: [/input-8, 306] 
split level 10: [/input-8, 1570] 
split level 11: [/input-8, 418] 
split level 12: [/input-8, 1370] 
split level 13: [/input-8, 300] 
split level 14: [/input-8, 349] 
split level 15: [/input-8, 410] 
split level 16: [/input-8, 1246] 
split level 17: [/input-8, 924] 
split level 18: [/input-8, 307] 
split level 19: [/input-8, 342] 
split level 20: [/input-8, 1380] 
split level 21: [/input-8, 1371] 
split level 22: [/input-8, 170] 
split level 23: [/input-8, 1680] 
split level 24: [/input-8, 299] 
split level 25: [/input-12, 55] 
split level 26: [/input-8, 149] 
split level 27: [/input-8, 1635] 
split level 28: [/input-8, 741] 
split level 29: [/input-8, 150] 
split level 30: [/input-8, 408] 
split level 31: [/input-8, 357] 
split level 32: [/input-8, 1589] 
split level 33: [/input-8, 1560] 
split level 34: [/input-8, 1381] 
split level 35: [/input-8, 1963] 
split level 36: [/input-8, 869] 
split level 37: [/input-8, 339] 
split level 38: [/input-8, 908] 
split level 39: [/input-8, 1561] 
split level 40: [/input-8, 2036] 
split level 41: [/input-8, 177] 
split level 42: [/input-8, 1210] 
split level 43: [/input-8, 738] 
split level 44: [/input-8, 1590] 
split level 45: [/input-8, 161] 
split level 46: [/input-8, 957] 
split level 47: [/input-8, 1324] 
split level 48: [/input-8, 1065] 
split level 49: [/input-8, 2037] 
split level 50: [/input-8, 1290] 
split level 51: [/input-8, 1515] 
split level 52: [/input-8, 758] 
split level 53: [/input-8, 36] 
split level 54: [/input-8, 424] 
split level 55: [/input-8, 298] 
split level 56: [/input-8, 179] 
split level 57: [/input-8, 1073] 
split level 58: [/input-8, 1962] 
split level 59: [/input-8, 1598] 
split level 60: [/input-8, 770] 
split level 61: [/input-8, 285] 
split level 62: [/input-8, 1674] 
split level 63: [/input-8, 1060] 
split level 64: [/input, 85] 
split level 65: [/input-8, 769] 
split level 66: [/input-8, 254] 
split level 67: [/input-8, 956] 
split level 68: [/input-8, 1332] 
split level 69: [/input-8, 2011] 
split level 70: [/input, 3497] 
split level 71: [/input, 3314] 
split level 72: [/input-8, 251] 
split level 73: [/input, 1381] 
split level 74: [/input-8, 1627] 
split level 75: [/input-8, 1941] 
split level 76: [/input, 2953] 
split level 77: [/input-8, 1688] 
split level 78: [/input-8, 466] 
split level 79: [/input-8, 37] 
split level 80: [/input-8, 995] 
split level 81: [/input, 1382] 
split level 82: [/input-8, 252] 
split level 83: [/input, 2919] 
split level 84: [/input-8, 997] 
split level 85: [/input-8, 1969] 
split level 86: [/input-8, 802] 
split level 87: [/input-8, 1035] 
split level 88: [/input, 3466] 
split level 89: [/input-8, 1081] 
split level 90: [/input, 906] 
split level 91: [/input-8, 245] 
split level 92: [/input, 2787] 
split level 93: [/input, 410] 
split level 94: [/input-8, 243] 
split level 95: [/input-8, 827] 
split level 96: [/input-8, 102] 
split level 97: [/input-8, 1162] 
split level 98: [/input-8, 244] 
split level 99: [/input-8, 773] 
split level 100: [/input, 2802] 
split level 101: [/input-8, 1232] 
split level 102: [/input-8, 1034] 
split level 103: [/input-8, 253] 
split level 104: [/input-8, 1656] 
split level 105: [/input-8, 159] 
split level 106: [/input-8, 281] 
split level 107: [/input-8, 1362] 
split level 108: [/input, 2804] 
split level 109: [/input-8, 169] 
split level 110: [/input-8, 435] 
split level 111: [/input, 2930] 
split level 112: [/input-8, 782] 
split level 113: [/input-8, 771] 
split level 114: [/input-8, 38] 
split level 115: [/input-8, 30] 
split level 116: [/input, 345] 
split level 117: [/input, 2931] 
split level 118: [/input-8, 255] 
split level 119: [/input-8, 246] 
split level 120: [/input, 1687] 
split level 121: [/input, 2954] 
split level 122: [/input, 3387] 
split level 123: [/input, 1013] 
split level 124: [/input-8, 972] 
split level 125: [/input, 857] 
split level 126: [/input, 2904] 
split level 127: [/input, 1406] 
split level 128: [/input-8, 144] 
split level 129: [/input-8, 1961] 
split level 130: [/input, 844] 
split level 131: [/input-8, 1601] 
split level 132: [/input-8, 820] 
split level 133: [/input-8, 1199] 
split level 134: [/input-8, 772] 
split level 135: [/input, 343] 
split level 136: [/input-8, 1968] 
split level 137: [/input-8, 1347] 
split level 138: [/input, 828] 
split level 139: [/input-8, 816] 
split level 140: [/input-8, 176] 
split level 141: [/input, 2028] 
split level 142: [/input, 1252] 
split level 143: [/input-8, 411] 
split level 144: [/input-8, 160] 
split level 145: [/input, 2788] 
split level 146: [/input, 2638] 
split level 147: [/input, 426] 
split level 148: [/input, 281] 
split level 149: [/input, 839] 
split level 150: [/input-8, 1225] 
split level 151: [/input, 104] 
split level 152: [/input, 1197] 
split level 153: [/input, 135] 
split level 154: [/input, 841] 
split level 155: [/input, 2871] 
split level 156: [/input, 2012] 
split level 157: [/input, 2637] 
split level 158: [/input, 2027] 
split level 159: [/input, 716] 
split level 160: [/input, 2013] 
split level 161: [/input, 2941] 
split level 162: [/input, 359] 
split level 163: [/input, 495] 
split level 164: [/input, 2344] 
split level 165: [/input, 2884] 
split level 166: [/input-8, 1787] 
split level 167: [/input, 1305] 
split level 168: [/input, 812] 
split level 169: [/input, 3496] 
split level 170: [/input, 732] 
split level 171: [/input, 791] 
split level 172: [/input, 921] 
split level 173: [/input-8, 801] 
split level 174: [/input-8, 963] 
split level 175: [/input, 838] 
split level 176: [/input, 837] 
split level 177: [/input, 3373] 
split level 178: [/input, 509] 
split level 179: [/input, 3528] 
split level 180: [/input, 789] 
split level 181: [/input, 792] 
split level 182: [/input, 811] 
split level 183: [/input, 3234] 
split level 184: [/input-8, 407] 
split level 185: [/input, 1521] 
split level 186: [/input, 1300] 
split level 187: [/input, 2089] 
split level 188: [/input, 325] 
split level 189: [/input-8, 71] 
split level 190: [/input, 2088] 
split level 191: [/input, 163] 
split level 192: [/input, 621] 
split level 193: [/input, 3197] 
split level 194: [/input, 938] 
split level 195: [/input, 2085] 
split level 196: [/input, 1317] 
split level 197: [/input, 2073] 
split level 198: [/input, 3093] 
split level 199: [/input, 2086] 
Time: prepare 0.0060    bound 0.0937    transfer 0.0034    finalize 0.0044    func 0.1076    
Accumulated time: func 0.1936    prepare 0.0162    bound 0.1792    transfer 0.0035    finalize 0.0045    
all_split False
======================Cut inference begins======================
max lb tensor(0.36970568) min lb tensor(-0.03189564)
Number of Verified Splits: 18 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013160943984985352 
BICCOS Cumulative time: 0.013160943984985352
Preprocessing time: 0.01116490364074707 Inference time: 0.0007925033569335938 Add cuts time: 0.00026297569274902344 Cut analysis time: 0.0009405612945556641
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5156    set_bounds 0.0089    solve 0.1077    add 0.0111    
Accumulated time: pickout 0.0003    decision 0.5156    set_bounds 0.0089    solve 0.1077    add 0.0111    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([-1.]), tensor([0]), tensor([1.63023647e+30]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([1.63023647e+30]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.002167940139770508

all verified at 1th iter
Time: prepare 0.0004    bound 0.0136    transfer 0.0001    finalize 0.0002    func 0.0144    
Accumulated time: func 0.2079    prepare 0.0166    bound 0.1928    transfer 0.0037    finalize 0.0047    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 5.5385 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-39.90199280, -44.40210342, -40.76707840, -43.34727097, -43.50157547,
         -44.47279358, -43.63641739, -44.64598465, -42.91106033, -44.25598907]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [505]; unstable size 505; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 505] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 505] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 505] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 148] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.55335212, 0.12430644, 2.72152352, 3.00824618, 3.66845274, 2.93544865,
         3.93169498, 2.25763488, 3.53325510]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0764 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 507, 1, 818] with unstable size 506 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 29, 1, 818] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [506]; unstable size 506; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 29, 1, 506] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 506] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09171438,  3.97727156, -0.48304790,  0.36927599,  0.67224574,
         -1.08889961,  1.76183915,  2.47835565,  4.03331900]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.65114021, -23.35434914, -17.16299438, -18.00729561, -16.22119331,
         -18.46559906, -16.77936554, -19.72109604, -21.88067436, -23.28927422]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.49226189, -24.11579704, -17.95343971, -18.81316757, -17.24596596,
          -19.31156349, -17.23511314, -20.87609863, -22.68005943, -24.09088707],
         [-21.49226189, -24.11579704, -17.95343971, -18.81316757, -17.24596596,
          -19.31156349, -17.23511314, -20.87609863, -22.68005943, -24.09088707]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70747375, -0.01085281]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0719 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [585]; unstable size 585; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 585] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 585] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 585] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 203] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81747293,  0.87446851,  3.82560682,  4.56164408,  3.79659224,
          5.13660049,  6.65209579,  3.81942296, -1.01505280]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.96131706, -20.58467484, -24.37945938, -24.98764610, -24.46944046,
         -25.62986183, -27.33307266, -24.34143448, -19.32966995, -19.06360817]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.03406334, -20.94075012, -24.42977524, -25.05561638, -24.49388504,
          -25.73678398, -27.41883087, -24.54652786, -19.08336639, -19.60690880]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52354240]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 234, 1, 650] with unstable size 233 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 650] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [233]; unstable size 233; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 233] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 233] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.41752005,  0.11600959,  0.06584787,  0.44963455, -0.42950106,
          0.86466193, -0.55640650,  0.24044323,  2.07411814]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
         -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.75it/s]100%|██████████| 1/1 [00:00<00:00,  8.75it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.85554981, -12.92671013, -13.33337688, -13.57446003, -12.90406990,
          -14.12642193, -12.39564514, -13.78078556, -15.48109055, -12.06949711],
         [-15.85554981, -12.92671013, -13.33337688, -13.57446003, -12.90406990,
          -14.12642193, -12.39564514, -13.78078556, -15.48109055, -12.06949711]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.83457279, 0.32614803]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1171 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.90280818939209
alpha/beta optimization time: 1.221240758895874
initial alpha-crown bounds: tensor([[ 2.50665379,  0.15565354,  0.15051413,  0.50773668, -0.35287666,
          0.92790413, -0.47352886,  0.32139492,  2.15935659]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4735288619995117
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6610 seconds.
lower bounds for all target labels: [2.50665283203125, 0.15565460920333862, 0.1505146026611328, 0.5077357292175293, -0.3528766632080078, 0.9279026985168457, -0.4735288619995117, 0.3213934898376465, 2.159355640411377]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [4, 6]
start creating model mps for candidates: ['lay/16_4', 'lay/16_6']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=4_27052085.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=4_27052085.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 57778 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 57781 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.50711297988892
Verifying property 0 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5066537857055664.

Properties batch 1, size 1
Remaining timeout: 197.9979703426361
Verifying property 1 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1593565940856934.

Properties batch 2, size 1
Remaining timeout: 197.89356017112732
Verifying property 2 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9279041290283203.

Properties batch 3, size 1
Remaining timeout: 197.79024004936218
Verifying property 3 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5077366828918457.

Properties batch 4, size 1
Remaining timeout: 197.68578267097473
Verifying property 4 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3213949203491211.

Properties batch 5, size 1
Remaining timeout: 197.58206915855408
Verifying property 5 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.15565353631973267.

Properties batch 6, size 1
Remaining timeout: 197.47677087783813
Verifying property 6 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.1505141258239746.

Properties batch 7, size 1
Remaining timeout: 197.37120628356934
Verifying property 7 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35287666]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35287666]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009438991546630859
======================Cut verification ends======================
Time: prepare 0.0003    bound 0.1077    transfer 0.0001    finalize 0.0002    func 0.1083    
Accumulated time: func 0.1083    prepare 0.0003    bound 0.1077    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 13] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 29] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 34] 
split level 11: [/input-12, 12] 
split level 12: [/input-8, 1690] 
split level 13: [/input-12, 64] 
split level 14: [/input-12, 55] 
split level 15: [/input-8, 923] 
split level 16: [/input-8, 913] 
split level 17: [/input-8, 820] 
split level 18: [/input-8, 1693] 
split level 19: [/input-8, 1674] 
split level 20: [/input-8, 915] 
split level 21: [/input-8, 1966] 
split level 22: [/input-8, 1698] 
split level 23: [/input-8, 1714] 
split level 24: [/input-8, 336] 
split level 25: [/input-8, 249] 
split level 26: [/input-8, 240] 
split level 27: [/input-8, 930] 
split level 28: [/input, 3571] 
split level 29: [/input-8, 1323] 
split level 30: [/input-8, 1705] 
split level 31: [/input-8, 1934] 
split level 32: [/input-8, 1718] 
split level 33: [/input-8, 1713] 
split level 34: [/input-8, 1932] 
split level 35: [/input-8, 742] 
split level 36: [/input-8, 1676] 
split level 37: [/input-8, 250] 
split level 38: [/input-8, 1406] 
split level 39: [/input-8, 916] 
split level 40: [/input-8, 1951] 
split level 41: [/input-8, 242] 
split level 42: [/input-8, 1040] 
split level 43: [/input, 3572] 
split level 44: [/input-8, 305] 
split level 45: [/input-8, 239] 
split level 46: [/input-8, 750] 
split level 47: [/input-8, 300] 
split level 48: [/input, 2836] 
split level 49: [/input-8, 1704] 
split level 50: [/input-8, 1483] 
split level 51: [/input-8, 757] 
split level 52: [/input-8, 186] 
split level 53: [/input-8, 55] 
split level 54: [/input, 328] 
split level 55: [/input, 2167] 
split level 56: [/input, 2013] 
split level 57: [/input-8, 41] 
split level 58: [/input, 647] 
split level 59: [/input, 648] 
split level 60: [/input-8, 254] 
split level 61: [/input-8, 1954] 
split level 62: [/input, 2403] 
split level 63: [/input, 291] 
split level 64: [/input, 2787] 
split level 65: [/input, 1019] 
split level 66: [/input, 2004] 
split level 67: [/input, 2425] 
split level 68: [/input, 3794] 
split level 69: [/input, 3418] 
split level 70: [/input, 2340] 
split level 71: [/input-8, 331] 
split level 72: [/input, 343] 
split level 73: [/input-8, 2003] 
split level 74: [/input-8, 1634] 
split level 75: [/input, 2392] 
split level 76: [/input, 2007] 
split level 77: [/input, 1556] 
split level 78: [/input, 2933] 
split level 79: [/input-8, 581] 
split level 80: [/input, 1015] 
split level 81: [/input-8, 734] 
split level 82: [/input, 1350] 
split level 83: [/input, 856] 
split level 84: [/input-8, 398] 
split level 85: [/input-8, 1325] 
split level 86: [/input-8, 723] 
split level 87: [/input, 487] 
split level 88: [/input-8, 487] 
split level 89: [/input, 1013] 
split level 90: [/input, 490] 
split level 91: [/input-8, 479] 
split level 92: [/input, 3433] 
split level 93: [/input, 2835] 
split level 94: [/input, 2137] 
split level 95: [/input, 2552] 
split level 96: [/input, 2021] 
split level 97: [/input, 2002] 
split level 98: [/input-8, 246] 
split level 99: [/input, 2752] 
split level 100: [/input, 1020] 
split level 101: [/input, 312] 
split level 102: [/input, 2020] 
split level 103: [/input, 2556] 
split level 104: [/input, 2199] 
split level 105: [/input, 2006] 
split level 106: [/input, 2375] 
split level 107: [/input, 2010] 
split level 108: [/input, 2457] 
split level 109: [/input-8, 47] 
split level 110: [/input, 2949] 
split level 111: [/input, 3738] 
split level 112: [/input, 3481] 
split level 113: [/input-8, 765] 
split level 114: [/input, 83] 
split level 115: [/input, 2284] 
split level 116: [/input-8, 132] 
split level 117: [/input, 2339] 
split level 118: [/input-8, 2001] 
split level 119: [/input-8, 1311] 
split level 120: [/input, 2008] 
split level 121: [/input-8, 1245] 
split level 122: [/input, 2003] 
split level 123: [/input-8, 1383] 
split level 124: [/input-8, 1403] 
split level 125: [/input, 3384] 
split level 126: [/input, 2300] 
split level 127: [/input, 2768] 
split level 128: [/input, 3280] 
split level 129: [/input, 2553] 
split level 130: [/input, 2357] 
split level 131: [/input-8, 1646] 
split level 132: [/input, 3419] 
split level 133: [/input, 2409] 
split level 134: [/input, 327] 
split level 135: [/input, 486] 
split level 136: [/input, 3563] 
split level 137: [/input-8, 238] 
split level 138: [/input, 427] 
split level 139: [/input, 3788] 
split level 140: [/input, 348] 
split level 141: [/input, 1973] 
split level 142: [/input-8, 1204] 
split level 143: [/input, 3452] 
split level 144: [/input, 65] 
split level 145: [/input, 1348] 
split level 146: [/input, 2281] 
split level 147: [/input, 733] 
split level 148: [/input, 2147] 
split level 149: [/input, 817] 
split level 150: [/input, 2395] 
split level 151: [/input, 3300] 
split level 152: [/input, 701] 
split level 153: [/input, 858] 
split level 154: [/input, 396] 
split level 155: [/input, 2180] 
split level 156: [/input, 1138] 
split level 157: [/input, 2341] 
split level 158: [/input, 791] 
split level 159: [/input, 2551] 
split level 160: [/input, 2385] 
split level 161: [/input, 645] 
split level 162: [/input, 3785] 
split level 163: [/input, 2204] 
split level 164: [/input, 1851] 
split level 165: [/input, 2558] 
split level 166: [/input, 840] 
split level 167: [/input, 2882] 
split level 168: [/input, 824] 
split level 169: [/input, 2098] 
split level 170: [/input, 2878] 
split level 171: [/input-8, 1589] 
split level 172: [/input-8, 195] 
split level 173: [/input, 2087] 
split level 174: [/input, 859] 
split level 175: [/input, 2901] 
split level 176: [/input, 739] 
split level 177: [/input-8, 495] 
split level 178: [/input, 3264] 
split level 179: [/input, 3279] 
split level 180: [/input, 2298] 
split level 181: [/input, 651] 
split level 182: [/input, 2400] 
split level 183: [/input, 813] 
split level 184: [/input, 2417] 
split level 185: [/input, 2472] 
split level 186: [/input, 2297] 
split level 187: [/input-8, 1385] 
split level 188: [/input, 68] 
split level 189: [/input, 2277] 
split level 190: [/input, 3972] 
split level 191: [/input, 1003] 
split level 192: [/input, 2291] 
split level 193: [/input, 1251] 
split level 194: [/input, 2840] 
split level 195: [/input, 2302] 
split level 196: [/input, 2469] 
split level 197: [/input, 2849] 
split level 198: [/input, 3096] 
split level 199: [/input, 2912] 
Time: prepare 0.0062    bound 0.0995    transfer 0.0072    finalize 0.0048    func 0.1177    
Accumulated time: func 0.2260    prepare 0.0170    bound 0.2071    transfer 0.0073    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.30284265) min lb tensor(-0.35273838)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.014060735702514648 
BICCOS Cumulative time: 0.014060735702514648
Preprocessing time: 0.012691736221313477 Inference time: 0.0001952648162841797 Add cuts time: 9.560585021972656e-05 Cut analysis time: 0.0010781288146972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33612 (1), -0.33607 (1), -0.33555 (1), -0.33517 (1), -0.33510 (1), -0.33379 (1), -0.33347 (1), -0.33340 (1), -0.33113 (1), -0.33033 (1), -0.33020 (1), -0.33011 (1), -0.33010 (1), -0.32917 (1), -0.32910 (1), -0.32842 (1), -0.32837 (1), -0.32833 (1), -0.32716 (1), -0.32651 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5473    set_bounds 0.1505    solve 0.1178    add 0.2203    
Accumulated time: pickout 0.0004    decision 0.5473    set_bounds 0.1505    solve 0.1178    add 0.2203    
Current (lb-rhs): -0.3361172676086426
50 domains visited
Cumulative time: 1.1743366718292236

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 13] [/input-12, 13] [/input-12, 46] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 46] [/input-12, 4] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28235960006713867
10 lb beta sum: 0.5416095852851868, worst -0.26552802324295044
Time: prepare 0.0072    bound 0.1208    transfer 0.0010    finalize 0.0027    func 0.1344    
Accumulated time: func 0.3603    prepare 0.0245    bound 0.3279    transfer 0.0083    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.22609663) min lb tensor(-0.26537430)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.018305063247680664 
BICCOS Cumulative time: 0.03236579895019531
Preprocessing time: 0.013226747512817383 Inference time: 0.002618074417114258 Add cuts time: 0.0017287731170654297 Cut analysis time: 0.0007314682006835938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11972 (2), -0.11905 (2), -0.11859 (2), -0.11695 (2), -0.11494 (2), -0.11385 (2), -0.11174 (2), -0.10984 (2), -0.10833 (2), -0.10380 (2), -0.10367 (2), -0.10297 (2), -0.10167 (2), -0.09745 (2), -0.09689 (2), -0.09684 (2), -0.09454 (2), -0.09131 (2), -0.09105 (2), -0.09094 (2), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0424    set_bounds 0.0137    solve 0.1344    add 0.3114    
Accumulated time: pickout 0.0086    decision 0.5897    set_bounds 0.1643    solve 0.2523    add 0.5317    
Current (lb-rhs): -0.11971819400787354
100 domains visited
Cumulative time: 1.7098071575164795

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] [/input-12, 13] [/input-12, 69] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 1: [/input-12, 4] [/input-12, 69] [/input-12, 4] [/input-12, 69] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 69] [/input-12, 69] [/input-12, 2] [/input-12, 4] 
split level 3: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08434772491455078
10 lb beta sum: 0.5136250257492065, worst -0.017876267433166504
Time: prepare 0.0066    bound 0.1313    transfer 0.0028    finalize 0.0031    func 0.1475    
Accumulated time: func 0.5079    prepare 0.0315    bound 0.4591    transfer 0.0110    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.29321611) min lb tensor(-0.01520264)
Number of Verified Splits: 395 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=4_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.043966054916381836 
BICCOS Cumulative time: 0.07633185386657715
Preprocessing time: 0.01309657096862793 Inference time: 0.020305633544921875 Add cuts time: 0.008545398712158203 Cut analysis time: 0.002018451690673828
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0076    decision 0.0231    set_bounds 0.0206    solve 0.1477    add 0.0200    
Accumulated time: pickout 0.0161    decision 0.6127    set_bounds 0.1849    solve 0.3999    add 0.5517    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([6.47203291e-10, 1.35585681e-01, 8.94026309e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13, 46]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.47203291e-10, 1.35585681e-01, 1.68637946e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2, 13]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.47203291e-10, 2.34068438e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.00123868, 0.10608713, 0.19830815]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.00123868, 0.10608713, 0.21993797]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.00123868, 0.17810147, 0.09954612]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 2,  4, 13]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.00123868, 0.17810147, 0.22237031]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06004142761230469

all verified at 2th iter
Time: prepare 0.0004    bound 0.0155    transfer 0.0003    finalize 0.0002    func 0.0165    
Accumulated time: func 0.5243    prepare 0.0319    bound 0.4746    transfer 0.0113    finalize 0.0110    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=4_27052085.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=4_27052085.log

Properties batch 8, size 1
Remaining timeout: 195.12715816497803
Verifying property 8 with 1 instances.
##### Instance 185 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.47352886]], device='cuda:0') need to verify.
Model prediction is: tensor([-16.26067162, -13.01693153, -13.98059750, -14.13839722, -13.50657654,
        -14.73349571, -13.24168968, -14.22063255, -15.82023048, -12.07003784],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47352886]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 650
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 24
-----------------
# of unstable neurons: 899
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
Cut time: 0.0008742809295654297
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0511    transfer 0.0001    finalize 0.0001    func 0.0516    
Accumulated time: func 0.0516    prepare 0.0002    bound 0.0511    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 64] 
split level 1: [/input-12, 0] 
split level 2: [/input-12, 83] 
split level 3: [/input-12, 38] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 13] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 46] 
split level 9: [/input-12, 12] 
split level 10: [/input-12, 58] 
split level 11: [/input-12, 90] 
split level 12: [/input-12, 69] 
split level 13: [/input-8, 1690] 
split level 14: [/input-8, 820] 
split level 15: [/input-8, 1966] 
split level 16: [/input-12, 79] 
split level 17: [/input-8, 1713] 
split level 18: [/input-12, 55] 
split level 19: [/input-8, 1693] 
split level 20: [/input-8, 1974] 
split level 21: [/input-8, 1676] 
split level 22: [/input-12, 6] 
split level 23: [/input-12, 34] 
split level 24: [/input-8, 1714] 
split level 25: [/input-8, 1698] 
split level 26: [/input-8, 1325] 
split level 27: [/input-8, 1718] 
split level 28: [/input-8, 1674] 
split level 29: [/input-8, 1687] 
split level 30: [/input-8, 1932] 
split level 31: [/input-8, 1951] 
split level 32: [/input-8, 1705] 
split level 33: [/input-8, 1704] 
split level 34: [/input-8, 601] 
split level 35: [/input-8, 1954] 
split level 36: [/input-8, 913] 
split level 37: [/input-8, 1323] 
split level 38: [/input-8, 923] 
split level 39: [/input, 2167] 
split level 40: [/input-8, 930] 
split level 41: [/input-8, 2003] 
split level 42: [/input-8, 1406] 
split level 43: [/input-8, 1934] 
split level 44: [/input-8, 588] 
split level 45: [/input, 2392] 
split level 46: [/input, 1350] 
split level 47: [/input-8, 621] 
split level 48: [/input-8, 750] 
split level 49: [/input, 2425] 
split level 50: [/input, 856] 
split level 51: [/input, 328] 
split level 52: [/input, 2137] 
split level 53: [/input-8, 1646] 
split level 54: [/input, 3433] 
split level 55: [/input, 872] 
split level 56: [/input, 3418] 
split level 57: [/input-8, 581] 
split level 58: [/input-8, 915] 
split level 59: [/input, 3571] 
split level 60: [/input, 3572] 
split level 61: [/input, 2199] 
split level 62: [/input, 1013] 
split level 63: [/input, 1661] 
split level 64: [/input-8, 595] 
split level 65: [/input-8, 742] 
split level 66: [/input, 2403] 
split level 67: [/input, 2552] 
split level 68: [/input-8, 336] 
split level 69: [/input-8, 1403] 
split level 70: [/input, 3452] 
split level 71: [/input-8, 331] 
split level 72: [/input, 3794] 
split level 73: [/input, 1020] 
split level 74: [/input, 857] 
split level 75: [/input-8, 1311] 
split level 76: [/input, 312] 
split level 77: [/input, 3419] 
split level 78: [/input, 3512] 
split level 79: [/input, 3384] 
split level 80: [/input-8, 757] 
split level 81: [/input-8, 1191] 
split level 82: [/input-8, 240] 
split level 83: [/input, 1019] 
split level 84: [/input-8, 879] 
split level 85: [/input, 2375] 
split level 86: [/input, 2004] 
split level 87: [/input, 2457] 
split level 88: [/input-8, 249] 
split level 89: [/input, 967] 
split level 90: [/input, 1348] 
split level 91: [/input, 2398] 
split level 92: [/input, 2395] 
split level 93: [/input, 2340] 
split level 94: [/input-8, 892] 
split level 95: [/input, 3496] 
split level 96: [/input, 2472] 
split level 97: [/input, 3785] 
split level 98: [/input-8, 250] 
split level 99: [/input, 348] 
split level 100: [/input, 2357] 
split level 101: [/input, 2204] 
split level 102: [/input, 2409] 
split level 103: [/input-8, 186] 
split level 104: [/input, 3563] 
split level 105: [/input, 2121] 
split level 106: [/input-8, 1720] 
split level 107: [/input, 2553] 
split level 108: [/input-8, 254] 
split level 109: [/input-8, 239] 
split level 110: [/input, 3788] 
split level 111: [/input, 2087] 
split level 112: [/input, 2327] 
split level 113: [/input, 2519] 
split level 114: [/input, 3278] 
split level 115: [/input, 2281] 
split level 116: [/input, 2275] 
split level 117: [/input, 858] 
split level 118: [/input, 1947] 
split level 119: [/input, 2284] 
split level 120: [/input, 2341] 
split level 121: [/input, 2836] 
split level 122: [/input, 487] 
split level 123: [/input, 2147] 
split level 124: [/input, 2020] 
split level 125: [/input, 824] 
split level 126: [/input, 2532] 
split level 127: [/input, 1466] 
split level 128: [/input, 2469] 
split level 129: [/input, 2949] 
split level 130: [/input, 2344] 
split level 131: [/input, 2558] 
split level 132: [/input, 2377] 
split level 133: [/input, 396] 
split level 134: [/input, 330] 
split level 135: [/input, 2933] 
split level 136: [/input, 951] 
split level 137: [/input, 327] 
split level 138: [/input, 3163] 
split level 139: [/input, 3804] 
split level 140: [/input, 2339] 
split level 141: [/input-8, 55] 
split level 142: [/input-8, 765] 
split level 143: [/input-8, 1634] 
split level 144: [/input, 840] 
split level 145: [/input, 2277] 
split level 146: [/input, 2007] 
split level 147: [/input, 486] 
split level 148: [/input, 2397] 
split level 149: [/input, 1901] 
split level 150: [/input, 1946] 
split level 151: [/input, 2180] 
split level 152: [/input, 2006] 
split level 153: [/input, 2473] 
split level 154: [/input, 1948] 
split level 155: [/input, 952] 
split level 156: [/input, 2300] 
split level 157: [/input, 3738] 
split level 158: [/input-8, 1285] 
split level 159: [/input, 859] 
split level 160: [/input, 2486] 
split level 161: [/input, 2298] 
split level 162: [/input, 739] 
split level 163: [/input-8, 479] 
split level 164: [/input, 1945] 
split level 165: [/input, 1902] 
split level 166: [/input, 2466] 
split level 167: [/input-8, 894] 
split level 168: [/input, 83] 
split level 169: [/input, 733] 
split level 170: [/input, 2122] 
split level 171: [/input, 2835] 
split level 172: [/input, 2291] 
split level 173: [/input, 2003] 
split level 174: [/input, 2302] 
split level 175: [/input-8, 1612] 
split level 176: [/input, 418] 
split level 177: [/input, 2211] 
split level 178: [/input-8, 246] 
split level 179: [/input, 3336] 
split level 180: [/input, 721] 
split level 181: [/input-8, 579] 
split level 182: [/input, 1894] 
split level 183: [/input-8, 495] 
split level 184: [/input, 3554] 
split level 185: [/input, 3279] 
split level 186: [/input, 2297] 
split level 187: [/input, 1893] 
split level 188: [/input, 3259] 
split level 189: [/input, 2008] 
split level 190: [/input, 2551] 
split level 191: [/input-8, 1924] 
split level 192: [/input, 2190] 
split level 193: [/input, 2098] 
split level 194: [/input, 2252] 
split level 195: [/input, 1958] 
split level 196: [/input, 2508] 
split level 197: [/input, 2501] 
split level 198: [/input, 2627] 
split level 199: [/input, 1895] 
Time: prepare 0.0061    bound 0.1025    transfer 0.0010    finalize 0.0032    func 0.1129    
Accumulated time: func 0.1645    prepare 0.0165    bound 0.1536    transfer 0.0011    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.43399239) min lb tensor(-0.47341490)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.013672351837158203 
BICCOS Cumulative time: 0.013672351837158203
Preprocessing time: 0.011015892028808594 Inference time: 0.0002789497375488281 Add cuts time: 0.00013947486877441406 Cut analysis time: 0.002238035202026367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45865 (1), -0.45846 (1), -0.45832 (1), -0.45812 (1), -0.45785 (1), -0.45762 (1), -0.45733 (1), -0.45583 (1), -0.45583 (1), -0.45566 (1), -0.45555 (1), -0.45477 (1), -0.45426 (1), -0.45221 (1), -0.45212 (1), -0.45116 (1), -0.44992 (1), -0.44945 (1), -0.44744 (1), -0.44692 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5233    set_bounds 0.0097    solve 0.1131    add 0.2083    
Accumulated time: pickout 0.0003    decision 0.5233    set_bounds 0.0097    solve 0.1131    add 0.2083    
Current (lb-rhs): -0.4586501121520996
50 domains visited
Cumulative time: 0.9431424140930176

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 3: [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 2] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4105997085571289
10 lb beta sum: 1.046152949333191, worst -0.39881110191345215
Time: prepare 0.0072    bound 0.1253    transfer 0.0011    finalize 0.0035    func 0.1398    
Accumulated time: func 0.3043    prepare 0.0240    bound 0.2789    transfer 0.0022    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.28392535) min lb tensor(-0.39856303)
Number of Verified Splits: 107 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.022668838500976562 
BICCOS Cumulative time: 0.036341190338134766
Preprocessing time: 0.013942480087280273 Inference time: 0.00487971305847168 Add cuts time: 0.002451181411743164 Cut analysis time: 0.0013954639434814453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20267 (2), -0.20267 (2), -0.20265 (2), -0.20169 (2), -0.19615 (2), -0.19583 (2), -0.19505 (2), -0.19374 (2), -0.19327 (2), -0.18703 (2), -0.18630 (2), -0.18154 (2), -0.18105 (2), -0.17890 (2), -0.17831 (2), -0.17828 (2), -0.17759 (2), -0.17727 (2), -0.17629 (2), -0.17228 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0211    set_bounds 0.0146    solve 0.1399    add 0.2404    
Accumulated time: pickout 0.0083    decision 0.5444    set_bounds 0.0243    solve 0.2530    add 0.4487    
Current (lb-rhs): -0.20267319679260254
100 domains visited
Cumulative time: 1.3970203399658203

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 38] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 38] [/input-12, 38] [/input-12, 13] [/input-12, 13] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 13] 
split level 3: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21434497833251953
10 lb beta sum: 1.212538242340088, worst -0.20120549201965332
Time: prepare 0.0065    bound 0.1222    transfer 0.0026    finalize 0.0032    func 0.1372    
Accumulated time: func 0.4415    prepare 0.0308    bound 0.4012    transfer 0.0048    finalize 0.0100    
all_split False
======================Cut inference begins======================
max lb tensor(0.36011356) min lb tensor(-0.19960821)
Number of Verified Splits: 228 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.02916097640991211 
BICCOS Cumulative time: 0.06550216674804688
Preprocessing time: 0.012189388275146484 Inference time: 0.011150121688842773 Add cuts time: 0.004427671432495117 Cut analysis time: 0.0013937950134277344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12969 (3), -0.12718 (3), -0.12715 (3), -0.12033 (3), -0.12027 (3), -0.11952 (3), -0.11462 (3), -0.11456 (3), -0.10395 (3), -0.10367 (3), -0.10366 (3), -0.10349 (3), -0.09986 (3), -0.09981 (3), -0.09956 (3), -0.09295 (3), -0.09294 (3), -0.08356 (3), -0.08336 (3), -0.08141 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0209    set_bounds 0.0175    solve 0.1374    add 0.2553    
Accumulated time: pickout 0.0161    decision 0.5653    set_bounds 0.0417    solve 0.3903    add 0.7040    
Current (lb-rhs): -0.12968742847442627
150 domains visited
Cumulative time: 1.872783899307251

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 0] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 64] [/input-12, 0] [/input-12, 0] [/input-12, 0] 
split level 2: [/input-12, 4] [/input-12, 2] [/input-12, 4] [/input-12, 13] [/input-12, 2] [/input-12, 4] [/input-12, 4] [/input-12, 13] [/input-12, 4] [/input-12, 4] 
split level 3: [/input-12, 13] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 90] [/input-12, 13] [/input-12, 13] [/input-12, 2] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18017578125
10 lb beta sum: 1.6400747299194336, worst -0.09964108467102051
Time: prepare 0.0065    bound 0.1368    transfer 0.0010    finalize 0.0022    func 0.1492    
Accumulated time: func 0.5907    prepare 0.0376    bound 0.5380    transfer 0.0058    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.48241270) min lb tensor(-0.09790492)
Number of Verified Splits: 361 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.04149031639099121 
BICCOS Cumulative time: 0.10699248313903809
Preprocessing time: 0.012011289596557617 Inference time: 0.019016265869140625 Add cuts time: 0.008711814880371094 Cut analysis time: 0.001750946044921875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0083    decision 0.0203    set_bounds 0.0164    solve 0.1493    add 0.0250    
Accumulated time: pickout 0.0244    decision 0.5856    set_bounds 0.0581    solve 0.5396    add 0.7291    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.04897085e-09, 6.02408767e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 64]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.04897085e-09, 6.07532114e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([0.00033291, 0.16614847, 0.11806349, 0.18563442]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00033291, 0.16614847, 0.11806349, 0.08129339]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.00033291, 0.16614847, 0.13950829, 0.18498735]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38,  2, 64]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00033291, 0.16614847, 0.13950829, 0.08435898]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.00033291, 0.22219031, 0.22738950]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12, 38, 64]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.00033291, 0.22219031, 0.07561849]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40236902236938477
10 lb beta sum: 1.4212713241577148, worst -0.16862893104553223
Time: prepare 0.0005    bound 0.1305    transfer 0.0003    finalize 0.0002    func 0.1315    
Accumulated time: func 0.7223    prepare 0.0380    bound 0.6685    transfer 0.0061    finalize 0.0124    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 0] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 4] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 2.5855064392089844, worst 0.01379704475402832

all verified at 0th iter
Time: prepare 0.0097    bound 0.0061    transfer 0.0042    finalize 0.0018    func 0.0236    
Accumulated time: func 0.7459    prepare 0.0482    bound 0.6747    transfer 0.0103    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(1.19861627) min lb tensor(0.01379704)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
Total number of valid cuts: 20.
#cuts 1-3: 17
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.007895708084106445 
BICCOS Cumulative time: 0.11488819122314453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0219    set_bounds 0.0210    solve 0.0237    add 0.0001    
Accumulated time: pickout 0.0249    decision 0.6075    set_bounds 0.0791    solve 0.5633    add 0.7291    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
Cumulative time: 2.4077341556549072

found process to kill: terminal indx = 4
found process to kill: terminal indx = 6
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=185_spec=6_27052085.log
found process for pidx=4
found process for pidx=6
kill process for pidx=6
Result: safe in 7.7548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.58661270, -19.23237419, -17.80228806, -19.64345360, -18.73787880,
         -20.88980293, -20.24271202, -20.68834686, -12.61566162, -18.87177277]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 600] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 600] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 197] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.94333243, 5.41133070, 3.87400508, 5.60846615, 4.71442080, 6.68207455,
         6.00083208, 6.36807299, 5.18235588]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1008]; unstable size 1008; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 327, 1, 1008] with unstable size 326 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 1008] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1008] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [326]; unstable size 326; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 326] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10357285,  2.68191576, -0.13346720, -0.21289134, -0.43652558,
          0.26639247,  0.25994730,  0.99712288,  1.33664036]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
         -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.49it/s]100%|██████████| 1/1 [00:00<00:00,  8.48it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.90679932, -26.33594704, -23.54216766, -23.43782616, -23.36010551,
          -24.09189796, -24.27123070, -25.13907433, -22.15769386, -24.83020782],
         [-22.90679932, -26.33594704, -23.54216766, -23.43782616, -23.36010551,
          -24.09189796, -24.27123070, -25.13907433, -22.15769386, -24.83020782]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.74910545, 1.38447380, 1.28013229, 1.20241165]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1211 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 5.630867004394531
alpha/beta optimization time: 1.2223296165466309
initial alpha-crown bounds: tensor([[-0.02824795,  2.79288244, -0.02321959, -0.12002325, -0.32431364,
          0.37612629,  0.35790396,  1.15994883,  1.43980980]], device='cuda:0')
Number of class (without rhs): 4 ; Worst class: (+ rhs) -0.3243136405944824
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.8969 seconds.
lower bounds for all target labels: [-0.028247952461242676, 2.7928824424743652, -0.023221969604492188, -0.12002325057983398, -0.3243136405944824, 0.3761262893676758, 0.35790395736694336, 1.1599488258361816, 1.439809799194336]
Number of cpus: 96  Number of subproblems: 4
Reassign each subproblems with number of thread: 24
Starting MIP solver for these labels: [0, 2, 3, 4]
start creating model mps for candidates: ['lay/16_0', 'lay/16_2', 'lay/16_3', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=2_27052889.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=0_27052889.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=3_27052889.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=0_27052889.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=2_27052889.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 58324 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=3_27052889.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 58327 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 58328 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 58329 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54076051712036
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7928824424743652.

Properties batch 1, size 1
Remaining timeout: 198.359876871109
Verifying property 1 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.439809799194336.

Properties batch 2, size 1
Remaining timeout: 198.25168013572693
Verifying property 2 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1599488258361816.

Properties batch 3, size 1
Remaining timeout: 198.144686460495
Verifying property 3 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3761262893676758.

Properties batch 4, size 1
Remaining timeout: 198.04060339927673
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.35790395736694336.

Properties batch 5, size 1
Remaining timeout: 197.93589520454407
Verifying property 5 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02321959]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02321959]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0011339187622070312
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0004    bound 0.0565    transfer 0.0001    finalize 0.0001    func 0.0572    
Accumulated time: func 0.0572    prepare 0.0004    bound 0.0565    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 32] 
split level 5: [/input-12, 12] 
split level 6: [/input-12, 24] 
split level 7: [/input-12, 2] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 59] 
split level 10: [/input-8, 1643] 
split level 11: [/input-12, 68] 
split level 12: [/input-12, 90] 
split level 13: [/input-8, 1635] 
split level 14: [/input-8, 1707] 
split level 15: [/input-12, 79] 
split level 16: [/input-8, 1698] 
split level 17: [/input-8, 1691] 
split level 18: [/input-8, 1699] 
split level 19: [/input-8, 1307] 
split level 20: [/input-8, 1950] 
split level 21: [/input-8, 1693] 
split level 22: [/input-8, 276] 
split level 23: [/input-8, 1627] 
split level 24: [/input-8, 1948] 
split level 25: [/input-8, 1651] 
split level 26: [/input-8, 371] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 931] 
split level 29: [/input-8, 372] 
split level 30: [/input-8, 737] 
split level 31: [/input-8, 947] 
split level 32: [/input-8, 1708] 
split level 33: [/input-8, 1660] 
split level 34: [/input-8, 602] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1299] 
split level 37: [/input-8, 1638] 
split level 38: [/input-8, 1947] 
split level 39: [/input-8, 1301] 
split level 40: [/input-8, 1659] 
split level 41: [/input-8, 1646] 
split level 42: [/input-8, 611] 
split level 43: [/input-8, 1634] 
split level 44: [/input-8, 1620] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 948] 
split level 47: [/input-8, 172] 
split level 48: [/input-8, 1060] 
split level 49: [/input, 457] 
split level 50: [/input, 423] 
split level 51: [/input, 2468] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 594] 
split level 55: [/input-8, 1642] 
split level 56: [/input-8, 477] 
split level 57: [/input, 663] 
split level 58: [/input-8, 1958] 
split level 59: [/input-8, 1716] 
split level 60: [/input, 3511] 
split level 61: [/input-8, 1626] 
split level 62: [/input-8, 342] 
split level 63: [/input, 440] 
split level 64: [/input-8, 941] 
split level 65: [/input-8, 593] 
split level 66: [/input, 948] 
split level 67: [/input, 1962] 
split level 68: [/input-8, 1764] 
split level 69: [/input-8, 587] 
split level 70: [/input, 2520] 
split level 71: [/input-8, 612] 
split level 72: [/input-8, 750] 
split level 73: [/input-8, 907] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 373] 
split level 76: [/input, 3495] 
split level 77: [/input, 1978] 
split level 78: [/input, 2246] 
split level 79: [/input-8, 949] 
split level 80: [/input-8, 597] 
split level 81: [/input-8, 348] 
split level 82: [/input, 2504] 
split level 83: [/input, 2214] 
split level 84: [/input, 3546] 
split level 85: [/input-8, 1625] 
split level 86: [/input-8, 627] 
split level 87: [/input-8, 786] 
split level 88: [/input, 1004] 
split level 89: [/input-8, 781] 
split level 90: [/input, 3543] 
split level 91: [/input, 2248] 
split level 92: [/input, 2199] 
split level 93: [/input-8, 1618] 
split level 94: [/input-8, 790] 
split level 95: [/input-8, 1650] 
split level 96: [/input, 1994] 
split level 97: [/input, 2010] 
split level 98: [/input-8, 793] 
split level 99: [/input, 2247] 
split level 100: [/input, 2488] 
split level 101: [/input, 3560] 
split level 102: [/input, 1975] 
split level 103: [/input, 3526] 
split level 104: [/input, 3547] 
split level 105: [/input, 2263] 
split level 106: [/input, 3562] 
split level 107: [/input, 3563] 
split level 108: [/input-8, 1404] 
split level 109: [/input, 2536] 
split level 110: [/input, 984] 
split level 111: [/input, 988] 
split level 112: [/input, 442] 
split level 113: [/input, 2229] 
split level 114: [/input-8, 899] 
split level 115: [/input-8, 782] 
split level 116: [/input-8, 255] 
split level 117: [/input, 2505] 
split level 118: [/input, 2264] 
split level 119: [/input, 2009] 
split level 120: [/input, 2537] 
split level 121: [/input, 3510] 
split level 122: [/input, 3525] 
split level 123: [/input, 2040] 
split level 124: [/input, 1946] 
split level 125: [/input-12, 56] 
split level 126: [/input, 2473] 
split level 127: [/input-8, 234] 
split level 128: [/input-8, 780] 
split level 129: [/input, 3422] 
split level 130: [/input-8, 1235] 
split level 131: [/input, 2008] 
split level 132: [/input-8, 1715] 
split level 133: [/input, 1370] 
split level 134: [/input, 2266] 
split level 135: [/input-8, 785] 
split level 136: [/input, 2281] 
split level 137: [/input, 3524] 
split level 138: [/input, 1993] 
split level 139: [/input-8, 473] 
split level 140: [/input, 3527] 
split level 141: [/input, 1944] 
split level 142: [/input-8, 1658] 
split level 143: [/input-8, 1045] 
split level 144: [/input-8, 239] 
split level 145: [/input-8, 329] 
split level 146: [/input, 1992] 
split level 147: [/input-8, 481] 
split level 148: [/input, 2228] 
split level 149: [/input, 2007] 
split level 150: [/input, 2282] 
split level 151: [/input, 2011] 
split level 152: [/input-8, 248] 
split level 153: [/input, 972] 
split level 154: [/input-8, 796] 
split level 155: [/input-8, 1364] 
split level 156: [/input, 1977] 
split level 157: [/input, 2506] 
split level 158: [/input, 711] 
split level 159: [/input-8, 56] 
split level 160: [/input, 1976] 
split level 161: [/input, 2250] 
split level 162: [/input, 2280] 
split level 163: [/input, 1003] 
split level 164: [/input, 987] 
split level 165: [/input-8, 245] 
split level 166: [/input-8, 871] 
split level 167: [/input, 2534] 
split level 168: [/input, 2012] 
split level 169: [/input, 2245] 
split level 170: [/input, 406] 
split level 171: [/input-8, 474] 
split level 172: [/input, 3561] 
split level 173: [/input, 1960] 
split level 174: [/input, 2533] 
split level 175: [/input, 2262] 
split level 176: [/input, 2244] 
split level 177: [/input, 950] 
split level 178: [/input-8, 231] 
split level 179: [/input, 2540] 
split level 180: [/input, 1928] 
split level 181: [/input-8, 804] 
split level 182: [/input, 3409] 
split level 183: [/input, 3507] 
split level 184: [/input, 3437] 
split level 185: [/input, 2283] 
split level 186: [/input, 2551] 
split level 187: [/input-8, 218] 
split level 188: [/input-8, 330] 
split level 189: [/input-8, 235] 
split level 190: [/input-8, 1667] 
split level 191: [/input-8, 49] 
split level 192: [/input, 1974] 
split level 193: [/input, 2474] 
split level 194: [/input, 2532] 
split level 195: [/input-8, 254] 
split level 196: [/input, 2770] 
split level 197: [/input, 2269] 
split level 198: [/input, 678] 
split level 199: [/input, 2278] 
Time: prepare 0.0061    bound 0.0946    transfer 0.0073    finalize 0.0051    func 0.1132    
Accumulated time: func 0.1704    prepare 0.0165    bound 0.1511    transfer 0.0074    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.16044950) min lb tensor(-0.02312613)
Number of Verified Splits: 48 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0160825252532959 
BICCOS Cumulative time: 0.0160825252532959
Preprocessing time: 0.012179374694824219 Inference time: 0.002217531204223633 Add cuts time: 0.0010533332824707031 Cut analysis time: 0.0006322860717773438
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.5201    set_bounds 0.0113    solve 0.1133    add 0.0103    
Accumulated time: pickout 0.0005    decision 0.5201    set_bounds 0.0113    solve 0.1133    add 0.0103    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([-1.]), tensor([0]), tensor([1.66031633e-09]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78]), tensor([1.]), tensor([0]), tensor([7.22016891e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.005663871765136719

all verified at 0th iter
Time: prepare 0.0003    bound 0.0043    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.1753    prepare 0.0168    bound 0.1554    transfer 0.0075    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 196.99030995368958
Verifying property 6 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02824795]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02824795]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00020933151245117188
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    func 0.0555    
Accumulated time: func 0.0555    prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 69] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 2] 
split level 5: [/input-12, 79] 
split level 6: [/input-12, 56] 
split level 7: [/input-12, 53] 
split level 8: [/input-12, 68] 
split level 9: [/input-8, 1643] 
split level 10: [/input-8, 1698] 
split level 11: [/input-12, 89] 
split level 12: [/input-8, 1060] 
split level 13: [/input-8, 1950] 
split level 14: [/input-12, 97] 
split level 15: [/input-8, 1707] 
split level 16: [/input-8, 1708] 
split level 17: [/input-8, 1635] 
split level 18: [/input-8, 1691] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 1699] 
split level 21: [/input-12, 71] 
split level 22: [/input-8, 626] 
split level 23: [/input-8, 1050] 
split level 24: [/input-8, 172] 
split level 25: [/input-8, 371] 
split level 26: [/input-8, 1067] 
split level 27: [/input-12, 78] 
split level 28: [/input-8, 611] 
split level 29: [/input-8, 627] 
split level 30: [/input-8, 1716] 
split level 31: [/input-12, 10] 
split level 32: [/input-8, 1948] 
split level 33: [/input-8, 1651] 
split level 34: [/input-8, 1693] 
split level 35: [/input-8, 1652] 
split level 36: [/input-8, 349] 
split level 37: [/input-12, 67] 
split level 38: [/input-8, 1764] 
split level 39: [/input-8, 1941] 
split level 40: [/input-8, 373] 
split level 41: [/input-8, 1634] 
split level 42: [/input-8, 612] 
split level 43: [/input-8, 1630] 
split level 44: [/input, 405] 
split level 45: [/input-8, 1402] 
split level 46: [/input-8, 276] 
split level 47: [/input-8, 1646] 
split level 48: [/input-8, 1243] 
split level 49: [/input-8, 1638] 
split level 50: [/input-8, 1945] 
split level 51: [/input, 3511] 
split level 52: [/input-8, 1404] 
split level 53: [/input-8, 302] 
split level 54: [/input, 3495] 
split level 55: [/input-8, 362] 
split level 56: [/input-8, 342] 
split level 57: [/input-8, 1057] 
split level 58: [/input-12, 35] 
split level 59: [/input-8, 1235] 
split level 60: [/input, 457] 
split level 61: [/input-8, 931] 
split level 62: [/input-8, 1627] 
split level 63: [/input, 423] 
split level 64: [/input, 2468] 
split level 65: [/input-8, 227] 
split level 66: [/input, 440] 
split level 67: [/input-8, 1660] 
split level 68: [/input-8, 1625] 
split level 69: [/input-8, 1301] 
split level 70: [/input, 2248] 
split level 71: [/input-8, 1642] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 907] 
split level 74: [/input-8, 602] 
split level 75: [/input-8, 1626] 
split level 76: [/input, 2520] 
split level 77: [/input-8, 228] 
split level 78: [/input-8, 597] 
split level 79: [/input, 2488] 
split level 80: [/input-8, 481] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 1958] 
split level 83: [/input-8, 871] 
split level 84: [/input, 948] 
split level 85: [/input, 2199] 
split level 86: [/input, 2247] 
split level 87: [/input-8, 1610] 
split level 88: [/input-8, 219] 
split level 89: [/input, 750] 
split level 90: [/input, 2246] 
split level 91: [/input, 1962] 
split level 92: [/input-8, 234] 
split level 93: [/input, 406] 
split level 94: [/input, 2505] 
split level 95: [/input, 2949] 
split level 96: [/input, 2172] 
split level 97: [/input-8, 111] 
split level 98: [/input-8, 163] 
split level 99: [/input, 2181] 
split level 100: [/input, 2214] 
split level 101: [/input, 390] 
split level 102: [/input-8, 863] 
split level 103: [/input, 2009] 
split level 104: [/input, 2010] 
split level 105: [/input-8, 1378] 
split level 106: [/input, 1991] 
split level 107: [/input-8, 1405] 
split level 108: [/input-8, 737] 
split level 109: [/input, 2263] 
split level 110: [/input-8, 750] 
split level 111: [/input, 2040] 
split level 112: [/input, 1994] 
split level 113: [/input-8, 473] 
split level 114: [/input, 81] 
split level 115: [/input, 3510] 
split level 116: [/input, 2473] 
split level 117: [/input, 988] 
split level 118: [/input, 2898] 
split level 119: [/input, 442] 
split level 120: [/input-8, 235] 
split level 121: [/input-8, 948] 
split level 122: [/input, 2042] 
split level 123: [/input, 972] 
split level 124: [/input, 3527] 
split level 125: [/input-8, 153] 
split level 126: [/input, 2264] 
split level 127: [/input, 1370] 
split level 128: [/input, 950] 
split level 129: [/input, 1978] 
split level 130: [/input-8, 1521] 
split level 131: [/input, 2008] 
split level 132: [/input, 1457] 
split level 133: [/input, 2011] 
split level 134: [/input, 2536] 
split level 135: [/input-8, 255] 
split level 136: [/input-8, 154] 
split level 137: [/input, 2506] 
split level 138: [/input-8, 1752] 
split level 139: [/input, 2266] 
split level 140: [/input, 3547] 
split level 141: [/input-8, 414] 
split level 142: [/input-8, 432] 
split level 143: [/input, 82] 
split level 144: [/input, 1992] 
split level 145: [/input-8, 218] 
split level 146: [/input-8, 1406] 
split level 147: [/input, 3526] 
split level 148: [/input, 3437] 
split level 149: [/input, 2250] 
split level 150: [/input, 939] 
split level 151: [/input-8, 1620] 
split level 152: [/input, 1993] 
split level 153: [/input-8, 1618] 
split level 154: [/input, 1362] 
split level 155: [/input, 2534] 
split level 156: [/input, 2202] 
split level 157: [/input-8, 248] 
split level 158: [/input, 2007] 
split level 159: [/input, 2533] 
split level 160: [/input-8, 1758] 
split level 161: [/input-8, 2035] 
split level 162: [/input-8, 119] 
split level 163: [/input, 1378] 
split level 164: [/input-8, 511] 
split level 165: [/input, 1975] 
split level 166: [/input, 2474] 
split level 167: [/input, 2930] 
split level 168: [/input, 2158] 
split level 169: [/input, 984] 
split level 170: [/input-8, 1364] 
split level 171: [/input-8, 790] 
split level 172: [/input-8, 949] 
split level 173: [/input, 2413] 
split level 174: [/input-8, 2034] 
split level 175: [/input-8, 1715] 
split level 176: [/input-8, 229] 
split level 177: [/input, 2262] 
split level 178: [/input, 2657] 
split level 179: [/input, 1946] 
split level 180: [/input, 2515] 
split level 181: [/input, 2458] 
split level 182: [/input, 663] 
split level 183: [/input, 2229] 
split level 184: [/input, 1976] 
split level 185: [/input, 1944] 
split level 186: [/input-8, 1667] 
split level 187: [/input-8, 447] 
split level 188: [/input, 2280] 
split level 189: [/input-8, 1045] 
split level 190: [/input, 1419] 
split level 191: [/input, 2139] 
split level 192: [/input, 1928] 
split level 193: [/input, 2269] 
split level 194: [/input-8, 1568] 
split level 195: [/input, 2417] 
split level 196: [/input, 2142] 
split level 197: [/input, 2245] 
split level 198: [/input, 2460] 
split level 199: [/input, 711] 
Time: prepare 0.0061    bound 0.0950    transfer 0.0011    finalize 0.0031    func 0.1054    
Accumulated time: func 0.1609    prepare 0.0163    bound 0.1501    transfer 0.0012    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.49938369) min lb tensor(-0.02820718)
Number of Verified Splits: 33 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013737678527832031 
BICCOS Cumulative time: 0.013737678527832031
Preprocessing time: 0.01115274429321289 Inference time: 0.0014464855194091797 Add cuts time: 0.00034809112548828125 Cut analysis time: 0.0007903575897216797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5258    set_bounds 0.0125    solve 0.1055    add 0.0100    
Accumulated time: pickout 0.0004    decision 0.5258    set_bounds 0.0125    solve 0.1055    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([0.00767494]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([0.00173829]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008172273635864258

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0001    func 0.0102    
Accumulated time: func 0.1711    prepare 0.0166    bound 0.1597    transfer 0.0014    finalize 0.0034    
After pruning, left:  0

Back to Regular BaB


Properties batch 7, size 1
Remaining timeout: 195.98495435714722
Verifying property 7 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12002325]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12002325]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0003490447998046875
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0497    transfer 0.0001    finalize 0.0001    func 0.0502    
Accumulated time: func 0.0502    prepare 0.0002    bound 0.0497    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 2] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 53] 
split level 6: [/input-12, 67] 
split level 7: [/input-12, 79] 
split level 8: [/input-8, 1643] 
split level 9: [/input-12, 59] 
split level 10: [/input-12, 46] 
split level 11: [/input-8, 172] 
split level 12: [/input-12, 78] 
split level 13: [/input-8, 1698] 
split level 14: [/input-8, 1707] 
split level 15: [/input-8, 173] 
split level 16: [/input-8, 1651] 
split level 17: [/input-8, 1699] 
split level 18: [/input-8, 1630] 
split level 19: [/input-8, 372] 
split level 20: [/input-8, 371] 
split level 21: [/input-8, 276] 
split level 22: [/input-8, 1693] 
split level 23: [/input-8, 1659] 
split level 24: [/input-8, 898] 
split level 25: [/input-8, 1691] 
split level 26: [/input-8, 1635] 
split level 27: [/input-8, 1652] 
split level 28: [/input-8, 947] 
split level 29: [/input-8, 737] 
split level 30: [/input-8, 1301] 
split level 31: [/input-8, 1638] 
split level 32: [/input-8, 786] 
split level 33: [/input-8, 1646] 
split level 34: [/input-8, 626] 
split level 35: [/input-8, 1067] 
split level 36: [/input-8, 1610] 
split level 37: [/input-8, 1060] 
split level 38: [/input-8, 1662] 
split level 39: [/input-8, 785] 
split level 40: [/input-8, 907] 
split level 41: [/input-8, 611] 
split level 42: [/input, 457] 
split level 43: [/input-8, 908] 
split level 44: [/input-8, 507] 
split level 45: [/input-8, 1945] 
split level 46: [/input-8, 931] 
split level 47: [/input, 423] 
split level 48: [/input-8, 1299] 
split level 49: [/input-12, 69] 
split level 50: [/input-8, 1404] 
split level 51: [/input-8, 793] 
split level 52: [/input, 405] 
split level 53: [/input, 3495] 
split level 54: [/input-8, 612] 
split level 55: [/input-8, 1660] 
split level 56: [/input-8, 790] 
split level 57: [/input-8, 1708] 
split level 58: [/input, 3511] 
split level 59: [/input, 948] 
split level 60: [/input-8, 899] 
split level 61: [/input-8, 597] 
split level 62: [/input-8, 627] 
split level 63: [/input-8, 782] 
split level 64: [/input-8, 373] 
split level 65: [/input-8, 506] 
split level 66: [/input-8, 473] 
split level 67: [/input-8, 1650] 
split level 68: [/input-8, 593] 
split level 69: [/input-8, 1950] 
split level 70: [/input-8, 602] 
split level 71: [/input-8, 1625] 
split level 72: [/input-8, 948] 
split level 73: [/input-8, 1634] 
split level 74: [/input-8, 342] 
split level 75: [/input-8, 781] 
split level 76: [/input-8, 477] 
split level 77: [/input, 2468] 
split level 78: [/input-8, 1941] 
split level 79: [/input-8, 1618] 
split level 80: [/input-8, 348] 
split level 81: [/input, 663] 
split level 82: [/input-8, 788] 
split level 83: [/input-8, 1642] 
split level 84: [/input-8, 481] 
split level 85: [/input-8, 1764] 
split level 86: [/input-8, 163] 
split level 87: [/input-8, 879] 
split level 88: [/input, 1370] 
split level 89: [/input-8, 629] 
split level 90: [/input-8, 1667] 
split level 91: [/input-8, 779] 
split level 92: [/input-8, 505] 
split level 93: [/input-8, 466] 
split level 94: [/input, 971] 
split level 95: [/input-8, 871] 
split level 96: [/input, 440] 
split level 97: [/input-8, 1402] 
split level 98: [/input, 442] 
split level 99: [/input-8, 1620] 
split level 100: [/input, 2246] 
split level 101: [/input-8, 510] 
split level 102: [/input-8, 1406] 
split level 103: [/input, 3546] 
split level 104: [/input, 3526] 
split level 105: [/input-8, 1045] 
split level 106: [/input-8, 796] 
split level 107: [/input-8, 1715] 
split level 108: [/input, 2520] 
split level 109: [/input-8, 1626] 
split level 110: [/input, 3525] 
split level 111: [/input, 2247] 
split level 112: [/input-8, 780] 
split level 113: [/input, 3510] 
split level 114: [/input, 2214] 
split level 115: [/input, 969] 
split level 116: [/input, 3527] 
split level 117: [/input-8, 1605] 
split level 118: [/input, 750] 
split level 119: [/input, 2248] 
split level 120: [/input-8, 474] 
split level 121: [/input-8, 1658] 
split level 122: [/input-8, 1235] 
split level 123: [/input-8, 594] 
split level 124: [/input, 947] 
split level 125: [/input-8, 1947] 
split level 126: [/input, 3507] 
split level 127: [/input-8, 804] 
split level 128: [/input, 2504] 
split level 129: [/input, 2199] 
split level 130: [/input, 3547] 
split level 131: [/input-8, 490] 
split level 132: [/input, 2263] 
split level 133: [/input-8, 167] 
split level 134: [/input, 406] 
split level 135: [/input, 3524] 
split level 136: [/input, 3467] 
split level 137: [/input-8, 949] 
split level 138: [/input, 1978] 
split level 139: [/input, 2229] 
split level 140: [/input, 988] 
split level 141: [/input, 2488] 
split level 142: [/input-8, 941] 
split level 143: [/input-8, 750] 
split level 144: [/input-8, 329] 
split level 145: [/input, 2473] 
split level 146: [/input, 3422] 
split level 147: [/input, 984] 
split level 148: [/input, 972] 
split level 149: [/input-8, 328] 
split level 150: [/input, 1991] 
split level 151: [/input, 2209] 
split level 152: [/input, 2151] 
split level 153: [/input, 2264] 
split level 154: [/input-8, 1057] 
split level 155: [/input, 2266] 
split level 156: [/input-8, 1521] 
split level 157: [/input, 2250] 
split level 158: [/input, 2202] 
split level 159: [/input, 1354] 
split level 160: [/input, 3560] 
split level 161: [/input, 1994] 
split level 162: [/input-8, 863] 
split level 163: [/input-8, 1401] 
split level 164: [/input-8, 1405] 
split level 165: [/input, 1975] 
split level 166: [/input, 786] 
split level 167: [/input, 2226] 
split level 168: [/input-8, 1356] 
split level 169: [/input, 2506] 
split level 170: [/input-8, 154] 
split level 171: [/input, 1946] 
split level 172: [/input, 3409] 
split level 173: [/input, 3451] 
split level 174: [/input, 2536] 
split level 175: [/input, 711] 
split level 176: [/input, 3441] 
split level 177: [/input, 1976] 
split level 178: [/input, 790] 
split level 179: [/input-8, 457] 
split level 180: [/input, 1929] 
split level 181: [/input, 2474] 
split level 182: [/input-8, 119] 
split level 183: [/input, 1992] 
split level 184: [/input, 2460] 
split level 185: [/input, 2280] 
split level 186: [/input, 2458] 
split level 187: [/input, 987] 
split level 188: [/input, 2262] 
split level 189: [/input-8, 1958] 
split level 190: [/input, 2136] 
split level 191: [/input, 3437] 
split level 192: [/input, 2326] 
split level 193: [/input, 2149] 
split level 194: [/input, 678] 
split level 195: [/input, 1944] 
split level 196: [/input, 3561] 
split level 197: [/input, 2245] 
split level 198: [/input, 787] 
split level 199: [/input, 1977] 
Time: prepare 0.0062    bound 0.0959    transfer 0.0031    finalize 0.0033    func 0.1086    
Accumulated time: func 0.1587    prepare 0.0163    bound 0.1456    transfer 0.0032    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.48653221) min lb tensor(-0.11991024)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=3_27052889.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.013176441192626953 
BICCOS Cumulative time: 0.013176441192626953
Preprocessing time: 0.010467290878295898 Inference time: 0.00031685829162597656 Add cuts time: 0.00010442733764648438 Cut analysis time: 0.0022878646850585938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10395 (1), -0.10381 (1), -0.10380 (1), -0.10371 (1), -0.10096 (1), -0.10080 (1), -0.10064 (1), -0.10015 (1), -0.10008 (1), -0.10006 (1), -0.09958 (1), -0.09889 (1), -0.09836 (1), -0.09814 (1), -0.09750 (1), -0.09747 (1), -0.09692 (1), -0.09616 (1), -0.09552 (1), -0.09529 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5213    set_bounds 0.0100    solve 0.1087    add 0.2238    
Accumulated time: pickout 0.0003    decision 0.5213    set_bounds 0.0100    solve 0.1087    add 0.2238    
Current (lb-rhs): -0.10395073890686035
50 domains visited
Cumulative time: 0.9503633975982666

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 2] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 2] [/input-12, 2] [/input-12, 53] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 2: [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 53] [/input-12, 67] [/input-12, 67] [/input-12, 53] [/input-12, 67] [/input-12, 53] 
split level 3: [/input-12, 79] [/input-12, 53] [/input-12, 79] [/input-12, 67] [/input-12, 67] [/input-12, 79] [/input-12, 53] [/input-12, 67] [/input-12, 79] [/input-12, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08252954483032227

all verified at 3th iter
Time: prepare 0.0075    bound 0.0237    transfer 0.0010    finalize 0.0028    func 0.0375    
Accumulated time: func 0.1962    prepare 0.0241    bound 0.1693    transfer 0.0041    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.27384579) min lb tensor(6.86645508e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=3_27052889.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03689908981323242 
BICCOS Cumulative time: 0.050075531005859375
Preprocessing time: 0.01297140121459961 Inference time: 0.014931678771972656 Add cuts time: 0.007773399353027344 Cut analysis time: 0.0012226104736328125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0092    decision 0.0201    set_bounds 0.0125    solve 0.0376    add 0.0166    
Accumulated time: pickout 0.0095    decision 0.5414    set_bounds 0.0224    solve 0.1463    add 0.2403    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.43942067e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 9.05249566e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.60808922e-10, 2.41997287e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([1.60808922e-10, 9.14109200e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.031200647354125977

all verified at 0th iter
Time: prepare 0.0004    bound 0.0046    transfer 0.0001    finalize 0.0002    func 0.0053    
Accumulated time: func 0.2015    prepare 0.0244    bound 0.1739    transfer 0.0042    finalize 0.0064    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=0_27052889.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=0_27052889.log
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=2_27052889.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=2_27052889.log
found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=3_27052889.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=3_27052889.log

Properties batch 8, size 1
Remaining timeout: 194.6584370136261
Verifying property 8 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32431364]], device='cuda:0') need to verify.
Model prediction is: tensor([-23.04545403, -26.20975113, -23.74771309, -23.44443512, -23.54808426,
        -24.14472198, -24.38294220, -25.31268120, -21.74912643, -24.68721199],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32431364]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 1008
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 315
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1349
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
Cut time: 0.0012083053588867188
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0868    transfer 0.0001    finalize 0.0002    func 0.0873    
Accumulated time: func 0.0873    prepare 0.0002    bound 0.0868    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 2] 
split level 1: [/input-12, 90] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 69] 
split level 7: [/input-12, 32] 
split level 8: [/input-12, 12] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 53] 
split level 11: [/input-12, 56] 
split level 12: [/input-12, 4] 
split level 13: [/input-12, 79] 
split level 14: [/input-12, 67] 
split level 15: [/input-8, 1643] 
split level 16: [/input-12, 78] 
split level 17: [/input-8, 172] 
split level 18: [/input-8, 173] 
split level 19: [/input-8, 1698] 
split level 20: [/input-8, 1691] 
split level 21: [/input-8, 371] 
split level 22: [/input-8, 372] 
split level 23: [/input-8, 1699] 
split level 24: [/input-8, 1950] 
split level 25: [/input-8, 931] 
split level 26: [/input-8, 1651] 
split level 27: [/input-8, 1307] 
split level 28: [/input-8, 737] 
split level 29: [/input-8, 1652] 
split level 30: [/input-8, 1635] 
split level 31: [/input-8, 1947] 
split level 32: [/input-8, 1693] 
split level 33: [/input-8, 1067] 
split level 34: [/input, 457] 
split level 35: [/input-8, 1941] 
split level 36: [/input-8, 1660] 
split level 37: [/input-8, 907] 
split level 38: [/input, 3495] 
split level 39: [/input, 948] 
split level 40: [/input-8, 1299] 
split level 41: [/input-8, 1707] 
split level 42: [/input-8, 1060] 
split level 43: [/input, 3511] 
split level 44: [/input-8, 373] 
split level 45: [/input-8, 1945] 
split level 46: [/input, 423] 
split level 47: [/input, 971] 
split level 48: [/input, 663] 
split level 49: [/input, 2468] 
split level 50: [/input-8, 898] 
split level 51: [/input-8, 348] 
split level 52: [/input-8, 1301] 
split level 53: [/input, 988] 
split level 54: [/input-8, 941] 
split level 55: [/input-8, 908] 
split level 56: [/input, 3546] 
split level 57: [/input, 2520] 
split level 58: [/input-8, 1642] 
split level 59: [/input, 1004] 
split level 60: [/input, 3510] 
split level 61: [/input, 3526] 
split level 62: [/input, 442] 
split level 63: [/input-8, 342] 
split level 64: [/input, 3543] 
split level 65: [/input, 1962] 
split level 66: [/input-8, 1764] 
split level 67: [/input, 440] 
split level 68: [/input, 3547] 
split level 69: [/input, 3525] 
split level 70: [/input-8, 948] 
split level 71: [/input, 969] 
split level 72: [/input, 1978] 
split level 73: [/input-8, 1646] 
split level 74: [/input, 1991] 
split level 75: [/input-8, 163] 
split level 76: [/input-8, 255] 
split level 77: [/input-8, 1667] 
split level 78: [/input, 984] 
split level 79: [/input, 972] 
split level 80: [/input, 2246] 
split level 81: [/input, 947] 
split level 82: [/input, 3527] 
split level 83: [/input, 2214] 
split level 84: [/input, 2010] 
split level 85: [/input, 3562] 
split level 86: [/input-8, 234] 
split level 87: [/input-8, 899] 
split level 88: [/input, 2247] 
split level 89: [/input-8, 253] 
split level 90: [/input, 2263] 
split level 91: [/input-8, 612] 
split level 92: [/input, 2504] 
split level 93: [/input, 3524] 
split level 94: [/input, 987] 
split level 95: [/input, 2248] 
split level 96: [/input, 1994] 
split level 97: [/input, 2009] 
split level 98: [/input, 3563] 
split level 99: [/input, 2264] 
split level 100: [/input, 2473] 
split level 101: [/input, 998] 
split level 102: [/input, 3507] 
split level 103: [/input, 2199] 
split level 104: [/input, 2537] 
split level 105: [/input, 2229] 
split level 106: [/input-8, 611] 
split level 107: [/input-8, 1650] 
split level 108: [/input, 3560] 
split level 109: [/input, 2536] 
split level 110: [/input, 1370] 
split level 111: [/input-8, 1958] 
split level 112: [/input, 2266] 
split level 113: [/input, 3422] 
split level 114: [/input-8, 329] 
split level 115: [/input, 1975] 
split level 116: [/input-8, 597] 
split level 117: [/input, 2008] 
split level 118: [/input, 2505] 
split level 119: [/input, 406] 
split level 120: [/input, 3438] 
split level 121: [/input, 2488] 
split level 122: [/input, 2202] 
split level 123: [/input-8, 2035] 
split level 124: [/input-8, 245] 
split level 125: [/input, 1946] 
split level 126: [/input-8, 793] 
split level 127: [/input-8, 1708] 
split level 128: [/input-8, 154] 
split level 129: [/input-8, 782] 
split level 130: [/input, 2281] 
split level 131: [/input, 2011] 
split level 132: [/input, 2007] 
split level 133: [/input-8, 328] 
split level 134: [/input, 3437] 
split level 135: [/input, 2282] 
split level 136: [/input, 1993] 
split level 137: [/input-8, 949] 
split level 138: [/input-8, 248] 
split level 139: [/input, 939] 
split level 140: [/input, 1992] 
split level 141: [/input-8, 790] 
split level 142: [/input-8, 1057] 
split level 143: [/input-8, 2034] 
split level 144: [/input-8, 239] 
split level 145: [/input, 2539] 
split level 146: [/input, 2250] 
split level 147: [/input, 2228] 
split level 148: [/input, 1976] 
split level 149: [/input, 2506] 
split level 150: [/input, 2012] 
split level 151: [/input, 803] 
split level 152: [/input, 2262] 
split level 153: [/input, 2474] 
split level 154: [/input, 1003] 
split level 155: [/input, 950] 
split level 156: [/input, 1362] 
split level 157: [/input, 2540] 
split level 158: [/input-8, 254] 
split level 159: [/input, 2458] 
split level 160: [/input, 2534] 
split level 161: [/input, 923] 
split level 162: [/input, 711] 
split level 163: [/input, 2283] 
split level 164: [/input, 2269] 
split level 165: [/input, 2245] 
split level 166: [/input-8, 217] 
split level 167: [/input, 3409] 
split level 168: [/input, 3561] 
split level 169: [/input, 1977] 
split level 170: [/input-8, 871] 
split level 171: [/input, 1960] 
split level 172: [/input-8, 785] 
split level 173: [/input-8, 1513] 
split level 174: [/input, 787] 
split level 175: [/input, 2533] 
split level 176: [/input-8, 251] 
split level 177: [/input, 1944] 
split level 178: [/input-8, 1235] 
split level 179: [/input, 2280] 
split level 180: [/input-8, 863] 
split level 181: [/input, 786] 
split level 182: [/input, 2014] 
split level 183: [/input-8, 231] 
split level 184: [/input, 2244] 
split level 185: [/input, 790] 
split level 186: [/input, 2142] 
split level 187: [/input, 2657] 
split level 188: [/input, 1974] 
split level 189: [/input, 3397] 
split level 190: [/input, 2006] 
split level 191: [/input, 2594] 
split level 192: [/input, 2898] 
split level 193: [/input-8, 49] 
split level 194: [/input, 82] 
split level 195: [/input, 2413] 
split level 196: [/input, 2278] 
split level 197: [/input-8, 473] 
split level 198: [/input, 2139] 
split level 199: [/input, 819] 
Time: prepare 0.0061    bound 0.0951    transfer 0.0010    finalize 0.0030    func 0.1053    
Accumulated time: func 0.1926    prepare 0.0162    bound 0.1819    transfer 0.0011    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.44234800) min lb tensor(-0.32418704)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.013062715530395508 
BICCOS Cumulative time: 0.013062715530395508
Preprocessing time: 0.010679244995117188 Inference time: 0.0003204345703125 Add cuts time: 0.00013971328735351562 Cut analysis time: 0.0019233226776123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30804 (1), -0.30783 (1), -0.30706 (1), -0.30703 (1), -0.30696 (1), -0.30653 (1), -0.30579 (1), -0.30577 (1), -0.30557 (1), -0.30472 (1), -0.30447 (1), -0.30382 (1), -0.30376 (1), -0.30141 (1), -0.29945 (1), -0.29912 (1), -0.29837 (1), -0.29713 (1), -0.29649 (1), -0.29503 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5193    set_bounds 0.0091    solve 0.1055    add 0.1994    
Accumulated time: pickout 0.0005    decision 0.5193    set_bounds 0.0091    solve 0.1055    add 0.1994    
Current (lb-rhs): -0.30803680419921875
50 domains visited
Cumulative time: 0.9573502540588379

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 69] [/input-12, 46] [/input-12, 46] 
split level 3: [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27243614196777344
10 lb beta sum: 1.3615100383758545, worst -0.22152680158615112
Time: prepare 0.0072    bound 0.1166    transfer 0.0010    finalize 0.0025    func 0.1301    
Accumulated time: func 0.3227    prepare 0.0237    bound 0.2985    transfer 0.0021    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.37186790) min lb tensor(-0.22146195)
Number of Verified Splits: 85 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 12
#cuts >= 20: 0
BICCOS time: 0.018835783004760742 
BICCOS Cumulative time: 0.03189849853515625
Preprocessing time: 0.01208353042602539 Inference time: 0.0032258033752441406 Add cuts time: 0.002129793167114258 Cut analysis time: 0.0013966560363769531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07793 (2), -0.07767 (2), -0.07704 (2), -0.07688 (2), -0.07555 (2), -0.07529 (2), -0.07461 (2), -0.07447 (2), -0.07413 (2), -0.07244 (2), -0.07092 (2), -0.06999 (2), -0.06848 (2), -0.06744 (2), -0.06691 (2), -0.06375 (2), -0.06341 (2), -0.06339 (2), -0.06305 (2), -0.06239 (2), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0198    set_bounds 0.0130    solve 0.1301    add 0.2244    
Accumulated time: pickout 0.0086    decision 0.5392    set_bounds 0.0221    solve 0.2356    add 0.4238    
Current (lb-rhs): -0.07792532444000244
100 domains visited
Cumulative time: 1.3790130615234375

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 46] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 46] [/input-12, 59] 
split level 2: [/input-12, 69] [/input-12, 46] [/input-12, 46] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 53] [/input-12, 53] [/input-12, 69] [/input-12, 46] 
split level 3: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 79] [/input-12, 79] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1281745433807373
10 lb beta sum: 1.5395814180374146, worst -0.03541207313537598
Time: prepare 0.0068    bound 0.1372    transfer 0.0011    finalize 0.0030    func 0.1519    
Accumulated time: func 0.4746    prepare 0.0308    bound 0.4357    transfer 0.0032    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.36881840) min lb tensor(-0.03478360)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04014325141906738 
BICCOS Cumulative time: 0.07204174995422363
Preprocessing time: 0.013312101364135742 Inference time: 0.01826333999633789 Add cuts time: 0.007340669631958008 Cut analysis time: 0.0012271404266357422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0205    set_bounds 0.0166    solve 0.1520    add 0.0198    
Accumulated time: pickout 0.0163    decision 0.5597    set_bounds 0.0387    solve 0.3877    add 0.4436    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.41401455e-01, 1.27623722e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.41401455e-01, 1.29593775e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.57451078e-01, 1.23992845e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 53,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.57451078e-01, 1.26490280e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.74039647e-01, 1.22414395e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59,  2]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 1.74039647e-01, 4.24190015e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([46, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 2.72043884e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  7
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13181757926940918

all verified at 3th iter
Time: prepare 0.0004    bound 0.0201    transfer 0.0003    finalize 0.0002    func 0.0211    
Accumulated time: func 0.4957    prepare 0.0312    bound 0.4558    transfer 0.0035    finalize 0.0089    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 0
found process to kill: terminal indx = 2
found process to kill: terminal indx = 3
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=187_spec=4_27052889.log
found process for pidx=0
found process for pidx=2
found process for pidx=3
found process for pidx=4
kill process for pidx=4
Result: safe in 7.4463 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 480] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 480] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 238] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.72171772,  2.40926933,  1.62155724,  0.22273870,  1.79393601,
          0.73343098,  2.65353560,  0.41378754,  1.72563457]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-16.53459740, -20.49768829, -16.34491158, -18.79847145, -17.40628815,
         -19.14499092, -17.82529068, -20.38037872, -18.29029465, -19.59790993]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-16.62766075, -20.75717163, -16.98099899, -19.26163292, -17.93272972,
          -19.65863228, -18.31613541, -20.94865799, -18.39900589, -19.90797234]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.35333824]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [516]; unstable size 516; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 516] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 516] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 516] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 215] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.92542005,  3.79097652, -0.20490754,  0.89167643,  1.22881341,
         -0.10279548,  2.61780787,  4.21574402,  3.57154083]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
         -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.19852066, -17.88059044, -12.53122139, -14.11621094, -12.22916889,
          -14.50160503, -13.17019653, -15.71894741, -18.11811638, -17.10788155],
         [-15.19852066, -17.88059044, -12.53122139, -14.11621094, -12.22916889,
          -14.50160503, -13.17019653, -15.71894741, -18.11811638, -17.10788155]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.30205250, 0.94102764]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1138 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.441946029663086
alpha/beta optimization time: 1.2039897441864014
initial alpha-crown bounds: tensor([[ 1.97218466,  3.86037374, -0.17338037,  0.95068485,  1.30200815,
         -0.04648706,  2.66390991,  4.29102278,  3.62162924]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17338037490844727
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6275 seconds.
lower bounds for all target labels: [1.9721834659576416, 3.860372543334961, -0.17338204383850098, 0.9506845474243164, 1.302006483078003, -0.04648691415786743, 2.663908004760742, 4.291022777557373, 3.621628522872925]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 5]
start creating model mps for candidates: ['lay/16_2', 'lay/16_5']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.53624963760376
Verifying property 0 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.291022777557373.

Properties batch 1, size 1
Remaining timeout: 198.30090832710266
Verifying property 1 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.8603737354278564.

Properties batch 2, size 1
Remaining timeout: 198.20059871673584
Verifying property 2 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.621629238128662.

Properties batch 3, size 1
Remaining timeout: 198.11363291740417
Verifying property 3 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.663909912109375.

Properties batch 4, size 1
Remaining timeout: 198.02795720100403
Verifying property 4 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.972184658050537.

Properties batch 5, size 1
Remaining timeout: 197.94088053703308
Verifying property 5 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3020081520080566.

Properties batch 6, size 1
Remaining timeout: 197.85303282737732
Verifying property 6 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9506848454475403.

Properties batch 7, size 1
Remaining timeout: 197.765789270401
Verifying property 7 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04648706]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04648706]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009446144104003906
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0647    transfer 0.0001    finalize 0.0002    func 0.0654    
Accumulated time: func 0.0654    prepare 0.0003    bound 0.0647    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 49] 
split level 1: [/input-12, 42] 
split level 2: [/input-12, 18] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 38] 
split level 6: [/input-12, 53] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 12] 
split level 9: [/input-8, 584] 
split level 10: [/input-12, 57] 
split level 11: [/input-8, 1068] 
split level 12: [/input-8, 1698] 
split level 13: [/input-8, 227] 
split level 14: [/input-8, 478] 
split level 15: [/input-8, 1053] 
split level 16: [/input-8, 1035] 
split level 17: [/input-8, 1069] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 1041] 
split level 20: [/input-8, 630] 
split level 21: [/input, 3442] 
split level 22: [/input, 2891] 
split level 23: [/input-8, 822] 
split level 24: [/input-8, 1742] 
split level 25: [/input-8, 476] 
split level 26: [/input-8, 109] 
split level 27: [/input-8, 909] 
split level 28: [/input-8, 1691] 
split level 29: [/input-8, 452] 
split level 30: [/input, 2923] 
split level 31: [/input-8, 486] 
split level 32: [/input-8, 1714] 
split level 33: [/input-8, 379] 
split level 34: [/input-8, 1682] 
split level 35: [/input-8, 1485] 
split level 36: [/input, 373] 
split level 37: [/input-8, 1771] 
split level 38: [/input-8, 280] 
split level 39: [/input-8, 1995] 
split level 40: [/input-8, 900] 
split level 41: [/input-8, 1964] 
split level 42: [/input, 2513] 
split level 43: [/input-8, 2004] 
split level 44: [/input-8, 80] 
split level 45: [/input, 636] 
split level 46: [/input-8, 1701] 
split level 47: [/input, 1942] 
split level 48: [/input-8, 73] 
split level 49: [/input, 898] 
split level 50: [/input, 3485] 
split level 51: [/input-8, 1702] 
split level 52: [/input-8, 1161] 
split level 53: [/input, 1494] 
split level 54: [/input-8, 411] 
split level 55: [/input, 1463] 
split level 56: [/input-8, 450] 
split level 57: [/input, 2241] 
split level 58: [/input-8, 1357] 
split level 59: [/input-8, 1298] 
split level 60: [/input, 414] 
split level 61: [/input-8, 1970] 
split level 62: [/input, 1511] 
split level 63: [/input, 1927] 
split level 64: [/input, 2900] 
split level 65: [/input, 2987] 
split level 66: [/input, 169] 
split level 67: [/input-8, 1617] 
split level 68: [/input-8, 372] 
split level 69: [/input-8, 1710] 
split level 70: [/input, 2759] 
split level 71: [/input, 2117] 
split level 72: [/input-8, 1355] 
split level 73: [/input, 940] 
split level 74: [/input-8, 1782] 
split level 75: [/input-8, 579] 
split level 76: [/input, 1337] 
split level 77: [/input, 2917] 
split level 78: [/input, 1495] 
split level 79: [/input, 2405] 
split level 80: [/input, 2936] 
split level 81: [/input, 2266] 
split level 82: [/input, 2548] 
split level 83: [/input, 2162] 
split level 84: [/input-8, 1988] 
split level 85: [/input, 2910] 
split level 86: [/input, 362] 
split level 87: [/input, 218] 
split level 88: [/input-8, 1757] 
split level 89: [/input, 364] 
split level 90: [/input, 413] 
split level 91: [/input, 2909] 
split level 92: [/input-8, 1062] 
split level 93: [/input-8, 1668] 
split level 94: [/input-8, 1605] 
split level 95: [/input, 956] 
split level 96: [/input, 198] 
split level 97: [/input-8, 1051] 
split level 98: [/input-8, 72] 
split level 99: [/input-8, 1731] 
split level 100: [/input-8, 1634] 
split level 101: [/input, 915] 
split level 102: [/input-8, 1609] 
split level 103: [/input, 2482] 
split level 104: [/input, 75] 
split level 105: [/input, 1452] 
split level 106: [/input, 2263] 
split level 107: [/input, 555] 
split level 108: [/input, 3254] 
split level 109: [/input, 2774] 
split level 110: [/input, 137] 
split level 111: [/input, 3548] 
split level 112: [/input, 901] 
split level 113: [/input-8, 420] 
split level 114: [/input, 2180] 
split level 115: [/input, 217] 
split level 116: [/input, 86] 
split level 117: [/input, 1432] 
split level 118: [/input, 181] 
split level 119: [/input, 1331] 
split level 120: [/input, 596] 
split level 121: [/input, 2476] 
split level 122: [/input, 2248] 
split level 123: [/input, 1369] 
split level 124: [/input, 2878] 
split level 125: [/input, 2902] 
split level 126: [/input, 3490] 
split level 127: [/input, 594] 
split level 128: [/input, 420] 
split level 129: [/input, 790] 
split level 130: [/input, 914] 
split level 131: [/input, 366] 
split level 132: [/input, 3027] 
split level 133: [/input, 862] 
split level 134: [/input, 885] 
split level 135: [/input, 2539] 
split level 136: [/input, 877] 
split level 137: [/input-8, 378] 
split level 138: [/input, 2247] 
split level 139: [/input, 90] 
split level 140: [/input, 2947] 
split level 141: [/input, 2925] 
split level 142: [/input, 156] 
split level 143: [/input-8, 1358] 
split level 144: [/input, 907] 
split level 145: [/input, 1021] 
split level 146: [/input, 2950] 
split level 147: [/input, 234] 
split level 148: [/input, 1313] 
split level 149: [/input, 60] 
split level 150: [/input, 183] 
split level 151: [/input, 91] 
split level 152: [/input, 1652] 
split level 153: [/input-8, 1142] 
split level 154: [/input, 3013] 
split level 155: [/input, 2929] 
split level 156: [/input-8, 1033] 
split level 157: [/input, 974] 
split level 158: [/input-8, 717] 
split level 159: [/input, 3260] 
split level 160: [/input, 1669] 
split level 161: [/input, 2372] 
split level 162: [/input, 2218] 
split level 163: [/input, 2229] 
split level 164: [/input, 182] 
split level 165: [/input, 846] 
split level 166: [/input, 663] 
split level 167: [/input, 2510] 
split level 168: [/input, 2284] 
split level 169: [/input, 2451] 
split level 170: [/input, 773] 
split level 171: [/input, 2178] 
split level 172: [/input, 929] 
split level 173: [/input, 2998] 
split level 174: [/input, 2007] 
split level 175: [/input-8, 116] 
split level 176: [/input, 2441] 
split level 177: [/input, 2355] 
split level 178: [/input, 2286] 
split level 179: [/input, 2556] 
split level 180: [/input, 3437] 
split level 181: [/input, 214] 
split level 182: [/input, 2254] 
split level 183: [/input, 1299] 
split level 184: [/input, 109] 
split level 185: [/input, 261] 
split level 186: [/input, 632] 
split level 187: [/input-8, 1730] 
split level 188: [/input, 948] 
split level 189: [/input, 2189] 
split level 190: [/input, 2370] 
split level 191: [/input, 65] 
split level 192: [/input, 1346] 
split level 193: [/input, 3582] 
split level 194: [/input, 964] 
split level 195: [/input-8, 2007] 
split level 196: [/input, 3276] 
split level 197: [/input-8, 123] 
split level 198: [/input, 446] 
split level 199: [/input, 484] 
Time: prepare 0.0063    bound 0.1146    transfer 0.0077    finalize 0.0044    func 0.1332    
Accumulated time: func 0.1985    prepare 0.0171    bound 0.1793    transfer 0.0079    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.19992018) min lb tensor(-0.04641271)
Number of Verified Splits: 13 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013985872268676758 
BICCOS Cumulative time: 0.013985872268676758
Preprocessing time: 0.012148380279541016 Inference time: 0.0005936622619628906 Add cuts time: 0.00021719932556152344 Cut analysis time: 0.0010266304016113281
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.5635    set_bounds 0.0139    solve 0.1333    add 0.0100    
Accumulated time: pickout 0.0006    decision 0.5635    set_bounds 0.0139    solve 0.1333    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([-1.]), tensor([0]), tensor([7.83132670e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([49]), tensor([1.]), tensor([0]), tensor([7.83132670e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01937749981880188

all verified at 0th iter
Time: prepare 0.0003    bound 0.0045    transfer 0.0001    finalize 0.0001    func 0.0051    
Accumulated time: func 0.2036    prepare 0.0174    bound 0.1837    transfer 0.0080    finalize 0.0048    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.7528736591339
Verifying property 8 with 1 instances.
##### Instance 189 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17338037]], device='cuda:0') need to verify.
Model prediction is: tensor([-15.10610676, -17.76342773, -12.52653217, -13.96433544, -11.74744606,
        -14.36178112, -12.99651241, -15.44241428, -18.03474236, -17.01032066],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17338037]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 516
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 211
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 750
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00020241737365722656
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0602    transfer 0.0001    finalize 0.0001    func 0.0606    
Accumulated time: func 0.0606    prepare 0.0002    bound 0.0602    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 69] 
split level 4: [/input-12, 12] 
split level 5: [/input-12, 18] 
split level 6: [/input-12, 49] 
split level 7: [/input-8, 1962] 
split level 8: [/input-12, 15] 
split level 9: [/input-12, 38] 
split level 10: [/input-12, 7] 
split level 11: [/input-8, 1717] 
split level 12: [/input-8, 1947] 
split level 13: [/input-8, 579] 
split level 14: [/input-8, 1710] 
split level 15: [/input-8, 1691] 
split level 16: [/input-8, 478] 
split level 17: [/input-8, 1698] 
split level 18: [/input-8, 467] 
split level 19: [/input-8, 476] 
split level 20: [/input-8, 1701] 
split level 21: [/input-8, 1954] 
split level 22: [/input-8, 1500] 
split level 23: [/input-8, 1634] 
split level 24: [/input-8, 109] 
split level 25: [/input-12, 57] 
split level 26: [/input-8, 438] 
split level 27: [/input-8, 723] 
split level 28: [/input-8, 1964] 
split level 29: [/input-8, 452] 
split level 30: [/input-8, 1617] 
split level 31: [/input, 3253] 
split level 32: [/input-8, 1702] 
split level 33: [/input-8, 1356] 
split level 34: [/input-8, 420] 
split level 35: [/input-8, 430] 
split level 36: [/input-8, 486] 
split level 37: [/input-8, 1970] 
split level 38: [/input-8, 227] 
split level 39: [/input-8, 1298] 
split level 40: [/input-8, 733] 
split level 41: [/input-8, 900] 
split level 42: [/input-8, 84] 
split level 43: [/input-8, 1035] 
split level 44: [/input-8, 429] 
split level 45: [/input, 3254] 
split level 46: [/input-8, 1372] 
split level 47: [/input-8, 1485] 
split level 48: [/input-8, 1357] 
split level 49: [/input-8, 1605] 
split level 50: [/input-8, 91] 
split level 51: [/input-8, 630] 
split level 52: [/input-8, 898] 
split level 53: [/input-8, 923] 
split level 54: [/input-8, 174] 
split level 55: [/input-8, 584] 
split level 56: [/input-8, 1609] 
split level 57: [/input, 3067] 
split level 58: [/input-8, 450] 
split level 59: [/input-8, 280] 
split level 60: [/input, 235] 
split level 61: [/input, 2756] 
split level 62: [/input-8, 2004] 
split level 63: [/input-8, 1771] 
split level 64: [/input-8, 145] 
split level 65: [/input-8, 1355] 
split level 66: [/input, 636] 
split level 67: [/input-8, 406] 
split level 68: [/input-8, 794] 
split level 69: [/input, 1652] 
split level 70: [/input-8, 717] 
split level 71: [/input, 2266] 
split level 72: [/input, 2722] 
split level 73: [/input, 362] 
split level 74: [/input, 2987] 
split level 75: [/input-8, 1237] 
split level 76: [/input, 3382] 
split level 77: [/input-8, 1782] 
split level 78: [/input, 3506] 
split level 79: [/input, 2537] 
split level 80: [/input-8, 1549] 
split level 81: [/input-8, 1248] 
split level 82: [/input, 3492] 
split level 83: [/input, 3543] 
split level 84: [/input, 360] 
split level 85: [/input, 1463] 
split level 86: [/input, 1491] 
split level 87: [/input, 3478] 
split level 88: [/input, 2229] 
split level 89: [/input, 2482] 
split level 90: [/input-8, 747] 
split level 91: [/input-8, 189] 
split level 92: [/input, 364] 
split level 93: [/input, 234] 
split level 94: [/input, 1175] 
split level 95: [/input, 2759] 
split level 96: [/input, 2214] 
split level 97: [/input-8, 1026] 
split level 98: [/input, 3526] 
split level 99: [/input-8, 1635] 
split level 100: [/input, 3442] 
split level 101: [/input-8, 432] 
split level 102: [/input, 2199] 
split level 103: [/input, 2523] 
split level 104: [/input, 1483] 
split level 105: [/input, 940] 
split level 106: [/input, 594] 
split level 107: [/input, 1337] 
split level 108: [/input, 2476] 
split level 109: [/input, 2248] 
split level 110: [/input-8, 1387] 
split level 111: [/input, 596] 
split level 112: [/input-8, 1601] 
split level 113: [/input-8, 187] 
split level 114: [/input, 1129] 
split level 115: [/input-8, 346] 
split level 116: [/input-8, 80] 
split level 117: [/input, 2284] 
split level 118: [/input, 2247] 
split level 119: [/input, 2263] 
split level 120: [/input-8, 1825] 
split level 121: [/input, 3485] 
split level 122: [/input, 3892] 
split level 123: [/input, 3490] 
split level 124: [/input, 2226] 
split level 125: [/input, 2241] 
split level 126: [/input-8, 1380] 
split level 127: [/input, 198] 
split level 128: [/input, 2556] 
split level 129: [/input, 2774] 
split level 130: [/input-8, 981] 
split level 131: [/input-8, 434] 
split level 132: [/input, 3863] 
split level 133: [/input, 2539] 
split level 134: [/input, 1942] 
split level 135: [/input, 707] 
split level 136: [/input, 1144] 
split level 137: [/input, 2485] 
split level 138: [/input-8, 378] 
split level 139: [/input, 1112] 
split level 140: [/input, 1218] 
split level 141: [/input, 366] 
split level 142: [/input, 196] 
split level 143: [/input, 2180] 
split level 144: [/input, 3910] 
split level 145: [/input, 1494] 
split level 146: [/input, 2233] 
split level 147: [/input, 413] 
split level 148: [/input-8, 1534] 
split level 149: [/input, 2787] 
split level 150: [/input, 2441] 
split level 151: [/input, 2598] 
split level 152: [/input, 1544] 
split level 153: [/input, 3890] 
split level 154: [/input-8, 158] 
split level 155: [/input, 1669] 
split level 156: [/input, 2540] 
split level 157: [/input, 183] 
split level 158: [/input-8, 10] 
split level 159: [/input, 2007] 
split level 160: [/input, 2766] 
split level 161: [/input-8, 73] 
split level 162: [/input, 218] 
split level 163: [/input, 3093] 
split level 164: [/input-8, 1824] 
split level 165: [/input, 2451] 
split level 166: [/input-12, 92] 
split level 167: [/input-8, 1682] 
split level 168: [/input, 2513] 
split level 169: [/input, 877] 
split level 170: [/input, 3021] 
split level 171: [/input-8, 1672] 
split level 172: [/input-8, 1218] 
split level 173: [/input, 156] 
split level 174: [/input-8, 1995] 
split level 175: [/input-8, 440] 
split level 176: [/input-8, 1735] 
split level 177: [/input, 190] 
split level 178: [/input, 2929] 
split level 179: [/input, 546] 
split level 180: [/input, 862] 
split level 181: [/input, 1014] 
split level 182: [/input, 2910] 
split level 183: [/input, 2298] 
split level 184: [/input, 2668] 
split level 185: [/input-8, 1033] 
split level 186: [/input, 1235] 
split level 187: [/input, 2330] 
split level 188: [/input, 3437] 
split level 189: [/input, 2878] 
split level 190: [/input, 982] 
split level 191: [/input, 2478] 
split level 192: [/input, 3582] 
split level 193: [/input, 2548] 
split level 194: [/input, 2784] 
split level 195: [/input-8, 1379] 
split level 196: [/input, 846] 
split level 197: [/input, 1495] 
split level 198: [/input, 3335] 
split level 199: [/input-8, 362] 
Time: prepare 0.0061    bound 0.1112    transfer 0.0027    finalize 0.0035    func 0.1237    
Accumulated time: func 0.1843    prepare 0.0176    bound 0.1714    transfer 0.0028    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(0.01895195) min lb tensor(-0.17331862)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012723922729492188 
BICCOS Cumulative time: 0.012723922729492188
Preprocessing time: 0.011399269104003906 Inference time: 0.00012135505676269531 Add cuts time: 6.0558319091796875e-05 Cut analysis time: 0.001142740249633789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16248 (1), -0.16235 (1), -0.16214 (1), -0.16177 (1), -0.16122 (1), -0.16119 (1), -0.16111 (1), -0.16097 (1), -0.16011 (1), -0.15969 (1), -0.15933 (1), -0.15929 (1), -0.15788 (1), -0.15780 (1), -0.15772 (1), -0.15751 (1), -0.15748 (1), -0.15742 (1), -0.15736 (1), -0.15694 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5536    set_bounds 0.0112    solve 0.1238    add 0.2144    
Accumulated time: pickout 0.0004    decision 0.5536    set_bounds 0.0112    solve 0.1238    add 0.2144    
Current (lb-rhs): -0.16247904300689697
50 domains visited
Cumulative time: 1.002441644668579

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 53] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 53] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 6] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
split level 2: [/input-12, 6] [/input-12, 69] [/input-12, 69] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 69] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 3: [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] [/input-12, 69] [/input-12, 49] [/input-12, 49] [/input-12, 49] [/input-12, 69] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14616799354553223
10 lb beta sum: 0.34676826000213623, worst -0.1457728147506714
Time: prepare 0.0073    bound 0.1339    transfer 0.0012    finalize 0.0032    func 0.1486    
Accumulated time: func 0.3329    prepare 0.0253    bound 0.3053    transfer 0.0040    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.11064655) min lb tensor(-0.14573276)
Number of Verified Splits: 89 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.023546218872070312 
BICCOS Cumulative time: 0.0362701416015625
Preprocessing time: 0.015377283096313477 Inference time: 0.004506587982177734 Add cuts time: 0.0026068687438964844 Cut analysis time: 0.0010554790496826172
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0088    decision 0.0222    set_bounds 0.0151    solve 0.1488    add 0.0158    
Accumulated time: pickout 0.0092    decision 0.5759    set_bounds 0.0264    solve 0.2726    add 0.2302    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.99947392e-10, 1.16578922e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.99947392e-10, 1.24738917e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.99947392e-10, 8.75454992e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([78, 53]), tensor([1., 1.]), tensor([0, 0]), tensor([1.99947392e-10, 9.90788192e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012821614742279053

all verified at 1th iter
Time: prepare 0.0006    bound 0.0140    transfer 0.0003    finalize 0.0002    func 0.0153    
Accumulated time: func 0.3482    prepare 0.0259    bound 0.3193    transfer 0.0043    finalize 0.0071    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 5.2457 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.31871891, -18.47064972, -19.12639618, -20.47543144, -18.57441521,
         -21.48938560, -20.72224808, -20.14287567, -13.06752682, -17.90552711]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [738]; unstable size 738; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 738] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 738] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 738] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 239] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.85416573, 3.53390408, 4.32532692, 5.85610485, 3.81353593, 6.73792982,
         5.85599041, 5.13794994, 3.02939725]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0571 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 646] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 646] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 297] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.24239588,  5.63601065,  0.64621544, -0.16879290, -0.18126957,
          1.30519700,  1.09948540,  4.69383430,  5.11891651]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
         -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.35it/s]100%|██████████| 1/1 [00:00<00:00,  7.34it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-24.65370750, -26.69187355, -20.58222389, -18.71725845, -19.69344902,
          -18.75181198, -21.41026688, -21.15042114, -25.32792473, -26.05254555],
         [-24.65370750, -26.69187355, -20.58222389, -18.71725845, -19.69344902,
          -18.75181198, -21.41026688, -21.15042114, -25.32792473, -26.05254555]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.97619057, 0.03455353]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1398 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 23.09737205505371
alpha/beta optimization time: 1.3902370929718018
initial alpha-crown bounds: tensor([[ 4.31553078,  5.74813366,  0.69852757, -0.09507728, -0.16205454,
          1.35331583,  1.20960474,  4.79450607,  5.23488617]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.16205453872680664
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6495 seconds.
lower bounds for all target labels: [4.315530776977539, 5.748132705688477, 0.6985275745391846, -0.0950772762298584, -0.16205468773841858, 1.353315830230713, 1.2096047401428223, 4.794506072998047, 5.234886169433594]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [3, 4]
start creating model mps for candidates: ['lay/16_3', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=3_27054166.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=3_27054166.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 59397 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 59400 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.309720993042
Verifying property 0 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.748133659362793.

Properties batch 1, size 1
Remaining timeout: 198.13546800613403
Verifying property 1 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.234886169433594.

Properties batch 2, size 1
Remaining timeout: 198.03658080101013
Verifying property 2 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.794506072998047.

Properties batch 3, size 1
Remaining timeout: 197.94515895843506
Verifying property 3 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.315530776977539.

Properties batch 4, size 1
Remaining timeout: 197.85568761825562
Verifying property 4 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.353315830230713.

Properties batch 5, size 1
Remaining timeout: 197.76660752296448
Verifying property 5 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2096047401428223.

Properties batch 6, size 1
Remaining timeout: 197.67496585845947
Verifying property 6 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6985275745391846.

Properties batch 7, size 1
Remaining timeout: 197.5829885005951
Verifying property 7 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.09507728]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09507728]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007741451263427734
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0600    transfer 0.0001    finalize 0.0003    func 0.0607    
Accumulated time: func 0.0607    prepare 0.0003    bound 0.0600    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 59] 
split level 1: [/input-12, 4] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 56] 
split level 4: [/input-12, 97] 
split level 5: [/input-12, 2] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 83] 
split level 8: [/input-12, 10] 
split level 9: [/input-12, 79] 
split level 10: [/input-12, 31] 
split level 11: [/input-12, 72] 
split level 12: [/input-8, 1371] 
split level 13: [/input-8, 1682] 
split level 14: [/input-8, 1940] 
split level 15: [/input-8, 1379] 
split level 16: [/input-8, 1380] 
split level 17: [/input-8, 851] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1370] 
split level 20: [/input-8, 850] 
split level 21: [/input-8, 1196] 
split level 22: [/input-8, 1681] 
split level 23: [/input-8, 245] 
split level 24: [/input-8, 1388] 
split level 25: [/input-8, 204] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 224] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1363] 
split level 30: [/input-8, 232] 
split level 31: [/input-8, 852] 
split level 32: [/input-8, 246] 
split level 33: [/input-8, 230] 
split level 34: [/input-8, 1373] 
split level 35: [/input-8, 1070] 
split level 36: [/input-8, 1386] 
split level 37: [/input-8, 1387] 
split level 38: [/input-8, 1932] 
split level 39: [/input-8, 2030] 
split level 40: [/input-8, 250] 
split level 41: [/input-8, 37] 
split level 42: [/input-8, 244] 
split level 43: [/input-12, 71] 
split level 44: [/input-8, 192] 
split level 45: [/input, 3180] 
split level 46: [/input-8, 860] 
split level 47: [/input-8, 1690] 
split level 48: [/input-8, 236] 
split level 49: [/input-8, 1374] 
split level 50: [/input-12, 35] 
split level 51: [/input-8, 249] 
split level 52: [/input-8, 1939] 
split level 53: [/input-8, 194] 
split level 54: [/input, 3181] 
split level 55: [/input-8, 1206] 
split level 56: [/input-8, 597] 
split level 57: [/input-8, 46] 
split level 58: [/input-8, 1636] 
split level 59: [/input-8, 2005] 
split level 60: [/input-8, 240] 
split level 61: [/input-8, 2024] 
split level 62: [/input, 3214] 
split level 63: [/input-8, 962] 
split level 64: [/input-8, 1749] 
split level 65: [/input-8, 1955] 
split level 66: [/input, 3008] 
split level 67: [/input-8, 410] 
split level 68: [/input, 122] 
split level 69: [/input-8, 39] 
split level 70: [/input-8, 1382] 
split level 71: [/input, 123] 
split level 72: [/input, 3195] 
split level 73: [/input-8, 1076] 
split level 74: [/input-8, 215] 
split level 75: [/input, 2835] 
split level 76: [/input-8, 1665] 
split level 77: [/input, 2670] 
split level 78: [/input-8, 1765] 
split level 79: [/input-8, 1260] 
split level 80: [/input, 1307] 
split level 81: [/input-8, 182] 
split level 82: [/input-8, 1252] 
split level 83: [/input-8, 1473] 
split level 84: [/input-8, 30] 
split level 85: [/input-8, 994] 
split level 86: [/input-8, 409] 
split level 87: [/input, 3275] 
split level 88: [/input, 3166] 
split level 89: [/input-8, 1585] 
split level 90: [/input-8, 1366] 
split level 91: [/input, 2884] 
split level 92: [/input-8, 1365] 
split level 93: [/input-8, 1078] 
split level 94: [/input-8, 1954] 
split level 95: [/input, 107] 
split level 96: [/input-8, 1569] 
split level 97: [/input, 121] 
split level 98: [/input, 2976] 
split level 99: [/input-8, 170] 
split level 100: [/input, 1400] 
split level 101: [/input-8, 207] 
split level 102: [/input-8, 1308] 
split level 103: [/input, 137] 
split level 104: [/input-8, 174] 
split level 105: [/input, 905] 
split level 106: [/input-8, 1057] 
split level 107: [/input, 3177] 
split level 108: [/input-8, 1775] 
split level 109: [/input, 1324] 
split level 110: [/input, 44] 
split level 111: [/input-8, 1079] 
split level 112: [/input, 2650] 
split level 113: [/input-8, 1785] 
split level 114: [/input-8, 1375] 
split level 115: [/input, 140] 
split level 116: [/input, 2074] 
split level 117: [/input, 139] 
split level 118: [/input, 449] 
split level 119: [/input-8, 320] 
split level 120: [/input-8, 1708] 
split level 121: [/input, 3034] 
split level 122: [/input-8, 367] 
split level 123: [/input, 1308] 
split level 124: [/input, 145] 
split level 125: [/input-8, 958] 
split level 126: [/input-8, 1391] 
split level 127: [/input, 3276] 
split level 128: [/input-8, 1354] 
split level 129: [/input, 2361] 
split level 130: [/input, 1003] 
split level 131: [/input, 921] 
split level 132: [/input, 2075] 
split level 133: [/input, 2339] 
split level 134: [/input-8, 352] 
split level 135: [/input, 3243] 
split level 136: [/input, 2664] 
split level 137: [/input-8, 1750] 
split level 138: [/input, 120] 
split level 139: [/input, 2031] 
split level 140: [/input, 956] 
split level 141: [/input, 489] 
split level 142: [/input, 1004] 
split level 143: [/input, 193] 
split level 144: [/input, 2347] 
split level 145: [/input, 24] 
split level 146: [/input, 873] 
split level 147: [/input, 2345] 
split level 148: [/input, 1399] 
split level 149: [/input, 2653] 
split level 150: [/input-8, 47] 
split level 151: [/input, 156] 
split level 152: [/input, 4042] 
split level 153: [/input, 28] 
split level 154: [/input, 162] 
split level 155: [/input, 491] 
split level 156: [/input, 968] 
split level 157: [/input, 2615] 
split level 158: [/input, 2109] 
split level 159: [/input, 92] 
split level 160: [/input, 862] 
split level 161: [/input, 2077] 
split level 162: [/input, 27] 
split level 163: [/input, 274] 
split level 164: [/input, 2068] 
split level 165: [/input, 957] 
split level 166: [/input, 2631] 
split level 167: [/input, 3242] 
split level 168: [/input, 81] 
split level 169: [/input, 889] 
split level 170: [/input, 3244] 
split level 171: [/input-8, 336] 
split level 172: [/input, 2599] 
split level 173: [/input, 2363] 
split level 174: [/input, 3148] 
split level 175: [/input, 2620] 
split level 176: [/input, 78] 
split level 177: [/input, 4043] 
split level 178: [/input, 310] 
split level 179: [/input, 2680] 
split level 180: [/input, 3049] 
split level 181: [/input, 2099] 
split level 182: [/input, 2696] 
split level 183: [/input, 797] 
split level 184: [/input, 2494] 
split level 185: [/input, 2366] 
split level 186: [/input, 445] 
split level 187: [/input, 2187] 
split level 188: [/input, 105] 
split level 189: [/input, 2381] 
split level 190: [/input, 2093] 
split level 191: [/input, 1020] 
split level 192: [/input, 2333] 
split level 193: [/input, 45] 
split level 194: [/input, 1374] 
split level 195: [/input, 2731] 
split level 196: [/input, 2477] 
split level 197: [/input, 2114] 
split level 198: [/input, 2604] 
split level 199: [/input, 464] 
Time: prepare 0.0062    bound 0.1013    transfer 0.0354    finalize 0.0091    func 0.1523    
Accumulated time: func 0.2130    prepare 0.0167    bound 0.1613    transfer 0.0356    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.19743794) min lb tensor(-0.09498417)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.02128005027770996 
BICCOS Cumulative time: 0.02128005027770996
Preprocessing time: 0.018352746963500977 Inference time: 0.0007092952728271484 Add cuts time: 0.00022530555725097656 Cut analysis time: 0.0019927024841308594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08701 (1), -0.08692 (1), -0.08685 (1), -0.08682 (1), -0.08680 (1), -0.08677 (1), -0.08657 (1), -0.08651 (1), -0.08627 (1), -0.08613 (1), -0.08608 (1), -0.08605 (1), -0.08602 (1), -0.08600 (1), -0.08567 (1), -0.08558 (1), -0.08533 (1), -0.08530 (1), -0.08498 (1), -0.08402 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5245    set_bounds 0.0209    solve 0.1527    add 0.2209    
Accumulated time: pickout 0.0005    decision 0.5245    set_bounds 0.0209    solve 0.1527    add 0.2209    
Current (lb-rhs): -0.08701109886169434
50 domains visited
Cumulative time: 1.022359848022461

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 4] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 17] [/input-12, 17] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 90] [/input-12, 83] [/input-12, 83] [/input-12, 83] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0634603500366211

all verified at 1th iter
Time: prepare 0.0074    bound 0.0146    transfer 0.0010    finalize 0.0031    func 0.0289    
Accumulated time: func 0.2419    prepare 0.0245    bound 0.1759    transfer 0.0366    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.19580010) min lb tensor(3.11136246e-05)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.039032697677612305 
BICCOS Cumulative time: 0.060312747955322266
Preprocessing time: 0.014308929443359375 Inference time: 0.016414165496826172 Add cuts time: 0.007606983184814453 Cut analysis time: 0.0007026195526123047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0085    decision 0.0229    set_bounds 0.0157    solve 0.0290    add 0.0182    
Accumulated time: pickout 0.0090    decision 0.5474    set_bounds 0.0366    solve 0.1816    add 0.2392    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 5.47389835e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.84497878e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.55871853e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([83, 59]), tensor([1., 1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.89702317e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006887555122375488

all verified at 1th iter
Time: prepare 0.0004    bound 0.0117    transfer 0.0002    finalize 0.0002    func 0.0125    
Accumulated time: func 0.2543    prepare 0.0249    bound 0.1875    transfer 0.0368    finalize 0.0127    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.21605730056763
Verifying property 8 with 1 instances.
##### Instance 191 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16205454]], device='cuda:0') need to verify.
Model prediction is: tensor([-24.47589493, -26.35393333, -20.38714218, -18.54223824, -19.56955147,
        -18.76048660, -21.12660980, -21.15067482, -25.07092285, -25.82291603],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16205454]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 293
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 960
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005638599395751953
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0535    transfer 0.0001    finalize 0.0001    func 0.0540    
Accumulated time: func 0.0540    prepare 0.0002    bound 0.0535    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 68] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 8] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 97] 
split level 6: [/input-12, 17] 
split level 7: [/input-8, 908] 
split level 8: [/input-8, 868] 
split level 9: [/input-8, 875] 
split level 10: [/input-8, 930] 
split level 11: [/input-12, 56] 
split level 12: [/input-8, 909] 
split level 13: [/input-8, 20] 
split level 14: [/input-8, 1548] 
split level 15: [/input-12, 43] 
split level 16: [/input-8, 860] 
split level 17: [/input-8, 1052] 
split level 18: [/input-8, 869] 
split level 19: [/input-8, 853] 
split level 20: [/input-8, 1748] 
split level 21: [/input-8, 1259] 
split level 22: [/input-8, 1242] 
split level 23: [/input-8, 1756] 
split level 24: [/input-8, 877] 
split level 25: [/input-8, 861] 
split level 26: [/input-8, 852] 
split level 27: [/input-8, 1252] 
split level 28: [/input-8, 26] 
split level 29: [/input-8, 812] 
split level 30: [/input-8, 938] 
split level 31: [/input-8, 1363] 
split level 32: [/input-12, 59] 
split level 33: [/input-8, 918] 
split level 34: [/input, 3108] 
split level 35: [/input-8, 1379] 
split level 36: [/input-8, 1234] 
split level 37: [/input-8, 1061] 
split level 38: [/input-8, 1749] 
split level 39: [/input-8, 192] 
split level 40: [/input, 2629] 
split level 41: [/input-8, 1069] 
split level 42: [/input-8, 794] 
split level 43: [/input-8, 364] 
split level 44: [/input-8, 934] 
split level 45: [/input-8, 862] 
split level 46: [/input-8, 870] 
split level 47: [/input-8, 1362] 
split level 48: [/input-12, 79] 
split level 49: [/input-8, 336] 
split level 50: [/input-8, 1628] 
split level 51: [/input-8, 1260] 
split level 52: [/input-8, 1357] 
split level 53: [/input-8, 1371] 
split level 54: [/input-8, 1076] 
split level 55: [/input-8, 1932] 
split level 56: [/input-8, 358] 
split level 57: [/input-8, 224] 
split level 58: [/input-8, 1370] 
split level 59: [/input, 1315] 
split level 60: [/input-8, 1636] 
split level 61: [/input-8, 1373] 
split level 62: [/input-8, 101] 
split level 63: [/input-8, 1763] 
split level 64: [/input-8, 4] 
split level 65: [/input, 1332] 
split level 66: [/input-8, 1196] 
split level 67: [/input-8, 1387] 
split level 68: [/input-8, 344] 
split level 69: [/input, 1316] 
split level 70: [/input-8, 851] 
split level 71: [/input-8, 1618] 
split level 72: [/input-8, 854] 
split level 73: [/input, 1320] 
split level 74: [/input-8, 1354] 
split level 75: [/input-8, 174] 
split level 76: [/input-8, 1380] 
split level 77: [/input-8, 1633] 
split level 78: [/input-8, 1637] 
split level 79: [/input-8, 1365] 
split level 80: [/input-8, 1612] 
split level 81: [/input, 2581] 
split level 82: [/input-8, 1641] 
split level 83: [/input, 887] 
split level 84: [/input-8, 92] 
split level 85: [/input-8, 1765] 
split level 86: [/input-8, 1030] 
split level 87: [/input-8, 232] 
split level 88: [/input-8, 230] 
split level 89: [/input-8, 1625] 
split level 90: [/input-8, 215] 
split level 91: [/input-8, 2005] 
split level 92: [/input-8, 170] 
split level 93: [/input-8, 245] 
split level 94: [/input, 1815] 
split level 95: [/input, 3417] 
split level 96: [/input-8, 1386] 
split level 97: [/input, 1334] 
split level 98: [/input, 1351] 
split level 99: [/input-8, 109] 
split level 100: [/input, 1305] 
split level 101: [/input, 1400] 
split level 102: [/input-8, 887] 
split level 103: [/input, 889] 
split level 104: [/input-8, 1710] 
split level 105: [/input-8, 1388] 
split level 106: [/input, 855] 
split level 107: [/input-8, 1772] 
split level 108: [/input-8, 37] 
split level 109: [/input-8, 194] 
split level 110: [/input-8, 182] 
split level 111: [/input-8, 154] 
split level 112: [/input, 3539] 
split level 113: [/input-8, 1366] 
split level 114: [/input-8, 93] 
split level 115: [/input-8, 1374] 
split level 116: [/input-8, 207] 
split level 117: [/input, 1287] 
split level 118: [/input, 885] 
split level 119: [/input-8, 846] 
split level 120: [/input, 3142] 
split level 121: [/input-8, 1263] 
split level 122: [/input, 2394] 
split level 123: [/input, 905] 
split level 124: [/input-8, 249] 
split level 125: [/input-8, 1180] 
split level 126: [/input-8, 1976] 
split level 127: [/input, 2407] 
split level 128: [/input, 1399] 
split level 129: [/input, 2135] 
split level 130: [/input, 436] 
split level 131: [/input, 2134] 
split level 132: [/input, 1306] 
split level 133: [/input-8, 1382] 
split level 134: [/input, 1817] 
split level 135: [/input-8, 246] 
split level 136: [/input-8, 1404] 
split level 137: [/input, 533] 
split level 138: [/input-8, 1057] 
split level 139: [/input, 489] 
split level 140: [/input, 3444] 
split level 141: [/input-8, 175] 
split level 142: [/input-8, 845] 
split level 143: [/input-8, 1039] 
split level 144: [/input, 107] 
split level 145: [/input, 947] 
split level 146: [/input, 1079] 
split level 147: [/input, 3860] 
split level 148: [/input-8, 1676] 
split level 149: [/input-8, 240] 
split level 150: [/input-8, 947] 
split level 151: [/input-8, 473] 
split level 152: [/input, 2361] 
split level 153: [/input, 871] 
split level 154: [/input, 2696] 
split level 155: [/input, 2423] 
split level 156: [/input, 3034] 
split level 157: [/input, 53] 
split level 158: [/input, 2345] 
split level 159: [/input, 120] 
split level 160: [/input, 2680] 
split level 161: [/input, 310] 
split level 162: [/input-8, 1406] 
split level 163: [/input-8, 439] 
split level 164: [/input, 1307] 
split level 165: [/input-8, 510] 
split level 166: [/input, 27] 
split level 167: [/input, 1544] 
split level 168: [/input-8, 1540] 
split level 169: [/input-8, 797] 
split level 170: [/input, 535] 
split level 171: [/input, 362] 
split level 172: [/input-8, 250] 
split level 173: [/input-8, 1649] 
split level 174: [/input, 423] 
split level 175: [/input, 873] 
split level 176: [/input, 122] 
split level 177: [/input-8, 1350] 
split level 178: [/input-8, 1961] 
split level 179: [/input, 2624] 
split level 180: [/input, 2640] 
split level 181: [/input, 445] 
split level 182: [/input, 1080] 
split level 183: [/input-8, 102] 
split level 184: [/input, 2168] 
split level 185: [/input-8, 1668] 
split level 186: [/input, 85] 
split level 187: [/input-8, 1262] 
split level 188: [/input-8, 183] 
split level 189: [/input-8, 1939] 
split level 190: [/input, 2068] 
split level 191: [/input, 22] 
split level 192: [/input-8, 445] 
split level 193: [/input, 2072] 
split level 194: [/input-8, 352] 
split level 195: [/input, 1344] 
split level 196: [/input, 2391] 
split level 197: [/input, 1324] 
split level 198: [/input, 3049] 
split level 199: [/input-8, 863] 
Time: prepare 0.0068    bound 0.1628    transfer 0.0035    finalize 0.0046    func 0.1778    
Accumulated time: func 0.2318    prepare 0.0186    bound 0.2164    transfer 0.0036    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06769675) min lb tensor(-0.16200189)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.013702392578125 
BICCOS Cumulative time: 0.013702392578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15805 (1), -0.15801 (1), -0.15788 (1), -0.15777 (1), -0.15770 (1), -0.15765 (1), -0.15764 (1), -0.15740 (1), -0.15722 (1), -0.15719 (1), -0.15663 (1), -0.15656 (1), -0.15656 (1), -0.15610 (1), -0.15590 (1), -0.15513 (1), -0.15512 (1), -0.15512 (1), -0.15501 (1), -0.15500 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5801    set_bounds 0.0325    solve 0.1780    add 0.2356    
Accumulated time: pickout 0.0004    decision 0.5801    set_bounds 0.0325    solve 0.1780    add 0.2356    
Current (lb-rhs): -0.15804587304592133
50 domains visited
Cumulative time: 1.1212830543518066

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 8] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 1: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] 
Time: prepare 0.0078    bound 0.1135    transfer 0.0010    finalize 0.0035    func 0.1260    
Accumulated time: func 0.3578    prepare 0.0266    bound 0.3299    transfer 0.0047    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.02657780) min lb tensor(-0.15093705)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0031
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.017895221710205078 
BICCOS Cumulative time: 0.03159761428833008
Preprocessing time: 0.014168262481689453 Inference time: 0.0002346038818359375 Add cuts time: 0.00010991096496582031 Cut analysis time: 0.003382444381713867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06087 (2), -0.06086 (2), -0.06084 (2), -0.06082 (2), -0.06066 (2), -0.06055 (2), -0.06042 (2), -0.06038 (2), -0.06006 (2), -0.05974 (2), -0.05960 (2), -0.05929 (2), -0.05788 (2), -0.05771 (2), -0.05765 (2), -0.05761 (2), -0.05735 (2), -0.05602 (2), -0.05597 (2), -0.05584 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0231    set_bounds 0.0167    solve 0.1261    add 0.2217    
Accumulated time: pickout 0.0086    decision 0.6032    set_bounds 0.0492    solve 0.3042    add 0.4573    
Current (lb-rhs): -0.06087419390678406
100 domains visited
Cumulative time: 1.5424282550811768

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 68] [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 8] [/input-12, 8] [/input-12, 90] [/input-12, 8] [/input-12, 8] 
split level 2: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-8, 868] [/input-12, 90] [/input-12, 90] 
split level 3: [/input-8, 1252] [/input-8, 868] [/input-8, 860] [/input-8, 1371] [/input-8, 868] [/input-8, 1252] [/input-12, 17] [/input-8, 860] [/input-12, 17] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0579361766576767
10 lb beta sum: 0.11694122105836868, worst -0.25163787603378296
Time: prepare 0.0074    bound 0.1539    transfer 0.0009    finalize 0.0031    func 0.1681    
Accumulated time: func 0.5259    prepare 0.0344    bound 0.4837    transfer 0.0056    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.21991071) min lb tensor(-0.05420633)
Number of Verified Splits: 143 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.02728414535522461 
BICCOS Cumulative time: 0.05888175964355469
Preprocessing time: 0.014409303665161133 Inference time: 0.009139776229858398 Add cuts time: 0.002118825912475586 Cut analysis time: 0.0016162395477294922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02618 (3), -0.02600 (3), -0.02600 (3), -0.02574 (3), -0.02468 (3), -0.02411 (3), -0.02410 (3), -0.02371 (3), -0.02358 (3), -0.02330 (3), -0.02329 (3), -0.02328 (3), -0.02270 (3), -0.02268 (3), -0.02188 (3), -0.02151 (3), -0.02092 (3), -0.02057 (3), -0.02025 (3), -0.02013 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0228    set_bounds 0.0185    solve 0.1682    add 0.2585    
Accumulated time: pickout 0.0165    decision 0.6260    set_bounds 0.0677    solve 0.4724    add 0.7158    
Current (lb-rhs): -0.026179112493991852
150 domains visited
Cumulative time: 2.0528388023376465

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 8] [/input-12, 2] [/input-12, 2] [/input-12, 90] [/input-12, 8] [/input-12, 90] [/input-12, 90] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 8] [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 90] [/input-12, 17] [/input-12, 17] [/input-12, 10] [/input-12, 8] 
split level 2: [/input-12, 90] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-8, 1076] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 90] [/input-12, 17] 
split level 3: [/input-8, 868] [/input-8, 1252] [/input-8, 1371] [/input-8, 868] [/input-8, 1371] [/input-8, 1371] [/input-8, 1252] [/input-8, 1252] [/input-12, 17] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02967125177383423
10 lb beta sum: 0.15630169212818146, worst -0.04386885464191437
Time: prepare 0.0081    bound 0.1611    transfer 0.0038    finalize 0.0045    func 0.1804    
Accumulated time: func 0.7063    prepare 0.0428    bound 0.6448    transfer 0.0094    finalize 0.0158    
all_split False
======================Cut inference begins======================
max lb tensor(0.11034128) min lb tensor(-0.02253720)
Number of Verified Splits: 225 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 5
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.0358281135559082 
BICCOS Cumulative time: 0.09470987319946289
Preprocessing time: 0.013915061950683594 Inference time: 0.014120817184448242 Add cuts time: 0.006326913833618164 Cut analysis time: 0.0014653205871582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01162 (4), -0.01139 (4), -0.01131 (4), -0.01128 (4), -0.01094 (4), -0.01089 (4), -0.01087 (4), -0.01058 (4), -0.01045 (4), -0.01036 (4), -0.01027 (4), -0.00995 (4), -0.00989 (4), -0.00970 (4), -0.00932 (4), -0.00868 (4), -0.00824 (4), -0.00814 (4), -0.00810 (4), -0.00797 (4), 
Length of domains: 50
Time: pickout 0.0139    decision 0.0258    set_bounds 0.0211    solve 0.1806    add 0.4543    
Accumulated time: pickout 0.0303    decision 0.6519    set_bounds 0.0888    solve 0.6529    add 1.1702    
Current (lb-rhs): -0.01161959022283554
200 domains visited
Cumulative time: 2.791677236557007

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 17] [/input-12, 90] [/input-12, 90] [/input-12, 17] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 860] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018809333443641663
10 lb beta sum: 0.6392002105712891, worst -0.2263849675655365
Time: prepare 0.0085    bound 0.1788    transfer 0.0010    finalize 0.0041    func 0.1953    
Accumulated time: func 0.9016    prepare 0.0518    bound 0.8236    transfer 0.0104    finalize 0.0199    
all_split False
======================Cut inference begins======================
max lb tensor(0.04802755) min lb tensor(-0.01084024)
Number of Verified Splits: 288 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.03752756118774414 
BICCOS Cumulative time: 0.13223743438720703
Preprocessing time: 0.013511419296264648 Inference time: 0.017053842544555664 Add cuts time: 0.0051424503326416016 Cut analysis time: 0.0018198490142822266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00804 (5), -0.00803 (5), -0.00796 (5), -0.00796 (5), -0.00795 (5), -0.00795 (5), -0.00504 (5), -0.00490 (5), -0.00490 (5), -0.00314 (5), -0.00306 (5), -0.00305 (5), -0.00287 (5), -0.00281 (5), -0.00275 (5), -0.00016 (5), -0.00006 (5), -0.00005 (5), 
Length of domains: 18
Time: pickout 0.0080    decision 0.0263    set_bounds 0.0181    solve 0.1955    add 0.2498    
Accumulated time: pickout 0.0383    decision 0.6782    set_bounds 0.1069    solve 0.8484    add 1.4199    
Current (lb-rhs): -0.008044049143791199
218 domains visited
Cumulative time: 3.334057092666626

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02079070, 0.02045039, 0.00362392]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02079070, 0.02045039, 0.03261422]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02079070, 0.01469758, 0.00334384]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  8, 90,  2]), tensor([-1., -1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02079070, 0.01469758, 0.03517156]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [1.630263064118359e+30], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02720322, 0.00702319]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [-1.0], [0], [1.630263064118359e+30], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02720322, 0.03516966]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [0.009231207892298698], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02720322, 0.00697339]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([860], [1.0], [0], [0.009231207892298698], [3]), '/input-12': (tensor([68, 17,  8,  2]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.00673986, 0.02090590, 0.02720322, 0.03587300]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.00673986, 0.00731988, 0.00667390]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68, 17,  2]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([0.00673986, 0.00731988, 0.26218706]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.53086962e-13, 1.69062931e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([68,  8]), tensor([1., 1.]), tensor([0, 0]), tensor([1.53086962e-13, 1.73318852e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10341386497020721
10 lb beta sum: 0.4764866232872009, worst -0.09314537048339844
Time: prepare 0.0012    bound 0.1906    transfer 0.0005    finalize 0.0005    func 0.1929    
Accumulated time: func 1.0945    prepare 0.0530    bound 1.0142    transfer 0.0109    finalize 0.0204    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 2] [/input-12, 2] 
split level 1: [/input-12, 97] [/input-12, 8] [/input-12, 90] [/input-12, 10] 
split level 2: [/input-8, 868] [/input-12, 90] [/input-12, 17] [/input-12, 90] 
split level 3: [/input-8, 860] [/input-12, 97] [/input-8, 868] [/input-12, 17] 
split level 4: [/input-8, 1052] [/input-8, 868] [/input-8, 869] [/input-8, 868] 
split level 5: [/input-8, 1748] [/input-8, 860] [/input-8, 1052] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8635216951370239, worst -0.06448483467102051
10 lb beta sum: 0.8645190000534058, worst -0.06412607431411743
Time: prepare 0.0125    bound 0.2184    transfer 0.0048    finalize 0.0062    func 0.2438    
Accumulated time: func 1.3383    prepare 0.0660    bound 1.2326    transfer 0.0157    finalize 0.0266    
all_split False
======================Cut inference begins======================
max lb tensor(0.24069650) min lb tensor(-0.06395531)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.8485608100891113, worst -0.17759472131729126
10 lb beta sum: 0.9270235896110535, worst -0.12223488092422485
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 7
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.34894680976867676 
BICCOS Cumulative time: 0.4811842441558838
Preprocessing time: 0.010160684585571289 Inference time: 0.33331823348999023 Add cuts time: 0.003626585006713867 Cut analysis time: 0.0018413066864013672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06396 (6), -0.06320 (6), -0.06222 (6), -0.06218 (6), -0.06046 (6), -0.05946 (6), -0.05871 (6), -0.05864 (6), -0.05772 (6), -0.05769 (6), -0.05709 (6), -0.05695 (6), -0.05576 (6), -0.05504 (6), -0.05469 (6), -0.05432 (6), -0.05431 (6), -0.05307 (6), -0.05115 (6), -0.05090 (6), 
Length of domains: 64
Time: pickout 0.0014    decision 0.0238    set_bounds 0.0270    solve 0.2439    add 0.0812    
Accumulated time: pickout 0.0397    decision 0.7020    set_bounds 0.1339    solve 1.0923    add 1.5011    
Current (lb-rhs): -0.06395530700683594
282 domains visited
Cumulative time: 4.376223564147949

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-12, 10] [/input-12, 97] [/input-12, 10] [/input-8, 908] [/input-12, 10] [/input-12, 97] 
split level 1: [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-12, 97] [/input-8, 869] [/input-12, 97] [/input-8, 861] [/input-12, 97] [/input-8, 909] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9124411344528198, worst -0.062221914529800415
10 lb beta sum: 0.9124411344528198, worst -0.062063783407211304
Time: prepare 0.0126    bound 0.1815    transfer 0.0016    finalize 0.0021    func 0.1995    
Accumulated time: func 1.5377    prepare 0.0788    bound 1.4141    transfer 0.0173    finalize 0.0287    
all_split False
======================Cut inference begins======================
max lb tensor(0.29424205) min lb tensor(-0.06197622)
Number of Verified Splits: 155 of 256
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 10
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.027504920959472656 
BICCOS Cumulative time: 0.5086891651153564
Preprocessing time: 0.008966922760009766 Inference time: 0.015072107315063477 Add cuts time: 0.0019562244415283203 Cut analysis time: 0.0015096664428710938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06198 (8), -0.06194 (8), -0.06138 (8), -0.06059 (8), -0.05849 (8), -0.05845 (8), -0.05794 (8), -0.05742 (8), -0.05689 (8), -0.05685 (8), -0.05577 (8), -0.05555 (8), -0.05500 (8), -0.05484 (8), -0.05464 (8), -0.05436 (8), -0.05398 (8), -0.05384 (8), -0.05234 (8), -0.05131 (8), 
Length of domains: 101
Time: pickout 0.0139    decision 0.0177    set_bounds 0.0174    solve 0.1996    add 0.0797    
Accumulated time: pickout 0.0536    decision 0.7197    set_bounds 0.1513    solve 1.2919    add 1.5808    
Current (lb-rhs): -0.061976224184036255
383 domains visited
Cumulative time: 4.740619897842407

BaB round 3
batch: 101
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 908] [/input-12, 56] [/input-8, 20] [/input-8, 20] [/input-12, 56] [/input-8, 908] [/input-8, 908] 
split level 1: [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-12, 56] [/input-8, 909] [/input-8, 860] [/input-8, 909] [/input-8, 1052] [/input-8, 20] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05988392233848572
10 lb beta sum: 0.6273733973503113, worst -0.05515259504318237
Time: prepare 0.0095    bound 0.1869    transfer 0.0084    finalize 0.0033    func 0.2110    
Accumulated time: func 1.7487    prepare 0.0886    bound 1.6010    transfer 0.0257    finalize 0.0320    
all_split False
======================Cut inference begins======================
max lb tensor(0.02298656) min lb tensor(-0.05508214)
Number of Verified Splits: 124 of 404
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.029122591018676758 
BICCOS Cumulative time: 0.5378117561340332
Preprocessing time: 0.013099908828735352 Inference time: 0.01188206672668457 Add cuts time: 0.0008823871612548828 Cut analysis time: 0.003258228302001953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05508 (10), -0.05464 (10), -0.05382 (10), -0.05364 (10), -0.05165 (10), -0.05123 (10), -0.05037 (10), -0.05009 (10), -0.04998 (10), -0.04991 (10), -0.04826 (10), -0.04797 (10), -0.04718 (10), -0.04707 (10), -0.04630 (10), -0.04618 (10), -0.04617 (10), -0.04599 (10), -0.04448 (10), -0.04375 (10), 
Length of domains: 280
Time: pickout 0.0145    decision 0.0321    set_bounds 0.0275    solve 0.2111    add 0.0875    
Accumulated time: pickout 0.0681    decision 0.7518    set_bounds 0.1787    solve 1.5031    add 1.6683    
Current (lb-rhs): -0.05508214235305786
663 domains visited
Cumulative time: 5.151037216186523

BaB round 4
batch: 280
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 908] [/input-8, 860] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 1748] [/input-8, 869] [/input-8, 869] [/input-8, 908] [/input-8, 908] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05729891359806061
10 lb beta sum: 1.2676259279251099, worst -0.04736757278442383
Time: prepare 0.0129    bound 0.1779    transfer 0.0029    finalize 0.0046    func 0.2020    
Accumulated time: func 1.9507    prepare 0.1018    bound 1.7788    transfer 0.0287    finalize 0.0366    
all_split False
======================Cut inference begins======================
max lb tensor(0.65138119) min lb tensor(-0.04732358)
Number of Verified Splits: 327 of 560
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.06171393394470215 
BICCOS Cumulative time: 0.5995256900787354
Preprocessing time: 0.017666339874267578 Inference time: 0.03920388221740723 Add cuts time: 0.0028798580169677734 Cut analysis time: 0.0019638538360595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04732 (11), -0.04712 (11), -0.04620 (11), -0.04592 (11), -0.04390 (11), -0.04378 (11), -0.04325 (11), -0.04284 (11), -0.04237 (11), -0.04191 (11), -0.04173 (11), -0.04092 (11), -0.04055 (11), -0.04015 (11), -0.03995 (11), -0.03926 (11), -0.03837 (11), -0.03823 (11), -0.03811 (11), -0.03785 (11), 
Length of domains: 233
Time: pickout 0.0207    decision 0.0299    set_bounds 0.0284    solve 0.2023    add 0.0856    
Accumulated time: pickout 0.0888    decision 0.7817    set_bounds 0.2071    solve 1.7054    add 1.7539    
Current (lb-rhs): -0.04732358455657959
896 domains visited
Cumulative time: 5.589609861373901

BaB round 5
batch: 233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 860] [/input-8, 1748] [/input-8, 1748] [/input-8, 860] [/input-8, 1252] [/input-8, 860] [/input-8, 1932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05541636794805527
10 lb beta sum: 1.6428630352020264, worst -0.04726982116699219
Time: prepare 0.0104    bound 0.1552    transfer 0.0013    finalize 0.0039    func 0.1740    
Accumulated time: func 2.1247    prepare 0.1125    bound 1.9340    transfer 0.0300    finalize 0.0405    
all_split False
======================Cut inference begins======================
max lb tensor(0.65011024) min lb tensor(-0.04724234)
Number of Verified Splits: 274 of 466
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.047008514404296875 
BICCOS Cumulative time: 0.6465342044830322
Preprocessing time: 0.014446735382080078 Inference time: 0.02942061424255371 Add cuts time: 0.001890420913696289 Cut analysis time: 0.0012507438659667969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04724 (12), -0.04704 (12), -0.04380 (12), -0.04369 (12), -0.04230 (12), -0.04184 (12), -0.04047 (12), -0.03987 (12), -0.03823 (12), -0.03811 (12), -0.03799 (12), -0.03782 (12), -0.03665 (12), -0.03558 (12), -0.03480 (12), -0.03452 (12), -0.03351 (12), -0.03331 (12), -0.03322 (12), -0.03306 (12), 
Length of domains: 192
Time: pickout 0.0164    decision 0.0318    set_bounds 0.0230    solve 0.1742    add 0.1109    
Accumulated time: pickout 0.1052    decision 0.8135    set_bounds 0.2301    solve 1.8795    add 1.8648    
Current (lb-rhs): -0.04724234342575073
1088 domains visited
Cumulative time: 6.009033441543579

BaB round 6
batch: 192
splitting decisions: 
split level 0: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1932] [/input-8, 1932] [/input-8, 860] [/input-8, 860] [/input-8, 1932] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052295148372650146

all verified at 2th iter
Time: prepare 0.0086    bound 0.0164    transfer 0.0051    finalize 0.0034    func 0.0360    
Accumulated time: func 2.1607    prepare 0.1213    bound 1.9504    transfer 0.0351    finalize 0.0439    
all_split False
======================Cut inference begins======================
max lb tensor(0.09111716) min lb tensor(0.00300006)
Number of Verified Splits: 384 of 384
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013454914093017578 
BICCOS Cumulative time: 0.6599891185760498
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0625    decision 0.0376    set_bounds 0.0215    solve 0.0361    add 0.0001    
Accumulated time: pickout 0.1677    decision 0.8511    set_bounds 0.2516    solve 1.9157    add 1.8649    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1088 domains visited
Cumulative time: 6.182705640792847

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=3_27054166.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=3_27054166.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=3_27054166.log
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=191_spec=4_27054166.log
found process for pidx=3
kill process for pidx=3
found process for pidx=4
Result: safe in 10.4813 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.11565208, -26.29471397, -20.11076927, -23.31661606, -21.61720848,
         -22.97149086, -21.28172302, -23.18593788, -27.03968811, -25.88165855]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [697]; unstable size 697; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 312, 1, 697] with unstable size 311 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 697] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 697] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [311]; unstable size 311; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 311] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 311] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.78565764, 4.27323198, 2.01961517, 0.27245533, 1.55622077, 0.05097079,
         1.07475829, 5.46636057, 4.11699867]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0710 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-33.48653412, -28.85784149, -33.36421204, -32.71415710, -32.16485214,
         -32.94163132, -33.09236145, -31.24285507, -33.00304794, -27.07908058]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [755]; unstable size 755; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 755] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 755] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 755] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 272] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.82790470, 0.86489153, 4.30059624, 3.81733036, 3.25241184, 3.89844656,
         3.96334457, 2.53978443, 4.38356400]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [942]; unstable size 942; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 942] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 942] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 942] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 298] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.78787982,  5.47186089,  3.06105757, -0.50585973,  2.82687807,
          1.17288113,  2.26738620,  3.64541650,  5.32217264]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-20.57879448, -25.87275887, -18.40335464, -22.53392982, -18.78349113,
         -22.35590553, -20.82909393, -22.13958931, -23.90252686, -25.55131340]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-21.30207634, -26.66238022, -19.06604576, -23.03637314, -19.06505394,
          -22.81049538, -21.29365158, -22.35304260, -24.57667923, -26.26650810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00099182]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0734 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [787]; unstable size 787; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 787] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 787] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 787] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.29445910,  2.55111361, -1.20112336,  0.14969718, -0.85841596,
          0.26714230,  0.60579455,  3.49371576,  1.95312881]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.54196358, -20.82349014, -15.98302746, -15.75083733, -17.00555420,
         -16.15604782, -17.53281975, -17.70917892, -21.04745102, -20.12406921]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112],
         [-19.54196358, -20.82349205, -15.98302746, -15.75083637, -17.00555229,
          -16.15604591, -17.53282166, -17.70917892, -21.04744911, -20.12407112]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.23219109,  0.17301846]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]],


         [[[-1.03650784, -1.03650784, -1.02063489,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.06825387, -1.05238092, -1.03650784,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           [-1.09999990, -1.06825387, -1.06825387,  ..., -0.89365077,
            -0.94126981, -1.02063489],
           ...,
           [-1.29047608, -1.17936504, -1.16349196,  ..., -1.13174593,
            -1.13174593, -1.13174593],
           [-1.35396814, -1.27460313, -1.24285710,  ..., -1.11587298,
            -1.13174593, -1.13174593],
           [-1.32222211, -1.32222211, -1.22698402,  ..., -1.11587298,
            -1.13174593, -1.13174593]],

          [[-1.14331722, -1.14331722, -1.11111104,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.15942025, -1.14331722, -1.12721407,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           [-1.17552328, -1.14331722, -1.14331722,  ..., -1.07890499,
            -1.12721407, -1.15942025],
           ...,
           [-1.27214170, -1.20772946, -1.20772946,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.35265696, -1.28824472, -1.25603855,  ..., -1.20772946,
            -1.19162631, -1.19162631],
           [-1.33655393, -1.32045078, -1.23993552,  ..., -1.20772946,
            -1.19162631, -1.19162631]],

          [[-1.16791618, -1.18290865, -1.16791618,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.22788620, -1.21289361, -1.19790113,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           [-1.25787115, -1.21289361, -1.18290865,  ..., -1.12293863,
            -1.15292358, -1.18290865],
           ...,
           [-1.09295356, -1.04797614, -1.06296861,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.15292358, -1.10794616, -1.07796109,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.12293863, -1.12293863, -1.01799107,  ..., -1.25787115,
            -1.25787115, -1.25787115]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [675]; unstable size 675; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 330, 1, 675] with unstable size 329 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 675] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 675] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [329]; unstable size 329; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 329] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 329] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.27801943,  2.64099765,  0.07614470,  0.77937698,  0.49395740,
         -0.89621031,  1.17210150,  0.74582696,  1.35976243]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-23.03269768, -23.39742851, -19.98416901, -18.36516571, -20.57546043,
         -19.22831917, -18.52441025, -21.12701797, -21.40182495, -21.89733315]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-23.66091156, -23.91022873, -20.51543808, -19.07214546, -21.09067154,
          -19.93975067, -18.70034218, -21.83753204, -22.03737640, -22.49450493]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.37180328]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0465 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.98860359, -29.81665421, -22.90506172, -26.87357140, -25.76964569,
         -27.17270279, -26.79407501, -29.03504753, -24.31199837, -29.65661049]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 140, 1, 508] with unstable size 139 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 508] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [139]; unstable size 139; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 139] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.01010847, 0.43884709, 4.07559061, 3.17350507, 4.33794880, 3.97197723,
         6.33449650, 1.59434068, 6.97273016]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [796]; unstable size 796; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 161, 1, 796] with unstable size 160 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 796] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 796] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [160]; unstable size 160; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 160] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.89236903, -0.28250706, -0.08627740,  1.25970483,  0.33654189,
          1.56063449,  2.24391079,  2.57144308,  3.82517886]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
         -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.42it/s]100%|██████████| 1/1 [00:00<00:00,  7.41it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-22.14531326, -27.12922287, -22.18219376, -22.67140579, -24.06235313,
          -23.14514732, -24.43384171, -25.13469696, -25.67412186, -26.70548248],
         [-22.14531326, -27.12922287, -22.18219376, -22.67140579, -24.06235313,
          -23.14514732, -24.43384171, -25.13469696, -25.67412186, -26.70548248]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.03688049, 0.52609253]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1380 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 15.666089057922363
alpha/beta optimization time: 1.3985011577606201
initial alpha-crown bounds: tensor([[ 3.92945480, -0.25881720, -0.04859716,  1.30887127,  0.37676299,
          1.59917855,  2.28565073,  2.62420344,  3.84938145]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.258817195892334
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.8193 seconds.
lower bounds for all target labels: [3.929454803466797, -0.25881779193878174, -0.048598527908325195, 1.3088700771331787, 0.3767629563808441, 1.5991785526275635, 2.2856507301330566, 2.6242027282714844, 3.849381446838379]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [1, 2]
start creating model mps for candidates: ['lay/16_1', 'lay/16_2']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.mps
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=2_27055276.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=2_27055276.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 60006 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 60013 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.2950427532196
Verifying property 0 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.929454803466797.

Properties batch 1, size 1
Remaining timeout: 198.1168496608734
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.849381446838379.

Properties batch 2, size 1
Remaining timeout: 198.01748919487
Verifying property 2 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6242034435272217.

Properties batch 3, size 1
Remaining timeout: 197.92078709602356
Verifying property 3 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2856507301330566.

Properties batch 4, size 1
Remaining timeout: 197.8114972114563
Verifying property 4 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5991785526275635.

Properties batch 5, size 1
Remaining timeout: 197.71849513053894
Verifying property 5 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3088712692260742.

Properties batch 6, size 1
Remaining timeout: 197.61843872070312
Verifying property 6 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3767629861831665.

Properties batch 7, size 1
Remaining timeout: 197.51172971725464
Verifying property 7 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04859716]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04859716]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008463859558105469
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0575    transfer 0.0001    finalize 0.0002    func 0.0581    
Accumulated time: func 0.0581    prepare 0.0003    bound 0.0575    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 12] 
split level 1: [/input-12, 2] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 59] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 58] 
split level 6: [/input-12, 55] 
split level 7: [/input-12, 0] 
split level 8: [/input-12, 6] 
split level 9: [/input-8, 796] 
split level 10: [/input-8, 163] 
split level 11: [/input-8, 1045] 
split level 12: [/input-8, 794] 
split level 13: [/input-8, 166] 
split level 14: [/input-8, 470] 
split level 15: [/input-8, 473] 
split level 16: [/input-8, 465] 
split level 17: [/input-8, 497] 
split level 18: [/input-8, 461] 
split level 19: [/input-8, 1651] 
split level 20: [/input-8, 1614] 
split level 21: [/input, 3259] 
split level 22: [/input-8, 813] 
split level 23: [/input, 2950] 
split level 24: [/input, 420] 
split level 25: [/input-8, 595] 
split level 26: [/input, 398] 
split level 27: [/input-8, 460] 
split level 28: [/input-8, 457] 
split level 29: [/input-8, 1622] 
split level 30: [/input, 2764] 
split level 31: [/input-8, 1182] 
split level 32: [/input-8, 506] 
split level 33: [/input, 3292] 
split level 34: [/input-8, 505] 
split level 35: [/input-8, 1609] 
split level 36: [/input-8, 507] 
split level 37: [/input-8, 1921] 
split level 38: [/input-8, 508] 
split level 39: [/input-8, 1613] 
split level 40: [/input-8, 1197] 
split level 41: [/input, 2729] 
split level 42: [/input-8, 1054] 
split level 43: [/input, 901] 
split level 44: [/input, 900] 
split level 45: [/input, 2966] 
split level 46: [/input-8, 916] 
split level 47: [/input-8, 1637] 
split level 48: [/input-8, 1581] 
split level 49: [/input, 3244] 
split level 50: [/input, 583] 
split level 51: [/input, 2762] 
split level 52: [/input-8, 822] 
split level 53: [/input, 3257] 
split level 54: [/input-8, 1604] 
split level 55: [/input, 2761] 
split level 56: [/input-8, 1642] 
split level 57: [/input-8, 1601] 
split level 58: [/input, 2917] 
split level 59: [/input, 3399] 
split level 60: [/input, 2980] 
split level 61: [/input-8, 1014] 
split level 62: [/input-8, 959] 
split level 63: [/input-8, 1062] 
split level 64: [/input, 967] 
split level 65: [/input-8, 951] 
split level 66: [/input, 662] 
split level 67: [/input, 2731] 
split level 68: [/input-8, 367] 
split level 69: [/input-8, 458] 
split level 70: [/input-8, 283] 
split level 71: [/input, 379] 
split level 72: [/input-8, 340] 
split level 73: [/input-8, 1007] 
split level 74: [/input, 3089] 
split level 75: [/input, 3513] 
split level 76: [/input-8, 589] 
split level 77: [/input, 418] 
split level 78: [/input, 2765] 
split level 79: [/input, 892] 
split level 80: [/input, 903] 
split level 81: [/input, 3533] 
split level 82: [/input-8, 174] 
split level 83: [/input, 2780] 
split level 84: [/input-8, 1922] 
split level 85: [/input, 963] 
split level 86: [/input-8, 1975] 
split level 87: [/input, 1354] 
split level 88: [/input, 2599] 
split level 89: [/input, 3105] 
split level 90: [/input, 2779] 
split level 91: [/input, 332] 
split level 92: [/input, 646] 
split level 93: [/input, 2120] 
split level 94: [/input, 1322] 
split level 95: [/input, 1304] 
split level 96: [/input-8, 348] 
split level 97: [/input, 660] 
split level 98: [/input-8, 982] 
split level 99: [/input-8, 382] 
split level 100: [/input, 2321] 
split level 101: [/input, 2919] 
split level 102: [/input, 3227] 
split level 103: [/input, 2600] 
split level 104: [/input, 3416] 
split level 105: [/input, 2121] 
split level 106: [/input, 3090] 
split level 107: [/input, 3256] 
split level 108: [/input, 2854] 
split level 109: [/input, 661] 
split level 110: [/input, 228] 
split level 111: [/input, 2734] 
split level 112: [/input-8, 274] 
split level 113: [/input, 805] 
split level 114: [/input-8, 1612] 
split level 115: [/input, 2916] 
split level 116: [/input-8, 911] 
split level 117: [/input, 948] 
split level 118: [/input, 1303] 
split level 119: [/input, 949] 
split level 120: [/input, 2122] 
split level 121: [/input, 3255] 
split level 122: [/input, 2049] 
split level 123: [/input, 2247] 
split level 124: [/input, 924] 
split level 125: [/input, 929] 
split level 126: [/input, 25] 
split level 127: [/input-8, 1101] 
split level 128: [/input, 973] 
split level 129: [/input-8, 1805] 
split level 130: [/input, 2053] 
split level 131: [/input, 909] 
split level 132: [/input, 3279] 
split level 133: [/input, 2153] 
split level 134: [/input, 3467] 
split level 135: [/input, 2070] 
split level 136: [/input, 945] 
split level 137: [/input, 2796] 
split level 138: [/input-8, 1573] 
split level 139: [/input, 417] 
split level 140: [/input, 3202] 
split level 141: [/input, 3564] 
split level 142: [/input, 3563] 
split level 143: [/input, 2246] 
split level 144: [/input, 3373] 
split level 145: [/input-8, 1923] 
split level 146: [/input, 2322] 
split level 147: [/input, 328] 
split level 148: [/input, 796] 
split level 149: [/input, 935] 
split level 150: [/input, 1487] 
split level 151: [/input, 2714] 
split level 152: [/input, 300] 
split level 153: [/input, 3106] 
split level 154: [/input, 2117] 
split level 155: [/input, 2051] 
split level 156: [/input, 2373] 
split level 157: [/input, 983] 
split level 158: [/input, 2727] 
split level 159: [/input, 37] 
split level 160: [/input, 3226] 
split level 161: [/input, 676] 
split level 162: [/input, 2323] 
split level 163: [/input, 2334] 
split level 164: [/input, 781] 
split level 165: [/input, 3358] 
split level 166: [/input, 2052] 
split level 167: [/input, 402] 
split level 168: [/input, 919] 
split level 169: [/input, 3091] 
split level 170: [/input, 227] 
split level 171: [/input-8, 2015] 
split level 172: [/input, 2050] 
split level 173: [/input, 22] 
split level 174: [/input, 230] 
split level 175: [/input, 26] 
split level 176: [/input, 2503] 
split level 177: [/input, 1471] 
split level 178: [/input, 77] 
split level 179: [/input, 2152] 
split level 180: [/input, 2337] 
split level 181: [/input, 3107] 
split level 182: [/input, 3289] 
split level 183: [/input, 2884] 
split level 184: [/input, 182] 
split level 185: [/input, 3186] 
split level 186: [/input, 2054] 
split level 187: [/input, 232] 
split level 188: [/input, 2324] 
split level 189: [/input, 2061] 
split level 190: [/input, 668] 
split level 191: [/input, 2372] 
split level 192: [/input, 2341] 
split level 193: [/input, 3374] 
split level 194: [/input, 2075] 
split level 195: [/input, 2333] 
split level 196: [/input, 2330] 
split level 197: [/input, 2883] 
split level 198: [/input-8, 2007] 
split level 199: [/input, 2371] 
Time: prepare 0.0062    bound 0.1026    transfer 0.0078    finalize 0.0072    func 0.1240    
Accumulated time: func 0.1820    prepare 0.0168    bound 0.1601    transfer 0.0079    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.38106376) min lb tensor(-0.04849803)
Number of Verified Splits: 10 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.019520282745361328 
BICCOS Cumulative time: 0.019520282745361328
Preprocessing time: 0.017539024353027344 Inference time: 0.0006091594696044922 Add cuts time: 0.00015425682067871094 Cut analysis time: 0.0012178421020507812
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.5309    set_bounds 0.0182    solve 0.1241    add 0.0102    
Accumulated time: pickout 0.0005    decision 0.5309    set_bounds 0.0182    solve 0.1241    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12]), tensor([-1.]), tensor([0]), tensor([4.74859596e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([12]), tensor([1.]), tensor([0]), tensor([4.74859596e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.011164307594299316

all verified at 0th iter
Time: prepare 0.0003    bound 0.0045    transfer 0.0001    finalize 0.0001    func 0.0052    
Accumulated time: func 0.1872    prepare 0.0171    bound 0.1646    transfer 0.0080    finalize 0.0075    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.5582721233368
Verifying property 8 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.25881720]], device='cuda:0') need to verify.
Model prediction is: tensor([-21.75551414, -26.88309479, -22.24279404, -22.79791832, -24.11035538,
        -23.30415535, -24.49540329, -25.17525864, -25.53401184, -26.56663895],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25881720]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 796
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 160
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 971
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0002951622009277344
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.0896    transfer 0.0001    finalize 0.0001    func 0.0901    
Accumulated time: func 0.0901    prepare 0.0002    bound 0.0896    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 8] 
split level 1: [/input-12, 12] 
split level 2: [/input-12, 59] 
split level 3: [/input-12, 0] 
split level 4: [/input-8, 1819] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 1578] 
split level 7: [/input-8, 1571] 
split level 8: [/input-8, 595] 
split level 9: [/input-8, 283] 
split level 10: [/input-8, 796] 
split level 11: [/input-12, 58] 
split level 12: [/input-8, 1197] 
split level 13: [/input-8, 1590] 
split level 14: [/input-8, 1182] 
split level 15: [/input-8, 794] 
split level 16: [/input-8, 1573] 
split level 17: [/input-8, 1581] 
split level 18: [/input-8, 470] 
split level 19: [/input-8, 461] 
split level 20: [/input-8, 1612] 
split level 21: [/input-8, 166] 
split level 22: [/input-8, 1637] 
split level 23: [/input, 662] 
split level 24: [/input-8, 1598] 
split level 25: [/input-8, 174] 
split level 26: [/input-8, 460] 
split level 27: [/input, 3528] 
split level 28: [/input-8, 309] 
split level 29: [/input-8, 1206] 
split level 30: [/input, 3292] 
split level 31: [/input, 661] 
split level 32: [/input, 3259] 
split level 33: [/input, 954] 
split level 34: [/input, 3513] 
split level 35: [/input, 963] 
split level 36: [/input-8, 1613] 
split level 37: [/input-12, 6] 
split level 38: [/input, 3432] 
split level 39: [/input, 2980] 
split level 40: [/input, 935] 
split level 41: [/input-8, 951] 
split level 42: [/input, 2764] 
split level 43: [/input-8, 246] 
split level 44: [/input, 2762] 
split level 45: [/input, 967] 
split level 46: [/input-8, 473] 
split level 47: [/input, 979] 
split level 48: [/input, 3257] 
split level 49: [/input-8, 274] 
split level 50: [/input, 951] 
split level 51: [/input-8, 1045] 
split level 52: [/input, 2729] 
split level 53: [/input, 3416] 
split level 54: [/input, 420] 
split level 55: [/input, 922] 
split level 56: [/input, 983] 
split level 57: [/input-8, 1622] 
split level 58: [/input, 3244] 
split level 59: [/input, 3399] 
split level 60: [/input, 2780] 
split level 61: [/input, 980] 
split level 62: [/input, 2246] 
split level 63: [/input, 659] 
split level 64: [/input-8, 1804] 
split level 65: [/input-8, 589] 
split level 66: [/input, 971] 
split level 67: [/input, 2231] 
split level 68: [/input, 2104] 
split level 69: [/input, 2120] 
split level 70: [/input, 1942] 
split level 71: [/input-8, 1597] 
split level 72: [/input, 988] 
split level 73: [/input-8, 1614] 
split level 74: [/input-8, 238] 
split level 75: [/input, 972] 
split level 76: [/input, 949] 
split level 77: [/input, 2779] 
split level 78: [/input, 583] 
split level 79: [/input, 989] 
split level 80: [/input, 948] 
split level 81: [/input, 1304] 
split level 82: [/input, 2727] 
split level 83: [/input, 2599] 
split level 84: [/input-8, 1805] 
split level 85: [/input, 2731] 
split level 86: [/input, 2121] 
split level 87: [/input, 379] 
split level 88: [/input-8, 457] 
split level 89: [/input, 3546] 
split level 90: [/input, 990] 
split level 91: [/input-8, 959] 
split level 92: [/input, 332] 
split level 93: [/input, 2796] 
split level 94: [/input, 2520] 
split level 95: [/input, 2135] 
split level 96: [/input-8, 508] 
split level 97: [/input-8, 1921] 
split level 98: [/input, 2486] 
split level 99: [/input, 200] 
split level 100: [/input, 2503] 
split level 101: [/input, 3533] 
split level 102: [/input, 2122] 
split level 103: [/input, 2517] 
split level 104: [/input, 1001] 
split level 105: [/input, 1941] 
split level 106: [/input, 1303] 
split level 107: [/input-8, 1833] 
split level 108: [/input, 228] 
split level 109: [/input, 3564] 
split level 110: [/input, 3256] 
split level 111: [/input, 919] 
split level 112: [/input, 1457] 
split level 113: [/input, 2247] 
split level 114: [/input, 1006] 
split level 115: [/input, 3105] 
split level 116: [/input, 973] 
split level 117: [/input-8, 428] 
split level 118: [/input-8, 369] 
split level 119: [/input-8, 507] 
split level 120: [/input, 3563] 
split level 121: [/input, 2152] 
split level 122: [/input-8, 1604] 
split level 123: [/input, 1963] 
split level 124: [/input, 3467] 
split level 125: [/input, 1944] 
split level 126: [/input, 999] 
split level 127: [/input, 924] 
split level 128: [/input, 2245] 
split level 129: [/input, 3384] 
split level 130: [/input, 2261] 
split level 131: [/input, 193] 
split level 132: [/input, 2504] 
split level 133: [/input, 201] 
split level 134: [/input, 646] 
split level 135: [/input, 2264] 
split level 136: [/input-8, 916] 
split level 137: [/input, 3255] 
split level 138: [/input, 2518] 
split level 139: [/input, 2230] 
split level 140: [/input, 2600] 
split level 141: [/input-8, 61] 
split level 142: [/input, 1322] 
split level 143: [/input, 199] 
split level 144: [/input, 182] 
split level 145: [/input, 2049] 
split level 146: [/input, 232] 
split level 147: [/input, 3032] 
split level 148: [/input, 3089] 
split level 149: [/input, 2501] 
split level 150: [/input, 2734] 
split level 151: [/input, 1943] 
split level 152: [/input, 2249] 
split level 153: [/input, 231] 
split level 154: [/input, 781] 
split level 155: [/input, 892] 
split level 156: [/input, 3452] 
split level 157: [/input, 2153] 
split level 158: [/input, 2117] 
split level 159: [/input, 234] 
split level 160: [/input-8, 1951] 
split level 161: [/input, 2537] 
split level 162: [/input, 2215] 
split level 163: [/input, 2279] 
split level 164: [/input, 2280] 
split level 165: [/input, 3090] 
split level 166: [/input, 227] 
split level 167: [/input, 2357] 
split level 168: [/input, 2343] 
split level 169: [/input, 2515] 
split level 170: [/input, 165] 
split level 171: [/input, 660] 
split level 172: [/input, 676] 
split level 173: [/input, 233] 
split level 174: [/input, 2134] 
split level 175: [/input, 2262] 
split level 176: [/input, 668] 
split level 177: [/input, 3358] 
split level 178: [/input, 3106] 
split level 179: [/input, 2050] 
split level 180: [/input, 2514] 
split level 181: [/input, 230] 
split level 182: [/input, 2761] 
split level 183: [/input, 2535] 
split level 184: [/input, 3289] 
split level 185: [/input, 3373] 
split level 186: [/input, 2051] 
split level 187: [/input, 2232] 
split level 188: [/input, 2061] 
split level 189: [/input, 2052] 
split level 190: [/input, 2521] 
split level 191: [/input, 508] 
split level 192: [/input, 675] 
split level 193: [/input, 2149] 
split level 194: [/input, 2094] 
split level 195: [/input, 2282] 
split level 196: [/input, 3374] 
split level 197: [/input, 1948] 
split level 198: [/input, 2333] 
split level 199: [/input, 2075] 
Time: prepare 0.0061    bound 0.0959    transfer 0.0012    finalize 0.0030    func 0.1063    
Accumulated time: func 0.1964    prepare 0.0165    bound 0.1855    transfer 0.0013    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.15740180) min lb tensor(-0.25867438)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012611627578735352 
BICCOS Cumulative time: 0.012611627578735352
Preprocessing time: 0.011145830154418945 Inference time: 8.535385131835938e-05 Add cuts time: 7.152557373046875e-05 Cut analysis time: 0.0013089179992675781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25248 (1), -0.25241 (1), -0.25231 (1), -0.25226 (1), -0.25213 (1), -0.25183 (1), -0.25180 (1), -0.25179 (1), -0.25179 (1), -0.25166 (1), -0.25146 (1), -0.25112 (1), -0.25061 (1), -0.25037 (1), -0.25018 (1), -0.25011 (1), -0.25003 (1), -0.24996 (1), -0.24989 (1), -0.24896 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5236    set_bounds 0.0101    solve 0.1065    add 0.2177    
Accumulated time: pickout 0.0003    decision 0.5236    set_bounds 0.0101    solve 0.1065    add 0.2177    
Current (lb-rhs): -0.252477765083313
50 domains visited
Cumulative time: 0.9888675212860107

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] [/input-12, 12] 
split level 1: [/input-12, 59] [/input-12, 0] [/input-12, 0] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] 
split level 2: [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 3: [/input-8, 283] [/input-8, 470] [/input-12, 58] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23920845985412598
10 lb beta sum: 0.19286823272705078, worst -0.23783385753631592
Time: prepare 0.0087    bound 0.1340    transfer 0.0012    finalize 0.0036    func 0.1503    
Accumulated time: func 0.3467    prepare 0.0256    bound 0.3196    transfer 0.0025    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.09574366) min lb tensor(-0.23765969)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01760268211364746 
BICCOS Cumulative time: 0.030214309692382812
Preprocessing time: 0.015080928802490234 Inference time: 0.0006906986236572266 Add cuts time: 0.00021791458129882812 Cut analysis time: 0.0016131401062011719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07722 (2), -0.07688 (2), -0.07684 (2), -0.07625 (2), -0.07613 (2), -0.07550 (2), -0.07525 (2), -0.07484 (2), -0.07477 (2), -0.07475 (2), -0.07333 (2), -0.07276 (2), -0.07265 (2), -0.07160 (2), -0.07061 (2), -0.07016 (2), -0.06986 (2), -0.06906 (2), -0.06802 (2), -0.06764 (2), 
Length of domains: 50
Time: pickout 0.0106    decision 0.0314    set_bounds 0.0250    solve 0.1504    add 0.3122    
Accumulated time: pickout 0.0110    decision 0.5550    set_bounds 0.0351    solve 0.2569    add 0.5299    
Current (lb-rhs): -0.07721853256225586
100 domains visited
Cumulative time: 1.5434563159942627

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 59] [/input-12, 12] [/input-12, 12] [/input-12, 59] [/input-12, 0] [/input-12, 12] 
split level 1: [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 0] [/input-12, 10] [/input-12, 0] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-8, 1573] [/input-8, 470] 
split level 3: [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-12, 58] [/input-8, 470] [/input-8, 470] [/input-12, 58] [/input-8, 470] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0746392011642456
10 lb beta sum: 0.3701828718185425, worst -0.09701663255691528
Time: prepare 0.0086    bound 0.1702    transfer 0.0081    finalize 0.0039    func 0.1937    
Accumulated time: func 0.5403    prepare 0.0345    bound 0.4897    transfer 0.0106    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.07087573) min lb tensor(-0.05600649)
Number of Verified Splits: 119 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 16
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.027868270874023438 
BICCOS Cumulative time: 0.05808258056640625
Preprocessing time: 0.014287471771240234 Inference time: 0.00709843635559082 Add cuts time: 0.003765106201171875 Cut analysis time: 0.002717256546020508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02275 (3), -0.02251 (3), -0.02235 (3), -0.02217 (3), -0.02108 (3), -0.02089 (3), -0.02086 (3), -0.02056 (3), -0.02048 (3), -0.02034 (3), -0.01970 (3), -0.01961 (3), -0.01955 (3), -0.01919 (3), -0.01899 (3), -0.01853 (3), -0.01837 (3), -0.01826 (3), -0.01817 (3), -0.01793 (3), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0228    set_bounds 0.0203    solve 0.1938    add 0.2492    
Accumulated time: pickout 0.0193    decision 0.5778    set_bounds 0.0555    solve 0.4507    add 0.7791    
Current (lb-rhs): -0.022749900817871094
150 domains visited
Cumulative time: 2.0729265213012695

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 59] [/input-12, 0] [/input-12, 10] [/input-12, 10] [/input-12, 0] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 10] 
split level 2: [/input-12, 58] [/input-12, 58] [/input-8, 1581] [/input-8, 1637] [/input-8, 461] [/input-8, 1637] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] [/input-8, 1573] 
split level 3: [/input-8, 309] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 1637] [/input-8, 309] [/input-8, 470] [/input-8, 470] [/input-8, 470] [/input-8, 470] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033417344093322754
10 lb beta sum: 0.3560329079627991, worst -0.12660709023475647
Time: prepare 0.0085    bound 0.1761    transfer 0.0009    finalize 0.0033    func 0.1927    
Accumulated time: func 0.7330    prepare 0.0433    bound 0.6658    transfer 0.0115    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.06052399) min lb tensor(-0.01513614)
Number of Verified Splits: 301 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 21
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.04094576835632324 
BICCOS Cumulative time: 0.09902834892272949
Preprocessing time: 0.014020204544067383 Inference time: 0.016715288162231445 Add cuts time: 0.007679939270019531 Cut analysis time: 0.002530336380004883
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0218    set_bounds 0.0170    solve 0.1928    add 0.0296    
Accumulated time: pickout 0.0272    decision 0.5996    set_bounds 0.0725    solve 0.6435    add 0.8086    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.91168772e-11, 8.83365124e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.91168772e-11, 4.91105765e-02, 3.02025545e-02, 2.31323708e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0, 10]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.91168772e-11, 4.91105765e-02, 3.02025545e-02, 1.29983891e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12,  0]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.91168772e-11, 4.91105765e-02, 4.03027683e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.91168772e-11, 1.63798496e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([59, 12]), tensor([1., 1.]), tensor([0, 0]), tensor([4.91168772e-11, 3.43127698e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21266716718673706
10 lb beta sum: 0.478731632232666, worst -0.210980623960495
Time: prepare 0.0005    bound 0.1944    transfer 0.0003    finalize 0.0003    func 0.1956    
Accumulated time: func 0.9285    prepare 0.0438    bound 0.8602    transfer 0.0118    finalize 0.0143    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 10] [/input-12, 0] [/input-12, 0] 
split level 1: [/input-8, 1573] [/input-12, 58] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-8, 1581] [/input-8, 1581] [/input-12, 58] [/input-8, 283] 
split level 3: [/input-8, 470] [/input-8, 1573] [/input-8, 470] [/input-12, 58] 
split level 4: [/input-8, 461] [/input-8, 470] [/input-8, 461] [/input-8, 470] 
split level 5: [/input-8, 174] [/input-8, 174] [/input-8, 309] [/input-8, 461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6101677417755127, worst -0.14883290231227875
10 lb beta sum: 0.6101042628288269, worst -0.14864186942577362
Time: prepare 0.0123    bound 0.2007    transfer 0.0047    finalize 0.0022    func 0.2216    
Accumulated time: func 1.1501    prepare 0.0565    bound 1.0609    transfer 0.0165    finalize 0.0164    
all_split False
======================Cut inference begins======================
max lb tensor(0.07217142) min lb tensor(-0.14857559)
Number of Verified Splits: 186 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.6589935421943665, worst -0.5014164447784424
10 lb beta sum: 0.6658176779747009, worst -0.09017831087112427
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 21
#cuts 4-6: 22
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.5360805988311768 
BICCOS Cumulative time: 0.6351089477539062
Preprocessing time: 0.008717536926269531 Inference time: 0.5179240703582764 Add cuts time: 0.0066678524017333984 Cut analysis time: 0.002771139144897461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14858 (6), -0.14640 (6), -0.14632 (6), -0.14358 (6), -0.14325 (6), -0.14239 (6), -0.14114 (6), -0.14070 (6), -0.14053 (6), -0.14025 (6), -0.13776 (6), -0.13736 (6), -0.13557 (6), -0.13371 (6), -0.13291 (6), -0.13013 (6), -0.12524 (6), -0.12449 (6), -0.12308 (6), -0.12280 (6), 
Length of domains: 70
Time: pickout 0.0008    decision 0.0213    set_bounds 0.0254    solve 0.2217    add 0.0716    
Accumulated time: pickout 0.0279    decision 0.6209    set_bounds 0.0980    solve 0.8652    add 0.8802    
Current (lb-rhs): -0.1485755890607834
220 domains visited
Cumulative time: 3.5446219444274902

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] [/input-8, 796] [/input-8, 796] [/input-8, 794] [/input-8, 794] 
split level 1: [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] [/input-8, 794] [/input-8, 1581] [/input-8, 1612] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1449509859085083
10 lb beta sum: 0.37678834795951843, worst -0.14337915182113647
Time: prepare 0.0060    bound 0.1962    transfer 0.0054    finalize 0.0026    func 0.2120    
Accumulated time: func 1.3621    prepare 0.0628    bound 1.2571    transfer 0.0219    finalize 0.0190    
all_split False
======================Cut inference begins======================
max lb tensor(0.00919774) min lb tensor(-0.14334364)
Number of Verified Splits: 24 of 280
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.01754140853881836 
BICCOS Cumulative time: 0.6526503562927246
Preprocessing time: 0.01095724105834961 Inference time: 0.0023720264434814453 Add cuts time: 0.00199127197265625 Cut analysis time: 0.0022208690643310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14334 (8), -0.14110 (8), -0.14107 (8), -0.13802 (8), -0.13794 (8), -0.13683 (8), -0.13554 (8), -0.13512 (8), -0.13497 (8), -0.13473 (8), -0.13460 (8), -0.13235 (8), -0.13233 (8), -0.13218 (8), -0.13172 (8), -0.12958 (8), -0.12919 (8), -0.12858 (8), -0.12797 (8), -0.12725 (8), 
Length of domains: 256
Time: pickout 0.0065    decision 0.0169    set_bounds 0.0154    solve 0.2121    add 0.0839    
Accumulated time: pickout 0.0345    decision 0.6379    set_bounds 0.1134    solve 1.0773    add 0.9641    
Current (lb-rhs): -0.14334364235401154
476 domains visited
Cumulative time: 3.9044666290283203

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1581] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 794] [/input-8, 1581] [/input-8, 1581] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1416316032409668
10 lb beta sum: 0.3946153521537781, worst -0.1400560587644577
Time: prepare 0.0114    bound 0.1911    transfer 0.0065    finalize 0.0031    func 0.2155    
Accumulated time: func 1.5776    prepare 0.0744    bound 1.4481    transfer 0.0283    finalize 0.0221    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02642684) min lb tensor(-0.14002794)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0024
Total number of valid cuts: 32.
#cuts 1-3: 12
#cuts 4-6: 20
#cuts >= 20: 0
BICCOS time: 0.019955158233642578 
BICCOS Cumulative time: 0.6726055145263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14003 (9), -0.13778 (9), -0.13776 (9), -0.13462 (9), -0.13457 (9), -0.13375 (9), -0.13206 (9), -0.13188 (9), -0.13170 (9), -0.13168 (9), -0.13163 (9), -0.13085 (9), -0.12964 (9), -0.12943 (9), -0.12907 (9), -0.12860 (9), -0.12857 (9), -0.12828 (9), -0.12649 (9), -0.12646 (9), 
Length of domains: 512
Time: pickout 0.0179    decision 0.0254    set_bounds 0.0256    solve 0.2158    add 0.0911    
Accumulated time: pickout 0.0524    decision 0.6632    set_bounds 0.1390    solve 1.2931    add 1.0552    
Current (lb-rhs): -0.1400279402732849
988 domains visited
Cumulative time: 4.308200359344482

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1637] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 796] [/input-8, 1581] [/input-8, 1573] [/input-8, 1571] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4690339267253876, worst -0.1370798945426941
10 lb beta sum: 0.4690339267253876, worst -0.13704103231430054
Time: prepare 0.0482    bound 0.1970    transfer 0.0154    finalize 0.0072    func 0.2748    
Accumulated time: func 1.8524    prepare 0.1229    bound 1.6452    transfer 0.0438    finalize 0.0293    
all_split False
======================Cut inference begins======================
max lb tensor(0.00541323) min lb tensor(-0.13702309)
Number of Verified Splits: 13 of 1024
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 12
#cuts 4-6: 21
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.042862892150878906 
BICCOS Cumulative time: 0.7154684066772461
Preprocessing time: 0.03727865219116211 Inference time: 0.0016064643859863281 Add cuts time: 0.0014874935150146484 Cut analysis time: 0.0024902820587158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13702 (10), -0.13478 (10), -0.13475 (10), -0.13171 (10), -0.13161 (10), -0.13124 (10), -0.12932 (10), -0.12921 (10), -0.12906 (10), -0.12885 (10), -0.12826 (10), -0.12768 (10), -0.12748 (10), -0.12648 (10), -0.12601 (10), -0.12598 (10), -0.12544 (10), -0.12544 (10), -0.12540 (10), -0.12536 (10), 
Length of domains: 1011
Time: pickout 0.0213    decision 0.0430    set_bounds 0.0501    solve 0.2752    add 0.1189    
Accumulated time: pickout 0.0737    decision 0.7062    set_bounds 0.1891    solve 1.5683    add 1.1741    
Current (lb-rhs): -0.13702309131622314
1999 domains visited
Cumulative time: 4.868116140365601

BaB round 5
batch: 1011
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 460] [/input-8, 1612] [/input-8, 1612] [/input-8, 1581] [/input-8, 1637] [/input-8, 1612] [/input-8, 1612] [/input-8, 796] [/input-8, 1571] [/input-8, 1612] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13502740859985352
10 lb beta sum: 0.3904392123222351, worst -0.13351032137870789
Time: prepare 0.0465    bound 0.2693    transfer 0.0221    finalize 0.0182    func 0.3704    
Accumulated time: func 2.2228    prepare 0.1697    bound 1.9144    transfer 0.0659    finalize 0.0475    
all_split False
======================Cut inference begins======================
max lb tensor(0.02323006) min lb tensor(-0.13350216)
Number of Verified Splits: 163 of 2022
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 12
#cuts 4-6: 26
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.10838913917541504 
BICCOS Cumulative time: 0.8238575458526611
Preprocessing time: 0.0783381462097168 Inference time: 0.023046255111694336 Add cuts time: 0.004433631896972656 Cut analysis time: 0.00257110595703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13350 (11), -0.13119 (11), -0.13101 (11), -0.12968 (11), -0.12862 (11), -0.12828 (11), -0.12786 (11), -0.12764 (11), -0.12746 (11), -0.12570 (11), -0.12559 (11), -0.12547 (11), -0.12545 (11), -0.12535 (11), -0.12450 (11), -0.12407 (11), -0.12404 (11), -0.12362 (11), -0.12353 (11), -0.12299 (11), 
Length of domains: 1859
Time: pickout 0.0700    decision 0.0832    set_bounds 0.0978    solve 0.3710    add 0.1217    
Accumulated time: pickout 0.1436    decision 0.7894    set_bounds 0.2869    solve 1.9393    add 1.2958    
Current (lb-rhs): -0.13350215554237366
3858 domains visited
Cumulative time: 5.733442068099976

BaB round 6
batch: 1859
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 1182] [/input-8, 1571] [/input-8, 1637] [/input-8, 460] [/input-8, 174] [/input-8, 460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13196849822998047
10 lb beta sum: 0.39012396335601807, worst -0.1304440200328827
Time: prepare 0.0848    bound 0.3757    transfer 0.0441    finalize 0.0311    func 0.5609    
Accumulated time: func 2.7837    prepare 0.2548    bound 2.2901    transfer 0.1100    finalize 0.0785    
all_split False
======================Cut inference begins======================
max lb tensor(0.03327596) min lb tensor(-0.13044129)
Number of Verified Splits: 380 of 3718
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 12
#cuts 4-6: 32
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.20875930786132812 
BICCOS Cumulative time: 1.0326168537139893
Preprocessing time: 0.1321868896484375 Inference time: 0.05967879295349121 Add cuts time: 0.013342142105102539 Cut analysis time: 0.003551483154296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13044 (12), -0.12809 (12), -0.12754 (12), -0.12752 (12), -0.12616 (12), -0.12561 (12), -0.12539 (12), -0.12532 (12), -0.12522 (12), -0.12514 (12), -0.12495 (12), -0.12432 (12), -0.12341 (12), -0.12338 (12), -0.12321 (12), -0.12307 (12), -0.12274 (12), -0.12245 (12), -0.12233 (12), -0.12225 (12), 
Length of domains: 3338
Time: pickout 0.0496    decision 0.1303    set_bounds 0.3562    solve 0.5621    add 0.1709    
Accumulated time: pickout 0.1932    decision 0.9197    set_bounds 0.6431    solve 2.5014    add 1.4667    
Current (lb-rhs): -0.13044129312038422
7196 domains visited
Cumulative time: 7.224423408508301

BaB round 7
batch: 3338
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 174] [/input-8, 1571] [/input-8, 1571] [/input-8, 309] [/input-8, 1637] [/input, 935] [/input-8, 1637] [/input-8, 1571] [/input-8, 1637] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1306571364402771
10 lb beta sum: 0.3864259123802185, worst -0.12913241982460022
Time: prepare 0.1627    bound 0.5967    transfer 0.0591    finalize 0.0553    func 0.9185    
Accumulated time: func 3.7022    prepare 0.4179    bound 2.8869    transfer 0.1690    finalize 0.1338    
all_split False
======================Cut inference begins======================
max lb tensor(0.03578207) min lb tensor(-0.12912540)
Number of Verified Splits: 761 of 6676
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 83.
#cuts 1-3: 12
#cuts 4-6: 32
#cuts 7-9: 39
#cuts >= 20: 0
BICCOS time: 0.5934774875640869 
BICCOS Cumulative time: 1.6260943412780762
Preprocessing time: 0.2347116470336914 Inference time: 0.32428765296936035 Add cuts time: 0.029367446899414062 Cut analysis time: 0.005110740661621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12620 (13), -0.12619 (13), -0.12484 (13), -0.12430 (13), -0.12406 (13), -0.12401 (13), -0.12390 (13), -0.12375 (13), -0.12298 (13), -0.12230 (13), -0.12209 (13), -0.12207 (13), -0.12191 (13), -0.12175 (13), -0.12092 (13), -0.12091 (13), -0.12075 (13), -0.12074 (13), 
Length of domains: 5915
Time: pickout 0.0664    decision 0.2179    set_bounds 0.5136    solve 0.9210    add 0.1755    
Accumulated time: pickout 0.2596    decision 1.1376    set_bounds 1.1567    solve 3.4223    add 1.6422    
Current (lb-rhs): -0.12912540137767792
13111 domains visited
Cumulative time: 9.730090856552124

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1637] [/input-8, 460] [/input-8, 1571] [/input-8, 1571] [/input-8, 174] [/input-8, 460] [/input-8, 309] [/input-8, 1571] [/input-8, 174] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12699538469314575
10 lb beta sum: 0.387200266122818, worst -0.12548592686653137
Time: prepare 0.2059    bound 0.7300    transfer 0.0414    finalize 0.2816    func 1.3127    
Accumulated time: func 5.0149    prepare 0.6242    bound 3.6168    transfer 0.2104    finalize 0.4154    
all_split False
======================Cut inference begins======================
max lb tensor(0.02781624) min lb tensor(-0.12540500)
Number of Verified Splits: 1162 of 8192
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts: total 512 constraints, 24935 nonzero elements
cuts preparing time: 0.0142
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 612.
#cuts 1-3: 70
#cuts 4-6: 45
#cuts 7-9: 42
#cuts 10-12: 5
#cuts 13-15: 13
#cuts 16-18: 25
#cuts 19-21: 33
#cuts >= 20: 379
BICCOS time: 0.7326583862304688 
BICCOS Cumulative time: 2.358752727508545
Preprocessing time: 0.28134584426879883 Inference time: 0.1800689697265625 Add cuts time: 0.041651010513305664 Cut analysis time: 0.22959256172180176
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12913 (13), -0.12678 (13), -0.12619 (13), -0.12540 (14), -0.12430 (13), -0.12407 (14), -0.12375 (13), -0.12328 (14), -0.12324 (14), -0.12312 (14), -0.12298 (13), -0.12230 (13), -0.12209 (13), -0.12207 (13), -0.12113 (14), -0.12098 (14), -0.12092 (13), -0.12075 (13), -0.12013 (14), -0.12011 (13), 
Length of domains: 8849
Time: pickout 0.0828    decision 0.2555    set_bounds 0.4176    solve 1.3148    add 0.2138    
Accumulated time: pickout 0.3423    decision 1.3931    set_bounds 1.5743    solve 4.7371    add 1.8560    
Current (lb-rhs): -0.12912540137767792
20141 domains visited
current_vram/total_varm: 11.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.79100251197815

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1182] [/input-8, 460] [/input-8, 1819] [/input-8, 1571] [/input-8, 1182] [/input-8, 174] [/input-8, 174] [/input-8, 1573] [/input-8, 1573] [/input-8, 1182] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12989801168441772
10 lb beta sum: 4.819171905517578, worst -0.07162386178970337
Time: prepare 0.3735    bound 3.2210    transfer 0.0834    finalize 0.1288    func 3.9163    
Accumulated time: func 8.9311    prepare 0.9981    bound 6.8378    transfer 0.2938    finalize 0.5442    
all_split False
======================Cut inference begins======================
max lb tensor(0.05172265) min lb tensor(-0.06437504)
Number of Verified Splits: 12883 of 16384
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts: total 967 constraints, 38733 nonzero elements
cuts preparing time: 0.0176
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1072.
#cuts 1-3: 181
#cuts 4-6: 87
#cuts 7-9: 10
#cuts 10-12: 15
#cuts 13-15: 36
#cuts 16-18: 63
#cuts 19-21: 58
#cuts >= 20: 622
BICCOS time: 3.833723545074463 
BICCOS Cumulative time: 6.192476272583008
Preprocessing time: 0.8593387603759766 Inference time: 2.351750135421753 Add cuts time: 0.262192964553833 Cut analysis time: 0.3604416847229004
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11571 (14), -0.11560 (14), -0.11348 (14), -0.11327 (14), -0.11303 (14), -0.11253 (14), -0.11009 (14), -0.10890 (14), -0.10874 (14), -0.10779 (14), -0.10664 (14), -0.10573 (14), -0.10563 (14), -0.10511 (14), -0.10497 (14), -0.10488 (14), -0.10385 (14), -0.10362 (14), -0.10346 (14), -0.10318 (14), 
Length of domains: 4158
Time: pickout 0.1272    decision 0.7112    set_bounds 1.0590    solve 3.9202    add 0.1643    
Accumulated time: pickout 0.4695    decision 2.1043    set_bounds 2.6334    solve 8.6573    add 2.0203    
Current (lb-rhs): -0.11571347713470459
23642 domains visited
current_vram/total_varm: 23.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 22.804089784622192

BaB round 10
batch: 4158
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1637] [/input-8, 1182] [/input-8, 1573] [/input-8, 1819] [/input-8, 1637] [/input-8, 1182] [/input-8, 1819] [/input-8, 1571] [/input-8, 1182] [/input-8, 1819] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12643826007843018
10 lb beta sum: 7.648670673370361, worst -0.07746714353561401
Time: prepare 0.2071    bound 2.4006    transfer 0.0490    finalize 0.0707    func 2.7851    
Accumulated time: func 11.7163    prepare 1.2056    bound 9.2384    transfer 0.3428    finalize 0.6149    
all_split False
======================Cut inference begins======================
max lb tensor(0.39276385) min lb tensor(-0.04681098)
Number of Verified Splits: 5446 of 8316
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts: total 1159 constraints, 48012 nonzero elements
cuts preparing time: 0.0195
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1212.
#cuts 1-3: 210
#cuts 4-6: 30
#cuts 7-9: 11
#cuts 10-12: 18
#cuts 13-15: 58
#cuts 16-18: 91
#cuts 19-21: 85
#cuts >= 20: 709
BICCOS time: 1.5762875080108643 
BICCOS Cumulative time: 7.768763780593872
Preprocessing time: 0.2865612506866455 Inference time: 0.7768301963806152 Add cuts time: 0.08832979202270508 Cut analysis time: 0.42456626892089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04681 (15), -0.04671 (15), -0.04619 (15), -0.04542 (15), -0.04536 (15), -0.04524 (15), -0.04419 (15), -0.04382 (15), -0.04335 (15), -0.04315 (15), -0.04305 (15), -0.04269 (15), -0.04265 (15), -0.04263 (15), -0.04236 (15), -0.04202 (15), -0.04181 (15), -0.04163 (15), -0.04155 (16), -0.04154 (16), 
Length of domains: 2870
Time: pickout 0.0797    decision 0.2684    set_bounds 0.4203    solve 3.0448    add 0.1193    
Accumulated time: pickout 0.5492    decision 2.3727    set_bounds 3.0537    solve 11.7022    add 2.1396    
Current (lb-rhs): -0.04681098461151123
26512 domains visited
Cumulative time: 28.382842779159546

BaB round 11
batch: 2870
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 174] [/input-8, 174] [/input-8, 1819] [/input-8, 174] [/input-8, 174] [/input-8, 460] [/input-8, 1819] [/input-8, 174] [/input-8, 460] [/input-8, 174] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12347632646560669
10 lb beta sum: 8.586236000061035, worst -0.06683337688446045
Time: prepare 0.1500    bound 1.8617    transfer 0.0482    finalize 0.0438    func 2.1422    
Accumulated time: func 13.8585    prepare 1.3559    bound 11.1001    transfer 0.3910    finalize 0.6586    
all_split False
======================Cut inference begins======================
max lb tensor(0.11412334) min lb tensor(-0.04030323)
Number of Verified Splits: 2416 of 5740
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts: total 1236 constraints, 54370 nonzero elements
cuts preparing time: 0.0214
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1275.
#cuts 1-3: 204
#cuts 4-6: 22
#cuts 7-9: 10
#cuts 10-12: 32
#cuts 13-15: 68
#cuts 16-18: 104
#cuts 19-21: 87
#cuts >= 20: 748
BICCOS time: 1.286569595336914 
BICCOS Cumulative time: 9.055333375930786
Preprocessing time: 0.2013700008392334 Inference time: 0.36304450035095215 Add cuts time: 0.24045157432556152 Cut analysis time: 0.481703519821167
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04030 (16), -0.03914 (17), -0.03902 (16), -0.03892 (16), -0.03892 (17), -0.03836 (16), -0.03777 (17), -0.03772 (16), -0.03766 (16), -0.03758 (16), -0.03754 (17), -0.03746 (16), -0.03744 (16), -0.03733 (16), -0.03730 (16), -0.03716 (17), -0.03700 (16), -0.03697 (16), -0.03683 (16), -0.03680 (17), 
Length of domains: 3324
Time: pickout 0.0607    decision 0.1823    set_bounds 0.4861    solve 2.1442    add 0.2039    
Accumulated time: pickout 0.6099    decision 2.5550    set_bounds 3.5398    solve 13.8463    add 2.3435    
Current (lb-rhs): -0.04030323028564453
29836 domains visited
Cumulative time: 32.786187171936035

BaB round 12
batch: 3324
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-8, 1182] [/input-8, 460] [/input-8, 1182] [/input-8, 1182] [/input-8, 1819] [/input-8, 1182] [/input-8, 1573] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12218517065048218
10 lb beta sum: 3.447777271270752, worst -0.0587429404258728
Time: prepare 0.1684    bound 2.1709    transfer 0.0270    finalize 0.0509    func 2.4626    
Accumulated time: func 16.3211    prepare 1.5247    bound 13.2710    transfer 0.4180    finalize 0.7095    
all_split False
======================Cut inference begins======================
max lb tensor(0.76879919) min lb tensor(-0.03845358)
Number of Verified Splits: 5591 of 6648
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.1464464664459229 
BICCOS Cumulative time: 10.201779842376709
Preprocessing time: 0.24199604988098145 Inference time: 0.8459887504577637 Add cuts time: 0.05384421348571777 Cut analysis time: 0.004617452621459961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03845 (17), -0.03744 (17), -0.03700 (17), -0.03677 (17), -0.03651 (17), -0.03585 (17), -0.03579 (17), -0.03578 (17), -0.03576 (17), -0.03567 (17), -0.03541 (17), -0.03536 (17), -0.03535 (17), -0.03521 (17), -0.03519 (17), -0.03509 (17), -0.03487 (17), -0.03451 (17), -0.03435 (17), -0.03384 (17), 
Length of domains: 1057
Time: pickout 0.1436    decision 0.2059    set_bounds 0.5262    solve 2.4653    add 0.1009    
Accumulated time: pickout 0.7535    decision 2.7609    set_bounds 4.0660    solve 16.3117    add 2.4444    
Current (lb-rhs): -0.03845357894897461
30893 domains visited
Cumulative time: 37.45449995994568

BaB round 13
batch: 1057
splitting decisions: 
split level 0: [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-12, 8] [/input-8, 309] [/input-12, 8] [/input-8, 309] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12014615535736084

all verified at 3th iter
Time: prepare 0.0541    bound 0.0455    transfer 0.0118    finalize 0.1784    func 0.3032    
Accumulated time: func 16.6243    prepare 1.5790    bound 13.3166    transfer 0.4299    finalize 0.8880    
all_split False
======================Cut inference begins======================
max lb tensor(0.10011899) min lb tensor(0.02700640)
Number of Verified Splits: 2114 of 2114
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
cut /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts: total 1269 constraints, 59948 nonzero elements
cuts preparing time: 0.0285
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1270.
#cuts 1-3: 184
#cuts 4-6: 3
#cuts 7-9: 12
#cuts 10-12: 33
#cuts 13-15: 74
#cuts 16-18: 110
#cuts 19-21: 97
#cuts >= 20: 757
BICCOS time: 0.6067564487457275 
BICCOS Cumulative time: 10.808536291122437
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0396    decision 0.0720    set_bounds 0.0998    solve 0.3045    add 0.0002    
Accumulated time: pickout 0.7932    decision 2.8328    set_bounds 4.1658    solve 16.6161    add 2.4446    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
30893 domains visited
Cumulative time: 38.59942674636841

found process to kill: terminal indx = 1
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=1_27055276.log
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=2_27055276.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=2_27055276.cuts
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=2_27055276.indx
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=198_spec=2_27055276.log
found process for pidx=1
kill process for pidx=1
found process for pidx=2
Result: safe in 42.5116 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 288, 1, 674] with unstable size 287 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 32, 1, 674] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [287]; unstable size 287; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 32, 1, 287] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.81797135, -0.16427088,  0.28392243, -0.02352804,  0.05720639,
          0.13988906,  0.34796584,  2.02355814, -0.78494549]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
         -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.46it/s]100%|██████████| 1/1 [00:00<00:00,  7.45it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-20.00846672, -19.10502815, -19.10246658, -18.60502434, -18.97018051,
          -19.00593376, -17.74817657, -19.73847771, -21.61167336, -18.23115921],
         [-20.00846672, -19.10502815, -19.10246658, -18.60502434, -18.97018051,
          -19.00593376, -17.74817657, -19.73847771, -21.61167336, -18.23115921]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.35685158, 0.85684776, 0.48298264]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1375 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 3.6754629611968994
alpha/beta optimization time: 1.387779951095581
initial alpha-crown bounds: tensor([[ 0.93886733,  0.00690556,  0.35141182,  0.04002166,  0.13587260,
          0.21446091,  0.44984066,  2.16908216, -0.63099957]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6309995651245117
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6501 seconds.
lower bounds for all target labels: [0.9388673901557922, 0.006901264190673828, 0.3514111042022705, 0.040020883083343506, 0.13587236404418945, 0.214461088180542, 0.44984060525894165, 2.169081449508667, -0.6310024261474609]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
parallel save mip model to /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=199_spec=8_27059514.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=199_spec=8_27059514.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 60780 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.2909119129181
Verifying property 0 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1690821647644043.

Properties batch 1, size 1
Remaining timeout: 198.09731817245483
Verifying property 1 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9388673305511475.

Properties batch 2, size 1
Remaining timeout: 197.97511649131775
Verifying property 2 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4498406648635864.

Properties batch 3, size 1
Remaining timeout: 197.85668635368347
Verifying property 3 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3514118194580078.

Properties batch 4, size 1
Remaining timeout: 197.74045968055725
Verifying property 4 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.21446090936660767.

Properties batch 5, size 1
Remaining timeout: 197.62243103981018
Verifying property 5 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.13587260246276855.

Properties batch 6, size 1
Remaining timeout: 197.49910688400269
Verifying property 6 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.040021657943725586.

Properties batch 7, size 1
Remaining timeout: 197.35626816749573
Verifying property 7 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.006905555725097656.

Properties batch 8, size 1
Remaining timeout: 197.22578072547913
Verifying property 8 with 1 instances.
##### Instance 199 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.63099957]], device='cuda:0') need to verify.
Model prediction is: tensor([-19.63621330, -19.31394958, -18.21076202, -17.92309380, -18.10323524,
        -18.31404495, -16.63964081, -19.00939178, -21.36870193, -18.44220543],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.63099957]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 674
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 282
Node /15 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 987
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009968280792236328
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0595    transfer 0.0001    finalize 0.0002    func 0.0600    
Accumulated time: func 0.0600    prepare 0.0003    bound 0.0595    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 72] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 20] 
split level 3: [/input-12, 7] 
split level 4: [/input-12, 68] 
split level 5: [/input-12, 86] 
split level 6: [/input-12, 32] 
split level 7: [/input-12, 59] 
split level 8: [/input-8, 868] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 15] 
split level 11: [/input-12, 14] 
split level 12: [/input-8, 870] 
split level 13: [/input-8, 36] 
split level 14: [/input-8, 155] 
split level 15: [/input-8, 467] 
split level 16: [/input-8, 1057] 
split level 17: [/input-8, 438] 
split level 18: [/input-8, 877] 
split level 19: [/input-8, 1379] 
split level 20: [/input, 2950] 
split level 21: [/input-8, 1126] 
split level 22: [/input-8, 149] 
split level 23: [/input-8, 430] 
split level 24: [/input-8, 1563] 
split level 25: [/input, 2949] 
split level 26: [/input-8, 35] 
split level 27: [/input-8, 883] 
split level 28: [/input-8, 1380] 
split level 29: [/input-8, 156] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 466] 
split level 32: [/input-8, 382] 
split level 33: [/input-8, 1571] 
split level 34: [/input-8, 1378] 
split level 35: [/input-8, 461] 
split level 36: [/input-8, 451] 
split level 37: [/input-8, 34] 
split level 38: [/input-8, 1124] 
split level 39: [/input-8, 442] 
split level 40: [/input-8, 1061] 
split level 41: [/input-8, 1044] 
split level 42: [/input-8, 1036] 
split level 43: [/input-8, 1053] 
split level 44: [/input, 2916] 
split level 45: [/input-8, 1388] 
split level 46: [/input-8, 1370] 
split level 47: [/input-8, 1628] 
split level 48: [/input, 389] 
split level 49: [/input-8, 944] 
split level 50: [/input-8, 1387] 
split level 51: [/input-8, 1027] 
split level 52: [/input-8, 1562] 
split level 53: [/input-8, 773] 
split level 54: [/input-8, 413] 
split level 55: [/input-8, 1509] 
split level 56: [/input-8, 1381] 
split level 57: [/input-8, 441] 
split level 58: [/input, 935] 
split level 59: [/input-8, 1382] 
split level 60: [/input-8, 182] 
split level 61: [/input-8, 1738] 
split level 62: [/input-8, 125] 
split level 63: [/input-8, 179] 
split level 64: [/input, 887] 
split level 65: [/input-8, 1358] 
split level 66: [/input-8, 945] 
split level 67: [/input-8, 1620] 
split level 68: [/input-8, 1355] 
split level 69: [/input-8, 884] 
split level 70: [/input-8, 446] 
split level 71: [/input-8, 119] 
split level 72: [/input-8, 1369] 
split level 73: [/input-8, 1386] 
split level 74: [/input-8, 1389] 
split level 75: [/input-12, 56] 
split level 76: [/input-12, 57] 
split level 77: [/input-8, 1109] 
split level 78: [/input, 650] 
split level 79: [/input-8, 955] 
split level 80: [/input, 343] 
split level 81: [/input, 138] 
split level 82: [/input-8, 1390] 
split level 83: [/input-8, 1612] 
split level 84: [/input-8, 410] 
split level 85: [/input-8, 212] 
split level 86: [/input-8, 20] 
split level 87: [/input, 937] 
split level 88: [/input, 155] 
split level 89: [/input-8, 140] 
split level 90: [/input, 134] 
split level 91: [/input, 916] 
split level 92: [/input, 2743] 
split level 93: [/input, 1481] 
split level 94: [/input-8, 1359] 
split level 95: [/input-8, 1621] 
split level 96: [/input, 117] 
split level 97: [/input-8, 585] 
split level 98: [/input-8, 402] 
split level 99: [/input, 1453] 
split level 100: [/input, 1451] 
split level 101: [/input, 156] 
split level 102: [/input-8, 1613] 
split level 103: [/input-8, 1739] 
split level 104: [/input-8, 1385] 
split level 105: [/input-8, 863] 
split level 106: [/input-8, 304] 
split level 107: [/input, 1499] 
split level 108: [/input, 917] 
split level 109: [/input-8, 1247] 
split level 110: [/input, 169] 
split level 111: [/input-8, 403] 
split level 112: [/input, 116] 
split level 113: [/input-8, 1291] 
split level 114: [/input, 1454] 
split level 115: [/input, 3363] 
split level 116: [/input-8, 2027] 
split level 117: [/input, 3009] 
split level 118: [/input-8, 1398] 
split level 119: [/input-8, 1747] 
split level 120: [/input-8, 431] 
split level 121: [/input-8, 412] 
split level 122: [/input-8, 1077] 
split level 123: [/input, 1303] 
split level 124: [/input, 885] 
split level 125: [/input, 3229] 
split level 126: [/input-8, 885] 
split level 127: [/input, 3252] 
split level 128: [/input-8, 1526] 
split level 129: [/input, 181] 
split level 130: [/input-8, 404] 
split level 131: [/input, 2757] 
split level 132: [/input-8, 218] 
split level 133: [/input-8, 235] 
split level 134: [/input-8, 1678] 
split level 135: [/input-8, 733] 
split level 136: [/input-8, 1329] 
split level 137: [/input, 3292] 
split level 138: [/input, 102] 
split level 139: [/input, 3273] 
split level 140: [/input, 1514] 
split level 141: [/input-8, 220] 
split level 142: [/input, 150] 
split level 143: [/input-8, 1670] 
split level 144: [/input, 130] 
split level 145: [/input, 2716] 
split level 146: [/input, 2765] 
split level 147: [/input-8, 447] 
split level 148: [/input-8, 407] 
split level 149: [/input, 2739] 
split level 150: [/input, 857] 
split level 151: [/input-8, 578] 
split level 152: [/input-8, 1622] 
split level 153: [/input-8, 176] 
split level 154: [/input, 2667] 
split level 155: [/input-8, 440] 
split level 156: [/input, 649] 
split level 157: [/input, 648] 
split level 158: [/input-8, 969] 
split level 159: [/input, 2751] 
split level 160: [/input-8, 1331] 
split level 161: [/input-8, 229] 
split level 162: [/input-8, 278] 
split level 163: [/input, 216] 
split level 164: [/input-8, 411] 
split level 165: [/input, 905] 
split level 166: [/input, 165] 
split level 167: [/input-8, 87] 
split level 168: [/input, 876] 
split level 169: [/input, 841] 
split level 170: [/input-8, 1219] 
split level 171: [/input-8, 296] 
split level 172: [/input, 2875] 
split level 173: [/input-8, 59] 
split level 174: [/input-8, 1539] 
split level 175: [/input-8, 961] 
split level 176: [/input, 235] 
split level 177: [/input-8, 174] 
split level 178: [/input-8, 62] 
split level 179: [/input, 1509] 
split level 180: [/input-8, 439] 
split level 181: [/input-8, 909] 
split level 182: [/input, 956] 
split level 183: [/input-8, 211] 
split level 184: [/input-8, 355] 
split level 185: [/input, 2766] 
split level 186: [/input, 2674] 
split level 187: [/input, 844] 
split level 188: [/input, 2720] 
split level 189: [/input, 1767] 
split level 190: [/input-8, 928] 
split level 191: [/input-8, 284] 
split level 192: [/input-8, 14] 
split level 193: [/input, 24] 
split level 194: [/input, 939] 
split level 195: [/input-8, 130] 
split level 196: [/input, 1165] 
split level 197: [/input, 1768] 
split level 198: [/input-8, 1347] 
split level 199: [/input, 1130] 
Time: prepare 0.0064    bound 0.1077    transfer 0.0081    finalize 0.0070    func 0.1293    
Accumulated time: func 0.1893    prepare 0.0171    bound 0.1672    transfer 0.0082    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.33893442) min lb tensor(-0.63083935)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.016193866729736328 
BICCOS Cumulative time: 0.016193866729736328
Preprocessing time: 0.014031648635864258 Inference time: 0.00044226646423339844 Add cuts time: 0.00017595291137695312 Cut analysis time: 0.0015439987182617188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.60489 (1), -0.60481 (1), -0.60424 (1), -0.60408 (1), -0.60220 (1), -0.60144 (1), -0.60138 (1), -0.60124 (1), -0.60065 (1), -0.59956 (1), -0.59949 (1), -0.59679 (1), -0.59613 (1), -0.59579 (1), -0.59523 (1), -0.59267 (1), -0.59182 (1), -0.59134 (1), -0.59100 (1), -0.59061 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5583    set_bounds 0.0191    solve 0.1295    add 0.1877    
Accumulated time: pickout 0.0004    decision 0.5583    set_bounds 0.0191    solve 0.1295    add 0.1877    
Current (lb-rhs): -0.6048884391784668
50 domains visited
Cumulative time: 0.9907793998718262

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 20] [/input-12, 18] 
split level 2: [/input-12, 20] [/input-12, 86] [/input-12, 86] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 20] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.566215991973877
10 lb beta sum: 1.4109927415847778, worst -0.4495919346809387
Time: prepare 0.0076    bound 0.1290    transfer 0.0010    finalize 0.0051    func 0.1461    
Accumulated time: func 0.3354    prepare 0.0250    bound 0.2962    transfer 0.0092    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.56413484) min lb tensor(-0.44907963)
Number of Verified Splits: 152 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.028896331787109375 
BICCOS Cumulative time: 0.0450901985168457
Preprocessing time: 0.015263557434082031 Inference time: 0.009839773178100586 Add cuts time: 0.0025691986083984375 Cut analysis time: 0.0012238025665283203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21996 (2), -0.21952 (2), -0.21895 (2), -0.21651 (2), -0.21570 (2), -0.21541 (2), -0.21508 (2), -0.21464 (2), -0.21432 (2), -0.21055 (2), -0.20996 (2), -0.20925 (2), -0.20922 (2), -0.20887 (2), -0.20832 (2), -0.20691 (2), -0.20646 (2), -0.20531 (2), -0.20491 (2), -0.20347 (2), 
Length of domains: 50
Time: pickout 0.0034    decision 0.0210    set_bounds 0.0137    solve 0.1464    add 0.2210    
Accumulated time: pickout 0.0038    decision 0.5792    set_bounds 0.0328    solve 0.2758    add 0.4087    
Current (lb-rhs): -0.21996045112609863
100 domains visited
Cumulative time: 1.425832748413086

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 7] [/input-12, 7] [/input-12, 20] [/input-12, 20] [/input-12, 86] [/input-12, 7] 
split level 3: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 7] [/input-12, 7] [/input-12, 32] [/input-12, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3657984733581543
10 lb beta sum: 1.3766350746154785, worst -0.20603954792022705
Time: prepare 0.0077    bound 0.1422    transfer 0.0011    finalize 0.0044    func 0.1592    
Accumulated time: func 0.4947    prepare 0.0331    bound 0.4383    transfer 0.0103    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.62425983) min lb tensor(-0.20534670)
Number of Verified Splits: 224 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.03088974952697754 
BICCOS Cumulative time: 0.07597994804382324
Preprocessing time: 0.013829946517944336 Inference time: 0.011137247085571289 Add cuts time: 0.004970073699951172 Cut analysis time: 0.0009524822235107422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10091 (3), -0.09691 (3), -0.09672 (3), -0.09536 (3), -0.07721 (3), -0.07668 (3), -0.07480 (3), -0.07458 (3), -0.07423 (3), -0.07399 (3), -0.07382 (3), -0.06945 (3), -0.06889 (3), -0.06865 (3), -0.06779 (3), -0.06768 (3), -0.06607 (3), -0.06457 (3), -0.06450 (3), -0.06291 (3), 
Length of domains: 50
Time: pickout 0.0022    decision 0.0245    set_bounds 0.0177    solve 0.1594    add 0.2624    
Accumulated time: pickout 0.0060    decision 0.6038    set_bounds 0.0505    solve 0.4352    add 0.6711    
Current (lb-rhs): -0.10090994834899902
150 domains visited
Cumulative time: 1.9301824569702148

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] 
split level 2: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] 
split level 3: [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-12, 86] [/input-8, 868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2571711540222168
10 lb beta sum: 2.041074752807617, worst -0.07906246185302734
Time: prepare 0.0079    bound 0.1708    transfer 0.0010    finalize 0.0056    func 0.1881    
Accumulated time: func 0.6827    prepare 0.0413    bound 0.6092    transfer 0.0113    finalize 0.0223    
all_split False
======================Cut inference begins======================
max lb tensor(0.44942188) min lb tensor(-0.07731080)
Number of Verified Splits: 347 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 34
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.05012941360473633 
BICCOS Cumulative time: 0.12610936164855957
Preprocessing time: 0.01684713363647461 Inference time: 0.019852638244628906 Add cuts time: 0.012100696563720703 Cut analysis time: 0.0013289451599121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02959 (4), -0.02958 (4), -0.02957 (4), -0.02957 (4), -0.02955 (4), -0.02954 (4), -0.02952 (4), -0.02949 (4), -0.02921 (4), -0.02921 (4), -0.02919 (4), -0.02914 (4), -0.02894 (4), -0.02893 (4), -0.02891 (4), -0.02883 (4), -0.02701 (4), -0.02701 (4), -0.02700 (4), -0.02699 (4), 
Length of domains: 32
Time: pickout 0.0080    decision 0.0246    set_bounds 0.0170    solve 0.1882    add 0.3301    
Accumulated time: pickout 0.0141    decision 0.6284    set_bounds 0.0675    solve 0.6235    add 1.0011    
Current (lb-rhs): -0.029586076736450195
182 domains visited
Cumulative time: 2.5487008094787598

Shallow-BaB round 5
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 18] [/input-12, 18] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 7] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 18] [/input-12, 7] [/input-12, 7] 
split level 2: [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-12, 7] [/input-8, 868] [/input-8, 868] [/input-8, 868] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 4: [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] [/input-8, 870] 
split level 5: [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] [/input-8, 155] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23261499404907227

all verified at 5th iter
Time: prepare 0.0070    bound 0.0506    transfer 0.0073    finalize 0.0030    func 0.0710    
Accumulated time: func 0.7537    prepare 0.0487    bound 0.6598    transfer 0.0186    finalize 0.0253    
all_split False
======================Cut inference begins======================
max lb tensor(0.52575493) min lb tensor(0.00087857)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
Matched cut cplex process, internal label idx = 8
Trying to loading cuts from /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=199_spec=8_27059514.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 34
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.04331779479980469 
BICCOS Cumulative time: 0.16942715644836426
Preprocessing time: 0.01178431510925293 Inference time: 0.020649194717407227 Add cuts time: 0.007311582565307617 Cut analysis time: 0.003572702407836914
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0017    decision 0.0259    set_bounds 0.0143    solve 0.0711    add 0.0314    
Accumulated time: pickout 0.0157    decision 0.6543    set_bounds 0.0818    solve 0.6946    add 1.0325    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
182 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.63023647e+30, 1.89148471e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 72]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.63023647e+30, 6.27065718e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 3.64284575e-01, 1.37297381e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 72]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.63023647e+30, 3.64284575e-01, 4.53524172e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.65588224e-01, 1.45734474e-01, 1.78814400e-02,
        3.45724165e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.65588224e-01, 1.45734474e-01, 1.78814400e-02,
        3.12316883e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 2.65588224e-01, 1.45734474e-01, 4.82242167e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.65588224e-01, 1.41786620e-01, 1.91253889e-02,
        3.43751252e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72, 18]), tensor([ 1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.63023647e+30, 2.65588224e-01, 1.41786620e-01, 1.91253889e-02,
        3.05251349e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([20, 86, 32, 72]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.63023647e+30, 2.65588224e-01, 1.41786620e-01, 4.61320102e-01]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.275270938873291

all verified at 3th iter
Time: prepare 0.0005    bound 0.0374    transfer 0.0004    finalize 0.0003    func 0.0386    
Accumulated time: func 0.7923    prepare 0.0492    bound 0.6972    transfer 0.0190    finalize 0.0255    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 8
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=199_spec=8_27059514.mps
removing /tmp/abcrown_cuts_150/cplexmip_lay-16_starttime=1730269292_idx=199_spec=8_27059514.log
found process for pidx=8
Result: safe in 5.8444 seconds
############# Summary #############
Final verified acc: 56.00000000000001% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 112 , total falsified (unsafe/sat): 85 , timeout: 3
mean time for ALL instances (total 200):6.490073656781412, max time: 255.4850389957428
mean time for verified SAFE instances(total 112): 5.237612366676331, max time: 154.31160306930542
mean time for verified (SAFE + UNSAFE) instances (total 197): 3.0089615286909384, max time: [2.3505160808563232, 12.411180019378662, 0.03538680076599121, 0.03848624229431152, 0.05786538124084473, 154.31160306930542, 0.06909751892089844, 0.0500643253326416, 0.33268189430236816, 4.185238838195801, 0.07740497589111328, 0.05104827880859375, 0.06324362754821777, 5.416635036468506, 0.06373810768127441, 0.04850959777832031, 0.06550955772399902, 0.0650944709777832, 0.05261707305908203, 0.06336617469787598, 0.04283308982849121, 3.675745725631714, 0.0548863410949707, 0.031818389892578125, 0.06354403495788574, 0.05856013298034668, 0.046381473541259766, 4.01177453994751, 0.07621359825134277, 0.0664677619934082, 0.05350804328918457, 3.9413254261016846, 0.06786084175109863, 24.892534971237183, 0.07226276397705078, 0.06762528419494629, 4.8336474895477295, 46.58451223373413, 4.806010961532593, 0.06959962844848633, 0.07047772407531738, 0.0671842098236084, 0.06605148315429688, 0.06410336494445801, 0.0660407543182373, 0.04838895797729492, 25.7418110370636, 0.06316876411437988, 0.06752443313598633, 23.967683792114258, 0.06435060501098633, 0.06684517860412598, 0.061425209045410156, 4.1934850215911865, 4.263217926025391, 0.418607234954834, 0.06390380859375, 4.548856019973755, 0.06651902198791504, 0.06671357154846191, 0.06395363807678223, 4.742594003677368, 0.033789634704589844, 0.04655051231384277, 0.048595428466796875, 0.025028228759765625, 0.03517580032348633, 4.387548923492432, 0.15973949432373047, 34.980056285858154, 0.036943674087524414, 3.8560097217559814, 0.17310023307800293, 4.941612482070923, 0.05958271026611328, 21.99380350112915, 0.0744168758392334, 0.06591916084289551, 0.02971959114074707, 0.04359173774719238, 0.062490224838256836, 0.0652768611907959, 0.0655674934387207, 0.04534745216369629, 35.31450414657593, 0.042159080505371094, 10.991647958755493, 0.06886911392211914, 4.137203931808472, 0.13965487480163574, 36.31094694137573, 0.0462491512298584, 0.04829835891723633, 0.06209850311279297, 0.06462526321411133, 0.5592646598815918, 0.07058501243591309, 0.06353378295898438, 0.06580138206481934, 5.538492918014526, 0.0764472484588623, 7.7547829151153564, 0.07035303115844727, 7.446308374404907, 5.2457098960876465, 0.05710196495056152, 10.48127269744873, 0.07103323936462402, 0.0658426284790039, 0.06460452079772949, 42.51161193847656, 5.844409942626953]
mean time for verified SAFE + TIMEOUT instances (total 115): 11.233582262370897, max time: [255.4850389957428, 225.6537778377533, 224.11055827140808] 
mean time for verified UNSAFE instances (total 85): 0.0723863068748923, max time: 0.18570971488952637
safe-incomplete (total 79), index: [0, 7, 8, 11, 14, 17, 18, 20, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 42, 47, 49, 51, 52, 55, 60, 62, 68, 69, 70, 71, 73, 74, 75, 79, 81, 85, 86, 89, 98, 103, 107, 109, 110, 114, 115, 116, 117, 118, 121, 131, 133, 136, 139, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 164, 166, 168, 171, 175, 177, 179, 180, 182, 186, 190, 192, 193, 197]
unsafe-pgd (total 85), index: [1, 3, 4, 5, 6, 9, 10, 12, 15, 16, 21, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 58, 61, 63, 65, 72, 78, 80, 82, 84, 87, 88, 90, 91, 92, 94, 95, 96, 99, 100, 101, 102, 105, 106, 108, 112, 113, 119, 122, 123, 124, 125, 126, 128, 129, 130, 134, 138, 141, 143, 145, 149, 150, 151, 152, 155, 156, 163, 165, 167, 169, 170, 173, 174, 176, 178, 183, 184, 188, 194, 195, 196]
safe (total 33), index: [2, 13, 19, 24, 38, 48, 54, 57, 64, 66, 67, 77, 83, 93, 97, 104, 111, 120, 127, 132, 135, 137, 154, 158, 160, 162, 181, 185, 187, 189, 191, 198, 199]
unknown (total 3), index: [59, 76, 172]
